/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:37:09 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.DoubleBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import pythagoras.d.IQuaternion;
import pythagoras.d.IVector3;
import pythagoras.d.Quaternion;
import pythagoras.d.Vector3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Quaternion_ESTest extends Quaternion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3(979.4245552951966, 3.3031103881329966, 0.0);
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ((IVector3) vector3_0);
      quaternion1.toAngles();
      Random.setNextRandom(5858);
      Quaternion quaternion2 = quaternion0.fromAngleAxis((-644.0), 0.5, 979.4245552951966, 0.01324660552058789);
      MockRandom mockRandom0 = new MockRandom((-1L));
      quaternion2.randomize(mockRandom0);
      quaternion2.transformUnitX(vector3_0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Quaternion quaternion1 = new Quaternion(1.0, (-3.4028234663852886E38), 0.0, 0.0);
      quaternion1.integrate((IVector3) vector3_0, 2.938736052218037E-39, quaternion0);
      quaternion1.integrateLocal(vector3_0, (-0.29641170433625547));
      quaternion0.toAngles();
      quaternion0.fromVectorFromNegativeZ((-1.0), 605.7970994, 0.7071058178018585);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = new Vector3(0.0, 0.0, 1.0);
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ((IVector3) vector3_0);
      Vector3 vector3_1 = quaternion0.toAngles();
      quaternion1.fromVectors(vector3_1, vector3_1);
      quaternion0.toAngles();
      quaternion1.set(0.0, 3.141592653589793, 3.141592653589793, (-695.6836421));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = quaternion0.set(3738.3517, 1.0, 1.0, 3738.3517);
      Vector3 vector3_0 = new Vector3(3738.3517, 5432.063567336279, 3738.3517);
      Vector3 vector3_1 = new Vector3();
      Vector3 vector3_2 = vector3_1.cross((IVector3) vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_1);
      quaternion1.hasNaN();
      Quaternion quaternion3 = new Quaternion(1.0, 1.5707963267948966, Double.NaN, (-657.98415493134));
      quaternion1.set((-1848.0860607456232), Double.NaN, 258.6514027283828, 1.0);
      quaternion2.transformAndAdd(vector3_1, vector3_0, vector3_2);
      quaternion3.w();
      quaternion0.toAngles();
      Object object0 = new Object();
      Quaternion quaternion4 = new Quaternion(Double.NaN, 0.0, (-1949.74), (-3158.99118595));
      quaternion0.hasNaN();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = vector3_0.cross((IVector3) vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_0);
      quaternion2.equals(quaternion0);
      Quaternion quaternion3 = quaternion2.set((IQuaternion) quaternion1);
      Quaternion quaternion4 = quaternion2.set(Double.NaN, 0.0, 0.0, 0.0);
      Quaternion quaternion5 = quaternion2.fromAngleAxis(0.0, Double.NaN, 0.0, 1.0);
      Quaternion quaternion6 = quaternion4.invertLocal();
      Quaternion quaternion7 = quaternion1.fromAngles((-0.7071067811865476), 0.9343270784342321, (-260.571614317));
      quaternion7.z = 0.03121827159679943;
      Vector3 vector3_2 = new Vector3(vector3_1);
      Quaternion quaternion8 = quaternion5.fromAxes(vector3_1, vector3_0, vector3_0);
      quaternion8.slerp((IQuaternion) quaternion3, (-697.0));
      vector3_0.normalizeLocal();
      Quaternion quaternion9 = new Quaternion((-400.6), 0.5, (-1.5707963267948966), 0.5);
      Quaternion quaternion10 = quaternion7.invert(quaternion5);
      quaternion1.equals(quaternion4);
      Vector3 vector3_3 = quaternion7.transformUnitX(vector3_0);
      quaternion4.w();
      quaternion3.transformUnitZ(vector3_1);
      quaternion4.toAngles();
      quaternion5.hasNaN();
      quaternion10.normalize(quaternion3);
      quaternion6.fromAngles(vector3_3);
      // Undeclared exception!
      try { 
        quaternion6.set((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.transform((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transform((IVector3) vector3_0);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertNotNull(vector3_1);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      quaternion0.toAngles();
      Quaternion quaternion2 = quaternion0.integrate((IVector3) vector3_0, 0.0, quaternion1);
      quaternion1.toString();
      quaternion0.hasNaN();
      quaternion1.fromAngleAxis(0.0, 0.0, 0.0, 0.0);
      Quaternion quaternion3 = quaternion0.slerp((IQuaternion) quaternion1, 3.141592653589793, quaternion1);
      MockRandom mockRandom0 = new MockRandom();
      Quaternion quaternion4 = quaternion0.randomize(mockRandom0);
      quaternion4.slerpLocal(quaternion0, 0.7236067937262773);
      quaternion1.transformUnitX(vector3_1);
      Vector3 vector3_2 = quaternion0.toAngles(vector3_1);
      quaternion0.transform((IVector3) vector3_1, vector3_2);
      quaternion4.invert();
      quaternion3.toString();
      quaternion2.invert();
      quaternion4.normalizeLocal();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.randomize((java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.set((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = new Vector3(1048.90638806501, 1048.90638806501, 0.0);
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.slerp((IQuaternion) quaternion0, 1048.90638806501);
      Quaternion quaternion3 = new Quaternion((-730.28648), (-0.5), 22.90640072190533, 6.283185307179586);
      quaternion1.invert(quaternion2);
      Quaternion quaternion4 = new Quaternion(quaternion1);
      Object object0 = new Object();
      quaternion4.equals(object0);
      Quaternion quaternion5 = (Quaternion)Quaternion.IDENTITY;
      quaternion5.transformUnitX(vector3_0);
      quaternion2.w();
      quaternion3.toAngles();
      quaternion2.hasNaN();
      quaternion2.normalize(quaternion3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      quaternion0.fromAxes(vector3_0, vector3_0, vector3_1);
      quaternion0.hasNaN();
      quaternion0.normalizeLocal();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_0);
      quaternion2.equals(quaternion0);
      quaternion2.set((IQuaternion) quaternion1);
      quaternion2.fromAngleAxis(0.0, -0.0, 0.0, 3297.97);
      Object object0 = new Object();
      Quaternion quaternion3 = new Quaternion((-361.59902912940777), -0.0, (-361.59902912940777), -0.0);
      quaternion3.equals(quaternion0);
      quaternion3.w();
      Quaternion quaternion4 = new Quaternion();
      quaternion4.toAngles();
      quaternion4.fromAngleAxis(0.9087341323830536, (-361.59902912940777), (-1537.869077), 0.0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(0.0, 1.0, 0.0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion4 = quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      quaternion4.fromAnglesXY(0.8120164647240641, 2.0);
      Quaternion quaternion5 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.901));
      quaternion3.set((IQuaternion) quaternion5);
      quaternion1.invert(quaternion0);
      quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      quaternion1.fromAxes(vector3_2, vector3_2, vector3_2);
      Quaternion quaternion6 = new Quaternion((-2626.684618716765), 3714.193045516207, Double.NaN, Double.NaN);
      quaternion6.invert(quaternion3);
      quaternion2.equals(quaternion6);
      quaternion0.integrate((IVector3) vector3_2, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion();
      Vector3 vector3_0 = new Vector3();
      Quaternion quaternion2 = quaternion1.fromVectorFromNegativeZ((IVector3) vector3_0);
      quaternion1.slerpLocal(quaternion2, Double.NaN);
      quaternion0.fromAngleAxis(Double.NaN, (IVector3) vector3_0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-632.2352139102685), (-632.2352139102685), 0.0, (-632.2352139102685));
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      MockRandom mockRandom0 = new MockRandom();
      quaternion0.equals(quaternion0);
      quaternion0.y();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.set((IQuaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      // Undeclared exception!
      try { 
        quaternion0.transformLocal((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.integrate((IVector3) null, 5.453471882250951E79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Random.setNextRandom((-34));
      Quaternion quaternion0 = new Quaternion(102.45472291644, (-1.6314004731467887E38), (-3184.4917742057), (-3184.4917742057));
      Quaternion quaternion1 = quaternion0.fromAnglesXY((-3184.4917742057), (-1.6314004731467887E38));
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Quaternion quaternion2 = quaternion0.integrateLocal(vector3_0, (-0.08614492663784092));
      Quaternion quaternion3 = quaternion1.fromAngleAxis(0.00370932699757938, 1061.1314308, (-2446.698), 0.00370932699757938);
      Quaternion quaternion4 = quaternion0.integrate((IVector3) vector3_0, 1061.1314308, quaternion2);
      Quaternion quaternion5 = quaternion4.fromVectorFromNegativeZ((IVector3) vector3_0);
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      quaternion2.fromVectors(vector3_0, vector3_1);
      Quaternion quaternion6 = quaternion0.slerp((IQuaternion) quaternion2, 102.45472291644, quaternion1);
      Quaternion quaternion7 = new Quaternion(quaternion2);
      quaternion0.slerp((IQuaternion) quaternion6, 1620.26443602352, quaternion7);
      MockRandom mockRandom0 = new MockRandom(0L);
      Quaternion quaternion8 = quaternion2.randomize(mockRandom0);
      quaternion3.fromAnglesXY((-0.050458694336091355), (-2188.98641));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-0.9286249869191933);
      doubleArray0[1] = (-0.9286249869191933);
      doubleArray0[2] = 0.34090672304044295;
      doubleArray0[3] = 0.34090672304044295;
      doubleArray0[4] = (-257.548);
      doubleArray0[5] = (-0.050458694336091355);
      doubleArray0[6] = (-340.7367793672);
      doubleArray0[7] = 3158.049;
      Vector3 vector3_2 = new Vector3(doubleArray0);
      quaternion8.transformUnitY(vector3_2);
      quaternion5.randomize(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.toAngles((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(0.0, 0.0, 3.141592653589793, (-0.9999900000002526));
      quaternion0.slerpLocal(quaternion1, 0.0);
      quaternion1.fromAnglesXZ(3.141592653589793, 0.0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-634.183), (-634.183), 0.0, (-634.183));
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ((IVector3) vector3_0);
      MockRandom mockRandom0 = new MockRandom();
      Quaternion quaternion2 = quaternion1.randomize(mockRandom0);
      quaternion0.equals(quaternion1);
      quaternion1.invert(quaternion0);
      Quaternion quaternion3 = quaternion2.normalizeLocal();
      quaternion3.randomize(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_1.cross((IVector3) vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_1);
      quaternion2.set((IQuaternion) quaternion1);
      Quaternion quaternion3 = quaternion2.set(Double.NaN, 0.0, 0.0, 6.123233995736766E-17);
      quaternion1.fromAxes(vector3_2, vector3_1, vector3_0);
      Vector3 vector3_3 = quaternion3.transformUnitY(vector3_0);
      Quaternion quaternion4 = quaternion2.integrate((IVector3) vector3_0, 0.5);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.5;
      Vector3 vector3_4 = new Vector3(doubleArray0);
      quaternion3.integrate((IVector3) vector3_4, 1596.9123672);
      quaternion4.transformScaleAndAdd(vector3_2, 0.5, vector3_3, vector3_1);
      quaternion1.fromAnglesXZ(1.0, 0.11861177641841196);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.transformUnitX((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.multLocal((IQuaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Quaternion quaternion2 = quaternion1.multLocal(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      quaternion0.multLocal(quaternion2);
      Quaternion quaternion3 = quaternion0.integrateLocal(vector3_0, 0.0);
      quaternion1.z = 5.008545392511973E7;
      quaternion1.toAngles();
      Quaternion quaternion4 = quaternion2.integrate((IVector3) vector3_0, 979.4822463862786);
      Quaternion quaternion5 = quaternion1.fromAxes(vector3_0, vector3_0, vector3_0);
      Quaternion quaternion6 = quaternion5.set(0.9999979153387176, (-3.141592653589793), 2047.9127, 0.0);
      Vector3 vector3_1 = new Vector3(5.008545392511973E7, 5.008545392511973E7, 979.4822463862786);
      Vector3 vector3_2 = quaternion0.transformUnitX(vector3_1);
      Quaternion quaternion7 = quaternion5.multLocal(quaternion6);
      Quaternion quaternion8 = quaternion6.integrateLocal(vector3_0, 0.8164965809277261);
      Quaternion quaternion9 = new Quaternion(quaternion1);
      quaternion9.transform((IVector3) vector3_0);
      quaternion7.w = 0.9999979153387176;
      quaternion7.slerp((IQuaternion) quaternion9, 5.008545392511973E7);
      Quaternion quaternion10 = quaternion3.fromAngleAxis(0.0, (IVector3) vector3_2);
      quaternion0.y = 0.0;
      Vector3 vector3_3 = new Vector3();
      quaternion6.fromAxes(vector3_3, vector3_1, vector3_2);
      Quaternion quaternion11 = new Quaternion(0.5, (-1835.993074495), 0.5, 0.0);
      Quaternion quaternion12 = quaternion1.multLocal(quaternion11);
      quaternion10.fromVectorFromNegativeZ((IVector3) vector3_0);
      quaternion4.normalizeLocal();
      Quaternion quaternion13 = new Quaternion(quaternion5);
      quaternion8.mult((IQuaternion) quaternion13);
      quaternion12.mult((IQuaternion) quaternion9);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-632.6236103139971), (-632.6236103139971), 0.9757065721007232, (-632.6236103139971));
      quaternion0.toString();
      Vector3 vector3_0 = new Vector3((-632.6236103139971), (-632.6236103139971), 0.9757065721007232);
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ((IVector3) vector3_0);
      quaternion1.slerp((IQuaternion) quaternion0, 0.11021213159012225, quaternion0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      MockRandom mockRandom0 = new MockRandom((-1726L));
      mockRandom0.longs();
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = quaternion0.toAngles(vector3_0);
      Quaternion quaternion2 = quaternion1.randomize(mockRandom0);
      Quaternion quaternion3 = quaternion2.fromAnglesXY((-0.2628655581413474), 0.0);
      quaternion3.integrate((IVector3) vector3_1, 0.0, quaternion2);
      Vector3 vector3_2 = new Vector3(0.0, 0.0, 0.0);
      quaternion1.y = (-608.914);
      Vector3 vector3_3 = quaternion1.transformUnitY(vector3_2);
      Vector3 vector3_4 = new Vector3();
      Quaternion quaternion4 = quaternion1.fromAngles(vector3_4);
      Quaternion quaternion5 = quaternion1.slerp((IQuaternion) quaternion0, 0.0, quaternion0);
      Quaternion quaternion6 = quaternion0.set((-0.9999900000002526), -0.0, 0.9999900000002526, 3.894694734974988E9);
      Quaternion quaternion7 = quaternion6.fromVectorFromNegativeZ((IVector3) vector3_4);
      quaternion7.fromAxes(vector3_1, vector3_1, vector3_3);
      Quaternion quaternion8 = quaternion5.slerp((IQuaternion) quaternion4, -0.0);
      quaternion8.transformLocal(vector3_3);
      quaternion5.invert();
      quaternion0.toAngles();
      quaternion5.fromAngleAxis(9.999999747378752E-6, (IVector3) vector3_3);
      quaternion1.transformUnitY(vector3_3);
      quaternion0.mult((IQuaternion) quaternion1, quaternion1);
      quaternion2.transform((IVector3) vector3_2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      quaternion0.fromVectorFromNegativeZ((-1.0), (-1.0), (-1.0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.fromAxes((IVector3) null, (IVector3) null, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Quaternion quaternion1 = new Quaternion();
      quaternion0.integrate((IVector3) vector3_0, (-250.339968476962), quaternion1);
      quaternion1.multLocal(quaternion0);
      quaternion1.fromVectorFromNegativeZ((-873.86834405), (-633.183), (-0.7337573214813651));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0, 0.0, 0.0, 1394.645738994);
      Vector3 vector3_0 = new Vector3(1.0, 0.0, (-1647.246486));
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      quaternion1.w = 1394.645738994;
      Quaternion quaternion2 = quaternion1.integrate((IVector3) vector3_0, 0.0, quaternion0);
      Quaternion quaternion3 = quaternion2.invert();
      Quaternion quaternion4 = quaternion1.fromAngleAxis(2943.89066254, (IVector3) vector3_0);
      quaternion2.getRotationZ();
      Vector3 vector3_1 = new Vector3(vector3_0);
      Quaternion quaternion5 = quaternion0.fromVectorFromNegativeZ(0.5014905741189534, 1.0, 0.0);
      Quaternion quaternion6 = quaternion5.invert();
      quaternion5.slerpLocal(quaternion0, (-401.0827275059));
      Quaternion quaternion7 = quaternion3.fromAnglesXZ(0.0, 4.6316830173529565E77);
      quaternion0.transformLocal(vector3_1);
      quaternion0.transformZ(vector3_1);
      quaternion5.fromAngleAxis(923.185023, (-3.141592653589793), 2596325.2509299996, -0.0);
      quaternion3.hashCode();
      quaternion7.z();
      Quaternion quaternion8 = quaternion3.slerp((IQuaternion) quaternion5, (-2764.2688619), quaternion6);
      assertEquals((-0.6905193852952793), quaternion5.x, 0.01);
      assertEquals(0.4275848659513061, quaternion8.x(), 0.01);
      
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_3 = quaternion4.transformAndAdd(vector3_2, vector3_2, vector3_0);
      quaternion0.fromAxes(vector3_3, vector3_3, vector3_3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      Quaternion quaternion1 = new Quaternion(0.0, (-2269.41821658), (-3462.268054406942), 0.4171825408307041);
      quaternion1.toString();
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      quaternion1.transformUnitZ(vector3_1);
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_X;
      Quaternion quaternion2 = quaternion0.fromVectorFromNegativeZ((IVector3) vector3_2);
      Quaternion quaternion3 = quaternion0.slerp((IQuaternion) quaternion2, (-206.3448203), quaternion1);
      quaternion3.mult((IQuaternion) quaternion0);
      quaternion2.fromVectorFromNegativeZ((IVector3) vector3_0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_1.cross((IVector3) vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_1);
      quaternion2.equals(quaternion0);
      Quaternion quaternion3 = quaternion2.set((IQuaternion) quaternion1);
      Quaternion quaternion4 = quaternion2.set(Double.NaN, 0.0, 0.0, (-3.4028234663852886E38));
      quaternion2.set((-0.7337573214813651), (-0.7337573214813651), 3297.97, 2.0);
      Quaternion quaternion5 = quaternion2.fromAngleAxis(0.0, 3.4028234663852886E38, 0.0, 3297.97);
      Quaternion quaternion6 = quaternion1.fromAngles((-0.7071067811865476), (-2332.8), (-260.571614317));
      Vector3 vector3_3 = (Vector3)Vector3.UNIT_Z;
      quaternion5.fromAxes(vector3_2, vector3_0, vector3_0);
      Quaternion quaternion7 = new Quaternion((-400.6), 0.5, (-1.5707963267948966), (-3.4028234663852886E38));
      quaternion7.slerp((IQuaternion) quaternion5, 3.4028234663852886E38);
      quaternion3.invert(quaternion5);
      quaternion1.equals(quaternion4);
      quaternion6.transformUnitX(vector3_0);
      quaternion4.w();
      Vector3 vector3_4 = quaternion4.toAngles();
      quaternion4.equals((Object) null);
      quaternion3.fromAngleAxis(0.3602680647904435, (IVector3) vector3_4);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-634.183), (-634.183), 0.0, (-634.183));
      quaternion0.toString();
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ((-0.5), (-634.183), (-634.183));
      quaternion0.set((IQuaternion) quaternion1);
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      Quaternion quaternion2 = new Quaternion(Double.NaN, (-2626.684618716765), (-1.7014117331926443E38), (-1329.58813706768));
      Quaternion quaternion3 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion4 = new Quaternion((-1329.58813706768), 4149.67404757, 2625.977511929171, 0.0);
      Quaternion quaternion5 = (Quaternion)Quaternion.IDENTITY;
      quaternion1.equals(quaternion5);
      quaternion4.set((-3695.3478037761583), (-2626.684618716765), 10.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      // Undeclared exception!
      try { 
        quaternion0.transformScaleAndAdd(vector3_0, (-1606.9), vector3_0, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_1 = new Vector3();
      Vector3 vector3_2 = new Vector3(vector3_1);
      vector3_2.mult(0.0, vector3_1);
      Vector3 vector3_3 = vector3_1.mult(0.0, vector3_2);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_1);
      Random.setNextRandom((-1));
      quaternion2.integrate((IVector3) vector3_3, 0.0, quaternion1);
      Quaternion quaternion3 = quaternion2.fromAngles(2695.74473196368, (-1608751.309956), 0.0);
      quaternion3.z = 284.2;
      Quaternion quaternion4 = quaternion0.slerpLocal(quaternion2, 4.167256866172245E22);
      Quaternion quaternion5 = quaternion4.normalize();
      quaternion5.transform((IVector3) vector3_1, vector3_2);
      Quaternion quaternion6 = quaternion4.set((-1792.15), 284.2, 284.2, 1.0);
      // Undeclared exception!
      try { 
        quaternion6.transformAndAdd(vector3_0, (IVector3) null, vector3_1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-634.183), (-634.183), 0.0, (-634.183));
      quaternion0.toString();
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Quaternion quaternion2 = quaternion1.invert();
      quaternion2.w();
      Vector3 vector3_1 = quaternion1.toAngles();
      Object object0 = new Object();
      Quaternion quaternion3 = (Quaternion)Quaternion.IDENTITY;
      quaternion0.equals(quaternion3);
      Vector3 vector3_2 = new Vector3((-634.183), 0.0, 1433.568796498);
      quaternion1.fromAngles(vector3_2);
      quaternion1.hasNaN();
      quaternion0.fromVectors(vector3_1, vector3_1);
      quaternion0.normalizeLocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        quaternion0.transform((IVector3) null, vector3_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1327.25), (-1327.25), (-1327.25), 2.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-1327.25);
      doubleArray0[3] = (-3478.1123);
      doubleArray0[4] = (-375.0776562);
      quaternion0.w = (-1327.25);
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (-1327.25);
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      Quaternion quaternion2 = new Quaternion(quaternion0);
      quaternion2.hashCode();
      Quaternion quaternion3 = quaternion2.slerp((IQuaternion) quaternion0, 2.0, quaternion0);
      quaternion3.set((-1327.25), (-1133.033), 9.999999747378752E-6, (-1327.25));
      Random.setNextRandom((-4457));
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        quaternion1.transform((IVector3) null, vector3_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      vector3_1.cross((IVector3) vector3_0, vector3_0);
      quaternion1.fromVectors(vector3_0, vector3_1);
      quaternion0.hasNaN();
      Quaternion quaternion2 = quaternion1.fromAngles(0.0, 0.0, 0.0);
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      Quaternion quaternion3 = quaternion2.fromAxes(vector3_2, vector3_1, vector3_0);
      Quaternion quaternion4 = new Quaternion(0.0, Double.NaN, (-3.4028234663852886E38), Double.NaN);
      Quaternion quaternion5 = new Quaternion();
      Quaternion quaternion6 = quaternion5.invert(quaternion1);
      quaternion4.equals(quaternion2);
      quaternion2.transformUnitX(vector3_0);
      quaternion6.w();
      quaternion0.toAngles();
      Object object0 = new Object();
      quaternion3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      // Undeclared exception!
      try { 
        quaternion0.fromVectors((IVector3) null, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      Vector3 vector3_2 = vector3_1.cross((IVector3) vector3_0, vector3_0);
      quaternion1.set(0.0, 0.0, 0.0, (-3.4028234663852886E38));
      quaternion0.equals(quaternion1);
      Object object0 = new Object();
      Quaternion quaternion2 = quaternion1.fromVectorFromNegativeZ((IVector3) vector3_2);
      quaternion2.slerp((IQuaternion) quaternion0, Double.NaN, quaternion0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      quaternion0.transformLocal(vector3_0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      Quaternion quaternion4 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      Quaternion quaternion5 = quaternion3.set((IQuaternion) quaternion4);
      quaternion5.slerp((IQuaternion) quaternion1, Double.NaN);
      quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      quaternion1.fromAxes(vector3_1, vector3_1, vector3_1);
      Quaternion quaternion6 = new Quaternion((-2626.684618716765), 3714.193045516207, Double.NaN, Double.NaN);
      quaternion6.invert(quaternion3);
      quaternion2.equals(quaternion6);
      quaternion2.set(1.0, 1.0, Double.NaN, Double.NaN);
      quaternion3.integrateLocal(vector3_1, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-634.183), (-634.183), 0.0, (-634.183));
      quaternion0.toString();
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Object object0 = new Object();
      quaternion0.equals(object0);
      Vector3 vector3_1 = quaternion0.transformUnitX(vector3_0);
      Quaternion quaternion1 = (Quaternion)Quaternion.IDENTITY;
      quaternion1.w();
      quaternion0.toAngles();
      Quaternion quaternion2 = new Quaternion(quaternion0);
      quaternion0.equals(quaternion2);
      Quaternion quaternion3 = new Quaternion(quaternion2);
      quaternion3.invertLocal();
      quaternion2.fromVectors(vector3_1, vector3_1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Quaternion quaternion2 = new Quaternion((-397.91509556393), 0.0, 1.0, 0.0);
      quaternion1.toString();
      Vector3 vector3_2 = (Vector3)Vector3.MAX_VALUE;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[0] = (-1.5707963267948966);
      doubleArray0[3] = 0.0;
      quaternion2.slerp((IQuaternion) quaternion1, 867.7259, quaternion0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      quaternion2.set(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Random.setNextRandom(2);
      Quaternion quaternion0 = new Quaternion(102.45472291644, (-1.6314004731467887E38), (-3184.4917742057), (-3184.4917742057));
      Quaternion quaternion1 = quaternion0.fromAnglesXY((-3184.4917742057), (-1.6314004731467887E38));
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Quaternion quaternion2 = quaternion0.integrateLocal(vector3_0, (-0.08614492663784092));
      Quaternion quaternion3 = quaternion1.fromAngleAxis(0.00370932699757938, 1061.1314308, (-2446.698), 0.00370932699757938);
      Quaternion quaternion4 = quaternion0.integrate((IVector3) vector3_0, 1061.1314308, quaternion2);
      quaternion4.fromVectorFromNegativeZ((IVector3) vector3_0);
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      quaternion2.fromVectors(vector3_0, vector3_1);
      Quaternion quaternion5 = quaternion0.slerp((IQuaternion) quaternion2, 102.45472291644, quaternion1);
      Quaternion quaternion6 = new Quaternion(quaternion2);
      quaternion0.slerp((IQuaternion) quaternion5, 1620.26443602352, quaternion6);
      MockRandom mockRandom0 = new MockRandom(0L);
      Quaternion quaternion7 = quaternion2.randomize(mockRandom0);
      quaternion3.fromAnglesXY((-0.13266074289951768), (-2188.98641));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-0.8664012806210613);
      doubleArray0[1] = (-0.8664012806210613);
      doubleArray0[2] = 0.3180638315521343;
      doubleArray0[3] = 0.3180638315521343;
      doubleArray0[4] = (-257.548);
      doubleArray0[5] = (-0.13266074289951768);
      doubleArray0[6] = (-340.7367793672);
      doubleArray0[7] = 3158.049;
      Vector3 vector3_2 = new Vector3(doubleArray0);
      quaternion7.transformUnitY(vector3_2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(0.0, 1.0, 0.0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion4 = quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      quaternion4.fromAnglesXY(0.8120164647240641, 2.0);
      Quaternion quaternion5 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      Quaternion quaternion6 = quaternion3.set((IQuaternion) quaternion5);
      Quaternion quaternion7 = quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      quaternion1.fromAxes(vector3_2, vector3_2, vector3_2);
      Quaternion quaternion8 = new Quaternion((-2626.684618716765), 3714.193045516207, Double.NaN, Double.NaN);
      quaternion8.invert(quaternion3);
      quaternion2.equals(quaternion8);
      quaternion8.transformUnitX(vector3_0);
      quaternion7.w();
      quaternion1.toAngles();
      quaternion0.equals(quaternion6);
      quaternion7.invertLocal();
      quaternion7.fromVectors(vector3_0, vector3_0);
      quaternion0.toAngles();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      quaternion0.transformLocal(vector3_0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      Quaternion quaternion4 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      Quaternion quaternion5 = quaternion3.set((IQuaternion) quaternion4);
      quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      quaternion1.fromAxes(vector3_1, vector3_1, vector3_1);
      Quaternion quaternion6 = new Quaternion((-2626.684618716765), 3714.193045516207, Double.NaN, Double.NaN);
      Quaternion quaternion7 = quaternion6.invert(quaternion3);
      quaternion2.equals(quaternion6);
      quaternion2.set(1.0, 1.0, Double.NaN, Double.NaN);
      quaternion7.slerpLocal(quaternion5, (-3714.193045515567));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      quaternion0.toString();
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Quaternion quaternion2 = quaternion1.invert();
      Vector3 vector3_1 = new Vector3();
      Quaternion quaternion3 = quaternion2.fromAngles(vector3_1);
      Quaternion quaternion4 = quaternion1.normalizeLocal();
      quaternion1.w();
      Quaternion quaternion5 = new Quaternion(quaternion4);
      Quaternion quaternion6 = quaternion3.normalize(quaternion5);
      Quaternion quaternion7 = new Quaternion(0.0, 0.0, 1062.581019, 0.0);
      quaternion2.invert(quaternion6);
      quaternion5.equals(quaternion7);
      quaternion0.w();
      quaternion7.toAngles();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-634.183), (-634.183), 0.0, (-634.183));
      quaternion0.toString();
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      vector3_0.y = 0.0;
      Quaternion quaternion2 = quaternion1.invert();
      Quaternion quaternion3 = quaternion2.fromAngles(vector3_0);
      quaternion3.normalizeLocal();
      quaternion0.w();
      quaternion1.toAngles();
      quaternion0.equals(quaternion1);
      quaternion2.hasNaN();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = quaternion0.transformLocal(vector3_0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion4 = quaternion2.set((IQuaternion) quaternion1);
      quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      Quaternion quaternion5 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      quaternion3.set((IQuaternion) quaternion5);
      quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      quaternion1.fromAxes(vector3_2, vector3_2, vector3_2);
      Quaternion quaternion6 = new Quaternion(0.7071067811865476, 3714.193045516207, 0.7071067811865476, -0.0);
      quaternion6.invert(quaternion3);
      quaternion2.equals(quaternion6);
      quaternion2.set(1.0, 1.0, -0.0, -0.0);
      quaternion5.transformUnitY(vector3_2);
      quaternion3.normalize(quaternion4);
      Vector3 vector3_3 = new Vector3(doubleArray0);
      quaternion3.fromAxes(vector3_1, vector3_3, vector3_0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      Vector3 vector3_3 = vector3_1.cross((IVector3) vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_1);
      quaternion2.equals(quaternion0);
      Quaternion quaternion3 = quaternion2.set((IQuaternion) quaternion1);
      Quaternion quaternion4 = new Quaternion(0.5, 0.0, Double.NaN, 0.5);
      quaternion0.multLocal(quaternion4);
      Quaternion quaternion5 = quaternion2.set(Double.NaN, 0.0, 0.0, (-3.4028234663852886E38));
      Quaternion quaternion6 = quaternion2.fromAngleAxis(0.0, 3.4028234663852886E38, 0.0, 3297.97);
      Quaternion quaternion7 = quaternion1.fromAngles((-0.7071067811865476), (-2332.8), (-260.571614317));
      Vector3 vector3_4 = (Vector3)Vector3.UNIT_Z;
      quaternion6.fromAxes(vector3_3, vector3_0, vector3_2);
      Quaternion quaternion8 = new Quaternion((-400.6), 0.5, (-1.5707963267948966), (-3.4028234663852886E38));
      quaternion3.invert(quaternion6);
      quaternion1.equals(quaternion5);
      quaternion7.transformUnitX(vector3_2);
      quaternion5.w();
      quaternion5.toAngles();
      quaternion5.equals((Object) null);
      quaternion7.mult((IQuaternion) quaternion0, quaternion5);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.normalizeLocal();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.invert();
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_2 = vector3_0.lerpLocal(vector3_1, 3.1415826535900457);
      Quaternion quaternion3 = quaternion2.fromAxes(vector3_0, vector3_0, vector3_0);
      Vector3 vector3_3 = vector3_2.lerpLocal(vector3_1, Double.NaN);
      Quaternion quaternion4 = quaternion3.invert();
      Quaternion quaternion5 = quaternion4.fromVectorFromNegativeZ((IVector3) vector3_2);
      Quaternion quaternion6 = quaternion4.integrate((IVector3) vector3_0, Double.NaN, quaternion2);
      Quaternion quaternion7 = quaternion4.invert();
      quaternion7.slerpLocal(quaternion6, 0.0);
      quaternion7.normalizeLocal();
      quaternion1.set((IQuaternion) quaternion3);
      Quaternion quaternion8 = quaternion5.fromAngles(vector3_0);
      vector3_2.subtract((IVector3) vector3_0, vector3_3);
      Quaternion quaternion9 = quaternion1.fromVectorFromNegativeZ((-2427.6), 0.0, 1524.550770002153);
      quaternion9.normalize(quaternion7);
      Quaternion quaternion10 = new Quaternion(Double.NaN, Double.NaN, Double.NaN, 0.0);
      Quaternion quaternion11 = quaternion2.fromAngles(vector3_2);
      quaternion5.hasNaN();
      Quaternion quaternion12 = quaternion3.multLocal(quaternion2);
      vector3_1.addScaledLocal(vector3_2, 1.0);
      quaternion12.invert();
      quaternion10.w();
      quaternion8.toAngles();
      quaternion4.equals(quaternion11);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(0.0, 1.0, 0.0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      Quaternion quaternion4 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      Quaternion quaternion5 = quaternion3.set((IQuaternion) quaternion4);
      Quaternion quaternion6 = quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      quaternion1.fromAxes(vector3_2, vector3_2, vector3_2);
      Quaternion quaternion7 = new Quaternion(0.7071067811865476, 3714.193045516207, 0.7071067811865476, -0.0);
      quaternion7.invert(quaternion3);
      quaternion2.equals(quaternion7);
      quaternion7.transformUnitX(vector3_0);
      quaternion6.w();
      quaternion1.toAngles();
      quaternion0.equals(quaternion5);
      quaternion6.invertLocal();
      quaternion6.fromVectors(vector3_0, vector3_0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      Vector3 vector3_3 = vector3_1.cross((IVector3) vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_1);
      quaternion2.equals(quaternion0);
      Quaternion quaternion3 = quaternion2.set((IQuaternion) quaternion1);
      Quaternion quaternion4 = quaternion2.set(Double.NaN, 0.0, 0.0, (-3.4028234663852886E38));
      Quaternion quaternion5 = quaternion2.fromAngleAxis(0.0, 3.4028234663852886E38, 0.0, 3297.97);
      Quaternion quaternion6 = quaternion1.fromAngles((-0.7071067811865476), (-2332.8), (-260.571614317));
      Vector3 vector3_4 = (Vector3)Vector3.UNIT_Z;
      quaternion5.fromAxes(vector3_3, vector3_0, vector3_2);
      Quaternion quaternion7 = new Quaternion((-400.6), 0.5, (-1.5707963267948966), (-3.4028234663852886E38));
      quaternion3.invert(quaternion5);
      quaternion1.equals(quaternion4);
      quaternion6.transformUnitX(vector3_2);
      quaternion4.w();
      quaternion4.toAngles();
      quaternion4.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(0.0, 1.0, 0.0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion4 = quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      Quaternion quaternion5 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      Quaternion quaternion6 = quaternion5.set((IQuaternion) quaternion3);
      quaternion3.slerp((IQuaternion) quaternion0, Double.NaN);
      Quaternion quaternion7 = quaternion0.fromAngles((-276.9013830329), 3.1415826535900457, (-276.9013830329));
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_3 = (Vector3)Vector3.NORMAL_XYZ;
      Quaternion quaternion8 = quaternion5.fromAxes(vector3_0, vector3_3, vector3_1);
      Quaternion quaternion9 = new Quaternion((-850.743023165), (-276.9013830329), 0.0, 1845.896056021994);
      Quaternion quaternion10 = new Quaternion(quaternion1);
      quaternion10.invert(quaternion6);
      quaternion10.equals(quaternion4);
      quaternion10.transformUnitX(vector3_1);
      quaternion3.w();
      quaternion3.toAngles();
      quaternion7.equals(quaternion8);
      quaternion6.mult((IQuaternion) quaternion7, quaternion2);
      quaternion10.invertLocal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.transformUnitY((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      vector3_1.cross((IVector3) vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_1);
      quaternion2.equals(quaternion0);
      quaternion2.set((IQuaternion) quaternion1);
      Quaternion quaternion3 = quaternion2.set(Double.NaN, 0.0, 0.0, (-3.4028234663852886E38));
      Quaternion quaternion4 = quaternion3.set((IQuaternion) quaternion1);
      Quaternion quaternion5 = quaternion0.fromAngles((-1792.15), (-736.3886), 0.5460095002606349);
      Vector3 vector3_3 = (Vector3)Vector3.UNIT_Z;
      Quaternion quaternion6 = quaternion3.fromAxes(vector3_2, vector3_2, vector3_2);
      Quaternion quaternion7 = new Quaternion((-0.5689658319987005), (-3.4028234663852886E38), 913.32083, (-0.9713256486650748));
      quaternion1.invert(quaternion3);
      Quaternion quaternion8 = (Quaternion)Quaternion.IDENTITY;
      quaternion7.equals(quaternion8);
      quaternion4.fromAngles((-675.640791), 0.0, (-0.3954967346990742));
      quaternion4.transformUnitX(vector3_1);
      quaternion2.w();
      quaternion5.toAngles();
      quaternion6.equals(quaternion4);
      quaternion6.slerp((IQuaternion) quaternion8, (-0.3526237646663314), quaternion4);
      quaternion2.invertLocal();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Quaternion quaternion2 = new Quaternion((-397.91509556393), 0.0, 1.0, 0.0);
      quaternion1.toString();
      Vector3 vector3_2 = (Vector3)Vector3.MAX_VALUE;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      quaternion0.set(doubleArray0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.5707963267948966);
      doubleArray0[3] = 0.0;
      Quaternion quaternion3 = quaternion2.slerp((IQuaternion) quaternion1, 867.7259, quaternion0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      quaternion2.set(doubleArray0);
      quaternion3.invertLocal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Quaternion quaternion0 = null;
      try {
        quaternion0 = new Quaternion((IQuaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 1.0;
      Vector3 vector3_0 = new Vector3();
      quaternion0.transformLocal(vector3_0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion4 = new Quaternion(0.0, 2905.51, 1.0, 0.0);
      Quaternion quaternion5 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      Quaternion quaternion6 = quaternion3.set((IQuaternion) quaternion5);
      quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      Quaternion quaternion7 = quaternion1.fromAxes(vector3_1, vector3_1, vector3_1);
      Quaternion quaternion8 = new Quaternion(quaternion6);
      quaternion8.invert(quaternion3);
      quaternion2.equals(quaternion8);
      quaternion2.invert();
      quaternion7.mult((IQuaternion) quaternion0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      quaternion0.transformLocal(vector3_0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      Quaternion quaternion4 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      quaternion3.set((IQuaternion) quaternion4);
      quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      quaternion1.fromAxes(vector3_1, vector3_1, vector3_1);
      Quaternion quaternion5 = new Quaternion(0.7071067811865476, 3714.193045516207, 0.7071067811865476, -0.0);
      quaternion5.invert(quaternion3);
      quaternion2.equals(quaternion5);
      quaternion2.set(1.0, 1.0, -0.0, -0.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      vector3_1.cross((IVector3) vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_1);
      quaternion2.equals(quaternion0);
      quaternion2.set((IQuaternion) quaternion1);
      Quaternion quaternion3 = quaternion2.set(Double.NaN, 0.0, 0.0, (-3.4028234663852886E38));
      Quaternion quaternion4 = quaternion2.fromAngleAxis(0.0, 3.4028234663852886E38, 0.0, 3297.97);
      quaternion4.slerpLocal(quaternion3, 3.4028234663852886E38);
      Quaternion quaternion5 = new Quaternion(0.0, 0.0, 0.0, 0.0);
      quaternion0.multLocal(quaternion3);
      quaternion2.invert();
      quaternion1.w();
      quaternion0.toAngles();
      Quaternion quaternion6 = new Quaternion(quaternion3);
      quaternion3.hasNaN();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      quaternion0.hasNaN();
      Quaternion quaternion2 = quaternion1.set(0.0, 0.5773502691896258, 0.5773502691896258, (-3.4028234663852886E38));
      quaternion0.w();
      quaternion0.equals(quaternion1);
      Object object0 = new Object();
      quaternion1.equals(object0);
      quaternion2.set(2601.6059509449856, 2902.71713, 0.5773502691896258, 1.0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Quaternion quaternion2 = new Quaternion((-397.91509556393), 0.5773502691896258, 1.0, 0.0);
      quaternion1.toString();
      Vector3 vector3_2 = (Vector3)Vector3.MAX_VALUE;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.5773502691896258;
      doubleArray0[1] = 0.5773502691896258;
      doubleArray0[2] = (-1.5707963267948966);
      doubleArray0[3] = 0.0;
      quaternion2.slerp((IQuaternion) quaternion1, 867.7259, quaternion0);
      doubleArray0[4] = 0.5773502691896258;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.5773502691896258;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.5773502691896258;
      quaternion2.set(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = quaternion1.toAngles();
      Vector3 vector3_2 = new Vector3(vector3_0);
      Vector3 vector3_3 = (Vector3)Vector3.ZERO;
      quaternion0.transform((IVector3) vector3_3);
      vector3_1.z = 3128.49817867;
      vector3_2.lerp((IVector3) vector3_1, 0.0, vector3_1);
      vector3_2.cross((IVector3) vector3_1, vector3_1);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_2);
      quaternion2.equals(quaternion0);
      Quaternion quaternion3 = quaternion0.set(3128.49817867, (-1244.45211), 0.7071067811865476, (-3908.1));
      Quaternion quaternion4 = quaternion2.fromAngleAxis(0.0, 0.0, 0.0, 0.5);
      quaternion0.slerpLocal(quaternion4, 340.03880036389097);
      Quaternion quaternion5 = new Quaternion((-3.141592653589793), 9.999999747378752E-6, (-3.4028234663852886E38), 0.0);
      quaternion3.w();
      MockRandom mockRandom0 = new MockRandom((-2373L));
      quaternion3.randomize(mockRandom0);
      quaternion2.set((-0.7071067811865476), 0.5773502691896258, (-3.4028234663852886E38), (-0.4539904997393651));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      quaternion0.transformLocal(vector3_0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      Quaternion quaternion4 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      quaternion3.set((IQuaternion) quaternion4);
      Quaternion quaternion5 = quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      Quaternion quaternion6 = quaternion1.fromAxes(vector3_1, vector3_1, vector3_1);
      Quaternion quaternion7 = new Quaternion();
      Quaternion quaternion8 = quaternion7.invert(quaternion3);
      quaternion2.equals(quaternion7);
      quaternion7.transformUnitX(vector3_0);
      quaternion5.w();
      Vector3 vector3_2 = quaternion1.toAngles();
      quaternion3.set((-1420.1009752647597), -0.0, 1590.93756, (-3.4028234663852886E38));
      quaternion6.transformUnitZ(vector3_2);
      quaternion8.fromAngleAxis((-1.1579207543382391E77), (-273.4585332374173), (-9.664705846535117E41), 9.999999747378752E-6);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-634.183), (-634.183), 0.0, (-634.183));
      quaternion0.toString();
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = new Quaternion(1.5707963267948966, 3714.193045516207, (-3809.318), (-3544.912069726));
      Quaternion quaternion2 = quaternion0.invert(quaternion1);
      Quaternion quaternion3 = new Quaternion(quaternion1);
      quaternion2.equals(quaternion3);
      quaternion0.transformUnitX(vector3_0);
      Vector3 vector3_1 = quaternion2.toAngles();
      quaternion2.equals(vector3_1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.fromAngleAxis(934.866031, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1.0), (-1.0), 0.5, 0.5);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.5;
      doubleArray0[3] = 0.5;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.5;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 1138.61;
      quaternion0.set(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-634.183), (-634.183), 0.0, (-634.183));
      quaternion0.toString();
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Quaternion quaternion2 = quaternion1.invert();
      Vector3 vector3_1 = new Vector3();
      Quaternion quaternion3 = quaternion2.fromAngles(vector3_1);
      quaternion3.normalizeLocal();
      quaternion0.w();
      quaternion1.toAngles();
      quaternion0.equals(quaternion1);
      quaternion2.hasNaN();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_1.mult((IVector3) vector3_0);
      vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      vector3_1.cross((IVector3) vector3_0, vector3_0);
      Vector3 vector3_2 = new Vector3();
      Quaternion quaternion0 = new Quaternion(1316.5434400788, (-0.7568024953079283), (-101.15602), 0.0);
      Quaternion quaternion1 = new Quaternion(quaternion0);
      quaternion1.invert(quaternion0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_0.lerp((IVector3) vector3_1, Double.NaN, vector3_1);
      vector3_1.cross((IVector3) vector3_2, vector3_2);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_1, vector3_2);
      Object object0 = new Object();
      quaternion2.equals(object0);
      Quaternion quaternion3 = quaternion1.set((IQuaternion) quaternion0);
      quaternion2.set((-541.0), 3.141592653589793, Double.NaN, (-0.4092000805625821));
      Quaternion quaternion4 = quaternion0.fromAngleAxis(3.141592653589793, (-3.4028234663852886E38), Double.NaN, 3.4028234663852886E38);
      quaternion4.invert(quaternion2);
      quaternion2.toAngles(vector3_1);
      quaternion3.slerpLocal(quaternion1, (-736.3886));
      Quaternion quaternion5 = quaternion1.invert();
      quaternion2.w();
      Vector3 vector3_3 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_4 = new Vector3((-1419.8), 1092.3088692, (-797.324));
      quaternion5.fromAxes(vector3_3, vector3_0, vector3_0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-634.183), (-634.183), 0.0, (-634.183));
      quaternion0.toString();
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Quaternion quaternion1 = new Quaternion((-634.183), (-634.183), (-55.9788681), (-634.183));
      quaternion1.w();
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_2 = new Vector3(0.0, (-1000.8245), (-634.183));
      Quaternion quaternion2 = new Quaternion();
      Vector3 vector3_3 = (Vector3)Vector3.ZERO;
      quaternion2.fromAxes(vector3_3, vector3_2, vector3_0);
      Vector3 vector3_4 = new Vector3(0.0, 10.0, 3.4028234663852886E38);
      quaternion1.transformAndAdd(vector3_3, vector3_3, vector3_4);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      Vector3 vector3_2 = vector3_1.cross((IVector3) vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_1);
      quaternion2.equals(quaternion0);
      Quaternion quaternion3 = quaternion2.set((IQuaternion) quaternion1);
      Quaternion quaternion4 = quaternion2.set(Double.NaN, Double.NaN, Double.NaN, (-3.4028234663852886E38));
      Quaternion quaternion5 = quaternion2.fromAngleAxis(0.0, 3.4028234663852886E38, Double.NaN, 3297.97);
      Quaternion quaternion6 = quaternion5.slerpLocal(quaternion4, 3.4028234663852886E38);
      quaternion6.invert();
      quaternion1.w();
      Vector3 vector3_3 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_4 = new Vector3(0.0, 0.0, 0.0);
      vector3_1.subtract((IVector3) vector3_4);
      Quaternion quaternion7 = new Quaternion();
      quaternion7.fromAxes(vector3_2, vector3_3, vector3_2);
      quaternion3.transformScaleAndAdd(vector3_2, (-1609.0), vector3_1, vector3_0);
      quaternion2.fromAnglesXY(784.4612387211685, (-0.8922636198752798));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      vector3_1.cross((IVector3) vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_1);
      quaternion2.equals(quaternion0);
      quaternion2.set((IQuaternion) quaternion1);
      Quaternion quaternion3 = quaternion2.set(Double.NaN, Double.NaN, Double.NaN, (-3.4028234663852886E38));
      Quaternion quaternion4 = quaternion2.fromAngleAxis(0.0, 3.4028234663852886E38, Double.NaN, 3297.97);
      quaternion4.slerpLocal(quaternion3, 3.4028234663852886E38);
      Quaternion quaternion5 = new Quaternion(0.0, Double.NaN, 0.0, 0.0);
      quaternion0.multLocal(quaternion3);
      quaternion2.invert();
      quaternion1.w();
      quaternion0.toAngles();
      Quaternion quaternion6 = new Quaternion(quaternion3);
      quaternion1.equals(quaternion6);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.invert((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = quaternion0.transformLocal(vector3_0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      Quaternion quaternion4 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      quaternion3.set((IQuaternion) quaternion4);
      Quaternion quaternion5 = quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      quaternion0.w();
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      quaternion1.fromAxes(vector3_2, vector3_2, vector3_2);
      Quaternion quaternion6 = new Quaternion(0.7071067811865476, 3714.193045516207, 0.7071067811865476, -0.0);
      Quaternion quaternion7 = quaternion6.invert(quaternion3);
      quaternion2.equals(quaternion6);
      quaternion6.transformUnitX(vector3_0);
      quaternion5.w();
      quaternion7.fromAxes(vector3_2, vector3_1, vector3_2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[2] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      quaternion0.transformLocal(vector3_0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion4 = quaternion0.slerpLocal(quaternion2, 599.101802);
      Quaternion quaternion5 = quaternion1.normalizeLocal();
      quaternion5.set((IQuaternion) quaternion2);
      Vector3 vector3_1 = new Vector3(599.101802, (-2367.967605409), 1.0);
      vector3_1.abs();
      Quaternion quaternion6 = quaternion4.fromAngles(vector3_1);
      Vector3 vector3_2 = new Vector3(vector3_0);
      quaternion2.fromVectorFromNegativeZ(1.0, 0.0, 1.0);
      Quaternion quaternion7 = quaternion4.invert(quaternion3);
      Quaternion quaternion8 = quaternion5.fromAngles(vector3_0);
      quaternion1.hasNaN();
      quaternion8.multLocal(quaternion6);
      quaternion7.invert();
      quaternion1.w();
      Quaternion quaternion9 = new Quaternion((-1633.98), 1.0, 0.0, 0.0);
      quaternion9.fromAxes(vector3_0, vector3_0, vector3_1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.slerp((IQuaternion) null, (-0.9999900000002526), (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      quaternion0.transformUnitX(vector3_1);
      quaternion0.w();
      quaternion0.toAngles();
      Object object0 = new Object();
      quaternion0.equals(object0);
      quaternion0.y();
      Vector3 vector3_2 = (Vector3)Vector3.ZERO;
      quaternion0.transformAndAdd(vector3_2, vector3_1, vector3_1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = new Quaternion(doubleArray0);
      quaternion1.y();
      quaternion1.toString();
      Quaternion quaternion2 = quaternion1.mult((IQuaternion) quaternion0);
      Quaternion quaternion3 = quaternion1.slerp((IQuaternion) quaternion0, 3384.666483074554);
      quaternion2.hashCode();
      quaternion1.getRotationZ();
      quaternion1.slerp((IQuaternion) quaternion0, 878.3, quaternion2);
      MockRandom mockRandom0 = new MockRandom((-396L));
      Quaternion quaternion4 = new Quaternion();
      quaternion4.slerpLocal(quaternion2, 3.141592653589793);
      Quaternion quaternion5 = new Quaternion();
      quaternion5.invert();
      quaternion2.w();
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = new Vector3(0.0, (-0.9999900000002526), -0.0);
      quaternion3.fromAxes(vector3_1, vector3_0, vector3_0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      vector3_1.cross((IVector3) vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_1);
      quaternion2.equals(quaternion0);
      Quaternion quaternion3 = quaternion2.set((IQuaternion) quaternion1);
      quaternion2.set(Double.NaN, Double.NaN, Double.NaN, (-3.4028234663852886E38));
      Quaternion quaternion4 = quaternion1.fromVectorFromNegativeZ((-1.3579862754725326E7), Double.NaN, Double.NaN);
      quaternion0.invert(quaternion2);
      Quaternion quaternion5 = quaternion3.fromAngles(vector3_0);
      quaternion5.hasNaN();
      quaternion5.multLocal(quaternion1);
      quaternion5.invert();
      quaternion2.w();
      Vector3 vector3_3 = (Vector3)Vector3.UNIT_Y;
      quaternion1.fromAxes(vector3_2, vector3_1, vector3_3);
      quaternion5.invertLocal();
      quaternion4.getRotationZ();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      quaternion0.transformLocal(vector3_0);
      quaternion0.x();
      Quaternion quaternion2 = new Quaternion(quaternion1);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      Quaternion quaternion4 = new Quaternion((-0.5307334105090181), 1.0, (-0.5307334105090181), 1845.896056021994);
      Quaternion quaternion5 = quaternion3.set((IQuaternion) quaternion4);
      Quaternion quaternion6 = quaternion1.fromAngles(0.6984705835641711, (-0.3375058102254641), (-953.881266772));
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      quaternion1.fromAxes(vector3_1, vector3_1, vector3_1);
      Quaternion quaternion7 = new Quaternion(0.7071067811865476, 3714.193045516207, 0.7071067811865476, -0.0);
      quaternion7.invert(quaternion3);
      quaternion2.equals(quaternion7);
      quaternion7.transformUnitX(vector3_0);
      quaternion6.w();
      quaternion1.toAngles();
      quaternion0.equals(quaternion5);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = quaternion0.transformLocal(vector3_0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion4 = quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      Vector3 vector3_2 = vector3_1.subtract((IVector3) vector3_0, vector3_0);
      Quaternion quaternion5 = quaternion0.fromVectorFromNegativeZ((-1987.5), Double.NaN, (-3.141592653589793));
      Quaternion quaternion6 = quaternion2.invert(quaternion5);
      quaternion1.fromAngles(vector3_2);
      quaternion3.hasNaN();
      Quaternion quaternion7 = quaternion4.multLocal(quaternion6);
      Quaternion quaternion8 = new Quaternion();
      Quaternion quaternion9 = quaternion8.invert();
      quaternion7.w();
      quaternion9.fromAxes(vector3_2, vector3_0, vector3_2);
      quaternion4.fromAngles(0.0, 2.0, (-1987.5));
      quaternion5.set(0.5, 2113.999276690835, 1.0, 0.5);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = new Quaternion(doubleArray0);
      quaternion1.y();
      quaternion1.toString();
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = new Vector3(0.0, (-1.0), 0.0);
      vector3_1.lerp((IVector3) vector3_0, 6.283185307179586, vector3_2);
      Vector3 vector3_3 = new Vector3(vector3_0);
      Vector3 vector3_4 = vector3_1.cross((IVector3) vector3_0, vector3_3);
      Quaternion quaternion2 = quaternion0.fromVectors(vector3_3, vector3_1);
      quaternion2.equals(vector3_4);
      Vector3 vector3_5 = quaternion0.transformUnitY(vector3_3);
      Quaternion quaternion3 = quaternion1.set((IQuaternion) quaternion0);
      Quaternion quaternion4 = quaternion2.set(Double.NaN, Double.NaN, 0.0, 1.0);
      vector3_1.normalize(vector3_5);
      quaternion3.fromAngleAxis(3.4028234663852886E38, 2.0, (-1.0), Double.NaN);
      Quaternion quaternion5 = new Quaternion(doubleArray0);
      quaternion5.slerpLocal(quaternion2, 2077.4);
      Quaternion quaternion6 = new Quaternion(quaternion1);
      quaternion6.transformZ(vector3_5);
      quaternion4.z();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = new Quaternion(doubleArray0);
      quaternion1.y();
      quaternion1.toString();
      Quaternion quaternion2 = new Quaternion(0.0, (-3.4028234663852886E38), 0.0, (-3.4028234663852886E38));
      quaternion1.slerp((IQuaternion) quaternion0, 3384.666483074554);
      quaternion2.hashCode();
      quaternion1.hasNaN();
      quaternion1.getRotationZ();
      Quaternion quaternion3 = quaternion1.slerp((IQuaternion) quaternion0, 878.3, quaternion2);
      MockRandom mockRandom0 = new MockRandom((-396L));
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Quaternion quaternion4 = quaternion3.fromAxes(vector3_0, vector3_0, vector3_0);
      Quaternion quaternion5 = new Quaternion((-2356.461), -0.0, 9.999999747378752E-6, 0.0);
      Quaternion quaternion6 = quaternion5.invert(quaternion1);
      quaternion5.equals(quaternion6);
      Vector3 vector3_1 = new Vector3();
      Vector3 vector3_2 = quaternion5.transformUnitX(vector3_1);
      quaternion4.w();
      quaternion1.toAngles();
      quaternion1.equals(vector3_2);
      Quaternion quaternion7 = quaternion5.set((IQuaternion) quaternion4);
      quaternion7.normalize(quaternion0);
      quaternion4.transformAndAdd(vector3_2, vector3_1, vector3_2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = quaternion0.transformLocal(vector3_0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      Quaternion quaternion4 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      quaternion1.integrate((IVector3) vector3_1, (-1513.042021148321));
      Quaternion quaternion5 = quaternion3.set((IQuaternion) quaternion4);
      Quaternion quaternion6 = quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      quaternion0.w();
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      quaternion1.fromAxes(vector3_2, vector3_2, vector3_2);
      Quaternion quaternion7 = new Quaternion(0.7071067811865476, 3714.193045516207, 0.7071067811865476, -0.0);
      quaternion7.invert(quaternion3);
      quaternion2.equals(quaternion7);
      quaternion7.transformUnitX(vector3_0);
      quaternion6.w();
      Vector3 vector3_3 = quaternion1.toAngles();
      quaternion0.equals(quaternion5);
      quaternion0.toAngles(vector3_3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      quaternion1.y = 0.0;
      Vector3 vector3_0 = new Vector3();
      quaternion0.transformLocal(vector3_0);
      quaternion0.x();
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      Quaternion quaternion4 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      Quaternion quaternion5 = quaternion3.set((IQuaternion) quaternion4);
      Quaternion quaternion6 = quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      quaternion0.w();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      quaternion1.fromAxes(vector3_1, vector3_1, vector3_1);
      Quaternion quaternion7 = new Quaternion(0.7071067811865476, 3714.193045516207, 0.7071067811865476, -0.0);
      quaternion5.invertLocal();
      quaternion7.invert(quaternion3);
      quaternion2.equals(quaternion7);
      quaternion7.transformUnitX(vector3_0);
      quaternion6.w();
      quaternion1.toAngles();
      quaternion0.equals(quaternion5);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(0.0, 0.0, 0.0, (-2579.031809));
      quaternion0.slerpLocal(quaternion1, 0.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.abs();
      Vector3 vector3_2 = quaternion0.toAngles(vector3_1);
      Quaternion quaternion1 = new Quaternion(0.0, 0.0, 9.999999747378752E-6, 2.0);
      Quaternion quaternion2 = quaternion1.invert();
      quaternion0.transformUnitZ(vector3_0);
      Vector3 vector3_3 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_4 = new Vector3(vector3_3);
      Vector3 vector3_5 = vector3_4.negate();
      Quaternion quaternion3 = quaternion2.fromVectorFromNegativeZ((IVector3) vector3_5);
      quaternion1.toAngles(vector3_2);
      Quaternion quaternion4 = quaternion3.slerpLocal(quaternion2, Double.NaN);
      Quaternion quaternion5 = quaternion0.fromAnglesXZ(Double.NaN, 1.0786325143740104E-4);
      quaternion1.transformLocal(vector3_0);
      quaternion0.transformZ(vector3_5);
      quaternion4.fromAngleAxis(445.53885144, 1.0, (-1.0), 0.0);
      quaternion4.hashCode();
      quaternion5.z();
      quaternion4.slerp((IQuaternion) quaternion2, 1047.7434383272, quaternion1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 435.7026486571;
      doubleArray0[1] = 435.7026486571;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-34.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2524.1410067998;
      Quaternion quaternion0 = new Quaternion(doubleArray0);
      quaternion0.toString();
      Vector3 vector3_0 = new Vector3(doubleArray0);
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Quaternion quaternion2 = new Quaternion(doubleArray0);
      Quaternion quaternion3 = new Quaternion((-947.66209159335), 435.7026486571, 1647.512581581, 0.0);
      Quaternion quaternion4 = quaternion0.mult((IQuaternion) quaternion3, quaternion0);
      quaternion4.normalizeLocal();
      quaternion1.slerp((IQuaternion) quaternion2, 435.7026486571);
      Vector3 vector3_1 = vector3_0.negateLocal();
      vector3_1.absLocal();
      quaternion0.transformScaleAndAdd(vector3_0, (-1.0), vector3_1, vector3_1);
      Vector3 vector3_2 = quaternion0.transformUnitX(vector3_0);
      quaternion0.transform((IVector3) vector3_2, vector3_2);
      quaternion0.slerp((IQuaternion) quaternion0, 382.45);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      vector3_1.cross((IVector3) vector3_0, vector3_0);
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_1);
      quaternion2.equals(quaternion0);
      quaternion2.set((IQuaternion) quaternion1);
      Quaternion quaternion3 = quaternion2.set(Double.NaN, 0.0, 0.0, (-3.4028234663852886E38));
      Quaternion quaternion4 = quaternion2.fromAngleAxis(0.0, 3.4028234663852886E38, Double.NaN, 3297.97);
      Quaternion quaternion5 = quaternion4.slerpLocal(quaternion3, 3.4028234663852886E38);
      quaternion5.invert();
      quaternion1.w();
      Vector3 vector3_2 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_3 = new Vector3(0.0, 0.0, 0.0);
      quaternion1.fromAxes(vector3_2, vector3_0, vector3_3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = quaternion0.normalizeLocal();
      Quaternion quaternion2 = quaternion0.invert();
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_2 = vector3_0.lerpLocal(vector3_1, 3.1415826535900457);
      Quaternion quaternion3 = quaternion2.fromAxes(vector3_0, vector3_0, vector3_0);
      Vector3 vector3_3 = vector3_2.lerpLocal(vector3_1, Double.NaN);
      Quaternion quaternion4 = quaternion3.invert();
      Quaternion quaternion5 = quaternion4.fromVectorFromNegativeZ((IVector3) vector3_2);
      Quaternion quaternion6 = quaternion4.integrate((IVector3) vector3_0, Double.NaN, quaternion2);
      Quaternion quaternion7 = quaternion4.invert();
      quaternion7.slerpLocal(quaternion6, 0.0);
      quaternion7.normalizeLocal();
      quaternion1.set((IQuaternion) quaternion3);
      Quaternion quaternion8 = quaternion5.fromAngles(vector3_0);
      Vector3 vector3_4 = new Vector3((-2596324.2509299996), Double.NaN, Double.NaN);
      quaternion8.transformUnitZ(vector3_4);
      Vector3 vector3_5 = vector3_2.subtract((IVector3) vector3_0, vector3_3);
      Quaternion quaternion9 = quaternion1.fromVectorFromNegativeZ((-2427.6), 0.0, 1524.550770002153);
      quaternion9.invert(quaternion4);
      quaternion2.fromAngles(vector3_2);
      quaternion2.z();
      quaternion5.hasNaN();
      quaternion3.multLocal(quaternion2);
      Quaternion quaternion10 = new Quaternion(quaternion3);
      quaternion10.transformZ(vector3_5);
      quaternion9.z();
      quaternion6.transform((IVector3) vector3_3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.5, 2.0, 0.0, 2.0);
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Quaternion quaternion1 = quaternion0.integrate((IVector3) vector3_0, (-11.476962));
      Vector3 vector3_1 = new Vector3();
      Vector3 vector3_2 = vector3_1.addScaledLocal(vector3_0, 0.5);
      Vector3 vector3_3 = quaternion0.transformScaleAndAdd(vector3_0, 0.5, vector3_0, vector3_1);
      quaternion0.z();
      Quaternion quaternion2 = quaternion1.set((IQuaternion) quaternion0);
      vector3_1.crossLocal(vector3_3);
      Vector3 vector3_4 = vector3_1.multLocal(0.0);
      quaternion2.transformUnitY(vector3_2);
      Quaternion quaternion3 = new Quaternion(0.5, 965.733137861, 965.733137861, 2.0);
      Quaternion quaternion4 = quaternion2.normalize(quaternion3);
      Quaternion quaternion5 = quaternion1.fromVectors(vector3_2, vector3_3);
      Quaternion quaternion6 = new Quaternion(quaternion4);
      quaternion3.slerp((IQuaternion) quaternion6, (-3.4028234663852886E38), quaternion4);
      quaternion5.normalize(quaternion4);
      quaternion0.x();
      quaternion5.fromVectors(vector3_4, vector3_3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0, 0.0, 0.0, 1394.645738994);
      Vector3 vector3_0 = new Vector3(1.0, 0.0, (-1647.246486));
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      quaternion1.w = 1394.645738994;
      Quaternion quaternion2 = quaternion1.integrate((IVector3) vector3_0, 0.0, quaternion0);
      Quaternion quaternion3 = quaternion2.invert();
      Quaternion quaternion4 = quaternion1.fromAngleAxis(2943.89066254, (IVector3) vector3_0);
      quaternion2.getRotationZ();
      Vector3 vector3_1 = new Vector3();
      quaternion3.fromAnglesXY((-1490.7), 1.0);
      Quaternion quaternion5 = quaternion0.fromVectorFromNegativeZ(0.5014905741189534, 1.0, 0.0);
      quaternion5.invert();
      quaternion5.x = 0.624961222484667;
      Quaternion quaternion6 = quaternion4.integrateLocal(vector3_1, (-0.3414178718991927));
      Vector3 vector3_2 = (Vector3)Vector3.ZERO;
      Vector3 vector3_3 = quaternion6.transform((IVector3) vector3_2);
      quaternion1.fromAngles(vector3_3);
      Vector3 vector3_4 = quaternion6.transform((IVector3) vector3_2, vector3_0);
      Vector3 vector3_5 = quaternion6.transformUnitX(vector3_4);
      quaternion4.equals(quaternion6);
      quaternion4.fromAxes(vector3_2, vector3_4, vector3_3);
      Quaternion quaternion7 = quaternion3.normalizeLocal();
      Quaternion quaternion8 = new Quaternion(0.5, 0.5, 0.0, (-0.5014905741189534));
      quaternion8.transformScaleAndAdd(vector3_3, (-0.5), vector3_3, vector3_5);
      quaternion8.fromAnglesXY(0.5, (-0.3414178718991927));
      quaternion8.toAngles(vector3_5);
      quaternion7.normalize();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3 vector3_0 = new Vector3(1.0, (-1533.201), 0.0);
      Quaternion quaternion1 = quaternion0.fromAnglesXY(0.8775825618903728, -0.0);
      Vector3 vector3_1 = quaternion1.toAngles(vector3_0);
      quaternion0.transformUnitZ(vector3_0);
      Vector3 vector3_2 = new Vector3(vector3_0);
      vector3_2.negate();
      double double0 = 0.0;
      quaternion0.fromAnglesXZ(0.0, 1134.2900283246288);
      quaternion0.transformLocal(vector3_1);
      // Undeclared exception!
      try { 
        quaternion1.transformZ((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = new Vector3(1.0, (-1533.201), 0.0);
      Quaternion quaternion2 = quaternion0.fromAnglesXY(1.0, 961.847);
      Vector3 vector3_1 = new Vector3();
      vector3_1.abs();
      Vector3 vector3_2 = quaternion2.toAngles(vector3_1);
      quaternion1.invert();
      Vector3 vector3_3 = quaternion1.transformUnitZ(vector3_0);
      vector3_0.add(9.999999747378752E-6, 0.0, 3.141592653589793, vector3_2);
      Vector3 vector3_4 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_5 = new Vector3(vector3_4);
      vector3_5.negate();
      Quaternion quaternion3 = quaternion2.fromVectorFromNegativeZ((IVector3) vector3_3);
      quaternion1.toAngles(vector3_5);
      quaternion1.slerpLocal(quaternion0, 0.0);
      quaternion1.fromAnglesXZ((-3.4028234663852886E38), 9.999999747378752E-6);
      quaternion1.transformLocal(vector3_0);
      Vector3 vector3_6 = (Vector3)Vector3.NORMAL_XYZ;
      quaternion2.transformZ(vector3_6);
      Quaternion quaternion4 = new Quaternion();
      Quaternion quaternion5 = quaternion4.fromAngleAxis((-0.9625541646535998), 3.141592653589793, (-3.141592653589793), 961.847);
      quaternion0.hashCode();
      quaternion0.z();
      Quaternion quaternion6 = new Quaternion(quaternion2);
      quaternion6.slerp((IQuaternion) quaternion5, (-0.9625541646535998), quaternion3);
      quaternion0.y();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = new Quaternion(doubleArray0);
      quaternion1.y();
      quaternion1.toString();
      Quaternion quaternion2 = quaternion1.mult((IQuaternion) quaternion0);
      quaternion1.slerp((IQuaternion) quaternion0, 3384.666483074554);
      quaternion2.hashCode();
      quaternion1.hasNaN();
      quaternion1.getRotationZ();
      quaternion1.slerp((IQuaternion) quaternion0, 878.3, quaternion2);
      MockRandom mockRandom0 = new MockRandom((-396L));
      // Undeclared exception!
      try { 
        mockRandom0.doubles((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0, 0.0, 0.0, 1394.645738994);
      Vector3 vector3_0 = new Vector3(1.0, 0.0, (-1647.246486));
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      quaternion1.w = 1394.645738994;
      Quaternion quaternion2 = quaternion1.integrate((IVector3) vector3_0, 0.0, quaternion0);
      Quaternion quaternion3 = quaternion2.invert();
      Quaternion quaternion4 = quaternion1.fromAngleAxis(2943.89066254, (IVector3) vector3_0);
      quaternion2.getRotationZ();
      Vector3 vector3_1 = new Vector3(vector3_0);
      Quaternion quaternion5 = quaternion0.fromVectorFromNegativeZ(0.5014905741189534, 1.0, 0.0);
      quaternion5.invert();
      quaternion5.x = Double.NaN;
      Quaternion quaternion6 = quaternion4.integrateLocal(vector3_1, Double.NaN);
      Vector3 vector3_2 = (Vector3)Vector3.ZERO;
      Vector3 vector3_3 = quaternion6.transform((IVector3) vector3_2);
      quaternion1.fromAngles(vector3_3);
      Vector3 vector3_4 = quaternion6.transform((IVector3) vector3_2, vector3_0);
      Vector3 vector3_5 = quaternion6.transformUnitX(vector3_4);
      quaternion4.equals(quaternion6);
      Quaternion quaternion7 = quaternion4.fromAxes(vector3_2, vector3_4, vector3_3);
      quaternion3.normalizeLocal();
      Quaternion quaternion8 = quaternion7.normalize();
      quaternion8.transformScaleAndAdd(vector3_3, Double.NaN, vector3_3, vector3_5);
      quaternion0.fromAngles((-1.0), 3.141484790338658, Double.NaN);
      Quaternion quaternion9 = quaternion2.integrate((IVector3) vector3_2, Double.NaN);
      quaternion9.getRotationZ();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = new Vector3(1.0, (-1533.201), 0.0);
      Quaternion quaternion2 = new Quaternion(quaternion1);
      Vector3 vector3_1 = new Vector3();
      vector3_1.negate(vector3_0);
      vector3_1.abs();
      quaternion2.toAngles(vector3_1);
      quaternion1.invert();
      Vector3 vector3_2 = quaternion1.transformUnitZ(vector3_0);
      Vector3 vector3_3 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_4 = new Vector3(vector3_3);
      Vector3 vector3_5 = vector3_4.negate();
      Quaternion quaternion3 = quaternion2.fromVectorFromNegativeZ((IVector3) vector3_2);
      quaternion1.toAngles(vector3_4);
      Quaternion quaternion4 = quaternion1.slerpLocal(quaternion0, 0.0);
      vector3_2.addLocal((IVector3) vector3_5);
      Quaternion quaternion5 = quaternion4.fromAnglesXZ(3.4028234663852886E38, 3.4028234663852886E38);
      quaternion4.transformLocal(vector3_2);
      quaternion0.transformZ(vector3_3);
      quaternion0.z = (-1533.201);
      quaternion5.fromAngleAxis(0.0, 0.0, 0.0, 1.1268263314995964E38);
      quaternion2.hashCode();
      quaternion1.z();
      quaternion4.slerp((IQuaternion) quaternion2, (-1571.935715209), quaternion5);
      // Undeclared exception!
      try { 
        quaternion3.slerp((IQuaternion) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(966.47279, 28.9835414928, (-2665.706624), 2353.5);
      assertEquals(28.9835414928, quaternion0.y, 0.01);
      assertEquals((-2665.706624), quaternion0.z, 0.01);
      assertEquals(2353.5, quaternion0.w, 0.01);
      assertEquals(966.47279, quaternion0.x, 0.01);
      assertEquals((-2.420595011683287), quaternion0.getRotationZ(), 0.01);
      assertEquals(28.9835414928, quaternion0.y(), 0.01);
      assertEquals(966.47279, quaternion0.x(), 0.01);
      assertEquals((-2665.706624), quaternion0.z(), 0.01);
      assertEquals(2353.5, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(28.9835414928, quaternion0.y, 0.01);
      assertEquals((-2665.706624), quaternion0.z, 0.01);
      assertEquals(2353.5, quaternion0.w, 0.01);
      assertEquals(966.47279, quaternion0.x, 0.01);
      assertEquals(966.47279, quaternion1.x, 0.01);
      assertEquals((-2665.706624), quaternion1.z, 0.01);
      assertEquals(2353.5, quaternion1.w, 0.01);
      assertEquals(28.9835414928, quaternion1.y, 0.01);
      assertEquals((-2.420595011683287), quaternion0.getRotationZ(), 0.01);
      assertEquals(28.9835414928, quaternion0.y(), 0.01);
      assertEquals(966.47279, quaternion0.x(), 0.01);
      assertEquals((-2665.706624), quaternion0.z(), 0.01);
      assertEquals(2353.5, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(966.47279, quaternion1.x(), 0.01);
      assertEquals(28.9835414928, quaternion1.y(), 0.01);
      assertEquals((-2665.706624), quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2353.5, quaternion1.w(), 0.01);
      assertEquals((-2.420595011683287), quaternion1.getRotationZ(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.slerp((IQuaternion) quaternion1, 966.47279);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(28.9835414928, quaternion0.y, 0.01);
      assertEquals((-2665.706624), quaternion0.z, 0.01);
      assertEquals(2353.5, quaternion0.w, 0.01);
      assertEquals(966.47279, quaternion0.x, 0.01);
      assertEquals(966.47279, quaternion1.x, 0.01);
      assertEquals((-2665.706624), quaternion1.z, 0.01);
      assertEquals(2353.5, quaternion1.w, 0.01);
      assertEquals(28.9835414928, quaternion1.y, 0.01);
      assertEquals(2353.5, quaternion2.w, 0.01);
      assertEquals(966.4727900000289, quaternion2.x, 0.01);
      assertEquals(28.983541492798395, quaternion2.y, 0.01);
      assertEquals((-2665.7066239998676), quaternion2.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertEquals((-2.420595011683287), quaternion0.getRotationZ(), 0.01);
      assertEquals(28.9835414928, quaternion0.y(), 0.01);
      assertEquals(966.47279, quaternion0.x(), 0.01);
      assertEquals((-2665.706624), quaternion0.z(), 0.01);
      assertEquals(2353.5, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(966.47279, quaternion1.x(), 0.01);
      assertEquals(28.9835414928, quaternion1.y(), 0.01);
      assertEquals((-2665.706624), quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2353.5, quaternion1.w(), 0.01);
      assertEquals((-2.420595011683287), quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(2353.5, quaternion2.w(), 0.01);
      assertEquals(966.4727900000289, quaternion2.x(), 0.01);
      assertEquals((-2.420595011683262), quaternion2.getRotationZ(), 0.01);
      assertEquals((-2665.7066239998676), quaternion2.z(), 0.01);
      assertEquals(28.983541492798395, quaternion2.y(), 0.01);
      assertNotNull(quaternion2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 28.983541492798395;
      doubleArray0[1] = 2353.5;
      doubleArray0[2] = 966.47279;
      doubleArray0[3] = (-2665.706624);
      doubleArray0[4] = 966.4727900000289;
      doubleArray0[5] = 966.47279;
      doubleArray0[6] = 2353.5;
      Vector3 vector3_0 = new Vector3(doubleArray0);
      quaternion2.fromAngleAxis(2803.0032, (IVector3) vector3_0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = new Quaternion(quaternion0);
      Vector3 vector3_0 = new Vector3(1.0, (-1533.201), 0.0);
      Quaternion quaternion2 = quaternion0.fromAnglesXY(1.0, 961.847);
      Vector3 vector3_1 = new Vector3();
      vector3_1.abs();
      quaternion2.toAngles(vector3_1);
      Quaternion quaternion3 = quaternion1.invert();
      Vector3 vector3_2 = quaternion1.transformUnitZ(vector3_0);
      Vector3 vector3_3 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_4 = new Vector3(vector3_3);
      quaternion2.mult((IQuaternion) quaternion3);
      vector3_4.negate();
      Quaternion quaternion4 = quaternion2.fromVectorFromNegativeZ((IVector3) vector3_2);
      quaternion4.normalize(quaternion3);
      quaternion1.toAngles(vector3_4);
      Quaternion quaternion5 = quaternion1.slerpLocal(quaternion0, 0.0);
      Quaternion quaternion6 = quaternion5.fromAnglesXZ(0.0, 3.4028234663852886E38);
      quaternion5.transformLocal(vector3_2);
      quaternion0.transformZ(vector3_3);
      quaternion0.z = (-1533.201);
      quaternion6.fromAngleAxis(0.0, 0.0, 0.0, 1.0);
      quaternion1.hashCode();
      quaternion1.z();
      quaternion5.slerp((IQuaternion) quaternion2, (-1571.935715209), quaternion6);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      
      Quaternion quaternion1 = quaternion0.normalizeLocal();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      
      Quaternion quaternion2 = quaternion0.invert();
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(-0.0, quaternion2.z, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(-0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertNotSame(vector3_1, vector3_0);
      
      Vector3 vector3_2 = vector3_0.lerpLocal(vector3_1, 3.1415826535900457);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertEquals(1.813793590731672, vector3_0.x, 0.01);
      assertEquals(1.813793590731672, vector3_0.y, 0.01);
      assertEquals(1.813793590731672, vector3_0.z, 0.01);
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertEquals(1.813793590731672, vector3_2.z, 0.01);
      assertEquals(1.813793590731672, vector3_2.y, 0.01);
      assertEquals(1.813793590731672, vector3_2.x, 0.01);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      
      Quaternion quaternion3 = quaternion2.fromAxes(vector3_0, vector3_0, vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(1.2689937718715383, quaternion2.w, 0.01);
      assertEquals(1.813793590731672, vector3_0.x, 0.01);
      assertEquals(1.813793590731672, vector3_0.y, 0.01);
      assertEquals(1.813793590731672, vector3_0.z, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(1.2689937718715383, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      
      Vector3 vector3_3 = vector3_2.lerpLocal(vector3_1, Double.NaN);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_3.z, 0.01);
      assertEquals(Double.NaN, vector3_3.y, 0.01);
      assertEquals(Double.NaN, vector3_3.x, 0.01);
      assertSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      
      Quaternion quaternion4 = quaternion3.invert();
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(1.2689937718715383, quaternion2.w, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(1.2689937718715383, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(1.2689937718715383, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      
      Quaternion quaternion5 = quaternion4.fromVectorFromNegativeZ((IVector3) vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(1.2689937718715383, quaternion2.w, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(1.2689937718715383, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion5.z, 0.01);
      assertEquals(Double.NaN, quaternion5.y, 0.01);
      assertEquals(Double.NaN, quaternion5.x, 0.01);
      assertEquals(Double.NaN, quaternion5.w, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion4);
      
      Quaternion quaternion6 = quaternion4.integrate((IVector3) vector3_0, Double.NaN, quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion6.x, 0.01);
      assertEquals(Double.NaN, quaternion6.y, 0.01);
      assertEquals(Double.NaN, quaternion6.w, 0.01);
      assertEquals(Double.NaN, quaternion6.z, 0.01);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      
      Quaternion quaternion7 = quaternion4.invert();
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion6);
      
      Quaternion quaternion8 = quaternion7.slerpLocal(quaternion6, 0.0);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion6.x, 0.01);
      assertEquals(Double.NaN, quaternion6.y, 0.01);
      assertEquals(Double.NaN, quaternion6.w, 0.01);
      assertEquals(Double.NaN, quaternion6.z, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion8.z, 0.01);
      assertEquals(Double.NaN, quaternion8.x, 0.01);
      assertEquals(Double.NaN, quaternion8.y, 0.01);
      assertEquals(Double.NaN, quaternion8.w, 0.01);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion8);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion6);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion2);
      
      Quaternion quaternion9 = quaternion7.normalizeLocal();
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion9.w, 0.01);
      assertEquals(Double.NaN, quaternion9.z, 0.01);
      assertEquals(Double.NaN, quaternion9.x, 0.01);
      assertEquals(Double.NaN, quaternion9.y, 0.01);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion8);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion7);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion6);
      assertSame(quaternion9, quaternion7);
      
      Quaternion quaternion10 = quaternion1.set((IQuaternion) quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion10.w, 0.01);
      assertEquals(Double.NaN, quaternion10.y, 0.01);
      assertEquals(Double.NaN, quaternion10.x, 0.01);
      assertEquals(Double.NaN, quaternion10.z, 0.01);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion8);
      assertSame(quaternion10, quaternion0);
      assertSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion2);
      assertNotSame(quaternion10, quaternion7);
      
      Quaternion quaternion11 = quaternion5.fromAngles(vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion10));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion5.z, 0.01);
      assertEquals(Double.NaN, quaternion5.y, 0.01);
      assertEquals(Double.NaN, quaternion5.x, 0.01);
      assertEquals(Double.NaN, quaternion5.w, 0.01);
      assertEquals(Double.NaN, quaternion11.w, 0.01);
      assertEquals(Double.NaN, quaternion11.z, 0.01);
      assertEquals(Double.NaN, quaternion11.x, 0.01);
      assertEquals(Double.NaN, quaternion11.y, 0.01);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion8);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion10);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion11);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion11, quaternion7);
      assertNotSame(quaternion11, quaternion0);
      assertNotSame(quaternion11, quaternion6);
      assertSame(quaternion11, quaternion5);
      assertNotSame(quaternion11, quaternion10);
      assertSame(quaternion11, quaternion4);
      assertNotSame(quaternion11, quaternion1);
      assertNotSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion3);
      assertNotSame(quaternion11, quaternion2);
      assertNotSame(quaternion11, quaternion9);
      
      Vector3 vector3_4 = vector3_2.subtract((IVector3) vector3_0, vector3_3);
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertEquals(Double.NaN, vector3_4.x, 0.01);
      assertEquals(Double.NaN, vector3_4.z, 0.01);
      assertEquals(Double.NaN, vector3_4.y, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_3.z, 0.01);
      assertEquals(Double.NaN, vector3_3.y, 0.01);
      assertEquals(Double.NaN, vector3_3.x, 0.01);
      assertSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_0);
      assertSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_4);
      
      Quaternion quaternion12 = quaternion1.fromVectorFromNegativeZ((-2427.6), 0.0, 1524.550770002153);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion4));
      assertFalse(quaternion12.equals((Object)quaternion6));
      assertFalse(quaternion12.equals((Object)quaternion7));
      assertFalse(quaternion12.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion3));
      assertFalse(quaternion12.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion11));
      assertFalse(quaternion12.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion12.z, 0.01);
      assertEquals(Double.NaN, quaternion12.x, 0.01);
      assertEquals(Double.NaN, quaternion12.y, 0.01);
      assertEquals(Double.NaN, quaternion12.w, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion12, quaternion4);
      assertNotSame(quaternion12, quaternion6);
      assertSame(quaternion12, quaternion0);
      assertNotSame(quaternion12, quaternion7);
      assertNotSame(quaternion12, quaternion2);
      assertNotSame(quaternion12, quaternion3);
      assertNotSame(quaternion12, quaternion9);
      assertSame(quaternion12, quaternion1);
      assertNotSame(quaternion12, quaternion5);
      assertNotSame(quaternion12, quaternion11);
      assertSame(quaternion12, quaternion10);
      assertNotSame(quaternion12, quaternion8);
      assertSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion11);
      assertSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion7);
      
      Quaternion quaternion13 = quaternion12.invert(quaternion4);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion4));
      assertFalse(quaternion12.equals((Object)quaternion6));
      assertFalse(quaternion12.equals((Object)quaternion7));
      assertFalse(quaternion12.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion3));
      assertFalse(quaternion12.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion11));
      assertFalse(quaternion12.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion13.equals((Object)quaternion0));
      assertFalse(quaternion13.equals((Object)quaternion3));
      assertFalse(quaternion13.equals((Object)quaternion8));
      assertFalse(quaternion13.equals((Object)quaternion2));
      assertFalse(quaternion13.equals((Object)quaternion12));
      assertFalse(quaternion13.equals((Object)quaternion6));
      assertFalse(quaternion13.equals((Object)quaternion9));
      assertFalse(quaternion13.equals((Object)quaternion10));
      assertFalse(quaternion13.equals((Object)quaternion1));
      assertFalse(quaternion13.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion12));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion12.z, 0.01);
      assertEquals(Double.NaN, quaternion12.x, 0.01);
      assertEquals(Double.NaN, quaternion12.y, 0.01);
      assertEquals(Double.NaN, quaternion12.w, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion13.z, 0.01);
      assertEquals(Double.NaN, quaternion13.y, 0.01);
      assertEquals(Double.NaN, quaternion13.x, 0.01);
      assertEquals(Double.NaN, quaternion13.w, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion12, quaternion6);
      assertNotSame(quaternion12, quaternion7);
      assertNotSame(quaternion12, quaternion2);
      assertNotSame(quaternion12, quaternion13);
      assertSame(quaternion12, quaternion10);
      assertNotSame(quaternion12, quaternion4);
      assertSame(quaternion12, quaternion0);
      assertNotSame(quaternion12, quaternion3);
      assertNotSame(quaternion12, quaternion9);
      assertSame(quaternion12, quaternion1);
      assertNotSame(quaternion12, quaternion5);
      assertNotSame(quaternion12, quaternion11);
      assertNotSame(quaternion12, quaternion8);
      assertSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion11);
      assertSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion13);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion13, quaternion0);
      assertNotSame(quaternion13, quaternion3);
      assertNotSame(quaternion13, quaternion8);
      assertSame(quaternion13, quaternion11);
      assertSame(quaternion13, quaternion4);
      assertNotSame(quaternion13, quaternion9);
      assertNotSame(quaternion13, quaternion10);
      assertNotSame(quaternion13, quaternion7);
      assertSame(quaternion13, quaternion5);
      assertNotSame(quaternion13, quaternion2);
      assertNotSame(quaternion13, quaternion12);
      assertNotSame(quaternion13, quaternion6);
      assertNotSame(quaternion13, quaternion1);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion13);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion13);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion12);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion8);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion12);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion13);
      
      Quaternion quaternion14 = quaternion2.fromAngles(vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion14.equals((Object)quaternion8));
      assertFalse(quaternion14.equals((Object)quaternion9));
      assertFalse(quaternion14.equals((Object)quaternion1));
      assertFalse(quaternion14.equals((Object)quaternion0));
      assertFalse(quaternion14.equals((Object)quaternion7));
      assertFalse(quaternion14.equals((Object)quaternion12));
      assertFalse(quaternion14.equals((Object)quaternion10));
      assertFalse(quaternion14.equals((Object)quaternion4));
      assertFalse(quaternion14.equals((Object)quaternion11));
      assertFalse(quaternion14.equals((Object)quaternion13));
      assertFalse(quaternion14.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion14.w, 0.01);
      assertEquals(Double.NaN, quaternion14.y, 0.01);
      assertEquals(Double.NaN, quaternion14.x, 0.01);
      assertEquals(Double.NaN, quaternion14.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion13);
      assertSame(quaternion2, quaternion14);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion14, quaternion7);
      assertNotSame(quaternion14, quaternion12);
      assertNotSame(quaternion14, quaternion10);
      assertNotSame(quaternion14, quaternion13);
      assertSame(quaternion14, quaternion6);
      assertSame(quaternion14, quaternion2);
      assertNotSame(quaternion14, quaternion8);
      assertNotSame(quaternion14, quaternion9);
      assertNotSame(quaternion14, quaternion1);
      assertNotSame(quaternion14, quaternion0);
      assertNotSame(quaternion14, quaternion4);
      assertSame(quaternion14, quaternion3);
      assertNotSame(quaternion14, quaternion11);
      assertNotSame(quaternion14, quaternion5);
      assertSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      
      double double0 = quaternion2.z();
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion13);
      assertSame(quaternion2, quaternion14);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion0);
      
      boolean boolean0 = quaternion5.hasNaN();
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion12));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion14));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion14));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion10));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion12));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion5.z, 0.01);
      assertEquals(Double.NaN, quaternion5.y, 0.01);
      assertEquals(Double.NaN, quaternion5.x, 0.01);
      assertEquals(Double.NaN, quaternion5.w, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion13);
      assertSame(quaternion2, quaternion14);
      
      Quaternion quaternion15 = quaternion3.multLocal(quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion15.equals((Object)quaternion7));
      assertFalse(quaternion15.equals((Object)quaternion10));
      assertFalse(quaternion15.equals((Object)quaternion1));
      assertFalse(quaternion15.equals((Object)quaternion12));
      assertFalse(quaternion15.equals((Object)quaternion9));
      assertFalse(quaternion15.equals((Object)quaternion5));
      assertFalse(quaternion15.equals((Object)quaternion4));
      assertFalse(quaternion15.equals((Object)quaternion0));
      assertFalse(quaternion15.equals((Object)quaternion13));
      assertFalse(quaternion15.equals((Object)quaternion8));
      assertFalse(quaternion15.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion15.w, 0.01);
      assertEquals(Double.NaN, quaternion15.y, 0.01);
      assertEquals(Double.NaN, quaternion15.x, 0.01);
      assertEquals(Double.NaN, quaternion15.z, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      
      Quaternion quaternion16 = quaternion15.invert();
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion15));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion15.equals((Object)quaternion7));
      assertFalse(quaternion15.equals((Object)quaternion10));
      assertFalse(quaternion15.equals((Object)quaternion1));
      assertFalse(quaternion15.equals((Object)quaternion12));
      assertFalse(quaternion15.equals((Object)quaternion9));
      assertFalse(quaternion15.equals((Object)quaternion5));
      assertFalse(quaternion15.equals((Object)quaternion4));
      assertFalse(quaternion15.equals((Object)quaternion0));
      assertFalse(quaternion15.equals((Object)quaternion13));
      assertFalse(quaternion15.equals((Object)quaternion8));
      assertFalse(quaternion15.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion16.equals((Object)quaternion5));
      assertFalse(quaternion16.equals((Object)quaternion10));
      assertFalse(quaternion16.equals((Object)quaternion13));
      assertFalse(quaternion16.equals((Object)quaternion12));
      assertFalse(quaternion16.equals((Object)quaternion11));
      assertFalse(quaternion16.equals((Object)quaternion7));
      assertFalse(quaternion16.equals((Object)quaternion4));
      assertFalse(quaternion16.equals((Object)quaternion3));
      assertFalse(quaternion16.equals((Object)quaternion1));
      assertFalse(quaternion16.equals((Object)quaternion9));
      assertFalse(quaternion16.equals((Object)quaternion8));
      assertFalse(quaternion16.equals((Object)quaternion15));
      assertFalse(quaternion16.equals((Object)quaternion6));
      assertFalse(quaternion16.equals((Object)quaternion0));
      assertFalse(quaternion16.equals((Object)quaternion14));
      assertFalse(quaternion16.equals((Object)quaternion2));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion15.w, 0.01);
      assertEquals(Double.NaN, quaternion15.y, 0.01);
      assertEquals(Double.NaN, quaternion15.x, 0.01);
      assertEquals(Double.NaN, quaternion15.z, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion16.w, 0.01);
      assertEquals(Double.NaN, quaternion16.z, 0.01);
      assertEquals(Double.NaN, quaternion16.x, 0.01);
      assertEquals(Double.NaN, quaternion16.y, 0.01);
      
      double double1 = quaternion13.w();
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion15));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion16));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion12.equals((Object)quaternion14));
      assertFalse(quaternion12.equals((Object)quaternion6));
      assertFalse(quaternion12.equals((Object)quaternion7));
      assertFalse(quaternion12.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion15));
      assertFalse(quaternion12.equals((Object)quaternion13));
      assertFalse(quaternion12.equals((Object)quaternion4));
      assertFalse(quaternion12.equals((Object)quaternion16));
      assertFalse(quaternion12.equals((Object)quaternion3));
      assertFalse(quaternion12.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion11));
      assertFalse(quaternion12.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion13));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion15));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion14));
      assertFalse(quaternion1.equals((Object)quaternion16));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion13.equals((Object)quaternion0));
      assertFalse(quaternion13.equals((Object)quaternion3));
      assertFalse(quaternion13.equals((Object)quaternion16));
      assertFalse(quaternion13.equals((Object)quaternion8));
      assertFalse(quaternion13.equals((Object)quaternion15));
      assertFalse(quaternion13.equals((Object)quaternion9));
      assertFalse(quaternion13.equals((Object)quaternion10));
      assertFalse(quaternion13.equals((Object)quaternion7));
      assertFalse(quaternion13.equals((Object)quaternion2));
      assertFalse(quaternion13.equals((Object)quaternion12));
      assertFalse(quaternion13.equals((Object)quaternion6));
      assertFalse(quaternion13.equals((Object)quaternion14));
      assertFalse(quaternion13.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion16));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion16));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertEquals(double1, double0, 0.01);
      assertFalse(quaternion4.equals((Object)quaternion15));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion14));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion12));
      assertFalse(quaternion4.equals((Object)quaternion16));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion12.z, 0.01);
      assertEquals(Double.NaN, quaternion12.x, 0.01);
      assertEquals(Double.NaN, quaternion12.y, 0.01);
      assertEquals(Double.NaN, quaternion12.w, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion13.z, 0.01);
      assertEquals(Double.NaN, quaternion13.y, 0.01);
      assertEquals(Double.NaN, quaternion13.x, 0.01);
      assertEquals(Double.NaN, quaternion13.w, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      
      Quaternion quaternion17 = quaternion15.fromAxes(vector3_3, vector3_0, vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion15));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion16));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion16));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(quaternion15.equals((Object)quaternion7));
      assertFalse(quaternion15.equals((Object)quaternion16));
      assertFalse(quaternion15.equals((Object)quaternion1));
      assertFalse(quaternion15.equals((Object)quaternion10));
      assertFalse(quaternion15.equals((Object)quaternion12));
      assertFalse(quaternion15.equals((Object)quaternion9));
      assertFalse(quaternion15.equals((Object)quaternion5));
      assertFalse(quaternion15.equals((Object)quaternion4));
      assertFalse(quaternion15.equals((Object)quaternion0));
      assertFalse(quaternion15.equals((Object)quaternion13));
      assertFalse(quaternion15.equals((Object)quaternion8));
      assertFalse(quaternion15.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion16));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(quaternion17.equals((Object)quaternion11));
      assertFalse(quaternion17.equals((Object)quaternion13));
      assertFalse(quaternion17.equals((Object)quaternion7));
      assertFalse(quaternion17.equals((Object)quaternion16));
      assertFalse(quaternion17.equals((Object)quaternion9));
      assertFalse(quaternion17.equals((Object)quaternion5));
      assertFalse(quaternion17.equals((Object)quaternion1));
      assertFalse(quaternion17.equals((Object)quaternion12));
      assertFalse(quaternion17.equals((Object)quaternion10));
      assertFalse(quaternion17.equals((Object)quaternion4));
      assertFalse(quaternion17.equals((Object)quaternion8));
      assertFalse(quaternion17.equals((Object)quaternion0));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, quaternion15.w, 0.01);
      assertEquals(Double.NaN, quaternion15.y, 0.01);
      assertEquals(Double.NaN, quaternion15.x, 0.01);
      assertEquals(Double.NaN, quaternion15.z, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, vector3_3.z, 0.01);
      assertEquals(Double.NaN, vector3_3.y, 0.01);
      assertEquals(Double.NaN, vector3_3.x, 0.01);
      assertEquals(Double.NaN, quaternion17.w, 0.01);
      assertEquals(Double.NaN, quaternion17.y, 0.01);
      assertEquals(Double.NaN, quaternion17.x, 0.01);
      assertEquals(Double.NaN, quaternion17.z, 0.01);
      
      Quaternion quaternion18 = quaternion10.slerp((IQuaternion) quaternion11, (-2960.0));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion17));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion15));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion16));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion13));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion15));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion17));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion14));
      assertFalse(quaternion1.equals((Object)quaternion16));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion16));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion16));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion15));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion14));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion17));
      assertFalse(quaternion4.equals((Object)quaternion12));
      assertFalse(quaternion4.equals((Object)quaternion16));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion16));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion12));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion17));
      assertFalse(quaternion5.equals((Object)quaternion14));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion15));
      assertFalse(quaternion5.equals((Object)quaternion10));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion18.equals((Object)quaternion6));
      assertFalse(quaternion18.equals((Object)quaternion2));
      assertFalse(quaternion18.equals((Object)quaternion15));
      assertFalse(quaternion18.equals((Object)quaternion14));
      assertFalse(quaternion18.equals((Object)quaternion11));
      assertFalse(quaternion18.equals((Object)quaternion13));
      assertFalse(quaternion18.equals((Object)quaternion8));
      assertFalse(quaternion18.equals((Object)quaternion3));
      assertFalse(quaternion18.equals((Object)quaternion9));
      assertFalse(quaternion18.equals((Object)quaternion10));
      assertFalse(quaternion18.equals((Object)quaternion17));
      assertFalse(quaternion18.equals((Object)quaternion7));
      assertFalse(quaternion18.equals((Object)quaternion12));
      assertFalse(quaternion18.equals((Object)quaternion5));
      assertFalse(quaternion18.equals((Object)quaternion16));
      assertFalse(quaternion18.equals((Object)quaternion4));
      assertFalse(quaternion18.equals((Object)quaternion0));
      assertFalse(quaternion18.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion15));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion16));
      assertFalse(quaternion10.equals((Object)quaternion14));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion13));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion11));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion17));
      assertFalse(quaternion11.equals((Object)quaternion16));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion12));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion14));
      assertFalse(quaternion11.equals((Object)quaternion17));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion15));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion5.z, 0.01);
      assertEquals(Double.NaN, quaternion5.y, 0.01);
      assertEquals(Double.NaN, quaternion5.x, 0.01);
      assertEquals(Double.NaN, quaternion5.w, 0.01);
      assertEquals(Double.NaN, quaternion18.z, 0.01);
      assertEquals(Double.NaN, quaternion18.y, 0.01);
      assertEquals(Double.NaN, quaternion18.x, 0.01);
      assertEquals(Double.NaN, quaternion18.w, 0.01);
      assertEquals(Double.NaN, quaternion10.w, 0.01);
      assertEquals(Double.NaN, quaternion10.y, 0.01);
      assertEquals(Double.NaN, quaternion10.x, 0.01);
      assertEquals(Double.NaN, quaternion10.z, 0.01);
      assertEquals(Double.NaN, quaternion11.w, 0.01);
      assertEquals(Double.NaN, quaternion11.z, 0.01);
      assertEquals(Double.NaN, quaternion11.x, 0.01);
      assertEquals(Double.NaN, quaternion11.y, 0.01);
      
      Vector3 vector3_5 = quaternion7.transformUnitX(vector3_1);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion17));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion15));
      assertFalse(quaternion0.equals((Object)quaternion18));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion16));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion18));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion16));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion16));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion18));
      assertFalse(quaternion4.equals((Object)quaternion15));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion14));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion17));
      assertFalse(quaternion4.equals((Object)quaternion12));
      assertFalse(quaternion4.equals((Object)quaternion16));
      assertFalse(quaternion4.equals((Object)quaternion18));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion16));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion10));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion15));
      assertFalse(quaternion7.equals((Object)quaternion17));
      assertFalse(quaternion7.equals((Object)quaternion11));
      assertFalse(quaternion7.equals((Object)quaternion18));
      assertFalse(quaternion7.equals((Object)quaternion13));
      assertFalse(quaternion7.equals((Object)quaternion14));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion12));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, vector3_1.y, 0.01);
      assertEquals(Double.NaN, vector3_1.x, 0.01);
      assertEquals(Double.NaN, vector3_1.z, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, vector3_5.y, 0.01);
      assertEquals(Double.NaN, vector3_5.z, 0.01);
      assertEquals(Double.NaN, vector3_5.x, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      
      Object object0 = new Object();
      boolean boolean1 = quaternion15.equals(object0);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion17));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion15));
      assertFalse(quaternion0.equals((Object)quaternion18));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion16));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion18));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion16));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion15.equals((Object)quaternion16));
      assertFalse(quaternion15.equals((Object)quaternion12));
      assertFalse(quaternion15.equals((Object)quaternion9));
      assertFalse(quaternion15.equals((Object)quaternion5));
      assertFalse(quaternion15.equals((Object)quaternion4));
      assertFalse(quaternion15.equals((Object)quaternion0));
      assertFalse(quaternion15.equals((Object)quaternion8));
      assertFalse(quaternion15.equals((Object)quaternion11));
      assertFalse(quaternion15.equals((Object)quaternion7));
      assertFalse(quaternion15.equals((Object)quaternion18));
      assertFalse(quaternion15.equals((Object)quaternion1));
      assertFalse(quaternion15.equals((Object)quaternion10));
      assertFalse(quaternion15.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion16));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion18));
      assertFalse(boolean1 == boolean0);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion15.w, 0.01);
      assertEquals(Double.NaN, quaternion15.y, 0.01);
      assertEquals(Double.NaN, quaternion15.x, 0.01);
      assertEquals(Double.NaN, quaternion15.z, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      
      Vector3 vector3_6 = quaternion18.toAngles(vector3_1);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion17));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion15));
      assertFalse(quaternion0.equals((Object)quaternion18));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion16));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion13));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion15));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion17));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion14));
      assertFalse(quaternion1.equals((Object)quaternion16));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion18));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion18));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion16));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion16));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion18));
      assertFalse(quaternion4.equals((Object)quaternion15));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion14));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion17));
      assertFalse(quaternion4.equals((Object)quaternion12));
      assertFalse(quaternion4.equals((Object)quaternion16));
      assertFalse(quaternion4.equals((Object)quaternion18));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion16));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion12));
      assertFalse(quaternion5.equals((Object)quaternion18));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion17));
      assertFalse(quaternion5.equals((Object)quaternion14));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion15));
      assertFalse(quaternion5.equals((Object)quaternion10));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion15));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion16));
      assertFalse(quaternion10.equals((Object)quaternion14));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion10.equals((Object)quaternion18));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion13));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion11));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion17));
      assertFalse(quaternion11.equals((Object)quaternion16));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion12));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion14));
      assertFalse(quaternion11.equals((Object)quaternion18));
      assertFalse(quaternion11.equals((Object)quaternion17));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion15));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion18.equals((Object)quaternion6));
      assertFalse(quaternion18.equals((Object)quaternion2));
      assertFalse(quaternion18.equals((Object)quaternion15));
      assertFalse(quaternion18.equals((Object)quaternion14));
      assertFalse(quaternion18.equals((Object)quaternion11));
      assertFalse(quaternion18.equals((Object)quaternion13));
      assertFalse(quaternion18.equals((Object)quaternion8));
      assertFalse(quaternion18.equals((Object)quaternion3));
      assertFalse(quaternion18.equals((Object)quaternion9));
      assertFalse(quaternion18.equals((Object)quaternion10));
      assertFalse(quaternion18.equals((Object)quaternion17));
      assertFalse(quaternion18.equals((Object)quaternion7));
      assertFalse(quaternion18.equals((Object)quaternion12));
      assertFalse(quaternion18.equals((Object)quaternion5));
      assertFalse(quaternion18.equals((Object)quaternion16));
      assertFalse(quaternion18.equals((Object)quaternion4));
      assertFalse(quaternion18.equals((Object)quaternion0));
      assertFalse(quaternion18.equals((Object)quaternion1));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(1.5707963267948966, vector3_1.y, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion5.z, 0.01);
      assertEquals(Double.NaN, quaternion5.y, 0.01);
      assertEquals(Double.NaN, quaternion5.x, 0.01);
      assertEquals(Double.NaN, quaternion5.w, 0.01);
      assertEquals(Double.NaN, quaternion10.w, 0.01);
      assertEquals(Double.NaN, quaternion10.y, 0.01);
      assertEquals(Double.NaN, quaternion10.x, 0.01);
      assertEquals(Double.NaN, quaternion10.z, 0.01);
      assertEquals(Double.NaN, quaternion11.w, 0.01);
      assertEquals(Double.NaN, quaternion11.z, 0.01);
      assertEquals(Double.NaN, quaternion11.x, 0.01);
      assertEquals(Double.NaN, quaternion11.y, 0.01);
      assertEquals(Double.NaN, quaternion18.z, 0.01);
      assertEquals(Double.NaN, quaternion18.y, 0.01);
      assertEquals(Double.NaN, quaternion18.x, 0.01);
      assertEquals(Double.NaN, quaternion18.w, 0.01);
      assertEquals(Double.NaN, vector3_6.z, 0.01);
      assertEquals(1.5707963267948966, vector3_6.y, 0.01);
      assertEquals(0.0, vector3_6.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertNotNull(vector3_0);
      
      double double0 = quaternion0.transformZ(vector3_0);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4028234663852886E38, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.4028234663852886E38;
      doubleArray0[1] = 3.4028234663852886E38;
      doubleArray0[2] = 3.4028234663852886E38;
      doubleArray0[3] = 3.4028234663852886E38;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.4028234663852886E38;
      doubleArray0[6] = 3.4028234663852886E38;
      Quaternion quaternion1 = new Quaternion(doubleArray0);
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertNotNull(quaternion1);
      assertEquals(7, doubleArray0.length);
      
      double double1 = quaternion1.y();
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(double1, double0, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertEquals(3.4028234663852886E38, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      
      String string0 = quaternion1.toString();
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertEquals("[3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38]", string0);
      assertNotNull(string0);
      assertEquals(7, doubleArray0.length);
      
      Quaternion quaternion2 = quaternion1.mult((IQuaternion) quaternion0);
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.y(), 0.01);
      assertEquals(2.356194490192345, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion2.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.z(), 0.01);
      assertNotNull(quaternion2);
      assertEquals(7, doubleArray0.length);
      
      double double2 = quaternion1.transformZ(vector3_0);
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Quaternion quaternion3 = quaternion1.slerp((IQuaternion) quaternion0, 3384.666483074554);
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertEquals((-1.1514019711027473E42), quaternion3.w, 0.01);
      assertEquals((-1.1514019711027473E42), quaternion3.z, 0.01);
      assertEquals((-1.1514019711027473E42), quaternion3.x, 0.01);
      assertEquals((-1.1514019711027473E42), quaternion3.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertEquals((-1.1514019711027473E42), quaternion3.z(), 0.01);
      assertEquals((-1.1514019711027473E42), quaternion3.x(), 0.01);
      assertEquals((-1.1514019711027473E42), quaternion3.y(), 0.01);
      assertEquals((-1.1514019711027473E42), quaternion3.w(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(2.356194490192345, quaternion3.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertNotNull(quaternion3);
      assertEquals(7, doubleArray0.length);
      
      quaternion2.hashCode();
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.y(), 0.01);
      assertEquals(2.356194490192345, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion2.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.z(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertSame(vector3_1, vector3_0);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = new Vector3((-3.141592653589793), 3.4028234663852886E38, 3924.383);
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertEquals(3924.383, vector3_2.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_2.y, 0.01);
      assertEquals((-3.141592653589793), vector3_2.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_2.y(), 0.01);
      assertEquals((-3.141592653589793), vector3_2.x(), 0.01);
      assertEquals(1.1579207543382391E77, vector3_2.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_2.length(), 0.01);
      assertEquals(3924.383, vector3_2.z(), 0.01);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = vector3_0.subtract((IVector3) vector3_1, vector3_2);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_3.lengthSquared(), 0.01);
      assertNotNull(vector3_3);
      
      Quaternion quaternion4 = new Quaternion();
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(1.0, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertEquals(1.0, quaternion4.w(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion4.fromVectorFromNegativeZ(3.4028234663852886E38, 0.0, 3.4028234663852886E38);
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion5.w, 0.01);
      assertEquals(Double.NaN, quaternion5.x, 0.01);
      assertEquals(Double.NaN, quaternion5.y, 0.01);
      assertEquals(Double.NaN, quaternion5.z, 0.01);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion4.z(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.y(), 0.01);
      assertEquals(Double.NaN, quaternion4.x(), 0.01);
      assertEquals(Double.NaN, quaternion4.w(), 0.01);
      assertEquals(Double.NaN, quaternion5.x(), 0.01);
      assertEquals(Double.NaN, quaternion5.y(), 0.01);
      assertEquals(Double.NaN, quaternion5.w(), 0.01);
      assertEquals(Double.NaN, quaternion5.getRotationZ(), 0.01);
      assertTrue(quaternion5.hasNaN());
      assertEquals(Double.NaN, quaternion5.z(), 0.01);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion2.invert(quaternion0);
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertEquals(3.4028234663852886E38, quaternion0.w, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.x, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.z, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion6.x, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion6.y, 0.01);
      assertEquals(3.4028234663852886E38, quaternion6.w, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion6.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.y, 0.01);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion3);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), quaternion0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.z(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.w(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion6.x(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion6.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion6.w(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals(3.141592653589793, quaternion6.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion6.z(), 0.01);
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.y(), 0.01);
      assertEquals(2.356194490192345, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion2.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.z(), 0.01);
      assertNotNull(quaternion6);
      assertEquals(7, doubleArray0.length);
      
      Quaternion quaternion7 = quaternion3.fromAngles(vector3_0);
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertEquals(0.32190481560279927, quaternion3.z, 0.01);
      assertEquals(0.32190481560279915, quaternion3.x, 0.01);
      assertEquals((-0.8718943381444304), quaternion3.w, 0.01);
      assertEquals(0.18042960537323452, quaternion3.y, 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.w, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.x, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals((-0.8718943381444304), quaternion7.w, 0.01);
      assertEquals(0.18042960537323452, quaternion7.y, 0.01);
      assertEquals(0.32190481560279927, quaternion7.z, 0.01);
      assertEquals(0.32190481560279915, quaternion7.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion3);
      assertEquals((-0.5490493299574541), quaternion3.getRotationZ(), 0.01);
      assertEquals(0.18042960537323452, quaternion3.y(), 0.01);
      assertEquals(0.32190481560279915, quaternion3.x(), 0.01);
      assertEquals(0.32190481560279927, quaternion3.z(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-0.8718943381444304), quaternion3.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), quaternion0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.z(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.w(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals((-0.5490493299574541), quaternion7.getRotationZ(), 0.01);
      assertEquals(0.18042960537323452, quaternion7.y(), 0.01);
      assertEquals((-0.8718943381444304), quaternion7.w(), 0.01);
      assertEquals(0.32190481560279915, quaternion7.x(), 0.01);
      assertEquals(0.32190481560279927, quaternion7.z(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertNotNull(quaternion7);
      assertEquals(7, doubleArray0.length);
      
      double double3 = quaternion1.z();
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion3);
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertEquals(3.4028234663852886E38, double3, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean0 = quaternion7.hasNaN();
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertEquals(0.32190481560279927, quaternion3.z, 0.01);
      assertEquals(0.32190481560279915, quaternion3.x, 0.01);
      assertEquals((-0.8718943381444304), quaternion3.w, 0.01);
      assertEquals(0.18042960537323452, quaternion3.y, 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.w, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.x, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals((-0.8718943381444304), quaternion7.w, 0.01);
      assertEquals(0.18042960537323452, quaternion7.y, 0.01);
      assertEquals(0.32190481560279927, quaternion7.z, 0.01);
      assertEquals(0.32190481560279915, quaternion7.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion3);
      assertEquals((-0.5490493299574541), quaternion3.getRotationZ(), 0.01);
      assertEquals(0.18042960537323452, quaternion3.y(), 0.01);
      assertEquals(0.32190481560279915, quaternion3.x(), 0.01);
      assertEquals(0.32190481560279927, quaternion3.z(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-0.8718943381444304), quaternion3.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), quaternion0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.z(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.w(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals((-0.5490493299574541), quaternion7.getRotationZ(), 0.01);
      assertEquals(0.18042960537323452, quaternion7.y(), 0.01);
      assertEquals((-0.8718943381444304), quaternion7.w(), 0.01);
      assertEquals(0.32190481560279915, quaternion7.x(), 0.01);
      assertEquals(0.32190481560279927, quaternion7.z(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      Quaternion quaternion8 = quaternion7.multLocal(quaternion2);
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertTrue(quaternion2.equals((Object)quaternion6));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertEquals((-5.7716431301922855E38), quaternion3.w, 0.01);
      assertEquals((-2.352932418851658E38), quaternion3.y, 0.01);
      assertEquals((-2.3529324188516584E38), quaternion3.x, 0.01);
      assertEquals((-1.3901020882897488E38), quaternion3.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.w, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.x, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals((-5.7716431301922855E38), quaternion7.w, 0.01);
      assertEquals((-2.352932418851658E38), quaternion7.y, 0.01);
      assertEquals((-2.3529324188516584E38), quaternion7.x, 0.01);
      assertEquals((-1.3901020882897488E38), quaternion7.z, 0.01);
      assertEquals((-2.352932418851658E38), quaternion8.y, 0.01);
      assertEquals((-5.7716431301922855E38), quaternion8.w, 0.01);
      assertEquals((-2.3529324188516584E38), quaternion8.x, 0.01);
      assertEquals((-1.3901020882897488E38), quaternion8.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.y, 0.01);
      assertSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion5);
      assertSame(quaternion8, quaternion7);
      assertSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion3);
      assertEquals((-2.3529324188516584E38), quaternion3.x(), 0.01);
      assertEquals(2.0742604332545564, quaternion3.getRotationZ(), 0.01);
      assertEquals((-1.3901020882897488E38), quaternion3.z(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-2.352932418851658E38), quaternion3.y(), 0.01);
      assertEquals((-5.7716431301922855E38), quaternion3.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), quaternion0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.z(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.w(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals((-2.3529324188516584E38), quaternion7.x(), 0.01);
      assertEquals(2.0742604332545564, quaternion7.getRotationZ(), 0.01);
      assertEquals((-1.3901020882897488E38), quaternion7.z(), 0.01);
      assertEquals((-5.7716431301922855E38), quaternion7.w(), 0.01);
      assertEquals((-2.352932418851658E38), quaternion7.y(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-5.7716431301922855E38), quaternion8.w(), 0.01);
      assertEquals((-2.352932418851658E38), quaternion8.y(), 0.01);
      assertFalse(quaternion8.hasNaN());
      assertEquals((-1.3901020882897488E38), quaternion8.z(), 0.01);
      assertEquals(2.0742604332545564, quaternion8.getRotationZ(), 0.01);
      assertEquals((-2.3529324188516584E38), quaternion8.x(), 0.01);
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.y(), 0.01);
      assertEquals(2.356194490192345, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion2.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.z(), 0.01);
      assertNotNull(quaternion8);
      assertEquals(7, doubleArray0.length);
      
      Quaternion quaternion9 = quaternion2.invert();
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertTrue(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertTrue(quaternion2.equals((Object)quaternion6));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertEquals(3.4028234663852886E38, quaternion0.w, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.x, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion9.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion9.w, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion9.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion9.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.y, 0.01);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion7);
      assertNotSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion3);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), quaternion0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.z(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.w(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y(), 0.01);
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion9.z(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion9.y(), 0.01);
      assertEquals(3.141592653589793, quaternion9.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion9.x(), 0.01);
      assertFalse(quaternion9.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion9.w(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.y(), 0.01);
      assertEquals(2.356194490192345, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion2.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.z(), 0.01);
      assertNotNull(quaternion9);
      assertEquals(7, doubleArray0.length);
      
      double double4 = quaternion1.w();
      assertArrayEquals(new double[] {3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion3);
      assertEquals(2.356194490192345, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.4028234663852886E38, quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertEquals(3.4028234663852886E38, double4, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Quaternion quaternion10 = quaternion5.fromAxes(vector3_1, vector3_2, vector3_3);
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(9.2233717619768648E18, quaternion4.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion5.y, 0.01);
      assertEquals(Double.NaN, quaternion5.z, 0.01);
      assertEquals(9.2233717619768648E18, quaternion5.w, 0.01);
      assertEquals(9.2233717619768648E18, quaternion5.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion10.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion10.w, 0.01);
      assertEquals(Double.NaN, quaternion10.z, 0.01);
      assertEquals(Double.NaN, quaternion10.y, 0.01);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion10);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion9);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion8);
      assertSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion3);
      assertSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion2);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_3.lengthSquared(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion4.w(), 0.01);
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion4.z(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.y(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion4.x(), 0.01);
      assertEquals(Double.NaN, quaternion5.y(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion5.x(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion5.w(), 0.01);
      assertEquals(Double.NaN, quaternion5.getRotationZ(), 0.01);
      assertTrue(quaternion5.hasNaN());
      assertEquals(Double.NaN, quaternion5.z(), 0.01);
      assertEquals(Double.NaN, quaternion10.y(), 0.01);
      assertEquals(Double.NaN, quaternion10.z(), 0.01);
      assertTrue(quaternion10.hasNaN());
      assertEquals(Double.NaN, quaternion10.getRotationZ(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion10.x(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion10.w(), 0.01);
      assertNotNull(quaternion10);
      
      Vector3 vector3_4 = quaternion4.toAngles();
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertEquals(9.2233717619768648E18, quaternion4.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertEquals(1.5707963267948966, vector3_4.y, 0.01);
      assertEquals(Double.NaN, vector3_4.z, 0.01);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_2);
      assertEquals(9.2233717619768648E18, quaternion4.w(), 0.01);
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion4.z(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.y(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion4.x(), 0.01);
      assertEquals(Double.NaN, vector3_4.length(), 0.01);
      assertEquals(Double.NaN, vector3_4.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_4.x(), 0.01);
      assertEquals(1.5707963267948966, vector3_4.y(), 0.01);
      assertEquals(Double.NaN, vector3_4.z(), 0.01);
      assertNotNull(vector3_4);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(1.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertNotNull(vector3_1);
      
      Quaternion quaternion1 = quaternion0.fromVectors(vector3_0, vector3_1);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals((-0.7071067811865475), quaternion0.x, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(1.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals((-0.7071067811865475), quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.7071067811865475), quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.7071067811865475), quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.z(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion0.transformUnitX(vector3_1);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(1.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_2.x(), 0.01);
      assertEquals(1.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(1.0, vector3_2.lengthSquared(), 0.01);
      assertNotNull(vector3_2);
      
      Quaternion quaternion1 = new Quaternion(0.0, 0.0, 60.48, 0.0);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(60.48, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(60.48, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = new Quaternion(quaternion1);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(60.48, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(60.48, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(60.48, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(60.48, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion2.fromAnglesXZ(0.0, 0.0);
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(60.48, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(60.48, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion3.fromAngleAxis(0.0, 1.0, (-625.8225315), 2317.624636388);
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(60.48, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(-0.0, quaternion3.y, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(1.0, quaternion4.w, 0.01);
      assertEquals(-0.0, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(60.48, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(-0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(1.0, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertEquals(-0.0, quaternion4.y(), 0.01);
      assertNotNull(quaternion4);
      
      Vector3 vector3_3 = quaternion3.transform((IVector3) vector3_2, vector3_2);
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(1.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(60.48, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(-0.0, quaternion3.y, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(1.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion4);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_2.x(), 0.01);
      assertEquals(1.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(1.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(60.48, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(-0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(1.0, vector3_3.x(), 0.01);
      assertEquals(1.0, vector3_3.length(), 0.01);
      assertEquals(1.0, vector3_3.lengthSquared(), 0.01);
      assertNotNull(vector3_3);
      
      // Undeclared exception!
      try { 
        quaternion2.slerpLocal((IQuaternion) null, (-0.9999900000002526));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertNotNull(vector3_0);
      
      // Undeclared exception!
      try { 
        quaternion0.transformAndAdd(vector3_0, vector3_0, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAnglesXY((-375.794910942628), (-375.794910942628));
      assertEquals(0.6829449546824179, quaternion0.w, 0.01);
      assertEquals((-0.3170550453175821), quaternion0.z, 0.01);
      assertEquals(0.46532907018178876, quaternion0.y, 0.01);
      assertEquals(0.46532907018178876, quaternion0.x, 0.01);
      assertEquals(0.46532907018178876, quaternion1.x, 0.01);
      assertEquals(0.46532907018178876, quaternion1.y, 0.01);
      assertEquals((-0.3170550453175821), quaternion1.z, 0.01);
      assertEquals(0.6829449546824179, quaternion1.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.46532907018178876, quaternion0.x(), 0.01);
      assertEquals(0.46532907018178876, quaternion0.y(), 0.01);
      assertEquals(1.517154472164101E-16, quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.3170550453175821), quaternion0.z(), 0.01);
      assertEquals(0.6829449546824179, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.46532907018178876, quaternion1.y(), 0.01);
      assertEquals(1.517154472164101E-16, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.46532907018178876, quaternion1.x(), 0.01);
      assertEquals(0.6829449546824179, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.3170550453175821), quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.fromAnglesXZ((-375.794910942628), (-375.794910942628));
      assertEquals(0.3170550453175821, quaternion0.y, 0.01);
      assertEquals(0.6829449546824179, quaternion0.w, 0.01);
      assertEquals(0.46532907018178876, quaternion0.z, 0.01);
      assertEquals(0.46532907018178876, quaternion0.x, 0.01);
      assertEquals(0.3170550453175821, quaternion1.y, 0.01);
      assertEquals(0.46532907018178876, quaternion1.x, 0.01);
      assertEquals(0.46532907018178876, quaternion1.z, 0.01);
      assertEquals(0.6829449546824179, quaternion1.w, 0.01);
      assertEquals(0.46532907018178876, quaternion2.x, 0.01);
      assertEquals(0.46532907018178876, quaternion2.z, 0.01);
      assertEquals(0.6829449546824179, quaternion2.w, 0.01);
      assertEquals(0.3170550453175821, quaternion2.y, 0.01);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertEquals(0.46532907018178876, quaternion0.x(), 0.01);
      assertEquals(1.1962074881471811, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.6829449546824179, quaternion0.w(), 0.01);
      assertEquals(0.46532907018178876, quaternion0.z(), 0.01);
      assertEquals(0.3170550453175821, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.3170550453175821, quaternion1.y(), 0.01);
      assertEquals(0.46532907018178876, quaternion1.x(), 0.01);
      assertEquals(0.6829449546824179, quaternion1.w(), 0.01);
      assertEquals(0.46532907018178876, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.1962074881471811, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.3170550453175821, quaternion2.y(), 0.01);
      assertEquals(0.46532907018178876, quaternion2.x(), 0.01);
      assertEquals(1.1962074881471811, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.46532907018178876, quaternion2.z(), 0.01);
      assertEquals(0.6829449546824179, quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion1.mult((IQuaternion) quaternion2, quaternion2);
      assertEquals(0.6355882814954268, quaternion0.z, 0.01);
      assertEquals(0.4330622871124961, quaternion0.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion0.w, 0.01);
      assertEquals(0.6355882814954268, quaternion0.x, 0.01);
      assertEquals(0.4330622871124961, quaternion1.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion1.w, 0.01);
      assertEquals(0.6355882814954268, quaternion1.x, 0.01);
      assertEquals(0.6355882814954268, quaternion1.z, 0.01);
      assertEquals(0.4330622871124961, quaternion2.y, 0.01);
      assertEquals(0.6355882814954268, quaternion2.z, 0.01);
      assertEquals((-0.06717237774766041), quaternion2.w, 0.01);
      assertEquals(0.6355882814954268, quaternion2.x, 0.01);
      assertEquals(0.4330622871124961, quaternion3.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion3.w, 0.01);
      assertEquals(0.6355882814954268, quaternion3.x, 0.01);
      assertEquals(0.6355882814954268, quaternion3.z, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertEquals(0.4330622871124961, quaternion0.y(), 0.01);
      assertEquals(1.945704906147928, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.6355882814954268, quaternion0.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.06717237774766041), quaternion0.w(), 0.01);
      assertEquals(1.945704906147928, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.06717237774766041), quaternion1.w(), 0.01);
      assertEquals(0.6355882814954268, quaternion1.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion1.z(), 0.01);
      assertEquals(0.4330622871124961, quaternion1.y(), 0.01);
      assertEquals(0.6355882814954268, quaternion2.z(), 0.01);
      assertEquals(0.6355882814954268, quaternion2.x(), 0.01);
      assertEquals(0.4330622871124961, quaternion2.y(), 0.01);
      assertEquals((-0.06717237774766041), quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.945704906147928, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.945704906147928, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.4330622871124961, quaternion3.y(), 0.01);
      assertEquals(0.6355882814954268, quaternion3.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion3.z(), 0.01);
      assertEquals((-0.06717237774766041), quaternion3.w(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertNotNull(quaternion3);
      
      String string0 = quaternion3.toString();
      assertEquals(0.6355882814954268, quaternion0.z, 0.01);
      assertEquals(0.4330622871124961, quaternion0.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion0.w, 0.01);
      assertEquals(0.6355882814954268, quaternion0.x, 0.01);
      assertEquals(0.4330622871124961, quaternion1.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion1.w, 0.01);
      assertEquals(0.6355882814954268, quaternion1.x, 0.01);
      assertEquals(0.6355882814954268, quaternion1.z, 0.01);
      assertEquals(0.4330622871124961, quaternion2.y, 0.01);
      assertEquals(0.6355882814954268, quaternion2.z, 0.01);
      assertEquals((-0.06717237774766041), quaternion2.w, 0.01);
      assertEquals(0.6355882814954268, quaternion2.x, 0.01);
      assertEquals(0.4330622871124961, quaternion3.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion3.w, 0.01);
      assertEquals(0.6355882814954268, quaternion3.x, 0.01);
      assertEquals(0.6355882814954268, quaternion3.z, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertEquals(0.4330622871124961, quaternion0.y(), 0.01);
      assertEquals(1.945704906147928, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.6355882814954268, quaternion0.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.06717237774766041), quaternion0.w(), 0.01);
      assertEquals(1.945704906147928, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.06717237774766041), quaternion1.w(), 0.01);
      assertEquals(0.6355882814954268, quaternion1.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion1.z(), 0.01);
      assertEquals(0.4330622871124961, quaternion1.y(), 0.01);
      assertEquals(0.6355882814954268, quaternion2.z(), 0.01);
      assertEquals(0.6355882814954268, quaternion2.x(), 0.01);
      assertEquals(0.4330622871124961, quaternion2.y(), 0.01);
      assertEquals((-0.06717237774766041), quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.945704906147928, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.945704906147928, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.4330622871124961, quaternion3.y(), 0.01);
      assertEquals(0.6355882814954268, quaternion3.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion3.z(), 0.01);
      assertEquals((-0.06717237774766041), quaternion3.w(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals("[0.6355882814954268, 0.4330622871124961, 0.6355882814954268, -0.06717237774766041]", string0);
      assertNotNull(string0);
      
      quaternion2.hashCode();
      assertEquals(0.6355882814954268, quaternion0.z, 0.01);
      assertEquals(0.4330622871124961, quaternion0.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion0.w, 0.01);
      assertEquals(0.6355882814954268, quaternion0.x, 0.01);
      assertEquals(0.4330622871124961, quaternion1.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion1.w, 0.01);
      assertEquals(0.6355882814954268, quaternion1.x, 0.01);
      assertEquals(0.6355882814954268, quaternion1.z, 0.01);
      assertEquals(0.4330622871124961, quaternion2.y, 0.01);
      assertEquals(0.6355882814954268, quaternion2.z, 0.01);
      assertEquals((-0.06717237774766041), quaternion2.w, 0.01);
      assertEquals(0.6355882814954268, quaternion2.x, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertEquals(0.4330622871124961, quaternion0.y(), 0.01);
      assertEquals(1.945704906147928, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.6355882814954268, quaternion0.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.06717237774766041), quaternion0.w(), 0.01);
      assertEquals(1.945704906147928, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.06717237774766041), quaternion1.w(), 0.01);
      assertEquals(0.6355882814954268, quaternion1.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion1.z(), 0.01);
      assertEquals(0.4330622871124961, quaternion1.y(), 0.01);
      assertEquals(0.6355882814954268, quaternion2.z(), 0.01);
      assertEquals(0.6355882814954268, quaternion2.x(), 0.01);
      assertEquals(0.4330622871124961, quaternion2.y(), 0.01);
      assertEquals((-0.06717237774766041), quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.945704906147928, quaternion2.getRotationZ(), 0.01);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion4 = quaternion1.integrateLocal(vector3_0, (-0.06717237774766041));
      assertEquals(0.6355882814954268, quaternion0.z, 0.01);
      assertEquals(0.4330622871124961, quaternion0.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion0.w, 0.01);
      assertEquals(0.6355882814954268, quaternion0.x, 0.01);
      assertEquals(0.4330622871124961, quaternion1.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion1.w, 0.01);
      assertEquals(0.6355882814954268, quaternion1.x, 0.01);
      assertEquals(0.6355882814954268, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals((-0.06717237774766041), quaternion4.w, 0.01);
      assertEquals(0.6355882814954268, quaternion4.z, 0.01);
      assertEquals(0.6355882814954268, quaternion4.x, 0.01);
      assertEquals(0.4330622871124961, quaternion4.y, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertEquals(0.4330622871124961, quaternion0.y(), 0.01);
      assertEquals(1.945704906147928, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.6355882814954268, quaternion0.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.06717237774766041), quaternion0.w(), 0.01);
      assertEquals(1.945704906147928, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.06717237774766041), quaternion1.w(), 0.01);
      assertEquals(0.6355882814954268, quaternion1.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion1.z(), 0.01);
      assertEquals(0.4330622871124961, quaternion1.y(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.6355882814954268, quaternion4.x(), 0.01);
      assertEquals(0.4330622871124961, quaternion4.y(), 0.01);
      assertEquals(0.6355882814954268, quaternion4.z(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.06717237774766041), quaternion4.w(), 0.01);
      assertEquals(1.945704906147928, quaternion4.getRotationZ(), 0.01);
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion4.normalize(quaternion3);
      assertEquals(0.6355882814954268, quaternion0.z, 0.01);
      assertEquals(0.4330622871124961, quaternion0.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion0.w, 0.01);
      assertEquals(0.6355882814954268, quaternion0.x, 0.01);
      assertEquals(0.4330622871124961, quaternion1.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion1.w, 0.01);
      assertEquals(0.6355882814954268, quaternion1.x, 0.01);
      assertEquals(0.6355882814954268, quaternion1.z, 0.01);
      assertEquals(0.4330622871124961, quaternion2.y, 0.01);
      assertEquals(0.6355882814954268, quaternion2.z, 0.01);
      assertEquals((-0.06717237774766041), quaternion2.w, 0.01);
      assertEquals(0.6355882814954268, quaternion2.x, 0.01);
      assertEquals(0.4330622871124961, quaternion3.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion3.w, 0.01);
      assertEquals(0.6355882814954268, quaternion3.x, 0.01);
      assertEquals(0.6355882814954268, quaternion3.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals((-0.06717237774766041), quaternion4.w, 0.01);
      assertEquals(0.6355882814954268, quaternion4.z, 0.01);
      assertEquals(0.6355882814954268, quaternion4.x, 0.01);
      assertEquals(0.4330622871124961, quaternion4.y, 0.01);
      assertEquals(0.4330622871124961, quaternion5.y, 0.01);
      assertEquals((-0.06717237774766041), quaternion5.w, 0.01);
      assertEquals(0.6355882814954268, quaternion5.x, 0.01);
      assertEquals(0.6355882814954268, quaternion5.z, 0.01);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion1);
      assertEquals(0.4330622871124961, quaternion0.y(), 0.01);
      assertEquals(1.945704906147928, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.6355882814954268, quaternion0.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.06717237774766041), quaternion0.w(), 0.01);
      assertEquals(1.945704906147928, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.06717237774766041), quaternion1.w(), 0.01);
      assertEquals(0.6355882814954268, quaternion1.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion1.z(), 0.01);
      assertEquals(0.4330622871124961, quaternion1.y(), 0.01);
      assertEquals(0.6355882814954268, quaternion2.z(), 0.01);
      assertEquals(0.6355882814954268, quaternion2.x(), 0.01);
      assertEquals(0.4330622871124961, quaternion2.y(), 0.01);
      assertEquals((-0.06717237774766041), quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.945704906147928, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.945704906147928, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.4330622871124961, quaternion3.y(), 0.01);
      assertEquals(0.6355882814954268, quaternion3.x(), 0.01);
      assertEquals(0.6355882814954268, quaternion3.z(), 0.01);
      assertEquals((-0.06717237774766041), quaternion3.w(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.6355882814954268, quaternion4.x(), 0.01);
      assertEquals(0.4330622871124961, quaternion4.y(), 0.01);
      assertEquals(0.6355882814954268, quaternion4.z(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.06717237774766041), quaternion4.w(), 0.01);
      assertEquals(1.945704906147928, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.4330622871124961, quaternion5.y(), 0.01);
      assertEquals(0.6355882814954268, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(1.945704906147928, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.6355882814954268, quaternion5.z(), 0.01);
      assertEquals((-0.06717237774766041), quaternion5.w(), 0.01);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion2.mult((IQuaternion) quaternion1, quaternion1);
      assertEquals((-0.05817964707637274), quaternion0.y, 0.01);
      assertEquals((-0.9909757433354514), quaternion0.w, 0.01);
      assertEquals((-0.08538795227319426), quaternion0.x, 0.01);
      assertEquals((-0.08538795227319426), quaternion0.z, 0.01);
      assertEquals((-0.9909757433354514), quaternion1.w, 0.01);
      assertEquals((-0.08538795227319426), quaternion1.x, 0.01);
      assertEquals((-0.05817964707637274), quaternion1.y, 0.01);
      assertEquals((-0.08538795227319426), quaternion1.z, 0.01);
      assertEquals((-0.9909757433354514), quaternion2.w, 0.01);
      assertEquals((-0.05817964707637274), quaternion2.y, 0.01);
      assertEquals((-0.08538795227319426), quaternion2.x, 0.01);
      assertEquals((-0.08538795227319426), quaternion2.z, 0.01);
      assertEquals((-0.08538795227319426), quaternion6.x, 0.01);
      assertEquals((-0.9909757433354514), quaternion6.w, 0.01);
      assertEquals((-0.08538795227319426), quaternion6.z, 0.01);
      assertEquals((-0.05817964707637274), quaternion6.y, 0.01);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion2);
      assertEquals((-0.9909757433354514), quaternion0.w(), 0.01);
      assertEquals((-0.05817964707637274), quaternion0.y(), 0.01);
      assertEquals(0.18107424814306036, quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.08538795227319426), quaternion0.z(), 0.01);
      assertEquals((-0.08538795227319426), quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.08538795227319426), quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.05817964707637274), quaternion1.y(), 0.01);
      assertEquals((-0.9909757433354514), quaternion1.w(), 0.01);
      assertEquals((-0.08538795227319426), quaternion1.z(), 0.01);
      assertEquals(0.18107424814306036, quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.9909757433354514), quaternion2.w(), 0.01);
      assertEquals((-0.05817964707637274), quaternion2.y(), 0.01);
      assertEquals((-0.08538795227319426), quaternion2.x(), 0.01);
      assertEquals(0.18107424814306036, quaternion2.getRotationZ(), 0.01);
      assertEquals((-0.08538795227319426), quaternion2.z(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.18107424814306036, quaternion6.getRotationZ(), 0.01);
      assertEquals((-0.05817964707637274), quaternion6.y(), 0.01);
      assertEquals((-0.9909757433354514), quaternion6.w(), 0.01);
      assertEquals((-0.08538795227319426), quaternion6.x(), 0.01);
      assertEquals((-0.08538795227319426), quaternion6.z(), 0.01);
      assertNotNull(quaternion6);
      
      Vector3 vector3_1 = null;
      // Undeclared exception!
      try { 
        quaternion6.transformAndAdd(vector3_0, vector3_0, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3459.422879232), (-0.9999900000002526), (-3459.422879232), 0.0);
      assertEquals((-3459.422879232), quaternion0.z, 0.01);
      assertEquals((-0.9999900000002526), quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals((-3459.422879232), quaternion0.x, 0.01);
      assertEquals((-0.9999900000002526), quaternion0.y(), 0.01);
      assertEquals(3.141303590944005, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3459.422879232), quaternion0.x(), 0.01);
      assertEquals((-3459.422879232), quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ((-0.9999900000002526), 1.0, 0.0);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals(0.5000025000061867, quaternion0.x, 0.01);
      assertEquals(0.49999749998131304, quaternion0.y, 0.01);
      assertEquals(0.49999749998131304, quaternion1.y, 0.01);
      assertEquals(0.5000025000061867, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertEquals(0.49999749998131304, quaternion0.y(), 0.01);
      assertEquals(0.5000025000061867, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.7853931633725745, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.49999749998131304, quaternion1.y(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertEquals(0.5000025000061867, quaternion1.x(), 0.01);
      assertEquals(0.7853931633725745, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion2 = quaternion1.fromVectorFromNegativeZ((IVector3) vector3_0);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(1.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(1.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(1.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertNotNull(quaternion2);
      
      Vector3 vector3_1 = quaternion2.transform((IVector3) vector3_0);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(1.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1.0), vector3_1.z, 0.01);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(1.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(1.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals((-1.0), vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = (Vector3)Vector3.NORMAL_XYZ;
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = new Vector3(vector3_2);
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(0.0, vector3_3.lengthSquared(), 0.01);
      assertNotNull(vector3_3);
      
      Vector3 vector3_4 = quaternion1.transform((IVector3) vector3_2, vector3_3);
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertTrue(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(0.0, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_0);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(1.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(0.0, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(0.0, vector3_4.x(), 0.01);
      assertEquals(0.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_4.length(), 0.01);
      assertNotNull(vector3_4);
      
      Quaternion quaternion3 = quaternion1.normalize();
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion3.w, 0.01);
      assertEquals(1.0, quaternion3.y, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(1.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.w(), 0.01);
      assertEquals(3.141592653589793, quaternion3.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion1.fromAnglesXZ(0.8775825618903728, (-1.0));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals((-0.20368181315635536), quaternion0.y, 0.01);
      assertEquals(0.37283705811883827, quaternion0.x, 0.01);
      assertEquals(0.7944455179729822, quaternion0.w, 0.01);
      assertEquals((-0.43400756451388), quaternion0.z, 0.01);
      assertEquals((-0.43400756451388), quaternion1.z, 0.01);
      assertEquals(0.7944455179729822, quaternion1.w, 0.01);
      assertEquals(0.37283705811883827, quaternion1.x, 0.01);
      assertEquals((-0.20368181315635536), quaternion1.y, 0.01);
      assertEquals((-0.20368181315635536), quaternion4.y, 0.01);
      assertEquals((-0.43400756451388), quaternion4.z, 0.01);
      assertEquals(0.37283705811883827, quaternion4.x, 0.01);
      assertEquals(0.7944455179729822, quaternion4.w, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertEquals((-0.20368181315635536), quaternion0.y(), 0.01);
      assertEquals((-1.0000000000000002), quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.43400756451388), quaternion0.z(), 0.01);
      assertEquals(0.37283705811883827, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.7944455179729822, quaternion0.w(), 0.01);
      assertEquals(0.37283705811883827, quaternion1.x(), 0.01);
      assertEquals((-0.20368181315635536), quaternion1.y(), 0.01);
      assertEquals(0.7944455179729822, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1.0000000000000002), quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.43400756451388), quaternion1.z(), 0.01);
      assertEquals((-0.20368181315635536), quaternion4.y(), 0.01);
      assertEquals(0.7944455179729822, quaternion4.w(), 0.01);
      assertEquals(0.37283705811883827, quaternion4.x(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.43400756451388), quaternion4.z(), 0.01);
      assertEquals((-1.0000000000000002), quaternion4.getRotationZ(), 0.01);
      assertNotNull(quaternion4);
      
      Vector3 vector3_5 = quaternion1.transformUnitZ(vector3_1);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertEquals((-0.20368181315635536), quaternion0.y, 0.01);
      assertEquals(0.37283705811883827, quaternion0.x, 0.01);
      assertEquals(0.7944455179729822, quaternion0.w, 0.01);
      assertEquals((-0.43400756451388), quaternion0.z, 0.01);
      assertEquals((-0.43400756451388), quaternion1.z, 0.01);
      assertEquals(0.7944455179729822, quaternion1.w, 0.01);
      assertEquals(0.37283705811883827, quaternion1.x, 0.01);
      assertEquals((-0.20368181315635536), quaternion1.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.7944455179729822, quaternion2.w, 0.01);
      assertEquals((-0.20368181315635536), quaternion2.y, 0.01);
      assertEquals((-0.43400756451388), quaternion2.z, 0.01);
      assertEquals(0.37283705811883827, quaternion2.x, 0.01);
      assertEquals(0.6390124941652591, vector3_1.z, 0.01);
      assertEquals((-0.6472564142187077), vector3_1.x, 0.01);
      assertEquals((-0.41559856418596475), vector3_1.y, 0.01);
      assertEquals((-0.41559856418596475), vector3_5.y, 0.01);
      assertEquals(0.6390124941652591, vector3_5.z, 0.01);
      assertEquals((-0.6472564142187077), vector3_5.x, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_2);
      assertEquals((-0.20368181315635536), quaternion0.y(), 0.01);
      assertEquals((-1.0000000000000002), quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.43400756451388), quaternion0.z(), 0.01);
      assertEquals(0.37283705811883827, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.7944455179729822, quaternion0.w(), 0.01);
      assertEquals(0.37283705811883827, quaternion1.x(), 0.01);
      assertEquals((-0.20368181315635536), quaternion1.y(), 0.01);
      assertEquals(0.7944455179729822, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1.0000000000000002), quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.43400756451388), quaternion1.z(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.7944455179729822, quaternion2.w(), 0.01);
      assertEquals(0.37283705811883827, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.0000000000000002), quaternion2.getRotationZ(), 0.01);
      assertEquals((-0.43400756451388), quaternion2.z(), 0.01);
      assertEquals((-0.20368181315635536), quaternion2.y(), 0.01);
      assertEquals(0.6390124941652591, vector3_1.z(), 0.01);
      assertEquals((-0.41559856418596475), vector3_1.y(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals((-0.6472564142187077), vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_5.lengthSquared(), 0.01);
      assertEquals((-0.41559856418596475), vector3_5.y(), 0.01);
      assertEquals((-0.6472564142187077), vector3_5.x(), 0.01);
      assertEquals(0.6390124941652591, vector3_5.z(), 0.01);
      assertEquals(1.0, vector3_5.length(), 0.01);
      assertNotNull(vector3_5);
      
      Vector3 vector3_6 = quaternion0.transformUnitZ(vector3_4);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_5));
      assertTrue(vector3_4.equals((Object)vector3_5));
      assertTrue(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertTrue(vector3_6.equals((Object)vector3_5));
      assertTrue(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertEquals((-0.20368181315635536), quaternion0.y, 0.01);
      assertEquals(0.37283705811883827, quaternion0.x, 0.01);
      assertEquals(0.7944455179729822, quaternion0.w, 0.01);
      assertEquals((-0.43400756451388), quaternion0.z, 0.01);
      assertEquals((-0.43400756451388), quaternion1.z, 0.01);
      assertEquals(0.7944455179729822, quaternion1.w, 0.01);
      assertEquals(0.37283705811883827, quaternion1.x, 0.01);
      assertEquals((-0.20368181315635536), quaternion1.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals((-0.41559856418596475), vector3_3.y, 0.01);
      assertEquals((-0.6472564142187077), vector3_3.x, 0.01);
      assertEquals(0.6390124941652591, vector3_3.z, 0.01);
      assertEquals(0.6390124941652591, vector3_4.z, 0.01);
      assertEquals((-0.41559856418596475), vector3_4.y, 0.01);
      assertEquals((-0.6472564142187077), vector3_4.x, 0.01);
      assertEquals(0.6390124941652591, vector3_6.z, 0.01);
      assertEquals((-0.41559856418596475), vector3_6.y, 0.01);
      assertEquals((-0.6472564142187077), vector3_6.x, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_6);
      assertNotSame(vector3_6, vector3_2);
      assertSame(vector3_6, vector3_3);
      assertSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_0);
      assertEquals((-0.20368181315635536), quaternion0.y(), 0.01);
      assertEquals((-1.0000000000000002), quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.43400756451388), quaternion0.z(), 0.01);
      assertEquals(0.37283705811883827, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.7944455179729822, quaternion0.w(), 0.01);
      assertEquals(0.37283705811883827, quaternion1.x(), 0.01);
      assertEquals((-0.20368181315635536), quaternion1.y(), 0.01);
      assertEquals(0.7944455179729822, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1.0000000000000002), quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.43400756451388), quaternion1.z(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals((-0.41559856418596475), vector3_3.y(), 0.01);
      assertEquals((-0.6472564142187077), vector3_3.x(), 0.01);
      assertEquals(0.6390124941652591, vector3_3.z(), 0.01);
      assertEquals(1.0, vector3_3.length(), 0.01);
      assertEquals(1.0, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.6390124941652591, vector3_4.z(), 0.01);
      assertEquals((-0.6472564142187077), vector3_4.x(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals((-0.41559856418596475), vector3_4.y(), 0.01);
      assertEquals(0.6390124941652591, vector3_6.z(), 0.01);
      assertEquals((-0.6472564142187077), vector3_6.x(), 0.01);
      assertEquals(1.0, vector3_6.length(), 0.01);
      assertEquals(1.0, vector3_6.lengthSquared(), 0.01);
      assertEquals((-0.41559856418596475), vector3_6.y(), 0.01);
      assertNotNull(vector3_6);
      
      Vector3 vector3_7 = quaternion2.transformUnitX(vector3_3);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_2));
      assertFalse(vector3_7.equals((Object)vector3_5));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertEquals((-0.20368181315635536), quaternion0.y, 0.01);
      assertEquals(0.37283705811883827, quaternion0.x, 0.01);
      assertEquals(0.7944455179729822, quaternion0.w, 0.01);
      assertEquals((-0.43400756451388), quaternion0.z, 0.01);
      assertEquals((-0.43400756451388), quaternion1.z, 0.01);
      assertEquals(0.7944455179729822, quaternion1.w, 0.01);
      assertEquals(0.37283705811883827, quaternion1.x, 0.01);
      assertEquals((-0.20368181315635536), quaternion1.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.7944455179729822, quaternion2.w, 0.01);
      assertEquals((-0.20368181315635536), quaternion2.y, 0.01);
      assertEquals((-0.43400756451388), quaternion2.z, 0.01);
      assertEquals(0.37283705811883827, quaternion2.x, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals((-0.8414709848078967), vector3_3.y, 0.01);
      assertEquals(0.5403023058681397, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals((-0.8414709848078967), vector3_7.y, 0.01);
      assertEquals(0.0, vector3_7.z, 0.01);
      assertEquals(0.5403023058681397, vector3_7.x, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_7);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_7, vector3_0);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_5);
      assertSame(vector3_7, vector3_6);
      assertNotSame(vector3_7, vector3_1);
      assertSame(vector3_7, vector3_4);
      assertSame(vector3_7, vector3_3);
      assertEquals((-0.20368181315635536), quaternion0.y(), 0.01);
      assertEquals((-1.0000000000000002), quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.43400756451388), quaternion0.z(), 0.01);
      assertEquals(0.37283705811883827, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.7944455179729822, quaternion0.w(), 0.01);
      assertEquals(0.37283705811883827, quaternion1.x(), 0.01);
      assertEquals((-0.20368181315635536), quaternion1.y(), 0.01);
      assertEquals(0.7944455179729822, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1.0000000000000002), quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.43400756451388), quaternion1.z(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.7944455179729822, quaternion2.w(), 0.01);
      assertEquals(0.37283705811883827, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1.0000000000000002), quaternion2.getRotationZ(), 0.01);
      assertEquals((-0.43400756451388), quaternion2.z(), 0.01);
      assertEquals((-0.20368181315635536), quaternion2.y(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(1.0000000000000002, vector3_3.lengthSquared(), 0.01);
      assertEquals((-0.8414709848078967), vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.5403023058681397, vector3_3.x(), 0.01);
      assertEquals(1.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_7.z(), 0.01);
      assertEquals(0.5403023058681397, vector3_7.x(), 0.01);
      assertEquals((-0.8414709848078967), vector3_7.y(), 0.01);
      assertEquals(1.0, vector3_7.length(), 0.01);
      assertEquals(1.0000000000000002, vector3_7.lengthSquared(), 0.01);
      assertNotNull(vector3_7);
      
      Quaternion quaternion5 = quaternion4.fromVectors(vector3_7, vector3_3);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_2));
      assertFalse(vector3_7.equals((Object)vector3_5));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertEquals(0.9999999999999999, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion0.w, 0.01);
      assertEquals(0.9999999999999999, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(0.9999999999999999, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals((-0.8414709848078967), vector3_3.y, 0.01);
      assertEquals(0.5403023058681397, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(0.9999999999999999, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals((-0.8414709848078967), vector3_7.y, 0.01);
      assertEquals(0.0, vector3_7.z, 0.01);
      assertEquals(0.5403023058681397, vector3_7.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.9999999999999999, quaternion5.z, 0.01);
      assertEquals(6.123233995736766E-17, quaternion5.w, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion5);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_7);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_1);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(vector3_7, vector3_0);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_5);
      assertSame(vector3_7, vector3_6);
      assertNotSame(vector3_7, vector3_1);
      assertSame(vector3_7, vector3_4);
      assertSame(vector3_7, vector3_3);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion1);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.9999999999999999, quaternion0.z(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(0.9999999999999999, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.9999999999999999, quaternion2.z(), 0.01);
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(1.0000000000000002, vector3_3.lengthSquared(), 0.01);
      assertEquals((-0.8414709848078967), vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.5403023058681397, vector3_3.x(), 0.01);
      assertEquals(1.0, vector3_3.length(), 0.01);
      assertEquals(3.141592653589793, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.9999999999999999, quaternion4.z(), 0.01);
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(6.123233995736766E-17, quaternion4.w(), 0.01);
      assertEquals(0.0, vector3_7.z(), 0.01);
      assertEquals(0.5403023058681397, vector3_7.x(), 0.01);
      assertEquals((-0.8414709848078967), vector3_7.y(), 0.01);
      assertEquals(1.0, vector3_7.length(), 0.01);
      assertEquals(1.0000000000000002, vector3_7.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertEquals(0.9999999999999999, quaternion5.z(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion5.w(), 0.01);
      assertEquals(3.141592653589793, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion1.fromAnglesXY(0.0, 0.8775825618903728);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.42484556360796616, quaternion0.y, 0.01);
      assertEquals(0.9052658433204192, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(0.9052658433204192, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.42484556360796616, quaternion1.y, 0.01);
      assertEquals(0.42484556360796616, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(0.9052658433204192, quaternion6.w, 0.01);
      assertEquals(-0.0, quaternion6.z, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion1);
      assertEquals(0.42484556360796616, quaternion0.y(), 0.01);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.9052658433204192, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.42484556360796616, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.9052658433204192, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion6.getRotationZ(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.9052658433204192, quaternion6.w(), 0.01);
      assertEquals(0.0, quaternion6.x(), 0.01);
      assertEquals(-0.0, quaternion6.z(), 0.01);
      assertEquals(0.42484556360796616, quaternion6.y(), 0.01);
      assertNotNull(quaternion6);
      
      Vector3 vector3_8 = new Vector3(0.0, 0.0, 0.0);
      assertFalse(vector3_8.equals((Object)vector3_0));
      assertFalse(vector3_8.equals((Object)vector3_1));
      assertFalse(vector3_8.equals((Object)vector3_4));
      assertTrue(vector3_8.equals((Object)vector3_2));
      assertFalse(vector3_8.equals((Object)vector3_5));
      assertFalse(vector3_8.equals((Object)vector3_3));
      assertFalse(vector3_8.equals((Object)vector3_7));
      assertFalse(vector3_8.equals((Object)vector3_6));
      assertEquals(0.0, vector3_8.z, 0.01);
      assertEquals(0.0, vector3_8.y, 0.01);
      assertEquals(0.0, vector3_8.x, 0.01);
      assertEquals(0.0, vector3_8.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_8.x(), 0.01);
      assertEquals(0.0, vector3_8.length(), 0.01);
      assertEquals(0.0, vector3_8.z(), 0.01);
      assertEquals(0.0, vector3_8.y(), 0.01);
      assertNotNull(vector3_8);
      
      Quaternion quaternion7 = quaternion2.integrate((IVector3) vector3_8, 0.0);
      assertTrue(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertTrue(quaternion7.equals((Object)quaternion0));
      assertTrue(quaternion7.equals((Object)quaternion2));
      assertTrue(quaternion7.equals((Object)quaternion6));
      assertTrue(quaternion7.equals((Object)quaternion5));
      assertTrue(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(vector3_8.equals((Object)vector3_0));
      assertFalse(vector3_8.equals((Object)vector3_1));
      assertFalse(vector3_8.equals((Object)vector3_4));
      assertTrue(vector3_8.equals((Object)vector3_2));
      assertFalse(vector3_8.equals((Object)vector3_5));
      assertFalse(vector3_8.equals((Object)vector3_3));
      assertFalse(vector3_8.equals((Object)vector3_7));
      assertFalse(vector3_8.equals((Object)vector3_6));
      assertEquals(0.9052658433204192, quaternion7.w, 0.01);
      assertEquals(0.0, quaternion7.x, 0.01);
      assertEquals(0.42484556360796616, quaternion7.y, 0.01);
      assertEquals(0.0, quaternion7.z, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.42484556360796616, quaternion0.y, 0.01);
      assertEquals(0.9052658433204192, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(0.9052658433204192, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.42484556360796616, quaternion1.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.42484556360796616, quaternion2.y, 0.01);
      assertEquals(-0.0, quaternion2.z, 0.01);
      assertEquals(0.9052658433204192, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, vector3_8.z, 0.01);
      assertEquals(0.0, vector3_8.y, 0.01);
      assertEquals(0.0, vector3_8.x, 0.01);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion5);
      assertNotSame(vector3_8, vector3_0);
      assertNotSame(vector3_8, vector3_1);
      assertNotSame(vector3_8, vector3_4);
      assertNotSame(vector3_8, vector3_5);
      assertNotSame(vector3_8, vector3_3);
      assertNotSame(vector3_8, vector3_2);
      assertNotSame(vector3_8, vector3_7);
      assertNotSame(vector3_8, vector3_6);
      assertEquals(0.0, quaternion7.x(), 0.01);
      assertEquals(0.0, quaternion7.z(), 0.01);
      assertEquals(0.9052658433204192, quaternion7.w(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.42484556360796616, quaternion7.y(), 0.01);
      assertEquals(0.0, quaternion7.getRotationZ(), 0.01);
      assertEquals(0.42484556360796616, quaternion0.y(), 0.01);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.9052658433204192, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.42484556360796616, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.9052658433204192, quaternion1.w(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.9052658433204192, quaternion2.w(), 0.01);
      assertEquals(-0.0, quaternion2.z(), 0.01);
      assertEquals(0.42484556360796616, quaternion2.y(), 0.01);
      assertEquals(0.0, vector3_8.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_8.x(), 0.01);
      assertEquals(0.0, vector3_8.length(), 0.01);
      assertEquals(0.0, vector3_8.z(), 0.01);
      assertEquals(0.0, vector3_8.y(), 0.01);
      assertNotNull(quaternion7);
      
      Quaternion quaternion8 = quaternion2.fromVectorFromNegativeZ((IVector3) vector3_7);
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertTrue(vector3_2.equals((Object)vector3_8));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_8));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_2));
      assertFalse(vector3_7.equals((Object)vector3_5));
      assertFalse(vector3_7.equals((Object)vector3_8));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals((-0.38205142437008965), quaternion0.y, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals((-0.595009839529386), quaternion0.x, 0.01);
      assertEquals((-0.595009839529386), quaternion8.x, 0.01);
      assertEquals(0.0, quaternion8.z, 0.01);
      assertEquals((-0.38205142437008965), quaternion8.y, 0.01);
      assertEquals(0.7071067811865476, quaternion8.w, 0.01);
      assertEquals((-0.595009839529386), quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals((-0.38205142437008965), quaternion1.y, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.7071067811865476, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals((-0.595009839529386), quaternion2.x, 0.01);
      assertEquals((-0.38205142437008965), quaternion2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals((-0.8414709848078967), vector3_3.y, 0.01);
      assertEquals(0.5403023058681397, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals((-0.8414709848078967), vector3_7.y, 0.01);
      assertEquals(0.0, vector3_7.z, 0.01);
      assertEquals(0.5403023058681397, vector3_7.x, 0.01);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion8);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion3);
      assertSame(quaternion8, quaternion0);
      assertSame(quaternion8, quaternion4);
      assertSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion6);
      assertSame(quaternion8, quaternion5);
      assertSame(quaternion8, quaternion1);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion8);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_8);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_7);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_8);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_7, vector3_0);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_5);
      assertNotSame(vector3_7, vector3_8);
      assertSame(vector3_7, vector3_6);
      assertNotSame(vector3_7, vector3_1);
      assertSame(vector3_7, vector3_4);
      assertSame(vector3_7, vector3_3);
      assertEquals((-0.38205142437008965), quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals((-0.595009839529386), quaternion0.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertEquals(0.5707963267948966, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.7071067811865476, quaternion8.w(), 0.01);
      assertEquals((-0.595009839529386), quaternion8.x(), 0.01);
      assertEquals(0.0, quaternion8.z(), 0.01);
      assertEquals((-0.38205142437008965), quaternion8.y(), 0.01);
      assertEquals(0.5707963267948966, quaternion8.getRotationZ(), 0.01);
      assertEquals((-0.595009839529386), quaternion1.x(), 0.01);
      assertEquals(0.5707963267948966, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertEquals((-0.38205142437008965), quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.7071067811865476, quaternion2.w(), 0.01);
      assertEquals(0.5707963267948966, quaternion2.getRotationZ(), 0.01);
      assertEquals((-0.595009839529386), quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.38205142437008965), quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(1.0000000000000002, vector3_3.lengthSquared(), 0.01);
      assertEquals((-0.8414709848078967), vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.5403023058681397, vector3_3.x(), 0.01);
      assertEquals(1.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_7.z(), 0.01);
      assertEquals(0.5403023058681397, vector3_7.x(), 0.01);
      assertEquals((-0.8414709848078967), vector3_7.y(), 0.01);
      assertEquals(1.0, vector3_7.length(), 0.01);
      assertEquals(1.0000000000000002, vector3_7.lengthSquared(), 0.01);
      assertNotNull(quaternion8);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.4028234663852886E38;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1787.2140939332912;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.5707963267948966;
      Quaternion quaternion0 = new Quaternion(doubleArray0);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 1787.2140939332912, 1.0, 1.5707963267948966}, doubleArray0, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1787.2140939332912, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.x(), 0.01);
      assertEquals(1787.2140939332912, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.1410331235057516, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      assertEquals(5, doubleArray0.length);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.integrateLocal(vector3_0, 1560.2372310032144);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 1787.2140939332912, 1.0, 1.5707963267948966}, doubleArray0, 0.01);
      assertEquals((-0.9999991784231632), quaternion0.w, 0.01);
      assertEquals(6.732496919653303E-39, quaternion0.z, 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion0.y, 0.01);
      assertEquals(0.0012818552955311485, quaternion0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(6.732496919653303E-39, quaternion1.z, 0.01);
      assertEquals(0.0012818552955311485, quaternion1.x, 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion1.y, 0.01);
      assertEquals((-0.9999991784231632), quaternion1.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals((-2.6929965553559123E-38), quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0012818552955311485, quaternion0.x(), 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.9999991784231632), quaternion0.w(), 0.01);
      assertEquals(6.732496919653303E-39, quaternion0.z(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(6.732496919653303E-39, quaternion1.z(), 0.01);
      assertEquals((-0.9999991784231632), quaternion1.w(), 0.01);
      assertEquals(0.0012818552955311485, quaternion1.x(), 0.01);
      assertEquals((-2.6929965553559123E-38), quaternion1.getRotationZ(), 0.01);
      assertNotNull(quaternion1);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion2 = quaternion0.set((IQuaternion) quaternion1);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 1787.2140939332912, 1.0, 1.5707963267948966}, doubleArray0, 0.01);
      assertEquals((-0.9999991784231632), quaternion0.w, 0.01);
      assertEquals(6.732496919653303E-39, quaternion0.z, 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion0.y, 0.01);
      assertEquals(0.0012818552955311485, quaternion0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(6.732496919653303E-39, quaternion1.z, 0.01);
      assertEquals(0.0012818552955311485, quaternion1.x, 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion1.y, 0.01);
      assertEquals((-0.9999991784231632), quaternion1.w, 0.01);
      assertEquals(0.0012818552955311485, quaternion2.x, 0.01);
      assertEquals(6.732496919653303E-39, quaternion2.z, 0.01);
      assertEquals((-0.9999991784231632), quaternion2.w, 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion2.y, 0.01);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertEquals((-2.6929965553559123E-38), quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0012818552955311485, quaternion0.x(), 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.9999991784231632), quaternion0.w(), 0.01);
      assertEquals(6.732496919653303E-39, quaternion0.z(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(6.732496919653303E-39, quaternion1.z(), 0.01);
      assertEquals((-0.9999991784231632), quaternion1.w(), 0.01);
      assertEquals(0.0012818552955311485, quaternion1.x(), 0.01);
      assertEquals((-2.6929965553559123E-38), quaternion1.getRotationZ(), 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion2.y(), 0.01);
      assertEquals(6.732496919653303E-39, quaternion2.z(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-2.6929965553559123E-38), quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0012818552955311485, quaternion2.x(), 0.01);
      assertEquals((-0.9999991784231632), quaternion2.w(), 0.01);
      assertNotNull(quaternion2);
      assertEquals(5, doubleArray0.length);
      
      Vector3 vector3_1 = quaternion1.transform((IVector3) vector3_0);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 1787.2140939332912, 1.0, 1.5707963267948966}, doubleArray0, 0.01);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals((-0.9999991784231632), quaternion0.w, 0.01);
      assertEquals(6.732496919653303E-39, quaternion0.z, 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion0.y, 0.01);
      assertEquals(0.0012818552955311485, quaternion0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(6.732496919653303E-39, quaternion1.z, 0.01);
      assertEquals(0.0012818552955311485, quaternion1.x, 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion1.y, 0.01);
      assertEquals((-0.9999991784231632), quaternion1.w, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals((-1.0504266461400601E-35), vector3_1.z, 0.01);
      assertEquals((-2.6929965553559123E-38), vector3_1.y, 0.01);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_1, vector3_0);
      assertEquals((-2.6929965553559123E-38), quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0012818552955311485, quaternion0.x(), 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.9999991784231632), quaternion0.w(), 0.01);
      assertEquals(6.732496919653303E-39, quaternion0.z(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals((-5.2521461758287704E-36), quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(6.732496919653303E-39, quaternion1.z(), 0.01);
      assertEquals((-0.9999991784231632), quaternion1.w(), 0.01);
      assertEquals(0.0012818552955311485, quaternion1.x(), 0.01);
      assertEquals((-2.6929965553559123E-38), quaternion1.getRotationZ(), 0.01);
      assertEquals((-2.6929965553559123E-38), vector3_1.y(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals((-1.0504266461400601E-35), vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertNotNull(vector3_1);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion3 = quaternion1.fromVectorFromNegativeZ((IVector3) vector3_0);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 1787.2140939332912, 1.0, 1.5707963267948966}, doubleArray0, 0.01);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertEquals((-0.7071067811865475), quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertEquals((-0.7071067811865475), quaternion1.y, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.7071067811865476, quaternion3.w, 0.01);
      assertEquals((-0.7071067811865475), quaternion3.y, 0.01);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.7071067811865475), quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertEquals((-0.7071067811865475), quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals((-0.7071067811865475), quaternion3.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertNotNull(quaternion3);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion4 = quaternion3.fromAnglesXY(-0.0, 1787.2140939332912);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 1787.2140939332912, 1.0, 1.5707963267948966}, doubleArray0, 0.01);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals(0.984540909198649, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.17515478330407508, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(0.17515478330407508, quaternion1.w, 0.01);
      assertEquals(0.984540909198649, quaternion1.y, 0.01);
      assertEquals(-0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.17515478330407508, quaternion3.w, 0.01);
      assertEquals(0.984540909198649, quaternion3.y, 0.01);
      assertEquals(0.984540909198649, quaternion4.y, 0.01);
      assertEquals(-0.0, quaternion4.x, 0.01);
      assertEquals(0.17515478330407508, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion4);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion1);
      assertEquals(0.17515478330407508, quaternion0.w(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.984540909198649, quaternion0.y(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.984540909198649, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals(0.17515478330407508, quaternion1.w(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(3.141592653589793, quaternion3.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion3.x(), 0.01);
      assertEquals(0.984540909198649, quaternion3.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.17515478330407508, quaternion3.w(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.17515478330407508, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(3.141592653589793, quaternion4.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion4.x(), 0.01);
      assertEquals(0.984540909198649, quaternion4.y(), 0.01);
      assertNotNull(quaternion4);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion5 = new Quaternion(quaternion3);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 1787.2140939332912, 1.0, 1.5707963267948966}, doubleArray0, 0.01);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(quaternion5.equals((Object)quaternion4));
      assertTrue(quaternion5.equals((Object)quaternion1));
      assertTrue(quaternion5.equals((Object)quaternion0));
      assertTrue(quaternion5.equals((Object)quaternion2));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals(0.984540909198649, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.17515478330407508, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(0.17515478330407508, quaternion1.w, 0.01);
      assertEquals(0.984540909198649, quaternion1.y, 0.01);
      assertEquals(-0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.17515478330407508, quaternion3.w, 0.01);
      assertEquals(0.984540909198649, quaternion3.y, 0.01);
      assertEquals(0.17515478330407508, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.984540909198649, quaternion5.y, 0.01);
      assertEquals(-0.0, quaternion5.x, 0.01);
      assertEquals(0.17515478330407508, quaternion0.w(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.984540909198649, quaternion0.y(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.984540909198649, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals(0.17515478330407508, quaternion1.w(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(3.141592653589793, quaternion3.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion3.x(), 0.01);
      assertEquals(0.984540909198649, quaternion3.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.17515478330407508, quaternion3.w(), 0.01);
      assertEquals(0.17515478330407508, quaternion5.w(), 0.01);
      assertEquals(-0.0, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(3.141592653589793, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.984540909198649, quaternion5.y(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertNotNull(quaternion5);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion6 = quaternion1.multLocal(quaternion5);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 1787.2140939332912, 1.0, 1.5707963267948966}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.34489409920937286, quaternion0.y, 0.01);
      assertEquals((-0.9386416037714049), quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.34489409920937286, quaternion1.y, 0.01);
      assertEquals((-0.9386416037714049), quaternion1.w, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals((-0.9386416037714049), quaternion3.w, 0.01);
      assertEquals(0.34489409920937286, quaternion3.y, 0.01);
      assertEquals(0.17515478330407508, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.984540909198649, quaternion5.y, 0.01);
      assertEquals(-0.0, quaternion5.x, 0.01);
      assertEquals(0.34489409920937286, quaternion6.y, 0.01);
      assertEquals((-0.9386416037714049), quaternion6.w, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion1);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals((-0.9386416037714049), quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.34489409920937286, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.34489409920937286, quaternion1.y(), 0.01);
      assertEquals((-0.9386416037714049), quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals((-0.9386416037714049), quaternion3.w(), 0.01);
      assertEquals(0.34489409920937286, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.17515478330407508, quaternion5.w(), 0.01);
      assertEquals(-0.0, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(3.141592653589793, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.984540909198649, quaternion5.y(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.0, quaternion6.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion6.x(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-0.9386416037714049), quaternion6.w(), 0.01);
      assertEquals(0.34489409920937286, quaternion6.y(), 0.01);
      assertNotNull(quaternion6);
      assertEquals(5, doubleArray0.length);
      
      Vector3 vector3_2 = quaternion5.transform((IVector3) vector3_1);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 1787.2140939332912, 1.0, 1.5707963267948966}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.34489409920937286, quaternion0.y, 0.01);
      assertEquals((-0.9386416037714049), quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.34489409920937286, quaternion1.y, 0.01);
      assertEquals((-0.9386416037714049), quaternion1.w, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals((-1.0504266461400601E-35), vector3_1.z, 0.01);
      assertEquals((-2.6929965553559123E-38), vector3_1.y, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals((-0.9386416037714049), quaternion3.w, 0.01);
      assertEquals(0.34489409920937286, quaternion3.y, 0.01);
      assertEquals(0.17515478330407508, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.984540909198649, quaternion5.y, 0.01);
      assertEquals(-0.0, quaternion5.x, 0.01);
      assertEquals((-2.6929965553559123E-38), vector3_2.y, 0.01);
      assertEquals((-0.34489409920937286), vector3_2.z, 0.01);
      assertEquals((-0.9386416037714049), vector3_2.x, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals((-0.9386416037714049), quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.34489409920937286, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.34489409920937286, quaternion1.y(), 0.01);
      assertEquals((-0.9386416037714049), quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals((-2.6929965553559123E-38), vector3_1.y(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals((-1.0504266461400601E-35), vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals((-0.9386416037714049), quaternion3.w(), 0.01);
      assertEquals(0.34489409920937286, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.17515478330407508, quaternion5.w(), 0.01);
      assertEquals(-0.0, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(3.141592653589793, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.984540909198649, quaternion5.y(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.9999999999999999, vector3_2.lengthSquared(), 0.01);
      assertEquals((-2.6929965553559123E-38), vector3_2.y(), 0.01);
      assertEquals((-0.9386416037714049), vector3_2.x(), 0.01);
      assertEquals(0.9999999999999999, vector3_2.length(), 0.01);
      assertEquals((-0.34489409920937286), vector3_2.z(), 0.01);
      assertNotNull(vector3_2);
      assertEquals(5, doubleArray0.length);
      
      double double0 = quaternion6.transformZ(vector3_1);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 1787.2140939332912, 1.0, 1.5707963267948966}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.34489409920937286, quaternion0.y, 0.01);
      assertEquals((-0.9386416037714049), quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.34489409920937286, quaternion1.y, 0.01);
      assertEquals((-0.9386416037714049), quaternion1.w, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals((-1.0504266461400601E-35), vector3_1.z, 0.01);
      assertEquals((-2.6929965553559123E-38), vector3_1.y, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals((-0.9386416037714049), quaternion3.w, 0.01);
      assertEquals(0.34489409920937286, quaternion3.y, 0.01);
      assertEquals(0.17515478330407508, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.984540909198649, quaternion5.y, 0.01);
      assertEquals(-0.0, quaternion5.x, 0.01);
      assertEquals(0.34489409920937286, quaternion6.y, 0.01);
      assertEquals((-0.9386416037714049), quaternion6.w, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion1);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals((-0.9386416037714049), quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.34489409920937286, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.34489409920937286, quaternion1.y(), 0.01);
      assertEquals((-0.9386416037714049), quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals((-2.6929965553559123E-38), vector3_1.y(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals((-1.0504266461400601E-35), vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals((-0.9386416037714049), quaternion3.w(), 0.01);
      assertEquals(0.34489409920937286, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.17515478330407508, quaternion5.w(), 0.01);
      assertEquals(-0.0, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(3.141592653589793, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.984540909198649, quaternion5.y(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.0, quaternion6.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion6.x(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-0.9386416037714049), quaternion6.w(), 0.01);
      assertEquals(0.34489409920937286, quaternion6.y(), 0.01);
      assertEquals(0.6474639008263595, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      quaternion0.get(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.34489409920937286, 0.0, (-0.9386416037714049), 1.5707963267948966}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.34489409920937286, quaternion0.y, 0.01);
      assertEquals((-0.9386416037714049), quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals((-0.9386416037714049), quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.34489409920937286, quaternion0.y(), 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.slerpLocal((IQuaternion) null, (-1421.2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ((IVector3) vector3_0);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      boolean boolean0 = quaternion1.hasNaN();
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      
      Quaternion quaternion1 = quaternion0.normalizeLocal();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      
      Quaternion quaternion2 = quaternion0.invert();
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(-0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(-0.0, quaternion2.z, 0.01);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(-0.0, quaternion2.z(), 0.01);
      assertEquals(-0.0, quaternion2.x(), 0.01);
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.0, quaternion2.w(), 0.01);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      
      Vector3 vector3_2 = vector3_0.lerpLocal(vector3_1, 3.1415826535900457);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      
      Quaternion quaternion3 = quaternion2.fromAxes(vector3_0, vector3_0, vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.5, quaternion2.x, 0.01);
      assertEquals(0.5, quaternion2.y, 0.01);
      assertEquals(0.5, quaternion2.w, 0.01);
      assertEquals(0.5, quaternion2.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.5, quaternion3.z, 0.01);
      assertEquals(0.5, quaternion3.x, 0.01);
      assertEquals(0.5, quaternion3.y, 0.01);
      assertEquals(0.5, quaternion3.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.5, quaternion2.z(), 0.01);
      assertEquals(1.5707963267948966, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion2.x(), 0.01);
      assertEquals(0.5, quaternion2.y(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.5, quaternion2.w(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.5707963267948966, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion3.w(), 0.01);
      assertEquals(0.5, quaternion3.y(), 0.01);
      assertEquals(0.5, quaternion3.x(), 0.01);
      assertEquals(0.5, quaternion3.z(), 0.01);
      
      Vector3 vector3_3 = vector3_2.lerpLocal(vector3_1, 0.5);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      
      Quaternion quaternion4 = quaternion3.invert();
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.5, quaternion2.x, 0.01);
      assertEquals(0.5, quaternion2.y, 0.01);
      assertEquals(0.5, quaternion2.w, 0.01);
      assertEquals(0.5, quaternion2.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.5, quaternion3.z, 0.01);
      assertEquals(0.5, quaternion3.x, 0.01);
      assertEquals(0.5, quaternion3.y, 0.01);
      assertEquals(0.5, quaternion3.w, 0.01);
      assertEquals((-0.5), quaternion4.x, 0.01);
      assertEquals((-0.5), quaternion4.y, 0.01);
      assertEquals((-0.5), quaternion4.z, 0.01);
      assertEquals(0.5, quaternion4.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.5, quaternion2.z(), 0.01);
      assertEquals(1.5707963267948966, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion2.x(), 0.01);
      assertEquals(0.5, quaternion2.y(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.5, quaternion2.w(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.5707963267948966, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion3.w(), 0.01);
      assertEquals(0.5, quaternion3.y(), 0.01);
      assertEquals(0.5, quaternion3.x(), 0.01);
      assertEquals(0.5, quaternion3.z(), 0.01);
      assertEquals((-0.5), quaternion4.x(), 0.01);
      assertEquals((-0.5), quaternion4.z(), 0.01);
      assertEquals(0.5, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals((-0.5), quaternion4.y(), 0.01);
      assertFalse(quaternion4.hasNaN());
      
      Quaternion quaternion5 = quaternion4.fromVectorFromNegativeZ((IVector3) vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.5, quaternion2.x, 0.01);
      assertEquals(0.5, quaternion2.y, 0.01);
      assertEquals(0.5, quaternion2.w, 0.01);
      assertEquals(0.5, quaternion2.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.5, quaternion3.z, 0.01);
      assertEquals(0.5, quaternion3.x, 0.01);
      assertEquals(0.5, quaternion3.y, 0.01);
      assertEquals(0.5, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.7071067811865476, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion5.x, 0.01);
      assertEquals(Double.NaN, quaternion5.y, 0.01);
      assertEquals(0.7071067811865476, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.5, quaternion2.z(), 0.01);
      assertEquals(1.5707963267948966, quaternion2.getRotationZ(), 0.01);
      
      Quaternion quaternion6 = quaternion4.integrate((IVector3) vector3_0, 0.0, quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.7071067811865476, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion6.z, 0.01);
      assertEquals(Double.NaN, quaternion6.y, 0.01);
      assertEquals(Double.NaN, quaternion6.x, 0.01);
      assertEquals(Double.NaN, quaternion6.w, 0.01);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion4);
      
      Quaternion quaternion7 = quaternion4.invert();
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.7071067811865476, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(-0.0, quaternion7.z, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(0.7071067811865476, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion2);
      
      Quaternion quaternion8 = quaternion7.slerpLocal(quaternion6, 0.0);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.7071067811865476, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion6.z, 0.01);
      assertEquals(Double.NaN, quaternion6.y, 0.01);
      assertEquals(Double.NaN, quaternion6.x, 0.01);
      assertEquals(Double.NaN, quaternion6.w, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion8.w, 0.01);
      assertEquals(Double.NaN, quaternion8.x, 0.01);
      assertEquals(Double.NaN, quaternion8.y, 0.01);
      assertEquals(Double.NaN, quaternion8.z, 0.01);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion8);
      assertNotSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion4);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion1);
      
      Quaternion quaternion9 = quaternion7.normalizeLocal();
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.7071067811865476, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion9.z, 0.01);
      assertEquals(Double.NaN, quaternion9.y, 0.01);
      assertEquals(Double.NaN, quaternion9.x, 0.01);
      assertEquals(Double.NaN, quaternion9.w, 0.01);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion4);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion9, quaternion1);
      assertSame(quaternion9, quaternion7);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion0);
      
      Quaternion quaternion10 = quaternion1.set((IQuaternion) quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion3));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion10.x, 0.01);
      assertEquals(Double.NaN, quaternion10.y, 0.01);
      assertEquals(Double.NaN, quaternion10.w, 0.01);
      assertEquals(Double.NaN, quaternion10.z, 0.01);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion8);
      assertSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion7);
      assertSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion2);
      
      Quaternion quaternion11 = quaternion5.fromAngles(vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion10));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(1.0, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(1.0, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion11.y, 0.01);
      assertEquals(0.0, quaternion11.x, 0.01);
      assertEquals(0.0, quaternion11.z, 0.01);
      assertEquals(1.0, quaternion11.w, 0.01);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertSame(quaternion4, quaternion11);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion11);
      assertNotSame(quaternion5, quaternion9);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion10);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion11, quaternion5);
      assertNotSame(quaternion11, quaternion9);
      assertNotSame(quaternion11, quaternion7);
      assertSame(quaternion11, quaternion4);
      assertNotSame(quaternion11, quaternion0);
      assertNotSame(quaternion11, quaternion1);
      assertNotSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion6);
      assertNotSame(quaternion11, quaternion2);
      assertNotSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion3);
      
      Vector3 vector3_4 = vector3_2.subtract((IVector3) vector3_0, vector3_3);
      assertTrue(vector3_4.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(0.0, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_0);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_4);
      
      Quaternion quaternion12 = quaternion1.fromVectorFromNegativeZ((-2427.6), 0.0, 1524.550770002153);
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion3));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion6));
      assertFalse(quaternion12.equals((Object)quaternion8));
      assertFalse(quaternion12.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion11));
      assertFalse(quaternion12.equals((Object)quaternion4));
      assertFalse(quaternion12.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion12.w, 0.01);
      assertEquals(Double.NaN, quaternion12.x, 0.01);
      assertEquals(Double.NaN, quaternion12.y, 0.01);
      assertEquals(Double.NaN, quaternion12.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion12, quaternion2);
      assertNotSame(quaternion12, quaternion3);
      assertNotSame(quaternion12, quaternion5);
      assertNotSame(quaternion12, quaternion6);
      assertSame(quaternion12, quaternion1);
      assertNotSame(quaternion12, quaternion8);
      assertNotSame(quaternion12, quaternion9);
      assertNotSame(quaternion12, quaternion11);
      assertSame(quaternion12, quaternion10);
      assertSame(quaternion12, quaternion0);
      assertNotSame(quaternion12, quaternion4);
      assertNotSame(quaternion12, quaternion7);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion0);
      
      Quaternion quaternion13 = quaternion12.invert(quaternion4);
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion3));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion6));
      assertFalse(quaternion12.equals((Object)quaternion8));
      assertFalse(quaternion12.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion11));
      assertFalse(quaternion12.equals((Object)quaternion4));
      assertFalse(quaternion12.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion13.equals((Object)quaternion8));
      assertFalse(quaternion13.equals((Object)quaternion12));
      assertFalse(quaternion13.equals((Object)quaternion9));
      assertFalse(quaternion13.equals((Object)quaternion6));
      assertFalse(quaternion13.equals((Object)quaternion10));
      assertFalse(quaternion13.equals((Object)quaternion7));
      assertFalse(quaternion13.equals((Object)quaternion2));
      assertFalse(quaternion13.equals((Object)quaternion0));
      assertFalse(quaternion13.equals((Object)quaternion3));
      assertFalse(quaternion13.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion12));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion12.w, 0.01);
      assertEquals(Double.NaN, quaternion12.x, 0.01);
      assertEquals(Double.NaN, quaternion12.y, 0.01);
      assertEquals(Double.NaN, quaternion12.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion13.z, 0.01);
      assertEquals(Double.NaN, quaternion13.w, 0.01);
      assertEquals(Double.NaN, quaternion13.x, 0.01);
      assertEquals(Double.NaN, quaternion13.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion12, quaternion5);
      assertNotSame(quaternion12, quaternion13);
      assertNotSame(quaternion12, quaternion11);
      assertSame(quaternion12, quaternion10);
      assertNotSame(quaternion12, quaternion4);
      assertNotSame(quaternion12, quaternion7);
      assertNotSame(quaternion12, quaternion2);
      assertNotSame(quaternion12, quaternion3);
      assertNotSame(quaternion12, quaternion6);
      assertSame(quaternion12, quaternion1);
      assertNotSame(quaternion12, quaternion8);
      assertNotSame(quaternion12, quaternion9);
      assertSame(quaternion12, quaternion0);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion13);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion13, quaternion9);
      assertNotSame(quaternion13, quaternion10);
      assertSame(quaternion13, quaternion4);
      assertNotSame(quaternion13, quaternion7);
      assertSame(quaternion13, quaternion11);
      assertNotSame(quaternion13, quaternion0);
      assertNotSame(quaternion13, quaternion8);
      assertNotSame(quaternion13, quaternion12);
      assertNotSame(quaternion13, quaternion6);
      assertSame(quaternion13, quaternion5);
      assertNotSame(quaternion13, quaternion2);
      assertNotSame(quaternion13, quaternion3);
      assertNotSame(quaternion13, quaternion1);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion13);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion10);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion13);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion12);
      assertSame(quaternion4, quaternion11);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion12);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion13);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      
      Quaternion quaternion14 = quaternion2.fromAngles(vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion14.equals((Object)quaternion7));
      assertFalse(quaternion14.equals((Object)quaternion11));
      assertFalse(quaternion14.equals((Object)quaternion1));
      assertFalse(quaternion14.equals((Object)quaternion13));
      assertFalse(quaternion14.equals((Object)quaternion5));
      assertFalse(quaternion14.equals((Object)quaternion0));
      assertFalse(quaternion14.equals((Object)quaternion8));
      assertFalse(quaternion14.equals((Object)quaternion9));
      assertFalse(quaternion14.equals((Object)quaternion4));
      assertFalse(quaternion14.equals((Object)quaternion10));
      assertFalse(quaternion14.equals((Object)quaternion12));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_4));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion14.z, 0.01);
      assertEquals(0.0, quaternion14.x, 0.01);
      assertEquals(0.0, quaternion14.y, 0.01);
      assertEquals(1.0, quaternion14.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion13);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion10);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion14);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion14, quaternion11);
      assertNotSame(quaternion14, quaternion1);
      assertNotSame(quaternion14, quaternion13);
      assertNotSame(quaternion14, quaternion5);
      assertNotSame(quaternion14, quaternion0);
      assertNotSame(quaternion14, quaternion4);
      assertNotSame(quaternion14, quaternion10);
      assertNotSame(quaternion14, quaternion12);
      assertNotSame(quaternion14, quaternion7);
      assertSame(quaternion14, quaternion6);
      assertSame(quaternion14, quaternion3);
      assertNotSame(quaternion14, quaternion8);
      assertSame(quaternion14, quaternion2);
      assertNotSame(quaternion14, quaternion9);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      
      double double0 = quaternion2.z();
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion13);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion10);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion14);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion1);
      
      quaternion5.hasNaN();
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_4));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion14));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion12));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion12));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion14));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion10));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion5.x, 0.01);
      assertEquals(Double.NaN, quaternion5.y, 0.01);
      assertEquals(Double.NaN, quaternion5.z, 0.01);
      assertEquals(Double.NaN, quaternion5.w, 0.01);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion13);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion10);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion14);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion13);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion14);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion12);
      assertSame(quaternion4, quaternion11);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion12);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion14);
      assertSame(quaternion4, quaternion13);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion14);
      assertSame(quaternion5, quaternion11);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion10);
      assertSame(quaternion5, quaternion13);
      assertNotSame(quaternion5, quaternion8);
      assertNotSame(quaternion5, quaternion12);
      assertNotSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion9);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion6);
      
      Quaternion quaternion15 = quaternion3.multLocal(quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion15.equals((Object)quaternion5));
      assertFalse(quaternion15.equals((Object)quaternion4));
      assertFalse(quaternion15.equals((Object)quaternion8));
      assertFalse(quaternion15.equals((Object)quaternion12));
      assertFalse(quaternion15.equals((Object)quaternion7));
      assertFalse(quaternion15.equals((Object)quaternion10));
      assertFalse(quaternion15.equals((Object)quaternion1));
      assertFalse(quaternion15.equals((Object)quaternion11));
      assertFalse(quaternion15.equals((Object)quaternion0));
      assertFalse(quaternion15.equals((Object)quaternion13));
      assertFalse(quaternion15.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, quaternion15.z, 0.01);
      assertEquals(1.0, quaternion15.w, 0.01);
      assertEquals(0.0, quaternion15.y, 0.01);
      assertEquals(0.0, quaternion15.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion15);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion15);
      assertNotSame(quaternion2, quaternion13);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion10);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion14);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertSame(quaternion15, quaternion14);
      assertNotSame(quaternion15, quaternion5);
      assertNotSame(quaternion15, quaternion0);
      assertNotSame(quaternion15, quaternion13);
      assertNotSame(quaternion15, quaternion9);
      assertNotSame(quaternion15, quaternion4);
      assertNotSame(quaternion15, quaternion8);
      assertNotSame(quaternion15, quaternion12);
      assertNotSame(quaternion15, quaternion7);
      assertSame(quaternion15, quaternion6);
      assertNotSame(quaternion15, quaternion10);
      assertSame(quaternion15, quaternion3);
      assertNotSame(quaternion15, quaternion1);
      assertSame(quaternion15, quaternion2);
      assertNotSame(quaternion15, quaternion11);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion13);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion15);
      assertSame(quaternion3, quaternion14);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion12);
      
      Quaternion quaternion16 = quaternion15.invert();
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion15));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion15.equals((Object)quaternion5));
      assertFalse(quaternion15.equals((Object)quaternion4));
      assertFalse(quaternion15.equals((Object)quaternion8));
      assertFalse(quaternion15.equals((Object)quaternion12));
      assertFalse(quaternion15.equals((Object)quaternion7));
      assertFalse(quaternion15.equals((Object)quaternion10));
      assertFalse(quaternion15.equals((Object)quaternion1));
      assertFalse(quaternion15.equals((Object)quaternion11));
      assertFalse(quaternion15.equals((Object)quaternion0));
      assertFalse(quaternion15.equals((Object)quaternion13));
      assertFalse(quaternion15.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion16.equals((Object)quaternion9));
      assertTrue(quaternion16.equals((Object)quaternion6));
      assertFalse(quaternion16.equals((Object)quaternion5));
      assertTrue(quaternion16.equals((Object)quaternion3));
      assertTrue(quaternion16.equals((Object)quaternion2));
      assertFalse(quaternion16.equals((Object)quaternion0));
      assertFalse(quaternion16.equals((Object)quaternion13));
      assertFalse(quaternion16.equals((Object)quaternion8));
      assertFalse(quaternion16.equals((Object)quaternion1));
      assertTrue(quaternion16.equals((Object)quaternion15));
      assertFalse(quaternion16.equals((Object)quaternion11));
      assertFalse(quaternion16.equals((Object)quaternion7));
      assertTrue(quaternion16.equals((Object)quaternion14));
      assertFalse(quaternion16.equals((Object)quaternion4));
      assertFalse(quaternion16.equals((Object)quaternion10));
      assertFalse(quaternion16.equals((Object)quaternion12));
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, quaternion15.z, 0.01);
      assertEquals(1.0, quaternion15.w, 0.01);
      assertEquals(0.0, quaternion15.y, 0.01);
      assertEquals(0.0, quaternion15.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(-0.0, quaternion16.z, 0.01);
      assertEquals(-0.0, quaternion16.x, 0.01);
      assertEquals(-0.0, quaternion16.y, 0.01);
      assertEquals(1.0, quaternion16.w, 0.01);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion16);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion15);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion2, quaternion16);
      assertNotSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion15);
      assertNotSame(quaternion2, quaternion13);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion10);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion14);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertSame(quaternion15, quaternion14);
      assertNotSame(quaternion15, quaternion5);
      assertNotSame(quaternion15, quaternion0);
      assertNotSame(quaternion15, quaternion13);
      assertNotSame(quaternion15, quaternion9);
      assertNotSame(quaternion15, quaternion16);
      assertNotSame(quaternion15, quaternion4);
      assertNotSame(quaternion15, quaternion8);
      assertNotSame(quaternion15, quaternion12);
      assertNotSame(quaternion15, quaternion7);
      assertSame(quaternion15, quaternion6);
      assertNotSame(quaternion15, quaternion10);
      assertSame(quaternion15, quaternion3);
      assertNotSame(quaternion15, quaternion1);
      assertSame(quaternion15, quaternion2);
      assertNotSame(quaternion15, quaternion11);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion13);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion15);
      assertNotSame(quaternion3, quaternion16);
      assertSame(quaternion3, quaternion14);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion12);
      assertNotSame(quaternion16, quaternion9);
      assertNotSame(quaternion16, quaternion5);
      assertNotSame(quaternion16, quaternion14);
      assertNotSame(quaternion16, quaternion3);
      assertNotSame(quaternion16, quaternion2);
      assertNotSame(quaternion16, quaternion0);
      assertNotSame(quaternion16, quaternion6);
      assertNotSame(quaternion16, quaternion15);
      assertNotSame(quaternion16, quaternion13);
      assertNotSame(quaternion16, quaternion8);
      assertNotSame(quaternion16, quaternion1);
      assertNotSame(quaternion16, quaternion11);
      assertNotSame(quaternion16, quaternion7);
      assertNotSame(quaternion16, quaternion4);
      assertNotSame(quaternion16, quaternion10);
      assertNotSame(quaternion16, quaternion12);
      
      double double1 = quaternion13.w();
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion16));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion15));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion13));
      assertFalse(quaternion12.equals((Object)quaternion11));
      assertFalse(quaternion12.equals((Object)quaternion16));
      assertFalse(quaternion12.equals((Object)quaternion4));
      assertFalse(quaternion12.equals((Object)quaternion15));
      assertFalse(quaternion12.equals((Object)quaternion7));
      assertFalse(quaternion12.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion3));
      assertFalse(quaternion12.equals((Object)quaternion6));
      assertFalse(quaternion12.equals((Object)quaternion8));
      assertFalse(quaternion12.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion14));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion14));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion16));
      assertFalse(quaternion1.equals((Object)quaternion13));
      assertFalse(quaternion1.equals((Object)quaternion15));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion13.equals((Object)quaternion9));
      assertFalse(quaternion13.equals((Object)quaternion10));
      assertFalse(quaternion13.equals((Object)quaternion7));
      assertFalse(quaternion13.equals((Object)quaternion0));
      assertFalse(quaternion13.equals((Object)quaternion15));
      assertFalse(quaternion13.equals((Object)quaternion8));
      assertFalse(quaternion13.equals((Object)quaternion12));
      assertFalse(quaternion13.equals((Object)quaternion16));
      assertFalse(quaternion13.equals((Object)quaternion6));
      assertFalse(quaternion13.equals((Object)quaternion2));
      assertFalse(quaternion13.equals((Object)quaternion3));
      assertFalse(quaternion13.equals((Object)quaternion1));
      assertFalse(quaternion13.equals((Object)quaternion14));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertTrue(quaternion2.equals((Object)quaternion16));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion16));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(quaternion4.equals((Object)quaternion15));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion12));
      assertFalse(quaternion4.equals((Object)quaternion16));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion14));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion12.w, 0.01);
      assertEquals(Double.NaN, quaternion12.x, 0.01);
      assertEquals(Double.NaN, quaternion12.y, 0.01);
      assertEquals(Double.NaN, quaternion12.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion13.z, 0.01);
      assertEquals(Double.NaN, quaternion13.w, 0.01);
      assertEquals(Double.NaN, quaternion13.x, 0.01);
      assertEquals(Double.NaN, quaternion13.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion16);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion15);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion12, quaternion5);
      assertNotSame(quaternion12, quaternion13);
      assertNotSame(quaternion12, quaternion11);
      assertNotSame(quaternion12, quaternion16);
      assertSame(quaternion12, quaternion10);
      assertNotSame(quaternion12, quaternion4);
      assertNotSame(quaternion12, quaternion15);
      assertNotSame(quaternion12, quaternion7);
      assertNotSame(quaternion12, quaternion2);
      assertNotSame(quaternion12, quaternion3);
      assertNotSame(quaternion12, quaternion6);
      assertSame(quaternion12, quaternion1);
      assertNotSame(quaternion12, quaternion8);
      assertNotSame(quaternion12, quaternion9);
      assertNotSame(quaternion12, quaternion14);
      assertSame(quaternion12, quaternion0);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion14);
      assertSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion16);
      assertNotSame(quaternion1, quaternion13);
      assertNotSame(quaternion1, quaternion15);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion13, quaternion9);
      assertNotSame(quaternion13, quaternion10);
      assertSame(quaternion13, quaternion4);
      assertNotSame(quaternion13, quaternion7);
      assertSame(quaternion13, quaternion11);
      assertNotSame(quaternion13, quaternion0);
      assertNotSame(quaternion13, quaternion15);
      assertNotSame(quaternion13, quaternion8);
      assertNotSame(quaternion13, quaternion12);
      assertNotSame(quaternion13, quaternion16);
      assertNotSame(quaternion13, quaternion6);
      assertSame(quaternion13, quaternion5);
      assertNotSame(quaternion13, quaternion2);
      assertNotSame(quaternion13, quaternion3);
      assertNotSame(quaternion13, quaternion1);
      assertNotSame(quaternion13, quaternion14);
      assertNotSame(quaternion2, quaternion16);
      assertNotSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion15);
      assertNotSame(quaternion2, quaternion13);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion10);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion14);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion13);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion15);
      assertNotSame(quaternion3, quaternion16);
      assertSame(quaternion3, quaternion14);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion12);
      assertSame(quaternion4, quaternion11);
      assertSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion15);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion12);
      assertNotSame(quaternion4, quaternion16);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion14);
      assertSame(quaternion4, quaternion13);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion6);
      
      Quaternion quaternion17 = quaternion15.fromAxes(vector3_3, vector3_0, vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion16));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion15));
      assertFalse(quaternion0.equals((Object)quaternion14));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion16));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion13));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_4));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertFalse(quaternion15.equals((Object)quaternion5));
      assertFalse(quaternion15.equals((Object)quaternion16));
      assertFalse(quaternion15.equals((Object)quaternion4));
      assertFalse(quaternion15.equals((Object)quaternion8));
      assertFalse(quaternion15.equals((Object)quaternion12));
      assertFalse(quaternion15.equals((Object)quaternion7));
      assertFalse(quaternion15.equals((Object)quaternion10));
      assertFalse(quaternion15.equals((Object)quaternion1));
      assertFalse(quaternion15.equals((Object)quaternion11));
      assertFalse(quaternion15.equals((Object)quaternion0));
      assertFalse(quaternion15.equals((Object)quaternion13));
      assertFalse(quaternion15.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion16));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion10));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertTrue(vector3_3.equals((Object)vector3_1));
      assertFalse(quaternion17.equals((Object)quaternion13));
      assertFalse(quaternion17.equals((Object)quaternion10));
      assertFalse(quaternion17.equals((Object)quaternion1));
      assertFalse(quaternion17.equals((Object)quaternion16));
      assertFalse(quaternion17.equals((Object)quaternion11));
      assertFalse(quaternion17.equals((Object)quaternion9));
      assertFalse(quaternion17.equals((Object)quaternion5));
      assertFalse(quaternion17.equals((Object)quaternion0));
      assertFalse(quaternion17.equals((Object)quaternion4));
      assertFalse(quaternion17.equals((Object)quaternion8));
      assertFalse(quaternion17.equals((Object)quaternion12));
      assertFalse(quaternion17.equals((Object)quaternion7));
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(0.5, quaternion2.x, 0.01);
      assertEquals(0.5, quaternion2.y, 0.01);
      assertEquals(0.5, quaternion2.w, 0.01);
      assertEquals(0.5, quaternion2.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.5, quaternion15.z, 0.01);
      assertEquals(0.5, quaternion15.w, 0.01);
      assertEquals(0.5, quaternion15.y, 0.01);
      assertEquals(0.5, quaternion15.x, 0.01);
      assertEquals(0.5, quaternion3.z, 0.01);
      assertEquals(0.5, quaternion3.x, 0.01);
      assertEquals(0.5, quaternion3.y, 0.01);
      assertEquals(0.5, quaternion3.w, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.5, quaternion17.y, 0.01);
      assertEquals(0.5, quaternion17.w, 0.01);
      assertEquals(0.5, quaternion17.z, 0.01);
      assertEquals(0.5, quaternion17.x, 0.01);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion17);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion16);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion15);
      assertNotSame(quaternion0, quaternion14);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion2, quaternion16);
      assertNotSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion15);
      assertNotSame(quaternion2, quaternion13);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion10);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion17);
      assertSame(quaternion2, quaternion14);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertSame(quaternion15, quaternion14);
      assertNotSame(quaternion15, quaternion5);
      assertNotSame(quaternion15, quaternion0);
      assertNotSame(quaternion15, quaternion13);
      assertSame(quaternion15, quaternion17);
      assertNotSame(quaternion15, quaternion9);
      assertNotSame(quaternion15, quaternion16);
      assertNotSame(quaternion15, quaternion4);
      assertNotSame(quaternion15, quaternion8);
      assertNotSame(quaternion15, quaternion12);
      assertNotSame(quaternion15, quaternion7);
      assertSame(quaternion15, quaternion6);
      assertNotSame(quaternion15, quaternion10);
      assertSame(quaternion15, quaternion3);
      assertNotSame(quaternion15, quaternion1);
      assertSame(quaternion15, quaternion2);
      assertNotSame(quaternion15, quaternion11);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion13);
      assertNotSame(quaternion3, quaternion9);
      assertSame(quaternion3, quaternion17);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion15);
      assertNotSame(quaternion3, quaternion16);
      assertSame(quaternion3, quaternion14);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion12);
      assertSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_4);
      assertSame(quaternion17, quaternion3);
      assertNotSame(quaternion17, quaternion10);
      assertSame(quaternion17, quaternion2);
      assertNotSame(quaternion17, quaternion9);
      assertSame(quaternion17, quaternion14);
      assertNotSame(quaternion17, quaternion0);
      assertSame(quaternion17, quaternion15);
      assertNotSame(quaternion17, quaternion4);
      assertNotSame(quaternion17, quaternion8);
      assertNotSame(quaternion17, quaternion12);
      assertNotSame(quaternion17, quaternion7);
      assertNotSame(quaternion17, quaternion13);
      assertNotSame(quaternion17, quaternion1);
      assertNotSame(quaternion17, quaternion16);
      assertNotSame(quaternion17, quaternion11);
      assertNotSame(quaternion17, quaternion5);
      assertSame(quaternion17, quaternion6);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion();
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertNotNull(quaternion1);
      
      // Undeclared exception!
      try { 
        quaternion0.mult((IQuaternion) null, quaternion1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.invert();
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.set(0.0, 0.0, 0.0, 0.0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion2.mult((IQuaternion) quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(0.0, quaternion3.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.w(), 0.01);
      assertNotNull(quaternion3);
      
      quaternion3.x = (-3.141592653589793);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals((-3.141592653589793), quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.w(), 0.01);
      
      Quaternion quaternion4 = quaternion0.set((IQuaternion) quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion1);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(0.0, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion2.fromAngleAxis(63.494739751, 0.0, 1.0, 0.0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.3254081507725281, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.9455736541437709, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.3254081507725281, quaternion2.y, 0.01);
      assertEquals(0.9455736541437709, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.3254081507725281, quaternion5.y, 0.01);
      assertEquals(0.9455736541437709, quaternion5.w, 0.01);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.3254081507725281, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.3254081507725281, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion5.w(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.3254081507725281, quaternion5.y(), 0.01);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion0.slerpLocal(quaternion5, 0.0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.3254081507725281, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.9455736541437709, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.3254081507725281, quaternion2.y, 0.01);
      assertEquals(0.9455736541437709, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.3254081507725281, quaternion5.y, 0.01);
      assertEquals(0.9455736541437709, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertEquals(0.0, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.w, 0.01);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.3254081507725281, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.3254081507725281, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion5.w(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.3254081507725281, quaternion5.y(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(0.0, quaternion6.x(), 0.01);
      assertEquals(0.0, quaternion6.y(), 0.01);
      assertEquals(0.0, quaternion6.w(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.0, quaternion6.getRotationZ(), 0.01);
      assertNotNull(quaternion6);
      
      double[] doubleArray0 = new double[5];
      quaternion5.hashCode();
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.3254081507725281, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.9455736541437709, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.3254081507725281, quaternion2.y, 0.01);
      assertEquals(0.9455736541437709, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.3254081507725281, quaternion5.y, 0.01);
      assertEquals(0.9455736541437709, quaternion5.w, 0.01);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion6);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.3254081507725281, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.3254081507725281, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion5.w(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.3254081507725281, quaternion5.y(), 0.01);
      
      doubleArray0[0] = 0.9455736541437709;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Vector3 vector3_0 = new Vector3(doubleArray0);
      assertArrayEquals(new double[] {0.9455736541437709, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.9455736541437709, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.8941095354108037, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.9455736541437709, vector3_0.x(), 0.01);
      assertEquals(0.9455736541437709, vector3_0.length(), 0.01);
      assertNotNull(vector3_0);
      assertEquals(5, doubleArray0.length);
      
      double double0 = quaternion6.transformZ(vector3_0);
      assertArrayEquals(new double[] {0.9455736541437709, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.3254081507725281, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.9455736541437709, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.3254081507725281, quaternion2.y, 0.01);
      assertEquals(0.9455736541437709, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.3254081507725281, quaternion5.y, 0.01);
      assertEquals(0.9455736541437709, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertEquals(0.0, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.w, 0.01);
      assertEquals(0.9455736541437709, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.3254081507725281, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.3254081507725281, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion5.w(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.3254081507725281, quaternion5.y(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(0.0, quaternion6.x(), 0.01);
      assertEquals(0.0, quaternion6.y(), 0.01);
      assertEquals(0.0, quaternion6.w(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.0, quaternion6.getRotationZ(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.8941095354108037, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.9455736541437709, vector3_0.x(), 0.01);
      assertEquals(0.9455736541437709, vector3_0.length(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion7 = quaternion4.slerp((IQuaternion) quaternion2, 0.0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertTrue(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertTrue(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertTrue(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion7.w, 0.01);
      assertEquals(0.0, quaternion7.x, 0.01);
      assertEquals(0.0, quaternion7.y, 0.01);
      assertEquals(0.0, quaternion7.z, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.3254081507725281, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.9455736541437709, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.3254081507725281, quaternion2.y, 0.01);
      assertEquals(0.9455736541437709, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion6);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion1);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion7.w(), 0.01);
      assertEquals(0.0, quaternion7.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion7.y(), 0.01);
      assertEquals(0.0, quaternion7.x(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.0, quaternion7.z(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.3254081507725281, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.9455736541437709, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.3254081507725281, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(0.0, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertNotNull(quaternion7);
      
      // Undeclared exception!
      try { 
        quaternion7.mult((IQuaternion) quaternion0, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.slerp((IQuaternion) null, 1.5707963267948966);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.4028234663852886E38;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1744.7441;
      doubleArray0[5] = 3495.3398431;
      doubleArray0[6] = 1946.1814336068;
      Quaternion quaternion0 = new Quaternion(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 3.4028234663852886E38, 0.0, 1744.7441, 3495.3398431, 1946.1814336068}, doubleArray0, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.z, 0.01);
      assertEquals((-1.0), quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.z(), 0.01);
      assertEquals((-1.0), quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      assertEquals(7, doubleArray0.length);
      
      quaternion0.get(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 3.4028234663852886E38, 0.0, 1744.7441, 3495.3398431, 1946.1814336068}, doubleArray0, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.z, 0.01);
      assertEquals((-1.0), quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.z(), 0.01);
      assertEquals((-1.0), quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertNotNull(vector3_0);
      
      double double0 = quaternion0.transformZ(vector3_0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 3.4028234663852886E38, 0.0, 1744.7441, 3495.3398431, 1946.1814336068}, doubleArray0, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.z, 0.01);
      assertEquals((-1.0), quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.z(), 0.01);
      assertEquals((-1.0), quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        quaternion0.slerp((IQuaternion) null, 3495.3398431);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 435.7026486571;
      doubleArray0[1] = (-2893.3783285608);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-34.0);
      doubleArray0[5] = (-0.9999900000002526);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2524.1410067998;
      Quaternion quaternion0 = new Quaternion(doubleArray0);
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals((-2893.3783285608), quaternion0.y, 0.01);
      assertEquals(435.7026486571, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(435.7026486571, quaternion0.x(), 0.01);
      assertEquals((-2893.3783285608), quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals((-2.9921295130657954), quaternion0.getRotationZ(), 0.01);
      assertNotNull(quaternion0);
      assertEquals(8, doubleArray0.length);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals((-2893.3783285608), quaternion0.y, 0.01);
      assertEquals(435.7026486571, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals((-2893.3783285608), quaternion1.y, 0.01);
      assertEquals(435.7026486571, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(435.7026486571, quaternion0.x(), 0.01);
      assertEquals((-2893.3783285608), quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals((-2.9921295130657954), quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(435.7026486571, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-2893.3783285608), quaternion1.y(), 0.01);
      assertEquals((-2.9921295130657954), quaternion1.getRotationZ(), 0.01);
      assertNotNull(quaternion1);
      assertEquals(8, doubleArray0.length);
      
      String string0 = quaternion0.toString();
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals((-2893.3783285608), quaternion0.y, 0.01);
      assertEquals(435.7026486571, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(435.7026486571, quaternion0.x(), 0.01);
      assertEquals((-2893.3783285608), quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals((-2.9921295130657954), quaternion0.getRotationZ(), 0.01);
      assertEquals("[435.7026486571, -2893.3783285608, 0.0, 0.0]", string0);
      assertNotNull(string0);
      assertEquals(8, doubleArray0.length);
      
      Vector3 vector3_0 = new Vector3(doubleArray0);
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(435.7026486571, vector3_0.x, 0.01);
      assertEquals((-2893.3783285608), vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(435.7026486571, vector3_0.x(), 0.01);
      assertEquals(2925.999820613819, vector3_0.length(), 0.01);
      assertEquals((-2893.3783285608), vector3_0.y(), 0.01);
      assertEquals(8561474.950232102, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      assertEquals(8, doubleArray0.length);
      
      Quaternion quaternion2 = quaternion0.fromAngleAxis(0.0, (IVector3) vector3_0);
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(435.7026486571, vector3_0.x, 0.01);
      assertEquals((-2893.3783285608), vector3_0.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(435.7026486571, vector3_0.x(), 0.01);
      assertEquals(2925.999820613819, vector3_0.length(), 0.01);
      assertEquals((-2893.3783285608), vector3_0.y(), 0.01);
      assertEquals(8561474.950232102, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertNotNull(quaternion2);
      assertEquals(8, doubleArray0.length);
      
      Quaternion quaternion3 = new Quaternion(doubleArray0);
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.w, 0.01);
      assertEquals(435.7026486571, quaternion3.x, 0.01);
      assertEquals((-2893.3783285608), quaternion3.y, 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals((-2.9921295130657954), quaternion3.getRotationZ(), 0.01);
      assertEquals((-2893.3783285608), quaternion3.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(435.7026486571, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.w(), 0.01);
      assertNotNull(quaternion3);
      assertEquals(8, doubleArray0.length);
      
      Quaternion quaternion4 = new Quaternion((-947.66209159335), -0.0, 1647.512581581, 0.0);
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertEquals(1647.512581581, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.w, 0.01);
      assertEquals(-0.0, quaternion4.y, 0.01);
      assertEquals((-947.66209159335), quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.w(), 0.01);
      assertEquals(1647.512581581, quaternion4.z(), 0.01);
      assertEquals(3.141592653589793, quaternion4.getRotationZ(), 0.01);
      assertEquals((-947.66209159335), quaternion4.x(), 0.01);
      assertEquals(-0.0, quaternion4.y(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion0.mult((IQuaternion) quaternion4, quaternion1);
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertTrue(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(1647.512581581, quaternion5.z, 0.01);
      assertEquals(0.0, quaternion5.w, 0.01);
      assertEquals(-0.0, quaternion5.y, 0.01);
      assertEquals((-947.66209159335), quaternion5.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals((-947.66209159335), quaternion1.x, 0.01);
      assertEquals(1647.512581581, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(1647.512581581, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.w, 0.01);
      assertEquals(-0.0, quaternion4.y, 0.01);
      assertEquals((-947.66209159335), quaternion4.x, 0.01);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion1);
      assertFalse(quaternion5.hasNaN());
      assertEquals(1647.512581581, quaternion5.z(), 0.01);
      assertEquals((-947.66209159335), quaternion5.x(), 0.01);
      assertEquals(0.0, quaternion5.w(), 0.01);
      assertEquals(-0.0, quaternion5.y(), 0.01);
      assertEquals(3.141592653589793, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals((-947.66209159335), quaternion1.x(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(1647.512581581, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion4.w(), 0.01);
      assertEquals(1647.512581581, quaternion4.z(), 0.01);
      assertEquals(3.141592653589793, quaternion4.getRotationZ(), 0.01);
      assertEquals((-947.66209159335), quaternion4.x(), 0.01);
      assertEquals(-0.0, quaternion4.y(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertNotNull(quaternion5);
      assertEquals(8, doubleArray0.length);
      
      Quaternion quaternion6 = quaternion2.slerp((IQuaternion) quaternion3, 435.7026486571);
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertEquals(0.892887635049657, quaternion6.w, 0.01);
      assertEquals(1302.8290854257186, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertEquals((-196.18799161665336), quaternion6.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(435.7026486571, vector3_0.x, 0.01);
      assertEquals((-2893.3783285608), vector3_0.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.w, 0.01);
      assertEquals(435.7026486571, quaternion3.x, 0.01);
      assertEquals((-2893.3783285608), quaternion3.y, 0.01);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertEquals(1302.8290854257186, quaternion6.y(), 0.01);
      assertEquals((-2.9921294784849413), quaternion6.getRotationZ(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-196.18799161665336), quaternion6.x(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(0.892887635049657, quaternion6.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(435.7026486571, vector3_0.x(), 0.01);
      assertEquals(2925.999820613819, vector3_0.length(), 0.01);
      assertEquals((-2893.3783285608), vector3_0.y(), 0.01);
      assertEquals(8561474.950232102, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals((-2.9921295130657954), quaternion3.getRotationZ(), 0.01);
      assertEquals((-2893.3783285608), quaternion3.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(435.7026486571, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.w(), 0.01);
      assertNotNull(quaternion6);
      assertEquals(8, doubleArray0.length);
      
      Vector3 vector3_1 = vector3_0.negateLocal();
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertEquals(2893.3783285608, vector3_1.y, 0.01);
      assertEquals((-435.7026486571), vector3_1.x, 0.01);
      assertEquals(-0.0, vector3_1.z, 0.01);
      assertEquals(-0.0, vector3_0.z, 0.01);
      assertEquals((-435.7026486571), vector3_0.x, 0.01);
      assertEquals(2893.3783285608, vector3_0.y, 0.01);
      assertSame(vector3_1, vector3_0);
      assertSame(vector3_0, vector3_1);
      assertEquals((-435.7026486571), vector3_1.x(), 0.01);
      assertEquals(2893.3783285608, vector3_1.y(), 0.01);
      assertEquals(2925.999820613819, vector3_1.length(), 0.01);
      assertEquals(-0.0, vector3_1.z(), 0.01);
      assertEquals(8561474.950232102, vector3_1.lengthSquared(), 0.01);
      assertEquals(-0.0, vector3_0.z(), 0.01);
      assertEquals((-435.7026486571), vector3_0.x(), 0.01);
      assertEquals(2925.999820613819, vector3_0.length(), 0.01);
      assertEquals(2893.3783285608, vector3_0.y(), 0.01);
      assertEquals(8561474.950232102, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_1);
      assertEquals(8, doubleArray0.length);
      
      Vector3 vector3_2 = vector3_1.absLocal();
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertEquals(2893.3783285608, vector3_1.y, 0.01);
      assertEquals(435.7026486571, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(2893.3783285608, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(435.7026486571, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(435.7026486571, vector3_0.x, 0.01);
      assertEquals(2893.3783285608, vector3_0.y, 0.01);
      assertSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertEquals(435.7026486571, vector3_1.x(), 0.01);
      assertEquals(2893.3783285608, vector3_1.y(), 0.01);
      assertEquals(2925.999820613819, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(8561474.950232102, vector3_1.lengthSquared(), 0.01);
      assertEquals(435.7026486571, vector3_2.x(), 0.01);
      assertEquals(2893.3783285608, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(2925.999820613819, vector3_2.length(), 0.01);
      assertEquals(8561474.950232102, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(435.7026486571, vector3_0.x(), 0.01);
      assertEquals(2925.999820613819, vector3_0.length(), 0.01);
      assertEquals(2893.3783285608, vector3_0.y(), 0.01);
      assertEquals(8561474.950232102, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_2);
      assertEquals(8, doubleArray0.length);
      
      Vector3 vector3_3 = quaternion1.transformScaleAndAdd(vector3_0, (-1.0), vector3_1, vector3_1);
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(2.0903854911341286E10, vector3_1.y, 0.01);
      assertEquals(2.3652533999037294E9, vector3_1.x, 0.01);
      assertEquals(1.36051221044399E9, vector3_1.z, 0.01);
      assertEquals(1.36051221044399E9, vector3_3.z, 0.01);
      assertEquals(2.3652533999037294E9, vector3_3.x, 0.01);
      assertEquals(2.0903854911341286E10, vector3_3.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals((-947.66209159335), quaternion1.x, 0.01);
      assertEquals(1647.512581581, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(2.0903854911341286E10, vector3_0.y, 0.01);
      assertEquals(2.3652533999037294E9, vector3_0.x, 0.01);
      assertEquals(1.36051221044399E9, vector3_0.z, 0.01);
      assertSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_3);
      assertEquals(2.3652533999037294E9, vector3_1.x(), 0.01);
      assertEquals(1.36051221044399E9, vector3_1.z(), 0.01);
      assertEquals(2.108118989229333E10, vector3_1.length(), 0.01);
      assertEquals(2.0903854911341286E10, vector3_1.y(), 0.01);
      assertEquals(4.444165672749305E20, vector3_1.lengthSquared(), 0.01);
      assertEquals(4.444165672749305E20, vector3_3.lengthSquared(), 0.01);
      assertEquals(1.36051221044399E9, vector3_3.z(), 0.01);
      assertEquals(2.0903854911341286E10, vector3_3.y(), 0.01);
      assertEquals(2.108118989229333E10, vector3_3.length(), 0.01);
      assertEquals(2.3652533999037294E9, vector3_3.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals((-947.66209159335), quaternion1.x(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(1647.512581581, quaternion1.z(), 0.01);
      assertEquals(2.0903854911341286E10, vector3_0.y(), 0.01);
      assertEquals(2.3652533999037294E9, vector3_0.x(), 0.01);
      assertEquals(1.36051221044399E9, vector3_0.z(), 0.01);
      assertEquals(2.108118989229333E10, vector3_0.length(), 0.01);
      assertEquals(4.444165672749305E20, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_3);
      assertEquals(8, doubleArray0.length);
      
      Vector3 vector3_4 = quaternion1.transformUnitX(vector3_0);
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals((-5428594.412935382), vector3_4.x, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals((-3122570.4379748204), vector3_4.z, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals((-947.66209159335), quaternion1.x, 0.01);
      assertEquals(1647.512581581, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals((-3122570.4379748204), vector3_0.z, 0.01);
      assertEquals((-5428594.412935382), vector3_0.x, 0.01);
      assertSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_2);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_3);
      assertEquals(6262593.986541639, vector3_4.length(), 0.01);
      assertEquals(3.92200834402675E13, vector3_4.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals((-3122570.4379748204), vector3_4.z(), 0.01);
      assertEquals((-5428594.412935382), vector3_4.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals((-947.66209159335), quaternion1.x(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(1647.512581581, quaternion1.z(), 0.01);
      assertEquals(3.92200834402675E13, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals((-5428594.412935382), vector3_0.x(), 0.01);
      assertEquals((-3122570.4379748204), vector3_0.z(), 0.01);
      assertEquals(6262593.986541639, vector3_0.length(), 0.01);
      assertNotNull(vector3_4);
      assertEquals(8, doubleArray0.length);
      
      Vector3 vector3_5 = quaternion1.transform((IVector3) vector3_4, vector3_4);
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(3.922008344026751E13, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(2.255969800837684E13, vector3_4.z, 0.01);
      assertEquals(2.255969800837684E13, vector3_5.z, 0.01);
      assertEquals(3.922008344026751E13, vector3_5.x, 0.01);
      assertEquals(0.0, vector3_5.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals((-947.66209159335), quaternion1.x, 0.01);
      assertEquals(1647.512581581, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(3.922008344026751E13, vector3_0.x, 0.01);
      assertEquals(2.255969800837684E13, vector3_0.z, 0.01);
      assertSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_5);
      assertSame(vector3_4, vector3_2);
      assertSame(vector3_5, vector3_0);
      assertSame(vector3_5, vector3_2);
      assertSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_4);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_5);
      assertSame(vector3_0, vector3_3);
      assertEquals(3.922008344026751E13, vector3_4.x(), 0.01);
      assertEquals(2.0471549192907075E27, vector3_4.lengthSquared(), 0.01);
      assertEquals(2.255969800837684E13, vector3_4.z(), 0.01);
      assertEquals(4.524549612161091E13, vector3_4.length(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(0.0, vector3_5.y(), 0.01);
      assertEquals(2.0471549192907075E27, vector3_5.lengthSquared(), 0.01);
      assertEquals(3.922008344026751E13, vector3_5.x(), 0.01);
      assertEquals(4.524549612161091E13, vector3_5.length(), 0.01);
      assertEquals(2.255969800837684E13, vector3_5.z(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals((-947.66209159335), quaternion1.x(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(1647.512581581, quaternion1.z(), 0.01);
      assertEquals(2.255969800837684E13, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(4.524549612161091E13, vector3_0.length(), 0.01);
      assertEquals(2.0471549192907075E27, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.922008344026751E13, vector3_0.x(), 0.01);
      assertNotNull(vector3_5);
      assertEquals(8, doubleArray0.length);
      
      Quaternion quaternion7 = quaternion0.slerp((IQuaternion) quaternion1, 382.45);
      assertArrayEquals(new double[] {435.7026486571, (-2893.3783285608), 0.0, 0.0, (-34.0), (-0.9999900000002526), 0.0, 2524.1410067998}, doubleArray0, 0.01);
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(615.4572958617307, quaternion7.x, 0.01);
      assertEquals(0.0, quaternion7.y, 0.01);
      assertEquals((-1069.9738307070807), quaternion7.z, 0.01);
      assertEquals((-0.7604059656000539), quaternion7.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals((-947.66209159335), quaternion1.x, 0.01);
      assertEquals(1647.512581581, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertEquals((-0.7604059656000539), quaternion7.w(), 0.01);
      assertEquals(3.14088197623689, quaternion7.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion7.y(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals(615.4572958617307, quaternion7.x(), 0.01);
      assertEquals((-1069.9738307070807), quaternion7.z(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals((-947.66209159335), quaternion1.x(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(1647.512581581, quaternion1.z(), 0.01);
      assertNotNull(quaternion7);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromVectors(vector3_0, vector3_0);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(6.123233995736766E-17, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1968.7767106636784), (-1968.7767106636784), (-1968.7767106636784), (-1968.7767106636784));
      assertEquals((-1968.7767106636784), quaternion0.z, 0.01);
      assertEquals((-1968.7767106636784), quaternion0.x, 0.01);
      assertEquals((-1968.7767106636784), quaternion0.y, 0.01);
      assertEquals((-1968.7767106636784), quaternion0.w, 0.01);
      assertEquals(2.356194457943282, quaternion0.getRotationZ(), 0.01);
      assertEquals((-1968.7767106636784), quaternion0.y(), 0.01);
      assertEquals((-1968.7767106636784), quaternion0.w(), 0.01);
      assertEquals((-1968.7767106636784), quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1968.7767106636784), quaternion0.x(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.normalize();
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals((-1968.7767106636784), quaternion0.z, 0.01);
      assertEquals((-1968.7767106636784), quaternion0.x, 0.01);
      assertEquals((-1968.7767106636784), quaternion0.y, 0.01);
      assertEquals((-1968.7767106636784), quaternion0.w, 0.01);
      assertEquals((-0.49999999999999994), quaternion1.z, 0.01);
      assertEquals((-0.49999999999999994), quaternion1.x, 0.01);
      assertEquals((-0.49999999999999994), quaternion1.y, 0.01);
      assertEquals((-0.49999999999999994), quaternion1.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(2.356194457943282, quaternion0.getRotationZ(), 0.01);
      assertEquals((-1968.7767106636784), quaternion0.y(), 0.01);
      assertEquals((-1968.7767106636784), quaternion0.w(), 0.01);
      assertEquals((-1968.7767106636784), quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1968.7767106636784), quaternion0.x(), 0.01);
      assertEquals((-0.49999999999999994), quaternion1.z(), 0.01);
      assertEquals(1.5707963267948963, quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.49999999999999994), quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.49999999999999994), quaternion1.x(), 0.01);
      assertEquals((-0.49999999999999994), quaternion1.y(), 0.01);
      assertNotNull(quaternion1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1968.7767106636784);
      doubleArray0[1] = (-0.49999999999999994);
      doubleArray0[2] = (-1968.7767106636784);
      doubleArray0[3] = (-1968.7767106636784);
      doubleArray0[4] = (-0.49999999999999994);
      doubleArray0[5] = (-532.0);
      doubleArray0[6] = (-3.141592653589793);
      doubleArray0[7] = (-0.49999999999999994);
      Vector3 vector3_0 = new Vector3(doubleArray0);
      assertArrayEquals(new double[] {(-1968.7767106636784), (-0.49999999999999994), (-1968.7767106636784), (-1968.7767106636784), (-0.49999999999999994), (-532.0), (-3.141592653589793), (-0.49999999999999994)}, doubleArray0, 0.01);
      assertEquals((-0.49999999999999994), vector3_0.y, 0.01);
      assertEquals((-1968.7767106636784), vector3_0.x, 0.01);
      assertEquals((-1968.7767106636784), vector3_0.z, 0.01);
      assertEquals((-0.49999999999999994), vector3_0.y(), 0.01);
      assertEquals((-1968.7767106636784), vector3_0.x(), 0.01);
      assertEquals((-1968.7767106636784), vector3_0.z(), 0.01);
      assertEquals(2784.270770399924, vector3_0.length(), 0.01);
      assertEquals(7752163.722903387, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      assertEquals(8, doubleArray0.length);
      
      Vector3 vector3_1 = quaternion1.transformLocal(vector3_0);
      assertArrayEquals(new double[] {(-1968.7767106636784), (-0.49999999999999994), (-1968.7767106636784), (-1968.7767106636784), (-0.49999999999999994), (-532.0), (-3.141592653589793), (-0.49999999999999994)}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals((-1968.7767106636784), quaternion0.z, 0.01);
      assertEquals((-1968.7767106636784), quaternion0.x, 0.01);
      assertEquals((-1968.7767106636784), quaternion0.y, 0.01);
      assertEquals((-1968.7767106636784), quaternion0.w, 0.01);
      assertEquals((-0.49999999999999994), quaternion1.z, 0.01);
      assertEquals((-0.49999999999999994), quaternion1.x, 0.01);
      assertEquals((-0.49999999999999994), quaternion1.y, 0.01);
      assertEquals((-0.49999999999999994), quaternion1.w, 0.01);
      assertEquals((-1968.776710663678), vector3_0.y, 0.01);
      assertEquals((-0.5000000000004547), vector3_0.z, 0.01);
      assertEquals((-1968.7767106636784), vector3_0.x, 0.01);
      assertEquals((-0.5000000000004547), vector3_1.z, 0.01);
      assertEquals((-1968.7767106636784), vector3_1.x, 0.01);
      assertEquals((-1968.776710663678), vector3_1.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(2.356194457943282, quaternion0.getRotationZ(), 0.01);
      assertEquals((-1968.7767106636784), quaternion0.y(), 0.01);
      assertEquals((-1968.7767106636784), quaternion0.w(), 0.01);
      assertEquals((-1968.7767106636784), quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1968.7767106636784), quaternion0.x(), 0.01);
      assertEquals((-0.49999999999999994), quaternion1.z(), 0.01);
      assertEquals(1.5707963267948963, quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.49999999999999994), quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.49999999999999994), quaternion1.x(), 0.01);
      assertEquals((-0.49999999999999994), quaternion1.y(), 0.01);
      assertEquals((-1968.7767106636784), vector3_0.x(), 0.01);
      assertEquals((-0.5000000000004547), vector3_0.z(), 0.01);
      assertEquals((-1968.776710663678), vector3_0.y(), 0.01);
      assertEquals(2784.2707703999235, vector3_0.length(), 0.01);
      assertEquals(7752163.722903385, vector3_0.lengthSquared(), 0.01);
      assertEquals((-1968.776710663678), vector3_1.y(), 0.01);
      assertEquals(2784.2707703999235, vector3_1.length(), 0.01);
      assertEquals(7752163.722903385, vector3_1.lengthSquared(), 0.01);
      assertEquals((-1968.7767106636784), vector3_1.x(), 0.01);
      assertEquals((-0.5000000000004547), vector3_1.z(), 0.01);
      assertNotNull(vector3_1);
      assertEquals(8, doubleArray0.length);
      
      double double0 = quaternion0.getRotationZ();
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertEquals((-1968.7767106636784), quaternion0.z, 0.01);
      assertEquals((-1968.7767106636784), quaternion0.x, 0.01);
      assertEquals((-1968.7767106636784), quaternion0.y, 0.01);
      assertEquals((-1968.7767106636784), quaternion0.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertEquals(2.356194457943282, quaternion0.getRotationZ(), 0.01);
      assertEquals((-1968.7767106636784), quaternion0.y(), 0.01);
      assertEquals((-1968.7767106636784), quaternion0.w(), 0.01);
      assertEquals((-1968.7767106636784), quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1968.7767106636784), quaternion0.x(), 0.01);
      assertEquals(2.356194457943282, double0, 0.01);
      
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(1.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertEquals(1.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(1.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(1.0, vector3_2.length(), 0.01);
      assertNotNull(vector3_2);
      
      Quaternion quaternion2 = quaternion0.fromVectorFromNegativeZ((IVector3) vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(1.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(1.0, quaternion2.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(1.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(1.0, vector3_2.length(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(1.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion2.integrate((IVector3) vector3_2, 0.0);
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(0.0, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(1.0, quaternion3.y, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(1.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(1.0, quaternion2.y, 0.01);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertEquals(1.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.w(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(3.141592653589793, quaternion3.getRotationZ(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(1.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(1.0, vector3_2.length(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(1.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertNotNull(quaternion3);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.slerpLocal(quaternion0, 0.0);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ(0.0, 0.0, 0.0);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = new Vector3(1.0, (-1533.201), 0.0);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals((-1533.201), vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(2350706.306401, vector3_0.lengthSquared(), 0.01);
      assertEquals(1533.2013261150669, vector3_0.length(), 0.01);
      assertEquals((-1533.201), vector3_0.y(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion2 = quaternion0.fromAnglesXY(1.0, 961.847);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals((-0.8481266867454192), quaternion0.w, 0.01);
      assertEquals((-0.4633337206719871), quaternion0.x, 0.01);
      assertEquals((-0.22546014318346239), quaternion0.y, 0.01);
      assertEquals(0.123169437581663, quaternion0.z, 0.01);
      assertEquals((-0.4633337206719871), quaternion2.x, 0.01);
      assertEquals(0.123169437581663, quaternion2.z, 0.01);
      assertEquals((-0.22546014318346239), quaternion2.y, 0.01);
      assertEquals((-0.8481266867454192), quaternion2.w, 0.01);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertEquals(0.123169437581663, quaternion0.z(), 0.01);
      assertEquals((-0.22546014318346239), quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.8481266867454192), quaternion0.w(), 0.01);
      assertEquals((-0.4633337206719871), quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.22546014318346239), quaternion2.y(), 0.01);
      assertEquals((-0.4633337206719871), quaternion2.x(), 0.01);
      assertEquals(0.123169437581663, quaternion2.z(), 0.01);
      assertEquals((-0.8481266867454192), quaternion2.w(), 0.01);
      assertNotNull(quaternion2);
      
      Vector3 vector3_1 = new Vector3();
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = vector3_1.abs();
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = quaternion2.toAngles(vector3_1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals((-0.8481266867454192), quaternion0.w, 0.01);
      assertEquals((-0.4633337206719871), quaternion0.x, 0.01);
      assertEquals((-0.22546014318346239), quaternion0.y, 0.01);
      assertEquals(0.123169437581663, quaternion0.z, 0.01);
      assertEquals((-0.4633337206719871), quaternion2.x, 0.01);
      assertEquals(0.123169437581663, quaternion2.z, 0.01);
      assertEquals((-0.22546014318346239), quaternion2.y, 0.01);
      assertEquals((-0.8481266867454192), quaternion2.w, 0.01);
      assertEquals(0.5196480015232491, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.5196480015232491, vector3_3.y, 0.01);
      assertEquals(1.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertEquals(0.123169437581663, quaternion0.z(), 0.01);
      assertEquals((-0.22546014318346239), quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.8481266867454192), quaternion0.w(), 0.01);
      assertEquals((-0.4633337206719871), quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.22546014318346239), quaternion2.y(), 0.01);
      assertEquals((-0.4633337206719871), quaternion2.x(), 0.01);
      assertEquals(0.123169437581663, quaternion2.z(), 0.01);
      assertEquals((-0.8481266867454192), quaternion2.w(), 0.01);
      assertEquals(1.2700340454871066, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(1.1269578720995326, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(0.5196480015232491, vector3_1.y(), 0.01);
      assertEquals(0.5196480015232491, vector3_3.y(), 0.01);
      assertEquals(1.2700340454871066, vector3_3.lengthSquared(), 0.01);
      assertEquals(1.1269578720995326, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(1.0, vector3_3.x(), 0.01);
      assertNotNull(vector3_3);
      
      Quaternion quaternion3 = quaternion1.invert();
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertEquals((-0.8481266867454192), quaternion0.w, 0.01);
      assertEquals((-0.4633337206719871), quaternion0.x, 0.01);
      assertEquals((-0.22546014318346239), quaternion0.y, 0.01);
      assertEquals(0.123169437581663, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(-0.0, quaternion3.x, 0.01);
      assertEquals(-0.0, quaternion3.y, 0.01);
      assertEquals(-0.0, quaternion3.z, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertEquals(0.123169437581663, quaternion0.z(), 0.01);
      assertEquals((-0.22546014318346239), quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.8481266867454192), quaternion0.w(), 0.01);
      assertEquals((-0.4633337206719871), quaternion0.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(-0.0, quaternion3.z(), 0.01);
      assertEquals(-0.0, quaternion3.x(), 0.01);
      assertEquals(-0.0, quaternion3.y(), 0.01);
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertNotNull(quaternion3);
      
      Vector3 vector3_4 = quaternion1.transformUnitZ(vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertEquals((-0.8481266867454192), quaternion0.w, 0.01);
      assertEquals((-0.4633337206719871), quaternion0.x, 0.01);
      assertEquals((-0.22546014318346239), quaternion0.y, 0.01);
      assertEquals(0.123169437581663, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(1.0, vector3_4.z, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_3);
      assertEquals(0.123169437581663, quaternion0.z(), 0.01);
      assertEquals((-0.22546014318346239), quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.8481266867454192), quaternion0.w(), 0.01);
      assertEquals((-0.4633337206719871), quaternion0.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.x(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertNotNull(vector3_4);
      
      Vector3 vector3_5 = (Vector3)Vector3.MIN_VALUE;
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertEquals((-3.4028234663852886E38), vector3_5.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.x, 0.01);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_0);
      assertEquals(5.8938631329669654E38, vector3_5.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.z(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.x(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_5.lengthSquared(), 0.01);
      assertNotNull(vector3_5);
      
      Vector3 vector3_6 = new Vector3(vector3_5);
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertTrue(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertEquals((-3.4028234663852886E38), vector3_5.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_6.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_6.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_6.x, 0.01);
      assertEquals(5.8938631329669654E38, vector3_5.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.z(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.x(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_5.lengthSquared(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_6.z(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_6.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_6.x(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_6.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_6.length(), 0.01);
      assertNotNull(vector3_6);
      
      Vector3 vector3_7 = vector3_6.negate();
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertTrue(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertTrue(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_7.equals((Object)vector3_2));
      assertFalse(vector3_7.equals((Object)vector3_3));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_6));
      assertFalse(vector3_7.equals((Object)vector3_5));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_4));
      assertEquals((-3.4028234663852886E38), vector3_5.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_6.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_6.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_6.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_7.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_7.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_7.z, 0.01);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_3);
      assertNotSame(vector3_7, vector3_0);
      assertNotSame(vector3_7, vector3_6);
      assertNotSame(vector3_7, vector3_5);
      assertNotSame(vector3_7, vector3_1);
      assertNotSame(vector3_7, vector3_4);
      assertEquals(5.8938631329669654E38, vector3_5.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.z(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.x(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_5.lengthSquared(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_6.z(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_6.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_6.x(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_6.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_6.length(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_7.length(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_7.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_7.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_7.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_7.y(), 0.01);
      assertNotNull(vector3_7);
      
      Quaternion quaternion4 = quaternion2.fromVectorFromNegativeZ((IVector3) vector3_4);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_7));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(1.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(1.0, vector3_4.z, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertEquals(1.0, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion4.w, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_7);
      assertSame(vector3_0, vector3_4);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_7);
      assertSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_3);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.x(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(1.0, quaternion4.y(), 0.01);
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertEquals(0.0, quaternion4.w(), 0.01);
      assertEquals(3.141592653589793, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertNotNull(quaternion4);
      
      Vector3 vector3_8 = quaternion1.toAngles(vector3_6);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_7));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertTrue(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_8.equals((Object)vector3_0));
      assertTrue(vector3_8.equals((Object)vector3_2));
      assertFalse(vector3_8.equals((Object)vector3_3));
      assertFalse(vector3_8.equals((Object)vector3_1));
      assertFalse(vector3_8.equals((Object)vector3_7));
      assertFalse(vector3_8.equals((Object)vector3_4));
      assertFalse(vector3_8.equals((Object)vector3_5));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.x, 0.01);
      assertEquals(0.0, vector3_6.z, 0.01);
      assertEquals(0.0, vector3_6.x, 0.01);
      assertEquals(0.0, vector3_6.y, 0.01);
      assertEquals(0.0, vector3_8.x, 0.01);
      assertEquals(0.0, vector3_8.y, 0.01);
      assertEquals(0.0, vector3_8.z, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_7);
      assertSame(vector3_6, vector3_8);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_8, vector3_2);
      assertNotSame(vector3_8, vector3_0);
      assertNotSame(vector3_8, vector3_3);
      assertNotSame(vector3_8, vector3_1);
      assertNotSame(vector3_8, vector3_7);
      assertNotSame(vector3_8, vector3_4);
      assertSame(vector3_8, vector3_6);
      assertNotSame(vector3_8, vector3_5);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_5.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.z(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.x(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_5.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_6.length(), 0.01);
      assertEquals(0.0, vector3_6.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_6.z(), 0.01);
      assertEquals(0.0, vector3_6.y(), 0.01);
      assertEquals(0.0, vector3_6.x(), 0.01);
      assertEquals(0.0, vector3_8.length(), 0.01);
      assertEquals(0.0, vector3_8.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_8.z(), 0.01);
      assertEquals(0.0, vector3_8.x(), 0.01);
      assertEquals(0.0, vector3_8.y(), 0.01);
      assertNotNull(vector3_8);
      
      Quaternion quaternion5 = quaternion1.slerpLocal(quaternion0, 0.0);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(1.0, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion4);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(1.0, quaternion5.w(), 0.01);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion5.fromAnglesXZ(0.0, 3.4028234663852886E38);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.27108943189443574, quaternion1.z, 0.01);
      assertEquals((-0.9625541646656317), quaternion1.w, 0.01);
      assertEquals((-0.9625541646656317), quaternion5.w, 0.01);
      assertEquals(0.27108943189443574, quaternion5.z, 0.01);
      assertEquals(-0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(0.0, quaternion6.y, 0.01);
      assertEquals(-0.0, quaternion6.x, 0.01);
      assertEquals((-0.9625541646656317), quaternion6.w, 0.01);
      assertEquals(0.27108943189443574, quaternion6.z, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion4);
      assertSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion3);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9625541646656317), quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals((-0.5490493299574543), quaternion1.getRotationZ(), 0.01);
      assertEquals(0.27108943189443574, quaternion1.z(), 0.01);
      assertEquals((-0.9625541646656317), quaternion5.w(), 0.01);
      assertEquals(-0.0, quaternion5.x(), 0.01);
      assertEquals((-0.5490493299574543), quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.27108943189443574, quaternion5.z(), 0.01);
      assertEquals(0.27108943189443574, quaternion6.z(), 0.01);
      assertEquals((-0.9625541646656317), quaternion6.w(), 0.01);
      assertEquals(0.0, quaternion6.y(), 0.01);
      assertEquals(-0.0, quaternion6.x(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-0.5490493299574543), quaternion6.getRotationZ(), 0.01);
      assertNotNull(quaternion6);
      
      Vector3 vector3_9 = quaternion5.transformLocal(vector3_4);
      assertFalse(vector3_9.equals((Object)vector3_2));
      assertFalse(vector3_9.equals((Object)vector3_6));
      assertFalse(vector3_9.equals((Object)vector3_5));
      assertFalse(vector3_9.equals((Object)vector3_1));
      assertFalse(vector3_9.equals((Object)vector3_7));
      assertFalse(vector3_9.equals((Object)vector3_3));
      assertFalse(vector3_9.equals((Object)vector3_8));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_4.equals((Object)vector3_6));
      assertFalse(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_7));
      assertFalse(vector3_4.equals((Object)vector3_8));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertEquals(0.0, vector3_9.y, 0.01);
      assertEquals(0.0, vector3_9.x, 0.01);
      assertEquals(1.0, vector3_9.z, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.27108943189443574, quaternion1.z, 0.01);
      assertEquals((-0.9625541646656317), quaternion1.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(1.0, vector3_4.z, 0.01);
      assertEquals((-0.9625541646656317), quaternion5.w, 0.01);
      assertEquals(0.27108943189443574, quaternion5.z, 0.01);
      assertEquals(-0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertSame(vector3_9, vector3_4);
      assertNotSame(vector3_9, vector3_2);
      assertNotSame(vector3_9, vector3_6);
      assertNotSame(vector3_9, vector3_5);
      assertNotSame(vector3_9, vector3_1);
      assertNotSame(vector3_9, vector3_7);
      assertSame(vector3_9, vector3_0);
      assertNotSame(vector3_9, vector3_3);
      assertNotSame(vector3_9, vector3_8);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_7);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_7);
      assertSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_9);
      assertNotSame(vector3_4, vector3_8);
      assertNotSame(vector3_4, vector3_3);
      assertSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion4);
      assertEquals(1.0, vector3_9.length(), 0.01);
      assertEquals(1.0, vector3_9.z(), 0.01);
      assertEquals(0.0, vector3_9.y(), 0.01);
      assertEquals(0.0, vector3_9.x(), 0.01);
      assertEquals(1.0, vector3_9.lengthSquared(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.9625541646656317), quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals((-0.5490493299574543), quaternion1.getRotationZ(), 0.01);
      assertEquals(0.27108943189443574, quaternion1.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.x(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertEquals((-0.9625541646656317), quaternion5.w(), 0.01);
      assertEquals(-0.0, quaternion5.x(), 0.01);
      assertEquals((-0.5490493299574543), quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.27108943189443574, quaternion5.z(), 0.01);
      assertNotNull(vector3_9);
      
      double double0 = quaternion0.transformZ(vector3_5);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_5.equals((Object)vector3_6));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_7));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_9));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_8));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.x, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_7);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_9);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_8);
      assertNotSame(vector3_5, vector3_0);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_5.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.z(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_5.x(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_5.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, double0, 0.01);
      
      quaternion0.z = (-1533.201);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals((-1533.201), quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      
      Quaternion quaternion7 = quaternion6.fromAngleAxis(0.0, 0.0, 0.0, 1.0);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertTrue(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertTrue(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals((-1533.201), quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion7.y, 0.01);
      assertEquals(0.0, quaternion7.x, 0.01);
      assertEquals(0.0, quaternion7.z, 0.01);
      assertEquals(1.0, quaternion7.w, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(1.0, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(0.0, quaternion6.y, 0.01);
      assertEquals(1.0, quaternion6.w, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion6);
      assertSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion4);
      assertSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion3);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals((-1533.201), quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion7.x(), 0.01);
      assertEquals(0.0, quaternion7.y(), 0.01);
      assertEquals(0.0, quaternion7.z(), 0.01);
      assertEquals(0.0, quaternion7.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion7.w(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(1.0, quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion6.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(0.0, quaternion6.y(), 0.01);
      assertEquals(0.0, quaternion6.x(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals(1.0, quaternion6.w(), 0.01);
      assertNotNull(quaternion7);
      
      quaternion2.hashCode();
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals((-1533.201), quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals((-1533.201), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(1.0, quaternion2.y, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion7);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals((-1533.201), quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals((-1533.201), quaternion2.z(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      
      double double1 = quaternion1.z();
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals((-1533.201), quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals((-1533.201), quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Quaternion quaternion8 = quaternion5.slerp((IQuaternion) quaternion2, (-1571.935715209), quaternion6);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals((-1533.201), quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.9949060207492485, quaternion1.w, 0.01);
      assertEquals((-154.5570785871572), quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.10080679479543596, quaternion1.y, 0.01);
      assertEquals((-1533.201), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(1.0, quaternion2.y, 0.01);
      assertEquals((-154.5570785871572), quaternion8.z, 0.01);
      assertEquals(0.9949060207492485, quaternion8.w, 0.01);
      assertEquals(0.10080679479543596, quaternion8.y, 0.01);
      assertEquals(0.0, quaternion8.x, 0.01);
      assertEquals((-154.5570785871572), quaternion5.z, 0.01);
      assertEquals(0.9949060207492485, quaternion5.w, 0.01);
      assertEquals(0.10080679479543596, quaternion5.y, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.10080679479543596, quaternion6.y, 0.01);
      assertEquals((-154.5570785871572), quaternion6.z, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(0.9949060207492485, quaternion6.w, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion8, quaternion0);
      assertSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion7);
      assertSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion4);
      assertSame(quaternion8, quaternion5);
      assertSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion8);
      assertSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion8);
      assertSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion3);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals((-1533.201), quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.9949060207492485, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-154.5570785871572), quaternion1.z(), 0.01);
      assertEquals((-3.135155467476447), quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.10080679479543596, quaternion1.y(), 0.01);
      assertEquals((-1533.201), quaternion2.z(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals((-3.135155467476447), quaternion8.getRotationZ(), 0.01);
      assertEquals((-154.5570785871572), quaternion8.z(), 0.01);
      assertEquals(0.9949060207492485, quaternion8.w(), 0.01);
      assertEquals(0.10080679479543596, quaternion8.y(), 0.01);
      assertEquals(0.0, quaternion8.x(), 0.01);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.9949060207492485, quaternion5.w(), 0.01);
      assertEquals((-3.135155467476447), quaternion5.getRotationZ(), 0.01);
      assertEquals((-154.5570785871572), quaternion5.z(), 0.01);
      assertEquals(0.10080679479543596, quaternion5.y(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.9949060207492485, quaternion6.w(), 0.01);
      assertEquals((-3.135155467476447), quaternion6.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion6.x(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-154.5570785871572), quaternion6.z(), 0.01);
      assertEquals(0.10080679479543596, quaternion6.y(), 0.01);
      assertNotNull(quaternion8);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        quaternion0.set(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.fromAnglesXY(1620.2930969, 1620.2930969);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals((-0.14059677444103746), quaternion1.z, 0.01);
      assertEquals(0.8594032255589624, quaternion1.w, 0.01);
      assertEquals((-0.3476051228877582), quaternion1.x, 0.01);
      assertEquals((-0.3476051228877582), quaternion1.y, 0.01);
      assertEquals((-0.3476051228877582), quaternion2.x, 0.01);
      assertEquals((-0.14059677444103746), quaternion2.z, 0.01);
      assertEquals((-0.3476051228877582), quaternion2.y, 0.01);
      assertEquals(0.8594032255589624, quaternion2.w, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals((-3.8613420305927976E-17), quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.14059677444103746), quaternion1.z(), 0.01);
      assertEquals((-0.3476051228877582), quaternion1.x(), 0.01);
      assertEquals((-0.3476051228877582), quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.8594032255589624, quaternion1.w(), 0.01);
      assertEquals((-0.3476051228877582), quaternion2.x(), 0.01);
      assertEquals((-0.3476051228877582), quaternion2.y(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.8594032255589624, quaternion2.w(), 0.01);
      assertEquals((-3.8613420305927976E-17), quaternion2.getRotationZ(), 0.01);
      assertEquals((-0.14059677444103746), quaternion2.z(), 0.01);
      assertNotNull(quaternion2);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion3 = quaternion1.fromVectors(vector3_0, vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion1);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(Double.NaN, quaternion3.z(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion3.w(), 0.01);
      assertEquals(Double.NaN, quaternion3.y(), 0.01);
      assertEquals(Double.NaN, quaternion3.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion3.x(), 0.01);
      assertTrue(quaternion3.hasNaN());
      assertNotNull(quaternion3);
      
      String string0 = quaternion1.toString();
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals("[NaN, NaN, NaN, 6.123233995736766E-17]", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      Quaternion quaternion4 = quaternion3.slerp((IQuaternion) quaternion2, Double.NaN, quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion1);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion2.z(), 0.01);
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Double.NaN, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertEquals(Double.NaN, quaternion2.w(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(Double.NaN, quaternion3.z(), 0.01);
      assertEquals(Double.NaN, quaternion3.w(), 0.01);
      assertEquals(Double.NaN, quaternion3.y(), 0.01);
      assertEquals(Double.NaN, quaternion3.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion3.x(), 0.01);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Double.NaN, quaternion4.z(), 0.01);
      assertEquals(Double.NaN, quaternion4.w(), 0.01);
      assertEquals(Double.NaN, quaternion4.y(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion4.x(), 0.01);
      assertNotNull(quaternion4);
      
      quaternion4.z = Double.NaN;
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion2.z(), 0.01);
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Double.NaN, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertEquals(Double.NaN, quaternion2.w(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(Double.NaN, quaternion3.z(), 0.01);
      assertEquals(Double.NaN, quaternion3.w(), 0.01);
      assertEquals(Double.NaN, quaternion3.y(), 0.01);
      assertEquals(Double.NaN, quaternion3.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion3.x(), 0.01);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Double.NaN, quaternion4.z(), 0.01);
      assertEquals(Double.NaN, quaternion4.w(), 0.01);
      assertEquals(Double.NaN, quaternion4.y(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion4.x(), 0.01);
      
      // Undeclared exception!
      try { 
        quaternion1.set(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.fromVectorFromNegativeZ((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion();
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.slerp((IQuaternion) quaternion1, 0.0, quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion2.mult((IQuaternion) quaternion0, quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertNotNull(quaternion3);
      
      long long0 = (-1920L);
      MockRandom mockRandom0 = new MockRandom((-1920L));
      assertNotNull(mockRandom0);
      
      Quaternion quaternion4 = quaternion2.randomize(mockRandom0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals((-0.525731119546863), quaternion1.x, 0.01);
      assertEquals(0.7236067937262773, quaternion1.y, 0.01);
      assertEquals((-0.2628655581413474), quaternion1.z, 0.01);
      assertEquals((-0.3618033946167675), quaternion1.w, 0.01);
      assertEquals((-0.3618033946167675), quaternion2.w, 0.01);
      assertEquals((-0.525731119546863), quaternion2.x, 0.01);
      assertEquals((-0.2628655581413474), quaternion2.z, 0.01);
      assertEquals(0.7236067937262773, quaternion2.y, 0.01);
      assertEquals(0.7236067937262773, quaternion4.y, 0.01);
      assertEquals((-0.3618033946167675), quaternion4.w, 0.01);
      assertEquals((-0.2628655581413474), quaternion4.z, 0.01);
      assertEquals((-0.525731119546863), quaternion4.x, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals((-0.525731119546863), quaternion1.x(), 0.01);
      assertEquals((-0.2628655581413474), quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.3618033946167675), quaternion1.w(), 0.01);
      assertEquals(0.7236067937262773, quaternion1.y(), 0.01);
      assertEquals((-1.8849555734285242), quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.3618033946167675), quaternion2.w(), 0.01);
      assertEquals((-1.8849555734285242), quaternion2.getRotationZ(), 0.01);
      assertEquals(0.7236067937262773, quaternion2.y(), 0.01);
      assertEquals((-0.2628655581413474), quaternion2.z(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.525731119546863), quaternion2.x(), 0.01);
      assertEquals((-1.8849555734285242), quaternion4.getRotationZ(), 0.01);
      assertEquals(0.7236067937262773, quaternion4.y(), 0.01);
      assertEquals((-0.525731119546863), quaternion4.x(), 0.01);
      assertEquals((-0.3618033946167675), quaternion4.w(), 0.01);
      assertEquals((-0.2628655581413474), quaternion4.z(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertNotNull(quaternion4);
      
      IVector3 iVector3_0 = null;
      // Undeclared exception!
      try { 
        quaternion4.fromVectorFromNegativeZ((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0, 0.0, 3.141592653589793, 0.0);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(3.141592653589793, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(3.141592653589793, quaternion0.z(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.integrate((IVector3) vector3_0, 0.0);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(3.141592653589793, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(1.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(3.141592653589793, quaternion0.z(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(1.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertNotNull(quaternion1);
      
      double double0 = quaternion0.w();
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(3.141592653589793, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(3.141592653589793, quaternion0.z(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = quaternion1.x();
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(3.141592653589793, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(1.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(3.141592653589793, quaternion0.z(), 0.01);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(1.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0, 0.0, 0.0, 1394.645738994);
      assertEquals(1394.645738994, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1394.645738994, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      
      Vector3 vector3_0 = new Vector3(1.0, 0.0, (-1647.246486));
      assertEquals((-1647.246486), vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1647.2467895368163, vector3_0.length(), 0.01);
      assertEquals(2713421.985639348, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals((-1647.246486), vector3_0.z(), 0.01);
      
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals((-20.305457923917896), quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(20.293142228348966, quaternion0.y, 0.01);
      assertEquals((-1647.246486), vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals((-20.305457923917896), quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(20.293142228348966, quaternion1.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertEquals(20.293142228348966, quaternion0.y(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals((-20.305457923917896), quaternion0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1647.2467895368163, vector3_0.length(), 0.01);
      assertEquals(2713421.985639348, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals((-1647.246486), vector3_0.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(20.293142228348966, quaternion1.y(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals((-20.305457923917896), quaternion1.x(), 0.01);
      
      quaternion1.w = 1394.645738994;
      assertEquals(1394.645738994, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertEquals(20.293142228348966, quaternion0.y(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals((-20.305457923917896), quaternion0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1647.2467895368163, vector3_0.length(), 0.01);
      assertEquals(2713421.985639348, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals((-1647.246486), vector3_0.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(20.293142228348966, quaternion1.y(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(1394.645738994, quaternion1.w(), 0.01);
      assertEquals((-20.305457923917896), quaternion1.x(), 0.01);
      
      Quaternion quaternion2 = quaternion1.integrate((IVector3) vector3_0, 0.0, quaternion0);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals((-1647.246486), vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1647.2467895368163, vector3_0.length(), 0.01);
      assertEquals(2713421.985639348, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals((-1647.246486), vector3_0.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.z(), 0.01);
      assertEquals(Double.NaN, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Double.NaN, quaternion2.w(), 0.01);
      
      Quaternion quaternion3 = quaternion2.invert();
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals((-1647.246486), vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1647.2467895368163, vector3_0.length(), 0.01);
      assertEquals(2713421.985639348, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals((-1647.246486), vector3_0.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.z(), 0.01);
      assertEquals(Double.NaN, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Double.NaN, quaternion2.w(), 0.01);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Double.NaN, quaternion3.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion3.z(), 0.01);
      assertEquals(Double.NaN, quaternion3.y(), 0.01);
      assertEquals(Double.NaN, quaternion3.x(), 0.01);
      assertEquals(Double.NaN, quaternion3.w(), 0.01);
      
      Quaternion quaternion4 = quaternion1.fromAngleAxis(2943.89066254, (IVector3) vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertEquals(0.9940465378193981, quaternion0.x, 0.01);
      assertEquals((-0.10895632450329756), quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals((-1637.4396663434698), quaternion0.z, 0.01);
      assertEquals((-1647.246486), vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals((-1637.4396663434698), quaternion1.z, 0.01);
      assertEquals(0.9940465378193981, quaternion1.x, 0.01);
      assertEquals((-0.10895632450329756), quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals((-0.10895632450329756), quaternion4.w, 0.01);
      assertEquals(0.9940465378193981, quaternion4.x, 0.01);
      assertEquals((-1637.4396663434698), quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion1);
      assertEquals(3.141526112912356, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals((-1637.4396663434698), quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.9940465378193981, quaternion0.x(), 0.01);
      assertEquals((-0.10895632450329756), quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1647.2467895368163, vector3_0.length(), 0.01);
      assertEquals(2713421.985639348, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals((-1647.246486), vector3_0.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141526112912356, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.9940465378193981, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals((-1637.4396663434698), quaternion1.z(), 0.01);
      assertEquals((-0.10895632450329756), quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals((-1637.4396663434698), quaternion4.z(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.10895632450329756), quaternion4.w(), 0.01);
      assertEquals(3.141526112912356, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.9940465378193981, quaternion4.x(), 0.01);
      
      quaternion2.getRotationZ();
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertEquals(0.9940465378193981, quaternion0.x, 0.01);
      assertEquals((-0.10895632450329756), quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals((-1637.4396663434698), quaternion0.z, 0.01);
      assertEquals((-1647.246486), vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals((-1637.4396663434698), quaternion1.z, 0.01);
      assertEquals(0.9940465378193981, quaternion1.x, 0.01);
      assertEquals((-0.10895632450329756), quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals((-0.10895632450329756), quaternion2.w, 0.01);
      assertEquals(0.9940465378193981, quaternion2.x, 0.01);
      assertEquals((-1637.4396663434698), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion1);
      assertEquals(3.141526112912356, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals((-1637.4396663434698), quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.9940465378193981, quaternion0.x(), 0.01);
      assertEquals((-0.10895632450329756), quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1647.2467895368163, vector3_0.length(), 0.01);
      assertEquals(2713421.985639348, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals((-1647.246486), vector3_0.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141526112912356, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.9940465378193981, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals((-1637.4396663434698), quaternion1.z(), 0.01);
      assertEquals((-0.10895632450329756), quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(3.141526112912356, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-1637.4396663434698), quaternion2.z(), 0.01);
      assertEquals(0.9940465378193981, quaternion2.x(), 0.01);
      assertEquals((-0.10895632450329756), quaternion2.w(), 0.01);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals((-1647.246486), vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1647.246486), vector3_1.z, 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1647.2467895368163, vector3_0.length(), 0.01);
      assertEquals(2713421.985639348, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals((-1647.246486), vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(2713421.985639348, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1647.2467895368163, vector3_1.length(), 0.01);
      assertEquals((-1647.246486), vector3_1.z(), 0.01);
      
      Quaternion quaternion5 = quaternion0.fromVectorFromNegativeZ(0.5014905741189534, 1.0, 0.0);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertEquals((-0.3169812690011291), quaternion0.y, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.6320782191330705, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.6320782191330705, quaternion5.x, 0.01);
      assertEquals(0.7071067811865476, quaternion5.w, 0.01);
      assertEquals((-0.3169812690011291), quaternion5.y, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion2);
      assertEquals((-0.3169812690011291), quaternion0.y(), 0.01);
      assertEquals((-0.4648393571758388), quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.6320782191330705, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertEquals(0.6320782191330705, quaternion5.x(), 0.01);
      assertEquals((-0.3169812690011291), quaternion5.y(), 0.01);
      assertEquals((-0.4648393571758388), quaternion5.getRotationZ(), 0.01);
      assertEquals(0.7071067811865476, quaternion5.w(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.z(), 0.01);
      
      Quaternion quaternion6 = quaternion5.invert();
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertEquals((-0.3169812690011291), quaternion0.y, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.6320782191330705, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.6320782191330705, quaternion5.x, 0.01);
      assertEquals(0.7071067811865476, quaternion5.w, 0.01);
      assertEquals((-0.3169812690011291), quaternion5.y, 0.01);
      assertEquals(0.7071067811865476, quaternion6.w, 0.01);
      assertEquals(-0.0, quaternion6.z, 0.01);
      assertEquals((-0.6320782191330705), quaternion6.x, 0.01);
      assertEquals(0.3169812690011291, quaternion6.y, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion4);
      assertEquals((-0.3169812690011291), quaternion0.y(), 0.01);
      assertEquals((-0.4648393571758388), quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.6320782191330705, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertEquals(0.6320782191330705, quaternion5.x(), 0.01);
      assertEquals((-0.3169812690011291), quaternion5.y(), 0.01);
      assertEquals((-0.4648393571758388), quaternion5.getRotationZ(), 0.01);
      assertEquals(0.7071067811865476, quaternion5.w(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals((-0.4648393571758388), quaternion6.getRotationZ(), 0.01);
      assertEquals(0.3169812690011291, quaternion6.y(), 0.01);
      assertEquals((-0.6320782191330705), quaternion6.x(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.7071067811865476, quaternion6.w(), 0.01);
      assertEquals(-0.0, quaternion6.z(), 0.01);
      
      quaternion5.x = Double.NaN;
      assertEquals((-0.3169812690011291), quaternion0.y(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion5.getRotationZ(), 0.01);
      assertTrue(quaternion5.hasNaN());
      assertEquals(Double.NaN, quaternion5.x(), 0.01);
      assertEquals((-0.3169812690011291), quaternion5.y(), 0.01);
      assertEquals(0.7071067811865476, quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      
      Quaternion quaternion7 = quaternion4.integrateLocal(vector3_1, Double.NaN);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals((-1647.246486), vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1647.246486), vector3_1.z, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion7);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1647.2467895368163, vector3_0.length(), 0.01);
      assertEquals(2713421.985639348, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals((-1647.246486), vector3_0.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.z(), 0.01);
      assertEquals(Double.NaN, quaternion4.w(), 0.01);
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion4.y(), 0.01);
      assertEquals(Double.NaN, quaternion4.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(2713421.985639348, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1647.2467895368163, vector3_1.length(), 0.01);
      assertEquals((-1647.246486), vector3_1.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.x(), 0.01);
      assertEquals(Double.NaN, quaternion7.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion7.w(), 0.01);
      assertTrue(quaternion7.hasNaN());
      assertEquals(Double.NaN, quaternion7.y(), 0.01);
      
      Vector3 vector3_2 = (Vector3)Vector3.ZERO;
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      
      Vector3 vector3_3 = quaternion7.transform((IVector3) vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals((-1647.246486), vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1647.246486), vector3_1.z, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_3.z, 0.01);
      assertEquals(Double.NaN, vector3_3.y, 0.01);
      assertEquals(Double.NaN, vector3_3.x, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion7);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1647.2467895368163, vector3_0.length(), 0.01);
      assertEquals(2713421.985639348, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals((-1647.246486), vector3_0.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.z(), 0.01);
      assertEquals(Double.NaN, quaternion4.w(), 0.01);
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion4.y(), 0.01);
      assertEquals(Double.NaN, quaternion4.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(2713421.985639348, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1647.2467895368163, vector3_1.length(), 0.01);
      assertEquals((-1647.246486), vector3_1.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.x(), 0.01);
      assertEquals(Double.NaN, quaternion7.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion7.w(), 0.01);
      assertTrue(quaternion7.hasNaN());
      assertEquals(Double.NaN, quaternion7.y(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_3.x(), 0.01);
      assertEquals(Double.NaN, vector3_3.z(), 0.01);
      assertEquals(Double.NaN, vector3_3.y(), 0.01);
      assertEquals(Double.NaN, vector3_3.length(), 0.01);
      assertEquals(Double.NaN, vector3_3.lengthSquared(), 0.01);
      
      Quaternion quaternion8 = quaternion1.fromAngles(vector3_3);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals((-1647.246486), vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1647.246486), vector3_1.z, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_3.z, 0.01);
      assertEquals(Double.NaN, vector3_3.y, 0.01);
      assertEquals(Double.NaN, vector3_3.x, 0.01);
      assertEquals(Double.NaN, quaternion8.w, 0.01);
      assertEquals(Double.NaN, quaternion8.y, 0.01);
      assertEquals(Double.NaN, quaternion8.x, 0.01);
      assertEquals(Double.NaN, quaternion8.z, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion7);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_3);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertSame(quaternion8, quaternion5);
      assertSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion3);
      assertSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion7);
      assertSame(quaternion8, quaternion0);
      assertSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion6);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1647.2467895368163, vector3_0.length(), 0.01);
      assertEquals(2713421.985639348, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals((-1647.246486), vector3_0.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.z(), 0.01);
      assertEquals(Double.NaN, quaternion4.w(), 0.01);
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion4.y(), 0.01);
      assertEquals(Double.NaN, quaternion4.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(2713421.985639348, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1647.2467895368163, vector3_1.length(), 0.01);
      assertEquals((-1647.246486), vector3_1.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.x(), 0.01);
      assertEquals(Double.NaN, quaternion7.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion7.w(), 0.01);
      assertTrue(quaternion7.hasNaN());
      assertEquals(Double.NaN, quaternion7.y(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_3.x(), 0.01);
      assertEquals(Double.NaN, vector3_3.z(), 0.01);
      assertEquals(Double.NaN, vector3_3.y(), 0.01);
      assertEquals(Double.NaN, vector3_3.length(), 0.01);
      assertEquals(Double.NaN, vector3_3.lengthSquared(), 0.01);
      assertEquals(Double.NaN, quaternion8.z(), 0.01);
      assertTrue(quaternion8.hasNaN());
      assertEquals(Double.NaN, quaternion8.w(), 0.01);
      assertEquals(Double.NaN, quaternion8.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion8.x(), 0.01);
      assertEquals(Double.NaN, quaternion8.y(), 0.01);
      
      Vector3 vector3_4 = quaternion7.transform((IVector3) vector3_2, vector3_0);
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(Double.NaN, vector3_4.z, 0.01);
      assertEquals(Double.NaN, vector3_4.y, 0.01);
      assertEquals(Double.NaN, vector3_4.x, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1647.246486), vector3_1.z, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion7);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertEquals(Double.NaN, vector3_4.x(), 0.01);
      assertEquals(Double.NaN, vector3_4.y(), 0.01);
      assertEquals(Double.NaN, vector3_4.z(), 0.01);
      assertEquals(Double.NaN, vector3_4.length(), 0.01);
      assertEquals(Double.NaN, vector3_4.lengthSquared(), 0.01);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, vector3_0.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_0.length(), 0.01);
      assertEquals(Double.NaN, vector3_0.y(), 0.01);
      assertEquals(Double.NaN, vector3_0.z(), 0.01);
      assertEquals(Double.NaN, vector3_0.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.z(), 0.01);
      assertEquals(Double.NaN, quaternion4.w(), 0.01);
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion4.y(), 0.01);
      assertEquals(Double.NaN, quaternion4.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(2713421.985639348, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1647.2467895368163, vector3_1.length(), 0.01);
      assertEquals((-1647.246486), vector3_1.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.x(), 0.01);
      assertEquals(Double.NaN, quaternion7.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion7.w(), 0.01);
      assertTrue(quaternion7.hasNaN());
      assertEquals(Double.NaN, quaternion7.y(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      
      Vector3 vector3_5 = quaternion7.transformUnitX(vector3_4);
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertEquals(Double.NaN, vector3_4.z, 0.01);
      assertEquals(Double.NaN, vector3_4.y, 0.01);
      assertEquals(Double.NaN, vector3_4.x, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, vector3_5.x, 0.01);
      assertEquals(Double.NaN, vector3_5.y, 0.01);
      assertEquals(Double.NaN, vector3_5.z, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1647.246486), vector3_1.z, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion7);
      assertSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_2);
      assertSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_3);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertEquals(Double.NaN, vector3_4.x(), 0.01);
      assertEquals(Double.NaN, vector3_4.y(), 0.01);
      assertEquals(Double.NaN, vector3_4.z(), 0.01);
      assertEquals(Double.NaN, vector3_4.length(), 0.01);
      assertEquals(Double.NaN, vector3_4.lengthSquared(), 0.01);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, vector3_5.z(), 0.01);
      assertEquals(Double.NaN, vector3_5.y(), 0.01);
      assertEquals(Double.NaN, vector3_5.x(), 0.01);
      assertEquals(Double.NaN, vector3_5.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_5.length(), 0.01);
      assertEquals(Double.NaN, vector3_0.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_0.length(), 0.01);
      assertEquals(Double.NaN, vector3_0.y(), 0.01);
      assertEquals(Double.NaN, vector3_0.z(), 0.01);
      assertEquals(Double.NaN, vector3_0.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.z(), 0.01);
      assertEquals(Double.NaN, quaternion4.w(), 0.01);
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion4.y(), 0.01);
      assertEquals(Double.NaN, quaternion4.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(2713421.985639348, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1647.2467895368163, vector3_1.length(), 0.01);
      assertEquals((-1647.246486), vector3_1.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.x(), 0.01);
      assertEquals(Double.NaN, quaternion7.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion7.w(), 0.01);
      assertTrue(quaternion7.hasNaN());
      assertEquals(Double.NaN, quaternion7.y(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      
      quaternion4.equals(quaternion7);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1647.246486), vector3_1.z, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion7);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, vector3_0.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_0.length(), 0.01);
      assertEquals(Double.NaN, vector3_0.y(), 0.01);
      assertEquals(Double.NaN, vector3_0.z(), 0.01);
      assertEquals(Double.NaN, vector3_0.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.z(), 0.01);
      assertEquals(Double.NaN, quaternion4.w(), 0.01);
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion4.y(), 0.01);
      assertEquals(Double.NaN, quaternion4.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(2713421.985639348, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1647.2467895368163, vector3_1.length(), 0.01);
      assertEquals((-1647.246486), vector3_1.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.x(), 0.01);
      assertEquals(Double.NaN, quaternion7.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion7.w(), 0.01);
      assertTrue(quaternion7.hasNaN());
      assertEquals(Double.NaN, quaternion7.y(), 0.01);
      
      Quaternion quaternion9 = quaternion4.fromAxes(vector3_2, vector3_4, vector3_3);
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(Double.NaN, vector3_4.z, 0.01);
      assertEquals(Double.NaN, vector3_4.y, 0.01);
      assertEquals(Double.NaN, vector3_4.x, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion9.y, 0.01);
      assertEquals(Double.NaN, quaternion9.w, 0.01);
      assertEquals(Double.NaN, quaternion9.z, 0.01);
      assertEquals(Double.NaN, quaternion9.x, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1647.246486), vector3_1.z, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_3.z, 0.01);
      assertEquals(Double.NaN, vector3_3.y, 0.01);
      assertEquals(Double.NaN, vector3_3.x, 0.01);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion7);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion1);
      assertSame(quaternion9, quaternion7);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion6);
      assertSame(quaternion9, quaternion2);
      assertSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion4);
      assertNotSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertEquals(Double.NaN, vector3_4.x(), 0.01);
      assertEquals(Double.NaN, vector3_4.y(), 0.01);
      assertEquals(Double.NaN, vector3_4.z(), 0.01);
      assertEquals(Double.NaN, vector3_4.length(), 0.01);
      assertEquals(Double.NaN, vector3_4.lengthSquared(), 0.01);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, vector3_0.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_0.length(), 0.01);
      assertEquals(Double.NaN, vector3_0.y(), 0.01);
      assertEquals(Double.NaN, vector3_0.z(), 0.01);
      assertEquals(Double.NaN, vector3_0.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      
      Quaternion quaternion10 = quaternion3.normalizeLocal();
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion10.w, 0.01);
      assertEquals(Double.NaN, quaternion10.y, 0.01);
      assertEquals(Double.NaN, quaternion10.x, 0.01);
      assertEquals(Double.NaN, quaternion10.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion7);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion10, quaternion5);
      assertSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion2);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion10);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion7);
      assertNotSame(quaternion3, quaternion9);
      assertSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      
      Quaternion quaternion11 = quaternion9.normalize();
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion10));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(Double.NaN, vector3_4.z, 0.01);
      assertEquals(Double.NaN, vector3_4.y, 0.01);
      assertEquals(Double.NaN, vector3_4.x, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion9.y, 0.01);
      assertEquals(Double.NaN, quaternion9.w, 0.01);
      assertEquals(Double.NaN, quaternion9.z, 0.01);
      assertEquals(Double.NaN, quaternion9.x, 0.01);
      assertEquals(Double.NaN, quaternion11.x, 0.01);
      assertEquals(Double.NaN, quaternion11.y, 0.01);
      assertEquals(Double.NaN, quaternion11.w, 0.01);
      assertEquals(Double.NaN, quaternion11.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1647.246486), vector3_1.z, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_3.z, 0.01);
      assertEquals(Double.NaN, vector3_3.y, 0.01);
      assertEquals(Double.NaN, vector3_3.x, 0.01);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion7);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion10);
      assertSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion1);
      assertSame(quaternion9, quaternion7);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion11);
      assertNotSame(quaternion9, quaternion10);
      assertSame(quaternion9, quaternion2);
      assertSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion4);
      assertNotSame(quaternion11, quaternion1);
      assertNotSame(quaternion11, quaternion7);
      assertNotSame(quaternion11, quaternion5);
      assertNotSame(quaternion11, quaternion2);
      assertNotSame(quaternion11, quaternion3);
      assertNotSame(quaternion11, quaternion6);
      assertNotSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion9);
      assertNotSame(quaternion11, quaternion0);
      assertNotSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion4);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion10);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion10);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion11);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      
      Vector3 vector3_6 = quaternion11.transformScaleAndAdd(vector3_3, Double.NaN, vector3_3, vector3_5);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion11));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion10));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion11));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion11));
      assertFalse(quaternion9.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1647.246486), vector3_1.z, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_3.z, 0.01);
      assertEquals(Double.NaN, vector3_3.y, 0.01);
      assertEquals(Double.NaN, vector3_3.x, 0.01);
      assertEquals(Double.NaN, vector3_4.z, 0.01);
      assertEquals(Double.NaN, vector3_4.y, 0.01);
      assertEquals(Double.NaN, vector3_4.x, 0.01);
      assertEquals(Double.NaN, vector3_5.x, 0.01);
      assertEquals(Double.NaN, vector3_5.y, 0.01);
      assertEquals(Double.NaN, vector3_5.z, 0.01);
      assertEquals(Double.NaN, quaternion9.y, 0.01);
      assertEquals(Double.NaN, quaternion9.w, 0.01);
      assertEquals(Double.NaN, quaternion9.z, 0.01);
      assertEquals(Double.NaN, quaternion9.x, 0.01);
      assertEquals(Double.NaN, quaternion11.x, 0.01);
      assertEquals(Double.NaN, quaternion11.y, 0.01);
      assertEquals(Double.NaN, quaternion11.w, 0.01);
      assertEquals(Double.NaN, quaternion11.z, 0.01);
      assertEquals(Double.NaN, vector3_6.z, 0.01);
      assertEquals(Double.NaN, vector3_6.x, 0.01);
      assertEquals(Double.NaN, vector3_6.y, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion7);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_6);
      assertSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion10);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_3);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion10);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion11);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_4, vector3_5);
      assertSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_0);
      assertSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_2);
      assertSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_0);
      assertSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion1);
      assertSame(quaternion9, quaternion7);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion11);
      assertNotSame(quaternion9, quaternion10);
      assertSame(quaternion9, quaternion2);
      assertSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion4);
      assertNotSame(quaternion11, quaternion1);
      assertNotSame(quaternion11, quaternion7);
      assertNotSame(quaternion11, quaternion5);
      assertNotSame(quaternion11, quaternion2);
      assertNotSame(quaternion11, quaternion3);
      assertNotSame(quaternion11, quaternion6);
      assertNotSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion9);
      assertNotSame(quaternion11, quaternion0);
      assertNotSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion4);
      assertSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_2);
      assertSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_1);
      assertSame(vector3_6, vector3_4);
      
      Quaternion quaternion12 = quaternion11.fromAnglesXY(Double.NaN, Double.NaN);
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion11));
      assertFalse(quaternion9.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion11));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion12.equals((Object)quaternion10));
      assertFalse(quaternion12.equals((Object)quaternion6));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion9));
      assertFalse(quaternion12.equals((Object)quaternion0));
      assertFalse(quaternion12.equals((Object)quaternion4));
      assertFalse(quaternion12.equals((Object)quaternion8));
      assertFalse(quaternion12.equals((Object)quaternion7));
      assertFalse(quaternion12.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion1));
      assertFalse(quaternion12.equals((Object)quaternion3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion10));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion11));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_6));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(Double.NaN, vector3_4.z, 0.01);
      assertEquals(Double.NaN, vector3_4.y, 0.01);
      assertEquals(Double.NaN, vector3_4.x, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion9.y, 0.01);
      assertEquals(Double.NaN, quaternion9.w, 0.01);
      assertEquals(Double.NaN, quaternion9.z, 0.01);
      assertEquals(Double.NaN, quaternion9.x, 0.01);
      assertEquals(Double.NaN, quaternion11.x, 0.01);
      assertEquals(Double.NaN, quaternion11.y, 0.01);
      assertEquals(Double.NaN, quaternion11.w, 0.01);
      assertEquals(Double.NaN, quaternion11.z, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion12.z, 0.01);
      assertEquals(Double.NaN, quaternion12.x, 0.01);
      assertEquals(Double.NaN, quaternion12.y, 0.01);
      assertEquals(Double.NaN, quaternion12.w, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1647.246486), vector3_1.z, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_3.z, 0.01);
      assertEquals(Double.NaN, vector3_3.y, 0.01);
      assertEquals(Double.NaN, vector3_3.x, 0.01);
      assertSame(vector3_4, vector3_5);
      assertSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_0);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_6);
      assertSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion12);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion10);
      assertSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion7);
      assertSame(quaternion9, quaternion1);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion12);
      assertNotSame(quaternion9, quaternion11);
      assertSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion10);
      assertSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion4);
      assertNotSame(quaternion11, quaternion7);
      assertNotSame(quaternion11, quaternion1);
      assertSame(quaternion11, quaternion12);
      assertNotSame(quaternion11, quaternion5);
      assertNotSame(quaternion11, quaternion2);
      assertNotSame(quaternion11, quaternion3);
      assertNotSame(quaternion11, quaternion6);
      assertNotSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion0);
      assertNotSame(quaternion11, quaternion9);
      assertNotSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion4);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion12);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion12, quaternion10);
      assertNotSame(quaternion12, quaternion6);
      assertNotSame(quaternion12, quaternion5);
      assertNotSame(quaternion12, quaternion9);
      assertNotSame(quaternion12, quaternion0);
      assertNotSame(quaternion12, quaternion4);
      assertNotSame(quaternion12, quaternion8);
      assertNotSame(quaternion12, quaternion7);
      assertSame(quaternion12, quaternion11);
      assertNotSame(quaternion12, quaternion2);
      assertNotSame(quaternion12, quaternion1);
      assertNotSame(quaternion12, quaternion3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_3);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion10);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion11);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion12);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_0);
      
      Vector3 vector3_7 = quaternion11.toAngles(vector3_5);
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion12));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion12));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion11));
      assertFalse(quaternion4.equals((Object)quaternion10));
      assertFalse(quaternion4.equals((Object)quaternion12));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion10));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion11));
      assertFalse(quaternion7.equals((Object)quaternion12));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_4));
      assertFalse(vector3_3.equals((Object)vector3_5));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_3.equals((Object)vector3_6));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion11));
      assertFalse(quaternion9.equals((Object)quaternion12));
      assertFalse(quaternion9.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion1));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion6));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_3));
      assertFalse(vector3_7.equals((Object)vector3_2));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(1.5707963267948966, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion4.w, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals((-1647.246486), vector3_1.z, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_3.z, 0.01);
      assertEquals(Double.NaN, vector3_3.y, 0.01);
      assertEquals(Double.NaN, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertEquals(1.5707963267948966, vector3_4.y, 0.01);
      assertEquals(Double.NaN, vector3_4.z, 0.01);
      assertEquals(Double.NaN, vector3_5.z, 0.01);
      assertEquals(0.0, vector3_5.x, 0.01);
      assertEquals(1.5707963267948966, vector3_5.y, 0.01);
      assertEquals(Double.NaN, quaternion9.y, 0.01);
      assertEquals(Double.NaN, quaternion9.w, 0.01);
      assertEquals(Double.NaN, quaternion9.z, 0.01);
      assertEquals(Double.NaN, quaternion9.x, 0.01);
      assertEquals(Double.NaN, quaternion11.x, 0.01);
      assertEquals(Double.NaN, quaternion11.y, 0.01);
      assertEquals(Double.NaN, quaternion11.w, 0.01);
      assertEquals(Double.NaN, quaternion11.z, 0.01);
      assertEquals(Double.NaN, vector3_7.z, 0.01);
      assertEquals(0.0, vector3_7.x, 0.01);
      assertEquals(1.5707963267948966, vector3_7.y, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion12);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_5);
      assertSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_6);
      assertSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion12);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion11);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion12);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion9);
      assertSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_3);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion10);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion11);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion12);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_3, vector3_7);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_4, vector3_5);
      assertSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_7);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_0);
      assertSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_2);
      assertSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_0);
      assertSame(vector3_5, vector3_7);
      assertSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion7);
      assertSame(quaternion9, quaternion1);
      assertSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion12);
      assertNotSame(quaternion9, quaternion11);
      assertSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion10);
      assertSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion4);
      assertNotSame(quaternion11, quaternion7);
      assertNotSame(quaternion11, quaternion1);
      assertSame(quaternion11, quaternion12);
      assertNotSame(quaternion11, quaternion5);
      assertNotSame(quaternion11, quaternion2);
      assertNotSame(quaternion11, quaternion3);
      assertNotSame(quaternion11, quaternion6);
      assertNotSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion0);
      assertNotSame(quaternion11, quaternion9);
      assertNotSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion4);
      assertSame(vector3_7, vector3_4);
      assertSame(vector3_7, vector3_6);
      assertNotSame(vector3_7, vector3_1);
      assertNotSame(vector3_7, vector3_3);
      assertSame(vector3_7, vector3_0);
      assertNotSame(vector3_7, vector3_2);
      assertSame(vector3_7, vector3_5);
      
      Quaternion quaternion13 = quaternion10.normalize();
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion12));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion12));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion10.equals((Object)quaternion5));
      assertFalse(quaternion10.equals((Object)quaternion11));
      assertFalse(quaternion10.equals((Object)quaternion12));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion5));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion4));
      assertFalse(quaternion13.equals((Object)quaternion0));
      assertFalse(quaternion13.equals((Object)quaternion8));
      assertFalse(quaternion13.equals((Object)quaternion5));
      assertFalse(quaternion13.equals((Object)quaternion2));
      assertFalse(quaternion13.equals((Object)quaternion10));
      assertFalse(quaternion13.equals((Object)quaternion3));
      assertFalse(quaternion13.equals((Object)quaternion12));
      assertFalse(quaternion13.equals((Object)quaternion4));
      assertFalse(quaternion13.equals((Object)quaternion9));
      assertFalse(quaternion13.equals((Object)quaternion7));
      assertFalse(quaternion13.equals((Object)quaternion1));
      assertFalse(quaternion13.equals((Object)quaternion11));
      assertFalse(quaternion13.equals((Object)quaternion6));
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(1.5707963267948966, vector3_0.y, 0.01);
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion10.w, 0.01);
      assertEquals(Double.NaN, quaternion10.y, 0.01);
      assertEquals(Double.NaN, quaternion10.x, 0.01);
      assertEquals(Double.NaN, quaternion10.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion13.w, 0.01);
      assertEquals(Double.NaN, quaternion13.z, 0.01);
      assertEquals(Double.NaN, quaternion13.y, 0.01);
      assertEquals(Double.NaN, quaternion13.x, 0.01);
      assertSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion12);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion13);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion11);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_0, vector3_5);
      assertSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_0, vector3_6);
      assertSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion11);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion12);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion13);
      assertNotSame(quaternion10, quaternion5);
      assertNotSame(quaternion10, quaternion12);
      assertNotSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion9);
      assertNotSame(quaternion10, quaternion13);
      assertNotSame(quaternion10, quaternion2);
      assertNotSame(quaternion10, quaternion11);
      assertSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion1);
      assertSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion2, quaternion11);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion12);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion13);
      assertSame(quaternion2, quaternion7);
      assertNotSame(quaternion3, quaternion13);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion9);
      assertSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion12);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion13, quaternion0);
      assertNotSame(quaternion13, quaternion8);
      assertNotSame(quaternion13, quaternion5);
      assertNotSame(quaternion13, quaternion2);
      assertNotSame(quaternion13, quaternion10);
      assertNotSame(quaternion13, quaternion3);
      assertNotSame(quaternion13, quaternion12);
      assertNotSame(quaternion13, quaternion4);
      assertNotSame(quaternion13, quaternion9);
      assertNotSame(quaternion13, quaternion7);
      assertNotSame(quaternion13, quaternion1);
      assertNotSame(quaternion13, quaternion11);
      assertNotSame(quaternion13, quaternion6);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.invertLocal();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertNotNull(quaternion1);
      
      // Undeclared exception!
      try { 
        quaternion0.integrate((IVector3) null, -0.0, quaternion1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      boolean boolean0 = quaternion0.equals((Object) null);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-910.0), (-910.0), 2162.4994, 0.0);
      assertEquals((-910.0), quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals((-910.0), quaternion0.x, 0.01);
      assertEquals(2162.4994, quaternion0.z, 0.01);
      assertEquals(2.9922719637520956, quaternion0.getRotationZ(), 0.01);
      assertEquals(2162.4994, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals((-910.0), quaternion0.x(), 0.01);
      assertEquals((-910.0), quaternion0.y(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.normalizeLocal();
      assertEquals(0.8593396329332222, quaternion0.z, 0.01);
      assertEquals((-0.3616181655214481), quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals((-0.3616181655214481), quaternion0.y, 0.01);
      assertEquals(0.8593396329332222, quaternion1.z, 0.01);
      assertEquals((-0.3616181655214481), quaternion1.x, 0.01);
      assertEquals((-0.3616181655214481), quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(2.8012157110730533, quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.3616181655214481), quaternion0.x(), 0.01);
      assertEquals((-0.3616181655214481), quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.8593396329332222, quaternion0.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.8593396329332222, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(2.8012157110730533, quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.3616181655214481), quaternion1.x(), 0.01);
      assertEquals((-0.3616181655214481), quaternion1.y(), 0.01);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion2 = quaternion1.fromAngleAxis(2058.218977, (IVector3) vector3_0);
      assertEquals((-3.306987422478252E38), quaternion0.y, 0.01);
      assertEquals((-3.306987422478252E38), quaternion0.z, 0.01);
      assertEquals((-3.306987422478252E38), quaternion0.x, 0.01);
      assertEquals(0.23565689971840523, quaternion0.w, 0.01);
      assertEquals((-3.306987422478252E38), quaternion1.y, 0.01);
      assertEquals(0.23565689971840523, quaternion1.w, 0.01);
      assertEquals((-3.306987422478252E38), quaternion1.z, 0.01);
      assertEquals((-3.306987422478252E38), quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals((-3.306987422478252E38), quaternion2.y, 0.01);
      assertEquals(0.23565689971840523, quaternion2.w, 0.01);
      assertEquals((-3.306987422478252E38), quaternion2.z, 0.01);
      assertEquals((-3.306987422478252E38), quaternion2.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertEquals((-3.306987422478252E38), quaternion0.x(), 0.01);
      assertEquals(2.677945044588987, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3.306987422478252E38), quaternion0.y(), 0.01);
      assertEquals(0.23565689971840523, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.306987422478252E38), quaternion0.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2.677945044588987, quaternion1.getRotationZ(), 0.01);
      assertEquals((-3.306987422478252E38), quaternion1.z(), 0.01);
      assertEquals((-3.306987422478252E38), quaternion1.x(), 0.01);
      assertEquals((-3.306987422478252E38), quaternion1.y(), 0.01);
      assertEquals(0.23565689971840523, quaternion1.w(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-3.306987422478252E38), quaternion2.y(), 0.01);
      assertEquals((-3.306987422478252E38), quaternion2.x(), 0.01);
      assertEquals(2.677945044588987, quaternion2.getRotationZ(), 0.01);
      assertEquals((-3.306987422478252E38), quaternion2.z(), 0.01);
      assertEquals(0.23565689971840523, quaternion2.w(), 0.01);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion0.fromAnglesXZ((-910.0), 0.0);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals((-0.5063396468349013), quaternion0.x, 0.01);
      assertEquals((-0.8623341359607118), quaternion0.w, 0.01);
      assertEquals((-0.5063396468349013), quaternion3.x, 0.01);
      assertEquals(-0.0, quaternion3.z, 0.01);
      assertEquals(-0.0, quaternion3.y, 0.01);
      assertEquals((-0.8623341359607118), quaternion3.w, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.8623341359607118), quaternion0.w(), 0.01);
      assertEquals((-0.5063396468349013), quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0, quaternion3.y(), 0.01);
      assertEquals((-0.8623341359607118), quaternion3.w(), 0.01);
      assertEquals((-0.5063396468349013), quaternion3.x(), 0.01);
      assertEquals(-0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion0.invertLocal();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.5063396468349013, quaternion0.x, 0.01);
      assertEquals((-0.8623341359607118), quaternion0.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.5063396468349013, quaternion4.x, 0.01);
      assertEquals((-0.8623341359607118), quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion0);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.8623341359607118), quaternion0.w(), 0.01);
      assertEquals(0.5063396468349013, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.5063396468349013, quaternion4.x(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.8623341359607118), quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertNotNull(quaternion4);
      
      double double0 = quaternion4.w();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.5063396468349013, quaternion0.x, 0.01);
      assertEquals((-0.8623341359607118), quaternion0.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.5063396468349013, quaternion4.x, 0.01);
      assertEquals((-0.8623341359607118), quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion0);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.8623341359607118), quaternion0.w(), 0.01);
      assertEquals(0.5063396468349013, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.5063396468349013, quaternion4.x(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.8623341359607118), quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals((-0.8623341359607118), double0, 0.01);
      
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = new Vector3(vector3_1);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = quaternion4.transform((IVector3) vector3_0, vector3_2);
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.5063396468349013, quaternion0.x, 0.01);
      assertEquals((-0.8623341359607118), quaternion0.w, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.5063396468349013, quaternion4.x, 0.01);
      assertEquals((-0.8623341359607118), quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(4.629569391818677E38, vector3_2.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_2.x, 0.01);
      assertEquals((-1.3135837746791873E38), vector3_2.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_3.x, 0.01);
      assertEquals((-1.3135837746791873E38), vector3_3.z, 0.01);
      assertEquals(4.629569391818677E38, vector3_3.y, 0.01);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion0);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.8623341359607118), quaternion0.w(), 0.01);
      assertEquals(0.5063396468349013, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.5063396468349013, quaternion4.x(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.8623341359607118), quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(4.629569391818677E38, vector3_2.y(), 0.01);
      assertEquals((-1.3135837746791873E38), vector3_2.z(), 0.01);
      assertEquals(3.473762263014717E77, vector3_2.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_2.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_2.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_3.x(), 0.01);
      assertEquals((-1.3135837746791873E38), vector3_3.z(), 0.01);
      assertEquals(4.629569391818677E38, vector3_3.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_3.length(), 0.01);
      assertEquals(3.473762263014717E77, vector3_3.lengthSquared(), 0.01);
      assertNotNull(vector3_3);
      
      Quaternion quaternion5 = quaternion4.normalizeLocal();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.5063396468349013, quaternion0.x, 0.01);
      assertEquals((-0.8623341359607118), quaternion0.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.5063396468349013, quaternion4.x, 0.01);
      assertEquals((-0.8623341359607118), quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(0.5063396468349013, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals((-0.8623341359607118), quaternion5.w, 0.01);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion2);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.8623341359607118), quaternion0.w(), 0.01);
      assertEquals(0.5063396468349013, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.5063396468349013, quaternion4.x(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.8623341359607118), quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-0.8623341359607118), quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertEquals(0.5063396468349013, quaternion5.x(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion4.mult((IQuaternion) quaternion0, quaternion1);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.48724032408621487, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals((-0.8732679237120532), quaternion0.x, 0.01);
      assertEquals(0.48724032408621487, quaternion1.w, 0.01);
      assertEquals((-0.8732679237120532), quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals((-0.8732679237120532), quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.48724032408621487, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertEquals(0.0, quaternion6.y, 0.01);
      assertEquals(0.48724032408621487, quaternion6.w, 0.01);
      assertEquals((-0.8732679237120532), quaternion6.x, 0.01);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion2);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.8732679237120532), quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.48724032408621487, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.48724032408621487, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals((-0.8732679237120532), quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals((-0.8732679237120532), quaternion4.x(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.48724032408621487, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(0.0, quaternion6.y(), 0.01);
      assertEquals((-0.8732679237120532), quaternion6.x(), 0.01);
      assertEquals(0.48724032408621487, quaternion6.w(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.0, quaternion6.getRotationZ(), 0.01);
      assertNotNull(quaternion6);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2058.218977;
      doubleArray0[3] = 0.0;
      // Undeclared exception!
      try { 
        DoubleBuffer.wrap(doubleArray0, (-994), 2689);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DoubleBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.transformUnitZ((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.7071067811865476, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(0.7071067811865476, quaternion1.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.7071067811865476, quaternion0.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      
      Quaternion quaternion1 = quaternion0.integrate((IVector3) vector3_0, 3.4028234663852886E38);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(5.877472104436075E-39, quaternion1.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      
      Vector3 vector3_1 = quaternion1.toAngles();
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(5.877472104436075E-39, quaternion1.w, 0.01);
      assertEquals(3.141592653589793, vector3_1.x, 0.01);
      assertEquals(3.141592653589793, vector3_1.z, 0.01);
      assertEquals(1.175494420887215E-38, vector3_1.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_1, vector3_0);
      
      Vector3 vector3_2 = new Vector3(3.4028234663852886E38, 4433.6518370002, 5.877472104436075E-39);
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertEquals(4433.6518370002, vector3_2.y, 0.01);
      assertEquals(5.877472104436075E-39, vector3_2.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_2.x, 0.01);
      
      Vector3 vector3_3 = quaternion1.transformUnitZ(vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(5.877472104436075E-39, quaternion1.w, 0.01);
      assertEquals((-1.0), vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(1.175494420887215E-38, vector3_2.x, 0.01);
      assertEquals(1.175494420887215E-38, vector3_3.x, 0.01);
      assertEquals((-1.0), vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      
      Quaternion quaternion2 = quaternion1.fromAxes(vector3_0, vector3_3, vector3_3);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.7071067811865476, quaternion1.y, 0.01);
      assertEquals((-1.0), vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(1.175494420887215E-38, vector3_2.x, 0.01);
      assertEquals(1.175494420887215E-38, vector3_3.x, 0.01);
      assertEquals((-1.0), vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.7071067811865476, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals((-0.7071067811865476), quaternion2.x, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      
      Vector3 vector3_4 = quaternion2.toAngles(vector3_3);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.7071067811865476, quaternion1.y, 0.01);
      assertEquals((-1.570796326794897), vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(3.141592653589793, vector3_2.x, 0.01);
      assertEquals((-1.570796326794897), vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(3.141592653589793, vector3_3.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.7071067811865476, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals((-0.7071067811865476), quaternion2.x, 0.01);
      assertEquals(3.141592653589793, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals((-1.570796326794897), vector3_4.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      
      Quaternion quaternion3 = new Quaternion(quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.7071067811865476, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion3.w, 0.01);
      assertEquals(0.7071067811865476, quaternion3.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      
      Quaternion quaternion4 = quaternion3.fromAxes(vector3_4, vector3_1, vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.7071067811865476, quaternion1.y, 0.01);
      assertEquals(3.141592653589793, vector3_1.x, 0.01);
      assertEquals(3.141592653589793, vector3_1.z, 0.01);
      assertEquals(1.175494420887215E-38, vector3_1.y, 0.01);
      assertEquals((-1.570796326794897), vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(3.141592653589793, vector3_2.x, 0.01);
      assertEquals((-1.570796326794897), vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(3.141592653589793, vector3_3.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.7071067811865476, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals((-0.7071067811865476), quaternion2.x, 0.01);
      assertEquals(3.141592653589793, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals((-1.570796326794897), vector3_4.z, 0.01);
      assertEquals(1.017545165286263, quaternion3.w, 0.01);
      assertEquals(1.017545165286263, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(1.017545165286263, quaternion4.w, 0.01);
      assertEquals(1.017545165286263, quaternion4.x, 0.01);
      assertEquals(Double.NaN, quaternion4.z, 0.01);
      assertEquals(Double.NaN, quaternion4.y, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      
      Vector3 vector3_5 = vector3_2.negate(vector3_3);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.7071067811865476, quaternion1.y, 0.01);
      assertEquals(1.570796326794897, vector3_2.z, 0.01);
      assertEquals(-0.0, vector3_2.y, 0.01);
      assertEquals((-3.141592653589793), vector3_2.x, 0.01);
      assertEquals(1.570796326794897, vector3_3.z, 0.01);
      assertEquals(-0.0, vector3_3.y, 0.01);
      assertEquals((-3.141592653589793), vector3_3.x, 0.01);
      assertEquals(-0.0, vector3_5.y, 0.01);
      assertEquals((-3.141592653589793), vector3_5.x, 0.01);
      assertEquals(1.570796326794897, vector3_5.z, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_0);
      assertSame(vector3_5, vector3_4);
      assertSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_2);
      
      Quaternion quaternion5 = quaternion2.integrate((IVector3) vector3_3, (-1180.6440419), quaternion3);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.7071067811865476, quaternion1.y, 0.01);
      assertEquals(1.570796326794897, vector3_2.z, 0.01);
      assertEquals(-0.0, vector3_2.y, 0.01);
      assertEquals((-3.141592653589793), vector3_2.x, 0.01);
      assertEquals(1.570796326794897, vector3_3.z, 0.01);
      assertEquals(-0.0, vector3_3.y, 0.01);
      assertEquals((-3.141592653589793), vector3_3.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.7071067811865476, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals((-0.7071067811865476), quaternion2.x, 0.01);
      assertEquals(0.6324554584786762, quaternion3.w, 0.01);
      assertEquals(0.6324554584786762, quaternion3.z, 0.01);
      assertEquals(0.31656875806404766, quaternion3.y, 0.01);
      assertEquals(0.31588670041462885, quaternion3.x, 0.01);
      assertEquals(0.6324554584786762, quaternion5.w, 0.01);
      assertEquals(0.31656875806404766, quaternion5.y, 0.01);
      assertEquals(0.6324554584786762, quaternion5.z, 0.01);
      assertEquals(0.31588670041462885, quaternion5.x, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion2);
      
      double double0 = quaternion1.x();
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.7071067811865476, quaternion1.y, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      
      Quaternion quaternion6 = quaternion2.fromAngles(0.0, -0.0, (-3.141592653589793));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(1.570796326794897, vector3_2.z, 0.01);
      assertEquals(-0.0, vector3_2.y, 0.01);
      assertEquals((-3.141592653589793), vector3_2.x, 0.01);
      assertEquals(1.570796326794897, vector3_3.z, 0.01);
      assertEquals(-0.0, vector3_3.y, 0.01);
      assertEquals((-3.141592653589793), vector3_3.x, 0.01);
      assertEquals((-1.0), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals((-1.0), quaternion6.z, 0.01);
      assertEquals(-0.0, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion6.w, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 3.4028234663852886E38;
      doubleArray0[2] = (-2365.224292);
      doubleArray0[3] = (-1010.2460403618);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.6324554584786762;
      Vector3 vector3_6 = vector3_3.set(doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793), 3.4028234663852886E38, (-2365.224292), (-1010.2460403618), (-1.0), (-1.0), 0.6324554584786762}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals((-2365.224292), vector3_2.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_2.y, 0.01);
      assertEquals((-3.141592653589793), vector3_2.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_3.y, 0.01);
      assertEquals((-3.141592653589793), vector3_3.x, 0.01);
      assertEquals((-2365.224292), vector3_3.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_6.y, 0.01);
      assertEquals((-3.141592653589793), vector3_6.x, 0.01);
      assertEquals((-2365.224292), vector3_6.z, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_1);
      assertSame(vector3_6, vector3_5);
      assertSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_0);
      assertSame(vector3_6, vector3_4);
      
      Vector3 vector3_7 = quaternion6.toAngles(vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals((-3.141592653589793), vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals((-3.141592653589793), vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals((-1.0), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(0.0, vector3_7.y, 0.01);
      assertEquals(0.0, vector3_7.x, 0.01);
      assertEquals((-3.141592653589793), vector3_7.z, 0.01);
      assertEquals((-1.0), quaternion6.z, 0.01);
      assertEquals(-0.0, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion6.w, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion6);
      assertNotSame(vector3_7, vector3_1);
      assertSame(vector3_7, vector3_6);
      assertSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_0);
      assertSame(vector3_7, vector3_4);
      assertSame(vector3_7, vector3_3);
      assertSame(vector3_7, vector3_5);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion2);
      
      Quaternion quaternion7 = quaternion3.normalize();
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertTrue(quaternion7.equals((Object)quaternion4));
      assertTrue(quaternion7.equals((Object)quaternion5));
      assertTrue(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(0.31656875806404766, quaternion7.y, 0.01);
      assertEquals(0.6324554584786762, quaternion7.w, 0.01);
      assertEquals(0.6324554584786762, quaternion7.z, 0.01);
      assertEquals(0.31588670041462885, quaternion7.x, 0.01);
      assertEquals(0.6324554584786762, quaternion3.w, 0.01);
      assertEquals(0.6324554584786762, quaternion3.z, 0.01);
      assertEquals(0.31656875806404766, quaternion3.y, 0.01);
      assertEquals(0.31588670041462885, quaternion3.x, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion1);
      
      Quaternion quaternion8 = quaternion7.invertLocal();
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals((-0.31656875806404766), quaternion7.y, 0.01);
      assertEquals(0.6324554584786762, quaternion7.w, 0.01);
      assertEquals((-0.6324554584786762), quaternion7.z, 0.01);
      assertEquals((-0.31588670041462885), quaternion7.x, 0.01);
      assertEquals(0.6324554584786762, quaternion3.w, 0.01);
      assertEquals(0.6324554584786762, quaternion3.z, 0.01);
      assertEquals(0.31656875806404766, quaternion3.y, 0.01);
      assertEquals(0.31588670041462885, quaternion3.x, 0.01);
      assertEquals((-0.6324554584786762), quaternion8.z, 0.01);
      assertEquals((-0.31588670041462885), quaternion8.x, 0.01);
      assertEquals(0.6324554584786762, quaternion8.w, 0.01);
      assertEquals((-0.31656875806404766), quaternion8.y, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion4);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion1);
      
      Quaternion quaternion9 = quaternion7.fromVectorFromNegativeZ((IVector3) vector3_5);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals((-3.141592653589793), vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals((-3.141592653589793), vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(0.6324554584786762, quaternion3.w, 0.01);
      assertEquals(0.6324554584786762, quaternion3.z, 0.01);
      assertEquals(0.31656875806404766, quaternion3.y, 0.01);
      assertEquals(0.31588670041462885, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion9.x, 0.01);
      assertEquals(Double.NaN, quaternion9.y, 0.01);
      assertEquals(Double.NaN, quaternion9.z, 0.01);
      assertEquals(Double.NaN, quaternion9.w, 0.01);
      assertEquals(0.0, vector3_5.x, 0.01);
      assertEquals(0.0, vector3_5.y, 0.01);
      assertEquals((-3.141592653589793), vector3_5.z, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion9);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion2);
      assertSame(quaternion9, quaternion7);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion8);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_6);
      assertNotSame(vector3_5, vector3_0);
      assertSame(vector3_5, vector3_4);
      assertSame(vector3_5, vector3_7);
      assertSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_2);
      
      Quaternion quaternion10 = quaternion5.fromVectorFromNegativeZ(0.0, (-3.141592653589793), 0.0);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion1));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion0));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals((-3.141592653589793), vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals((-3.141592653589793), vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals((-1.0), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(-0.0, quaternion3.y, 0.01);
      assertEquals((-0.7071067811865475), quaternion3.x, 0.01);
      assertEquals(0.7071067811865476, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(-0.0, quaternion10.y, 0.01);
      assertEquals(0.0, quaternion10.z, 0.01);
      assertEquals(0.7071067811865476, quaternion10.w, 0.01);
      assertEquals((-0.7071067811865475), quaternion10.x, 0.01);
      assertEquals(-0.0, quaternion5.y, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals((-0.7071067811865475), quaternion5.x, 0.01);
      assertEquals(0.7071067811865476, quaternion5.w, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion10, quaternion7);
      assertNotSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion6);
      assertNotSame(quaternion10, quaternion0);
      assertNotSame(quaternion10, quaternion9);
      assertSame(quaternion10, quaternion4);
      assertSame(quaternion10, quaternion5);
      assertSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion2);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion8);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion10);
      assertNotSame(quaternion5, quaternion9);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion7);
      
      Vector3 vector3_8 = quaternion3.transformScaleAndAdd(vector3_1, (-2404.4587), vector3_0, vector3_4);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_7));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(vector3_8.equals((Object)vector3_1));
      assertFalse(vector3_8.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(3.141592653589793, vector3_1.x, 0.01);
      assertEquals(3.141592653589793, vector3_1.z, 0.01);
      assertEquals(1.175494420887215E-38, vector3_1.y, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_2.z, 0.01);
      assertEquals((-7553.829787780065), vector3_2.x, 0.01);
      assertEquals((-7552.829787780065), vector3_2.y, 0.01);
      assertEquals((-7553.829787780065), vector3_3.x, 0.01);
      assertEquals((-7552.829787780065), vector3_3.y, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_3.z, 0.01);
      assertEquals((-1.0), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_4.z, 0.01);
      assertEquals((-7552.829787780065), vector3_4.y, 0.01);
      assertEquals((-7553.829787780065), vector3_4.x, 0.01);
      assertEquals(-0.0, quaternion3.y, 0.01);
      assertEquals((-0.7071067811865475), quaternion3.x, 0.01);
      assertEquals(0.7071067811865476, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals((-7553.829787780065), vector3_8.x, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_8.z, 0.01);
      assertEquals((-7552.829787780065), vector3_8.y, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_6);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_8);
      assertSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_8);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion6);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_7);
      assertSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_8);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_6);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertSame(vector3_8, vector3_3);
      assertSame(vector3_8, vector3_6);
      assertNotSame(vector3_8, vector3_1);
      assertSame(vector3_8, vector3_4);
      assertSame(vector3_8, vector3_2);
      assertNotSame(vector3_8, vector3_0);
      assertSame(vector3_8, vector3_5);
      assertSame(vector3_8, vector3_7);
      
      Quaternion quaternion11 = quaternion2.integrate((IVector3) vector3_2, 0.0);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion3));
      assertFalse(quaternion11.equals((Object)quaternion4));
      assertFalse(quaternion11.equals((Object)quaternion7));
      assertFalse(quaternion11.equals((Object)quaternion8));
      assertTrue(quaternion11.equals((Object)quaternion2));
      assertFalse(quaternion11.equals((Object)quaternion5));
      assertFalse(quaternion11.equals((Object)quaternion9));
      assertFalse(quaternion11.equals((Object)quaternion0));
      assertFalse(quaternion11.equals((Object)quaternion10));
      assertTrue(quaternion11.equals((Object)quaternion1));
      assertTrue(quaternion11.equals((Object)quaternion6));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_2.z, 0.01);
      assertEquals((-7553.829787780065), vector3_2.x, 0.01);
      assertEquals((-7552.829787780065), vector3_2.y, 0.01);
      assertEquals((-7553.829787780065), vector3_3.x, 0.01);
      assertEquals((-7552.829787780065), vector3_3.y, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_3.z, 0.01);
      assertEquals((-1.0), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(-0.0, quaternion11.y, 0.01);
      assertEquals(0.0, quaternion11.x, 0.01);
      assertEquals((-1.0), quaternion11.z, 0.01);
      assertEquals(6.123233995736766E-17, quaternion11.w, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_8);
      assertSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_8);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion6);
      assertNotSame(quaternion11, quaternion3);
      assertNotSame(quaternion11, quaternion4);
      assertNotSame(quaternion11, quaternion7);
      assertNotSame(quaternion11, quaternion8);
      assertNotSame(quaternion11, quaternion1);
      assertNotSame(quaternion11, quaternion5);
      assertNotSame(quaternion11, quaternion6);
      assertNotSame(quaternion11, quaternion9);
      assertNotSame(quaternion11, quaternion0);
      assertNotSame(quaternion11, quaternion10);
      assertNotSame(quaternion11, quaternion2);
      
      Vector3 vector3_9 = quaternion6.transform((IVector3) vector3_7);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion11));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertFalse(quaternion2.equals((Object)quaternion7));
      assertTrue(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion8));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertFalse(quaternion6.equals((Object)quaternion10));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertTrue(quaternion6.equals((Object)quaternion11));
      assertFalse(quaternion6.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion9));
      assertFalse(vector3_9.equals((Object)vector3_6));
      assertFalse(vector3_9.equals((Object)vector3_7));
      assertFalse(vector3_9.equals((Object)vector3_4));
      assertFalse(vector3_9.equals((Object)vector3_1));
      assertFalse(vector3_9.equals((Object)vector3_2));
      assertFalse(vector3_9.equals((Object)vector3_8));
      assertFalse(vector3_9.equals((Object)vector3_0));
      assertFalse(vector3_9.equals((Object)vector3_5));
      assertFalse(vector3_9.equals((Object)vector3_3));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_2.z, 0.01);
      assertEquals((-7553.829787780065), vector3_2.x, 0.01);
      assertEquals((-7552.829787780065), vector3_2.y, 0.01);
      assertEquals((-7553.829787780065), vector3_3.x, 0.01);
      assertEquals((-7552.829787780065), vector3_3.y, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_3.z, 0.01);
      assertEquals((-1.0), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_7.z, 0.01);
      assertEquals((-7553.829787780065), vector3_7.x, 0.01);
      assertEquals((-7552.829787780065), vector3_7.y, 0.01);
      assertEquals((-1.0), quaternion6.z, 0.01);
      assertEquals(-0.0, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion6.w, 0.01);
      assertEquals(7552.829787780066, vector3_9.y, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_9.z, 0.01);
      assertEquals(7553.829787780064, vector3_9.x, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_9);
      assertSame(vector3_2, vector3_8);
      assertSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_8);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_9);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion6);
      assertNotSame(vector3_7, vector3_1);
      assertSame(vector3_7, vector3_6);
      assertSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_0);
      assertSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_9);
      assertSame(vector3_7, vector3_3);
      assertSame(vector3_7, vector3_8);
      assertSame(vector3_7, vector3_5);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion10);
      assertNotSame(quaternion6, quaternion11);
      assertSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion9);
      assertNotSame(vector3_9, vector3_6);
      assertNotSame(vector3_9, vector3_7);
      assertNotSame(vector3_9, vector3_4);
      assertNotSame(vector3_9, vector3_1);
      assertNotSame(vector3_9, vector3_2);
      assertNotSame(vector3_9, vector3_8);
      assertNotSame(vector3_9, vector3_0);
      assertNotSame(vector3_9, vector3_5);
      assertNotSame(vector3_9, vector3_3);
      
      Quaternion quaternion12 = quaternion2.integrate((IVector3) vector3_9, 0.0, quaternion7);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion11));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(vector3_2.equals((Object)vector3_9));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_9));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertTrue(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertTrue(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion8));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_9));
      assertTrue(quaternion7.equals((Object)quaternion11));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertTrue(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion10));
      assertTrue(quaternion7.equals((Object)quaternion1));
      assertTrue(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion10));
      assertTrue(quaternion6.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertTrue(quaternion6.equals((Object)quaternion9));
      assertTrue(quaternion6.equals((Object)quaternion7));
      assertTrue(quaternion6.equals((Object)quaternion11));
      assertFalse(vector3_9.equals((Object)vector3_6));
      assertFalse(vector3_9.equals((Object)vector3_7));
      assertFalse(vector3_9.equals((Object)vector3_4));
      assertFalse(vector3_9.equals((Object)vector3_1));
      assertFalse(vector3_9.equals((Object)vector3_2));
      assertFalse(vector3_9.equals((Object)vector3_8));
      assertFalse(vector3_9.equals((Object)vector3_0));
      assertFalse(vector3_9.equals((Object)vector3_5));
      assertFalse(vector3_9.equals((Object)vector3_3));
      assertFalse(quaternion12.equals((Object)quaternion4));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion3));
      assertTrue(quaternion12.equals((Object)quaternion11));
      assertTrue(quaternion12.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion0));
      assertFalse(quaternion12.equals((Object)quaternion10));
      assertTrue(quaternion12.equals((Object)quaternion6));
      assertTrue(quaternion12.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_2.z, 0.01);
      assertEquals((-7553.829787780065), vector3_2.x, 0.01);
      assertEquals((-7552.829787780065), vector3_2.y, 0.01);
      assertEquals((-7553.829787780065), vector3_3.x, 0.01);
      assertEquals((-7552.829787780065), vector3_3.y, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_3.z, 0.01);
      assertEquals((-1.0), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_7.z, 0.01);
      assertEquals((-7553.829787780065), vector3_7.x, 0.01);
      assertEquals((-7552.829787780065), vector3_7.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion7.w, 0.01);
      assertEquals((-1.0), quaternion7.z, 0.01);
      assertEquals(0.0, quaternion7.x, 0.01);
      assertEquals(0.0, quaternion7.y, 0.01);
      assertEquals(-0.0, quaternion3.y, 0.01);
      assertEquals((-0.7071067811865475), quaternion3.x, 0.01);
      assertEquals(0.7071067811865476, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals((-1.0), quaternion6.z, 0.01);
      assertEquals(-0.0, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion6.w, 0.01);
      assertEquals(7552.829787780066, vector3_9.y, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_9.z, 0.01);
      assertEquals(7553.829787780064, vector3_9.x, 0.01);
      assertEquals((-1.0), quaternion12.z, 0.01);
      assertEquals(0.0, quaternion12.y, 0.01);
      assertEquals(0.0, quaternion12.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion12.w, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion12);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_9);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion12);
      assertNotSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion11);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_9);
      assertSame(vector3_2, vector3_8);
      assertSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_7);
      assertSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_6);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_7);
      assertSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_8);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_9);
      assertNotSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion12);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion9);
      assertNotSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion11);
      assertNotSame(quaternion2, quaternion10);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion6);
      assertNotSame(vector3_7, vector3_1);
      assertSame(vector3_7, vector3_6);
      assertSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_0);
      assertSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_9);
      assertSame(vector3_7, vector3_3);
      assertSame(vector3_7, vector3_8);
      assertSame(vector3_7, vector3_5);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion9);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion11);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion10);
      assertSame(quaternion7, quaternion12);
      assertNotSame(quaternion3, quaternion7);
      assertNotSame(quaternion3, quaternion11);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion10);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion9);
      assertNotSame(quaternion3, quaternion12);
      assertNotSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion10);
      assertNotSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion11);
      assertSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion12);
      assertSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion9);
      assertNotSame(quaternion6, quaternion8);
      assertNotSame(vector3_9, vector3_6);
      assertNotSame(vector3_9, vector3_7);
      assertNotSame(vector3_9, vector3_4);
      assertNotSame(vector3_9, vector3_1);
      assertNotSame(vector3_9, vector3_2);
      assertNotSame(vector3_9, vector3_8);
      assertNotSame(vector3_9, vector3_0);
      assertNotSame(vector3_9, vector3_5);
      assertNotSame(vector3_9, vector3_3);
      assertNotSame(quaternion12, quaternion6);
      assertNotSame(quaternion12, quaternion4);
      assertNotSame(quaternion12, quaternion5);
      assertNotSame(quaternion12, quaternion3);
      assertSame(quaternion12, quaternion9);
      assertSame(quaternion12, quaternion7);
      assertNotSame(quaternion12, quaternion0);
      assertNotSame(quaternion12, quaternion1);
      assertNotSame(quaternion12, quaternion2);
      assertNotSame(quaternion12, quaternion10);
      assertNotSame(quaternion12, quaternion11);
      assertSame(quaternion12, quaternion8);
      
      Quaternion quaternion13 = quaternion6.normalizeLocal();
      assertFalse(quaternion13.equals((Object)quaternion10));
      assertFalse(quaternion13.equals((Object)quaternion0));
      assertTrue(quaternion13.equals((Object)quaternion8));
      assertTrue(quaternion13.equals((Object)quaternion7));
      assertTrue(quaternion13.equals((Object)quaternion11));
      assertTrue(quaternion13.equals((Object)quaternion12));
      assertFalse(quaternion13.equals((Object)quaternion4));
      assertTrue(quaternion13.equals((Object)quaternion9));
      assertFalse(quaternion13.equals((Object)quaternion3));
      assertFalse(quaternion13.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion12));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion11));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertTrue(quaternion1.equals((Object)quaternion12));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(vector3_2.equals((Object)vector3_9));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_9));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertTrue(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertTrue(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion8));
      assertTrue(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertTrue(quaternion6.equals((Object)quaternion12));
      assertFalse(quaternion6.equals((Object)quaternion10));
      assertTrue(quaternion6.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertTrue(quaternion6.equals((Object)quaternion9));
      assertTrue(quaternion6.equals((Object)quaternion7));
      assertTrue(quaternion6.equals((Object)quaternion11));
      assertEquals(6.123233995736766E-17, quaternion13.w, 0.01);
      assertEquals(0.0, quaternion13.x, 0.01);
      assertEquals(-0.0, quaternion13.y, 0.01);
      assertEquals((-1.0), quaternion13.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_2.z, 0.01);
      assertEquals((-7553.829787780065), vector3_2.x, 0.01);
      assertEquals((-7552.829787780065), vector3_2.y, 0.01);
      assertEquals((-7553.829787780065), vector3_3.x, 0.01);
      assertEquals((-7552.829787780065), vector3_3.y, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_3.z, 0.01);
      assertEquals((-1.0), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals((-1.0), quaternion6.z, 0.01);
      assertEquals(-0.0, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion6.w, 0.01);
      assertNotSame(quaternion13, quaternion11);
      assertNotSame(quaternion13, quaternion9);
      assertSame(quaternion13, quaternion6);
      assertSame(quaternion13, quaternion1);
      assertNotSame(quaternion13, quaternion4);
      assertNotSame(quaternion13, quaternion7);
      assertNotSame(quaternion13, quaternion3);
      assertNotSame(quaternion13, quaternion8);
      assertNotSame(quaternion13, quaternion12);
      assertNotSame(quaternion13, quaternion5);
      assertNotSame(quaternion13, quaternion10);
      assertNotSame(quaternion13, quaternion0);
      assertSame(quaternion13, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion11);
      assertNotSame(quaternion0, quaternion8);
      
      double double1 = quaternion12.z();
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion12));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion11));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertTrue(quaternion1.equals((Object)quaternion12));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(vector3_2.equals((Object)vector3_9));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_9));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertTrue(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertTrue(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion8));
      assertTrue(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertTrue(quaternion6.equals((Object)quaternion12));
      assertFalse(quaternion6.equals((Object)quaternion10));
      assertTrue(quaternion6.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertTrue(quaternion6.equals((Object)quaternion9));
      assertTrue(quaternion6.equals((Object)quaternion7));
      assertTrue(quaternion6.equals((Object)quaternion11));
      assertFalse(vector3_7.equals((Object)vector3_1));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_9));
      assertTrue(quaternion7.equals((Object)quaternion11));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertTrue(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertTrue(quaternion7.equals((Object)quaternion13));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion10));
      assertTrue(quaternion7.equals((Object)quaternion1));
      assertTrue(quaternion7.equals((Object)quaternion6));
      assertFalse(vector3_9.equals((Object)vector3_6));
      assertFalse(vector3_9.equals((Object)vector3_7));
      assertFalse(vector3_9.equals((Object)vector3_4));
      assertFalse(vector3_9.equals((Object)vector3_1));
      assertFalse(vector3_9.equals((Object)vector3_2));
      assertFalse(vector3_9.equals((Object)vector3_8));
      assertFalse(vector3_9.equals((Object)vector3_0));
      assertFalse(vector3_9.equals((Object)vector3_5));
      assertFalse(vector3_9.equals((Object)vector3_3));
      assertFalse(quaternion12.equals((Object)quaternion4));
      assertFalse(quaternion12.equals((Object)quaternion5));
      assertFalse(quaternion12.equals((Object)quaternion3));
      assertTrue(quaternion12.equals((Object)quaternion11));
      assertTrue(quaternion12.equals((Object)quaternion2));
      assertFalse(quaternion12.equals((Object)quaternion0));
      assertTrue(quaternion12.equals((Object)quaternion13));
      assertFalse(quaternion12.equals((Object)quaternion10));
      assertTrue(quaternion12.equals((Object)quaternion6));
      assertTrue(quaternion12.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_2.z, 0.01);
      assertEquals((-7553.829787780065), vector3_2.x, 0.01);
      assertEquals((-7552.829787780065), vector3_2.y, 0.01);
      assertEquals((-7553.829787780065), vector3_3.x, 0.01);
      assertEquals((-7552.829787780065), vector3_3.y, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_3.z, 0.01);
      assertEquals((-1.0), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_7.z, 0.01);
      assertEquals((-7553.829787780065), vector3_7.x, 0.01);
      assertEquals((-7552.829787780065), vector3_7.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion7.w, 0.01);
      assertEquals((-1.0), quaternion7.z, 0.01);
      assertEquals(0.0, quaternion7.x, 0.01);
      assertEquals(0.0, quaternion7.y, 0.01);
      assertEquals(-0.0, quaternion3.y, 0.01);
      assertEquals((-0.7071067811865475), quaternion3.x, 0.01);
      assertEquals(0.7071067811865476, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals((-1.0), quaternion6.z, 0.01);
      assertEquals(-0.0, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion6.w, 0.01);
      assertEquals(7552.829787780066, vector3_9.y, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_9.z, 0.01);
      assertEquals(7553.829787780064, vector3_9.x, 0.01);
      assertEquals((-1.0), quaternion12.z, 0.01);
      assertEquals(0.0, quaternion12.y, 0.01);
      assertEquals(0.0, quaternion12.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion12.w, 0.01);
      
      Vector3 vector3_10 = (Vector3)Vector3.ZERO;
      assertFalse(vector3_10.equals((Object)vector3_4));
      assertFalse(vector3_10.equals((Object)vector3_2));
      assertFalse(vector3_10.equals((Object)vector3_5));
      assertFalse(vector3_10.equals((Object)vector3_9));
      assertFalse(vector3_10.equals((Object)vector3_3));
      assertFalse(vector3_10.equals((Object)vector3_7));
      assertFalse(vector3_10.equals((Object)vector3_0));
      assertFalse(vector3_10.equals((Object)vector3_1));
      assertFalse(vector3_10.equals((Object)vector3_8));
      assertFalse(vector3_10.equals((Object)vector3_6));
      assertEquals(0.0, vector3_10.z, 0.01);
      assertEquals(0.0, vector3_10.y, 0.01);
      assertEquals(0.0, vector3_10.x, 0.01);
      
      Quaternion quaternion14 = quaternion5.fromVectorFromNegativeZ((IVector3) vector3_10);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion11));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion12));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion10));
      assertFalse(quaternion0.equals((Object)quaternion13));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_10));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_9));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_10.equals((Object)vector3_4));
      assertFalse(vector3_10.equals((Object)vector3_2));
      assertFalse(vector3_10.equals((Object)vector3_5));
      assertFalse(vector3_10.equals((Object)vector3_9));
      assertFalse(vector3_10.equals((Object)vector3_3));
      assertFalse(vector3_10.equals((Object)vector3_7));
      assertFalse(vector3_10.equals((Object)vector3_0));
      assertFalse(vector3_10.equals((Object)vector3_1));
      assertFalse(vector3_10.equals((Object)vector3_8));
      assertFalse(vector3_10.equals((Object)vector3_6));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion5));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion11));
      assertTrue(quaternion1.equals((Object)quaternion9));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertTrue(quaternion1.equals((Object)quaternion12));
      assertFalse(quaternion1.equals((Object)quaternion10));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion14.equals((Object)quaternion9));
      assertFalse(quaternion14.equals((Object)quaternion12));
      assertFalse(quaternion14.equals((Object)quaternion11));
      assertFalse(quaternion14.equals((Object)quaternion2));
      assertFalse(quaternion14.equals((Object)quaternion7));
      assertFalse(quaternion14.equals((Object)quaternion6));
      assertFalse(quaternion14.equals((Object)quaternion13));
      assertFalse(quaternion14.equals((Object)quaternion1));
      assertFalse(quaternion14.equals((Object)quaternion0));
      assertFalse(quaternion14.equals((Object)quaternion8));
      assertFalse(vector3_2.equals((Object)vector3_9));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_10));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertFalse(vector3_3.equals((Object)vector3_10));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_9));
      assertFalse(quaternion2.equals((Object)quaternion5));
      assertTrue(quaternion2.equals((Object)quaternion11));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion10));
      assertTrue(quaternion2.equals((Object)quaternion7));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion8));
      assertTrue(quaternion2.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion7));
      assertFalse(quaternion3.equals((Object)quaternion11));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion13));
      assertFalse(quaternion3.equals((Object)quaternion12));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion13));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertFalse(quaternion5.equals((Object)quaternion1));
      assertFalse(quaternion5.equals((Object)quaternion2));
      assertFalse(quaternion5.equals((Object)quaternion12));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion11));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_10.z, 0.01);
      assertEquals(0.0, vector3_10.y, 0.01);
      assertEquals(0.0, vector3_10.x, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion14.y, 0.01);
      assertEquals(Double.NaN, quaternion14.x, 0.01);
      assertEquals(0.0, quaternion14.z, 0.01);
      assertEquals(0.7071067811865476, quaternion14.w, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_2.z, 0.01);
      assertEquals((-7553.829787780065), vector3_2.x, 0.01);
      assertEquals((-7552.829787780065), vector3_2.y, 0.01);
      assertEquals((-7553.829787780065), vector3_3.x, 0.01);
      assertEquals((-7552.829787780065), vector3_3.y, 0.01);
      assertEquals((-2.1355883284002176E-12), vector3_3.z, 0.01);
      assertEquals((-1.0), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(0.7071067811865476, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.7071067811865476, quaternion5.w, 0.01);
      assertEquals(Double.NaN, quaternion5.y, 0.01);
      assertEquals(Double.NaN, quaternion5.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Vector3 vector3_0 = new Vector3(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertNotNull(vector3_0);
      assertEquals(3, doubleArray0.length);
      
      vector3_0.y = 0.0;
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      
      Quaternion quaternion1 = quaternion0.integrateLocal(vector3_0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertNotNull(quaternion1);
      assertEquals(3, doubleArray0.length);
      
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertNotNull(vector3_1);
      
      double double0 = (-686.0);
      Quaternion quaternion2 = quaternion1.fromAngleAxis(212.0, (IVector3) vector3_0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertEquals(0.6864865509069841, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.6864865509069841, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(-0.0, quaternion2.z, 0.01);
      assertEquals(-0.0, quaternion2.x, 0.01);
      assertEquals(0.6864865509069841, quaternion2.w, 0.01);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertEquals(0.6864865509069841, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals(0.6864865509069841, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.6864865509069841, quaternion2.w(), 0.01);
      assertEquals(-0.0, quaternion2.z(), 0.01);
      assertEquals(-0.0, quaternion2.x(), 0.01);
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertNotNull(quaternion2);
      assertEquals(3, doubleArray0.length);
      
      Quaternion quaternion3 = null;
      try {
        quaternion3 = new Quaternion(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(2973.0177422921797, 2973.0177422921797, 0.0, 0.0);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(2973.0177422921797, quaternion0.y, 0.01);
      assertEquals(2973.0177422921797, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2973.0177422921797, quaternion0.x(), 0.01);
      assertEquals(2973.0177422921797, quaternion0.y(), 0.01);
      assertEquals(2.356194461908072, quaternion0.getRotationZ(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3(0.0, 1210.0, 2973.0177422921797);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(2973.0177422921797, vector3_0.z, 0.01);
      assertEquals(1210.0, vector3_0.y, 0.01);
      assertEquals(1.0302934495984089E7, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1210.0, vector3_0.y(), 0.01);
      assertEquals(3209.8184521844983, vector3_0.length(), 0.01);
      assertEquals(2973.0177422921797, vector3_0.z(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(2973.0177422921797, vector3_0.z, 0.01);
      assertEquals(1210.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(1210.0, vector3_1.y, 0.01);
      assertEquals(2973.0177422921797, vector3_1.z, 0.01);
      assertEquals(1.0302934495984089E7, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1210.0, vector3_0.y(), 0.01);
      assertEquals(3209.8184521844983, vector3_0.length(), 0.01);
      assertEquals(2973.0177422921797, vector3_0.z(), 0.01);
      assertEquals(1.0302934495984089E7, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(2973.0177422921797, vector3_1.z(), 0.01);
      assertEquals(3209.8184521844983, vector3_1.length(), 0.01);
      assertEquals(1210.0, vector3_1.y(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion0.transformUnitY(vector3_1);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(2973.0177422921797, quaternion0.y, 0.01);
      assertEquals(2973.0177422921797, quaternion0.x, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(2973.0177422921797, vector3_0.z, 0.01);
      assertEquals(1210.0, vector3_0.y, 0.01);
      assertEquals(1.7677668991968177E7, vector3_1.x, 0.01);
      assertEquals((-1.7677667991968177E7), vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(1.7677668991968177E7, vector3_2.x, 0.01);
      assertEquals((-1.7677667991968177E7), vector3_2.y, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2973.0177422921797, quaternion0.x(), 0.01);
      assertEquals(2973.0177422921797, quaternion0.y(), 0.01);
      assertEquals(2.356194461908072, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0302934495984089E7, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1210.0, vector3_0.y(), 0.01);
      assertEquals(3209.8184521844983, vector3_0.length(), 0.01);
      assertEquals(2973.0177422921797, vector3_0.z(), 0.01);
      assertEquals(6.249999266238494E14, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals((-1.7677667991968177E7), vector3_1.y(), 0.01);
      assertEquals(1.7677668991968177E7, vector3_1.x(), 0.01);
      assertEquals(2.4999998532476943E7, vector3_1.length(), 0.01);
      assertEquals(6.249999266238494E14, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals((-1.7677667991968177E7), vector3_2.y(), 0.01);
      assertEquals(1.7677668991968177E7, vector3_2.x(), 0.01);
      assertEquals(2.4999998532476943E7, vector3_2.length(), 0.01);
      assertNotNull(vector3_2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.7677668991968177E7;
      // Undeclared exception!
      try { 
        quaternion0.get(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1335.80202057068;
      doubleArray0[1] = 2515.2179386417;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2190.31);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      Quaternion quaternion0 = new Quaternion(doubleArray0);
      assertArrayEquals(new double[] {1335.80202057068, 2515.2179386417, (-1.0), (-2190.31), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1.0), quaternion0.z, 0.01);
      assertEquals(2515.2179386417, quaternion0.y, 0.01);
      assertEquals(1335.80202057068, quaternion0.x, 0.01);
      assertEquals((-2190.31), quaternion0.w, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-2190.31), quaternion0.w(), 0.01);
      assertEquals(2.6531150865816477, quaternion0.getRotationZ(), 0.01);
      assertEquals(1335.80202057068, quaternion0.x(), 0.01);
      assertEquals((-1.0), quaternion0.z(), 0.01);
      assertEquals(2515.2179386417, quaternion0.y(), 0.01);
      assertNotNull(quaternion0);
      assertEquals(6, doubleArray0.length);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.integrateLocal(vector3_0, 1.0);
      assertArrayEquals(new double[] {1335.80202057068, 2515.2179386417, (-1.0), (-2190.31), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.7000735457222501, quaternion0.y, 0.01);
      assertEquals(0.3718006469963707, quaternion0.x, 0.01);
      assertEquals((-2.7833514343505067E-4), quaternion0.z, 0.01);
      assertEquals((-0.6096402480172258), quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.7000735457222501, quaternion1.y, 0.01);
      assertEquals((-2.7833514343505067E-4), quaternion1.z, 0.01);
      assertEquals((-0.6096402480172258), quaternion1.w, 0.01);
      assertEquals(0.3718006469963707, quaternion1.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.3718006469963707, quaternion0.x(), 0.01);
      assertEquals((-0.6096402480172258), quaternion0.w(), 0.01);
      assertEquals(0.7000735457222501, quaternion0.y(), 0.01);
      assertEquals((-2.7833514343505067E-4), quaternion0.z(), 0.01);
      assertEquals(1.5328162547520388, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals((-2.7833514343505067E-4), quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.7000735457222501, quaternion1.y(), 0.01);
      assertEquals(1.5328162547520388, quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.6096402480172258), quaternion1.w(), 0.01);
      assertEquals(0.3718006469963707, quaternion1.x(), 0.01);
      assertNotNull(quaternion1);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Quaternion quaternion0 = null;
      try {
        quaternion0 = new Quaternion((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion1.toAngles();
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = new Vector3(vector3_0);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertNotNull(vector3_2);
      
      vector3_1.z = 3128.49817867;
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(9787500.853941508, vector3_1.lengthSquared(), 0.01);
      assertEquals(3128.49817867, vector3_1.z(), 0.01);
      assertEquals(3128.49817867, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      
      Vector3 vector3_3 = vector3_2.addLocal(3128.49817867, 3128.49817867, 0.10557280795946444);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(3128.49817867, vector3_2.y, 0.01);
      assertEquals(3128.49817867, vector3_2.x, 0.01);
      assertEquals(0.10557280795946444, vector3_2.z, 0.01);
      assertEquals(3128.49817867, vector3_3.x, 0.01);
      assertEquals(3128.49817867, vector3_3.y, 0.01);
      assertEquals(0.10557280795946444, vector3_3.z, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_1);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(3128.49817867, vector3_2.x(), 0.01);
      assertEquals(3128.49817867, vector3_2.y(), 0.01);
      assertEquals(4424.364555394213, vector3_2.length(), 0.01);
      assertEquals(1.9575001719028633E7, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.10557280795946444, vector3_2.z(), 0.01);
      assertEquals(3128.49817867, vector3_3.y(), 0.01);
      assertEquals(3128.49817867, vector3_3.x(), 0.01);
      assertEquals(4424.364555394213, vector3_3.length(), 0.01);
      assertEquals(1.9575001719028633E7, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.10557280795946444, vector3_3.z(), 0.01);
      assertNotNull(vector3_3);
      
      Vector3 vector3_4 = vector3_2.lerp((IVector3) vector3_1, 0.0, vector3_1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_3));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertTrue(vector3_4.equals((Object)vector3_3));
      assertTrue(vector3_4.equals((Object)vector3_2));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(3128.49817867, vector3_1.x, 0.01);
      assertEquals(3128.49817867, vector3_1.y, 0.01);
      assertEquals(0.10557280795946444, vector3_1.z, 0.01);
      assertEquals(3128.49817867, vector3_2.y, 0.01);
      assertEquals(3128.49817867, vector3_2.x, 0.01);
      assertEquals(0.10557280795946444, vector3_2.z, 0.01);
      assertEquals(0.10557280795946444, vector3_4.z, 0.01);
      assertEquals(3128.49817867, vector3_4.x, 0.01);
      assertEquals(3128.49817867, vector3_4.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(3128.49817867, vector3_1.x(), 0.01);
      assertEquals(1.9575001719028633E7, vector3_1.lengthSquared(), 0.01);
      assertEquals(3128.49817867, vector3_1.y(), 0.01);
      assertEquals(0.10557280795946444, vector3_1.z(), 0.01);
      assertEquals(4424.364555394213, vector3_1.length(), 0.01);
      assertEquals(3128.49817867, vector3_2.x(), 0.01);
      assertEquals(3128.49817867, vector3_2.y(), 0.01);
      assertEquals(4424.364555394213, vector3_2.length(), 0.01);
      assertEquals(1.9575001719028633E7, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.10557280795946444, vector3_2.z(), 0.01);
      assertEquals(3128.49817867, vector3_4.x(), 0.01);
      assertEquals(3128.49817867, vector3_4.y(), 0.01);
      assertEquals(1.9575001719028633E7, vector3_4.lengthSquared(), 0.01);
      assertEquals(0.10557280795946444, vector3_4.z(), 0.01);
      assertEquals(4424.364555394213, vector3_4.length(), 0.01);
      assertNotNull(vector3_4);
      
      Vector3 vector3_5 = vector3_2.cross((IVector3) vector3_1, vector3_1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(3128.49817867, vector3_2.y, 0.01);
      assertEquals(3128.49817867, vector3_2.x, 0.01);
      assertEquals(0.10557280795946444, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_5.y, 0.01);
      assertEquals(0.0, vector3_5.z, 0.01);
      assertEquals(0.0, vector3_5.x, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_5);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_5, vector3_0);
      assertSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_3);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(3128.49817867, vector3_2.x(), 0.01);
      assertEquals(3128.49817867, vector3_2.y(), 0.01);
      assertEquals(4424.364555394213, vector3_2.length(), 0.01);
      assertEquals(1.9575001719028633E7, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.10557280795946444, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_5.x(), 0.01);
      assertEquals(0.0, vector3_5.length(), 0.01);
      assertEquals(0.0, vector3_5.y(), 0.01);
      assertEquals(0.0, vector3_5.z(), 0.01);
      assertEquals(0.0, vector3_5.lengthSquared(), 0.01);
      assertNotNull(vector3_5);
      
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(3128.49817867, vector3_2.y, 0.01);
      assertEquals(3128.49817867, vector3_2.x, 0.01);
      assertEquals(0.10557280795946444, vector3_2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(3128.49817867, vector3_2.x(), 0.01);
      assertEquals(3128.49817867, vector3_2.y(), 0.01);
      assertEquals(4424.364555394213, vector3_2.length(), 0.01);
      assertEquals(1.9575001719028633E7, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.10557280795946444, vector3_2.z(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w(), 0.01);
      assertEquals(Double.NaN, quaternion2.z(), 0.01);
      assertEquals(Double.NaN, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertNotNull(quaternion2);
      
      boolean boolean0 = quaternion2.equals(quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(3128.49817867, vector3_2.y, 0.01);
      assertEquals(3128.49817867, vector3_2.x, 0.01);
      assertEquals(0.10557280795946444, vector3_2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(3128.49817867, vector3_2.x(), 0.01);
      assertEquals(3128.49817867, vector3_2.y(), 0.01);
      assertEquals(4424.364555394213, vector3_2.length(), 0.01);
      assertEquals(1.9575001719028633E7, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.10557280795946444, vector3_2.z(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w(), 0.01);
      assertEquals(Double.NaN, quaternion2.z(), 0.01);
      assertEquals(Double.NaN, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertFalse(boolean0);
      
      Vector3 vector3_6 = quaternion2.transformUnitY(vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, vector3_6.y, 0.01);
      assertEquals(Double.NaN, vector3_6.x, 0.01);
      assertEquals(Double.NaN, vector3_6.z, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_6, vector3_2);
      assertSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_5);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w(), 0.01);
      assertEquals(Double.NaN, quaternion2.z(), 0.01);
      assertEquals(Double.NaN, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertEquals(Double.NaN, vector3_6.length(), 0.01);
      assertEquals(Double.NaN, vector3_6.z(), 0.01);
      assertEquals(Double.NaN, vector3_6.y(), 0.01);
      assertEquals(Double.NaN, vector3_6.x(), 0.01);
      assertEquals(Double.NaN, vector3_6.lengthSquared(), 0.01);
      assertNotNull(vector3_6);
      
      Quaternion quaternion3 = quaternion2.set((IQuaternion) quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w(), 0.01);
      assertEquals(Double.NaN, quaternion2.z(), 0.01);
      assertEquals(Double.NaN, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertEquals(Double.NaN, quaternion3.x(), 0.01);
      assertEquals(Double.NaN, quaternion3.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion3.w(), 0.01);
      assertEquals(Double.NaN, quaternion3.z(), 0.01);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Double.NaN, quaternion3.getRotationZ(), 0.01);
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion2.set(Double.NaN, 0.0, 0.0, (-3.4028234663852886E38));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals((-3.4028234663852886E38), quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion2.w(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion4.x(), 0.01);
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion2.fromAngleAxis(0.0, 3.4028234663852886E38, 0.0, 3297.97);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion5.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(1.0, quaternion5.w, 0.01);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion1);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertEquals(1.0, quaternion5.w(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion5.slerpLocal(quaternion4, 3.4028234663852886E38);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertTrue(quaternion5.equals((Object)quaternion0));
      assertTrue(quaternion6.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.0, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.w, 0.01);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion6);
      assertSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion3);
      assertSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion5);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertEquals(0.0, quaternion5.w(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion6.y(), 0.01);
      assertEquals(0.0, quaternion6.w(), 0.01);
      assertEquals(0.0, quaternion6.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(0.0, quaternion6.x(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertNotNull(quaternion6);
      
      double double0 = quaternion4.transformZ(vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = quaternion2.z();
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertEquals(double1, double0, 0.01);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion4);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion1.toAngles();
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = new Vector3(vector3_0);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertNotNull(vector3_2);
      
      vector3_1.z = 3128.49817867;
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3128.49817867, vector3_1.length(), 0.01);
      assertEquals(9787500.853941508, vector3_1.lengthSquared(), 0.01);
      assertEquals(3128.49817867, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      
      Vector3 vector3_3 = vector3_2.lerp((IVector3) vector3_1, 0.0, vector3_1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_2);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(0.0, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_3.length(), 0.01);
      assertNotNull(vector3_3);
      
      Vector3 vector3_4 = vector3_2.cross((IVector3) vector3_1, vector3_1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_4.equals((Object)vector3_0));
      assertTrue(vector3_4.equals((Object)vector3_2));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_1);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_4.length(), 0.01);
      assertEquals(0.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(0.0, vector3_4.x(), 0.01);
      assertNotNull(vector3_4);
      
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w(), 0.01);
      assertEquals(Double.NaN, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion2.z(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertNotNull(quaternion2);
      
      boolean boolean0 = quaternion2.equals(quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w(), 0.01);
      assertEquals(Double.NaN, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion2.z(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertFalse(boolean0);
      
      Vector3 vector3_5 = quaternion2.transformUnitY(vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(Double.NaN, vector3_5.z, 0.01);
      assertEquals(Double.NaN, vector3_5.y, 0.01);
      assertEquals(Double.NaN, vector3_5.x, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_1);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_0);
      assertSame(vector3_5, vector3_2);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w(), 0.01);
      assertEquals(Double.NaN, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion2.z(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Double.NaN, vector3_5.x(), 0.01);
      assertEquals(Double.NaN, vector3_5.z(), 0.01);
      assertEquals(Double.NaN, vector3_5.y(), 0.01);
      assertEquals(Double.NaN, vector3_5.length(), 0.01);
      assertEquals(Double.NaN, vector3_5.lengthSquared(), 0.01);
      assertNotNull(vector3_5);
      
      Quaternion quaternion3 = quaternion2.set((IQuaternion) quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(Double.NaN, quaternion2.y, 0.01);
      assertEquals(Double.NaN, quaternion2.z, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w(), 0.01);
      assertEquals(Double.NaN, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion2.z(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals(6.123233995736766E-17, quaternion3.w(), 0.01);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Double.NaN, quaternion3.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion3.y(), 0.01);
      assertEquals(Double.NaN, quaternion3.x(), 0.01);
      assertEquals(Double.NaN, quaternion3.z(), 0.01);
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion2.set(Double.NaN, 0.0, 0.0, (-3.4028234663852886E38));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion2.w, 0.01);
      assertEquals(Double.NaN, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion4.x, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion2);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion1.w(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(Double.NaN, quaternion2.x(), 0.01);
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals((-3.4028234663852886E38), quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(Double.NaN, quaternion4.getRotationZ(), 0.01);
      assertTrue(quaternion4.hasNaN());
      assertEquals(Double.NaN, quaternion4.x(), 0.01);
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion2.fromAngleAxis(0.0, 3.4028234663852886E38, 0.0, 3297.97);
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion4));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion5.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(1.0, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion2);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertEquals(1.0, quaternion5.w(), 0.01);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion5.slerpLocal(quaternion4, 3.4028234663852886E38);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertTrue(quaternion5.equals((Object)quaternion0));
      assertTrue(quaternion6.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion5.w, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.w, 0.01);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion5);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertEquals(0.0, quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(0.0, quaternion6.x(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.0, quaternion6.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion6.y(), 0.01);
      assertEquals(0.0, quaternion6.w(), 0.01);
      assertNotNull(quaternion6);
      
      double double0 = quaternion4.transformZ(vector3_0);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion6);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion2);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = quaternion2.z();
      assertEquals(double1, double0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(Double.NaN, vector3_2.y, 0.01);
      assertEquals(Double.NaN, vector3_2.z, 0.01);
      assertEquals(Double.NaN, vector3_2.x, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_5);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.length(), 0.01);
      assertEquals(Double.NaN, vector3_2.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3_2.z(), 0.01);
      assertEquals(Double.NaN, vector3_2.y(), 0.01);
      assertEquals(Double.NaN, vector3_2.x(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromVectors(vector3_0, vector3_0);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.5, 2.0, 0.0, 2.0);
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.integrate((IVector3) vector3_0, (-11.476962));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.8055120636310352, quaternion1.w, 0.01);
      assertEquals(0.17149323684438256, quaternion1.z, 0.01);
      assertEquals(0.029884779063376273, quaternion1.x, 0.01);
      assertEquals((-0.5664338311240251), quaternion1.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.8055120636310352, quaternion1.w(), 0.01);
      assertEquals((-0.5664338311240251), quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.029884779063376273, quaternion1.x(), 0.01);
      assertEquals(0.17149323684438256, quaternion1.z(), 0.01);
      assertEquals(0.6804880282739441, quaternion1.getRotationZ(), 0.01);
      assertNotNull(quaternion1);
      
      Vector3 vector3_1 = new Vector3();
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = vector3_1.addScaledLocal(vector3_0, 0.5);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.5, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.5, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.5, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.5, vector3_1.length(), 0.01);
      assertEquals(0.25, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.5, vector3_2.y(), 0.01);
      assertEquals(0.5, vector3_2.length(), 0.01);
      assertEquals(0.25, vector3_2.lengthSquared(), 0.01);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = quaternion0.transformScaleAndAdd(vector3_0, 0.5, vector3_0, vector3_1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(1.0, vector3_1.z, 0.01);
      assertEquals(1.25, vector3_1.y, 0.01);
      assertEquals(1.25, vector3_3.y, 0.01);
      assertEquals(1.0, vector3_3.x, 0.01);
      assertEquals(1.0, vector3_3.z, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.5625, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.z(), 0.01);
      assertEquals(1.25, vector3_1.y(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1.8874586088176875, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_3.z(), 0.01);
      assertEquals(3.5625, vector3_3.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_3.x(), 0.01);
      assertEquals(1.8874586088176875, vector3_3.length(), 0.01);
      assertEquals(1.25, vector3_3.y(), 0.01);
      assertNotNull(vector3_3);
      
      double double0 = quaternion0.z();
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Quaternion quaternion2 = quaternion1.set((IQuaternion) quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(2.0, quaternion1.w, 0.01);
      assertEquals(0.5, quaternion1.x, 0.01);
      assertEquals(2.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(2.0, quaternion2.y, 0.01);
      assertEquals(0.5, quaternion2.x, 0.01);
      assertEquals(2.0, quaternion2.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(2.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.5, quaternion1.x(), 0.01);
      assertEquals(2.0, quaternion1.w(), 0.01);
      assertEquals(2.8632929945846817, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(2.8632929945846817, quaternion2.getRotationZ(), 0.01);
      assertEquals(2.0, quaternion2.w(), 0.01);
      assertEquals(0.5, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(2.0, quaternion2.y(), 0.01);
      assertNotNull(quaternion2);
      
      Vector3 vector3_4 = vector3_1.crossLocal(vector3_3);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(0.0, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_4, vector3_0);
      assertSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_2);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_4.x(), 0.01);
      assertEquals(0.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_4.length(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(0.0, vector3_4.z(), 0.01);
      assertNotNull(vector3_4);
      
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(1337);
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertFalse(doubleBuffer0.isDirect());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(1337, doubleBuffer0.capacity());
      assertEquals(1337, doubleBuffer0.remaining());
      assertEquals(1337, doubleBuffer0.limit());
      assertEquals(0, doubleBuffer0.position());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=1337 cap=1337]", doubleBuffer0.toString());
      assertFalse(doubleBuffer0.isReadOnly());
      assertNotNull(doubleBuffer0);
      
      DoubleBuffer doubleBuffer1 = vector3_2.get(doubleBuffer0);
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(doubleBuffer0, doubleBuffer1);
      assertSame(doubleBuffer1, doubleBuffer0);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(3, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isDirect());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(1337, doubleBuffer0.capacity());
      assertEquals(1337, doubleBuffer0.limit());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals("java.nio.HeapDoubleBuffer[pos=3 lim=1337 cap=1337]", doubleBuffer0.toString());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(1334, doubleBuffer0.remaining());
      assertEquals(1337, doubleBuffer1.limit());
      assertEquals(0, doubleBuffer1.arrayOffset());
      assertTrue(doubleBuffer1.hasRemaining());
      assertFalse(doubleBuffer1.isReadOnly());
      assertEquals(1334, doubleBuffer1.remaining());
      assertTrue(doubleBuffer1.hasArray());
      assertEquals("java.nio.HeapDoubleBuffer[pos=3 lim=1337 cap=1337]", doubleBuffer1.toString());
      assertEquals(3, doubleBuffer1.position());
      assertEquals(1337, doubleBuffer1.capacity());
      assertFalse(doubleBuffer1.isDirect());
      assertNotNull(doubleBuffer1);
      
      Vector3 vector3_5 = vector3_1.multLocal(0.0);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_5.x, 0.01);
      assertEquals(0.0, vector3_5.y, 0.01);
      assertEquals(0.0, vector3_5.z, 0.01);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_5);
      assertSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_4);
      assertSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_0);
      assertSame(vector3_5, vector3_3);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_5.length(), 0.01);
      assertEquals(0.0, vector3_5.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_5.x(), 0.01);
      assertEquals(0.0, vector3_5.y(), 0.01);
      assertEquals(0.0, vector3_5.z(), 0.01);
      assertNotNull(vector3_5);
      
      Vector3 vector3_6 = quaternion2.transformUnitY(vector3_2);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(2.0, quaternion1.w, 0.01);
      assertEquals(0.5, quaternion1.x, 0.01);
      assertEquals(2.0, quaternion1.y, 0.01);
      assertEquals(0.5, vector3_1.y, 0.01);
      assertEquals(2.0, vector3_1.x, 0.01);
      assertEquals(2.0, vector3_1.z, 0.01);
      assertEquals(2.0, vector3_2.z, 0.01);
      assertEquals(0.5, vector3_2.y, 0.01);
      assertEquals(2.0, vector3_2.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(2.0, quaternion2.y, 0.01);
      assertEquals(0.5, quaternion2.x, 0.01);
      assertEquals(2.0, quaternion2.w, 0.01);
      assertEquals(2.0, vector3_6.z, 0.01);
      assertEquals(0.5, vector3_6.y, 0.01);
      assertEquals(2.0, vector3_6.x, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_5);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertSame(vector3_6, vector3_1);
      assertSame(vector3_6, vector3_5);
      assertSame(vector3_6, vector3_2);
      assertSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_0);
      assertSame(vector3_6, vector3_4);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(2.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.5, quaternion1.x(), 0.01);
      assertEquals(2.0, quaternion1.w(), 0.01);
      assertEquals(2.8632929945846817, quaternion1.getRotationZ(), 0.01);
      assertEquals(2.0, vector3_1.z(), 0.01);
      assertEquals(0.5, vector3_1.y(), 0.01);
      assertEquals(2.0, vector3_1.x(), 0.01);
      assertEquals(8.25, vector3_1.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_1.length(), 0.01);
      assertEquals(2.0, vector3_2.x(), 0.01);
      assertEquals(2.0, vector3_2.z(), 0.01);
      assertEquals(0.5, vector3_2.y(), 0.01);
      assertEquals(8.25, vector3_2.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_2.length(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(2.8632929945846817, quaternion2.getRotationZ(), 0.01);
      assertEquals(2.0, quaternion2.w(), 0.01);
      assertEquals(0.5, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(2.0, quaternion2.y(), 0.01);
      assertEquals(2.8722813232690143, vector3_6.length(), 0.01);
      assertEquals(8.25, vector3_6.lengthSquared(), 0.01);
      assertEquals(0.5, vector3_6.y(), 0.01);
      assertEquals(2.0, vector3_6.z(), 0.01);
      assertEquals(2.0, vector3_6.x(), 0.01);
      assertNotNull(vector3_6);
      
      Quaternion quaternion3 = new Quaternion(0.5, 965.733137861, 965.733137861, 2.0);
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertEquals(965.733137861, quaternion3.y, 0.01);
      assertEquals(2.0, quaternion3.w, 0.01);
      assertEquals(0.5, quaternion3.x, 0.01);
      assertEquals(965.733137861, quaternion3.z, 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(965.733137861, quaternion3.y(), 0.01);
      assertEquals(965.733137861, quaternion3.z(), 0.01);
      assertEquals(0.5, quaternion3.x(), 0.01);
      assertEquals(3.1402983005351013, quaternion3.getRotationZ(), 0.01);
      assertEquals(2.0, quaternion3.w(), 0.01);
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion2.normalize(quaternion3);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(2.0, quaternion1.w, 0.01);
      assertEquals(0.5, quaternion1.x, 0.01);
      assertEquals(2.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(2.0, quaternion2.y, 0.01);
      assertEquals(0.5, quaternion2.x, 0.01);
      assertEquals(2.0, quaternion2.w, 0.01);
      assertEquals(0.6963106238227914, quaternion3.y, 0.01);
      assertEquals(0.6963106238227914, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.17407765595569785, quaternion3.x, 0.01);
      assertEquals(0.17407765595569785, quaternion4.x, 0.01);
      assertEquals(0.6963106238227914, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.6963106238227914, quaternion4.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(2.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.5, quaternion1.x(), 0.01);
      assertEquals(2.0, quaternion1.w(), 0.01);
      assertEquals(2.8632929945846817, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(2.8632929945846817, quaternion2.getRotationZ(), 0.01);
      assertEquals(2.0, quaternion2.w(), 0.01);
      assertEquals(0.5, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(2.0, quaternion2.y(), 0.01);
      assertEquals(0.17407765595569785, quaternion3.x(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.6963106238227914, quaternion3.y(), 0.01);
      assertEquals(0.6963106238227914, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(1.4464413322481358, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.17407765595569785, quaternion4.x(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.6963106238227914, quaternion4.y(), 0.01);
      assertEquals(0.6963106238227914, quaternion4.w(), 0.01);
      assertEquals(1.4464413322481358, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion1.fromVectors(vector3_2, vector3_3);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.5, vector3_1.y, 0.01);
      assertEquals(2.0, vector3_1.x, 0.01);
      assertEquals(2.0, vector3_1.z, 0.01);
      assertEquals(2.0, vector3_2.z, 0.01);
      assertEquals(0.5, vector3_2.y, 0.01);
      assertEquals(2.0, vector3_2.x, 0.01);
      assertEquals(2.0, vector3_3.x, 0.01);
      assertEquals(0.5, vector3_3.y, 0.01);
      assertEquals(2.0, vector3_3.z, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(1.0, quaternion5.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_5);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion2);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(2.0, vector3_1.z(), 0.01);
      assertEquals(0.5, vector3_1.y(), 0.01);
      assertEquals(2.0, vector3_1.x(), 0.01);
      assertEquals(8.25, vector3_1.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_1.length(), 0.01);
      assertEquals(2.0, vector3_2.x(), 0.01);
      assertEquals(2.0, vector3_2.z(), 0.01);
      assertEquals(0.5, vector3_2.y(), 0.01);
      assertEquals(8.25, vector3_2.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_2.length(), 0.01);
      assertEquals(2.8722813232690143, vector3_3.length(), 0.01);
      assertEquals(2.0, vector3_3.z(), 0.01);
      assertEquals(2.0, vector3_3.x(), 0.01);
      assertEquals(0.5, vector3_3.y(), 0.01);
      assertEquals(8.25, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(1.0, quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = quaternion1.slerp((IQuaternion) quaternion5, 2.0, quaternion3);
      assertTrue(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertTrue(quaternion6.equals((Object)quaternion5));
      assertTrue(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion5));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion5.equals((Object)quaternion4));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertEquals(0.0, quaternion6.z, 0.01);
      assertEquals(1.0, quaternion6.w, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.y, 0.01);
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.5, vector3_1.y, 0.01);
      assertEquals(2.0, vector3_1.x, 0.01);
      assertEquals(2.0, vector3_1.z, 0.01);
      assertEquals(2.0, vector3_2.z, 0.01);
      assertEquals(0.5, vector3_2.y, 0.01);
      assertEquals(2.0, vector3_2.x, 0.01);
      assertEquals(2.0, vector3_3.x, 0.01);
      assertEquals(0.5, vector3_3.y, 0.01);
      assertEquals(2.0, vector3_3.z, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(1.0, quaternion5.w, 0.01);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_5);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion2);
      assertFalse(quaternion6.hasNaN());
      assertEquals(1.0, quaternion6.w(), 0.01);
      assertEquals(0.0, quaternion6.y(), 0.01);
      assertEquals(0.0, quaternion6.x(), 0.01);
      assertEquals(0.0, quaternion6.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(2.0, vector3_1.z(), 0.01);
      assertEquals(0.5, vector3_1.y(), 0.01);
      assertEquals(2.0, vector3_1.x(), 0.01);
      assertEquals(8.25, vector3_1.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_1.length(), 0.01);
      assertEquals(2.0, vector3_2.x(), 0.01);
      assertEquals(2.0, vector3_2.z(), 0.01);
      assertEquals(0.5, vector3_2.y(), 0.01);
      assertEquals(8.25, vector3_2.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_2.length(), 0.01);
      assertEquals(2.8722813232690143, vector3_3.length(), 0.01);
      assertEquals(2.0, vector3_3.z(), 0.01);
      assertEquals(2.0, vector3_3.x(), 0.01);
      assertEquals(0.5, vector3_3.y(), 0.01);
      assertEquals(8.25, vector3_3.lengthSquared(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(1.0, quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = quaternion3.slerp((IQuaternion) quaternion6, 0.0, quaternion4);
      assertTrue(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertTrue(quaternion6.equals((Object)quaternion5));
      assertTrue(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertTrue(quaternion7.equals((Object)quaternion5));
      assertTrue(quaternion7.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertTrue(quaternion2.equals((Object)quaternion6));
      assertTrue(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion4));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion5));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion1));
      assertTrue(quaternion5.equals((Object)quaternion4));
      assertTrue(quaternion5.equals((Object)quaternion6));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertEquals(0.0, quaternion6.z, 0.01);
      assertEquals(1.0, quaternion6.w, 0.01);
      assertEquals(0.0, quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.y, 0.01);
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion7.z, 0.01);
      assertEquals(0.0, quaternion7.y, 0.01);
      assertEquals(0.0, quaternion7.x, 0.01);
      assertEquals(1.0, quaternion7.w, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.5, vector3_1.y, 0.01);
      assertEquals(2.0, vector3_1.x, 0.01);
      assertEquals(2.0, vector3_1.z, 0.01);
      assertEquals(2.0, vector3_2.z, 0.01);
      assertEquals(0.5, vector3_2.y, 0.01);
      assertEquals(2.0, vector3_2.x, 0.01);
      assertEquals(2.0, vector3_3.x, 0.01);
      assertEquals(0.5, vector3_3.y, 0.01);
      assertEquals(2.0, vector3_3.z, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(1.0, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(1.0, quaternion5.w, 0.01);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion3);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion2);
      assertSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion5);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_5);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion6);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion2);
      assertFalse(quaternion6.hasNaN());
      assertEquals(1.0, quaternion6.w(), 0.01);
      assertEquals(0.0, quaternion6.y(), 0.01);
      assertEquals(0.0, quaternion6.x(), 0.01);
      assertEquals(0.0, quaternion6.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals(1.0, quaternion7.w(), 0.01);
      assertEquals(0.0, quaternion7.x(), 0.01);
      assertEquals(0.0, quaternion7.y(), 0.01);
      assertEquals(0.0, quaternion7.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion7.z(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(2.0, vector3_1.z(), 0.01);
      assertEquals(0.5, vector3_1.y(), 0.01);
      assertEquals(2.0, vector3_1.x(), 0.01);
      assertEquals(8.25, vector3_1.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_1.length(), 0.01);
      assertEquals(2.0, vector3_2.x(), 0.01);
      assertEquals(2.0, vector3_2.z(), 0.01);
      assertEquals(0.5, vector3_2.y(), 0.01);
      assertEquals(8.25, vector3_2.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_2.length(), 0.01);
      assertEquals(2.8722813232690143, vector3_3.length(), 0.01);
      assertEquals(2.0, vector3_3.z(), 0.01);
      assertEquals(2.0, vector3_3.x(), 0.01);
      assertEquals(0.5, vector3_3.y(), 0.01);
      assertEquals(8.25, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(1.0, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(1.0, quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertNotNull(quaternion7);
      
      Quaternion quaternion8 = quaternion5.normalize(quaternion4);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertTrue(quaternion8.equals((Object)quaternion2));
      assertTrue(quaternion8.equals((Object)quaternion1));
      assertTrue(quaternion8.equals((Object)quaternion5));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertTrue(quaternion2.equals((Object)quaternion6));
      assertTrue(quaternion2.equals((Object)quaternion7));
      assertTrue(quaternion2.equals((Object)quaternion3));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion4));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion5));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion1));
      assertTrue(quaternion5.equals((Object)quaternion4));
      assertTrue(quaternion5.equals((Object)quaternion6));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertTrue(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion8.z, 0.01);
      assertEquals(0.0, quaternion8.x, 0.01);
      assertEquals(0.0, quaternion8.y, 0.01);
      assertEquals(1.0, quaternion8.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.5, vector3_1.y, 0.01);
      assertEquals(2.0, vector3_1.x, 0.01);
      assertEquals(2.0, vector3_1.z, 0.01);
      assertEquals(2.0, vector3_2.z, 0.01);
      assertEquals(0.5, vector3_2.y, 0.01);
      assertEquals(2.0, vector3_2.x, 0.01);
      assertEquals(2.0, vector3_3.x, 0.01);
      assertEquals(0.5, vector3_3.y, 0.01);
      assertEquals(2.0, vector3_3.z, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(1.0, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(1.0, quaternion5.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion0);
      assertSame(quaternion8, quaternion4);
      assertSame(quaternion8, quaternion7);
      assertSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion6);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_5);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion7);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion8);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion6);
      assertNotSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion7);
      assertSame(quaternion4, quaternion6);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion8);
      assertSame(quaternion5, quaternion2);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion8.z(), 0.01);
      assertEquals(0.0, quaternion8.y(), 0.01);
      assertEquals(0.0, quaternion8.x(), 0.01);
      assertEquals(1.0, quaternion8.w(), 0.01);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.0, quaternion8.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(2.0, vector3_1.z(), 0.01);
      assertEquals(0.5, vector3_1.y(), 0.01);
      assertEquals(2.0, vector3_1.x(), 0.01);
      assertEquals(8.25, vector3_1.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_1.length(), 0.01);
      assertEquals(2.0, vector3_2.x(), 0.01);
      assertEquals(2.0, vector3_2.z(), 0.01);
      assertEquals(0.5, vector3_2.y(), 0.01);
      assertEquals(8.25, vector3_2.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_2.length(), 0.01);
      assertEquals(2.8722813232690143, vector3_3.length(), 0.01);
      assertEquals(2.0, vector3_3.z(), 0.01);
      assertEquals(2.0, vector3_3.x(), 0.01);
      assertEquals(0.5, vector3_3.y(), 0.01);
      assertEquals(8.25, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(1.0, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(1.0, quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertNotNull(quaternion8);
      
      double double1 = quaternion0.x();
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertEquals(0.5, double1, 0.01);
      
      Quaternion quaternion9 = quaternion5.fromVectors(vector3_5, vector3_3);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion5));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion3));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion4));
      assertTrue(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion1.equals((Object)quaternion8));
      assertTrue(quaternion1.equals((Object)quaternion6));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertTrue(quaternion9.equals((Object)quaternion8));
      assertTrue(quaternion9.equals((Object)quaternion6));
      assertTrue(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertTrue(quaternion9.equals((Object)quaternion3));
      assertTrue(quaternion9.equals((Object)quaternion4));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertTrue(quaternion5.equals((Object)quaternion4));
      assertTrue(quaternion5.equals((Object)quaternion6));
      assertTrue(quaternion5.equals((Object)quaternion8));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertTrue(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion0));
      assertEquals(2.0, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(2.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.5, vector3_1.y, 0.01);
      assertEquals(2.0, vector3_1.x, 0.01);
      assertEquals(2.0, vector3_1.z, 0.01);
      assertEquals(0.0, quaternion9.z, 0.01);
      assertEquals(1.0, quaternion9.w, 0.01);
      assertEquals(0.0, quaternion9.x, 0.01);
      assertEquals(0.0, quaternion9.y, 0.01);
      assertEquals(2.0, vector3_2.z, 0.01);
      assertEquals(0.5, vector3_2.y, 0.01);
      assertEquals(2.0, vector3_2.x, 0.01);
      assertEquals(2.0, vector3_3.x, 0.01);
      assertEquals(0.5, vector3_3.y, 0.01);
      assertEquals(2.0, vector3_3.z, 0.01);
      assertEquals(2.0, vector3_5.x, 0.01);
      assertEquals(0.5, vector3_5.y, 0.01);
      assertEquals(2.0, vector3_5.z, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(1.0, quaternion5.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion0, quaternion9);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion7);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_6);
      assertSame(vector3_1, vector3_5);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion7);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion0);
      assertSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion8);
      assertSame(quaternion9, quaternion2);
      assertSame(quaternion9, quaternion1);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_2, vector3_4);
      assertSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_4);
      assertSame(vector3_3, vector3_6);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_6);
      assertSame(vector3_5, vector3_4);
      assertSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_0);
      assertSame(vector3_5, vector3_3);
      assertSame(quaternion5, quaternion9);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion8);
      assertSame(quaternion5, quaternion2);
      assertEquals(2.8632929945846817, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0, quaternion0.w(), 0.01);
      assertEquals(2.0, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(2.0, vector3_1.z(), 0.01);
      assertEquals(0.5, vector3_1.y(), 0.01);
      assertEquals(2.0, vector3_1.x(), 0.01);
      assertEquals(8.25, vector3_1.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_1.length(), 0.01);
      assertEquals(0.0, quaternion9.z(), 0.01);
      assertEquals(1.0, quaternion9.w(), 0.01);
      assertEquals(0.0, quaternion9.y(), 0.01);
      assertFalse(quaternion9.hasNaN());
      assertEquals(0.0, quaternion9.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion9.x(), 0.01);
      assertEquals(2.0, vector3_2.x(), 0.01);
      assertEquals(2.0, vector3_2.z(), 0.01);
      assertEquals(0.5, vector3_2.y(), 0.01);
      assertEquals(8.25, vector3_2.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_2.length(), 0.01);
      assertEquals(2.8722813232690143, vector3_3.length(), 0.01);
      assertEquals(2.0, vector3_3.z(), 0.01);
      assertEquals(2.0, vector3_3.x(), 0.01);
      assertEquals(0.5, vector3_3.y(), 0.01);
      assertEquals(8.25, vector3_3.lengthSquared(), 0.01);
      assertEquals(8.25, vector3_5.lengthSquared(), 0.01);
      assertEquals(2.8722813232690143, vector3_5.length(), 0.01);
      assertEquals(2.0, vector3_5.x(), 0.01);
      assertEquals(0.5, vector3_5.y(), 0.01);
      assertEquals(2.0, vector3_5.z(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(1.0, quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertNotNull(quaternion9);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion0 = new Quaternion((-3.4028234663852886E38), (-3.4028234663852886E38), (-3.4028234663852886E38), (-3.4028234663852886E38));
      assertEquals((-3.4028234663852886E38), quaternion0.z, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.x, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.w, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), quaternion0.w(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.x(), 0.01);
      assertEquals(2.356194490192345, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_1 = quaternion0.toAngles();
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals((-3.4028234663852886E38), quaternion0.z, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.x, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.w, 0.01);
      assertEquals(2.356194490192345, vector3_1.z, 0.01);
      assertEquals(2.356194490192345, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertNotSame(vector3_1, vector3_0);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), quaternion0.w(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.x(), 0.01);
      assertEquals(2.356194490192345, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion0.z(), 0.01);
      assertEquals(2.356194490192345, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(11.103304951225528, vector3_1.lengthSquared(), 0.01);
      assertEquals(2.356194490192345, vector3_1.z(), 0.01);
      assertEquals(3.3321622036187746, vector3_1.length(), 0.01);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      assertEquals(0.7071067811865476, quaternion0.y, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.7071067811865476, quaternion1.y, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.y(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.y(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.fromAngles((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = new Vector3();
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = vector3_0.lerp((IVector3) vector3_1, 0.0, vector3_2);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertNotNull(vector3_3);
      
      Vector3 vector3_4 = new Vector3(0.0, 0.0, 2536.791204133);
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertEquals(2536.791204133, vector3_4.z, 0.01);
      assertEquals(2536.791204133, vector3_4.length(), 0.01);
      assertEquals(6435309.613366556, vector3_4.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_4.x(), 0.01);
      assertEquals(2536.791204133, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertNotNull(vector3_4);
      
      Vector3 vector3_5 = vector3_3.cross((IVector3) vector3_0, vector3_4);
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertTrue(vector3_3.equals((Object)vector3_4));
      assertTrue(vector3_4.equals((Object)vector3_2));
      assertTrue(vector3_4.equals((Object)vector3_0));
      assertTrue(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertTrue(vector3_5.equals((Object)vector3_0));
      assertTrue(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertTrue(vector3_5.equals((Object)vector3_3));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_5.x, 0.01);
      assertEquals(0.0, vector3_5.y, 0.01);
      assertEquals(0.0, vector3_5.z, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_5);
      assertNotSame(vector3_3, vector3_4);
      assertNotSame(vector3_3, vector3_5);
      assertNotSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_4);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.0, vector3_4.x(), 0.01);
      assertEquals(0.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(0.0, vector3_4.length(), 0.01);
      assertEquals(0.0, vector3_5.length(), 0.01);
      assertEquals(0.0, vector3_5.x(), 0.01);
      assertEquals(0.0, vector3_5.y(), 0.01);
      assertEquals(0.0, vector3_5.z(), 0.01);
      assertEquals(0.0, vector3_5.lengthSquared(), 0.01);
      assertNotNull(vector3_5);
      
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromVectors(vector3_1, vector3_0);
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion0.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z, 0.01);
      assertEquals(0.7071067811865476, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion0.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z(), 0.01);
      assertEquals((-3.141592653589793), quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.141592653589793), quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      boolean boolean0 = quaternion1.equals(vector3_2);
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertTrue(vector3_2.equals((Object)vector3_5));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(6.123233995736766E-17, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion0.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z, 0.01);
      assertEquals(0.7071067811865476, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_3);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_5);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion0.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z(), 0.01);
      assertEquals((-3.141592653589793), quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.141592653589793), quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z(), 0.01);
      assertFalse(boolean0);
      
      Quaternion quaternion2 = quaternion1.set((IQuaternion) quaternion0);
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion0.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z, 0.01);
      assertEquals(0.7071067811865476, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals((-0.7071067811865476), quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(0.7071067811865476, quaternion2.y, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion0.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z(), 0.01);
      assertEquals((-3.141592653589793), quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.141592653589793), quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals((-0.7071067811865476), quaternion2.z(), 0.01);
      assertEquals(0.7071067811865476, quaternion2.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w(), 0.01);
      assertEquals((-3.141592653589793), quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion1.set(1139.1234373414, 0.7071067811865477, 9.999999747378752E-6, 1800.6136304393);
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(0.7071067811865477, quaternion0.y, 0.01);
      assertEquals(1139.1234373414, quaternion0.x, 0.01);
      assertEquals(1800.6136304393, quaternion0.w, 0.01);
      assertEquals(9.999999747378752E-6, quaternion0.z, 0.01);
      assertEquals(1800.6136304393, quaternion1.w, 0.01);
      assertEquals(9.999999747378752E-6, quaternion1.z, 0.01);
      assertEquals(1139.1234373414, quaternion1.x, 0.01);
      assertEquals(0.7071067811865477, quaternion1.y, 0.01);
      assertEquals(1800.6136304393, quaternion3.w, 0.01);
      assertEquals(0.7071067811865477, quaternion3.y, 0.01);
      assertEquals(1139.1234373414, quaternion3.x, 0.01);
      assertEquals(9.999999747378752E-6, quaternion3.z, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.7071067811865477, quaternion0.y(), 0.01);
      assertEquals(1139.1234373414, quaternion0.x(), 0.01);
      assertEquals(9.999999747378752E-6, quaternion0.z(), 0.01);
      assertEquals(1800.6136304393, quaternion0.w(), 0.01);
      assertEquals(1.570796326795021, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1800.6136304393, quaternion1.w(), 0.01);
      assertEquals(1.570796326795021, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.7071067811865477, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(9.999999747378752E-6, quaternion1.z(), 0.01);
      assertEquals(1139.1234373414, quaternion1.x(), 0.01);
      assertEquals(1800.6136304393, quaternion3.w(), 0.01);
      assertEquals(9.999999747378752E-6, quaternion3.z(), 0.01);
      assertEquals(1.570796326795021, quaternion3.getRotationZ(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1139.1234373414, quaternion3.x(), 0.01);
      assertEquals(0.7071067811865477, quaternion3.y(), 0.01);
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion1.fromAngleAxis(1.1102230246251565E-16, 992.9436393109, 0.0, 0.0);
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(5.5119444525902896E-14, quaternion0.x, 0.01);
      assertEquals(5.5119444525902896E-14, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(5.5119444525902896E-14, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(1.0, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion1);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(5.5119444525902896E-14, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(5.5119444525902896E-14, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(5.5119444525902896E-14, quaternion4.x(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(1.0, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion3.slerpLocal(quaternion0, 0.0);
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(5.5119444525902896E-14, quaternion0.x, 0.01);
      assertEquals(5.5119444525902896E-14, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(5.5119444525902896E-14, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(1.0, quaternion5.w, 0.01);
      assertEquals(5.5119444525902896E-14, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion2);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(5.5119444525902896E-14, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(5.5119444525902896E-14, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(5.5119444525902896E-14, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(1.0, quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertEquals(5.5119444525902896E-14, quaternion5.x(), 0.01);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = new Quaternion((-1792.15), 3.141592653589793, 0.0, 0.0);
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertEquals(3.141592653589793, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.w, 0.01);
      assertEquals((-1792.15), quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertEquals(3.141592653589793, quaternion6.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion6.getRotationZ(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-1792.15), quaternion6.x(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(0.0, quaternion6.w(), 0.01);
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = quaternion5.multLocal(quaternion6);
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(3.141592653589793, quaternion0.y, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion0.z, 0.01);
      assertEquals(9.878231250709688E-11, quaternion0.w, 0.01);
      assertEquals((-1792.15), quaternion0.x, 0.01);
      assertEquals(9.878231250709688E-11, quaternion1.w, 0.01);
      assertEquals((-1792.15), quaternion1.x, 0.01);
      assertEquals(3.141592653589793, quaternion1.y, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion1.z, 0.01);
      assertEquals(9.878231250709688E-11, quaternion3.w, 0.01);
      assertEquals((-1792.15), quaternion3.x, 0.01);
      assertEquals(3.141592653589793, quaternion3.y, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion3.z, 0.01);
      assertEquals((-1792.15), quaternion5.x, 0.01);
      assertEquals(9.878231250709688E-11, quaternion5.w, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion5.z, 0.01);
      assertEquals(3.141592653589793, quaternion5.y, 0.01);
      assertEquals(3.141592653589793, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.w, 0.01);
      assertEquals((-1792.15), quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertEquals(9.878231250709688E-11, quaternion7.w, 0.01);
      assertEquals(3.141592653589793, quaternion7.y, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion7.z, 0.01);
      assertEquals((-1792.15), quaternion7.x, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion7);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion7);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion0);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals((-1792.15), quaternion0.x(), 0.01);
      assertEquals(3.141592653589793, quaternion0.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion0.getRotationZ(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion0.w(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(9.878231250709688E-11, quaternion1.w(), 0.01);
      assertEquals(3.141592653589793, quaternion1.y(), 0.01);
      assertEquals((-1792.15), quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1.57246049271698), quaternion1.getRotationZ(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion3.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion3.getRotationZ(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion3.w(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion3.z(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-1792.15), quaternion3.x(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion5.z(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion5.w(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(3.141592653589793, quaternion5.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion5.getRotationZ(), 0.01);
      assertEquals((-1792.15), quaternion5.x(), 0.01);
      assertEquals(3.141592653589793, quaternion6.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion6.getRotationZ(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-1792.15), quaternion6.x(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(0.0, quaternion6.w(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion7.w(), 0.01);
      assertEquals((-1792.15), quaternion7.x(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-1.57246049271698), quaternion7.getRotationZ(), 0.01);
      assertEquals(3.141592653589793, quaternion7.y(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion7.z(), 0.01);
      assertNotNull(quaternion7);
      
      Quaternion quaternion8 = quaternion5.invert();
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(3.141592653589793, quaternion0.y, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion0.z, 0.01);
      assertEquals(9.878231250709688E-11, quaternion0.w, 0.01);
      assertEquals((-1792.15), quaternion0.x, 0.01);
      assertEquals(9.878231250709688E-11, quaternion1.w, 0.01);
      assertEquals((-1792.15), quaternion1.x, 0.01);
      assertEquals(3.141592653589793, quaternion1.y, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion1.z, 0.01);
      assertEquals(9.878231250709688E-11, quaternion3.w, 0.01);
      assertEquals((-1792.15), quaternion3.x, 0.01);
      assertEquals(3.141592653589793, quaternion3.y, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion3.z, 0.01);
      assertEquals((-1792.15), quaternion5.x, 0.01);
      assertEquals(9.878231250709688E-11, quaternion5.w, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion5.z, 0.01);
      assertEquals(3.141592653589793, quaternion5.y, 0.01);
      assertEquals((-3.141592653589793), quaternion8.y, 0.01);
      assertEquals((-1.7316284199252667E-13), quaternion8.z, 0.01);
      assertEquals(9.878231250709688E-11, quaternion8.w, 0.01);
      assertEquals(1792.15, quaternion8.x, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion8);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion8);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion7);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion3);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals((-1792.15), quaternion0.x(), 0.01);
      assertEquals(3.141592653589793, quaternion0.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion0.getRotationZ(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion0.w(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(9.878231250709688E-11, quaternion1.w(), 0.01);
      assertEquals(3.141592653589793, quaternion1.y(), 0.01);
      assertEquals((-1792.15), quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1.57246049271698), quaternion1.getRotationZ(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion3.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion3.getRotationZ(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion3.w(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion3.z(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-1792.15), quaternion3.x(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion5.z(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion5.w(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(3.141592653589793, quaternion5.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion5.getRotationZ(), 0.01);
      assertEquals((-1792.15), quaternion5.x(), 0.01);
      assertEquals((-1.57246049271698), quaternion8.getRotationZ(), 0.01);
      assertFalse(quaternion8.hasNaN());
      assertEquals((-3.141592653589793), quaternion8.y(), 0.01);
      assertEquals(1792.15, quaternion8.x(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion8.w(), 0.01);
      assertEquals((-1.7316284199252667E-13), quaternion8.z(), 0.01);
      assertNotNull(quaternion8);
      
      double double0 = quaternion8.w();
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion7));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(3.141592653589793, quaternion0.y, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion0.z, 0.01);
      assertEquals(9.878231250709688E-11, quaternion0.w, 0.01);
      assertEquals((-1792.15), quaternion0.x, 0.01);
      assertEquals(9.878231250709688E-11, quaternion1.w, 0.01);
      assertEquals((-1792.15), quaternion1.x, 0.01);
      assertEquals(3.141592653589793, quaternion1.y, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion1.z, 0.01);
      assertEquals(9.878231250709688E-11, quaternion3.w, 0.01);
      assertEquals((-1792.15), quaternion3.x, 0.01);
      assertEquals(3.141592653589793, quaternion3.y, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion3.z, 0.01);
      assertEquals((-1792.15), quaternion5.x, 0.01);
      assertEquals(9.878231250709688E-11, quaternion5.w, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion5.z, 0.01);
      assertEquals(3.141592653589793, quaternion5.y, 0.01);
      assertEquals((-3.141592653589793), quaternion8.y, 0.01);
      assertEquals((-1.7316284199252667E-13), quaternion8.z, 0.01);
      assertEquals(9.878231250709688E-11, quaternion8.w, 0.01);
      assertEquals(1792.15, quaternion8.x, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion8);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion5);
      assertNotSame(quaternion3, quaternion8);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion8);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion7);
      assertNotSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(quaternion8, quaternion2);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion3);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals((-1792.15), quaternion0.x(), 0.01);
      assertEquals(3.141592653589793, quaternion0.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion0.getRotationZ(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion0.w(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(9.878231250709688E-11, quaternion1.w(), 0.01);
      assertEquals(3.141592653589793, quaternion1.y(), 0.01);
      assertEquals((-1792.15), quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1.57246049271698), quaternion1.getRotationZ(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion3.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion3.getRotationZ(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion3.w(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion3.z(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-1792.15), quaternion3.x(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion5.z(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion5.w(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(3.141592653589793, quaternion5.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion5.getRotationZ(), 0.01);
      assertEquals((-1792.15), quaternion5.x(), 0.01);
      assertEquals((-1.57246049271698), quaternion8.getRotationZ(), 0.01);
      assertFalse(quaternion8.hasNaN());
      assertEquals((-3.141592653589793), quaternion8.y(), 0.01);
      assertEquals(1792.15, quaternion8.x(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion8.w(), 0.01);
      assertEquals((-1.7316284199252667E-13), quaternion8.z(), 0.01);
      assertEquals(9.878231250709688E-11, double0, 0.01);
      
      Vector3 vector3_6 = quaternion6.toAngles();
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertEquals(0.0, vector3_6.y, 0.01);
      assertEquals(3.141592653589793, vector3_6.x, 0.01);
      assertEquals((-1.57246049271698), vector3_6.z, 0.01);
      assertEquals(3.141592653589793, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.w, 0.01);
      assertEquals((-1792.15), quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion7);
      assertEquals(12.342236402245085, vector3_6.lengthSquared(), 0.01);
      assertEquals(3.51315191846938, vector3_6.length(), 0.01);
      assertEquals(0.0, vector3_6.y(), 0.01);
      assertEquals(3.141592653589793, vector3_6.x(), 0.01);
      assertEquals((-1.57246049271698), vector3_6.z(), 0.01);
      assertEquals(3.141592653589793, quaternion6.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion6.getRotationZ(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-1792.15), quaternion6.x(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(0.0, quaternion6.w(), 0.01);
      assertNotNull(vector3_6);
      
      Quaternion quaternion9 = new Quaternion(quaternion6);
      assertTrue(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertEquals(0.0, quaternion9.z, 0.01);
      assertEquals((-1792.15), quaternion9.x, 0.01);
      assertEquals(0.0, quaternion9.w, 0.01);
      assertEquals(3.141592653589793, quaternion9.y, 0.01);
      assertEquals(3.141592653589793, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.w, 0.01);
      assertEquals((-1792.15), quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertEquals(0.0, quaternion9.z(), 0.01);
      assertEquals((-1792.15), quaternion9.x(), 0.01);
      assertEquals(0.0, quaternion9.w(), 0.01);
      assertEquals(3.141592653589793, quaternion9.y(), 0.01);
      assertFalse(quaternion9.hasNaN());
      assertEquals((-1.57246049271698), quaternion9.getRotationZ(), 0.01);
      assertEquals(3.141592653589793, quaternion6.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion6.getRotationZ(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-1792.15), quaternion6.x(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(0.0, quaternion6.w(), 0.01);
      assertNotNull(quaternion9);
      
      boolean boolean1 = quaternion1.equals(quaternion9);
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_6));
      assertTrue(vector3_0.equals((Object)vector3_5));
      assertTrue(vector3_0.equals((Object)vector3_4));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_1.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertTrue(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertTrue(boolean1 == boolean0);
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertTrue(quaternion6.equals((Object)quaternion9));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion8));
      assertFalse(quaternion6.equals((Object)quaternion7));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(0.0, quaternion9.z, 0.01);
      assertEquals((-1792.15), quaternion9.x, 0.01);
      assertEquals(0.0, quaternion9.w, 0.01);
      assertEquals(3.141592653589793, quaternion9.y, 0.01);
      assertEquals(3.141592653589793, quaternion0.y, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion0.z, 0.01);
      assertEquals(9.878231250709688E-11, quaternion0.w, 0.01);
      assertEquals((-1792.15), quaternion0.x, 0.01);
      assertEquals(9.878231250709688E-11, quaternion1.w, 0.01);
      assertEquals((-1792.15), quaternion1.x, 0.01);
      assertEquals(3.141592653589793, quaternion1.y, 0.01);
      assertEquals(1.7316284199252667E-13, quaternion1.z, 0.01);
      assertEquals(3.141592653589793, quaternion6.y, 0.01);
      assertEquals(0.0, quaternion6.w, 0.01);
      assertEquals((-1792.15), quaternion6.x, 0.01);
      assertEquals(0.0, quaternion6.z, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion7);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion8);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion8);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion8);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion9);
      assertNotSame(quaternion6, quaternion7);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion9.z(), 0.01);
      assertEquals((-1792.15), quaternion9.x(), 0.01);
      assertEquals(0.0, quaternion9.w(), 0.01);
      assertEquals(3.141592653589793, quaternion9.y(), 0.01);
      assertFalse(quaternion9.hasNaN());
      assertEquals((-1.57246049271698), quaternion9.getRotationZ(), 0.01);
      assertEquals((-1792.15), quaternion0.x(), 0.01);
      assertEquals(3.141592653589793, quaternion0.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion0.getRotationZ(), 0.01);
      assertEquals(9.878231250709688E-11, quaternion0.w(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(9.878231250709688E-11, quaternion1.w(), 0.01);
      assertEquals(3.141592653589793, quaternion1.y(), 0.01);
      assertEquals((-1792.15), quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1.57246049271698), quaternion1.getRotationZ(), 0.01);
      assertEquals(1.7316284199252667E-13, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion6.y(), 0.01);
      assertEquals((-1.57246049271698), quaternion6.getRotationZ(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-1792.15), quaternion6.x(), 0.01);
      assertEquals(0.0, quaternion6.z(), 0.01);
      assertEquals(0.0, quaternion6.w(), 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.integrateLocal((IVector3) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.integrate((IVector3) vector3_0, 3.4028234663852886E38);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(0.5773502691896257, quaternion1.x, 0.01);
      assertEquals(9.972189668879129E-78, quaternion1.w, 0.01);
      assertEquals(0.5773502691896257, quaternion1.z, 0.01);
      assertEquals(0.5773502691896257, quaternion1.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(0.5773502691896257, quaternion1.z(), 0.01);
      assertEquals(9.972189668879129E-78, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.5773502691896257, quaternion1.x(), 0.01);
      assertEquals(0.5773502691896257, quaternion1.y(), 0.01);
      assertEquals(2.0344439357957027, quaternion1.getRotationZ(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3.141592653589793), (-3.141592653589793), 170.619162857019, (-3.141592653589793));
      assertEquals((-3.141592653589793), quaternion0.w, 0.01);
      assertEquals((-3.141592653589793), quaternion0.y, 0.01);
      assertEquals((-3.141592653589793), quaternion0.x, 0.01);
      assertEquals(170.619162857019, quaternion0.z, 0.01);
      assertEquals((-3.141592653589793), quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.141592653589793), quaternion0.x(), 0.01);
      assertEquals(170.619162857019, quaternion0.z(), 0.01);
      assertEquals((-3.141592653589793), quaternion0.w(), 0.01);
      assertEquals((-3.1235265748345866), quaternion0.getRotationZ(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertNotNull(vector3_0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = (-1850.66968911);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-3.141592653589793);
      Vector3 vector3_1 = new Vector3(doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-1850.66968911), (-1.0), (-3.141592653589793)}, doubleArray0, 0.01);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals((-3.141592653589793), vector3_1.z, 0.01);
      assertEquals((-3.141592653589793), vector3_1.y, 0.01);
      assertEquals((-3.141592653589793), vector3_1.x, 0.01);
      assertEquals(5.441398092702653, vector3_1.length(), 0.01);
      assertEquals((-3.141592653589793), vector3_1.y(), 0.01);
      assertEquals((-3.141592653589793), vector3_1.x(), 0.01);
      assertEquals(29.608813203268074, vector3_1.lengthSquared(), 0.01);
      assertEquals((-3.141592653589793), vector3_1.z(), 0.01);
      assertNotNull(vector3_1);
      assertEquals(6, doubleArray0.length);
      
      Vector3 vector3_2 = quaternion0.toAngles(vector3_1);
      assertArrayEquals(new double[] {(-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-1850.66968911), (-1.0), (-3.141592653589793)}, doubleArray0, 0.01);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals((-3.141592653589793), quaternion0.w, 0.01);
      assertEquals((-3.141592653589793), quaternion0.y, 0.01);
      assertEquals((-3.141592653589793), quaternion0.x, 0.01);
      assertEquals(170.619162857019, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(1.5707963267948966, vector3_1.y, 0.01);
      assertEquals((-3.1228489532511174), vector3_1.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(1.5707963267948966, vector3_2.y, 0.01);
      assertEquals((-3.1228489532511174), vector3_2.z, 0.01);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertEquals((-3.141592653589793), quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.141592653589793), quaternion0.x(), 0.01);
      assertEquals(170.619162857019, quaternion0.z(), 0.01);
      assertEquals((-3.141592653589793), quaternion0.w(), 0.01);
      assertEquals((-3.1235265748345866), quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals((-3.1228489532511174), vector3_1.z(), 0.01);
      assertEquals(1.5707963267948966, vector3_1.y(), 0.01);
      assertEquals(12.21958668509394, vector3_1.lengthSquared(), 0.01);
      assertEquals(3.495652540670188, vector3_1.length(), 0.01);
      assertEquals((-3.1228489532511174), vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(1.5707963267948966, vector3_2.y(), 0.01);
      assertEquals(12.21958668509394, vector3_2.lengthSquared(), 0.01);
      assertEquals(3.495652540670188, vector3_2.length(), 0.01);
      assertNotNull(vector3_2);
      assertEquals(6, doubleArray0.length);
      
      Quaternion quaternion1 = quaternion0.integrateLocal(vector3_0, (-3.4028234663852886E38));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertEquals(0.9994918355807648, quaternion0.w, 0.01);
      assertEquals((-0.018403537770343325), quaternion0.x, 0.01);
      assertEquals(0.018403537770343325, quaternion0.y, 0.01);
      assertEquals(0.018403537770343325, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.9994918355807648, quaternion1.w, 0.01);
      assertEquals(0.018403537770343325, quaternion1.z, 0.01);
      assertEquals(0.018403537770343325, quaternion1.y, 0.01);
      assertEquals((-0.018403537770343325), quaternion1.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.03614423130933106, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.018403537770343325, quaternion0.y(), 0.01);
      assertEquals((-0.018403537770343325), quaternion0.x(), 0.01);
      assertEquals(0.018403537770343325, quaternion0.z(), 0.01);
      assertEquals(0.9994918355807648, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.03614423130933106, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.9994918355807648, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.018403537770343325, quaternion1.y(), 0.01);
      assertEquals(0.018403537770343325, quaternion1.z(), 0.01);
      assertEquals((-0.018403537770343325), quaternion1.x(), 0.01);
      assertNotNull(quaternion1);
      
      Vector3 vector3_3 = vector3_2.normalize(vector3_1);
      assertArrayEquals(new double[] {(-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-1850.66968911), (-1.0), (-3.141592653589793)}, doubleArray0, 0.01);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertEquals(0.9994918355807648, quaternion0.w, 0.01);
      assertEquals((-0.018403537770343325), quaternion0.x, 0.01);
      assertEquals(0.018403537770343325, quaternion0.y, 0.01);
      assertEquals(0.018403537770343325, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.44935711101703, vector3_1.y, 0.01);
      assertEquals((-0.893352218768403), vector3_1.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals((-0.893352218768403), vector3_2.z, 0.01);
      assertEquals(0.44935711101703, vector3_2.y, 0.01);
      assertEquals((-0.893352218768403), vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.44935711101703, vector3_3.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertEquals(0.03614423130933106, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.018403537770343325, quaternion0.y(), 0.01);
      assertEquals((-0.018403537770343325), quaternion0.x(), 0.01);
      assertEquals(0.018403537770343325, quaternion0.z(), 0.01);
      assertEquals(0.9994918355807648, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.44935711101703, vector3_1.y(), 0.01);
      assertEquals((-0.893352218768403), vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.44935711101703, vector3_2.y(), 0.01);
      assertEquals((-0.893352218768403), vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(1.0, vector3_2.length(), 0.01);
      assertEquals(0.44935711101703, vector3_3.y(), 0.01);
      assertEquals((-0.893352218768403), vector3_3.z(), 0.01);
      assertEquals(1.0, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(1.0, vector3_3.length(), 0.01);
      assertNotNull(vector3_3);
      assertEquals(6, doubleArray0.length);
      
      Vector3 vector3_4 = new Vector3(0.018403537770343325, 0.0, 170.619162857019);
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertEquals(0.018403537770343325, vector3_4.x, 0.01);
      assertEquals(170.619162857019, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(29110.899072720178, vector3_4.lengthSquared(), 0.01);
      assertEquals(170.619162857019, vector3_4.z(), 0.01);
      assertEquals(0.018403537770343325, vector3_4.x(), 0.01);
      assertEquals(170.6191638495517, vector3_4.length(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertNotNull(vector3_4);
      
      Vector3 vector3_5 = vector3_4.normalizeLocal();
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertEquals(0.9999999941827595, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_5.y, 0.01);
      assertEquals(0.9999999941827595, vector3_5.z, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_5.x, 0.01);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_1);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x(), 0.01);
      assertEquals(0.9999999941827595, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(0.0, vector3_5.y(), 0.01);
      assertEquals(1.0, vector3_5.lengthSquared(), 0.01);
      assertEquals(0.9999999941827595, vector3_5.z(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_5.x(), 0.01);
      assertEquals(1.0, vector3_5.length(), 0.01);
      assertNotNull(vector3_5);
      
      Quaternion quaternion2 = quaternion0.fromVectorFromNegativeZ((IVector3) vector3_4);
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertEquals(5.393162554157709E-5, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals((-0.9999999985456899), quaternion0.y, 0.01);
      assertEquals(0.9999999941827595, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x, 0.01);
      assertEquals((-0.9999999985456899), quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(5.393162554157709E-5, quaternion2.w, 0.01);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(5.393162554157709E-5, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals((-0.9999999985456899), quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x(), 0.01);
      assertEquals(0.9999999941827595, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertEquals(5.393162554157709E-5, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals((-0.9999999985456899), quaternion2.y(), 0.01);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion2.fromAngles(vector3_4);
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertEquals(2.5856198557790565E-5, quaternion3.y, 0.01);
      assertEquals(0.47942553535441523, quaternion3.z, 0.01);
      assertEquals(0.8775825620085623, quaternion3.w, 0.01);
      assertEquals(4.732945431739188E-5, quaternion3.x, 0.01);
      assertEquals(4.732945431739188E-5, quaternion0.x, 0.01);
      assertEquals(0.8775825620085623, quaternion0.w, 0.01);
      assertEquals(2.5856198557790565E-5, quaternion0.y, 0.01);
      assertEquals(0.47942553535441523, quaternion0.z, 0.01);
      assertEquals(0.9999999941827595, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x, 0.01);
      assertEquals(4.732945431739188E-5, quaternion2.x, 0.01);
      assertEquals(2.5856198557790565E-5, quaternion2.y, 0.01);
      assertEquals(0.8775825620085623, quaternion2.w, 0.01);
      assertEquals(0.47942553535441523, quaternion2.z, 0.01);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertEquals(0.47942553535441523, quaternion3.z(), 0.01);
      assertEquals(0.9999999941827596, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.8775825620085623, quaternion3.w(), 0.01);
      assertEquals(2.5856198557790565E-5, quaternion3.y(), 0.01);
      assertEquals(4.732945431739188E-5, quaternion3.x(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(4.732945431739188E-5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.9999999941827596, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.47942553535441523, quaternion0.z(), 0.01);
      assertEquals(0.8775825620085623, quaternion0.w(), 0.01);
      assertEquals(2.5856198557790565E-5, quaternion0.y(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x(), 0.01);
      assertEquals(0.9999999941827595, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(2.5856198557790565E-5, quaternion2.y(), 0.01);
      assertEquals(0.9999999941827596, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.47942553535441523, quaternion2.z(), 0.01);
      assertEquals(0.8775825620085623, quaternion2.w(), 0.01);
      assertEquals(4.732945431739188E-5, quaternion2.x(), 0.01);
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion1.integrate((IVector3) vector3_5, 0.9999999941827595);
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertEquals(4.732945431739188E-5, quaternion0.x, 0.01);
      assertEquals(0.8775825620085623, quaternion0.w, 0.01);
      assertEquals(2.5856198557790565E-5, quaternion0.y, 0.01);
      assertEquals(0.47942553535441523, quaternion0.z, 0.01);
      assertEquals(0.8212780854212098, quaternion4.z, 0.01);
      assertEquals(7.31022581626169E-5, quaternion4.x, 0.01);
      assertEquals(0.5705280892426915, quaternion4.w, 0.01);
      assertEquals(2.116637537365241E-5, quaternion4.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.8775825620085623, quaternion1.w, 0.01);
      assertEquals(4.732945431739188E-5, quaternion1.x, 0.01);
      assertEquals(2.5856198557790565E-5, quaternion1.y, 0.01);
      assertEquals(0.47942553535441523, quaternion1.z, 0.01);
      assertEquals(0.9999999941827595, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_5.y, 0.01);
      assertEquals(0.9999999941827595, vector3_5.z, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_5.x, 0.01);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_1);
      assertEquals(4.732945431739188E-5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.9999999941827596, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.47942553535441523, quaternion0.z(), 0.01);
      assertEquals(0.8775825620085623, quaternion0.w(), 0.01);
      assertEquals(2.5856198557790565E-5, quaternion0.y(), 0.01);
      assertEquals(2.116637537365241E-5, quaternion4.y(), 0.01);
      assertEquals(1.9272952023819472, quaternion4.getRotationZ(), 0.01);
      assertEquals(7.31022581626169E-5, quaternion4.x(), 0.01);
      assertEquals(0.5705280892426915, quaternion4.w(), 0.01);
      assertEquals(0.8212780854212098, quaternion4.z(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(4.732945431739188E-5, quaternion1.x(), 0.01);
      assertEquals(0.9999999941827596, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.8775825620085623, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2.5856198557790565E-5, quaternion1.y(), 0.01);
      assertEquals(0.47942553535441523, quaternion1.z(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x(), 0.01);
      assertEquals(0.9999999941827595, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(0.0, vector3_5.y(), 0.01);
      assertEquals(1.0, vector3_5.lengthSquared(), 0.01);
      assertEquals(0.9999999941827595, vector3_5.z(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_5.x(), 0.01);
      assertEquals(1.0, vector3_5.length(), 0.01);
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion4.slerp((IQuaternion) quaternion1, 7.310137220021595E-5, quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertEquals(0.8212587478833796, quaternion0.z, 0.01);
      assertEquals(2.116690014691569E-5, quaternion0.y, 0.01);
      assertEquals(7.310088975960507E-5, quaternion0.x, 0.01);
      assertEquals(0.570555924720133, quaternion0.w, 0.01);
      assertEquals(0.8212780854212098, quaternion4.z, 0.01);
      assertEquals(7.31022581626169E-5, quaternion4.x, 0.01);
      assertEquals(0.5705280892426915, quaternion4.w, 0.01);
      assertEquals(2.116637537365241E-5, quaternion4.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.570555924720133, quaternion5.w, 0.01);
      assertEquals(2.116690014691569E-5, quaternion5.y, 0.01);
      assertEquals(0.8212587478833796, quaternion5.z, 0.01);
      assertEquals(7.310088975960507E-5, quaternion5.x, 0.01);
      assertEquals(0.8212587478833796, quaternion1.z, 0.01);
      assertEquals(7.310088975960507E-5, quaternion1.x, 0.01);
      assertEquals(0.570555924720133, quaternion1.w, 0.01);
      assertEquals(2.116690014691569E-5, quaternion1.y, 0.01);
      assertEquals(0.9999999941827595, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_5.y, 0.01);
      assertEquals(0.9999999941827595, vector3_5.z, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_5.x, 0.01);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_1);
      assertEquals(1.9272274158295664, quaternion0.getRotationZ(), 0.01);
      assertEquals(2.116690014691569E-5, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.570555924720133, quaternion0.w(), 0.01);
      assertEquals(7.310088975960507E-5, quaternion0.x(), 0.01);
      assertEquals(0.8212587478833796, quaternion0.z(), 0.01);
      assertEquals(2.116637537365241E-5, quaternion4.y(), 0.01);
      assertEquals(1.9272952023819472, quaternion4.getRotationZ(), 0.01);
      assertEquals(7.31022581626169E-5, quaternion4.x(), 0.01);
      assertEquals(0.5705280892426915, quaternion4.w(), 0.01);
      assertEquals(0.8212780854212098, quaternion4.z(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.9272274158295664, quaternion5.getRotationZ(), 0.01);
      assertEquals(2.116690014691569E-5, quaternion5.y(), 0.01);
      assertEquals(7.310088975960507E-5, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.8212587478833796, quaternion5.z(), 0.01);
      assertEquals(0.570555924720133, quaternion5.w(), 0.01);
      assertEquals(1.9272274158295664, quaternion1.getRotationZ(), 0.01);
      assertEquals(7.310088975960507E-5, quaternion1.x(), 0.01);
      assertEquals(0.8212587478833796, quaternion1.z(), 0.01);
      assertEquals(2.116690014691569E-5, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.570555924720133, quaternion1.w(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x(), 0.01);
      assertEquals(0.9999999941827595, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(0.0, vector3_5.y(), 0.01);
      assertEquals(1.0, vector3_5.lengthSquared(), 0.01);
      assertEquals(0.9999999941827595, vector3_5.z(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_5.x(), 0.01);
      assertEquals(1.0, vector3_5.length(), 0.01);
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = new Quaternion(doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-1850.66968911), (-1.0), (-3.141592653589793)}, doubleArray0, 0.01);
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertEquals((-3.141592653589793), quaternion6.y, 0.01);
      assertEquals((-3.141592653589793), quaternion6.x, 0.01);
      assertEquals((-3.141592653589793), quaternion6.z, 0.01);
      assertEquals((-1850.66968911), quaternion6.w, 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-3.141592653589793), quaternion6.z(), 0.01);
      assertEquals((-3.141592653589793), quaternion6.y(), 0.01);
      assertEquals((-3.141592653589793), quaternion6.x(), 0.01);
      assertEquals(1.5740997957873033, quaternion6.getRotationZ(), 0.01);
      assertEquals((-1850.66968911), quaternion6.w(), 0.01);
      assertNotNull(quaternion6);
      assertEquals(6, doubleArray0.length);
      
      quaternion6.z = (-3.141592653589793);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-3.141592653589793), quaternion6.z(), 0.01);
      assertEquals((-3.141592653589793), quaternion6.y(), 0.01);
      assertEquals((-3.141592653589793), quaternion6.x(), 0.01);
      assertEquals(1.5740997957873033, quaternion6.getRotationZ(), 0.01);
      assertEquals((-1850.66968911), quaternion6.w(), 0.01);
      
      boolean boolean0 = quaternion2.equals(quaternion6);
      assertArrayEquals(new double[] {(-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-1850.66968911), (-1.0), (-3.141592653589793)}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(quaternion2.equals((Object)quaternion4));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertEquals(0.8212587478833796, quaternion0.z, 0.01);
      assertEquals(2.116690014691569E-5, quaternion0.y, 0.01);
      assertEquals(7.310088975960507E-5, quaternion0.x, 0.01);
      assertEquals(0.570555924720133, quaternion0.w, 0.01);
      assertEquals((-3.141592653589793), quaternion6.y, 0.01);
      assertEquals((-3.141592653589793), quaternion6.x, 0.01);
      assertEquals((-3.141592653589793), quaternion6.z, 0.01);
      assertEquals((-1850.66968911), quaternion6.w, 0.01);
      assertEquals(0.9999999941827595, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x, 0.01);
      assertEquals(2.116690014691569E-5, quaternion2.y, 0.01);
      assertEquals(0.8212587478833796, quaternion2.z, 0.01);
      assertEquals(0.570555924720133, quaternion2.w, 0.01);
      assertEquals(7.310088975960507E-5, quaternion2.x, 0.01);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion5);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion5);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion6);
      assertEquals(1.9272274158295664, quaternion0.getRotationZ(), 0.01);
      assertEquals(2.116690014691569E-5, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.570555924720133, quaternion0.w(), 0.01);
      assertEquals(7.310088975960507E-5, quaternion0.x(), 0.01);
      assertEquals(0.8212587478833796, quaternion0.z(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-3.141592653589793), quaternion6.z(), 0.01);
      assertEquals((-3.141592653589793), quaternion6.y(), 0.01);
      assertEquals((-3.141592653589793), quaternion6.x(), 0.01);
      assertEquals(1.5740997957873033, quaternion6.getRotationZ(), 0.01);
      assertEquals((-1850.66968911), quaternion6.w(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x(), 0.01);
      assertEquals(0.9999999941827595, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(1.9272274158295664, quaternion2.getRotationZ(), 0.01);
      assertEquals(7.310088975960507E-5, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.570555924720133, quaternion2.w(), 0.01);
      assertEquals(2.116690014691569E-5, quaternion2.y(), 0.01);
      assertEquals(0.8212587478833796, quaternion2.z(), 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      Quaternion quaternion7 = quaternion4.integrate((IVector3) vector3_4, 1566.23, quaternion6);
      assertArrayEquals(new double[] {(-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-1850.66968911), (-1.0), (-3.141592653589793)}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertEquals(0.8212587478833796, quaternion0.z, 0.01);
      assertEquals(2.116690014691569E-5, quaternion0.y, 0.01);
      assertEquals(7.310088975960507E-5, quaternion0.x, 0.01);
      assertEquals(0.570555924720133, quaternion0.w, 0.01);
      assertEquals(0.8212780854212098, quaternion4.z, 0.01);
      assertEquals(7.31022581626169E-5, quaternion4.x, 0.01);
      assertEquals(0.5705280892426915, quaternion4.w, 0.01);
      assertEquals(2.116637537365241E-5, quaternion4.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(4.046595454955364E-5, quaternion6.x, 0.01);
      assertEquals(0.5715763546145871, quaternion6.z, 0.01);
      assertEquals((-1.5456425850599473E-5), quaternion6.y, 0.01);
      assertEquals((-0.8205488827419759), quaternion6.w, 0.01);
      assertEquals((-0.8205488827419759), quaternion7.w, 0.01);
      assertEquals(4.046595454955364E-5, quaternion7.x, 0.01);
      assertEquals(0.5715763546145871, quaternion7.z, 0.01);
      assertEquals((-1.5456425850599473E-5), quaternion7.y, 0.01);
      assertEquals(0.8212587478833796, quaternion1.z, 0.01);
      assertEquals(7.310088975960507E-5, quaternion1.x, 0.01);
      assertEquals(0.570555924720133, quaternion1.w, 0.01);
      assertEquals(2.116690014691569E-5, quaternion1.y, 0.01);
      assertEquals(0.9999999941827595, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_5.y, 0.01);
      assertEquals(0.9999999941827595, vector3_5.z, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_5.x, 0.01);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion0);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion0);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_1);
      assertEquals(1.9272274158295664, quaternion0.getRotationZ(), 0.01);
      assertEquals(2.116690014691569E-5, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.570555924720133, quaternion0.w(), 0.01);
      assertEquals(7.310088975960507E-5, quaternion0.x(), 0.01);
      assertEquals(0.8212587478833796, quaternion0.z(), 0.01);
      assertEquals(2.116637537365241E-5, quaternion4.y(), 0.01);
      assertEquals(1.9272952023819472, quaternion4.getRotationZ(), 0.01);
      assertEquals(7.31022581626169E-5, quaternion4.x(), 0.01);
      assertEquals(0.5705280892426915, quaternion4.w(), 0.01);
      assertEquals(0.8212780854212098, quaternion4.z(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-0.8205488827419759), quaternion6.w(), 0.01);
      assertEquals(0.5715763546145871, quaternion6.z(), 0.01);
      assertEquals((-1.2168513413430695), quaternion6.getRotationZ(), 0.01);
      assertEquals((-1.5456425850599473E-5), quaternion6.y(), 0.01);
      assertEquals(4.046595454955364E-5, quaternion6.x(), 0.01);
      assertEquals((-0.8205488827419759), quaternion7.w(), 0.01);
      assertEquals((-1.5456425850599473E-5), quaternion7.y(), 0.01);
      assertEquals(4.046595454955364E-5, quaternion7.x(), 0.01);
      assertEquals(0.5715763546145871, quaternion7.z(), 0.01);
      assertEquals((-1.2168513413430695), quaternion7.getRotationZ(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals(1.9272274158295664, quaternion1.getRotationZ(), 0.01);
      assertEquals(7.310088975960507E-5, quaternion1.x(), 0.01);
      assertEquals(0.8212587478833796, quaternion1.z(), 0.01);
      assertEquals(2.116690014691569E-5, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.570555924720133, quaternion1.w(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x(), 0.01);
      assertEquals(0.9999999941827595, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(0.0, vector3_5.y(), 0.01);
      assertEquals(1.0, vector3_5.lengthSquared(), 0.01);
      assertEquals(0.9999999941827595, vector3_5.z(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_5.x(), 0.01);
      assertEquals(1.0, vector3_5.length(), 0.01);
      assertNotNull(quaternion7);
      assertEquals(6, doubleArray0.length);
      
      Quaternion quaternion8 = quaternion7.fromAxes(vector3_2, vector3_5, vector3_5);
      assertArrayEquals(new double[] {(-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-1850.66968911), (-1.0), (-3.141592653589793)}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion3));
      assertFalse(quaternion7.equals((Object)quaternion1));
      assertFalse(quaternion7.equals((Object)quaternion4));
      assertFalse(quaternion7.equals((Object)quaternion2));
      assertFalse(quaternion7.equals((Object)quaternion5));
      assertFalse(quaternion7.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion2));
      assertFalse(quaternion8.equals((Object)quaternion1));
      assertFalse(quaternion8.equals((Object)quaternion4));
      assertFalse(quaternion8.equals((Object)quaternion3));
      assertFalse(quaternion8.equals((Object)quaternion0));
      assertFalse(quaternion8.equals((Object)quaternion5));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_1.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertEquals(0.8212587478833796, quaternion0.z, 0.01);
      assertEquals(2.116690014691569E-5, quaternion0.y, 0.01);
      assertEquals(7.310088975960507E-5, quaternion0.x, 0.01);
      assertEquals(0.570555924720133, quaternion0.w, 0.01);
      assertEquals(0.8212780854212098, quaternion4.z, 0.01);
      assertEquals(7.31022581626169E-5, quaternion4.x, 0.01);
      assertEquals(0.5705280892426915, quaternion4.w, 0.01);
      assertEquals(2.116637537365241E-5, quaternion4.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.707106780158195, quaternion6.z, 0.01);
      assertEquals(3.813541814084953E-5, quaternion6.x, 0.01);
      assertEquals(3.813541814084953E-5, quaternion6.y, 0.01);
      assertEquals(0.707106780158195, quaternion6.w, 0.01);
      assertEquals(0.707106780158195, quaternion7.z, 0.01);
      assertEquals(0.707106780158195, quaternion7.w, 0.01);
      assertEquals(3.813541814084953E-5, quaternion7.y, 0.01);
      assertEquals(3.813541814084953E-5, quaternion7.x, 0.01);
      assertEquals(0.707106780158195, quaternion8.w, 0.01);
      assertEquals(0.707106780158195, quaternion8.z, 0.01);
      assertEquals(3.813541814084953E-5, quaternion8.x, 0.01);
      assertEquals(3.813541814084953E-5, quaternion8.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.44935711101703, vector3_1.y, 0.01);
      assertEquals((-0.893352218768403), vector3_1.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals((-0.893352218768403), vector3_2.z, 0.01);
      assertEquals(0.44935711101703, vector3_2.y, 0.01);
      assertEquals(0.8212587478833796, quaternion1.z, 0.01);
      assertEquals(7.310088975960507E-5, quaternion1.x, 0.01);
      assertEquals(0.570555924720133, quaternion1.w, 0.01);
      assertEquals(2.116690014691569E-5, quaternion1.y, 0.01);
      assertEquals(0.9999999941827595, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_5.y, 0.01);
      assertEquals(0.9999999941827595, vector3_5.z, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_5.x, 0.01);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion7);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion3);
      assertNotSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion7);
      assertNotSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion8);
      assertNotSame(quaternion6, quaternion2);
      assertNotSame(quaternion6, quaternion5);
      assertNotSame(quaternion7, quaternion3);
      assertNotSame(quaternion7, quaternion1);
      assertNotSame(quaternion7, quaternion4);
      assertNotSame(quaternion7, quaternion2);
      assertNotSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion6);
      assertNotSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion8);
      assertNotSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion6);
      assertNotSame(quaternion8, quaternion1);
      assertNotSame(quaternion8, quaternion4);
      assertNotSame(quaternion8, quaternion3);
      assertNotSame(quaternion8, quaternion0);
      assertSame(quaternion8, quaternion7);
      assertNotSame(quaternion8, quaternion5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_4);
      assertSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_5);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_3);
      assertNotSame(quaternion1, quaternion4);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_1);
      assertEquals(1.9272274158295664, quaternion0.getRotationZ(), 0.01);
      assertEquals(2.116690014691569E-5, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.570555924720133, quaternion0.w(), 0.01);
      assertEquals(7.310088975960507E-5, quaternion0.x(), 0.01);
      assertEquals(0.8212587478833796, quaternion0.z(), 0.01);
      assertEquals(2.116637537365241E-5, quaternion4.y(), 0.01);
      assertEquals(1.9272952023819472, quaternion4.getRotationZ(), 0.01);
      assertEquals(7.31022581626169E-5, quaternion4.x(), 0.01);
      assertEquals(0.5705280892426915, quaternion4.w(), 0.01);
      assertEquals(0.8212780854212098, quaternion4.z(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals(0.707106780158195, quaternion6.w(), 0.01);
      assertEquals(1.5707963267948966, quaternion6.getRotationZ(), 0.01);
      assertEquals(3.813541814084953E-5, quaternion6.x(), 0.01);
      assertEquals(3.813541814084953E-5, quaternion6.y(), 0.01);
      assertEquals(0.707106780158195, quaternion6.z(), 0.01);
      assertEquals(1.5707963267948966, quaternion7.getRotationZ(), 0.01);
      assertEquals(3.813541814084953E-5, quaternion7.y(), 0.01);
      assertEquals(3.813541814084953E-5, quaternion7.x(), 0.01);
      assertEquals(0.707106780158195, quaternion7.z(), 0.01);
      assertEquals(0.707106780158195, quaternion7.w(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals(0.707106780158195, quaternion8.w(), 0.01);
      assertEquals(1.5707963267948966, quaternion8.getRotationZ(), 0.01);
      assertFalse(quaternion8.hasNaN());
      assertEquals(3.813541814084953E-5, quaternion8.x(), 0.01);
      assertEquals(3.813541814084953E-5, quaternion8.y(), 0.01);
      assertEquals(0.707106780158195, quaternion8.z(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.44935711101703, vector3_1.y(), 0.01);
      assertEquals((-0.893352218768403), vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.44935711101703, vector3_2.y(), 0.01);
      assertEquals((-0.893352218768403), vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(1.0, vector3_2.length(), 0.01);
      assertEquals(1.9272274158295664, quaternion1.getRotationZ(), 0.01);
      assertEquals(7.310088975960507E-5, quaternion1.x(), 0.01);
      assertEquals(0.8212587478833796, quaternion1.z(), 0.01);
      assertEquals(2.116690014691569E-5, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.570555924720133, quaternion1.w(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x(), 0.01);
      assertEquals(0.9999999941827595, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(0.0, vector3_5.y(), 0.01);
      assertEquals(1.0, vector3_5.lengthSquared(), 0.01);
      assertEquals(0.9999999941827595, vector3_5.z(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_5.x(), 0.01);
      assertEquals(1.0, vector3_5.length(), 0.01);
      assertNotNull(quaternion8);
      assertEquals(6, doubleArray0.length);
      
      Quaternion quaternion9 = new Quaternion(0.44935711101703, 0.8212655654477166, 3320.255, 2828.0);
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertEquals(0.44935711101703, quaternion9.x, 0.01);
      assertEquals(2828.0, quaternion9.w, 0.01);
      assertEquals(3320.255, quaternion9.z, 0.01);
      assertEquals(0.8212655654477166, quaternion9.y, 0.01);
      assertEquals(0.44935711101703, quaternion9.x(), 0.01);
      assertEquals(2.436088236657885, quaternion9.getRotationZ(), 0.01);
      assertEquals(3320.255, quaternion9.z(), 0.01);
      assertEquals(2828.0, quaternion9.w(), 0.01);
      assertFalse(quaternion9.hasNaN());
      assertEquals(0.8212655654477166, quaternion9.y(), 0.01);
      assertNotNull(quaternion9);
      
      Quaternion quaternion10 = quaternion5.mult((IQuaternion) quaternion9, quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion0.equals((Object)quaternion7));
      assertFalse(quaternion0.equals((Object)quaternion4));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion6));
      assertFalse(quaternion4.equals((Object)quaternion5));
      assertFalse(quaternion4.equals((Object)quaternion7));
      assertFalse(quaternion4.equals((Object)quaternion8));
      assertFalse(quaternion4.equals((Object)quaternion1));
      assertFalse(quaternion4.equals((Object)quaternion3));
      assertFalse(quaternion4.equals((Object)quaternion9));
      assertFalse(quaternion4.equals((Object)quaternion0));
      assertFalse(quaternion4.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion5.equals((Object)quaternion7));
      assertFalse(quaternion5.equals((Object)quaternion4));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion6));
      assertFalse(quaternion10.equals((Object)quaternion8));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion10.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion4));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion8));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertEquals((-1113.2563590770453), quaternion0.w, 0.01);
      assertEquals(4216.9109513695885, quaternion0.z, 0.01);
      assertEquals((-0.14107934566597768), quaternion0.x, 0.01);
      assertEquals(0.6547627913678638, quaternion0.y, 0.01);
      assertEquals(0.8212780854212098, quaternion4.z, 0.01);
      assertEquals(7.31022581626169E-5, quaternion4.x, 0.01);
      assertEquals(0.5705280892426915, quaternion4.w, 0.01);
      assertEquals(2.116637537365241E-5, quaternion4.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(4216.9109513695885, quaternion5.z, 0.01);
      assertEquals((-0.14107934566597768), quaternion5.x, 0.01);
      assertEquals(0.6547627913678638, quaternion5.y, 0.01);
      assertEquals((-1113.2563590770453), quaternion5.w, 0.01);
      assertEquals(0.44935711101703, quaternion9.x, 0.01);
      assertEquals(2828.0, quaternion9.w, 0.01);
      assertEquals(3320.255, quaternion9.z, 0.01);
      assertEquals(0.8212655654477166, quaternion9.y, 0.01);
      assertEquals((-1113.2563590770453), quaternion10.w, 0.01);
      assertEquals((-0.14107934566597768), quaternion10.x, 0.01);
      assertEquals(0.6547627913678638, quaternion10.y, 0.01);
      assertEquals(4216.9109513695885, quaternion10.z, 0.01);
      assertEquals(4216.9109513695885, quaternion1.z, 0.01);
      assertEquals((-1113.2563590770453), quaternion1.w, 0.01);
      assertEquals((-0.14107934566597768), quaternion1.x, 0.01);
      assertEquals(0.6547627913678638, quaternion1.y, 0.01);
      assertEquals(0.9999999941827595, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_5.y, 0.01);
      assertEquals(0.9999999941827595, vector3_5.z, 0.01);
      assertEquals(1.0786325143740104E-4, vector3_5.x, 0.01);
      assertSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion6);
      assertNotSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion10);
      assertNotSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion8);
      assertNotSame(quaternion4, quaternion6);
      assertNotSame(quaternion4, quaternion5);
      assertNotSame(quaternion4, quaternion7);
      assertNotSame(quaternion4, quaternion8);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertNotSame(quaternion4, quaternion9);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion10);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(quaternion5, quaternion6);
      assertNotSame(quaternion5, quaternion7);
      assertNotSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion2);
      assertNotSame(quaternion5, quaternion8);
      assertSame(quaternion5, quaternion10);
      assertSame(quaternion5, quaternion0);
      assertNotSame(quaternion9, quaternion10);
      assertNotSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion7);
      assertNotSame(quaternion10, quaternion7);
      assertSame(quaternion10, quaternion3);
      assertNotSame(quaternion10, quaternion6);
      assertSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion8);
      assertNotSame(quaternion10, quaternion9);
      assertSame(quaternion10, quaternion0);
      assertSame(quaternion10, quaternion5);
      assertSame(quaternion10, quaternion2);
      assertNotSame(quaternion10, quaternion4);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion10);
      assertNotSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertNotSame(quaternion1, quaternion9);
      assertSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_3);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_5, vector3_3);
      assertSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_0);
      assertNotSame(vector3_5, vector3_1);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-2.8834833341599673), quaternion0.getRotationZ(), 0.01);
      assertEquals((-1113.2563590770453), quaternion0.w(), 0.01);
      assertEquals(0.6547627913678638, quaternion0.y(), 0.01);
      assertEquals((-0.14107934566597768), quaternion0.x(), 0.01);
      assertEquals(4216.9109513695885, quaternion0.z(), 0.01);
      assertEquals(2.116637537365241E-5, quaternion4.y(), 0.01);
      assertEquals(1.9272952023819472, quaternion4.getRotationZ(), 0.01);
      assertEquals(7.31022581626169E-5, quaternion4.x(), 0.01);
      assertEquals(0.5705280892426915, quaternion4.w(), 0.01);
      assertEquals(0.8212780854212098, quaternion4.z(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals((-0.14107934566597768), quaternion5.x(), 0.01);
      assertEquals((-1113.2563590770453), quaternion5.w(), 0.01);
      assertEquals(4216.9109513695885, quaternion5.z(), 0.01);
      assertEquals((-2.8834833341599673), quaternion5.getRotationZ(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.6547627913678638, quaternion5.y(), 0.01);
      assertEquals(0.44935711101703, quaternion9.x(), 0.01);
      assertEquals(2.436088236657885, quaternion9.getRotationZ(), 0.01);
      assertEquals(3320.255, quaternion9.z(), 0.01);
      assertEquals(2828.0, quaternion9.w(), 0.01);
      assertFalse(quaternion9.hasNaN());
      assertEquals(0.8212655654477166, quaternion9.y(), 0.01);
      assertEquals((-2.8834833341599673), quaternion10.getRotationZ(), 0.01);
      assertEquals((-1113.2563590770453), quaternion10.w(), 0.01);
      assertEquals(4216.9109513695885, quaternion10.z(), 0.01);
      assertFalse(quaternion10.hasNaN());
      assertEquals(0.6547627913678638, quaternion10.y(), 0.01);
      assertEquals((-0.14107934566597768), quaternion10.x(), 0.01);
      assertEquals((-2.8834833341599673), quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.14107934566597768), quaternion1.x(), 0.01);
      assertEquals((-1113.2563590770453), quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(4216.9109513695885, quaternion1.z(), 0.01);
      assertEquals(0.6547627913678638, quaternion1.y(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_4.x(), 0.01);
      assertEquals(0.9999999941827595, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(0.0, vector3_5.y(), 0.01);
      assertEquals(1.0, vector3_5.lengthSquared(), 0.01);
      assertEquals(0.9999999941827595, vector3_5.z(), 0.01);
      assertEquals(1.0786325143740104E-4, vector3_5.x(), 0.01);
      assertEquals(1.0, vector3_5.length(), 0.01);
      assertNotNull(quaternion10);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(0.0, (-830.0), 0.0, 0.0);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals((-830.0), quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals((-830.0), quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.invert(quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(-0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertEquals(-0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(-0.0, quaternion2.z(), 0.01);
      assertNotNull(quaternion2);
      
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertNotNull(vector3_0);
      
      double double0 = quaternion0.transformZ(vector3_0);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals((-3.4028234663852886E38), double0, 0.01);
      
      Quaternion quaternion3 = quaternion2.invert();
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(-0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion1);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertEquals(-0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(-0.0, quaternion2.z(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertNotNull(quaternion3);
      
      Vector3 vector3_1 = new Vector3();
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion0.transformAndAdd(vector3_0, vector3_0, vector3_1);
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-6.805646932770577E38), vector3_1.x, 0.01);
      assertEquals((-6.805646932770577E38), vector3_1.y, 0.01);
      assertEquals((-6.805646932770577E38), vector3_1.z, 0.01);
      assertEquals((-6.805646932770577E38), vector3_2.y, 0.01);
      assertEquals((-6.805646932770577E38), vector3_2.x, 0.01);
      assertEquals((-6.805646932770577E38), vector3_2.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(1.389504905205887E78, vector3_1.lengthSquared(), 0.01);
      assertEquals((-6.805646932770577E38), vector3_1.x(), 0.01);
      assertEquals((-6.805646932770577E38), vector3_1.z(), 0.01);
      assertEquals((-6.805646932770577E38), vector3_1.y(), 0.01);
      assertEquals(1.1787726265933931E39, vector3_1.length(), 0.01);
      assertEquals((-6.805646932770577E38), vector3_2.z(), 0.01);
      assertEquals((-6.805646932770577E38), vector3_2.y(), 0.01);
      assertEquals((-6.805646932770577E38), vector3_2.x(), 0.01);
      assertEquals(1.389504905205887E78, vector3_2.lengthSquared(), 0.01);
      assertEquals(1.1787726265933931E39, vector3_2.length(), 0.01);
      assertNotNull(vector3_2);
      
      Quaternion quaternion4 = quaternion3.normalize();
      assertTrue(quaternion0.equals((Object)quaternion3));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion3));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion3));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion4.equals((Object)quaternion2));
      assertTrue(quaternion4.equals((Object)quaternion1));
      assertTrue(quaternion4.equals((Object)quaternion0));
      assertTrue(quaternion4.equals((Object)quaternion3));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(-0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(1.0, quaternion4.w, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion4);
      assertNotSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion4, quaternion0);
      assertNotSame(quaternion4, quaternion2);
      assertNotSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion3);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertEquals(-0.0, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(-0.0, quaternion2.z(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion4.x(), 0.01);
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(1.0, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertNotNull(quaternion4);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformScaleAndAdd(vector3_0, 0.0, vector3_0, vector3_0);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = quaternion0.toAngles();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformAndAdd(vector3_0, vector3_0, vector3_0);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = vector3_1.mult((-1.0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(-0.0, vector3_2.x, 0.01);
      assertEquals(-0.0, vector3_2.y, 0.01);
      assertEquals(-0.0, vector3_2.z, 0.01);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(-0.0, vector3_2.y(), 0.01);
      assertEquals(-0.0, vector3_2.x(), 0.01);
      assertEquals(-0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertNotNull(vector3_2);
      
      quaternion1.z = 1.0;
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0344439357957027, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion1.z(), 0.01);
      
      Vector3 vector3_3 = quaternion1.transformScaleAndAdd(vector3_1, 0.0, vector3_1, vector3_1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_2));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_2);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0344439357957027, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion1.z(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(0.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertNotNull(vector3_3);
      
      Vector3 vector3_4 = quaternion0.transformUnitX(vector3_1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(1.0, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_4.z, 0.01);
      assertEquals(0.0, vector3_4.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_0);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_4.x(), 0.01);
      assertEquals(0.0, vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.y(), 0.01);
      assertEquals(1.0, vector3_4.length(), 0.01);
      assertEquals(1.0, vector3_4.lengthSquared(), 0.01);
      assertNotNull(vector3_4);
      
      Vector3 vector3_5 = quaternion1.transformAndAdd(vector3_3, vector3_3, vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_3));
      assertFalse(vector3_3.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_5.equals((Object)vector3_3));
      assertFalse(vector3_5.equals((Object)vector3_1));
      assertFalse(vector3_5.equals((Object)vector3_4));
      assertFalse(vector3_5.equals((Object)vector3_0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(2.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(1.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_5.x, 0.01);
      assertEquals(0.0, vector3_5.z, 0.01);
      assertEquals(2.0, vector3_5.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_3);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_2);
      assertNotSame(vector3_3, vector3_5);
      assertSame(vector3_3, vector3_4);
      assertNotSame(vector3_5, vector3_3);
      assertNotSame(vector3_5, vector3_1);
      assertSame(vector3_5, vector3_2);
      assertNotSame(vector3_5, vector3_4);
      assertNotSame(vector3_5, vector3_0);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0344439357957027, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion1.z(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(2.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(2.0, vector3_2.length(), 0.01);
      assertEquals(4.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_3.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_3.x(), 0.01);
      assertEquals(1.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_5.x(), 0.01);
      assertEquals(4.0, vector3_5.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_5.z(), 0.01);
      assertEquals(2.0, vector3_5.y(), 0.01);
      assertEquals(2.0, vector3_5.length(), 0.01);
      assertNotNull(vector3_5);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      Vector3 vector3_6 = new Vector3(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertTrue(vector3_6.equals((Object)vector3_0));
      assertEquals(0.0, vector3_6.x, 0.01);
      assertEquals(0.0, vector3_6.z, 0.01);
      assertEquals(0.0, vector3_6.y, 0.01);
      assertEquals(0.0, vector3_6.length(), 0.01);
      assertEquals(0.0, vector3_6.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_6.z(), 0.01);
      assertEquals(0.0, vector3_6.y(), 0.01);
      assertEquals(0.0, vector3_6.x(), 0.01);
      assertNotNull(vector3_6);
      assertEquals(7, doubleArray0.length);
      
      Vector3 vector3_7 = vector3_2.add((IVector3) vector3_6, vector3_4);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_6.equals((Object)vector3_3));
      assertFalse(vector3_6.equals((Object)vector3_1));
      assertFalse(vector3_6.equals((Object)vector3_2));
      assertFalse(vector3_6.equals((Object)vector3_4));
      assertFalse(vector3_6.equals((Object)vector3_5));
      assertTrue(vector3_6.equals((Object)vector3_0));
      assertFalse(vector3_7.equals((Object)vector3_0));
      assertTrue(vector3_7.equals((Object)vector3_5));
      assertFalse(vector3_7.equals((Object)vector3_6));
      assertTrue(vector3_7.equals((Object)vector3_2));
      assertTrue(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertFalse(vector3_4.equals((Object)vector3_6));
      assertTrue(vector3_4.equals((Object)vector3_2));
      assertTrue(vector3_4.equals((Object)vector3_5));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_6.x, 0.01);
      assertEquals(0.0, vector3_6.z, 0.01);
      assertEquals(0.0, vector3_6.y, 0.01);
      assertEquals(0.0, vector3_7.z, 0.01);
      assertEquals(2.0, vector3_7.y, 0.01);
      assertEquals(0.0, vector3_7.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(2.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(2.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertEquals(0.0, vector3_4.z, 0.01);
      assertEquals(2.0, vector3_4.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_6, vector3_3);
      assertNotSame(vector3_6, vector3_1);
      assertNotSame(vector3_6, vector3_2);
      assertNotSame(vector3_6, vector3_7);
      assertNotSame(vector3_6, vector3_0);
      assertNotSame(vector3_6, vector3_4);
      assertNotSame(vector3_6, vector3_5);
      assertNotSame(vector3_7, vector3_0);
      assertSame(vector3_7, vector3_4);
      assertNotSame(vector3_7, vector3_2);
      assertNotSame(vector3_7, vector3_6);
      assertSame(vector3_7, vector3_3);
      assertSame(vector3_7, vector3_1);
      assertNotSame(vector3_7, vector3_5);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_6);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(vector3_4, vector3_5);
      assertNotSame(vector3_4, vector3_6);
      assertNotSame(vector3_4, vector3_2);
      assertSame(vector3_4, vector3_3);
      assertSame(vector3_4, vector3_1);
      assertSame(vector3_4, vector3_7);
      assertNotSame(vector3_4, vector3_0);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, vector3_6.length(), 0.01);
      assertEquals(0.0, vector3_6.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_6.z(), 0.01);
      assertEquals(0.0, vector3_6.y(), 0.01);
      assertEquals(0.0, vector3_6.x(), 0.01);
      assertEquals(2.0, vector3_7.length(), 0.01);
      assertEquals(0.0, vector3_7.z(), 0.01);
      assertEquals(2.0, vector3_7.y(), 0.01);
      assertEquals(0.0, vector3_7.x(), 0.01);
      assertEquals(4.0, vector3_7.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(2.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(4.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(2.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(2.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(2.0, vector3_2.length(), 0.01);
      assertEquals(4.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_4.x(), 0.01);
      assertEquals(0.0, vector3_4.z(), 0.01);
      assertEquals(2.0, vector3_4.y(), 0.01);
      assertEquals(2.0, vector3_4.length(), 0.01);
      assertEquals(4.0, vector3_4.lengthSquared(), 0.01);
      assertNotNull(vector3_7);
      assertEquals(7, doubleArray0.length);
      
      Vector3 vector3_8 = quaternion0.transform((IVector3) vector3_2);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertTrue(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_8.equals((Object)vector3_0));
      assertTrue(vector3_8.equals((Object)vector3_5));
      assertTrue(vector3_8.equals((Object)vector3_1));
      assertTrue(vector3_8.equals((Object)vector3_2));
      assertFalse(vector3_8.equals((Object)vector3_6));
      assertTrue(vector3_8.equals((Object)vector3_3));
      assertTrue(vector3_8.equals((Object)vector3_4));
      assertTrue(vector3_8.equals((Object)vector3_7));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_8.z, 0.01);
      assertEquals(2.0, vector3_8.y, 0.01);
      assertEquals(0.0, vector3_8.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(2.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(2.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_8, vector3_0);
      assertNotSame(vector3_8, vector3_4);
      assertNotSame(vector3_8, vector3_7);
      assertNotSame(vector3_8, vector3_6);
      assertNotSame(vector3_8, vector3_5);
      assertNotSame(vector3_8, vector3_2);
      assertNotSame(vector3_8, vector3_3);
      assertNotSame(vector3_8, vector3_1);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_8);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_3);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(4.0, vector3_8.lengthSquared(), 0.01);
      assertEquals(2.0, vector3_8.length(), 0.01);
      assertEquals(0.0, vector3_8.z(), 0.01);
      assertEquals(2.0, vector3_8.y(), 0.01);
      assertEquals(0.0, vector3_8.x(), 0.01);
      assertEquals(2.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(4.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(2.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(2.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(2.0, vector3_2.length(), 0.01);
      assertEquals(4.0, vector3_2.lengthSquared(), 0.01);
      assertNotNull(vector3_8);
      
      double double0 = quaternion1.y();
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.z, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(2.0344439357957027, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion1.z(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Quaternion quaternion2 = quaternion1.fromVectorFromNegativeZ((IVector3) vector3_8);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(vector3_0.equals((Object)vector3_7));
      assertTrue(vector3_0.equals((Object)vector3_6));
      assertFalse(vector3_0.equals((Object)vector3_8));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_0.equals((Object)vector3_4));
      assertFalse(vector3_0.equals((Object)vector3_5));
      assertFalse(vector3_0.equals((Object)vector3_3));
      assertFalse(vector3_8.equals((Object)vector3_0));
      assertTrue(vector3_8.equals((Object)vector3_5));
      assertTrue(vector3_8.equals((Object)vector3_1));
      assertTrue(vector3_8.equals((Object)vector3_2));
      assertFalse(vector3_8.equals((Object)vector3_6));
      assertTrue(vector3_8.equals((Object)vector3_3));
      assertTrue(vector3_8.equals((Object)vector3_4));
      assertTrue(vector3_8.equals((Object)vector3_7));
      assertFalse(vector3_1.equals((Object)vector3_6));
      assertTrue(vector3_1.equals((Object)vector3_8));
      assertTrue(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_1.equals((Object)vector3_5));
      assertFalse(vector3_2.equals((Object)vector3_6));
      assertTrue(vector3_2.equals((Object)vector3_3));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertTrue(vector3_2.equals((Object)vector3_7));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_8));
      assertTrue(vector3_2.equals((Object)vector3_4));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.7071067811865475, quaternion1.x, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_8.z, 0.01);
      assertEquals(2.0, vector3_8.y, 0.01);
      assertEquals(0.0, vector3_8.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(2.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(2.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(0.7071067811865475, quaternion2.x, 0.01);
      assertEquals(0.7071067811865476, quaternion2.w, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(vector3_0, vector3_7);
      assertNotSame(vector3_0, vector3_6);
      assertNotSame(vector3_0, vector3_8);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_4);
      assertNotSame(vector3_0, vector3_5);
      assertNotSame(vector3_0, vector3_3);
      assertNotSame(vector3_8, vector3_0);
      assertNotSame(vector3_8, vector3_4);
      assertNotSame(vector3_8, vector3_7);
      assertNotSame(vector3_8, vector3_6);
      assertNotSame(vector3_8, vector3_5);
      assertNotSame(vector3_8, vector3_2);
      assertNotSame(vector3_8, vector3_3);
      assertNotSame(vector3_8, vector3_1);
      assertNotSame(vector3_1, vector3_5);
      assertNotSame(vector3_1, vector3_6);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_1, vector3_7);
      assertNotSame(vector3_1, vector3_8);
      assertNotSame(vector3_1, vector3_2);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_4);
      assertNotSame(vector3_2, vector3_7);
      assertNotSame(vector3_2, vector3_6);
      assertNotSame(vector3_2, vector3_8);
      assertSame(vector3_2, vector3_5);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_4);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_3);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.7071067811865475, quaternion1.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(4.0, vector3_8.lengthSquared(), 0.01);
      assertEquals(2.0, vector3_8.length(), 0.01);
      assertEquals(0.0, vector3_8.z(), 0.01);
      assertEquals(2.0, vector3_8.y(), 0.01);
      assertEquals(0.0, vector3_8.x(), 0.01);
      assertEquals(2.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(4.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(2.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(2.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(2.0, vector3_2.length(), 0.01);
      assertEquals(4.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.7071067811865476, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.7071067811865475, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertNotNull(quaternion2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = new Quaternion(0.0, 1.0, (-992.34), 3.4028234663852886E38);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals((-992.34), quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals((-1.5707963267948968), quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.y(), 0.01);
      assertEquals((-992.34), quaternion1.z(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.invert(quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(992.34, quaternion0.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals((-1.0), quaternion0.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals((-992.34), quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion2.x, 0.01);
      assertEquals((-1.0), quaternion2.y, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w, 0.01);
      assertEquals(992.34, quaternion2.z, 0.01);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertEquals(992.34, quaternion0.z(), 0.01);
      assertEquals(1.5707963267948968, quaternion0.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1.0), quaternion0.y(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertEquals((-1.5707963267948968), quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.y(), 0.01);
      assertEquals((-992.34), quaternion1.z(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0, quaternion2.x(), 0.01);
      assertEquals(992.34, quaternion2.z(), 0.01);
      assertEquals((-1.0), quaternion2.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w(), 0.01);
      assertEquals(1.5707963267948968, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertNotNull(quaternion2);
      
      boolean boolean0 = quaternion1.equals(quaternion2);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(992.34, quaternion0.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals((-1.0), quaternion0.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals((-992.34), quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion2.x, 0.01);
      assertEquals((-1.0), quaternion2.y, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w, 0.01);
      assertEquals(992.34, quaternion2.z, 0.01);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertEquals(992.34, quaternion0.z(), 0.01);
      assertEquals(1.5707963267948968, quaternion0.getRotationZ(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1.0), quaternion0.y(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertEquals((-1.5707963267948968), quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.y(), 0.01);
      assertEquals((-992.34), quaternion1.z(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0, quaternion2.x(), 0.01);
      assertEquals(992.34, quaternion2.z(), 0.01);
      assertEquals((-1.0), quaternion2.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w(), 0.01);
      assertEquals(1.5707963267948968, quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertFalse(boolean0);
      
      Quaternion quaternion3 = new Quaternion();
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertNotNull(quaternion3);
      
      double double0 = quaternion3.w();
      assertFalse(quaternion3.equals((Object)quaternion1));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion2));
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion2);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.y(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_1.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-634.183), (-634.183), (-634.183), (-634.183));
      assertEquals((-634.183), quaternion0.w, 0.01);
      assertEquals((-634.183), quaternion0.y, 0.01);
      assertEquals((-634.183), quaternion0.x, 0.01);
      assertEquals((-634.183), quaternion0.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-634.183), quaternion0.z(), 0.01);
      assertEquals((-634.183), quaternion0.w(), 0.01);
      assertEquals((-634.183), quaternion0.y(), 0.01);
      assertEquals(2.356194179392384, quaternion0.getRotationZ(), 0.01);
      assertEquals((-634.183), quaternion0.x(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformUnitX(vector3_0);
      assertEquals((-634.183), quaternion0.w, 0.01);
      assertEquals((-634.183), quaternion0.y, 0.01);
      assertEquals((-634.183), quaternion0.x, 0.01);
      assertEquals((-634.183), quaternion0.z, 0.01);
      assertEquals(1608752.309956, vector3_0.y, 0.01);
      assertEquals((-1608751.309956), vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals((-1608751.309956), vector3_1.x, 0.01);
      assertEquals(1608752.309956, vector3_1.y, 0.01);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-634.183), quaternion0.z(), 0.01);
      assertEquals((-634.183), quaternion0.w(), 0.01);
      assertEquals((-634.183), quaternion0.y(), 0.01);
      assertEquals(2.356194179392384, quaternion0.getRotationZ(), 0.01);
      assertEquals((-634.183), quaternion0.x(), 0.01);
      assertEquals(1608752.309956, vector3_0.y(), 0.01);
      assertEquals(2275118.628132149, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(5.176164772073912E12, vector3_0.lengthSquared(), 0.01);
      assertEquals((-1608751.309956), vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(5.176164772073912E12, vector3_1.lengthSquared(), 0.01);
      assertEquals(1608752.309956, vector3_1.y(), 0.01);
      assertEquals(2275118.628132149, vector3_1.length(), 0.01);
      assertEquals((-1608751.309956), vector3_1.x(), 0.01);
      assertNotNull(vector3_1);
      
      Quaternion quaternion1 = new Quaternion((-634.183), (-3.141592653589793), (-0.009435222113516746), 1608752.309956);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals((-3.141592653589793), quaternion1.y, 0.01);
      assertEquals((-0.009435222113516746), quaternion1.z, 0.01);
      assertEquals(1608752.309956, quaternion1.w, 0.01);
      assertEquals((-634.183), quaternion1.x, 0.01);
      assertEquals((-3.141592653589793), quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-1.571506873747425), quaternion1.getRotationZ(), 0.01);
      assertEquals(1608752.309956, quaternion1.w(), 0.01);
      assertEquals((-634.183), quaternion1.x(), 0.01);
      assertEquals((-0.009435222113516746), quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.invert(quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals((-634.183), quaternion0.w, 0.01);
      assertEquals((-634.183), quaternion0.y, 0.01);
      assertEquals((-634.183), quaternion0.x, 0.01);
      assertEquals((-634.183), quaternion0.z, 0.01);
      assertEquals(634.183, quaternion1.z, 0.01);
      assertEquals((-634.183), quaternion1.w, 0.01);
      assertEquals(634.183, quaternion1.y, 0.01);
      assertEquals(634.183, quaternion1.x, 0.01);
      assertEquals(634.183, quaternion2.y, 0.01);
      assertEquals(634.183, quaternion2.x, 0.01);
      assertEquals((-634.183), quaternion2.w, 0.01);
      assertEquals(634.183, quaternion2.z, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-634.183), quaternion0.z(), 0.01);
      assertEquals((-634.183), quaternion0.w(), 0.01);
      assertEquals((-634.183), quaternion0.y(), 0.01);
      assertEquals(2.356194179392384, quaternion0.getRotationZ(), 0.01);
      assertEquals((-634.183), quaternion0.x(), 0.01);
      assertEquals(634.183, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-634.183), quaternion1.w(), 0.01);
      assertEquals(634.183, quaternion1.y(), 0.01);
      assertEquals(634.183, quaternion1.x(), 0.01);
      assertEquals(634.183, quaternion2.y(), 0.01);
      assertEquals(634.183, quaternion2.x(), 0.01);
      assertEquals(634.183, quaternion2.z(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertEquals((-634.183), quaternion2.w(), 0.01);
      assertNotNull(quaternion2);
      
      boolean boolean0 = quaternion0.equals(quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals((-634.183), quaternion0.w, 0.01);
      assertEquals((-634.183), quaternion0.y, 0.01);
      assertEquals((-634.183), quaternion0.x, 0.01);
      assertEquals((-634.183), quaternion0.z, 0.01);
      assertEquals(634.183, quaternion1.z, 0.01);
      assertEquals((-634.183), quaternion1.w, 0.01);
      assertEquals(634.183, quaternion1.y, 0.01);
      assertEquals(634.183, quaternion1.x, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-634.183), quaternion0.z(), 0.01);
      assertEquals((-634.183), quaternion0.w(), 0.01);
      assertEquals((-634.183), quaternion0.y(), 0.01);
      assertEquals(2.356194179392384, quaternion0.getRotationZ(), 0.01);
      assertEquals((-634.183), quaternion0.x(), 0.01);
      assertEquals(634.183, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-634.183), quaternion1.w(), 0.01);
      assertEquals(634.183, quaternion1.y(), 0.01);
      assertEquals(634.183, quaternion1.x(), 0.01);
      assertTrue(boolean0);
      
      double double0 = quaternion1.w();
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(634.183, quaternion1.z, 0.01);
      assertEquals((-634.183), quaternion1.w, 0.01);
      assertEquals(634.183, quaternion1.y, 0.01);
      assertEquals(634.183, quaternion1.x, 0.01);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(634.183, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-634.183), quaternion1.w(), 0.01);
      assertEquals(634.183, quaternion1.y(), 0.01);
      assertEquals(634.183, quaternion1.x(), 0.01);
      assertEquals((-634.183), double0, 0.01);
      
      Vector3 vector3_2 = quaternion2.toAngles();
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertEquals((-634.183), quaternion0.w, 0.01);
      assertEquals((-634.183), quaternion0.y, 0.01);
      assertEquals((-634.183), quaternion0.x, 0.01);
      assertEquals((-634.183), quaternion0.z, 0.01);
      assertEquals(634.183, quaternion1.z, 0.01);
      assertEquals((-634.183), quaternion1.w, 0.01);
      assertEquals(634.183, quaternion1.y, 0.01);
      assertEquals(634.183, quaternion1.x, 0.01);
      assertEquals(634.183, quaternion2.y, 0.01);
      assertEquals(634.183, quaternion2.x, 0.01);
      assertEquals((-634.183), quaternion2.w, 0.01);
      assertEquals(634.183, quaternion2.z, 0.01);
      assertEquals((-1.5707963267948966), vector3_2.y, 0.01);
      assertEquals((-2.356194179392384), vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-634.183), quaternion0.z(), 0.01);
      assertEquals((-634.183), quaternion0.w(), 0.01);
      assertEquals((-634.183), quaternion0.y(), 0.01);
      assertEquals(2.356194179392384, quaternion0.getRotationZ(), 0.01);
      assertEquals((-634.183), quaternion0.x(), 0.01);
      assertEquals(634.183, quaternion1.z(), 0.01);
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-634.183), quaternion1.w(), 0.01);
      assertEquals(634.183, quaternion1.y(), 0.01);
      assertEquals(634.183, quaternion1.x(), 0.01);
      assertEquals(634.183, quaternion2.y(), 0.01);
      assertEquals(634.183, quaternion2.x(), 0.01);
      assertEquals(634.183, quaternion2.z(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertEquals((-634.183), quaternion2.w(), 0.01);
      assertEquals(2.8317930911835503, vector3_2.length(), 0.01);
      assertEquals((-2.356194179392384), vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(8.019052111274888, vector3_2.lengthSquared(), 0.01);
      assertEquals((-1.5707963267948966), vector3_2.y(), 0.01);
      assertNotNull(vector3_2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      assertEquals(0.5773502691896258, vector3_0.z, 0.01);
      assertEquals(0.5773502691896258, vector3_0.y, 0.01);
      assertEquals(0.5773502691896258, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0000000000000002, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.5773502691896258, vector3_0.z(), 0.01);
      assertEquals(0.5773502691896258, vector3_0.y(), 0.01);
      assertEquals(0.5773502691896258, vector3_0.x(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(0.5773502691896258, vector3_0.z, 0.01);
      assertEquals(0.5773502691896258, vector3_0.y, 0.01);
      assertEquals(0.5773502691896258, vector3_0.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0000000000000002, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.5773502691896258, vector3_0.z(), 0.01);
      assertEquals(0.5773502691896258, vector3_0.y(), 0.01);
      assertEquals(0.5773502691896258, vector3_0.x(), 0.01);
      assertEquals(0.5773502691896258, vector3_1.z(), 0.01);
      assertEquals(1.0000000000000002, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.5773502691896258, vector3_1.y(), 0.01);
      assertEquals(0.5773502691896258, vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = vector3_1.lerp((IVector3) vector3_0, 0.0, vector3_0);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_1));
      assertEquals(0.5773502691896258, vector3_0.z, 0.01);
      assertEquals(0.5773502691896258, vector3_0.y, 0.01);
      assertEquals(0.5773502691896258, vector3_0.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertEquals(0.5773502691896258, vector3_2.x, 0.01);
      assertEquals(0.5773502691896258, vector3_2.z, 0.01);
      assertEquals(0.5773502691896258, vector3_2.y, 0.01);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_0);
      assertNotSame(vector3_2, vector3_1);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0000000000000002, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.5773502691896258, vector3_0.z(), 0.01);
      assertEquals(0.5773502691896258, vector3_0.y(), 0.01);
      assertEquals(0.5773502691896258, vector3_0.x(), 0.01);
      assertEquals(0.5773502691896258, vector3_1.z(), 0.01);
      assertEquals(1.0000000000000002, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.5773502691896258, vector3_1.y(), 0.01);
      assertEquals(0.5773502691896258, vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_2.length(), 0.01);
      assertEquals(0.5773502691896258, vector3_2.z(), 0.01);
      assertEquals(0.5773502691896258, vector3_2.y(), 0.01);
      assertEquals(0.5773502691896258, vector3_2.x(), 0.01);
      assertEquals(1.0000000000000002, vector3_2.lengthSquared(), 0.01);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = vector3_1.cross((IVector3) vector3_0, vector3_0);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_2));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_3.equals((Object)vector3_1));
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.y, 0.01);
      assertEquals(0.5773502691896258, vector3_1.x, 0.01);
      assertEquals(0.5773502691896258, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_1, vector3_3);
      assertNotSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_1);
      assertSame(vector3_3, vector3_2);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.5773502691896258, vector3_1.z(), 0.01);
      assertEquals(1.0000000000000002, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.5773502691896258, vector3_1.y(), 0.01);
      assertEquals(0.5773502691896258, vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(0.0, vector3_3.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_3.length(), 0.01);
      assertNotNull(vector3_3);
      
      boolean boolean0 = quaternion0.hasNaN();
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(boolean0);
      
      Quaternion quaternion2 = quaternion1.set(0.0, 0.0, 0.0, (-3.4028234663852886E38));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion2.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertNotNull(quaternion2);
      
      double double0 = quaternion0.w();
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean1 = quaternion0.equals(quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion1.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = quaternion1.equals(object0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion1.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(boolean2);
      
      Quaternion quaternion3 = quaternion2.set(2601.6059509449856, 2902.71713, 0.0, 1.0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion3.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(2902.71713, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(2601.6059509449856, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(2601.6059509449856, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(2902.71713, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(2902.71713, quaternion3.y, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(2601.6059509449856, quaternion3.x, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(2601.6059509449856, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(2.410844477833379, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(2902.71713, quaternion1.y(), 0.01);
      assertEquals(2.410844477833379, quaternion2.getRotationZ(), 0.01);
      assertEquals(2601.6059509449856, quaternion2.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(2902.71713, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(2601.6059509449856, quaternion3.x(), 0.01);
      assertEquals(2.410844477833379, quaternion3.getRotationZ(), 0.01);
      assertEquals(2902.71713, quaternion3.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertNotNull(quaternion3);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.fromAngles(0.0, 1.0, 0.0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.8775825618903728, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.479425538604203, quaternion1.y, 0.01);
      assertEquals(0.479425538604203, quaternion2.y, 0.01);
      assertEquals(0.8775825618903728, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.8775825618903728, quaternion1.w(), 0.01);
      assertEquals(0.479425538604203, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.479425538604203, quaternion2.y(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.8775825618903728, quaternion2.w(), 0.01);
      assertNotNull(quaternion2);
      
      boolean boolean0 = quaternion1.equals(quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.8775825618903728, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.479425538604203, quaternion1.y, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.8775825618903728, quaternion1.w(), 0.01);
      assertEquals(0.479425538604203, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.multLocal(quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertNotNull(quaternion2);
      
      quaternion1.x = 1.0;
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      
      boolean boolean0 = quaternion1.equals(quaternion0);
      assertFalse(quaternion0.equals((Object)quaternion2));
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Quaternion quaternion1 = quaternion0.randomize(mockRandom0);
      assertEquals((-0.2628655581413474), quaternion0.z, 0.01);
      assertEquals(0.7236067937262773, quaternion0.y, 0.01);
      assertEquals((-0.3618033946167675), quaternion0.w, 0.01);
      assertEquals((-0.525731119546863), quaternion0.x, 0.01);
      assertEquals((-0.525731119546863), quaternion1.x, 0.01);
      assertEquals((-0.2628655581413474), quaternion1.z, 0.01);
      assertEquals((-0.3618033946167675), quaternion1.w, 0.01);
      assertEquals(0.7236067937262773, quaternion1.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals((-1.8849555734285242), quaternion0.getRotationZ(), 0.01);
      assertEquals(0.7236067937262773, quaternion0.y(), 0.01);
      assertEquals((-0.525731119546863), quaternion0.x(), 0.01);
      assertEquals((-0.3618033946167675), quaternion0.w(), 0.01);
      assertEquals((-0.2628655581413474), quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.7236067937262773, quaternion1.y(), 0.01);
      assertEquals((-0.525731119546863), quaternion1.x(), 0.01);
      assertEquals((-1.8849555734285242), quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.3618033946167675), quaternion1.w(), 0.01);
      assertEquals((-0.2628655581413474), quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      assertEquals(0.5, quaternion0.y, 0.01);
      assertEquals(0.5, quaternion0.x, 0.01);
      assertEquals(0.5, quaternion0.w, 0.01);
      assertEquals(0.5, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.5, quaternion1.w, 0.01);
      assertEquals(0.5, quaternion1.z, 0.01);
      assertEquals(0.5, quaternion1.x, 0.01);
      assertEquals(0.5, quaternion1.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.5, quaternion0.z(), 0.01);
      assertEquals(0.5, quaternion0.y(), 0.01);
      assertEquals(0.5, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.5, quaternion0.w(), 0.01);
      assertEquals(1.5707963267948966, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.5, quaternion1.w(), 0.01);
      assertEquals(0.5, quaternion1.z(), 0.01);
      assertEquals(0.5, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.5707963267948966, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.5, quaternion1.y(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformUnitX(vector3_0);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(1.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(1.0, vector3_1.x(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromAxes(vector3_0, vector3_0, vector3_0);
      assertEquals(9.2233717619768648E18, quaternion0.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.y, 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.y, 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.z(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.y(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.y(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.x(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.invert();
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.fromAnglesXZ(1.0, -0.0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(0.479425538604203, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(0.8775825618903728, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(0.479425538604203, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.z, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(0.8775825618903728, quaternion2.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.479425538604203, quaternion0.x(), 0.01);
      assertEquals(0.8775825618903728, quaternion0.w(), 0.01);
      assertEquals(-0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertEquals(0.479425538604203, quaternion2.x(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.8775825618903728, quaternion2.w(), 0.01);
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertEquals(-0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion2.z(), 0.01);
      assertNotNull(quaternion2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertNotNull(quaternion1);
      
      boolean boolean0 = quaternion1.equals(quaternion0);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion0.transformLocal(vector3_1);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertNotNull(vector3_2);
      
      Vector3 vector3_3 = vector3_2.subtractLocal(vector3_1);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertTrue(vector3_3.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_3.x, 0.01);
      assertEquals(0.0, vector3_3.y, 0.01);
      assertEquals(0.0, vector3_3.z, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_3);
      assertSame(vector3_3, vector3_1);
      assertNotSame(vector3_3, vector3_0);
      assertSame(vector3_3, vector3_2);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_3.y(), 0.01);
      assertEquals(0.0, vector3_3.z(), 0.01);
      assertEquals(0.0, vector3_3.length(), 0.01);
      assertEquals(0.0, vector3_3.x(), 0.01);
      assertEquals(0.0, vector3_3.lengthSquared(), 0.01);
      assertNotNull(vector3_3);
      
      boolean boolean0 = quaternion0.equals(vector3_2);
      assertTrue(vector3_0.equals((Object)vector3_1));
      assertTrue(vector3_0.equals((Object)vector3_3));
      assertTrue(vector3_0.equals((Object)vector3_2));
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertTrue(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.z, 0.01);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertNotSame(vector3_0, vector3_3);
      assertSame(vector3_1, vector3_3);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_3);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(0.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.lengthSquared(), 0.01);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        quaternion0.integrate((IVector3) vector3_2, 0.0, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-634.183), (-634.183), 0.0, (-634.183));
      assertEquals((-634.183), quaternion0.y, 0.01);
      assertEquals((-634.183), quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals((-634.183), quaternion0.w, 0.01);
      assertEquals(2.3561938685922295, quaternion0.getRotationZ(), 0.01);
      assertEquals((-634.183), quaternion0.w(), 0.01);
      assertEquals((-634.183), quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals((-634.183), quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAnglesXZ((-0.5307334105090181), (-0.5307334105090181));
      assertEquals(0.06878196248257848, quaternion0.y, 0.01);
      assertEquals((-0.253082998479992), quaternion0.z, 0.01);
      assertEquals(0.9312180375174215, quaternion0.w, 0.01);
      assertEquals((-0.253082998479992), quaternion0.x, 0.01);
      assertEquals((-0.253082998479992), quaternion1.x, 0.01);
      assertEquals((-0.253082998479992), quaternion1.z, 0.01);
      assertEquals(0.9312180375174215, quaternion1.w, 0.01);
      assertEquals(0.06878196248257848, quaternion1.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.06878196248257848, quaternion0.y(), 0.01);
      assertEquals(0.9312180375174215, quaternion0.w(), 0.01);
      assertEquals((-0.530733410509018), quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.253082998479992), quaternion0.x(), 0.01);
      assertEquals((-0.253082998479992), quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.9312180375174215, quaternion1.w(), 0.01);
      assertEquals((-0.253082998479992), quaternion1.z(), 0.01);
      assertEquals((-0.530733410509018), quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.253082998479992), quaternion1.x(), 0.01);
      assertEquals(0.06878196248257848, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.fromVectorFromNegativeZ(0.0, 0.0, (-1.0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion2.set((IQuaternion) quaternion1);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertNotNull(quaternion3);
      
      Quaternion quaternion4 = quaternion2.fromAngles(0.0, 1845.896056021994, (-0.6289579675673732));
      assertEquals((-0.5981124029014769), quaternion0.y, 0.01);
      assertEquals((-0.19454993822127573), quaternion0.x, 0.01);
      assertEquals((-0.24047834166584892), quaternion0.z, 0.01);
      assertEquals(0.7393118707441145, quaternion0.w, 0.01);
      assertEquals((-0.24047834166584892), quaternion1.z, 0.01);
      assertEquals((-0.19454993822127573), quaternion1.x, 0.01);
      assertEquals((-0.5981124029014769), quaternion1.y, 0.01);
      assertEquals(0.7393118707441145, quaternion1.w, 0.01);
      assertEquals(0.7393118707441145, quaternion2.w, 0.01);
      assertEquals((-0.24047834166584892), quaternion2.z, 0.01);
      assertEquals((-0.5981124029014769), quaternion2.y, 0.01);
      assertEquals((-0.19454993822127573), quaternion2.x, 0.01);
      assertEquals(0.7393118707441145, quaternion4.w, 0.01);
      assertEquals((-0.5981124029014769), quaternion4.y, 0.01);
      assertEquals((-0.19454993822127573), quaternion4.x, 0.01);
      assertEquals((-0.24047834166584892), quaternion4.z, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertEquals((-0.5981124029014769), quaternion0.y(), 0.01);
      assertEquals((-0.19454993822127573), quaternion0.x(), 0.01);
      assertEquals((-0.628957967567373), quaternion0.getRotationZ(), 0.01);
      assertEquals(0.7393118707441145, quaternion0.w(), 0.01);
      assertEquals((-0.24047834166584892), quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-0.628957967567373), quaternion1.getRotationZ(), 0.01);
      assertEquals(0.7393118707441145, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-0.19454993822127573), quaternion1.x(), 0.01);
      assertEquals((-0.5981124029014769), quaternion1.y(), 0.01);
      assertEquals((-0.24047834166584892), quaternion1.z(), 0.01);
      assertEquals(0.7393118707441145, quaternion2.w(), 0.01);
      assertEquals((-0.628957967567373), quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.5981124029014769), quaternion2.y(), 0.01);
      assertEquals((-0.19454993822127573), quaternion2.x(), 0.01);
      assertEquals((-0.24047834166584892), quaternion2.z(), 0.01);
      assertEquals(0.7393118707441145, quaternion4.w(), 0.01);
      assertEquals((-0.24047834166584892), quaternion4.z(), 0.01);
      assertEquals((-0.5981124029014769), quaternion4.y(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-0.19454993822127573), quaternion4.x(), 0.01);
      assertEquals((-0.628957967567373), quaternion4.getRotationZ(), 0.01);
      assertNotNull(quaternion4);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(1.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertNotSame(vector3_1, vector3_0);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertNotNull(vector3_1);
      
      Quaternion quaternion5 = quaternion2.fromAxes(vector3_1, vector3_0, vector3_0);
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.7071067811865476, quaternion0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.7071067811865476, quaternion1.z, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.7071067811865476, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.7071067811865476, quaternion2.w, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(1.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, quaternion5.x, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(0.7071067811865476, quaternion5.z, 0.01);
      assertEquals(0.7071067811865476, quaternion5.w, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion4);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion2);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertEquals(1.570796326794897, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.570796326794897, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.z(), 0.01);
      assertEquals(1.570796326794897, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion2.z(), 0.01);
      assertEquals(0.7071067811865476, quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion5.x(), 0.01);
      assertEquals(1.570796326794897, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.7071067811865476, quaternion5.z(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertNotNull(quaternion5);
      
      Quaternion quaternion6 = new Quaternion((-634.183), (-1280.47013025), (-427.0), 0.7071067811865476);
      assertFalse(quaternion6.equals((Object)quaternion1));
      assertFalse(quaternion6.equals((Object)quaternion5));
      assertFalse(quaternion6.equals((Object)quaternion2));
      assertFalse(quaternion6.equals((Object)quaternion0));
      assertFalse(quaternion6.equals((Object)quaternion3));
      assertFalse(quaternion6.equals((Object)quaternion4));
      assertEquals((-1280.47013025), quaternion6.y, 0.01);
      assertEquals((-634.183), quaternion6.x, 0.01);
      assertEquals((-427.0), quaternion6.z, 0.01);
      assertEquals(0.7071067811865476, quaternion6.w, 0.01);
      assertEquals(0.7071067811865476, quaternion6.w(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-427.0), quaternion6.z(), 0.01);
      assertEquals((-1280.47013025), quaternion6.y(), 0.01);
      assertEquals((-634.183), quaternion6.x(), 0.01);
      assertEquals(2.722450756129358, quaternion6.getRotationZ(), 0.01);
      assertNotNull(quaternion6);
      
      Quaternion quaternion7 = quaternion3.invert(quaternion1);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z, 0.01);
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion2.x, 0.01);
      assertEquals((-0.7071067811865476), quaternion2.z, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals(0.7071067811865476, quaternion2.w, 0.01);
      assertEquals((-0.7071067811865476), quaternion3.z, 0.01);
      assertEquals(-0.0, quaternion3.y, 0.01);
      assertEquals(-0.0, quaternion3.x, 0.01);
      assertEquals(0.7071067811865476, quaternion3.w, 0.01);
      assertEquals(-0.0, quaternion7.x, 0.01);
      assertEquals(-0.0, quaternion7.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion7.z, 0.01);
      assertEquals(0.7071067811865476, quaternion7.w, 0.01);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion4);
      assertNotSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion2);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertEquals((-1.570796326794897), quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertEquals((-1.570796326794897), quaternion1.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z(), 0.01);
      assertEquals((-1.570796326794897), quaternion2.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion2.x(), 0.01);
      assertEquals((-0.7071067811865476), quaternion2.z(), 0.01);
      assertEquals(0.7071067811865476, quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertEquals(-0.0, quaternion3.x(), 0.01);
      assertEquals(-0.0, quaternion3.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion3.z(), 0.01);
      assertEquals((-1.570796326794897), quaternion3.getRotationZ(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(0.7071067811865476, quaternion3.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion7.w(), 0.01);
      assertEquals(-0.0, quaternion7.y(), 0.01);
      assertEquals((-1.570796326794897), quaternion7.getRotationZ(), 0.01);
      assertEquals((-0.7071067811865476), quaternion7.z(), 0.01);
      assertEquals(-0.0, quaternion7.x(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertNotNull(quaternion7);
      
      Quaternion quaternion8 = quaternion7.fromAnglesXZ(0.0, (-3.141592653589793));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(quaternion3.equals((Object)quaternion6));
      assertFalse(quaternion7.equals((Object)quaternion6));
      assertFalse(quaternion8.equals((Object)quaternion6));
      assertEquals(6.123233995736766E-17, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals((-1.0), quaternion0.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals((-1.0), quaternion2.z, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertEquals(-0.0, quaternion3.y, 0.01);
      assertEquals((-1.0), quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion3.w, 0.01);
      assertEquals(6.123233995736766E-17, quaternion7.w, 0.01);
      assertEquals((-1.0), quaternion7.z, 0.01);
      assertEquals(0.0, quaternion7.x, 0.01);
      assertEquals(-0.0, quaternion7.y, 0.01);
      assertEquals((-1.0), quaternion8.z, 0.01);
      assertEquals(-0.0, quaternion8.y, 0.01);
      assertEquals(0.0, quaternion8.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion8.w, 0.01);
      assertSame(quaternion0, quaternion8);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion2);
      assertSame(quaternion8, quaternion4);
      assertSame(quaternion8, quaternion0);
      assertNotSame(quaternion8, quaternion6);
      assertSame(quaternion8, quaternion5);
      assertSame(quaternion8, quaternion3);
      assertSame(quaternion8, quaternion7);
      assertSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion2);
      assertEquals(6.123233995736766E-17, quaternion0.w(), 0.01);
      assertEquals((-1.0), quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.141592653589793), quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertEquals((-3.141592653589793), quaternion1.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals((-1.0), quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals((-1.0), quaternion2.z(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-3.141592653589793), quaternion2.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals(-0.0, quaternion3.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(6.123233995736766E-17, quaternion3.w(), 0.01);
      assertEquals((-3.141592653589793), quaternion3.getRotationZ(), 0.01);
      assertEquals((-1.0), quaternion3.z(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion7.w(), 0.01);
      assertEquals(-0.0, quaternion7.y(), 0.01);
      assertEquals((-3.141592653589793), quaternion7.getRotationZ(), 0.01);
      assertEquals((-1.0), quaternion7.z(), 0.01);
      assertEquals(0.0, quaternion7.x(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-1.0), quaternion8.z(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion8.w(), 0.01);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.0, quaternion8.x(), 0.01);
      assertEquals(-0.0, quaternion8.y(), 0.01);
      assertEquals((-3.141592653589793), quaternion8.getRotationZ(), 0.01);
      assertNotNull(quaternion8);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = quaternion2.equals(object0);
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertEquals(6.123233995736766E-17, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals((-1.0), quaternion0.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals((-1.0), quaternion1.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.y, 0.01);
      assertEquals((-1.0), quaternion2.z, 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w, 0.01);
      assertSame(quaternion0, quaternion8);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion3);
      assertEquals(6.123233995736766E-17, quaternion0.w(), 0.01);
      assertEquals((-1.0), quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.141592653589793), quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertEquals((-3.141592653589793), quaternion1.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals((-1.0), quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals((-1.0), quaternion2.z(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-3.141592653589793), quaternion2.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion2.y(), 0.01);
      assertFalse(boolean0);
      
      Quaternion quaternion9 = quaternion5.set(0.7236067937262773, 6279.474287232395, 1.5707963267948966, (-1280.47013025));
      assertFalse(quaternion0.equals((Object)quaternion6));
      assertFalse(quaternion1.equals((Object)quaternion6));
      assertFalse(quaternion2.equals((Object)quaternion6));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(quaternion5.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertEquals(1.5707963267948966, quaternion0.z, 0.01);
      assertEquals((-1280.47013025), quaternion0.w, 0.01);
      assertEquals(0.7236067937262773, quaternion0.x, 0.01);
      assertEquals(6279.474287232395, quaternion0.y, 0.01);
      assertEquals(0.7236067937262773, quaternion1.x, 0.01);
      assertEquals(1.5707963267948966, quaternion1.z, 0.01);
      assertEquals(6279.474287232395, quaternion1.y, 0.01);
      assertEquals((-1280.47013025), quaternion1.w, 0.01);
      assertEquals(0.7236067937262773, quaternion2.x, 0.01);
      assertEquals((-1280.47013025), quaternion2.w, 0.01);
      assertEquals(1.5707963267948966, quaternion2.z, 0.01);
      assertEquals(6279.474287232395, quaternion2.y, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(1.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals((-1280.47013025), quaternion5.w, 0.01);
      assertEquals(6279.474287232395, quaternion5.y, 0.01);
      assertEquals(1.5707963267948966, quaternion5.z, 0.01);
      assertEquals(0.7236067937262773, quaternion5.x, 0.01);
      assertEquals(0.7236067937262773, quaternion9.x, 0.01);
      assertEquals(1.5707963267948966, quaternion9.z, 0.01);
      assertEquals(6279.474287232395, quaternion9.y, 0.01);
      assertEquals((-1280.47013025), quaternion9.w, 0.01);
      assertSame(quaternion0, quaternion8);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion4);
      assertNotSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion9);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion6);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion3);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_1, vector3_0);
      assertSame(quaternion5, quaternion8);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion7);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion9, quaternion7);
      assertSame(quaternion9, quaternion8);
      assertSame(quaternion9, quaternion0);
      assertSame(quaternion9, quaternion5);
      assertSame(quaternion9, quaternion2);
      assertSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion6);
      assertSame(quaternion9, quaternion3);
      assertSame(quaternion9, quaternion1);
      assertEquals(1.5707963267948966, quaternion0.z(), 0.01);
      assertEquals((-1280.47013025), quaternion0.w(), 0.01);
      assertEquals(6279.474287232395, quaternion0.y(), 0.01);
      assertEquals(0.7236067937262773, quaternion0.x(), 0.01);
      assertEquals(3.141528428458804, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-1280.47013025), quaternion1.w(), 0.01);
      assertEquals(6279.474287232395, quaternion1.y(), 0.01);
      assertEquals(1.5707963267948966, quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141528428458804, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.7236067937262773, quaternion1.x(), 0.01);
      assertEquals(0.7236067937262773, quaternion2.x(), 0.01);
      assertEquals(6279.474287232395, quaternion2.y(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1.5707963267948966, quaternion2.z(), 0.01);
      assertEquals((-1280.47013025), quaternion2.w(), 0.01);
      assertEquals(3.141528428458804, quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(3.141528428458804, quaternion5.getRotationZ(), 0.01);
      assertEquals((-1280.47013025), quaternion5.w(), 0.01);
      assertEquals(6279.474287232395, quaternion5.y(), 0.01);
      assertEquals(0.7236067937262773, quaternion5.x(), 0.01);
      assertEquals(1.5707963267948966, quaternion5.z(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals((-1280.47013025), quaternion9.w(), 0.01);
      assertEquals(6279.474287232395, quaternion9.y(), 0.01);
      assertEquals(1.5707963267948966, quaternion9.z(), 0.01);
      assertFalse(quaternion9.hasNaN());
      assertEquals(3.141528428458804, quaternion9.getRotationZ(), 0.01);
      assertEquals(0.7236067937262773, quaternion9.x(), 0.01);
      assertNotNull(quaternion9);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformLocal(vector3_0);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Quaternion quaternion1 = quaternion0.set(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      assertEquals(5, doubleArray0.length);
      
      quaternion1.y = 0.0;
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.z(), 0.01);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformLocal(vector3_0);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertNotNull(vector3_1);
      
      double double0 = quaternion0.x();
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Quaternion quaternion2 = quaternion1.set(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(1.0, quaternion2.z, 0.01);
      assertEquals(1.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.141592653589793, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.141592653589793, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.z(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(3.141592653589793, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(1.0, quaternion2.y(), 0.01);
      assertEquals(1.0, quaternion2.z(), 0.01);
      assertNotNull(quaternion2);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion3 = quaternion1.set(1.0, 0.0, 0.0, 0.0);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(1.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.w, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(1.0, quaternion3.x(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertNotNull(quaternion3);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion4 = quaternion2.fromAnglesXZ((-1041.0), 1845.896056021994);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-0.5307334105090181), quaternion0.y, 0.01);
      assertEquals(0.6560263734481694, quaternion0.x, 0.01);
      assertEquals((-0.3375058102254641), quaternion0.z, 0.01);
      assertEquals(0.4171825408307041, quaternion0.w, 0.01);
      assertEquals((-0.5307334105090181), quaternion1.y, 0.01);
      assertEquals(0.6560263734481694, quaternion1.x, 0.01);
      assertEquals(0.4171825408307041, quaternion1.w, 0.01);
      assertEquals((-0.3375058102254641), quaternion1.z, 0.01);
      assertEquals((-0.5307334105090181), quaternion2.y, 0.01);
      assertEquals(0.4171825408307041, quaternion2.w, 0.01);
      assertEquals((-0.3375058102254641), quaternion2.z, 0.01);
      assertEquals(0.6560263734481694, quaternion2.x, 0.01);
      assertEquals((-0.3375058102254641), quaternion4.z, 0.01);
      assertEquals((-0.5307334105090181), quaternion4.y, 0.01);
      assertEquals(0.4171825408307041, quaternion4.w, 0.01);
      assertEquals(0.6560263734481694, quaternion4.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertSame(quaternion4, quaternion0);
      assertEquals((-1.3604242888045244), quaternion0.getRotationZ(), 0.01);
      assertEquals((-0.5307334105090181), quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.4171825408307041, quaternion0.w(), 0.01);
      assertEquals((-0.3375058102254641), quaternion0.z(), 0.01);
      assertEquals(0.6560263734481694, quaternion0.x(), 0.01);
      assertEquals((-1.3604242888045244), quaternion1.getRotationZ(), 0.01);
      assertEquals((-0.3375058102254641), quaternion1.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.6560263734481694, quaternion1.x(), 0.01);
      assertEquals(0.4171825408307041, quaternion1.w(), 0.01);
      assertEquals((-0.5307334105090181), quaternion1.y(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.5307334105090181), quaternion2.y(), 0.01);
      assertEquals((-1.3604242888045244), quaternion2.getRotationZ(), 0.01);
      assertEquals(0.6560263734481694, quaternion2.x(), 0.01);
      assertEquals((-0.3375058102254641), quaternion2.z(), 0.01);
      assertEquals(0.4171825408307041, quaternion2.w(), 0.01);
      assertEquals(0.4171825408307041, quaternion4.w(), 0.01);
      assertEquals((-0.3375058102254641), quaternion4.z(), 0.01);
      assertEquals(0.6560263734481694, quaternion4.x(), 0.01);
      assertEquals((-0.5307334105090181), quaternion4.y(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals((-1.3604242888045244), quaternion4.getRotationZ(), 0.01);
      assertNotNull(quaternion4);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion5 = quaternion3.fromVectorFromNegativeZ(0.0, 2905.51, (-276.9013830329));
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion5.w, 0.01);
      assertEquals(Double.NaN, quaternion5.z, 0.01);
      assertEquals(Double.NaN, quaternion5.y, 0.01);
      assertEquals(Double.NaN, quaternion5.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion4);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Double.NaN, quaternion3.w(), 0.01);
      assertEquals(Double.NaN, quaternion3.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion3.y(), 0.01);
      assertEquals(Double.NaN, quaternion3.x(), 0.01);
      assertEquals(Double.NaN, quaternion3.z(), 0.01);
      assertEquals(Double.NaN, quaternion5.z(), 0.01);
      assertTrue(quaternion5.hasNaN());
      assertEquals(Double.NaN, quaternion5.x(), 0.01);
      assertEquals(Double.NaN, quaternion5.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion5.y(), 0.01);
      assertEquals(Double.NaN, quaternion5.w(), 0.01);
      assertNotNull(quaternion5);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion6 = quaternion3.set((IQuaternion) quaternion5);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, quaternion6.z, 0.01);
      assertEquals(Double.NaN, quaternion6.y, 0.01);
      assertEquals(Double.NaN, quaternion6.x, 0.01);
      assertEquals(Double.NaN, quaternion6.w, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion3.x, 0.01);
      assertEquals(Double.NaN, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertEquals(Double.NaN, quaternion3.y, 0.01);
      assertEquals(Double.NaN, quaternion5.w, 0.01);
      assertEquals(Double.NaN, quaternion5.z, 0.01);
      assertEquals(Double.NaN, quaternion5.y, 0.01);
      assertEquals(Double.NaN, quaternion5.x, 0.01);
      assertSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion4);
      assertSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion3);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion6);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion3);
      assertSame(quaternion5, quaternion4);
      assertEquals(Double.NaN, quaternion6.y(), 0.01);
      assertEquals(Double.NaN, quaternion6.w(), 0.01);
      assertTrue(quaternion6.hasNaN());
      assertEquals(Double.NaN, quaternion6.z(), 0.01);
      assertEquals(Double.NaN, quaternion6.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion6.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion3.hasNaN());
      assertEquals(Double.NaN, quaternion3.w(), 0.01);
      assertEquals(Double.NaN, quaternion3.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion3.y(), 0.01);
      assertEquals(Double.NaN, quaternion3.x(), 0.01);
      assertEquals(Double.NaN, quaternion3.z(), 0.01);
      assertEquals(Double.NaN, quaternion5.z(), 0.01);
      assertTrue(quaternion5.hasNaN());
      assertEquals(Double.NaN, quaternion5.x(), 0.01);
      assertEquals(Double.NaN, quaternion5.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion5.y(), 0.01);
      assertEquals(Double.NaN, quaternion5.w(), 0.01);
      assertNotNull(quaternion6);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion7 = quaternion1.fromAngles(Double.NaN, Double.NaN, (-953.881266772));
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion7.z, 0.01);
      assertEquals(Double.NaN, quaternion7.x, 0.01);
      assertEquals(Double.NaN, quaternion7.y, 0.01);
      assertEquals(Double.NaN, quaternion7.w, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion7, quaternion2);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion6);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertTrue(quaternion7.hasNaN());
      assertEquals(Double.NaN, quaternion7.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion7.y(), 0.01);
      assertEquals(Double.NaN, quaternion7.w(), 0.01);
      assertEquals(Double.NaN, quaternion7.z(), 0.01);
      assertEquals(Double.NaN, quaternion7.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertNotNull(quaternion7);
      assertEquals(5, doubleArray0.length);
      
      double double1 = quaternion0.w();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(1.0, vector3_2.z, 0.01);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertEquals(1.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(1.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(1.0, vector3_2.z(), 0.01);
      assertNotNull(vector3_2);
      
      Quaternion quaternion8 = quaternion1.fromAxes(vector3_2, vector3_2, vector3_2);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(vector3_2.equals((Object)vector3_1));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(0.7071067811865476, quaternion0.w, 0.01);
      assertEquals(0.7071067811865476, quaternion0.z, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.0, vector3_2.y, 0.01);
      assertEquals(1.0, vector3_2.z, 0.01);
      assertEquals(0.0, quaternion8.x, 0.01);
      assertEquals(-0.0, quaternion8.y, 0.01);
      assertEquals(0.7071067811865476, quaternion8.z, 0.01);
      assertEquals(0.7071067811865476, quaternion8.w, 0.01);
      assertEquals(0.7071067811865476, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.7071067811865476, quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion8);
      assertNotSame(vector3_2, vector3_1);
      assertNotSame(vector3_2, vector3_0);
      assertSame(quaternion8, quaternion2);
      assertSame(quaternion8, quaternion3);
      assertSame(quaternion8, quaternion4);
      assertSame(quaternion8, quaternion1);
      assertSame(quaternion8, quaternion0);
      assertSame(quaternion8, quaternion7);
      assertSame(quaternion8, quaternion6);
      assertSame(quaternion8, quaternion5);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion6);
      assertEquals(0.7071067811865476, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertEquals(0.7071067811865476, quaternion0.z(), 0.01);
      assertEquals(1.570796326794897, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(1.0, vector3_2.length(), 0.01);
      assertEquals(0.0, vector3_2.y(), 0.01);
      assertEquals(1.0, vector3_2.z(), 0.01);
      assertEquals(1.570796326794897, quaternion8.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion8.x(), 0.01);
      assertEquals(-0.0, quaternion8.y(), 0.01);
      assertEquals(0.7071067811865476, quaternion8.w(), 0.01);
      assertFalse(quaternion8.hasNaN());
      assertEquals(0.7071067811865476, quaternion8.z(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.z(), 0.01);
      assertEquals(1.570796326794897, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(0.7071067811865476, quaternion1.w(), 0.01);
      assertNotNull(quaternion8);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion9 = new Quaternion(0.7071067811865476, 3714.193045516207, 0.7071067811865476, -0.0);
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertEquals(3714.193045516207, quaternion9.y, 0.01);
      assertEquals(0.7071067811865476, quaternion9.x, 0.01);
      assertEquals(0.7071067811865476, quaternion9.z, 0.01);
      assertEquals(-0.0, quaternion9.w, 0.01);
      assertEquals(3.1414022739396303, quaternion9.getRotationZ(), 0.01);
      assertFalse(quaternion9.hasNaN());
      assertEquals(-0.0, quaternion9.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion9.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion9.z(), 0.01);
      assertEquals(3714.193045516207, quaternion9.y(), 0.01);
      assertNotNull(quaternion9);
      
      Quaternion quaternion10 = quaternion9.invert(quaternion3);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion10.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertEquals((-0.7071067811865476), quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.w, 0.01);
      assertEquals((-3714.193045516207), quaternion0.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z, 0.01);
      assertEquals(3714.193045516207, quaternion9.y, 0.01);
      assertEquals(0.7071067811865476, quaternion9.x, 0.01);
      assertEquals(0.7071067811865476, quaternion9.z, 0.01);
      assertEquals(-0.0, quaternion9.w, 0.01);
      assertEquals((-0.7071067811865476), quaternion10.z, 0.01);
      assertEquals((-3714.193045516207), quaternion10.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion10.x, 0.01);
      assertEquals(-0.0, quaternion10.w, 0.01);
      assertEquals((-3714.193045516207), quaternion1.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.w, 0.01);
      assertEquals((-3714.193045516207), quaternion3.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion3.z, 0.01);
      assertEquals(-0.0, quaternion3.w, 0.01);
      assertEquals((-0.7071067811865476), quaternion3.x, 0.01);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion9, quaternion10);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion7);
      assertSame(quaternion10, quaternion7);
      assertSame(quaternion10, quaternion4);
      assertSame(quaternion10, quaternion5);
      assertSame(quaternion10, quaternion3);
      assertSame(quaternion10, quaternion8);
      assertSame(quaternion10, quaternion1);
      assertNotSame(quaternion10, quaternion9);
      assertSame(quaternion10, quaternion6);
      assertSame(quaternion10, quaternion2);
      assertSame(quaternion10, quaternion0);
      assertSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion9);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion9);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion10);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion4);
      assertEquals((-0.7071067811865476), quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.1414022739396303, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3714.193045516207), quaternion0.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z(), 0.01);
      assertEquals(-0.0, quaternion0.w(), 0.01);
      assertEquals(3.1414022739396303, quaternion9.getRotationZ(), 0.01);
      assertFalse(quaternion9.hasNaN());
      assertEquals(-0.0, quaternion9.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion9.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion9.z(), 0.01);
      assertEquals(3714.193045516207, quaternion9.y(), 0.01);
      assertFalse(quaternion10.hasNaN());
      assertEquals(-0.0, quaternion10.w(), 0.01);
      assertEquals((-0.7071067811865476), quaternion10.z(), 0.01);
      assertEquals((-3714.193045516207), quaternion10.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion10.x(), 0.01);
      assertEquals(3.1414022739396303, quaternion10.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion1.w(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z(), 0.01);
      assertEquals((-3714.193045516207), quaternion1.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.1414022739396303, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.1414022739396303, quaternion3.getRotationZ(), 0.01);
      assertEquals((-0.7071067811865476), quaternion3.z(), 0.01);
      assertEquals((-3714.193045516207), quaternion3.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion3.x(), 0.01);
      assertEquals(-0.0, quaternion3.w(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertNotNull(quaternion10);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = quaternion2.equals(quaternion9);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion9.equals((Object)quaternion10));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(quaternion2.equals((Object)quaternion9));
      assertEquals((-0.7071067811865476), quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.w, 0.01);
      assertEquals((-3714.193045516207), quaternion0.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z, 0.01);
      assertEquals(3714.193045516207, quaternion9.y, 0.01);
      assertEquals(0.7071067811865476, quaternion9.x, 0.01);
      assertEquals(0.7071067811865476, quaternion9.z, 0.01);
      assertEquals(-0.0, quaternion9.w, 0.01);
      assertEquals((-3714.193045516207), quaternion1.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.w, 0.01);
      assertEquals((-0.7071067811865476), quaternion2.z, 0.01);
      assertEquals((-3714.193045516207), quaternion2.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion2.x, 0.01);
      assertEquals(-0.0, quaternion2.w, 0.01);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion9, quaternion10);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion7);
      assertSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion9);
      assertSame(quaternion2, quaternion7);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion2, quaternion10);
      assertSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion2, quaternion8);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion9);
      assertSame(quaternion2, quaternion6);
      assertSame(quaternion2, quaternion0);
      assertEquals((-0.7071067811865476), quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.1414022739396303, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3714.193045516207), quaternion0.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z(), 0.01);
      assertEquals(-0.0, quaternion0.w(), 0.01);
      assertEquals(3.1414022739396303, quaternion9.getRotationZ(), 0.01);
      assertFalse(quaternion9.hasNaN());
      assertEquals(-0.0, quaternion9.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion9.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion9.z(), 0.01);
      assertEquals(3714.193045516207, quaternion9.y(), 0.01);
      assertEquals(-0.0, quaternion1.w(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z(), 0.01);
      assertEquals((-3714.193045516207), quaternion1.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.1414022739396303, quaternion1.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(-0.0, quaternion2.w(), 0.01);
      assertEquals((-0.7071067811865476), quaternion2.z(), 0.01);
      assertEquals((-3714.193045516207), quaternion2.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion2.x(), 0.01);
      assertEquals(3.1414022739396303, quaternion2.getRotationZ(), 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      Vector3 vector3_3 = quaternion9.transformUnitX(vector3_0);
      assertFalse(quaternion9.equals((Object)quaternion10));
      assertFalse(quaternion9.equals((Object)quaternion0));
      assertFalse(quaternion9.equals((Object)quaternion5));
      assertFalse(quaternion9.equals((Object)quaternion1));
      assertFalse(quaternion9.equals((Object)quaternion8));
      assertFalse(quaternion9.equals((Object)quaternion6));
      assertFalse(quaternion9.equals((Object)quaternion3));
      assertFalse(quaternion9.equals((Object)quaternion2));
      assertFalse(quaternion9.equals((Object)quaternion4));
      assertFalse(quaternion9.equals((Object)quaternion7));
      assertFalse(vector3_3.equals((Object)vector3_2));
      assertFalse(vector3_0.equals((Object)vector3_2));
      assertEquals(3714.193045516207, quaternion9.y, 0.01);
      assertEquals(0.7071067811865476, quaternion9.x, 0.01);
      assertEquals(0.7071067811865476, quaternion9.z, 0.01);
      assertEquals(-0.0, quaternion9.w, 0.01);
      assertEquals(5252.66217824085, vector3_3.y, 0.01);
      assertEquals(1.0000000000000002, vector3_3.z, 0.01);
      assertEquals((-2.7590459958721913E7), vector3_3.x, 0.01);
      assertEquals((-2.7590459958721913E7), vector3_0.x, 0.01);
      assertEquals(5252.66217824085, vector3_0.y, 0.01);
      assertEquals(1.0000000000000002, vector3_0.z, 0.01);
      assertNotSame(quaternion9, quaternion10);
      assertNotSame(quaternion9, quaternion0);
      assertNotSame(quaternion9, quaternion5);
      assertNotSame(quaternion9, quaternion1);
      assertNotSame(quaternion9, quaternion8);
      assertNotSame(quaternion9, quaternion6);
      assertNotSame(quaternion9, quaternion3);
      assertNotSame(quaternion9, quaternion2);
      assertNotSame(quaternion9, quaternion4);
      assertNotSame(quaternion9, quaternion7);
      assertSame(vector3_3, vector3_0);
      assertNotSame(vector3_3, vector3_2);
      assertSame(vector3_3, vector3_1);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_0, vector3_3);
      assertNotSame(vector3_0, vector3_2);
      assertEquals(3.1414022739396303, quaternion9.getRotationZ(), 0.01);
      assertFalse(quaternion9.hasNaN());
      assertEquals(-0.0, quaternion9.w(), 0.01);
      assertEquals(0.7071067811865476, quaternion9.x(), 0.01);
      assertEquals(0.7071067811865476, quaternion9.z(), 0.01);
      assertEquals(3714.193045516207, quaternion9.y(), 0.01);
      assertEquals(5252.66217824085, vector3_3.y(), 0.01);
      assertEquals(1.0000000000000002, vector3_3.z(), 0.01);
      assertEquals(7.612335083242982E14, vector3_3.lengthSquared(), 0.01);
      assertEquals((-2.7590459958721913E7), vector3_3.x(), 0.01);
      assertEquals(2.759046045872193E7, vector3_3.length(), 0.01);
      assertEquals(5252.66217824085, vector3_0.y(), 0.01);
      assertEquals(1.0000000000000002, vector3_0.z(), 0.01);
      assertEquals(7.612335083242982E14, vector3_0.lengthSquared(), 0.01);
      assertEquals((-2.7590459958721913E7), vector3_0.x(), 0.01);
      assertEquals(2.759046045872193E7, vector3_0.length(), 0.01);
      assertNotNull(vector3_3);
      
      double double2 = quaternion7.w();
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion7.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals((-0.7071067811865476), quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.w, 0.01);
      assertEquals((-3714.193045516207), quaternion0.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z, 0.01);
      assertEquals((-0.7071067811865476), quaternion7.x, 0.01);
      assertEquals((-3714.193045516207), quaternion7.y, 0.01);
      assertEquals(-0.0, quaternion7.w, 0.01);
      assertEquals((-0.7071067811865476), quaternion7.z, 0.01);
      assertEquals((-3714.193045516207), quaternion1.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.w, 0.01);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion8);
      assertNotSame(quaternion7, quaternion9);
      assertSame(quaternion7, quaternion2);
      assertSame(quaternion7, quaternion4);
      assertSame(quaternion7, quaternion3);
      assertSame(quaternion7, quaternion1);
      assertSame(quaternion7, quaternion0);
      assertSame(quaternion7, quaternion6);
      assertSame(quaternion7, quaternion10);
      assertSame(quaternion7, quaternion5);
      assertSame(quaternion7, quaternion8);
      assertSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion9);
      assertEquals((-0.7071067811865476), quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.1414022739396303, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3714.193045516207), quaternion0.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z(), 0.01);
      assertEquals(-0.0, quaternion0.w(), 0.01);
      assertEquals(3.1414022739396303, quaternion7.getRotationZ(), 0.01);
      assertEquals((-0.7071067811865476), quaternion7.x(), 0.01);
      assertFalse(quaternion7.hasNaN());
      assertEquals((-0.7071067811865476), quaternion7.z(), 0.01);
      assertEquals((-3714.193045516207), quaternion7.y(), 0.01);
      assertEquals(-0.0, quaternion7.w(), 0.01);
      assertEquals(-0.0, quaternion1.w(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z(), 0.01);
      assertEquals((-3714.193045516207), quaternion1.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.1414022739396303, quaternion1.getRotationZ(), 0.01);
      assertEquals(-0.0, double2, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Vector3 vector3_4 = quaternion1.toAngles();
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(vector3_4.equals((Object)vector3_0));
      assertFalse(vector3_4.equals((Object)vector3_2));
      assertFalse(vector3_4.equals((Object)vector3_1));
      assertFalse(vector3_4.equals((Object)vector3_3));
      assertEquals((-0.7071067811865476), quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.w, 0.01);
      assertEquals((-3714.193045516207), quaternion0.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z, 0.01);
      assertEquals((-3714.193045516207), quaternion1.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.w, 0.01);
      assertEquals(0.0, vector3_4.x, 0.01);
      assertEquals((-1.5707963267948966), vector3_4.y, 0.01);
      assertEquals((-1.5709867064450598), vector3_4.z, 0.01);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion8);
      assertSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion9);
      assertNotSame(vector3_4, vector3_0);
      assertNotSame(vector3_4, vector3_2);
      assertNotSame(vector3_4, vector3_1);
      assertNotSame(vector3_4, vector3_3);
      assertEquals((-0.7071067811865476), quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.1414022739396303, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3714.193045516207), quaternion0.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z(), 0.01);
      assertEquals(-0.0, quaternion0.w(), 0.01);
      assertEquals(-0.0, quaternion1.w(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z(), 0.01);
      assertEquals((-3714.193045516207), quaternion1.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.1414022739396303, quaternion1.getRotationZ(), 0.01);
      assertEquals(4.9354003320994355, vector3_4.lengthSquared(), 0.01);
      assertEquals(2.2215760918994953, vector3_4.length(), 0.01);
      assertEquals((-1.5707963267948966), vector3_4.y(), 0.01);
      assertEquals((-1.5709867064450598), vector3_4.z(), 0.01);
      assertEquals(0.0, vector3_4.x(), 0.01);
      assertNotNull(vector3_4);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean1 = quaternion0.equals(quaternion6);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(quaternion6.equals((Object)quaternion9));
      assertFalse(quaternion0.equals((Object)quaternion9));
      assertFalse(quaternion1.equals((Object)quaternion9));
      assertFalse(boolean1 == boolean0);
      assertFalse(quaternion3.equals((Object)quaternion9));
      assertFalse(quaternion5.equals((Object)quaternion9));
      assertEquals(-0.0, quaternion6.w, 0.01);
      assertEquals((-0.7071067811865476), quaternion6.x, 0.01);
      assertEquals((-3714.193045516207), quaternion6.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion6.z, 0.01);
      assertEquals((-0.7071067811865476), quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.w, 0.01);
      assertEquals((-3714.193045516207), quaternion0.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z, 0.01);
      assertEquals((-3714.193045516207), quaternion1.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x, 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.w, 0.01);
      assertEquals((-3714.193045516207), quaternion3.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion3.z, 0.01);
      assertEquals(-0.0, quaternion3.w, 0.01);
      assertEquals((-0.7071067811865476), quaternion3.x, 0.01);
      assertEquals((-0.7071067811865476), quaternion5.x, 0.01);
      assertEquals(-0.0, quaternion5.w, 0.01);
      assertEquals((-3714.193045516207), quaternion5.y, 0.01);
      assertEquals((-0.7071067811865476), quaternion5.z, 0.01);
      assertSame(quaternion6, quaternion1);
      assertSame(quaternion6, quaternion5);
      assertSame(quaternion6, quaternion10);
      assertSame(quaternion6, quaternion8);
      assertSame(quaternion6, quaternion0);
      assertSame(quaternion6, quaternion7);
      assertSame(quaternion6, quaternion4);
      assertNotSame(quaternion6, quaternion9);
      assertSame(quaternion6, quaternion2);
      assertSame(quaternion6, quaternion3);
      assertSame(quaternion0, quaternion7);
      assertSame(quaternion0, quaternion6);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion9);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion10);
      assertSame(quaternion0, quaternion8);
      assertSame(quaternion1, quaternion10);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion1, quaternion5);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion7);
      assertSame(quaternion1, quaternion8);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion4);
      assertSame(quaternion1, quaternion6);
      assertNotSame(quaternion1, quaternion9);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion8);
      assertNotSame(quaternion3, quaternion9);
      assertSame(quaternion3, quaternion6);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion10);
      assertSame(quaternion3, quaternion7);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion5, quaternion0);
      assertSame(quaternion5, quaternion10);
      assertSame(quaternion5, quaternion1);
      assertSame(quaternion5, quaternion8);
      assertSame(quaternion5, quaternion6);
      assertSame(quaternion5, quaternion2);
      assertSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion9);
      assertSame(quaternion5, quaternion7);
      assertSame(quaternion5, quaternion4);
      assertEquals((-3714.193045516207), quaternion6.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion6.z(), 0.01);
      assertEquals(-0.0, quaternion6.w(), 0.01);
      assertEquals(3.1414022739396303, quaternion6.getRotationZ(), 0.01);
      assertFalse(quaternion6.hasNaN());
      assertEquals((-0.7071067811865476), quaternion6.x(), 0.01);
      assertEquals((-0.7071067811865476), quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.1414022739396303, quaternion0.getRotationZ(), 0.01);
      assertEquals((-3714.193045516207), quaternion0.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion0.z(), 0.01);
      assertEquals(-0.0, quaternion0.w(), 0.01);
      assertEquals(-0.0, quaternion1.w(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.z(), 0.01);
      assertEquals((-3714.193045516207), quaternion1.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(3.1414022739396303, quaternion1.getRotationZ(), 0.01);
      assertEquals(3.1414022739396303, quaternion3.getRotationZ(), 0.01);
      assertEquals((-0.7071067811865476), quaternion3.z(), 0.01);
      assertEquals((-3714.193045516207), quaternion3.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion3.x(), 0.01);
      assertEquals(-0.0, quaternion3.w(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals((-3714.193045516207), quaternion5.y(), 0.01);
      assertEquals((-0.7071067811865476), quaternion5.z(), 0.01);
      assertEquals(-0.0, quaternion5.w(), 0.01);
      assertEquals((-0.7071067811865476), quaternion5.x(), 0.01);
      assertEquals(3.1414022739396303, quaternion5.getRotationZ(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertTrue(boolean1);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion();
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.set((-3.4028234663852886E38), 3.4028234663852886E38, (-3.4028234663852886E38), 3.4028234663852886E38);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertEquals(3.4028234663852886E38, quaternion1.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion1.x, 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion1.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.y, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion2.x, 0.01);
      assertEquals((-3.4028234663852886E38), quaternion2.z, 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w, 0.01);
      assertSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals((-3.4028234663852886E38), quaternion1.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.y(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals((-2.356194490192345), quaternion1.getRotationZ(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion1.z(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion2.x(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.y(), 0.01);
      assertEquals((-3.4028234663852886E38), quaternion2.z(), 0.01);
      assertEquals(3.4028234663852886E38, quaternion2.w(), 0.01);
      assertEquals((-2.356194490192345), quaternion2.getRotationZ(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertNotNull(quaternion2);
      
      Quaternion quaternion3 = quaternion0.invert(quaternion1);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion3.y, 0.01);
      assertEquals(-0.0, quaternion3.x, 0.01);
      assertEquals(-0.0, quaternion3.z, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertNotSame(quaternion0, quaternion3);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertEquals(-0.0, quaternion3.x(), 0.01);
      assertEquals(-0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertEquals(-0.0, quaternion3.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertNotNull(quaternion3);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = (-0.9999900000002526);
      doubleArray0[2] = -0.0;
      doubleArray0[3] = -0.0;
      Vector3 vector3_0 = new Vector3(doubleArray0);
      assertArrayEquals(new double[] {-0.0, (-0.9999900000002526), -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(-0.0, vector3_0.x, 0.01);
      assertEquals((-0.9999900000002526), vector3_0.y, 0.01);
      assertEquals(-0.0, vector3_0.z, 0.01);
      assertEquals(-0.0, vector3_0.x(), 0.01);
      assertEquals(0.9999900000002526, vector3_0.length(), 0.01);
      assertEquals(-0.0, vector3_0.z(), 0.01);
      assertEquals(0.9999800001005053, vector3_0.lengthSquared(), 0.01);
      assertEquals((-0.9999900000002526), vector3_0.y(), 0.01);
      assertNotNull(vector3_0);
      assertEquals(4, doubleArray0.length);
      
      Vector3 vector3_1 = quaternion1.transformUnitY(vector3_0);
      assertArrayEquals(new double[] {-0.0, (-0.9999900000002526), -0.0, -0.0}, doubleArray0, 0.01);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(1.0, vector3_1.y, 0.01);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion0);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertNotNull(vector3_1);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.normalize((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertNotNull(vector3_0);
      
      double double0 = 0.0;
      Vector3 vector3_1 = new Vector3(vector3_0);
      assertTrue(vector3_1.equals((Object)vector3_0));
      assertEquals(1.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(1.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(1.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertEquals(1.0, vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertNotNull(vector3_1);
      
      // Undeclared exception!
      try { 
        quaternion1.normalize((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.normalize();
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ((IVector3) vector3_0);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-634.183), (-634.183), 0.0, (-634.183));
      assertEquals((-634.183), quaternion0.w, 0.01);
      assertEquals((-634.183), quaternion0.y, 0.01);
      assertEquals((-634.183), quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(2.3561938685922295, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-634.183), quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals((-634.183), quaternion0.w(), 0.01);
      assertEquals((-634.183), quaternion0.y(), 0.01);
      assertNotNull(quaternion0);
      
      String string0 = quaternion0.toString();
      assertEquals((-634.183), quaternion0.w, 0.01);
      assertEquals((-634.183), quaternion0.y, 0.01);
      assertEquals((-634.183), quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(2.3561938685922295, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-634.183), quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals((-634.183), quaternion0.w(), 0.01);
      assertEquals((-634.183), quaternion0.y(), 0.01);
      assertEquals("[-634.183, -634.183, 0.0, -634.183]", string0);
      assertNotNull(string0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ((IVector3) vector3_0);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z, 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.x(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.z(), 0.01);
      assertEquals(3.4028234663852886E38, vector3_0.y(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ(Double.NaN, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = new Vector3();
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertNotNull(vector3_0);
      
      Vector3 vector3_1 = quaternion0.transformUnitY(vector3_0);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.y, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(1.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertSame(vector3_0, vector3_1);
      assertSame(vector3_1, vector3_0);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.y(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertNotNull(vector3_1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = quaternion0.toAngles();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromVectors(vector3_0, vector3_0);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion0.w(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.x(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(6.123233995736766E-17, quaternion1.w(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAngleAxis(0.0, 0.0, 0.0, (-649.75679));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.fromAnglesXY((-649.75679), (-1097.9));
      assertEquals(0.201171811353356, quaternion0.y, 0.01);
      assertEquals((-0.6501641560010574), quaternion0.x, 0.01);
      assertEquals(0.18445736026424642, quaternion0.w, 0.01);
      assertEquals(0.7090782430822345, quaternion0.z, 0.01);
      assertEquals((-0.6501641560010574), quaternion2.x, 0.01);
      assertEquals(0.201171811353356, quaternion2.y, 0.01);
      assertEquals(0.7090782430822345, quaternion2.z, 0.01);
      assertEquals(0.18445736026424642, quaternion2.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertEquals(0.7090782430822345, quaternion0.z(), 0.01);
      assertEquals(3.1415926535897927, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.18445736026424642, quaternion0.w(), 0.01);
      assertEquals((-0.6501641560010574), quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.201171811353356, quaternion0.y(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals((-0.6501641560010574), quaternion2.x(), 0.01);
      assertEquals(3.1415926535897927, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.18445736026424642, quaternion2.w(), 0.01);
      assertEquals(0.7090782430822345, quaternion2.z(), 0.01);
      assertEquals(0.201171811353356, quaternion2.y(), 0.01);
      assertNotNull(quaternion2);
      
      double double0 = quaternion0.getRotationZ();
      assertEquals(0.201171811353356, quaternion0.y, 0.01);
      assertEquals((-0.6501641560010574), quaternion0.x, 0.01);
      assertEquals(0.18445736026424642, quaternion0.w, 0.01);
      assertEquals(0.7090782430822345, quaternion0.z, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertEquals(0.7090782430822345, quaternion0.z(), 0.01);
      assertEquals(3.1415926535897927, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.18445736026424642, quaternion0.w(), 0.01);
      assertEquals((-0.6501641560010574), quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.201171811353356, quaternion0.y(), 0.01);
      assertEquals(3.1415926535897927, double0, 0.01);
      
      Quaternion quaternion3 = quaternion2.set(0.7090782430822345, 126.733, 1178.7423, 1178.7423);
      assertEquals(1178.7423, quaternion0.z, 0.01);
      assertEquals(0.7090782430822345, quaternion0.x, 0.01);
      assertEquals(126.733, quaternion0.y, 0.01);
      assertEquals(1178.7423, quaternion0.w, 0.01);
      assertEquals(1178.7423, quaternion2.w, 0.01);
      assertEquals(126.733, quaternion2.y, 0.01);
      assertEquals(1178.7423, quaternion2.z, 0.01);
      assertEquals(0.7090782430822345, quaternion2.x, 0.01);
      assertEquals(126.733, quaternion3.y, 0.01);
      assertEquals(1178.7423, quaternion3.z, 0.01);
      assertEquals(0.7090782430822345, quaternion3.x, 0.01);
      assertEquals(1178.7423, quaternion3.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertSame(quaternion3, quaternion2);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertEquals(1178.7423, quaternion0.z(), 0.01);
      assertEquals(0.7090782430822345, quaternion0.x(), 0.01);
      assertEquals(2.3619084852650882, quaternion0.getRotationZ(), 0.01);
      assertEquals(1178.7423, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(126.733, quaternion0.y(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(1178.7423, quaternion2.w(), 0.01);
      assertEquals(0.7090782430822345, quaternion2.x(), 0.01);
      assertEquals(1178.7423, quaternion2.z(), 0.01);
      assertEquals(2.3619084852650882, quaternion2.getRotationZ(), 0.01);
      assertEquals(126.733, quaternion2.y(), 0.01);
      assertEquals(1178.7423, quaternion3.w(), 0.01);
      assertEquals(2.3619084852650882, quaternion3.getRotationZ(), 0.01);
      assertEquals(126.733, quaternion3.y(), 0.01);
      assertEquals(0.7090782430822345, quaternion3.x(), 0.01);
      assertEquals(1178.7423, quaternion3.z(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertNotNull(quaternion3);
      
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion4 = quaternion0.fromAngleAxis((-1770.5378967297), (IVector3) vector3_0);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.7898818898801662, quaternion0.w, 0.01);
      assertEquals(0.6132589991507154, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.6132589991507154, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.7898818898801662, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.7898818898801662, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.6132589991507154, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.7898818898801662, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.6132589991507154, quaternion4.x(), 0.01);
      assertNotNull(quaternion4);
      
      Quaternion quaternion5 = quaternion4.slerp((IQuaternion) quaternion3, 0.0);
      assertTrue(quaternion5.equals((Object)quaternion1));
      assertTrue(quaternion5.equals((Object)quaternion4));
      assertTrue(quaternion5.equals((Object)quaternion2));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertTrue(quaternion5.equals((Object)quaternion0));
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.7898818898801662, quaternion0.w, 0.01);
      assertEquals(0.6132589991507154, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.6132589991507154, quaternion2.x, 0.01);
      assertEquals(0.7898818898801662, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(0.7898818898801662, quaternion3.w, 0.01);
      assertEquals(0.6132589991507154, quaternion3.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.6132589991507154, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.7898818898801662, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(0.7898818898801662, quaternion5.w, 0.01);
      assertEquals(0.6132589991507154, quaternion5.x, 0.01);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion4);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion2);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.7898818898801662, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.6132589991507154, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.7898818898801662, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.6132589991507154, quaternion2.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.6132589991507154, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.7898818898801662, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.7898818898801662, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.6132589991507154, quaternion4.x(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.6132589991507154, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.7898818898801662, quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertNotNull(quaternion5);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.7898818898801662;
      doubleArray0[1] = 126.733;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.6132589991507154;
      doubleArray0[4] = 0.7898818898801662;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.7898818898801662;
      Vector3 vector3_1 = new Vector3(doubleArray0);
      assertArrayEquals(new double[] {0.7898818898801662, 126.733, 0.0, 0.6132589991507154, 0.7898818898801662, 0.0, 0.7898818898801662}, doubleArray0, 0.01);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.7898818898801662, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(126.733, vector3_1.y, 0.01);
      assertEquals(126.73546150308508, vector3_1.length(), 0.01);
      assertEquals(16061.87720239996, vector3_1.lengthSquared(), 0.01);
      assertEquals(126.733, vector3_1.y(), 0.01);
      assertEquals(0.7898818898801662, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertNotNull(vector3_1);
      assertEquals(7, doubleArray0.length);
      
      Vector3 vector3_2 = quaternion5.transformUnitY(vector3_1);
      assertArrayEquals(new double[] {0.7898818898801662, 126.733, 0.0, 0.6132589991507154, 0.7898818898801662, 0.0, 0.7898818898801662}, doubleArray0, 0.01);
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertTrue(quaternion0.equals((Object)quaternion5));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertTrue(quaternion2.equals((Object)quaternion5));
      assertTrue(quaternion3.equals((Object)quaternion5));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertTrue(quaternion4.equals((Object)quaternion5));
      assertTrue(quaternion5.equals((Object)quaternion1));
      assertTrue(quaternion5.equals((Object)quaternion4));
      assertTrue(quaternion5.equals((Object)quaternion2));
      assertTrue(quaternion5.equals((Object)quaternion3));
      assertTrue(quaternion5.equals((Object)quaternion0));
      assertEquals(0.24782679992132584, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.9688043544703725, vector3_1.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.7898818898801662, quaternion0.w, 0.01);
      assertEquals(0.6132589991507154, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.9688043544703725, vector3_2.z, 0.01);
      assertEquals(0.0, vector3_2.x, 0.01);
      assertEquals(0.24782679992132584, vector3_2.y, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.6132589991507154, quaternion2.x, 0.01);
      assertEquals(0.7898818898801662, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(0.7898818898801662, quaternion3.w, 0.01);
      assertEquals(0.6132589991507154, quaternion3.x, 0.01);
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(1.0, vector3_0.x, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(0.6132589991507154, quaternion4.x, 0.01);
      assertEquals(0.0, quaternion4.z, 0.01);
      assertEquals(0.7898818898801662, quaternion4.w, 0.01);
      assertEquals(0.0, quaternion4.y, 0.01);
      assertEquals(0.0, quaternion5.z, 0.01);
      assertEquals(0.0, quaternion5.y, 0.01);
      assertEquals(0.7898818898801662, quaternion5.w, 0.01);
      assertEquals(0.6132589991507154, quaternion5.x, 0.01);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion5);
      assertSame(quaternion0, quaternion3);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion4);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion3);
      assertNotSame(quaternion2, quaternion5);
      assertSame(quaternion2, quaternion4);
      assertSame(quaternion3, quaternion2);
      assertNotSame(quaternion3, quaternion5);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion4);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(quaternion4, quaternion0);
      assertSame(quaternion4, quaternion1);
      assertNotSame(quaternion4, quaternion5);
      assertSame(quaternion4, quaternion3);
      assertSame(quaternion4, quaternion2);
      assertNotSame(quaternion5, quaternion0);
      assertNotSame(quaternion5, quaternion3);
      assertNotSame(quaternion5, quaternion1);
      assertNotSame(quaternion5, quaternion4);
      assertNotSame(quaternion5, quaternion2);
      assertEquals(0.9688043544703725, vector3_1.z(), 0.01);
      assertEquals(1.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_1.length(), 0.01);
      assertEquals(0.24782679992132584, vector3_1.y(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.7898818898801662, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.6132589991507154, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, vector3_2.length(), 0.01);
      assertEquals(0.24782679992132584, vector3_2.y(), 0.01);
      assertEquals(0.9688043544703725, vector3_2.z(), 0.01);
      assertEquals(0.0, vector3_2.x(), 0.01);
      assertEquals(1.0, vector3_2.lengthSquared(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.7898818898801662, quaternion2.w(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.6132589991507154, quaternion2.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.6132589991507154, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(0.7898818898801662, quaternion3.w(), 0.01);
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertEquals(1.0, vector3_0.x(), 0.01);
      assertEquals(1.0, vector3_0.length(), 0.01);
      assertEquals(0.0, vector3_0.y(), 0.01);
      assertEquals(0.0, vector3_0.z(), 0.01);
      assertEquals(1.0, vector3_0.lengthSquared(), 0.01);
      assertEquals(0.7898818898801662, quaternion4.w(), 0.01);
      assertEquals(0.0, quaternion4.getRotationZ(), 0.01);
      assertFalse(quaternion4.hasNaN());
      assertEquals(0.0, quaternion4.z(), 0.01);
      assertEquals(0.0, quaternion4.y(), 0.01);
      assertEquals(0.6132589991507154, quaternion4.x(), 0.01);
      assertEquals(0.0, quaternion5.z(), 0.01);
      assertEquals(0.6132589991507154, quaternion5.x(), 0.01);
      assertFalse(quaternion5.hasNaN());
      assertEquals(0.0, quaternion5.getRotationZ(), 0.01);
      assertEquals(0.7898818898801662, quaternion5.w(), 0.01);
      assertEquals(0.0, quaternion5.y(), 0.01);
      assertNotNull(vector3_2);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.fromAnglesXY(-0.0, -0.0);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(0.0, 0.0, 0.0, 1.0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0, 0.0, (-545.306207166714), (-1.0));
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals((-1.0), quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals((-545.306207166714), quaternion0.z, 0.01);
      assertEquals((-545.306207166714), quaternion0.z(), 0.01);
      assertEquals(3.139758820511521, quaternion0.getRotationZ(), 0.01);
      assertEquals((-1.0), quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertNotNull(quaternion0);
      
      quaternion0.hashCode();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals((-1.0), quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals((-545.306207166714), quaternion0.z, 0.01);
      assertEquals((-545.306207166714), quaternion0.z(), 0.01);
      assertEquals(3.139758820511521, quaternion0.getRotationZ(), 0.01);
      assertEquals((-1.0), quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1021.16);
      doubleArray0[4] = 1.0;
      Quaternion quaternion1 = new Quaternion(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, (-1021.16), 1.0}, doubleArray0, 0.01);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertEquals(1.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals((-1021.16), quaternion1.w, 0.01);
      assertEquals((-1.5722652434398317), quaternion1.getRotationZ(), 0.01);
      assertEquals((-1021.16), quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      assertEquals(5, doubleArray0.length);
      
      Quaternion quaternion2 = quaternion0.set((IQuaternion) quaternion1);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, (-1021.16), 1.0}, doubleArray0, 0.01);
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertEquals((-1021.16), quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals((-1021.16), quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(1.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.z, 0.01);
      assertEquals((-1021.16), quaternion2.w, 0.01);
      assertSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.y(), 0.01);
      assertEquals((-1.5722652434398317), quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals((-1021.16), quaternion0.w(), 0.01);
      assertEquals((-1.5722652434398317), quaternion1.getRotationZ(), 0.01);
      assertEquals((-1021.16), quaternion1.w(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(1.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(1.0, quaternion1.z(), 0.01);
      assertEquals((-1021.16), quaternion2.w(), 0.01);
      assertEquals((-1.5722652434398317), quaternion2.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion2.y(), 0.01);
      assertEquals(1.0, quaternion2.z(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertNotNull(quaternion2);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertNotNull(vector3_0);
      
      Quaternion quaternion1 = quaternion0.fromVectorFromNegativeZ((IVector3) vector3_0);
      assertEquals(Double.NaN, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals(Double.NaN, quaternion0.x, 0.01);
      assertEquals(Double.NaN, quaternion0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals(Double.NaN, quaternion1.y, 0.01);
      assertEquals(Double.NaN, quaternion1.x, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(Double.NaN, quaternion1.z, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(Double.NaN, quaternion0.x(), 0.01);
      assertEquals(Double.NaN, quaternion0.y(), 0.01);
      assertEquals(Double.NaN, quaternion0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.z(), 0.01);
      assertEquals(Double.NaN, quaternion1.y(), 0.01);
      assertEquals(Double.NaN, quaternion1.x(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion1.fromVectors(vector3_0, vector3_0);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertNotNull(quaternion2);
      
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      assertEquals((-3.4028234663852886E38), vector3_1.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.x, 0.01);
      assertSame(vector3_1, vector3_0);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.z(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.y(), 0.01);
      assertNotNull(vector3_1);
      
      Quaternion quaternion3 = quaternion2.fromAxes(vector3_1, vector3_1, vector3_0);
      assertEquals(9.2233717619768648E18, quaternion0.y, 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.y, 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertEquals(9.2233717619768648E18, quaternion2.y, 0.01);
      assertEquals(9.2233717619768648E18, quaternion2.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion2.z, 0.01);
      assertEquals(Double.NaN, quaternion2.w, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion3.y, 0.01);
      assertEquals(9.2233717619768648E18, quaternion3.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion3.z, 0.01);
      assertEquals(Double.NaN, quaternion3.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertSame(quaternion2, quaternion1);
      assertSame(quaternion2, quaternion0);
      assertSame(quaternion2, quaternion3);
      assertSame(vector3_1, vector3_0);
      assertSame(quaternion3, quaternion1);
      assertSame(quaternion3, quaternion0);
      assertSame(quaternion3, quaternion2);
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(9.2233717619768648E18, quaternion0.y(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.x(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.y(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.z(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.x(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion2.x(), 0.01);
      assertTrue(quaternion2.hasNaN());
      assertEquals(Double.NaN, quaternion2.getRotationZ(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion2.y(), 0.01);
      assertEquals(Double.NaN, quaternion2.w(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion2.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_1.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_1.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.x(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.z(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_1.y(), 0.01);
      assertEquals(Double.NaN, quaternion3.getRotationZ(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion3.x(), 0.01);
      assertEquals(Double.NaN, quaternion3.w(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion3.z(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion3.y(), 0.01);
      assertTrue(quaternion3.hasNaN());
      assertNotNull(quaternion3);
      
      boolean boolean0 = quaternion1.hasNaN();
      assertEquals(9.2233717619768648E18, quaternion0.y, 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.z, 0.01);
      assertEquals(Double.NaN, quaternion0.w, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.x, 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.y, 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.z, 0.01);
      assertEquals(Double.NaN, quaternion1.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion3);
      assertSame(vector3_0, vector3_1);
      assertSame(quaternion1, quaternion2);
      assertSame(quaternion1, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertEquals(Double.NaN, quaternion0.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.w(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.z(), 0.01);
      assertTrue(quaternion0.hasNaN());
      assertEquals(9.2233717619768648E18, quaternion0.y(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion0.x(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.y(), 0.01);
      assertTrue(quaternion1.hasNaN());
      assertEquals(Double.NaN, quaternion1.getRotationZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.w(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.z(), 0.01);
      assertEquals(9.2233717619768648E18, quaternion1.x(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertNotNull(quaternion0);
      
      boolean boolean0 = quaternion0.hasNaN();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      String string0 = quaternion0.toString();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals("[0.0, 0.0, 0.0, 1.0]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.slerp((IQuaternion) quaternion0, 0.0, quaternion0);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.multLocal(quaternion0);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(0.0, 0.0, 0.0, 0.0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      Quaternion quaternion2 = quaternion0.slerp((IQuaternion) quaternion1, 0.0);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.w, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertNotNull(quaternion2);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertNotNull(quaternion0);
      
      // Undeclared exception!
      try { 
        quaternion0.mult((IQuaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = new Quaternion(quaternion0);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertNotNull(quaternion1);
      
      quaternion1.hashCode();
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      
      double double0 = quaternion1.getRotationZ();
      assertTrue(quaternion0.equals((Object)quaternion1));
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion1.y, 0.01);
      assertEquals(0.0, quaternion1.x, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(0.0, quaternion1.z, 0.01);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion1.x(), 0.01);
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.y(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Quaternion quaternion0 = null;
      try {
        quaternion0 = new Quaternion(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.d.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertNotNull(quaternion0);
      
      quaternion0.hashCode();
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0, quaternion0.x, 0.01);
      assertEquals(0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(0.0, quaternion0.y, 0.01);
      assertEquals(0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion0.x(), 0.01);
      assertEquals(0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertNotNull(quaternion0);
      
      Quaternion quaternion1 = quaternion0.invert(quaternion0);
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertNotNull(quaternion1);
      
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertNotNull(vector3_0);
      
      double double0 = quaternion0.transformZ(vector3_0);
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertSame(quaternion0, quaternion1);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals((-3.4028234663852886E38), double0, 0.01);
      
      Quaternion quaternion2 = quaternion1.invert();
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertNotNull(quaternion2);
      
      Vector3 vector3_1 = new Vector3();
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertEquals(0.0, vector3_1.z, 0.01);
      assertEquals(0.0, vector3_1.x, 0.01);
      assertEquals(0.0, vector3_1.y, 0.01);
      assertEquals(0.0, vector3_1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3_1.length(), 0.01);
      assertEquals(0.0, vector3_1.z(), 0.01);
      assertEquals(0.0, vector3_1.x(), 0.01);
      assertEquals(0.0, vector3_1.y(), 0.01);
      assertNotNull(vector3_1);
      
      Vector3 vector3_2 = quaternion0.transformAndAdd(vector3_0, vector3_0, vector3_1);
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertFalse(vector3_0.equals((Object)vector3_1));
      assertFalse(vector3_1.equals((Object)vector3_0));
      assertFalse(vector3_2.equals((Object)vector3_0));
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.y, 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z, 0.01);
      assertEquals((-6.805646932770577E38), vector3_1.y, 0.01);
      assertEquals((-6.805646932770577E38), vector3_1.z, 0.01);
      assertEquals((-6.805646932770577E38), vector3_1.x, 0.01);
      assertEquals((-6.805646932770577E38), vector3_2.x, 0.01);
      assertEquals((-6.805646932770577E38), vector3_2.y, 0.01);
      assertEquals((-6.805646932770577E38), vector3_2.z, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(vector3_0, vector3_1);
      assertNotSame(vector3_0, vector3_2);
      assertSame(vector3_1, vector3_2);
      assertNotSame(vector3_1, vector3_0);
      assertNotSame(vector3_2, vector3_0);
      assertSame(vector3_2, vector3_1);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertEquals((-3.4028234663852886E38), vector3_0.y(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.z(), 0.01);
      assertEquals(3.4737622630147174E77, vector3_0.lengthSquared(), 0.01);
      assertEquals(5.8938631329669654E38, vector3_0.length(), 0.01);
      assertEquals((-3.4028234663852886E38), vector3_0.x(), 0.01);
      assertEquals(1.389504905205887E78, vector3_1.lengthSquared(), 0.01);
      assertEquals((-6.805646932770577E38), vector3_1.y(), 0.01);
      assertEquals((-6.805646932770577E38), vector3_1.z(), 0.01);
      assertEquals((-6.805646932770577E38), vector3_1.x(), 0.01);
      assertEquals(1.1787726265933931E39, vector3_1.length(), 0.01);
      assertEquals((-6.805646932770577E38), vector3_2.y(), 0.01);
      assertEquals((-6.805646932770577E38), vector3_2.z(), 0.01);
      assertEquals((-6.805646932770577E38), vector3_2.x(), 0.01);
      assertEquals(1.1787726265933931E39, vector3_2.length(), 0.01);
      assertEquals(1.389504905205887E78, vector3_2.lengthSquared(), 0.01);
      assertNotNull(vector3_2);
      
      Quaternion quaternion3 = quaternion2.normalize();
      assertTrue(quaternion0.equals((Object)quaternion2));
      assertTrue(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertTrue(quaternion3.equals((Object)quaternion2));
      assertEquals(-0.0, quaternion0.x, 0.01);
      assertEquals(-0.0, quaternion0.z, 0.01);
      assertEquals(1.0, quaternion0.w, 0.01);
      assertEquals(-0.0, quaternion0.y, 0.01);
      assertEquals(-0.0, quaternion1.y, 0.01);
      assertEquals(-0.0, quaternion1.x, 0.01);
      assertEquals(-0.0, quaternion1.z, 0.01);
      assertEquals(1.0, quaternion1.w, 0.01);
      assertEquals(1.0, quaternion2.w, 0.01);
      assertEquals(0.0, quaternion2.y, 0.01);
      assertEquals(0.0, quaternion2.x, 0.01);
      assertEquals(0.0, quaternion2.z, 0.01);
      assertEquals(0.0, quaternion3.z, 0.01);
      assertEquals(0.0, quaternion3.x, 0.01);
      assertEquals(0.0, quaternion3.y, 0.01);
      assertEquals(1.0, quaternion3.w, 0.01);
      assertNotSame(quaternion0, quaternion2);
      assertSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion3);
      assertSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion3);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion3);
      assertNotSame(quaternion3, quaternion0);
      assertNotSame(quaternion3, quaternion1);
      assertNotSame(quaternion3, quaternion2);
      assertEquals(-0.0, quaternion0.z(), 0.01);
      assertEquals(1.0, quaternion0.w(), 0.01);
      assertEquals(0.0, quaternion0.getRotationZ(), 0.01);
      assertEquals(-0.0, quaternion0.x(), 0.01);
      assertEquals(-0.0, quaternion0.y(), 0.01);
      assertFalse(quaternion0.hasNaN());
      assertFalse(quaternion1.hasNaN());
      assertEquals(0.0, quaternion1.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion1.w(), 0.01);
      assertEquals(-0.0, quaternion1.y(), 0.01);
      assertEquals(-0.0, quaternion1.x(), 0.01);
      assertEquals(-0.0, quaternion1.z(), 0.01);
      assertEquals(0.0, quaternion2.getRotationZ(), 0.01);
      assertEquals(0.0, quaternion2.z(), 0.01);
      assertEquals(0.0, quaternion2.y(), 0.01);
      assertEquals(0.0, quaternion2.x(), 0.01);
      assertEquals(1.0, quaternion2.w(), 0.01);
      assertFalse(quaternion2.hasNaN());
      assertEquals(0.0, quaternion3.y(), 0.01);
      assertEquals(0.0, quaternion3.x(), 0.01);
      assertEquals(0.0, quaternion3.z(), 0.01);
      assertEquals(0.0, quaternion3.getRotationZ(), 0.01);
      assertEquals(1.0, quaternion3.w(), 0.01);
      assertFalse(quaternion3.hasNaN());
      assertNotNull(quaternion3);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Quaternion quaternion0 = (Quaternion)Quaternion.IDENTITY;
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      quaternion0.transformZ(vector3_0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.4028234663852886E38;
      doubleArray0[1] = 3.4028234663852886E38;
      doubleArray0[2] = 3.4028234663852886E38;
      doubleArray0[3] = 3.4028234663852886E38;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.4028234663852886E38;
      doubleArray0[6] = 3.4028234663852886E38;
      Quaternion quaternion1 = new Quaternion(doubleArray0);
      quaternion1.y();
      quaternion1.toString();
      Quaternion quaternion2 = quaternion1.mult((IQuaternion) quaternion0);
      quaternion1.transformZ(vector3_0);
      quaternion1.slerp((IQuaternion) quaternion0, 3384.666483074554);
      quaternion2.hashCode();
      quaternion1.hasNaN();
      quaternion1.getRotationZ();
      quaternion1.slerp((IQuaternion) quaternion0, 878.3, quaternion2);
      MockRandom mockRandom0 = new MockRandom((-396L));
      // Undeclared exception!
      try { 
        mockRandom0.doubles((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }
}
