/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:33:54 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.Circle;
import pythagoras.d.ICircle;
import pythagoras.d.Point;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Circle_ESTest extends Circle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Circle circle0 = new Circle(2991.363975, 2991.363975, 2991.363975);
      assertEquals(2991.363975, circle0.y, 0.01);
      assertEquals(2991.363975, circle0.radius, 0.01);
      assertEquals(2991.363975, circle0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Circle circle0 = new Circle();
      double double0 = circle0.y();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point point0 = new Point(0.0, 0.0);
      Circle circle0 = new Circle(point0, 1129.2401439458238);
      Circle circle1 = circle0.set((-1.0), 1129.2401439458238, 1.0);
      double double0 = circle1.y();
      assertEquals(1129.2401439458238, circle0.y, 0.01);
      assertEquals(1129.2401439458238, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Circle circle0 = new Circle();
      circle0.set(0.0, (-759.576063538892), (-759.576063538892));
      double double0 = circle0.y();
      assertEquals((-759.576063538892), circle0.radius, 0.01);
      assertEquals((-759.576063538892), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Circle circle0 = new Circle();
      double double0 = circle0.x();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Circle circle0 = new Circle();
      Circle circle1 = circle0.set((-1176.1797308), 3078.869580903846, (-1.0));
      double double0 = circle1.x();
      assertEquals((-1.0), circle0.radius, 0.01);
      assertEquals((-1176.1797308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point point0 = new Point(0.0, 0.0);
      Circle circle0 = new Circle(point0, 1129.2401439458238);
      Circle circle1 = circle0.set((-1.0), 1129.2401439458238, 1.0);
      circle0.set((ICircle) circle1);
      assertEquals((-1.0), circle0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point point0 = new Point(0.0, 0.0);
      Circle circle0 = new Circle(point0, 1129.2401439458238);
      circle0.set((ICircle) circle0);
      assertEquals(0.0, circle0.x, 0.01);
      assertEquals(1129.2401439458238, circle0.radius, 0.01);
      assertEquals(0.0, circle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Circle circle0 = new Circle();
      circle0.set(0.0, 0.0, (-98.8878521));
      circle0.set((ICircle) circle0);
      assertEquals((-98.8878521), circle0.radius, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Circle circle0 = new Circle();
      circle0.set(737.7665545, 923.535892, 0.0);
      assertEquals(737.7665545, circle0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Circle circle0 = new Circle();
      Circle circle1 = circle0.set(0.0, (-759.576063538892), (-759.576063538892));
      circle0.set((ICircle) circle1);
      assertEquals((-759.576063538892), circle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Circle circle0 = new Circle();
      circle0.set(719.8725711305949, 0.0, 719.8725711305949);
      circle0.set((ICircle) circle0);
      assertEquals(719.8725711305949, circle0.radius, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Circle circle0 = new Circle();
      double double0 = circle0.radius();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point point0 = new Point(0.0, 0.0);
      Circle circle0 = new Circle(point0, 1129.2401439458238);
      double double0 = circle0.radius();
      assertEquals(1129.2401439458238, double0, 0.01);
      assertEquals(0.0, circle0.x, 0.01);
      assertEquals(0.0, circle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Circle circle0 = new Circle();
      Circle circle1 = circle0.set(0.0, 0.0, (-98.8878521));
      double double0 = circle1.radius();
      assertEquals((-98.8878521), circle0.radius, 0.01);
      assertEquals((-98.8878521), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Circle circle0 = new Circle();
      // Undeclared exception!
      try { 
        circle0.set((ICircle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Circle", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Circle circle0 = null;
      try {
        circle0 = new Circle((XY) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Circle", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Circle circle0 = null;
      try {
        circle0 = new Circle((ICircle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Circle", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Circle circle0 = new Circle();
      Circle circle1 = circle0.offset(2415.416, 0.0, circle0);
      double double0 = circle1.x();
      assertEquals(2415.416, circle0.x, 0.01);
      assertEquals(2415.416, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Circle circle0 = new Circle();
      Circle circle1 = circle0.set((ICircle) circle0);
      assertEquals(0.0, circle1.x, 0.01);
      assertEquals(0.0, circle0.radius(), 0.01);
      assertEquals(0.0, circle0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Circle circle0 = new Circle();
      Circle circle1 = new Circle(circle0);
      assertEquals(0.0, circle1.radius, 0.01);
      assertEquals(0.0, circle1.x, 0.01);
      assertEquals(0.0, circle1.y, 0.01);
  }
}
