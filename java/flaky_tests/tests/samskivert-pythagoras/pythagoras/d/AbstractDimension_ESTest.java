/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:03:14 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.Dimension;
import pythagoras.d.IDimension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractDimension_ESTest extends AbstractDimension_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = dimension0.clone();
      assertTrue(dimension1.equals((Object)dimension0));
      
      dimension1.height = (-405.35);
      boolean boolean0 = dimension0.equals(dimension1);
      assertFalse(dimension1.equals((Object)dimension0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1041.7181683032675), (-669.0688597432));
      Dimension dimension1 = dimension0.clone();
      dimension1.setSize(0.0, 3469.87);
      Dimension dimension2 = dimension0.clone();
      dimension0.setSize((IDimension) dimension1);
      boolean boolean0 = dimension0.equals(dimension2);
      assertTrue(dimension0.equals((Object)dimension1));
      assertFalse(dimension2.equals((Object)dimension0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1065.446098), (-1065.446098));
      dimension0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      dimension1.width = 3130.80335572;
      Dimension dimension2 = dimension1.clone();
      assertNotSame(dimension1, dimension2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1041.7181683032675), (-669.0688597432));
      dimension0.setSize(0.0, 3469.87);
      Dimension dimension1 = dimension0.clone();
      assertEquals(0.0, dimension1.width(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = dimension0.clone();
      assertTrue(dimension1.equals((Object)dimension0));
      
      dimension1.setSize(0.0, 844.37);
      boolean boolean0 = dimension0.equals(dimension1);
      assertFalse(dimension1.equals((Object)dimension0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1041.7181683032675), (-669.0688597432));
      Dimension dimension1 = dimension0.clone();
      assertTrue(dimension1.equals((Object)dimension0));
      
      dimension0.setSize(0.0, 3469.87);
      boolean boolean0 = dimension1.equals(dimension0);
      assertFalse(dimension1.equals((Object)dimension0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1041.7181683032675), (-669.0688597432));
      Object object0 = new Object();
      boolean boolean0 = dimension0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      boolean boolean0 = dimension0.equals(dimension0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      String string0 = dimension0.toString();
      assertEquals("0.0x0.0", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = dimension0.clone();
      boolean boolean0 = dimension0.equals(dimension1);
      assertTrue(boolean0);
  }
}
