/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:54:18 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.CurveCrossingHelper;
import pythagoras.d.IntersectPoint;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CurveCrossingHelper_ESTest extends CurveCrossingHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      int[] intArray0 = new int[7];
      intArray0[0] = 1455;
      intArray0[1] = (-1991);
      int[][] intArray1 = new int[8][1];
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray0, intArray0, intArray1, intArray0, intArray1);
      // Undeclared exception!
      try { 
        curveCrossingHelper0.findCrossing();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.d.CurveCrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      int[] intArray0 = new int[5];
      intArray0[0] = (-2297);
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray0, intArray0, (int[][]) null, intArray0, (int[][]) null);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(0, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 2;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      int[][] intArray1 = new int[2][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray0, intArray0, intArray1, intArray0, intArray1);
      // Undeclared exception!
      curveCrossingHelper0.findCrossing();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray0, (int[]) null, (int[][]) null, (int[]) null, (int[][]) null);
      // Undeclared exception!
      try { 
        curveCrossingHelper0.findCrossing();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.CurveCrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 3673;
      intArray0[5] = 4;
      int[][] intArray1 = new int[4][6];
      intArray1[1] = intArray0;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray0, intArray0, intArray1, intArray0, intArray1);
      // Undeclared exception!
      try { 
        curveCrossingHelper0.findCrossing();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.CurveCrossingHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray0[1] = doubleArray2;
      int[][] intArray1 = new int[2][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray0, intArray0, intArray1, intArray0, intArray1);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(6, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      int[][] intArray1 = new int[2][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray0, intArray0, intArray1, intArray0, intArray1);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(5, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 2;
      intArray0[1] = 3;
      int[][] intArray1 = new int[18][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      double[][] doubleArray0 = new double[2][9];
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray0, intArray0, intArray1, intArray0, intArray1);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(5, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      int[] intArray0 = new int[11];
      intArray0[0] = 4;
      intArray0[1] = 3;
      int[][] intArray1 = new int[13][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      double[][] doubleArray1 = new double[3][5];
      double[] doubleArray2 = new double[9];
      doubleArray2[4] = (double) 3;
      doubleArray2[5] = (double) 3;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray1, intArray0, intArray1, intArray0, intArray1);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(2, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[16];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 3;
      int[][] intArray1 = new int[4][3];
      int[] intArray2 = new int[4];
      intArray2[1] = 3;
      intArray2[2] = 1;
      int[][] intArray3 = new int[3][7];
      intArray3[0] = intArray2;
      intArray3[1] = intArray2;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray0, intArray2, intArray3, intArray0, intArray1);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(2, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 2;
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray0, intArray0, intArray1, intArray0, intArray1);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(2, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[3] = 2;
      intArray0[4] = 1;
      int[][] intArray1 = new int[2][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = (double) 5;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray0, intArray0, intArray1, intArray0, intArray1);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(3, intersectPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 5;
      int[][] intArray1 = new int[10][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[2] = 1.2301623304774882;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[1] = (double) 5;
      doubleArray0[1] = doubleArray2;
      CurveCrossingHelper curveCrossingHelper0 = new CurveCrossingHelper(doubleArray0, intArray0, intArray1, intArray0, intArray1);
      IntersectPoint[] intersectPointArray0 = curveCrossingHelper0.findCrossing();
      assertEquals(1, intersectPointArray0.length);
  }
}
