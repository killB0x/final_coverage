/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:14:13 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AbstractCubicCurve;
import pythagoras.d.AffineTransform;
import pythagoras.d.CubicCurve;
import pythagoras.d.Dimension;
import pythagoras.d.FlatteningPathIterator;
import pythagoras.d.IRectangle;
import pythagoras.d.IdentityTransform;
import pythagoras.d.PathIterator;
import pythagoras.d.Point;
import pythagoras.d.Rectangle;
import pythagoras.d.Transform;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCubicCurve_ESTest extends AbstractCubicCurve_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertNotNull(cubicCurve0);
      
      AffineTransform affineTransform0 = new AffineTransform();
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertNotNull(affineTransform0);
      
      AbstractCubicCurve.Iterator abstractCubicCurve_Iterator0 = new AbstractCubicCurve.Iterator(cubicCurve0, affineTransform0);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1, abstractCubicCurve_Iterator0.windingRule());
      assertFalse(abstractCubicCurve_Iterator0.isDone());
      assertNotNull(abstractCubicCurve_Iterator0);
      
      double[] doubleArray0 = new double[9];
      abstractCubicCurve_Iterator0.next();
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1, abstractCubicCurve_Iterator0.windingRule());
      assertFalse(abstractCubicCurve_Iterator0.isDone());
      
      int int0 = abstractCubicCurve_Iterator0.currentSegment(doubleArray0);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1, abstractCubicCurve_Iterator0.windingRule());
      assertFalse(abstractCubicCurve_Iterator0.isDone());
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0, 0.0, 0.0, 0.0, 0.0, (-1194.883), 0.0, 0.0);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals((-1194.883), cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1194.883), cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertNotNull(cubicCurve0);
      
      AbstractCubicCurve.Iterator abstractCubicCurve_Iterator0 = new AbstractCubicCurve.Iterator(cubicCurve0, (Transform) null);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals((-1194.883), cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1194.883), cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertFalse(abstractCubicCurve_Iterator0.isDone());
      assertEquals(1, abstractCubicCurve_Iterator0.windingRule());
      assertNotNull(abstractCubicCurve_Iterator0);
      
      boolean boolean0 = abstractCubicCurve_Iterator0.isDone();
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals((-1194.883), cubicCurve0.ctrly2, 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1194.883), cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertFalse(abstractCubicCurve_Iterator0.isDone());
      assertEquals(1, abstractCubicCurve_Iterator0.windingRule());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertNotNull(cubicCurve0);
      
      AffineTransform affineTransform0 = new AffineTransform();
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertNotNull(affineTransform0);
      
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)cubicCurve0.pathIterator((Transform) affineTransform0, (double) 4);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertFalse(flatteningPathIterator0.isDone());
      assertEquals(4.0, flatteningPathIterator0.flatness(), 0.01);
      assertEquals(1, flatteningPathIterator0.windingRule());
      assertNotNull(flatteningPathIterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-403.63792068), 239.83748, 239.83748, 2697.022702644741, 0.0, 1103.3298741451, 1103.3298741451, 2697.022702644741);
      assertEquals(239.83748, cubicCurve0.ctrlx1, 0.01);
      assertEquals(239.83748, cubicCurve0.y1, 0.01);
      assertEquals(1103.3298741451, cubicCurve0.ctrly2, 0.01);
      assertEquals((-403.63792068), cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2, 0.01);
      assertEquals(1103.3298741451, cubicCurve0.x2, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.ctrly1, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1103.3298741451, cubicCurve0.x2(), 0.01);
      assertEquals(239.83748, cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-403.63792068), cubicCurve0.x1(), 0.01);
      assertEquals(2697.022702644741, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(239.83748, cubicCurve0.y1(), 0.01);
      assertEquals(1103.3298741451, cubicCurve0.ctrlY2(), 0.01);
      assertNotNull(cubicCurve0);
      
      Point point0 = cubicCurve0.p2();
      assertEquals(239.83748, cubicCurve0.ctrlx1, 0.01);
      assertEquals(239.83748, cubicCurve0.y1, 0.01);
      assertEquals(1103.3298741451, cubicCurve0.ctrly2, 0.01);
      assertEquals((-403.63792068), cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2, 0.01);
      assertEquals(1103.3298741451, cubicCurve0.x2, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.ctrly1, 0.01);
      assertEquals(1103.3298741451, point0.x, 0.01);
      assertEquals(2697.022702644741, point0.y, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1103.3298741451, cubicCurve0.x2(), 0.01);
      assertEquals(239.83748, cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-403.63792068), cubicCurve0.x1(), 0.01);
      assertEquals(2697.022702644741, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(239.83748, cubicCurve0.y1(), 0.01);
      assertEquals(1103.3298741451, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(1103.3298741451, point0.x(), 0.01);
      assertEquals(2697.022702644741, point0.y(), 0.01);
      assertNotNull(point0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-347.73691034196133), (-347.73691034196133), (-3337.108406), (-347.73691034196133), (-347.73691034196133), (-1.0), (-2016.6679083), (-1.0));
      assertEquals((-347.73691034196133), cubicCurve0.ctrly1, 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-1.0), cubicCurve0.ctrly2, 0.01);
      assertEquals((-1.0), cubicCurve0.y2, 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.y1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.y1(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlY1(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-347.73691034196133), cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-1.0), cubicCurve0.y2(), 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2(), 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlY2(), 0.01);
      assertNotNull(cubicCurve0);
      
      Point point0 = cubicCurve0.p2();
      assertEquals((-347.73691034196133), cubicCurve0.ctrly1, 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-1.0), cubicCurve0.ctrly2, 0.01);
      assertEquals((-1.0), cubicCurve0.y2, 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.y1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1, 0.01);
      assertEquals((-2016.6679083), point0.x, 0.01);
      assertEquals((-1.0), point0.y, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.y1(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlY1(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-347.73691034196133), cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-1.0), cubicCurve0.y2(), 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2(), 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlY2(), 0.01);
      assertEquals((-2016.6679083), point0.x(), 0.01);
      assertEquals((-1.0), point0.y(), 0.01);
      assertNotNull(point0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(52.423767, 52.423767, (-1.0), 52.423767, 0.0, 52.423767, 52.423767, (-1.0));
      assertEquals((-1.0), cubicCurve0.y2, 0.01);
      assertEquals(52.423767, cubicCurve0.ctrly2, 0.01);
      assertEquals(52.423767, cubicCurve0.ctrly1, 0.01);
      assertEquals(52.423767, cubicCurve0.x2, 0.01);
      assertEquals(52.423767, cubicCurve0.x1, 0.01);
      assertEquals(52.423767, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-1.0), cubicCurve0.y2(), 0.01);
      assertEquals(52.423767, cubicCurve0.x1(), 0.01);
      assertEquals(52.423767, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlX1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(52.423767, cubicCurve0.x2(), 0.01);
      assertEquals(52.423767, cubicCurve0.y1(), 0.01);
      assertEquals(52.423767, cubicCurve0.ctrlY1(), 0.01);
      assertNotNull(cubicCurve0);
      
      Point point0 = cubicCurve0.p1();
      assertEquals((-1.0), cubicCurve0.y2, 0.01);
      assertEquals(52.423767, cubicCurve0.ctrly2, 0.01);
      assertEquals(52.423767, cubicCurve0.ctrly1, 0.01);
      assertEquals(52.423767, cubicCurve0.x2, 0.01);
      assertEquals(52.423767, cubicCurve0.x1, 0.01);
      assertEquals(52.423767, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlx1, 0.01);
      assertEquals(52.423767, point0.x, 0.01);
      assertEquals(52.423767, point0.y, 0.01);
      assertEquals((-1.0), cubicCurve0.y2(), 0.01);
      assertEquals(52.423767, cubicCurve0.x1(), 0.01);
      assertEquals(52.423767, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlX1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(52.423767, cubicCurve0.x2(), 0.01);
      assertEquals(52.423767, cubicCurve0.y1(), 0.01);
      assertEquals(52.423767, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(52.423767, point0.x(), 0.01);
      assertEquals(52.423767, point0.y(), 0.01);
      assertNotNull(point0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-2552.982), (-2552.982), (-2552.982), 1113.37252494, 1.0, 1113.37252494, 4167.0, 2951.2921218225);
      assertEquals(1113.37252494, cubicCurve0.ctrly2, 0.01);
      assertEquals(2951.2921218225, cubicCurve0.y2, 0.01);
      assertEquals((-2552.982), cubicCurve0.y1, 0.01);
      assertEquals((-2552.982), cubicCurve0.x1, 0.01);
      assertEquals((-2552.982), cubicCurve0.ctrlx1, 0.01);
      assertEquals(1.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(4167.0, cubicCurve0.x2, 0.01);
      assertEquals(1113.37252494, cubicCurve0.ctrly1, 0.01);
      assertEquals(2951.2921218225, cubicCurve0.y2(), 0.01);
      assertEquals(1113.37252494, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(4167.0, cubicCurve0.x2(), 0.01);
      assertEquals(1113.37252494, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(1.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-2552.982), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-2552.982), cubicCurve0.y1(), 0.01);
      assertEquals((-2552.982), cubicCurve0.x1(), 0.01);
      assertNotNull(cubicCurve0);
      
      Point point0 = cubicCurve0.p1();
      assertEquals(1113.37252494, cubicCurve0.ctrly2, 0.01);
      assertEquals(2951.2921218225, cubicCurve0.y2, 0.01);
      assertEquals((-2552.982), cubicCurve0.y1, 0.01);
      assertEquals((-2552.982), cubicCurve0.x1, 0.01);
      assertEquals((-2552.982), cubicCurve0.ctrlx1, 0.01);
      assertEquals(1.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(4167.0, cubicCurve0.x2, 0.01);
      assertEquals(1113.37252494, cubicCurve0.ctrly1, 0.01);
      assertEquals((-2552.982), point0.x, 0.01);
      assertEquals((-2552.982), point0.y, 0.01);
      assertEquals(2951.2921218225, cubicCurve0.y2(), 0.01);
      assertEquals(1113.37252494, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(4167.0, cubicCurve0.x2(), 0.01);
      assertEquals(1113.37252494, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(1.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-2552.982), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-2552.982), cubicCurve0.y1(), 0.01);
      assertEquals((-2552.982), cubicCurve0.x1(), 0.01);
      assertEquals((-2552.982), point0.y(), 0.01);
      assertEquals((-2552.982), point0.x(), 0.01);
      assertNotNull(point0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0, (-3115.836), 0.0, (-2573.82386132075), 0.0, (-2573.82386132075), 3.14159265359, (-1449.296763));
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals((-3115.836), cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals((-1449.296763), cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrly1, 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrly2, 0.01);
      assertEquals(3.14159265359, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrlY2(), 0.01);
      assertEquals(3.14159265359, cubicCurve0.x2(), 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals((-1449.296763), cubicCurve0.y2(), 0.01);
      assertEquals((-3115.836), cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertNotNull(cubicCurve0);
      
      double double0 = cubicCurve0.flatnessSq();
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals((-3115.836), cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals((-1449.296763), cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrly1, 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrly2, 0.01);
      assertEquals(3.14159265359, cubicCurve0.x2, 0.01);
      assertEquals(1.0439630839208491, double0, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrlY2(), 0.01);
      assertEquals(3.14159265359, cubicCurve0.x2(), 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals((-1449.296763), cubicCurve0.y2(), 0.01);
      assertEquals((-3115.836), cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-403.63792068), 239.83748, 239.83748, 2697.022702644741, 0.0, 1103.3298741451, 1103.3298741451, 2697.022702644741);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(239.83748, cubicCurve0.y1, 0.01);
      assertEquals((-403.63792068), cubicCurve0.x1, 0.01);
      assertEquals(1103.3298741451, cubicCurve0.ctrly2, 0.01);
      assertEquals(1103.3298741451, cubicCurve0.x2, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.ctrly1, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2, 0.01);
      assertEquals(239.83748, cubicCurve0.ctrlx1, 0.01);
      assertEquals(239.83748, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(1103.3298741451, cubicCurve0.ctrlY2(), 0.01);
      assertEquals((-403.63792068), cubicCurve0.x1(), 0.01);
      assertEquals(239.83748, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(1103.3298741451, cubicCurve0.x2(), 0.01);
      assertEquals(2697.022702644741, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertNotNull(cubicCurve0);
      
      double double0 = cubicCurve0.flatness();
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(239.83748, cubicCurve0.y1, 0.01);
      assertEquals((-403.63792068), cubicCurve0.x1, 0.01);
      assertEquals(1103.3298741451, cubicCurve0.ctrly2, 0.01);
      assertEquals(1103.3298741451, cubicCurve0.x2, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.ctrly1, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2, 0.01);
      assertEquals(239.83748, cubicCurve0.ctrlx1, 0.01);
      assertEquals(736.0877339056018, double0, 0.01);
      assertEquals(239.83748, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(1103.3298741451, cubicCurve0.ctrlY2(), 0.01);
      assertEquals((-403.63792068), cubicCurve0.x1(), 0.01);
      assertEquals(239.83748, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(1103.3298741451, cubicCurve0.x2(), 0.01);
      assertEquals(2697.022702644741, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0, 1249.3866951984942, 0.0, 1788.0618468, 0.0, 1137.0, 1249.3866951984942, 1788.0618468);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(1788.0618468, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(1788.0618468, cubicCurve0.ctrly1, 0.01);
      assertEquals(1249.3866951984942, cubicCurve0.y1, 0.01);
      assertEquals(1249.3866951984942, cubicCurve0.x2, 0.01);
      assertEquals(1137.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(1249.3866951984942, cubicCurve0.x2(), 0.01);
      assertEquals(1137.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(1788.0618468, cubicCurve0.y2(), 0.01);
      assertEquals(1788.0618468, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1249.3866951984942, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertNotNull(cubicCurve0);
      
      Point point0 = cubicCurve0.ctrlP2();
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(1788.0618468, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(1788.0618468, cubicCurve0.ctrly1, 0.01);
      assertEquals(1249.3866951984942, cubicCurve0.y1, 0.01);
      assertEquals(1249.3866951984942, cubicCurve0.x2, 0.01);
      assertEquals(1137.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(1137.0, point0.y, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(1249.3866951984942, cubicCurve0.x2(), 0.01);
      assertEquals(1137.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(1788.0618468, cubicCurve0.y2(), 0.01);
      assertEquals(1788.0618468, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1249.3866951984942, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(1137.0, point0.y(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertNotNull(point0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-403.63792068), 239.83748, 239.83748, 2697.022702644741, 0.0, 1103.3298741451, 1103.3298741451, 2697.022702644741);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(239.83748, cubicCurve0.ctrlx1, 0.01);
      assertEquals((-403.63792068), cubicCurve0.x1, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2, 0.01);
      assertEquals(1103.3298741451, cubicCurve0.x2, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.ctrly1, 0.01);
      assertEquals(1103.3298741451, cubicCurve0.ctrly2, 0.01);
      assertEquals(239.83748, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-403.63792068), cubicCurve0.x1(), 0.01);
      assertEquals(239.83748, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(1103.3298741451, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(239.83748, cubicCurve0.y1(), 0.01);
      assertEquals(2697.022702644741, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1103.3298741451, cubicCurve0.x2(), 0.01);
      assertNotNull(cubicCurve0);
      
      cubicCurve0.setCurve(0.0, 1701.6780749987056, 0.0, 0.0, 0.0, (-2642.322), 0.0, 2697.022702644741);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(1701.6780749987056, cubicCurve0.y1, 0.01);
      assertEquals((-2642.322), cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-2642.322), cubicCurve0.ctrlY2(), 0.01);
      assertEquals(1701.6780749987056, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      
      Point point0 = cubicCurve0.ctrlP2();
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(1701.6780749987056, cubicCurve0.y1, 0.01);
      assertEquals((-2642.322), cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals((-2642.322), point0.y, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-2642.322), cubicCurve0.ctrlY2(), 0.01);
      assertEquals(1701.6780749987056, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(2697.022702644741, cubicCurve0.y2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-2642.322), point0.y(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertNotNull(point0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertNotNull(cubicCurve0);
      
      cubicCurve0.setCurve(0.0, 0.0, 1.0, 0.0, 1661.98536, 0.0, 0.0, 1367.78);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(1661.98536, cubicCurve0.ctrlx2, 0.01);
      assertEquals(1.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(1367.78, cubicCurve0.y2, 0.01);
      assertEquals(1367.78, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(1.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(1661.98536, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      
      Point point0 = cubicCurve0.ctrlP2();
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(1661.98536, cubicCurve0.ctrlx2, 0.01);
      assertEquals(1.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(1367.78, cubicCurve0.y2, 0.01);
      assertEquals(1661.98536, point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals(1367.78, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(1.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(1661.98536, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(1661.98536, point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertNotNull(point0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertNotNull(cubicCurve0);
      
      cubicCurve0.setCurve(2037.06348, 2037.06348, 0.0, 2037.06348, (-724.49269467775), 0.0, 2037.06348, 0.0);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrly1, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2, 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(2037.06348, cubicCurve0.x1, 0.01);
      assertEquals(2037.06348, cubicCurve0.y1, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x1(), 0.01);
      assertEquals(2037.06348, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlX2(), 0.01);
      
      Point point0 = cubicCurve0.ctrlP2();
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrly1, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2, 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(2037.06348, cubicCurve0.x1, 0.01);
      assertEquals(2037.06348, cubicCurve0.y1, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals((-724.49269467775), point0.x, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x1(), 0.01);
      assertEquals(2037.06348, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals((-724.49269467775), point0.x(), 0.01);
      assertNotNull(point0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertNotNull(cubicCurve0);
      
      cubicCurve0.setCurve(2037.06348, 2037.06348, 0.0, 2037.06348, (-724.49269467775), 0.0, 2037.06348, 0.0);
      assertEquals((-724.49269467775), cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(2037.06348, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2, 0.01);
      assertEquals(2037.06348, cubicCurve0.y1, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrly1, 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(2037.06348, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x1(), 0.01);
      assertEquals(2037.06348, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlX2(), 0.01);
      
      Point point0 = cubicCurve0.ctrlP1();
      assertEquals((-724.49269467775), cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(2037.06348, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2, 0.01);
      assertEquals(2037.06348, cubicCurve0.y1, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrly1, 0.01);
      assertEquals(2037.06348, point0.y, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(2037.06348, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x1(), 0.01);
      assertEquals(2037.06348, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(2037.06348, point0.y(), 0.01);
      assertNotNull(point0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0, 0.0, 1422.47919, 0.0, (-3.141592653589793), (-405.0243761582), 1.0, (-2098.0));
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(1.0, cubicCurve0.x2, 0.01);
      assertEquals(1422.47919, cubicCurve0.ctrlx1, 0.01);
      assertEquals((-405.0243761582), cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals((-2098.0), cubicCurve0.y2, 0.01);
      assertEquals((-3.141592653589793), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-405.0243761582), cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1.0, cubicCurve0.x2(), 0.01);
      assertEquals((-2098.0), cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(1422.47919, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals((-3.141592653589793), cubicCurve0.ctrlX2(), 0.01);
      assertNotNull(cubicCurve0);
      
      Point point0 = cubicCurve0.ctrlP1();
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(1.0, cubicCurve0.x2, 0.01);
      assertEquals(1422.47919, cubicCurve0.ctrlx1, 0.01);
      assertEquals((-405.0243761582), cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals((-2098.0), cubicCurve0.y2, 0.01);
      assertEquals((-3.141592653589793), cubicCurve0.ctrlx2, 0.01);
      assertEquals(1422.47919, point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals((-405.0243761582), cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1.0, cubicCurve0.x2(), 0.01);
      assertEquals((-2098.0), cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(1422.47919, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals((-3.141592653589793), cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals(1422.47919, point0.x(), 0.01);
      assertNotNull(point0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-347.73691034196133), (-347.73691034196133), (-3337.108406), (-347.73691034196133), (-347.73691034196133), (-1.0), (-2016.6679083), (-1.0));
      assertEquals((-1.0), cubicCurve0.ctrly2, 0.01);
      assertEquals((-1.0), cubicCurve0.y2, 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrly1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.y1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1, 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-1.0), cubicCurve0.y2(), 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlY2(), 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2(), 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-347.73691034196133), cubicCurve0.ctrlY1(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1(), 0.01);
      assertNotNull(cubicCurve0);
      
      Point point0 = cubicCurve0.ctrlP1();
      assertEquals((-1.0), cubicCurve0.ctrly2, 0.01);
      assertEquals((-1.0), cubicCurve0.y2, 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrly1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.y1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1, 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-3337.108406), point0.x, 0.01);
      assertEquals((-347.73691034196133), point0.y, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-1.0), cubicCurve0.y2(), 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlY2(), 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2(), 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-347.73691034196133), cubicCurve0.ctrlY1(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1(), 0.01);
      assertEquals((-3337.108406), point0.x(), 0.01);
      assertEquals((-347.73691034196133), point0.y(), 0.01);
      assertNotNull(point0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertNotNull(cubicCurve0);
      
      cubicCurve0.setCurve(146.30942485650465, 146.30942485650465, (-1511.0), 2037.06348, (-724.49269467775), (-1511.0), 2037.06348, 0.0);
      assertEquals((-724.49269467775), cubicCurve0.ctrlx2, 0.01);
      assertEquals(146.30942485650465, cubicCurve0.x1, 0.01);
      assertEquals(146.30942485650465, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrly1, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrlY1(), 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlY2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x2(), 0.01);
      assertEquals(146.30942485650465, cubicCurve0.x1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(146.30942485650465, cubicCurve0.y1(), 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlX2(), 0.01);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertNotNull(point0);
      
      boolean boolean0 = cubicCurve0.contains((XY) point0);
      assertEquals((-724.49269467775), cubicCurve0.ctrlx2, 0.01);
      assertEquals(146.30942485650465, cubicCurve0.x1, 0.01);
      assertEquals(146.30942485650465, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrly1, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrlY1(), 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlY2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x2(), 0.01);
      assertEquals(146.30942485650465, cubicCurve0.x1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(146.30942485650465, cubicCurve0.y1(), 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertNotNull(cubicCurve0);
      
      cubicCurve0.setCurve(146.30942485650465, 146.30942485650465, (-1511.0), 2037.06348, (-724.49269467775), (-1511.0), 2037.06348, 0.0);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrly1, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrly2, 0.01);
      assertEquals(146.30942485650465, cubicCurve0.x1, 0.01);
      assertEquals(146.30942485650465, cubicCurve0.y1, 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlY2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(146.30942485650465, cubicCurve0.y1(), 0.01);
      assertEquals(146.30942485650465, cubicCurve0.x1(), 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrlY1(), 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlX2(), 0.01);
      
      boolean boolean0 = cubicCurve0.contains(0.0, 9.999999747378752E-6);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrly1, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrly2, 0.01);
      assertEquals(146.30942485650465, cubicCurve0.x1, 0.01);
      assertEquals(146.30942485650465, cubicCurve0.y1, 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlx2, 0.01);
      assertTrue(boolean0);
      assertEquals((-1511.0), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlY2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(146.30942485650465, cubicCurve0.y1(), 0.01);
      assertEquals(146.30942485650465, cubicCurve0.x1(), 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrlY1(), 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlX2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(2144.0, 1.0, 2144.0, 0.0, 2144.0, 0.0, (-4187.7292), (-2154.0));
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals((-2154.0), cubicCurve0.y2, 0.01);
      assertEquals(2144.0, cubicCurve0.x1, 0.01);
      assertEquals((-4187.7292), cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(1.0, cubicCurve0.y1, 0.01);
      assertEquals(2144.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(1.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-4187.7292), cubicCurve0.x2(), 0.01);
      assertEquals((-2154.0), cubicCurve0.y2(), 0.01);
      assertNotNull(cubicCurve0);
      
      CubicCurve cubicCurve1 = cubicCurve0.clone();
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals((-2154.0), cubicCurve0.y2, 0.01);
      assertEquals(2144.0, cubicCurve0.x1, 0.01);
      assertEquals((-4187.7292), cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(1.0, cubicCurve0.y1, 0.01);
      assertEquals(2144.0, cubicCurve1.x1, 0.01);
      assertEquals(2144.0, cubicCurve1.ctrlx1, 0.01);
      assertEquals((-2154.0), cubicCurve1.y2, 0.01);
      assertEquals((-4187.7292), cubicCurve1.x2, 0.01);
      assertEquals(0.0, cubicCurve1.ctrly2, 0.01);
      assertEquals(2144.0, cubicCurve1.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve1.ctrly1, 0.01);
      assertEquals(1.0, cubicCurve1.y1, 0.01);
      assertEquals(2144.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(1.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-4187.7292), cubicCurve0.x2(), 0.01);
      assertEquals((-2154.0), cubicCurve0.y2(), 0.01);
      assertEquals(2144.0, cubicCurve1.x1(), 0.01);
      assertEquals(2144.0, cubicCurve1.ctrlX2(), 0.01);
      assertEquals(2144.0, cubicCurve1.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve1.ctrlY1(), 0.01);
      assertEquals(1.0, cubicCurve1.y1(), 0.01);
      assertEquals((-4187.7292), cubicCurve1.x2(), 0.01);
      assertTrue(cubicCurve1.isEmpty());
      assertEquals(0.0, cubicCurve1.ctrlY2(), 0.01);
      assertEquals((-2154.0), cubicCurve1.y2(), 0.01);
      assertNotSame(cubicCurve0, cubicCurve1);
      assertNotSame(cubicCurve1, cubicCurve0);
      assertNotNull(cubicCurve1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(596.27, 596.27, 596.27, 0.0, 1296.0, (-2291.6598670815), 0.0, 677.483574878703);
      assertEquals(596.27, cubicCurve0.y1, 0.01);
      assertEquals((-2291.6598670815), cubicCurve0.ctrly2, 0.01);
      assertEquals(596.27, cubicCurve0.x1, 0.01);
      assertEquals(596.27, cubicCurve0.ctrlx1, 0.01);
      assertEquals(1296.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(677.483574878703, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(677.483574878703, cubicCurve0.y2(), 0.01);
      assertEquals(596.27, cubicCurve0.ctrlX1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(596.27, cubicCurve0.x1(), 0.01);
      assertEquals((-2291.6598670815), cubicCurve0.ctrlY2(), 0.01);
      assertEquals(596.27, cubicCurve0.y1(), 0.01);
      assertEquals(1296.0, cubicCurve0.ctrlX2(), 0.01);
      assertNotNull(cubicCurve0);
      
      CubicCurve cubicCurve1 = cubicCurve0.clone();
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
      assertEquals(596.27, cubicCurve0.y1, 0.01);
      assertEquals((-2291.6598670815), cubicCurve0.ctrly2, 0.01);
      assertEquals(596.27, cubicCurve0.x1, 0.01);
      assertEquals(596.27, cubicCurve0.ctrlx1, 0.01);
      assertEquals(1296.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(677.483574878703, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals((-2291.6598670815), cubicCurve1.ctrly2, 0.01);
      assertEquals(677.483574878703, cubicCurve1.y2, 0.01);
      assertEquals(596.27, cubicCurve1.y1, 0.01);
      assertEquals(0.0, cubicCurve1.x2, 0.01);
      assertEquals(596.27, cubicCurve1.x1, 0.01);
      assertEquals(0.0, cubicCurve1.ctrly1, 0.01);
      assertEquals(1296.0, cubicCurve1.ctrlx2, 0.01);
      assertEquals(596.27, cubicCurve1.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(677.483574878703, cubicCurve0.y2(), 0.01);
      assertEquals(596.27, cubicCurve0.ctrlX1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(596.27, cubicCurve0.x1(), 0.01);
      assertEquals((-2291.6598670815), cubicCurve0.ctrlY2(), 0.01);
      assertEquals(596.27, cubicCurve0.y1(), 0.01);
      assertEquals(1296.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-2291.6598670815), cubicCurve1.ctrlY2(), 0.01);
      assertEquals(596.27, cubicCurve1.x1(), 0.01);
      assertEquals(596.27, cubicCurve1.y1(), 0.01);
      assertEquals(677.483574878703, cubicCurve1.y2(), 0.01);
      assertEquals(0.0, cubicCurve1.x2(), 0.01);
      assertEquals(0.0, cubicCurve1.ctrlY1(), 0.01);
      assertEquals(1296.0, cubicCurve1.ctrlX2(), 0.01);
      assertEquals(596.27, cubicCurve1.ctrlX1(), 0.01);
      assertTrue(cubicCurve1.isEmpty());
      assertNotSame(cubicCurve0, cubicCurve1);
      assertNotSame(cubicCurve1, cubicCurve0);
      assertNotNull(cubicCurve1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0, (-3115.836), 0.0, (-2573.82386132075), 0.0, (-2573.82386132075), 3.14159265359, (-1449.296763));
      assertEquals((-2573.82386132075), cubicCurve0.ctrly1, 0.01);
      assertEquals(3.14159265359, cubicCurve0.x2, 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals((-1449.296763), cubicCurve0.y2, 0.01);
      assertEquals((-3115.836), cubicCurve0.y1, 0.01);
      assertEquals((-3115.836), cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals((-1449.296763), cubicCurve0.y2(), 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrlY2(), 0.01);
      assertEquals(3.14159265359, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrlY1(), 0.01);
      assertNotNull(cubicCurve0);
      
      CubicCurve cubicCurve1 = cubicCurve0.clone();
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
      assertEquals((-2573.82386132075), cubicCurve0.ctrly1, 0.01);
      assertEquals(3.14159265359, cubicCurve0.x2, 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals((-1449.296763), cubicCurve0.y2, 0.01);
      assertEquals((-3115.836), cubicCurve0.y1, 0.01);
      assertEquals((-3115.836), cubicCurve1.y1, 0.01);
      assertEquals(0.0, cubicCurve1.ctrlx2, 0.01);
      assertEquals((-2573.82386132075), cubicCurve1.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve1.x1, 0.01);
      assertEquals((-1449.296763), cubicCurve1.y2, 0.01);
      assertEquals(3.14159265359, cubicCurve1.x2, 0.01);
      assertEquals(0.0, cubicCurve1.ctrlx1, 0.01);
      assertEquals((-2573.82386132075), cubicCurve1.ctrly2, 0.01);
      assertEquals((-3115.836), cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals((-1449.296763), cubicCurve0.y2(), 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrlY2(), 0.01);
      assertEquals(3.14159265359, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-2573.82386132075), cubicCurve0.ctrlY1(), 0.01);
      assertEquals((-3115.836), cubicCurve1.y1(), 0.01);
      assertEquals((-2573.82386132075), cubicCurve1.ctrlY2(), 0.01);
      assertEquals(3.14159265359, cubicCurve1.x2(), 0.01);
      assertEquals(0.0, cubicCurve1.x1(), 0.01);
      assertEquals((-1449.296763), cubicCurve1.y2(), 0.01);
      assertTrue(cubicCurve1.isEmpty());
      assertEquals(0.0, cubicCurve1.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve1.ctrlX2(), 0.01);
      assertEquals((-2573.82386132075), cubicCurve1.ctrlY1(), 0.01);
      assertNotSame(cubicCurve0, cubicCurve1);
      assertNotSame(cubicCurve1, cubicCurve0);
      assertNotNull(cubicCurve1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0, 0.0, 1422.47919, 0.0, (-3.141592653589793), (-405.0243761582), 1.0, (-2098.0));
      assertEquals((-3.141592653589793), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-405.0243761582), cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(1.0, cubicCurve0.x2, 0.01);
      assertEquals(1422.47919, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals((-2098.0), cubicCurve0.y2, 0.01);
      assertEquals(1422.47919, cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-405.0243761582), cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-2098.0), cubicCurve0.y2(), 0.01);
      assertEquals((-3.141592653589793), cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(1.0, cubicCurve0.x2(), 0.01);
      assertNotNull(cubicCurve0);
      
      CubicCurve cubicCurve1 = cubicCurve0.clone();
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
      assertEquals((-3.141592653589793), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-405.0243761582), cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(1.0, cubicCurve0.x2, 0.01);
      assertEquals(1422.47919, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals((-2098.0), cubicCurve0.y2, 0.01);
      assertEquals((-3.141592653589793), cubicCurve1.ctrlx2, 0.01);
      assertEquals(1.0, cubicCurve1.x2, 0.01);
      assertEquals(1422.47919, cubicCurve1.ctrlx1, 0.01);
      assertEquals((-2098.0), cubicCurve1.y2, 0.01);
      assertEquals(0.0, cubicCurve1.y1, 0.01);
      assertEquals(0.0, cubicCurve1.ctrly1, 0.01);
      assertEquals((-405.0243761582), cubicCurve1.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve1.x1, 0.01);
      assertEquals(1422.47919, cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-405.0243761582), cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-2098.0), cubicCurve0.y2(), 0.01);
      assertEquals((-3.141592653589793), cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(1.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve1.ctrlY1(), 0.01);
      assertEquals((-405.0243761582), cubicCurve1.ctrlY2(), 0.01);
      assertTrue(cubicCurve1.isEmpty());
      assertEquals(1.0, cubicCurve1.x2(), 0.01);
      assertEquals(0.0, cubicCurve1.x1(), 0.01);
      assertEquals(1422.47919, cubicCurve1.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve1.y1(), 0.01);
      assertEquals((-2098.0), cubicCurve1.y2(), 0.01);
      assertEquals((-3.141592653589793), cubicCurve1.ctrlX2(), 0.01);
      assertNotSame(cubicCurve0, cubicCurve1);
      assertNotSame(cubicCurve1, cubicCurve0);
      assertNotNull(cubicCurve1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-2552.982), (-2552.982), (-2552.982), 1113.37252494, 1.0, 1113.37252494, 4167.0, 2951.2921218225);
      assertEquals(1.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals((-2552.982), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-2552.982), cubicCurve0.x1, 0.01);
      assertEquals((-2552.982), cubicCurve0.y1, 0.01);
      assertEquals(1113.37252494, cubicCurve0.ctrly2, 0.01);
      assertEquals(2951.2921218225, cubicCurve0.y2, 0.01);
      assertEquals(4167.0, cubicCurve0.x2, 0.01);
      assertEquals(1113.37252494, cubicCurve0.ctrly1, 0.01);
      assertEquals(1.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-2552.982), cubicCurve0.ctrlX1(), 0.01);
      assertEquals(4167.0, cubicCurve0.x2(), 0.01);
      assertEquals(1113.37252494, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1113.37252494, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(2951.2921218225, cubicCurve0.y2(), 0.01);
      assertEquals((-2552.982), cubicCurve0.x1(), 0.01);
      assertEquals((-2552.982), cubicCurve0.y1(), 0.01);
      assertNotNull(cubicCurve0);
      
      CubicCurve cubicCurve1 = cubicCurve0.clone();
      assertFalse(cubicCurve1.equals((Object)cubicCurve0));
      assertEquals(1.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals((-2552.982), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-2552.982), cubicCurve0.x1, 0.01);
      assertEquals((-2552.982), cubicCurve0.y1, 0.01);
      assertEquals(1113.37252494, cubicCurve0.ctrly2, 0.01);
      assertEquals(2951.2921218225, cubicCurve0.y2, 0.01);
      assertEquals(4167.0, cubicCurve0.x2, 0.01);
      assertEquals(1113.37252494, cubicCurve0.ctrly1, 0.01);
      assertEquals(1.0, cubicCurve1.ctrlx2, 0.01);
      assertEquals(4167.0, cubicCurve1.x2, 0.01);
      assertEquals(1113.37252494, cubicCurve1.ctrly1, 0.01);
      assertEquals((-2552.982), cubicCurve1.ctrlx1, 0.01);
      assertEquals((-2552.982), cubicCurve1.x1, 0.01);
      assertEquals(2951.2921218225, cubicCurve1.y2, 0.01);
      assertEquals((-2552.982), cubicCurve1.y1, 0.01);
      assertEquals(1113.37252494, cubicCurve1.ctrly2, 0.01);
      assertEquals(1.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-2552.982), cubicCurve0.ctrlX1(), 0.01);
      assertEquals(4167.0, cubicCurve0.x2(), 0.01);
      assertEquals(1113.37252494, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1113.37252494, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(2951.2921218225, cubicCurve0.y2(), 0.01);
      assertEquals((-2552.982), cubicCurve0.x1(), 0.01);
      assertEquals((-2552.982), cubicCurve0.y1(), 0.01);
      assertEquals((-2552.982), cubicCurve1.x1(), 0.01);
      assertEquals((-2552.982), cubicCurve1.y1(), 0.01);
      assertEquals(2951.2921218225, cubicCurve1.y2(), 0.01);
      assertEquals(1113.37252494, cubicCurve1.ctrlY2(), 0.01);
      assertEquals(1.0, cubicCurve1.ctrlX2(), 0.01);
      assertEquals((-2552.982), cubicCurve1.ctrlX1(), 0.01);
      assertEquals(4167.0, cubicCurve1.x2(), 0.01);
      assertEquals(1113.37252494, cubicCurve1.ctrlY1(), 0.01);
      assertTrue(cubicCurve1.isEmpty());
      assertNotSame(cubicCurve0, cubicCurve1);
      assertNotSame(cubicCurve1, cubicCurve0);
      assertNotNull(cubicCurve1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1.0, 3139.47642816, 3139.47642816, 666.1446476658615, 0.0, 1.0, 1.0, 3139.47642816);
      assertEquals(1.0, cubicCurve0.x1, 0.01);
      assertEquals(1.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(3139.47642816, cubicCurve0.y2, 0.01);
      assertEquals(666.1446476658615, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(3139.47642816, cubicCurve0.y1, 0.01);
      assertEquals(3139.47642816, cubicCurve0.ctrlx1, 0.01);
      assertEquals(1.0, cubicCurve0.x2, 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1.0, cubicCurve0.x2(), 0.01);
      assertEquals(666.1446476658615, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(1.0, cubicCurve0.x1(), 0.01);
      assertEquals(3139.47642816, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(3139.47642816, cubicCurve0.y2(), 0.01);
      assertEquals(1.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(3139.47642816, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertNotNull(cubicCurve0);
      
      Dimension dimension0 = new Dimension(1.0, 9.0);
      assertEquals(9.0, dimension0.height, 0.01);
      assertEquals(1.0, dimension0.width, 0.01);
      assertEquals(1.0, dimension0.width(), 0.01);
      assertEquals(9.0, dimension0.height(), 0.01);
      assertNotNull(dimension0);
      
      Rectangle rectangle0 = new Rectangle(dimension0);
      assertEquals(9.0, dimension0.height, 0.01);
      assertEquals(1.0, dimension0.width, 0.01);
      assertEquals(9.0, rectangle0.height, 0.01);
      assertEquals(0.0, rectangle0.y, 0.01);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(1.0, rectangle0.width, 0.01);
      assertEquals(1.0, dimension0.width(), 0.01);
      assertEquals(9.0, dimension0.height(), 0.01);
      assertEquals(0.0, rectangle0.y(), 0.01);
      assertEquals(1.0, rectangle0.width(), 0.01);
      assertEquals(0.0, rectangle0.x(), 0.01);
      assertEquals(9.0, rectangle0.height(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle rectangle1 = cubicCurve0.bounds(rectangle0);
      assertEquals(1.0, cubicCurve0.x1, 0.01);
      assertEquals(1.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(3139.47642816, cubicCurve0.y2, 0.01);
      assertEquals(666.1446476658615, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(3139.47642816, cubicCurve0.y1, 0.01);
      assertEquals(3139.47642816, cubicCurve0.ctrlx1, 0.01);
      assertEquals(1.0, cubicCurve0.x2, 0.01);
      assertEquals(9.0, dimension0.height, 0.01);
      assertEquals(1.0, dimension0.width, 0.01);
      assertEquals(1.0, rectangle0.y, 0.01);
      assertEquals(3139.47642816, rectangle0.width, 0.01);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(3138.47642816, rectangle0.height, 0.01);
      assertEquals(3139.47642816, rectangle1.width, 0.01);
      assertEquals(0.0, rectangle1.x, 0.01);
      assertEquals(1.0, rectangle1.y, 0.01);
      assertEquals(3138.47642816, rectangle1.height, 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1.0, cubicCurve0.x2(), 0.01);
      assertEquals(666.1446476658615, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(1.0, cubicCurve0.x1(), 0.01);
      assertEquals(3139.47642816, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(3139.47642816, cubicCurve0.y2(), 0.01);
      assertEquals(1.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(3139.47642816, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(1.0, dimension0.width(), 0.01);
      assertEquals(9.0, dimension0.height(), 0.01);
      assertEquals(3138.47642816, rectangle0.height(), 0.01);
      assertEquals(1.0, rectangle0.y(), 0.01);
      assertEquals(0.0, rectangle0.x(), 0.01);
      assertEquals(3139.47642816, rectangle0.width(), 0.01);
      assertEquals(3138.47642816, rectangle1.height(), 0.01);
      assertEquals(3139.47642816, rectangle1.width(), 0.01);
      assertEquals(0.0, rectangle1.x(), 0.01);
      assertEquals(1.0, rectangle1.y(), 0.01);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertNotNull(rectangle1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-347.73691034196133), (-347.73691034196133), (-3337.108406), (-347.73691034196133), (-347.73691034196133), (-1.0), (-2016.6679083), (-1.0));
      assertEquals((-347.73691034196133), cubicCurve0.ctrly1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.y1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1, 0.01);
      assertEquals((-1.0), cubicCurve0.y2, 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-1.0), cubicCurve0.ctrly2, 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlY1(), 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlY2(), 0.01);
      assertEquals((-1.0), cubicCurve0.y2(), 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlX2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-347.73691034196133), cubicCurve0.y1(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1(), 0.01);
      assertNotNull(cubicCurve0);
      
      Rectangle rectangle0 = cubicCurve0.bounds();
      assertEquals((-347.73691034196133), cubicCurve0.ctrly1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.y1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1, 0.01);
      assertEquals((-1.0), cubicCurve0.y2, 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-1.0), cubicCurve0.ctrly2, 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-3337.108406), rectangle0.x, 0.01);
      assertEquals(2989.3714956580384, rectangle0.width, 0.01);
      assertEquals((-347.73691034196133), rectangle0.y, 0.01);
      assertEquals(346.73691034196133, rectangle0.height, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlY1(), 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlY2(), 0.01);
      assertEquals((-1.0), cubicCurve0.y2(), 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlX2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-347.73691034196133), cubicCurve0.y1(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1(), 0.01);
      assertEquals((-347.73691034196133), rectangle0.y(), 0.01);
      assertEquals(2989.3714956580384, rectangle0.width(), 0.01);
      assertEquals((-3337.108406), rectangle0.x(), 0.01);
      assertEquals(346.73691034196133, rectangle0.height(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle rectangle1 = cubicCurve0.bounds(rectangle0);
      assertEquals((-347.73691034196133), cubicCurve0.ctrly1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.y1, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1, 0.01);
      assertEquals((-1.0), cubicCurve0.y2, 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-1.0), cubicCurve0.ctrly2, 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-3337.108406), rectangle0.x, 0.01);
      assertEquals(2989.3714956580384, rectangle0.width, 0.01);
      assertEquals((-347.73691034196133), rectangle0.y, 0.01);
      assertEquals(346.73691034196133, rectangle0.height, 0.01);
      assertEquals(2989.3714956580384, rectangle1.width, 0.01);
      assertEquals(346.73691034196133, rectangle1.height, 0.01);
      assertEquals((-3337.108406), rectangle1.x, 0.01);
      assertEquals((-347.73691034196133), rectangle1.y, 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlY1(), 0.01);
      assertEquals((-3337.108406), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlY2(), 0.01);
      assertEquals((-1.0), cubicCurve0.y2(), 0.01);
      assertEquals((-2016.6679083), cubicCurve0.x2(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.ctrlX2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals((-347.73691034196133), cubicCurve0.y1(), 0.01);
      assertEquals((-347.73691034196133), cubicCurve0.x1(), 0.01);
      assertEquals((-347.73691034196133), rectangle0.y(), 0.01);
      assertEquals(2989.3714956580384, rectangle0.width(), 0.01);
      assertEquals((-3337.108406), rectangle0.x(), 0.01);
      assertEquals(346.73691034196133, rectangle0.height(), 0.01);
      assertEquals(2989.3714956580384, rectangle1.width(), 0.01);
      assertEquals(346.73691034196133, rectangle1.height(), 0.01);
      assertEquals((-347.73691034196133), rectangle1.y(), 0.01);
      assertEquals((-3337.108406), rectangle1.x(), 0.01);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertNotNull(rectangle1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(236.0, 236.0, 236.0, 2788.0, 1.0, 2788.0, 2788.0, 0.0);
      assertEquals(236.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(2788.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(1.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(236.0, cubicCurve0.x1, 0.01);
      assertEquals(236.0, cubicCurve0.y1, 0.01);
      assertEquals(2788.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(2788.0, cubicCurve0.x2, 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(236.0, cubicCurve0.x1(), 0.01);
      assertEquals(1.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(236.0, cubicCurve0.y1(), 0.01);
      assertEquals(236.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(2788.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(2788.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(2788.0, cubicCurve0.ctrlY2(), 0.01);
      assertNotNull(cubicCurve0);
      
      Rectangle rectangle0 = new Rectangle(236.0, (-1.0), 2788.0, 0.0);
      assertEquals((-1.0), rectangle0.y, 0.01);
      assertEquals(0.0, rectangle0.height, 0.01);
      assertEquals(236.0, rectangle0.x, 0.01);
      assertEquals(2788.0, rectangle0.width, 0.01);
      assertEquals(236.0, rectangle0.x(), 0.01);
      assertEquals(2788.0, rectangle0.width(), 0.01);
      assertEquals((-1.0), rectangle0.y(), 0.01);
      assertEquals(0.0, rectangle0.height(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle rectangle1 = cubicCurve0.bounds(rectangle0);
      assertEquals(236.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(2788.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(1.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(236.0, cubicCurve0.x1, 0.01);
      assertEquals(236.0, cubicCurve0.y1, 0.01);
      assertEquals(2788.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(2788.0, cubicCurve0.x2, 0.01);
      assertEquals(1.0, rectangle0.x, 0.01);
      assertEquals(0.0, rectangle0.y, 0.01);
      assertEquals(2788.0, rectangle0.height, 0.01);
      assertEquals(2787.0, rectangle0.width, 0.01);
      assertEquals(2788.0, rectangle1.height, 0.01);
      assertEquals(1.0, rectangle1.x, 0.01);
      assertEquals(0.0, rectangle1.y, 0.01);
      assertEquals(2787.0, rectangle1.width, 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(236.0, cubicCurve0.x1(), 0.01);
      assertEquals(1.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(236.0, cubicCurve0.y1(), 0.01);
      assertEquals(236.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(2788.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(2788.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(2788.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(1.0, rectangle0.x(), 0.01);
      assertEquals(2787.0, rectangle0.width(), 0.01);
      assertEquals(0.0, rectangle0.y(), 0.01);
      assertEquals(2788.0, rectangle0.height(), 0.01);
      assertEquals(2787.0, rectangle1.width(), 0.01);
      assertEquals(0.0, rectangle1.y(), 0.01);
      assertEquals(1.0, rectangle1.x(), 0.01);
      assertEquals(2788.0, rectangle1.height(), 0.01);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertNotNull(rectangle1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertNotNull(cubicCurve0);
      
      Rectangle rectangle0 = new Rectangle(3842.6, 0.0, 2828.22498141, 0.0);
      assertEquals(0.0, rectangle0.y, 0.01);
      assertEquals(3842.6, rectangle0.x, 0.01);
      assertEquals(0.0, rectangle0.height, 0.01);
      assertEquals(2828.22498141, rectangle0.width, 0.01);
      assertEquals(0.0, rectangle0.y(), 0.01);
      assertEquals(2828.22498141, rectangle0.width(), 0.01);
      assertEquals(0.0, rectangle0.height(), 0.01);
      assertEquals(3842.6, rectangle0.x(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle rectangle1 = cubicCurve0.bounds(rectangle0);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(0.0, rectangle0.width, 0.01);
      assertEquals(0.0, rectangle0.y, 0.01);
      assertEquals(0.0, rectangle0.height, 0.01);
      assertEquals(0.0, rectangle1.y, 0.01);
      assertEquals(0.0, rectangle1.x, 0.01);
      assertEquals(0.0, rectangle1.width, 0.01);
      assertEquals(0.0, rectangle1.height, 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, rectangle0.y(), 0.01);
      assertEquals(0.0, rectangle0.width(), 0.01);
      assertEquals(0.0, rectangle0.x(), 0.01);
      assertEquals(0.0, rectangle0.height(), 0.01);
      assertEquals(0.0, rectangle1.y(), 0.01);
      assertEquals(0.0, rectangle1.x(), 0.01);
      assertEquals(0.0, rectangle1.width(), 0.01);
      assertEquals(0.0, rectangle1.height(), 0.01);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertNotNull(rectangle1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertNotNull(cubicCurve0);
      
      cubicCurve0.setCurve(0.0, 1.0, 1.0, 5.0, 1.0, 1363.3807, 1363.3807, 1363.3807);
      assertEquals(5.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(1363.3807, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(1363.3807, cubicCurve0.y2, 0.01);
      assertEquals(1.0, cubicCurve0.y1, 0.01);
      assertEquals(1.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(1363.3807, cubicCurve0.x2, 0.01);
      assertEquals(1.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(1363.3807, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(5.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(1.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(1.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(1363.3807, cubicCurve0.y2(), 0.01);
      assertEquals(1.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(1363.3807, cubicCurve0.x2(), 0.01);
      
      Rectangle rectangle0 = cubicCurve0.bounds();
      assertEquals(5.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(1363.3807, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(1363.3807, cubicCurve0.y2, 0.01);
      assertEquals(1.0, cubicCurve0.y1, 0.01);
      assertEquals(1.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(1363.3807, cubicCurve0.x2, 0.01);
      assertEquals(1.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(1363.3807, rectangle0.width, 0.01);
      assertEquals(1362.3807, rectangle0.height, 0.01);
      assertEquals(1.0, rectangle0.y, 0.01);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(1363.3807, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(5.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(1.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(1.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(1363.3807, cubicCurve0.y2(), 0.01);
      assertEquals(1.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(1363.3807, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, rectangle0.x(), 0.01);
      assertEquals(1362.3807, rectangle0.height(), 0.01);
      assertEquals(1.0, rectangle0.y(), 0.01);
      assertEquals(1363.3807, rectangle0.width(), 0.01);
      assertNotNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(2144.0, 1.0, 2144.0, 0.0, 2144.0, 0.0, (-4187.7292), (-2154.0));
      assertEquals((-4187.7292), cubicCurve0.x2, 0.01);
      assertEquals(1.0, cubicCurve0.y1, 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals((-2154.0), cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(2144.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-4187.7292), cubicCurve0.x2(), 0.01);
      assertEquals((-2154.0), cubicCurve0.y2(), 0.01);
      assertEquals(2144.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(1.0, cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertNotNull(cubicCurve0);
      
      cubicCurve0.subdivide(cubicCurve0, (CubicCurve) null);
      assertEquals(1.0, cubicCurve0.y1, 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.5, cubicCurve0.ctrly1, 0.01);
      assertEquals(1352.53385, cubicCurve0.x2, 0.01);
      assertEquals(0.25, cubicCurve0.ctrly2, 0.01);
      assertEquals((-269.125), cubicCurve0.y2, 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(2144.0, cubicCurve0.x1, 0.01);
      assertEquals(0.5, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-269.125), cubicCurve0.y2(), 0.01);
      assertEquals(2144.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.25, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(1.0, cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1352.53385, cubicCurve0.x2(), 0.01);
      
      Rectangle rectangle0 = cubicCurve0.bounds();
      assertEquals(1.0, cubicCurve0.y1, 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.5, cubicCurve0.ctrly1, 0.01);
      assertEquals(1352.53385, cubicCurve0.x2, 0.01);
      assertEquals(0.25, cubicCurve0.ctrly2, 0.01);
      assertEquals((-269.125), cubicCurve0.y2, 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(2144.0, cubicCurve0.x1, 0.01);
      assertEquals(1352.53385, rectangle0.x, 0.01);
      assertEquals(270.125, rectangle0.height, 0.01);
      assertEquals((-269.125), rectangle0.y, 0.01);
      assertEquals(791.46615, rectangle0.width, 0.01);
      assertEquals(0.5, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(2144.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals((-269.125), cubicCurve0.y2(), 0.01);
      assertEquals(2144.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.25, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(1.0, cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1352.53385, cubicCurve0.x2(), 0.01);
      assertEquals(270.125, rectangle0.height(), 0.01);
      assertEquals((-269.125), rectangle0.y(), 0.01);
      assertEquals(1352.53385, rectangle0.x(), 0.01);
      assertEquals(791.46615, rectangle0.width(), 0.01);
      assertNotNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertNotNull(cubicCurve0);
      
      // Undeclared exception!
      try { 
        cubicCurve0.intersects((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractCubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertNotNull(cubicCurve0);
      
      // Undeclared exception!
      try { 
        cubicCurve0.contains((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractCubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertNotNull(cubicCurve0);
      
      // Undeclared exception!
      try { 
        cubicCurve0.contains((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractCubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0, 0.0, 0.0, (-1.0), 0.0, 1185.280938678, 942.556, 1.0);
      assertEquals((-1.0), cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(1.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(942.556, cubicCurve0.x2, 0.01);
      assertEquals(1185.280938678, cubicCurve0.ctrly2, 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1185.280938678, cubicCurve0.ctrlY2(), 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(1.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(942.556, cubicCurve0.x2(), 0.01);
      assertNotNull(cubicCurve0);
      
      boolean boolean0 = cubicCurve0.intersects(0.5, 1.0, 0.0, (-1.0));
      assertEquals((-1.0), cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(1.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(942.556, cubicCurve0.x2, 0.01);
      assertEquals(1185.280938678, cubicCurve0.ctrly2, 0.01);
      assertTrue(boolean0);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(1185.280938678, cubicCurve0.ctrlY2(), 0.01);
      assertEquals((-1.0), cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(1.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(942.556, cubicCurve0.x2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertNotNull(cubicCurve0);
      
      cubicCurve0.setCurve(2037.06348, 2037.06348, 0.0, 2037.06348, 2037.06348, 0.0, 2037.06348, 2037.06348);
      assertEquals(2037.06348, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(2037.06348, cubicCurve0.x1, 0.01);
      assertEquals(2037.06348, cubicCurve0.y2, 0.01);
      assertEquals(2037.06348, cubicCurve0.y1, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrly1, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrlX2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(2037.06348, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x1(), 0.01);
      assertEquals(2037.06348, cubicCurve0.y2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x2(), 0.01);
      
      boolean boolean0 = cubicCurve0.intersects(0.0, 0.0, 2037.06348, 2037.06348);
      assertEquals(2037.06348, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(2037.06348, cubicCurve0.x1, 0.01);
      assertEquals(2037.06348, cubicCurve0.y2, 0.01);
      assertEquals(2037.06348, cubicCurve0.y1, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrly1, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2, 0.01);
      assertTrue(boolean0);
      assertEquals(2037.06348, cubicCurve0.ctrlX2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(2037.06348, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x1(), 0.01);
      assertEquals(2037.06348, cubicCurve0.y2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertNotNull(cubicCurve0);
      
      boolean boolean0 = cubicCurve0.intersects(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertNotNull(cubicCurve0);
      
      cubicCurve0.setCurve(146.30942485650465, 146.30942485650465, (-1511.0), 2037.06348, (-724.49269467775), (-1511.0), 2037.06348, 0.0);
      assertEquals((-724.49269467775), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrly2, 0.01);
      assertEquals(146.30942485650465, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrly1, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2, 0.01);
      assertEquals(146.30942485650465, cubicCurve0.x1, 0.01);
      assertEquals((-724.49269467775), cubicCurve0.ctrlX2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(146.30942485650465, cubicCurve0.y1(), 0.01);
      assertEquals(146.30942485650465, cubicCurve0.x1(), 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlY2(), 0.01);
      
      boolean boolean0 = cubicCurve0.contains(0.0, 2.0943951023931953, 3.141592653589793, 1.0);
      assertEquals((-724.49269467775), cubicCurve0.ctrlx2, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlx1, 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrly2, 0.01);
      assertEquals(146.30942485650465, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrly1, 0.01);
      assertEquals(2037.06348, cubicCurve0.x2, 0.01);
      assertEquals(146.30942485650465, cubicCurve0.x1, 0.01);
      assertTrue(boolean0);
      assertEquals((-724.49269467775), cubicCurve0.ctrlX2(), 0.01);
      assertEquals(2037.06348, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(2037.06348, cubicCurve0.x2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(146.30942485650465, cubicCurve0.y1(), 0.01);
      assertEquals(146.30942485650465, cubicCurve0.x1(), 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlX1(), 0.01);
      assertEquals((-1511.0), cubicCurve0.ctrlY2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertNotNull(cubicCurve0);
      
      boolean boolean0 = cubicCurve0.contains(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertNotNull(cubicCurve0);
      
      cubicCurve0.setCurve(1984.716488, 1984.716488, 0.0, 1984.716488, 1984.716488, 0.0, 1984.716488, 1984.716488);
      assertEquals(1984.716488, cubicCurve0.x2, 0.01);
      assertEquals(1984.716488, cubicCurve0.ctrlx2, 0.01);
      assertEquals(1984.716488, cubicCurve0.x1, 0.01);
      assertEquals(1984.716488, cubicCurve0.y2, 0.01);
      assertEquals(1984.716488, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(1984.716488, cubicCurve0.ctrly1, 0.01);
      assertEquals(1984.716488, cubicCurve0.x2(), 0.01);
      assertEquals(1984.716488, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(1984.716488, cubicCurve0.y1(), 0.01);
      assertEquals(1984.716488, cubicCurve0.x1(), 0.01);
      assertEquals(1984.716488, cubicCurve0.y2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(1984.716488, cubicCurve0.ctrlX2(), 0.01);
      
      boolean boolean0 = cubicCurve0.contains(0.0, 0.0, 1984.716488, 1984.716488);
      assertEquals(1984.716488, cubicCurve0.x2, 0.01);
      assertEquals(1984.716488, cubicCurve0.ctrlx2, 0.01);
      assertEquals(1984.716488, cubicCurve0.x1, 0.01);
      assertEquals(1984.716488, cubicCurve0.y2, 0.01);
      assertEquals(1984.716488, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(1984.716488, cubicCurve0.ctrly1, 0.01);
      assertFalse(boolean0);
      assertEquals(1984.716488, cubicCurve0.x2(), 0.01);
      assertEquals(1984.716488, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(1984.716488, cubicCurve0.y1(), 0.01);
      assertEquals(1984.716488, cubicCurve0.x1(), 0.01);
      assertEquals(1984.716488, cubicCurve0.y2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertEquals(1984.716488, cubicCurve0.ctrlX2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertNotNull(cubicCurve0);
      
      PathIterator pathIterator0 = cubicCurve0.pathIterator((Transform) null);
      assertEquals(0.0, cubicCurve0.x1, 0.01);
      assertEquals(0.0, cubicCurve0.y2, 0.01);
      assertEquals(0.0, cubicCurve0.y1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly1, 0.01);
      assertEquals(0.0, cubicCurve0.x2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx2, 0.01);
      assertEquals(0.0, cubicCurve0.ctrlx1, 0.01);
      assertEquals(0.0, cubicCurve0.ctrly2, 0.01);
      assertEquals(0.0, cubicCurve0.x1(), 0.01);
      assertEquals(0.0, cubicCurve0.y2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY2(), 0.01);
      assertTrue(cubicCurve0.isEmpty());
      assertEquals(0.0, cubicCurve0.x2(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlY1(), 0.01);
      assertEquals(0.0, cubicCurve0.y1(), 0.01);
      assertEquals(0.0, cubicCurve0.ctrlX2(), 0.01);
      assertEquals(1, pathIterator0.windingRule());
      assertFalse(pathIterator0.isDone());
      assertNotNull(pathIterator0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      // Undeclared exception!
      try { 
        cubicCurve0.bounds((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractCubicCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      boolean boolean0 = cubicCurve0.contains(1192.856711310819, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      AffineTransform affineTransform0 = new AffineTransform();
      AbstractCubicCurve.Iterator abstractCubicCurve_Iterator0 = new AbstractCubicCurve.Iterator(cubicCurve0, affineTransform0);
      assertFalse(abstractCubicCurve_Iterator0.isDone());
      
      double[] doubleArray0 = new double[5];
      int int0 = abstractCubicCurve_Iterator0.currentSegment(doubleArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractCubicCurve.Iterator abstractCubicCurve_Iterator0 = new AbstractCubicCurve.Iterator(cubicCurve0, identityTransform0);
      abstractCubicCurve_Iterator0.next();
      abstractCubicCurve_Iterator0.next();
      // Undeclared exception!
      try { 
        abstractCubicCurve_Iterator0.currentSegment((double[]) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.d.AbstractCubicCurve$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      CubicCurve cubicCurve1 = new CubicCurve((-481.9359468256574), 0.0, (-186.92952532), (-5490.320701169152), (-842.8900725762755), (-186.92952532), 407.0, 0.5);
      CubicCurve cubicCurve2 = cubicCurve0.clone();
      Rectangle rectangle0 = cubicCurve2.bounds();
      boolean boolean0 = cubicCurve1.intersects((IRectangle) rectangle0);
      assertTrue(boolean0);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(0.0, rectangle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      CubicCurve cubicCurve1 = new CubicCurve((-481.9359468256574), 0.0, (-186.92952532), (-5490.320701169152), (-842.8900725762755), (-186.92952532), 407.0, 0.5);
      Rectangle rectangle0 = cubicCurve0.bounds();
      boolean boolean0 = cubicCurve1.contains((IRectangle) rectangle0);
      assertTrue(boolean0);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(0.0, rectangle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(2144.0, 1.0, 2144.0, 0.0, 2144.0, 0.0, (-4187.7292), (-2154.0));
      Rectangle rectangle0 = cubicCurve0.bounds();
      boolean boolean0 = cubicCurve0.contains((IRectangle) rectangle0);
      assertEquals((-4187.7292), rectangle0.x, 0.01);
      assertEquals(2155.0, rectangle0.height, 0.01);
      assertFalse(boolean0);
      assertEquals(6331.7292, rectangle0.width, 0.01);
      assertEquals((-2154.0), rectangle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0, 0.0, 0.0, 0.0, 0.0, (-1194.883), 0.0, 0.0);
      AbstractCubicCurve.Iterator abstractCubicCurve_Iterator0 = new AbstractCubicCurve.Iterator(cubicCurve0, (Transform) null);
      int int0 = abstractCubicCurve_Iterator0.windingRule();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Rectangle rectangle0 = cubicCurve0.bounds();
      boolean boolean0 = cubicCurve0.intersects((IRectangle) rectangle0);
      assertEquals(0.0, rectangle0.height, 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle0.y, 0.01);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(0.0, rectangle0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      double double0 = cubicCurve0.flatness();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Point point0 = cubicCurve0.p1();
      assertEquals(0.0, point0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Point point0 = cubicCurve0.ctrlP1();
      boolean boolean0 = cubicCurve0.contains((XY) point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      boolean boolean0 = cubicCurve0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      double double0 = cubicCurve0.flatnessSq();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      // Undeclared exception!
      try { 
        cubicCurve0.pathIterator((Transform) null, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Flatness is less then zero
         //
         verifyException("pythagoras.d.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Point point0 = cubicCurve0.p2();
      assertEquals(0.0, point0.x(), 0.01);
  }
}
