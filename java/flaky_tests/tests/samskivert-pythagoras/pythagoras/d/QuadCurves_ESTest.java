/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:13:17 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.IQuadCurve;
import pythagoras.d.QuadCurve;
import pythagoras.d.QuadCurves;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuadCurves_ESTest extends QuadCurves_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      int int0 = QuadCurves.solveQuadratic(doubleArray0, doubleArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try { 
        QuadCurves.subdivide(doubleArray0, 0, doubleArray1, 0, doubleArray1, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.d.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      QuadCurves.subdivide(doubleArray0, 8, doubleArray0, 8, (double[]) null, 8);
      assertEquals(16, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 2056.73658183646;
      QuadCurves.subdivide(doubleArray0, 1, doubleArray0, 1, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 514.184145459115, 0.0, 1028.36829091823, 0.0, 2056.73658183646, 514.184145459115, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (-254.111284922);
      QuadCurves.subdivide(doubleArray0, 1, doubleArray0, 1, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, (-127.055642461), 0.0, (-127.055642461), 0.0, 0.0, (-127.055642461), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1.0;
      QuadCurves.subdivide(doubleArray0, 1, doubleArray0, 1, doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.25, 0.0, 0.0, 0.0, 0.0, 0.25, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1044.623999632);
      QuadCurves.subdivide(doubleArray0, 1, doubleArray0, 1, doubleArray0, 0);
      assertArrayEquals(new double[] {(-261.155999908), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1.0, (-1044.623999632), (-2354.888184), (-472.1688), (-1748.0), (-301.0));
      QuadCurve quadCurve1 = new QuadCurve();
      QuadCurves.subdivide((IQuadCurve) quadCurve0, quadCurve0, quadCurve1);
      assertEquals((-301.0), quadCurve1.y2, 0.01);
      assertEquals((-572.490399908), quadCurve0.y2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = QuadCurves.flatnessSq(0.0, 0.0, 0.0, 0.0, 0.0, (-1287.9013298791485));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = QuadCurves.flatnessSq(0.0, 0.0, (-292.0), (-292.0), (-559.791752238136), 0.0);
      assertEquals(85264.00000000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 5233.0;
      QuadCurves.subdivide(doubleArray0, 1, doubleArray0, 1, doubleArray0, 0);
      int int0 = QuadCurves.solveQuadratic(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2616.5, 0.0, 2616.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 2.0;
      int int0 = QuadCurves.solveQuadratic(doubleArray0, doubleArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-731.4681609981);
      doubleArray0[2] = (-720.682205668);
      int int0 = QuadCurves.solveQuadratic(doubleArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1938.297869;
      int int0 = QuadCurves.solveQuadratic(doubleArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1.0;
      double double0 = QuadCurves.flatnessSq(doubleArray0, 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = QuadCurves.flatnessSq((-1705.53581284), 769.33, 769.33, 1.0, 0.0, (-1705.53581284));
      assertEquals(2565899.593654188, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (-4364.0);
      double double0 = QuadCurves.flatness(doubleArray0, 2);
      assertEquals(4364.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = QuadCurves.flatness((double) (-3682), (double) (-3682), (double) (-3682), (double) (-3682), (double) (-3682), (double) (-3682));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuadCurves.subdivide((double[]) null, 0, (double[]) null, 0, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      // Undeclared exception!
      try { 
        QuadCurves.subdivide((IQuadCurve) null, quadCurve0, quadCurve0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuadCurves.solveQuadratic((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        QuadCurves.solveQuadratic(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuadCurves.solveQuadratic((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        QuadCurves.solveQuadratic(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 1
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuadCurves.flatnessSq((double[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        QuadCurves.flatnessSq(doubleArray0, 1025);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1027 out of bounds for length 3
         //
         verifyException("pythagoras.d.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuadCurves.flatness((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        QuadCurves.flatness(doubleArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 5
         //
         verifyException("pythagoras.d.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        QuadCurves.subdivide(doubleArray0, 0, doubleArray0, 5, doubleArray0, (-1101));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.d.QuadCurves", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      QuadCurves.subdivide(doubleArray0, 0, (double[]) null, 0, (double[]) null, 0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 0.0, 0.0);
      quadCurve0.subdivide((QuadCurve) null, (QuadCurve) null);
      assertEquals(9.999999747378752E-6, quadCurve0.y1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = QuadCurves.flatness(5239.166111617832, 1.0, 1025.0, (double) 0, 3773.0950518878, 2.0);
      assertEquals(2748.095779664568, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = QuadCurves.flatnessSq(doubleArray0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      QuadCurves quadCurves0 = new QuadCurves();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = QuadCurves.flatness(doubleArray0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = QuadCurves.solveQuadratic(doubleArray0);
      assertEquals((-1), int0);
  }
}
