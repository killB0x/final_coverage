/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:18:17 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AffineTransform;
import pythagoras.d.IRay2;
import pythagoras.d.IVector;
import pythagoras.d.IdentityTransform;
import pythagoras.d.Point;
import pythagoras.d.Ray2;
import pythagoras.d.Transform;
import pythagoras.d.Vector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Ray2_ESTest extends Ray2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(30510.01896632209, 30510.01896632209, 30510.01896632209, 30510.01896632209);
      Vector vector0 = affineTransform0.translation();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Ray2 ray2_1 = ray2_0.transform((Transform) affineTransform0, ray2_0);
      Ray2 ray2_2 = ray2_0.set((IVector) ray2_1.origin, (IVector) vector0);
      double double0 = ray2_2.getIntersection((IVector) ray2_0.direction);
      assertEquals(3.4028234663852886E38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = new Vector((-118.3687503941), 1227.0);
      Ray2 ray2_1 = ray2_0.set((IVector) vector0, (IVector) vector0);
      AffineTransform affineTransform0 = new AffineTransform((-118.3687503941), 1227.0, (-118.3687503941), (-183.06805444));
      Vector vector1 = affineTransform0.transform((IVector) ray2_1.direction, ray2_1.direction);
      assertEquals(139211.61081832027, vector1.x, 0.01);
      
      ray2_0.origin.rotateLocal(2.57870204476085E85);
      double double0 = ray2_1.getIntersection((IVector) ray2_0.direction);
      assertEquals(3.4028234663852886E38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point point0 = new Point((-2163.1362806273), (-2.8260023396799527E41));
      Vector vector0 = new Vector(point0);
      Vector vector1 = new Vector(4, (-2163.1362806273));
      Vector vector2 = vector0.scale(1.0, vector1);
      vector2.negateLocal();
      Ray2 ray2_0 = new Ray2(vector0, vector2);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector2, (IVector) vector2, 0.0, ray2_0.origin);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform(726.4501272545292, 726.4501272545292, 726.4501272545292, 726.4501272545292, 3.4028234663852886E38);
      affineTransform0.transformPoint(ray2_0.origin, ray2_0.direction);
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ray2 ray2_1 = ray2_0.transformLocal(identityTransform0);
      boolean boolean0 = ray2_1.getIntersection((IVector) ray2_0.direction, 2.134845179101266E-36, ray2_0.origin);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector vector0 = new Vector();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, 0.0, vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector vector0 = new Vector();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, (IVector) ray2_0.origin, 1.0, ray2_0.origin);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point(1.0, 9.999999747378752E-6);
      Vector vector0 = new Vector(point0);
      Vector vector1 = new Vector();
      identityTransform0.transformPoint(vector1, vector0);
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector2 = new Vector(0.0, 9.999999747378752E-6);
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_0.direction, (IVector) vector2, 0.0, ray2_0.direction);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = ray2_0.direction.set(1063.227117, 1063.227117);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, (IVector) vector0, vector0);
      assertTrue(boolean0);
      assertEquals(1063.227117, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = new Vector(0.5, 0.5);
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Ray2 ray2_1 = new Ray2(ray2_0);
      affineTransform0.setScaleY((-0.6692517200903844));
      Ray2 ray2_2 = ray2_0.transformLocal(affineTransform0);
      boolean boolean0 = ray2_1.getIntersection((IVector) ray2_0.origin, (IVector) vector0, ray2_0.direction);
      assertTrue(boolean0);
      
      boolean boolean1 = ray2_0.intersects(ray2_2.direction);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(2747.5219, 2747.5219, 2747.5219, 2747.5219, 2747.5219);
      Vector vector0 = affineTransform0.translation();
      Vector vector1 = vector0.set(2747.5219, (-1598.0));
      Ray2 ray2_0 = new Ray2(vector0, vector1);
      affineTransform0.transformPoint(ray2_0.direction, vector1);
      boolean boolean0 = ray2_0.intersects(vector1);
      assertEquals(8270957.180288674, vector1.y, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 9.999999747378752E-6, 0.0, 0.0);
      Ray2 ray2_1 = ray2_0.transform((Transform) affineTransform0);
      boolean boolean0 = ray2_1.intersects(ray2_0.direction);
      assertFalse(boolean0);
      assertNotSame(ray2_1, ray2_0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector vector0 = new Vector();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Ray2 ray2_1 = ray2_0.set((IRay2) ray2_0);
      assertSame(ray2_0, ray2_1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      IVector iVector0 = ray2_0.origin();
      assertEquals(0.0, iVector0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-4259.94449), (-4259.94449), (-4259.94449), (-4259.94449), (-4259.94449), (-4259.94449));
      Vector vector0 = affineTransform0.translation();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = (Vector)ray2_0.origin();
      assertEquals((-4259.94449), vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = affineTransform0.scale();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = ray2_0.getNearestPoint(vector0, vector0);
      assertSame(vector1, vector0);
      assertEquals(1.0, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(868.4801179082, 0.0, 978.9440831664, 0.0);
      Vector vector0 = new Vector();
      Vector vector1 = affineTransform0.transformPoint(vector0, vector0);
      vector1.rotate(978.9440831664, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector0);
      Vector vector2 = (Vector)ray2_0.direction();
      assertEquals((-923.5644133909229), vector2.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(868.4801179082, 0.0, 978.9440831664, 0.0);
      Vector vector0 = new Vector();
      Vector vector1 = affineTransform0.transformPoint(vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector0);
      Vector vector2 = (Vector)ray2_0.direction();
      assertEquals(978.9440831664, vector2.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(868.4801179082, 0.0, 978.9440831664, 0.0);
      Vector vector0 = new Vector();
      Vector vector1 = affineTransform0.transformPoint(vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector0);
      ray2_0.origin.rotate(850193.4727738898, ray2_0.direction);
      Vector vector2 = (Vector)ray2_0.direction();
      assertEquals((-978.1957214857756), vector2.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.transformLocal((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.transform((Transform) null, ray2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.transform((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.set((IVector) null, (IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.intersects((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.getNearestPoint((IVector) null, ray2_0.origin);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.getIntersection((IVector) null, (IVector) ray2_0.origin, ray2_0.direction);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.getIntersection((IVector) null, (IVector) null, 1026.2676106213316, ray2_0.direction);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.getIntersection((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Ray2 ray2_0 = null;
      try {
        ray2_0 = new Ray2((Vector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Ray2 ray2_0 = null;
      try {
        ray2_0 = new Ray2((Ray2) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(2747.5219, 2747.5219, 2747.5219, 2747.5219, 2747.5219);
      Vector vector0 = affineTransform0.translation();
      Vector vector1 = vector0.set(2747.5219, (-1598.0));
      Ray2 ray2_0 = new Ray2(vector0, vector1);
      Vector vector2 = affineTransform0.transformPoint(ray2_0.direction, vector1);
      Ray2 ray2_1 = ray2_0.transform((Transform) affineTransform0, ray2_0);
      double double0 = ray2_1.getIntersection((IVector) vector2);
      assertEquals(8270957.180288674, vector1.y, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector vector0 = new Vector();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      double double0 = ray2_0.getIntersection((IVector) ray2_0.direction);
      assertEquals(3.4028234663852886E38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector vector0 = new Vector(898.85, 2.0);
      Vector vector1 = vector0.subtract(898.85, (-2752.645188));
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      double double0 = ray2_0.getIntersection((IVector) vector1);
      assertEquals(3.4028234663852886E38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = new Vector((-118.3687503941), 1227.0);
      Ray2 ray2_1 = ray2_0.set((IVector) vector0, (IVector) vector0);
      AffineTransform affineTransform0 = new AffineTransform((-118.3687503941), 1227.0, (-118.3687503941), (-183.06805444));
      Vector vector1 = affineTransform0.transform((IVector) ray2_1.direction, ray2_1.direction);
      assertEquals(139211.61081832027, vector1.x, 0.01);
      
      double double0 = ray2_1.getIntersection((IVector) ray2_0.direction);
      assertEquals(3.4028234663852886E38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector vector0 = new Vector(898.85, 2.0);
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      double double0 = ray2_0.getIntersection((IVector) vector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      ray2_0.direction.add(61253.54980475702, 61253.54980475702, ray2_0.direction);
      // Undeclared exception!
      try { 
        ray2_0.getIntersection((IVector) ray2_0.direction, 61253.54980475702, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform();
      Ray2 ray2_1 = ray2_0.transformLocal(affineTransform0);
      boolean boolean0 = ray2_1.getIntersection((IVector) ray2_1.direction, 0.0, ray2_1.origin);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      // Undeclared exception!
      try { 
        ray2_0.set((IRay2) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Ray2", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      IVector iVector0 = ray2_0.direction();
      assertEquals(0.0, iVector0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1448.17, 11.99, (-2461.656), 1448.17, 11.99);
      Vector vector0 = affineTransform0.scale();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = (Vector)ray2_0.origin();
      assertEquals(1413.8481809202565, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(30510.01896632209, 30510.01896632209, 30510.01896632209, 30510.01896632209);
      Vector vector0 = affineTransform0.translation();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = new Vector();
      Ray2 ray2_1 = ray2_0.transform((Transform) affineTransform0, ray2_0);
      Ray2 ray2_2 = ray2_0.set((IVector) ray2_1.origin, (IVector) vector1);
      double double0 = ray2_2.getIntersection((IVector) ray2_0.direction);
      assertEquals(3.4028234663852886E38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-626.33651036), (-626.33651036), (-626.33651036), (-626.33651036));
      Vector vector0 = new Vector(4.520862805524695E10, (-1041.9635310913172));
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_0.origin, (IVector) ray2_0.direction, vector0);
      assertEquals(2.8852411596166026E7, vector0.x, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform(0.5218765233336585, 0.5218765233336585, 0.5218765233336585, 0.0, 7548876.590979611, 0.5218765233336585);
      Vector vector0 = affineTransform0.scale();
      vector0.rotateAndAdd(7548876.590979611, ray2_0.origin, ray2_0.direction);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, (IVector) vector0, vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = ray2_0.getNearestPoint(ray2_0.direction, (Vector) null);
      assertEquals(0.0, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector vector0 = new Vector((-2888.0), (-2873.4655784376));
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = ray2_0.getNearestPoint(vector0, ray2_0.origin);
      assertEquals((-2888.0), vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector vector0 = new Vector((-2888.0), (-2873.4655784376));
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      AffineTransform affineTransform0 = new AffineTransform(1.4142135623730951, 1.5707963267948966, 2153128.3812056114, (-951.378628));
      Vector vector1 = affineTransform0.transform((IVector) ray2_0.direction, ray2_0.direction);
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_0.direction, (IVector) ray2_0.direction, 1.4142135623730951, vector1);
      assertEquals(159.77040319838943, vector1.x, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = new Vector(641.913, 641.913);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, 641.913, vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector vector0 = new Vector((-2888.0), (-2873.4655784376));
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = vector0.scaleLocal((-978.9440831664));
      Ray2 ray2_1 = new Ray2(vector0, vector1);
      boolean boolean0 = ray2_1.getIntersection((IVector) ray2_0.origin, (IVector) ray2_0.origin, 1.4142135623730951, vector0);
      assertEquals(2827190.512184563, vector0.x, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(30510.01896632209, 30510.01896632209, 30510.01896632209, 30510.01896632209);
      Vector vector0 = affineTransform0.translation();
      AffineTransform affineTransform1 = affineTransform0.translate(30510.01896632209, (-806.28429));
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = affineTransform1.translation();
      boolean boolean0 = ray2_0.getIntersection((IVector) vector1, (IVector) vector0, 1420.2, vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = affineTransform0.scale();
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, (IVector) ray2_0.direction, (-1132.8096892120147), vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector vector0 = new Vector((-2888.0), (-2873.4655784376));
      Vector vector1 = vector0.scaleLocal((-978.9440831664));
      AffineTransform affineTransform0 = new AffineTransform(1.4142135623730951, 1.5707963267948966, 2153128.3812056114, (-951.378628));
      Vector vector2 = affineTransform0.translation();
      Ray2 ray2_0 = new Ray2(vector0, vector1);
      Vector vector3 = affineTransform0.scale();
      boolean boolean0 = ray2_0.getIntersection((IVector) vector2, (IVector) vector3, 1.4142135623730951, ray2_0.direction);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector vector0 = new Vector(4.520862805524695E10, (-1041.9635310913172));
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = new Vector((-574.1202295032408), 574.1202295032408);
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_0.direction, (IVector) vector1, (-626.33651036), vector0);
      assertTrue(boolean0);
      assertEquals((-1041.9635310913172), vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform();
      Ray2 ray2_1 = ray2_0.transformLocal(affineTransform0);
      boolean boolean0 = ray2_0.getIntersection((IVector) ray2_1.origin, (IVector) ray2_1.direction, ray2_1.direction);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1448.17, 11.99, (-2461.656), 1448.17, 11.99);
      Vector vector0 = affineTransform0.scale();
      vector0.negateLocal();
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Ray2 ray2_1 = ray2_0.transformLocal(affineTransform0);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector0, (IVector) ray2_1.direction, vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-453.89455546735917), (-453.89455546735917), (-453.89455546735917), (-453.89455546735917), (-453.89455546735917));
      Vector vector0 = new Vector((-452.91877627246845), 4.0);
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      Ray2 ray2_0 = new Ray2(vector1, vector1);
      Ray2 ray2_1 = ray2_0.transform((Transform) affineTransform0);
      ray2_1.transform((Transform) affineTransform0, ray2_0);
      boolean boolean0 = ray2_0.getIntersection((IVector) vector1, (IVector) ray2_1.direction, vector1);
      assertEquals(0.9951274926471999, vector0.y, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      Vector vector0 = new Vector(1948.335439611, 1948.335439611);
      boolean boolean0 = ray2_0.intersects(vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(30510.01896632209, 30510.01896632209, 30510.01896632209, 30510.01896632209);
      Vector vector0 = affineTransform0.translation();
      AffineTransform affineTransform1 = affineTransform0.translate(30510.01896632209, (-806.28429));
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      Vector vector1 = affineTransform1.translation();
      vector1.scale((IVector) ray2_0.origin, vector0);
      Ray2 ray2_1 = ray2_0.transform((Transform) affineTransform0, ray2_0);
      boolean boolean0 = ray2_1.intersects(vector0);
      assertEquals((-2.599237156303214E13), vector0.y, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Ray2 ray2_0 = new Ray2();
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-1.0), 1830.9304677, (-1.0), 3.4028234663852886E38, 1830.9304677);
      Vector vector0 = affineTransform0.translation();
      ray2_0.set((IVector) vector0, (IVector) vector0);
      Vector vector1 = affineTransform0.scale();
      boolean boolean0 = ray2_0.intersects(vector1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector vector0 = new Vector((-9.815468354024616E13), (-9.815468354024616E13));
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      boolean boolean0 = ray2_0.intersects(vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector vector0 = new Vector(4.520862805524695E10, (-1041.9635310913172));
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      String string0 = ray2_0.toString();
      assertEquals("[origin=+2147483647.214748364721474836472147483647-1041.963, direction=+2147483647.214748364721474836472147483647-1041.963]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector vector0 = new Vector(898.85, 2.0);
      Ray2 ray2_0 = new Ray2(vector0, vector0);
      boolean boolean0 = ray2_0.intersects(vector0);
      assertTrue(boolean0);
  }
}
