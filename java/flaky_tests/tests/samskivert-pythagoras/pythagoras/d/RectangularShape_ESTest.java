/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:02:19 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AffineTransform;
import pythagoras.d.Arc;
import pythagoras.d.Dimension;
import pythagoras.d.Ellipse;
import pythagoras.d.FlatteningPathIterator;
import pythagoras.d.IDimension;
import pythagoras.d.IRectangle;
import pythagoras.d.IdentityTransform;
import pythagoras.d.Line;
import pythagoras.d.PathIterator;
import pythagoras.d.Point;
import pythagoras.d.Rectangle;
import pythagoras.d.RoundRectangle;
import pythagoras.d.Transform;
import pythagoras.d.Vector;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RectangularShape_ESTest extends RectangularShape_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0, 0.0, 3026.92296553, 0.0);
      boolean boolean0 = rectangle0.intersects(0.0, 3026.92296553, 0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3901.0), 0.0, 0.0, (-884.0804), 0.0);
      Vector vector0 = affineTransform0.translation();
      Vector vector1 = new Vector();
      Arc arc0 = new Arc();
      arc0.setFrameFromCenter((XY) vector0, (XY) vector1);
      assertEquals((-1768.1608), arc0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-787.2271), (-2090.467491111), (-893.553), (-105.58779109));
      rectangle0.setFrameFromCenter(0.0, (-1539.899), (-1001.51675937184), (-0.5));
      assertEquals((-3079.298), rectangle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3901.0), 0.0, 0.0, (-884.0804), 0.0);
      Vector vector0 = affineTransform0.translation();
      Vector vector1 = new Vector();
      Arc arc0 = new Arc();
      arc0.setFrameFromDiagonal((XY) vector1, (XY) vector0);
      assertEquals((-884.0804), arc0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setFrameFromDiagonal(0.0, (-2473.9172025259), 701.2055395, Double.NaN);
      assertEquals(Double.NaN, arc0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setFrameFromDiagonal((-2407.885187015664), (-2407.885187015664), (-2407.885187015664), (-2407.885187015664));
      assertEquals((-2407.885187015664), arc0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-0.5), 0.0, 2218.764067755524, 0.0, 0.0, 0.0);
      roundRectangle0.setFrame(0.0, 0.0, 1336.1874659, 1336.1874659);
      assertEquals(0.0, roundRectangle0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Arc arc0 = new Arc(0.0, 0.0, 0.0, 0.0, (-2090.467491111), 0.0, 0);
      Vector vector0 = new Vector((-284.91369), (-2090.467491111));
      Dimension dimension0 = new Dimension();
      arc0.setFrame((XY) vector0, (IDimension) dimension0);
      assertEquals(0.0, dimension0.width(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector vector0 = new Vector();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(vector0, dimension0);
      rectangle0.setFrame((-522.51966952), 0.0, 1394.565430460363, (-1730.468128498));
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) null, (-522.51966952));
      assertTrue(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Arc arc0 = new Arc();
      IdentityTransform identityTransform0 = new IdentityTransform();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)arc0.pathIterator((Transform) identityTransform0, (double) 0);
      assertEquals(0.0, flatteningPathIterator0.flatness(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      Point point0 = new Point(vector0);
      Rectangle rectangle0 = new Rectangle(point0);
      double double0 = rectangle0.minY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Line line0 = new Line(2208.3, 2208.3, 0.0, 2208.3);
      Vector vector0 = new Vector(0.0, 0.0);
      Point point0 = new Point(vector0);
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle rectangle1 = line0.bounds(rectangle0);
      double double0 = rectangle1.minY();
      assertEquals(2208.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Line line0 = new Line(1319.447366996855, (-3.141592653589793), (-771.28486658), 0.25);
      Rectangle rectangle0 = new Rectangle(3000.98751235384, 0.25, (-825.1), (-245.0707940308));
      Rectangle rectangle1 = line0.bounds(rectangle0);
      double double0 = rectangle1.minY();
      assertEquals((-3.141592653589793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setFrameFromDiagonal(922.287522017316, 613.4189698630479, 613.4189698630479, 922.287522017316);
      double double0 = arc0.minX();
      assertEquals(308.86855215426806, arc0.width, 0.01);
      assertEquals(613.4189698630479, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Arc arc0 = new Arc(0, 0, 1610.994144, (-245.0707940308), 6.283185307179586, 6.283185307179586, 1);
      arc0.setFrameFromDiagonal((-1319.22350938), (-1034.0402630696), 0.22385761685491917, 922.287522017316);
      double double0 = arc0.minX();
      assertEquals((-1319.22350938), arc0.x, 0.01);
      assertEquals((-1319.22350938), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1441.15568289983), (-1441.15568289983), (-299.76), 180.0);
      Point point0 = rectangle0.min();
      assertEquals((-1441.15568289983), point0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setFrameFromDiagonal(923.6531890104989, 613.4189698630479, 613.4189698630479, 923.6531890104989);
      arc0.min();
      assertEquals(613.4189698630479, arc0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-0.5), 0.0, 2218.764067755524, 0.0, 0.0, 0.0);
      Point point0 = roundRectangle0.min();
      assertEquals((-0.5), point0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      double double0 = roundRectangle0.maxY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Arc arc0 = new Arc(0.0, 0.0, 0.0, 0.0, (-2090.467491111), 0.0, 0);
      arc0.setArc(158.272832116, 158.272832116, (double) 0, 0.0, 158.272832116, (-542.860326), 0);
      double double0 = arc0.maxY();
      assertEquals(158.272832116, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1.0), 9.999999747378752E-6, 0.0, (-3200.7484));
      double double0 = rectangle0.maxY();
      assertEquals((-3200.74839), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Arc arc0 = new Arc();
      double double0 = arc0.maxX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setFrameFromDiagonal(923.6531890104989, 613.4189698630479, 613.4189698630479, 923.6531890104989);
      double double0 = arc0.maxX();
      assertEquals(613.4189698630479, arc0.x, 0.01);
      assertEquals(923.6531890104989, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1239.62258), (-1239.62258));
      Rectangle rectangle0 = new Rectangle(dimension0);
      double double0 = rectangle0.maxX();
      assertEquals((-1239.62258), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Arc arc0 = new Arc(3174.6700941338, 3174.6700941338, 3174.6700941338, 3174.6700941338, (-1.0), 3174.6700941338, 0);
      Point point0 = arc0.max();
      assertEquals(6349.3401882676, point0.x, 0.01);
      assertEquals(6349.3401882676, point0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Arc arc0 = new Arc();
      Point point0 = arc0.max();
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse(270.0, 270.0, 270.0, (-2010.1140704));
      Point point0 = ellipse0.max();
      assertEquals((-1740.1140704), point0.y, 0.01);
      assertEquals(540.0, point0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      boolean boolean0 = ellipse0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Line line0 = new Line(2099.330097179861, (-2544.705186), (-2544.705186), 2099.330097179861);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle rectangle1 = line0.bounds(rectangle0);
      boolean boolean0 = rectangle1.intersects((IRectangle) rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Arc arc0 = new Arc(0.0, 0.0, 0.0, 0.0, (-2090.467491111), 0.0, 0);
      arc0.setFrameFromDiagonal(0.0, (-3.4028234663852886E38), 0.0, 0.22385761685491917);
      Rectangle rectangle0 = new Rectangle((-2433.887863566487), 0.0, 0.0, 0.0);
      arc0.frame(rectangle0);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(3.4028234663852886E38, arc0.height(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Arc arc0 = new Arc(0.0, 0.0, 0.0, 0.0, (-2090.467491111), 0.0, 0);
      arc0.setFrameFromDiagonal((-2090.467491111), (double) 0, 0.0, 0.0);
      Point point0 = arc0.center();
      Dimension dimension0 = new Dimension(0.0, 231.0);
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      rectangle0.frame(rectangle0);
      assertEquals((-2090.467491111), arc0.x, 0.01);
      assertEquals((-1045.2337455555), point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setFrameFromDiagonal(922.287522017316, 922.287522017316, 613.4189698630479, 922.287522017316);
      Rectangle rectangle0 = new Rectangle(0.6666666865348816, 0.0, 6.283185307179586, 0.0);
      arc0.frame(rectangle0);
      assertEquals(613.4189698630479, rectangle0.x, 0.01);
      assertEquals(308.86855215426806, arc0.width(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setFrame(10.0, 10.0, (-824.7136), 645.8738015277);
      Rectangle rectangle1 = rectangle0.frame(rectangle0);
      assertSame(rectangle1, rectangle0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1225.2712201860231), (-2978.314822489));
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle rectangle1 = rectangle0.frame(rectangle0);
      assertEquals((-1225.2712201860231), rectangle1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0, 4.71238898038469, 1.0, 360.0);
      rectangle0.setFrameFromDiagonal(1033.702728, 1.0, 3809.1778441338, (-2090.467491111));
      rectangle0.frame();
      assertEquals((-2090.467491111), rectangle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Arc arc0 = new Arc();
      Rectangle rectangle0 = arc0.frame();
      assertEquals(0.0, rectangle0.width(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0, 4320.0, 0.0, (-298.295347938));
      Rectangle rectangle1 = rectangle0.frame();
      assertNotSame(rectangle0, rectangle1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Vector vector0 = new Vector(0.0, 0.0);
      boolean boolean0 = rectangle0.contains((XY) vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Arc arc0 = new Arc(3174.6700941338, 3174.6700941338, 3174.6700941338, 3174.6700941338, (-1.0), 3174.6700941338, 0);
      Rectangle rectangle0 = new Rectangle();
      arc0.bounds(rectangle0);
      boolean boolean0 = rectangle0.contains((IRectangle) rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Arc arc0 = new Arc();
      double double0 = arc0.centerY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(3110.662927222636, 3110.662927222636, 3110.662927222636, 3110.662927222636, 90.0, 3110.662927222636);
      double double0 = roundRectangle0.centerY();
      assertEquals(4665.994390833954, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setFrameFromDiagonal(613.2939497608687, (-848.8455508246498), 1282.64, (-848.8455508246498));
      double double0 = arc0.centerY();
      assertEquals((-848.8455508246498), arc0.y, 0.01);
      assertEquals((-848.8455508246498), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Arc arc0 = new Arc();
      double double0 = arc0.centerX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2208.3, 2208.3, 2208.3, 2208.3);
      double double0 = rectangle0.centerX();
      assertEquals(3312.4500000000003, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Arc arc0 = new Arc(0.0, 0.0, 0.0, 0.0, (-2090.467491111), 0.0, 0);
      arc0.setFrameFromDiagonal((-2090.467491111), (double) 0, 0.0, 0.0);
      double double0 = arc0.centerX();
      assertEquals((-2090.467491111), arc0.x, 0.01);
      assertEquals((-1045.2337455555), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Arc arc0 = new Arc(3174.6700941338, 3174.6700941338, 3174.6700941338, 3174.6700941338, (-1.0), 3174.6700941338, 0);
      arc0.setFrameFromDiagonal(0.0, (-1.0), 0.0, 0.0);
      arc0.center();
      assertEquals((-1.0), arc0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Arc arc0 = new Arc(1749.796212, 1401.411079, 2551.0, 1401.411079, 0.0, 1.0, 1);
      Point point0 = arc0.center();
      assertEquals(2102.1166185, point0.y, 0.01);
      assertEquals(3025.296212, point0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Arc arc0 = new Arc((-991.9024402143), 0.0, 0.0, 4016.433257, 0.0, 4016.433257, 0);
      Rectangle rectangle0 = arc0.bounds();
      AffineTransform affineTransform0 = new AffineTransform(0, 4016.433257, (-991.9024402143), 0.25, 4016.433257);
      Vector vector0 = affineTransform0.scale();
      Point point0 = new Point(vector0);
      arc0.setArcByTangent(point0, point0, point0, 4);
      Rectangle rectangle1 = arc0.bounds(rectangle0);
      assertEquals(Double.NaN, rectangle1.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Arc arc0 = new Arc(3174.6700941338, 3174.6700941338, 3174.6700941338, 3174.6700941338, 3174.6700941338, 3174.6700941338, 0);
      Rectangle rectangle0 = new Rectangle();
      arc0.setFrameFromDiagonal(0.0, 0.0, 0.0, 0.0);
      arc0.bounds(rectangle0);
      assertEquals(0.0, arc0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Arc arc0 = new Arc();
      Point point0 = arc0.min();
      RoundRectangle roundRectangle0 = new RoundRectangle((-0.5), 0.0, 2218.764067755524, 0.0, 0.0, 0.0);
      Line line0 = new Line(point0, point0);
      Rectangle rectangle0 = line0.bounds();
      Rectangle rectangle1 = roundRectangle0.bounds(rectangle0);
      assertEquals(2218.764067755524, rectangle1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1441.15568289983), (-1441.15568289983), (-299.76), 180.0);
      Rectangle rectangle1 = rectangle0.bounds(rectangle0);
      assertEquals(180.0, rectangle1.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0, 0.0, 5054.1289, 0.0);
      Rectangle rectangle1 = rectangle0.bounds();
      assertEquals(0.0, rectangle1.height(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setFrameFromDiagonal((-1.0), 1.0, 268.5687483974, (-3.141592653589793));
      rectangle0.bounds();
      assertEquals((-3.141592653589793), rectangle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Line line0 = new Line(1401.411079, 1.0, 1401.411079, 1.0);
      Rectangle rectangle0 = line0.bounds();
      Arc arc0 = new Arc(rectangle0, 1.0, (-3537.8792633827925), 0);
      Rectangle rectangle1 = arc0.bounds();
      assertNotSame(rectangle0, rectangle1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-874.236907562), (-874.236907562), (-874.236907562), 912.5801870096, (-1251.4), (-874.236907562));
      Rectangle rectangle0 = roundRectangle0.bounds();
      Rectangle rectangle1 = rectangle0.frame();
      assertEquals((-874.236907562), rectangle1.width(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      // Undeclared exception!
      try { 
        roundRectangle0.setFrameFromDiagonal((XY) null, (XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      // Undeclared exception!
      try { 
        roundRectangle0.setFrameFromCenter((XY) null, (XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Arc arc0 = new Arc();
      // Undeclared exception!
      try { 
        arc0.setFrame((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Arc arc0 = new Arc();
      // Undeclared exception!
      try { 
        arc0.intersects((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Arc arc0 = new Arc();
      // Undeclared exception!
      try { 
        arc0.frame((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Arc arc0 = new Arc();
      // Undeclared exception!
      try { 
        arc0.contains((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      // Undeclared exception!
      try { 
        rectangle0.contains((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Arc arc0 = new Arc();
      // Undeclared exception!
      try { 
        arc0.bounds((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1239.62258), (-1239.62258));
      Rectangle rectangle0 = new Rectangle(dimension0);
      boolean boolean0 = rectangle0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Arc arc0 = new Arc();
      double double0 = arc0.minX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1569.991), (-1569.991));
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle rectangle1 = rectangle0.bounds(rectangle0);
      assertSame(rectangle0, rectangle1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-1200.0), 1621.119880383982, (-2090.467491111), (-3194.636715), (-7053.723716724624), (-1200.0));
      Rectangle rectangle0 = roundRectangle0.bounds();
      assertEquals((-1200.0), rectangle0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4113.236, (-3.141592653589793), 279.8, (-787.2271));
      boolean boolean0 = rectangle0.contains((-893.553), (-0.5), 1.0, 1276.198);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = new Rectangle();
      line0.setLine(9.999999747378752E-6, 0.0, 3174.6700941338, 1976.9);
      Rectangle rectangle1 = line0.bounds(rectangle0);
      boolean boolean0 = rectangle1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      boolean boolean0 = rectangle0.intersects((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Line line0 = new Line((-1311.5481488388), 269.5687483974, 269.5687483974, 300.351409);
      Rectangle rectangle0 = line0.bounds();
      Point point0 = rectangle0.center();
      boolean boolean0 = rectangle0.contains((XY) point0);
      assertEquals(284.9600786987, point0.y, 0.01);
      assertEquals((-520.9897002207), point0.x, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Arc arc0 = new Arc();
      // Undeclared exception!
      try { 
        arc0.setFrame((XY) null, (IDimension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.contains((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Arc arc0 = new Arc();
      Point point0 = arc0.min();
      arc0.setFrameFromCenter((XY) point0, (XY) point0);
      assertEquals(0.0, arc0.width, 0.01);
      assertEquals(0.0, arc0.y, 0.01);
      assertEquals(0.0, arc0.x, 0.01);
      assertEquals(0.0, arc0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Arc arc0 = new Arc();
      Rectangle rectangle0 = new Rectangle();
      arc0.setFrame((IRectangle) rectangle0);
      assertEquals(0.0, arc0.extent, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse((-1020.22267086499), (-550.34784825), (-2894.84028566497), (-1020.22267086499));
      Point point0 = ellipse0.max();
      assertEquals((-3915.06295652996), point0.x, 0.01);
      assertEquals((-1570.57051911499), point0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Arc arc0 = new Arc();
      // Undeclared exception!
      try { 
        arc0.pathIterator((Transform) null, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Flatness is less then zero
         //
         verifyException("pythagoras.d.FlatteningPathIterator", e);
      }
  }
}
