/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:34:49 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.GeometryUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GeometryUtil_ESTest extends GeometryUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      GeometryUtil.intersectQuadAndCubic(0.0, Double.NaN, Double.NaN, 0.0, (-449.2813116018), (-1.0), (-1651.1913650360527), Double.NaN, (-1172.8611164392896), 0.0, (-1651.1913650360527), 0.0, (-1.0), 3.130730735442314, doubleArray0);
      GeometryUtil.intersectLinesWithParams(3.0, (-1.0), (-14.0), (-1733.345088620518), (-4440.0), 1394.12, Double.NaN, (-449.2813116018), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 657.66291;
      doubleArray0[3] = 59.1725598677;
      doubleArray0[4] = 59.1725598677;
      GeometryUtil.intersectLines((-1.000000013351432E-10), 0.0, 657.66291, 10.611572138466322, (-1727.0029735), 10.611572138466322, (-1727.0029735), 10.611572138466322, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      GeometryUtil.intersectLines(3.0, 3.0, 0.0, (-1651.1913650360527), 0.0, 1.1061313926524544E7, 0.0, (-673.6042733633), doubleArray0);
      GeometryUtil.intersectLineAndQuad(27.0, (-2861.682471625277), 9.0, (-2298.156779), 0.0, 2021.2173908485, 0.0, 0.0, 3.0, 0.0, doubleArray0);
      // Undeclared exception!
      GeometryUtil.intersectQuadAndCubic((-2216.307887973), 2021.2173908485, (-1614.520269391), (-2216.307887973), 2295.0567862, 3.0, 1857.44499, 404.0557, 4021.977413305, 0.5, (-2395.6667570119935), 0.0, 2295.0567862, (-2.0), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GeometryUtil.quad(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2412.517102132721;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-296.4639);
      doubleArray0[3] = 562.16135885288;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 991.988697471;
      doubleArray0[6] = (-296.4639);
      doubleArray0[7] = 991.988697471;
      GeometryUtil.intersectLines(1499.40906252, (-296.4639), 2412.517102132721, (-2597.24713164), 2412.517102132721, 0.0, 2412.517102132721, 1499.40906252, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeometryUtil.quad(0.0, 0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLines((-1.000000013351432E-10), (-418.0), 344.40608362776, (-2.0), 562.16135885288, (-2960.499907474651), 2412.517102132721, 0.3333333432674408, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = (-2101.8293922);
      double double1 = 198.68715643;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        GeometryUtil.intersectQuadAndCubic(577.932030808, 2255.4466425745704, (-2101.8293922), 2.0, 0.0, 198.68715643, 2255.4466425745704, 6.0, 2255.4466425745704, 0.0, (-2101.8293922), 0.031606612079421524, (-14.0), 0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 1794.166092478658;
      double double1 = (-2931.2492);
      double double2 = 3133.4968299;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        GeometryUtil.intersectQuads(2054.5318612, 4.0, (-2315.427721622), 971.521056, 4.0, 1794.166092478658, (-2315.427721622), 4.0, 4.0, (-2931.2492), 3133.4968299, (-2931.2492), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-9.999999747378752E-6);
      GeometryUtil.cubic(3.0383054490766466E-14, 0.0, 0.0, (-9.999999747378752E-6), 0.0);
      double double1 = 10.0;
      double double2 = 0.00257596151313505;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLineAndCubic((-1439.1519147), 6.0, 0.19197679880582505, 0.0, (-1.0), (-1.0), 0.0, 12.73338955399593, 10.0, (-1.0), 0.0, 0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2532.204409219844);
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLineAndQuad(1530.434, 0.0, (-14.0), 0.0, 0.0, (-14.0), 10.0, 0.75, 1.574183380039721, 1.2837712088914393, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 657.66291;
      GeometryUtil.intersectLines((-1260.22927768), 1.0, 0.6166623549669097, (-2.0), 1.0, 657.66291, 1.0, 2733.952052307, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLineAndQuad((-292.74), (-1.000000013351432E-10), 0.0, (-2.0), 2.0, 1589.630889294856, (-2.0), 0.0, 0.0, (-898.18256), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 991.988697471;
      double double0 = 657.66291;
      doubleArray0[2] = 657.66291;
      doubleArray0[3] = 59.1725598677;
      doubleArray0[4] = 59.1725598677;
      double double1 = (-3143.26468389);
      GeometryUtil.intersectLines((-3143.26468389), 59.1725598677, 2412.517102132721, 59.1725598677, 59.1725598677, 59.1725598677, 657.66291, 562.16135885288, doubleArray0);
      double double2 = (-1963.583);
      double double3 = 0.9315108817547475;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLineAndCubic((-1202.8491432), 2412.517102132721, 2303.245159878, (-1202.8491432), (-1856.0), (-1856.0), (-1963.583), 0.9315108817547475, (-50.05787972), (-1856.0), 562.16135885288, (-1202.8491432), doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GeometryUtil.quad(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLines(1531.0807005079057, (-1.000000013351432E-10), 0.0, 0.0, 0.4749559113610894, 0.0, 6.94999613415348E-14, 0.0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 991.988697471;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 657.66291;
      doubleArray0[3] = 59.1725598677;
      doubleArray0[4] = 59.1725598677;
      doubleArray0[5] = 59.1725598677;
      doubleArray0[6] = 59.1725598677;
      doubleArray0[7] = 0.0;
      GeometryUtil.intersectLines(59.1725598677, 18.600051884218505, 59.1725598677, 59.1725598677, 59.1725598677, (-14.0), 18.600051884218505, 59.1725598677, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 991.988697471;
      doubleArray0[2] = 657.66291;
      doubleArray0[3] = (-1148.9497146702);
      doubleArray0[4] = 657.66291;
      GeometryUtil.intersectLines((-3143.26468389), 657.66291, 2412.517102132721, 657.66291, (-1148.9497146702), 657.66291, 657.66291, 562.16135885288, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 991.988697471;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 657.66291;
      doubleArray0[3] = 59.1725598677;
      doubleArray0[4] = 59.1725598677;
      GeometryUtil.intersectLinesWithParams(657.66291, 1437.0, (-31.2), 0.5, 657.66291, (-384.08363), 1.0, 1.0385798573046237, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      GeometryUtil geometryUtil0 = new GeometryUtil();
      GeometryUtil.intersectLinesWithParams((-1.0), (-1.0), 0.7071067811865476, 0.7071067811865476, 0.0, 3517.62267, 0.007292334389981791, 0.007292334389981791, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 258.8482284;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.25;
      doubleArray0[3] = 1860.408411753773;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-14.0);
      GeometryUtil.intersectLineAndCubic((-0.05862788368139879), 258.8482284, 1.0, 0.75, 1418.83, 976.5171854, 0.75, (-0.05862788368139879), (-740.688635270175), 0.25, 1.143248247484721, (-14.0), doubleArray0);
      GeometryUtil.quad((-1437.04782079043), 1171.1484555058, (-3467.0), 1.0);
      GeometryUtil.intersectLines((-644.11), 2673.022, 1.0, 0.25, 0, (-366.1325539), 0.0, (-3035.4238807632), doubleArray0);
      // Undeclared exception!
      GeometryUtil.intersectQuadAndCubic(1.6753391026297873E10, (-644.11), 6.0, 1.0, 0.5, 0.25, 0.0, 1860.408411753773, 2.0, (-1437.04782079043), 1162.95007535287, (-2.0), (-3035.4238807632), 2.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GeometryUtil.quad(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[4];
      GeometryUtil.intersectLines(0.6166623549669097, 657.66291, 3527.711678680271, 2.522712928483767E-9, 3527.711678680271, 2.522712928483767E-9, 1.0, (-2.0), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      GeometryUtil.intersectLines((-3143.26468389), (-3143.26468389), (-1857.811561038), (-3143.26468389), (-1597.506858), 562.16135885288, 822.41006, (-0.0030789057877313383), doubleArray0);
      GeometryUtil.intersectLineAndCubic(0, (-2912.3657), 2.0943951023931953, (-658.88023959099), 562.16135885288, 562.16135885288, 5597.735863169479, 5597.735863169479, (-2912.3657), 27.0, 1.4678746216828358, 0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GeometryUtil.cubic(0.0, 6.0, 0.0, 0.0, 791.746940352);
      GeometryUtil.line(1335.50240444, 1335.50240444, (-120.8));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.765794607369573E-9;
      doubleArray0[1] = (-120.8);
      doubleArray0[2] = (-2589.38);
      doubleArray0[3] = 6.0;
      doubleArray0[4] = 6.4189376147767;
      doubleArray0[5] = 3610.9889272908704;
      doubleArray0[6] = (-3.0);
      GeometryUtil.intersectLineAndQuad((-1727.9), (-1943559.8603169331), 1.8537306394239948E-11, 1.0, 2826.6, 0.006458379167801822, 791.746940352, 0.0, 6.765794607369573E-9, (-1.0), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GeometryUtil.quad(0.0, 0.0, 0.0, 0.0);
      double double0 = 1531.0807005079057;
      double[] doubleArray0 = new double[2];
      double double1 = 0.3333333432674408;
      doubleArray0[0] = 0.3333333432674408;
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        GeometryUtil.subCubic(doubleArray0, 531.624, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 2
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[4] = 0.0;
      GeometryUtil.intersectLinesWithParams(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = 0.0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        GeometryUtil.subQuad((double[]) null, 0.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-353.38861221901846);
      doubleArray0[1] = 723.3987;
      doubleArray0[2] = (-1118.95);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1118.95);
      doubleArray0[5] = (-2228.8175811573);
      doubleArray0[6] = (-353.38861221901846);
      doubleArray0[7] = (-1118.95);
      doubleArray0[8] = (-1118.95);
      GeometryUtil.intersectLineAndCubic((-2228.8175811573), (-2228.8175811573), (-2228.8175811573), (-2228.8175811573), (-1.0), (-2228.8175811573), (-1118.95), (-1118.95), (-2228.8175811573), (-1.0), (-2228.8175811573), (-353.38861221901846), doubleArray0);
      GeometryUtil.intersectQuads((-516.64), 0.0, 0.0, 0.0, (-934.061688), (-934.061688), 0.0, 0.0, (-1118.95), 0.0, 0.0, (-1.0), doubleArray0);
      GeometryUtil geometryUtil0 = new GeometryUtil();
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-353.38861221901846);
      doubleArray1[3] = (-1118.95);
      doubleArray1[4] = (-1118.95);
      doubleArray1[5] = (-3.0);
      GeometryUtil.intersectLinesWithParams(0.0, (-2228.8175811573), (-2228.8175811573), (-2801.350360299399), (-2801.350360299399), (-3.0), (-353.38861221901846), 1390.188172306, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      GeometryUtil.subCubic(doubleArray0, (-4075.27265883459), true);
      GeometryUtil.intersectLinesWithParams(1747.1442976, (-0.3444883280600328), 1762.424, 2.8203835930348746, 4142.0, 371.556629, 1747.1442976, 1747.1442976, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      GeometryUtil.intersectLines(4317.971811577245, 0.597873568942261, 0.597873568942261, 3.0, 657.66291, (-832.7346914358999), 2.4129658303247383E-11, 0.597873568942261, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 372.01;
      doubleArray0[1] = (-1948.9);
      doubleArray0[2] = 0.75;
      doubleArray0[3] = 372.01;
      doubleArray0[4] = (-3.0);
      doubleArray0[5] = (-5852.6660187892);
      doubleArray0[6] = (-5852.6660187892);
      GeometryUtil.intersectLines(0.0, 372.01, (-3.0), 0.0, 0.75, (-5852.6660187892), (-5852.6660187892), (-1948.9), doubleArray0);
      GeometryUtil.subQuad(doubleArray0, (-3.0), true);
      GeometryUtil.intersectLinesWithParams(0.0, 0.0, 1785.31229, 0.0, 1785.31229, 0.75, (-2412.565), (-778.23), doubleArray0);
      GeometryUtil.line(0.0, 0.0, 3382.31840172303);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-249.1210802476);
      double double1 = (-1.0);
      GeometryUtil.cubic((-249.1210802476), (-249.1210802476), 2216.227345977, (-1.0), 302.4579);
      double double2 = 0.0;
      double double3 = (-4127.468109931548);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        GeometryUtil.intersectCubics(0.0, 0.0, (-249.1210802476), 1.0, (-4127.468109931548), 0.0, 6.0, (-1.1224170599058308E11), (-249.1210802476), 0.0, 6.0, 1419.506, (-1577.3), 1.0, 401.13700407, 1669.35, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GeometryUtil.cubic((-3675.878199), (-3675.878199), 446.370425457, 0.0, (-1663.768));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4526.636444440469;
      doubleArray0[1] = 1731.0;
      GeometryUtil.intersectLines((-1.0), 0.0, 0.0, 4526.636444440469, 446.370425457, 1731.0, (-1663.768), 1731.0, doubleArray0);
      GeometryUtil.cubic(3610.9889272908704, (-0.6175968577891908), 1731.0, 6.4189376147767, 1335.50240444);
      GeometryUtil.line((-3.0), 1731.0, (-3675.878199));
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 1731.0;
      doubleArray1[2] = 17951.634597;
      doubleArray1[3] = 4526.636444440469;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3675.878199);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1.0;
      doubleArray1[8] = (-3.0);
      GeometryUtil.intersectLineAndQuad((-3602.4), 0.0, (-1663.768), 0.0, 0.0, (-0.6175968577891908), (-3675.878199), 1.0, 0.0, (-1727.9), doubleArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 991.988697471;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 657.66291;
      doubleArray0[3] = 59.1725598677;
      doubleArray0[4] = 59.1725598677;
      doubleArray0[5] = 59.1725598677;
      doubleArray0[6] = 59.1725598677;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 59.1725598677;
      GeometryUtil.intersectLines(59.1725598677, 59.1725598677, 59.1725598677, 59.1725598677, 59.1725598677, 59.1725598677, 59.1725598677, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2054.5318612;
      doubleArray0[1] = (-9.999999747378752E-6);
      GeometryUtil.intersectLines((-9.99999974737875E-6), 10.611572138466322, (-9.999999747378752E-6), (-9.99999974737875E-6), 2054.5318612, (-9.99999974737875E-6), 2054.5318612, (-1142.130487068629), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 991.988697471;
      doubleArray0[2] = 657.66291;
      doubleArray0[3] = 58.48696107466171;
      doubleArray0[4] = 58.48696107466171;
      GeometryUtil.intersectLines(58.48696107466171, 991.988697471, 657.66291, 10.611572, 657.66291, 10.611572, 657.66291, 10.611572, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-430.60269856672);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      GeometryUtil.subQuad(doubleArray0, 0.0, false);
      // Undeclared exception!
      GeometryUtil.intersectQuads((-430.60269856672), (-1153.7142), 1060.43970299, 0.0, 0.0, (-4123.100657958009), 0.0, 3272.3107667, 3044.348, 0.0, 0.75, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GeometryUtil.cubic(0.5, (-129.5639718), 1.0, 1.0, 1.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-129.5639718);
      doubleArray0[1] = 744.0;
      doubleArray0[2] = (-15.320496474999999);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-1178.7394);
      doubleArray0[8] = (-129.5639718);
      GeometryUtil.subQuad(doubleArray0, 1.0, true);
      GeometryUtil geometryUtil0 = new GeometryUtil();
      GeometryUtil.intersectLineAndCubic((-15.320496474999999), 3.0, (-129.5639718), (-1693.311), 0.25, 3.0, 0.0, (-1693.311), 1.0, 0.0, 694.33845, 0.0, doubleArray0);
      GeometryUtil.quad(1758.46, 0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1451.3);
      doubleArray0[1] = 0.75;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1451.3);
      doubleArray0[5] = 976.5171854;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1802.96;
      GeometryUtil.intersectLineAndCubic((-14.0), 0.75, (-14.0), (-14.0), (-1451.3), (-14.0), (-14.0), 0.75, 0.0, 0.0, (-14.0), 0.75, doubleArray0);
      GeometryUtil.quad(0.0, 0.0, (-1451.3), 0.0);
      GeometryUtil.intersectLines((-644.11), (-2221.22), (-1724.4916604587), 10.0, 0.0, 0.0, 2673.022, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2054.5318612;
      doubleArray0[1] = (-9.999999747378752E-6);
      doubleArray0[2] = 2054.5318612;
      doubleArray0[3] = (-9.999999747378752E-6);
      // Undeclared exception!
      GeometryUtil.intersectCubics(934.6763, 0.0, (-1424.829610802724), 0.0, (-14.0), 2.0, (-9.999999747378752E-6), 0.0, 934.6763, (-9.999999747378752E-6), 2.0, (-3786.60701), 0.0, (-9.999999747378752E-6), 0.0, 775.50550392, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GeometryUtil.line(0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 698.42102;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1001.81319;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-285.0073162);
      GeometryUtil.intersectQuads(0.0, 1.0, 698.42102, 0.0, 0.0, 1.0, 1001.81319, (-285.0073162), 1.0, 1001.81319, 6228.91243, 1001.81319, doubleArray0);
      GeometryUtil geometryUtil0 = new GeometryUtil();
      GeometryUtil.intersectLineAndCubic(1.0, 1.2936810868663036, (-43.2587), 538.5, 0.0, (-825.7), 3948.056388, 0.0, 0.0, 6228.91243, 6228.91243, (-1.0), doubleArray0);
      GeometryUtil.intersectLines(0.0, 6228.91243, 0.0, 2, -0.0, 2576.3, 661.36521114575, 3996.6743380179, doubleArray0);
      GeometryUtil.quad(0.0, 0.0, 1.0, 1.0E-14);
      // Undeclared exception!
      GeometryUtil.intersectCubics(0.0, 1.0, (-1.0), 0.0, 0, (-1074.0), (-43.2587), 661.36521114575, 1.0, 0.0, (-1.0), 698.42102, (-285.0073162), 363.51828657733, 0.0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GeometryUtil.quad(0.0, 0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLinesWithParams((-925.969227), 4644.6287809, (-1787.109158), (-925.969227), 1791.2368871, (-3028.2), 0.3333333432674408, (-1269.9), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1263.7335732400536;
      doubleArray0[2] = (-1945.152457954452);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-3033.0);
      GeometryUtil.intersectLines(1263.7335732400536, 0.0, 1263.7335732400536, (-3033.0), (-3033.0), 0.0, 1.0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      GeometryUtil.intersectLines((-3143.26468389), (-1711.892342028), 991.988697471, 2412.517102132721, 657.66291, 991.988697471, 450.96637446, (-1711.892342028), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GeometryUtil.quad(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        GeometryUtil.intersectCubics((-1619.8874), 1716.83, 0.0, 0.0, 0.0, 1.000000013351432E-10, 1096.476218, 583741.2570604306, 583741.2570604306, 0.0, (-3390.928), 532.87, 3.0, 1716.83, 532.87, 1096.476218, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1350.0;
      doubleArray0[1] = 1530.434;
      doubleArray0[2] = 1350.0;
      doubleArray0[3] = 443.661;
      doubleArray0[4] = 1530.434;
      doubleArray0[5] = 1530.434;
      doubleArray0[6] = 1130.187639674;
      GeometryUtil.intersectLineAndQuad(1350.0, 1350.0, 1350.0, 1130.187639674, 1350.0, 443.661, 1530.434, 443.661, 1530.434, 1350.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1651.1913650360527);
      GeometryUtil.intersectCubics(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, (-1651.1913650360527), 0.0, 0.0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-712.1337172389);
      doubleArray0[1] = (-442.0035392487);
      // Undeclared exception!
      GeometryUtil.intersectCubics(0.0494798081904395, 0.0494798081904395, 476.762122, 476.762122, 0.0, 0.0, 476.762122, 0.0, 0.0324210808859429, 0.0494798081904395, (-712.1337172389), 0.0494798081904395, (-1906.0), 0.0494798081904395, 3.0, (-442.0035392487), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-69.5818054);
      doubleArray0[2] = 4439.73;
      doubleArray0[3] = (-715.3058178292439);
      doubleArray0[4] = (-817.0);
      GeometryUtil.intersectLines(3.0, (-1.0), 0.0, 3.0, 3.0, (-69.5818054), (-69.5818054), (-817.0), doubleArray0);
      // Undeclared exception!
      GeometryUtil.intersectCubics(0.0, (-220.5), 0.0, 0.0, (-715.3058178292439), 159.38, 0.0, (-135.360054713979), (-1.0), 0.0, 0.0, (-715.3058178292439), 4439.73, 0.0, (-1.0), 2062.181, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GeometryUtil.quad(3562.333183518, 3562.333183518, 0.0, 3562.333183518);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.25;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3562.333183518;
      // Undeclared exception!
      GeometryUtil.intersectQuads(3562.333183518, 0.0, 0.0, 9.03881904385175E10, 0.0, 0.25, 2014.4, 0.0, 0.25, 0.0, 0.25, 3562.333183518, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GeometryUtil.quad(3562.333183518, 3562.333183518, 0.0, 3562.333183518);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.25;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2.0);
      // Undeclared exception!
      GeometryUtil.intersectQuads(3562.333183518, 0.0, 0.0, 9.03881904385175E10, 0.0, 0.25, 2014.4, (-2.0), 0.25, 0.0, 0.25, 3562.333183518, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1350.0;
      doubleArray0[1] = 1530.434;
      doubleArray0[2] = 1350.0;
      doubleArray0[3] = 443.661;
      doubleArray0[4] = 1530.434;
      doubleArray0[5] = 1530.434;
      doubleArray0[6] = 1130.187639674;
      doubleArray0[7] = 443.661;
      GeometryUtil.intersectLineAndQuad(1350.0, 1350.0, 1350.0, 1130.187639674, 1350.0, 443.661, 1530.434, 443.661, 1530.434, 1350.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      GeometryUtil.intersectLineAndQuad(3515.67774, (-119.0935953046), 0.0, 3.0, 0.0, 0.0, (-119.0935953046), 788.16400127041, 3515.67774, (-321.5425791584), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1451.3);
      GeometryUtil.intersectLineAndQuad(1530.434, 1.9793804732471065, (-1451.3), 0.0, (-14.0), 0.0, (-1451.3), (-1451.3), 1530.434, 0.75, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 991.988697471;
      doubleArray0[2] = 657.66291;
      doubleArray0[3] = 59.1725598677;
      GeometryUtil.intersectLineAndCubic(59.1725598677, 1.0, 59.1725598677, (-2156.3053807206343), 991.988697471, 657.66291, 59.1725598677, (-2156.3053807206343), 2.0, 991.988697471, (-2156.3053807206343), 59.1725598677, doubleArray0);
      GeometryUtil.intersectLineAndQuad(1.0, (-3597.77088), 59.1725598677, 657.66291, 2.0, 657.66291, 1.0, (-2156.3053807206343), 3.0, 0.37198090942602213, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 480.97566183;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      GeometryUtil.intersectLineAndQuad(480.97566183, (-4968.536621294), (-4968.536621294), (-4968.536621294), 480.97566183, 0.0, 0.0, 480.97566183, 480.97566183, (-4968.536621294), doubleArray0);
      GeometryUtil.cubic((-662.8484395300738), 0.0, 1.0, 0.0, (-662.8484395300738));
      GeometryUtil.cubic((-1.0), (-2670.3227465), 0.0, 0.0, (-992.86396173666));
      GeometryUtil.intersectLineAndQuad((-2138.895), (-1827.301328), (-1052.839), (-662.8484395300738), 0.0, 0.0, 0.0, 169.8913346127, 1.0, (-1936.8224), doubleArray0);
      GeometryUtil.intersectLineAndCubic(0.0, (-1.0), (-988.12416658), 0.0, 1.0, (-3.0), 0.25, 10.0, 0.0, (-2138.895), 0.0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GeometryUtil.quad((-4603.921), (-4603.921), 0.0, 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-9.762751408587769E10);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-9.762751408587769E10);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-9.762751408587769E10);
      doubleArray0[5] = (-4603.921);
      doubleArray0[6] = (-9.762751408587769E10);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-9.762751408587769E10);
      GeometryUtil.subCubic(doubleArray0, (-9.762751408587769E10), false);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      GeometryUtil.subCubic(doubleArray0, (-4075.27265883459), true);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLines(0.0, 285.0, (-1351.15), (-1351.15), 0.0, 9.999999747378752E-6, 0.0, (-4075.27265883459), doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      // Undeclared exception!
      try { 
        GeometryUtil.intersectQuads(27.0, (-1.0), (-540.621181), (-1.0), (-1.0), (-574.613), (-1.0), (-540.621181), (-540.621181), 27.0, (-574.613), (-574.613), doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      GeometryUtil.intersectLines(991.988697471, 991.988697471, (-305.93474074825), 2412.2735271889455, 657.66291, 657.66291, 2412.2735271889455, 5.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      GeometryUtil.intersectLines(657.66291, (-2334.0531), (-2334.0531), 657.66291, (-2334.0531), 657.66291, 657.66291, 1.1365784271782229E-11, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 991.988697471;
      doubleArray0[2] = 657.66291;
      doubleArray0[3] = 59.1725598677;
      doubleArray0[4] = 59.1725598677;
      GeometryUtil.intersectLines(59.1725598677, 991.988697471, 657.66291, 10.611572138466322, 657.66291, 10.611572138466322, 657.66291, 10.611572138466322, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 991.988697471;
      doubleArray0[2] = 657.66291;
      doubleArray0[3] = 59.1725598677;
      doubleArray0[4] = 59.1725598677;
      GeometryUtil.intersectLines((-1.000000013351432E-10), 991.988697471, 657.66291, 10.611572138466322, (-1727.0029735), 10.611572138466322, (-1727.0029735), 10.611572138466322, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2054.5318612;
      doubleArray0[1] = (-9.999999747378752E-6);
      doubleArray0[2] = 2054.5318612;
      doubleArray0[3] = (-9.999999747378752E-6);
      GeometryUtil.intersectLines(1152.044632569, (-9.999999747378752E-6), 1152.044632569, (-1200.959), 2054.5318612, (-9.999999747378752E-6), 3.074860589181823, 7.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      GeometryUtil.intersectLines(59.1725598677, 59.1725598677, 562.16135885288, 562.16135885288, 562.16135885288, 59.1725598677, 7.549050889054965E19, 59.1725598677, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-378.76766476313986);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-735.980158);
      doubleArray0[4] = (-378.76766476313986);
      doubleArray0[5] = (-735.980158);
      doubleArray0[6] = (-735.980158);
      doubleArray0[7] = 0.25;
      doubleArray0[8] = (-378.76766476313986);
      GeometryUtil.intersectLines(3327.97412878046, (-1.0), (-949.9967), 0.25, (-735.980158), (-378.76766476313986), 0.25, (-378.76766476313986), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2255.4466425745704;
      doubleArray0[1] = (-2101.8293922);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4075.27265883459);
      GeometryUtil.intersectLinesWithParams(930.254696591, 0.0, 0.0, (-0.8304662338717618), (-0.8304662338717615), 0.0, 2920.9123882287913, (-2101.8293922), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-87.117044032619);
      doubleArray0[1] = 1942.615597;
      GeometryUtil.intersectLinesWithParams(1942.615597, 0.3333333432674408, 0.3333333432674408, 82.15237945212934, 628.37292486, 2.0, (-87.117044032619), 0.3333333432674408, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2771.743614378207);
      doubleArray0[1] = 1485.873302;
      doubleArray0[2] = (-2.0);
      doubleArray0[3] = (-3286.75599988);
      doubleArray0[4] = 1192.344;
      doubleArray0[5] = (-3286.75599988);
      doubleArray0[6] = 1192.344;
      doubleArray0[7] = 2926.0625;
      doubleArray0[8] = (-1680.576377);
      GeometryUtil.intersectQuads(0.0, (-1680.576377), 0.0, 2926.0625, 2926.0625, (-3286.75599988), 2926.0625, (-2771.743614378207), 2926.0625, 1485.873302, 2926.0625, 1192.344, doubleArray0);
      GeometryUtil.subCubic(doubleArray0, 1192.344, true);
      GeometryUtil.intersectLinesWithParams(0.39078190191422096, 0.0, (-1889.599030590202), (-833.41), (-2771.743614378207), 1235.298656668638, 1235.298656668638, (-3286.75599988), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      GeometryUtil.intersectLinesWithParams(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0E-14, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-9.999999747378752E-6);
      doubleArray0[1] = (-9.999999747378752E-6);
      doubleArray0[3] = (-9.999999747378752E-6);
      GeometryUtil.intersectQuads((-9.999999747378752E-6), (-9.999999747378752E-6), (-9.999999747378752E-6), (-9.999999747378752E-6), (-9.999999747378752E-6), (-9.999999747378752E-6), (-9.999999747378752E-6), (-9.999999747378752E-6), (-9.999999747378752E-6), 1136.578427178223, (-9.999999747378752E-6), (-9.999999747378752E-6), doubleArray0);
      GeometryUtil.intersectLines((-342.11686393), (-9.999999747378752E-6), 1136.578427178223, (-9.999999747378752E-6), (-9.999999747378752E-6), Double.NaN, 2, 1.0E-14, doubleArray0);
      GeometryUtil.intersectLinesWithParams(0.0, 1220.84321153915, 1.0E-14, 1.0E-14, 2370.7, 1.0E-14, 2370.7, 1136.578427178223, doubleArray0);
      GeometryUtil.intersectLines(1220.84321153915, 0.0, 2370.7, (-1587.690863025), (-2708.68), 0.0, 0.0, (-9.999999747378752E-6), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1372.3233;
      // Undeclared exception!
      try { 
        GeometryUtil.intersectLinesWithParams((-662.322), 9.0, 3278.27608410558, 1372.3233, (-3069.27166374819), 1372.3233, 1372.3233, (-662.322), doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      GeometryUtil.intersectLinesWithParams(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      GeometryUtil.intersectLineAndQuad((-451.822647646855), (-1.0), (-1.0), (-1.0), 0.0, (-1890.23668464), 927.73172, 927.73172, (-451.822647646855), 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GeometryUtil.quad(261.831164637779, 261.831164637779, (-591.674216), 347.231228871);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GeometryUtil.quad(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4644.6287809;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4317.971811577245;
      doubleArray0[3] = 0.0;
      GeometryUtil.intersectLinesWithParams((-253.1535491087095), (-253.1535491087095), 0.0, (-2.0), (-253.1535491087095), 0.0, (-253.1535491087095), 4317.971811577245, doubleArray0);
      GeometryUtil.intersectLinesWithParams(3.0, 0.0, 0.0, 0.0, 0.0, (-2.0537888047006933E-5), 0.0, (-2854.679489932), doubleArray0);
      GeometryUtil geometryUtil0 = new GeometryUtil();
      GeometryUtil.intersectLineAndCubic(818.0091507576673, 0, 2302.76312, (-1566.7210806246105), 0.0, 846.1542304836447, 0.0, (-834.099), 0.0, (-2854.679489932), 0.0, 4644.6287809, doubleArray0);
      GeometryUtil.intersectLineAndQuad(0.0, 0, 0.0, 0.0, 0.0, (-834.099), 0.0, 1.0E-14, 0.0, (-1302.5360243710086), doubleArray0);
      GeometryUtil.cubic((-1358.8633973875878), 4317.971811577245, 0.0, 0.0, (-2854.679489932));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = new double[0];
      GeometryUtil.intersectLineAndQuad(1.0, 1.0, 521.106, 4953.574095108165, 4953.574095108165, 3.0, 1.0, 9.863953456573796E-12, 9.863953456573796E-12, 1.0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GeometryUtil geometryUtil0 = new GeometryUtil();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.5;
      GeometryUtil.intersectLineAndCubic(0.75, 1.0, 5214.0, 2222.762288578, 0.0, 1907.586, 27.0, 0.75, 2222.762288578, (-2573.756267653), 4006.92679, 2222.762288578, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-2101.8293922);
      double double2 = 1762.424;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 2255.4466425745704;
      doubleArray0[1] = (-2101.8293922);
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        GeometryUtil.intersectQuadAndCubic(0.0, (-2101.8293922), 0.0, (-2101.8293922), 0.0, (-2101.8293922), 0.0, (-2101.8293922), (-2101.8293922), 0.0, 0.0, 1762.424, 0.0, 0.0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1888.00614163);
      doubleArray0[0] = (-1888.00614163);
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      // Undeclared exception!
      try { 
        GeometryUtil.subQuad(doubleArray0, (-1888.00614163), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      GeometryUtil.subCubic(doubleArray0, 277.3674316, true);
      GeometryUtil.intersectLineAndCubic(0.0, 0.0, (-1931.5770803), 2.0, (-2101.8293922), 277.3674316, 2.0, (-2101.8293922), 32.92882710716, 0.0, (-2200.568354990509), 1762.424, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      GeometryUtil.subCubic(doubleArray0, (-4075.27265883459), true);
      GeometryUtil.intersectLineAndCubic(0.0, 0.0, (-1931.5770803), 2.0, (-2101.8293922), (-4075.27265883459), 2.0, (-2101.8293922), 32.92882710716, 0.0, (-2200.568354990509), 1762.424, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double double0 = (-2101.8293922);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2255.4466425745704;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4075.27265883459);
      // Undeclared exception!
      try { 
        GeometryUtil.intersectQuadAndCubic(0.0, (-2101.8293922), 0.0, (-2101.8293922), 0.0, (-2101.8293922), 0.0, (-2101.8293922), (-2101.8293922), 0.0, (-4075.27265883459), 1762.424, 0.0, 0.0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.d.GeometryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      GeometryUtil.cubic(0.0, 0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      GeometryUtil.subCubic(doubleArray0, (-1931.5770803), true);
      GeometryUtil.intersectLineAndCubic(4291.541282535341, 32.92882710716, (-3042.00845331), 0.75, 0.75, (-1.0), (-3.0), 1999.96882446107, 1999.96882446107, 32.92882710716, 1.0, (-3042.00845331), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5214.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1907.586;
      doubleArray0[3] = 0.5;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 5214.0;
      GeometryUtil.intersectLineAndCubic(0.0, 0.0, 0.0, (-2573.756267653), 5214.0, 0.5, (-2573.756267653), 0.0, (-2573.756267653), 5214.0, 0.0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 991.988697471;
      // Undeclared exception!
      GeometryUtil.intersectQuadAndCubic(991.988697471, 1904.839031385781, (-1684.633), 0.0, (-2331.4809869838), 991.988697471, 1904.839031385781, 2791.83036, 0.0, 0.04475028040894453, (-2023.6889), (-1615.18520491), (-2331.4809869838), 1904.839031385781, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double double0 = 357.6806445472;
      double double1 = 0.0;
      double double2 = 0.0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-307.9547385667499);
      doubleArray0[4] = 3.0;
      GeometryUtil.intersectLineAndCubic((-459.3301223), 357.6806445472, 0.0, 4769.725627, 0.0, (-459.3301223), (-307.9547385667499), 0.0, 0.0, 0.0, 0.0, 3.0, doubleArray0);
      // Undeclared exception!
      GeometryUtil.intersectQuadAndCubic(2084.95654, (-2.0), 0.0, (-2.0), 1.0, 0.0, 0.0, 0.0, 0.0, 357.6806445472, 0.0, 1038.18024, 0.0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double double0 = GeometryUtil.cubic(0.0, 0.0, 0.0, 0.0, (-2270.3));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = GeometryUtil.quad(0.0, 0.0, 0.0, 1.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      double double0 = GeometryUtil.line(1156.5634787178935, 979.2319047, 1156.5634787178935);
      assertEquals(206074.4540373548, double0, 0.01);
      
      GeometryUtil geometryUtil0 = new GeometryUtil();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2398.23);
      doubleArray0[1] = 206074.4540373548;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int int0 = GeometryUtil.intersectLineAndCubic(206074.4540373548, (-949.9234817015345), 979.2319047, 0.0, 1156.5634787178935, 0.0, 0.0, 1156.5634787178935, 0.0, 206074.4540373548, (-2398.23), 206074.4540373548, doubleArray0);
      assertEquals(0, int0);
      
      double double1 = GeometryUtil.cubic(0.0, (-14.0), 0.0, 0.0, 414.6);
      assertEquals((-14.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      double double0 = GeometryUtil.line(1642.3171506, 1642.3171506, 1642.3171506);
      assertEquals(1642.3171505997889, double0, 0.01);
  }
}
