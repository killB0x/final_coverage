/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:36:54 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.Line;
import pythagoras.d.Point;
import pythagoras.d.Rectangle;
import pythagoras.d.Vector;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector vector0 = new Vector();
      Rectangle rectangle0 = new Rectangle(vector0);
      Point point0 = rectangle0.location();
      Line line0 = new Line(vector0, point0);
      assertEquals(0.0, line0.y1, 0.01);
      assertEquals(0.0, line0.y2, 0.01);
      assertEquals(0.0, line0.x1, 0.01);
      assertEquals(0.0, line0.x2, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Line line0 = new Line();
      double double0 = line0.y2();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Line line0 = new Line();
      Line line1 = new Line(0.0, (-803.608338), 0.0, 0.0);
      Rectangle rectangle0 = line0.bounds();
      Rectangle rectangle1 = line1.bounds(rectangle0);
      Point point0 = rectangle1.min();
      Line line2 = new Line(point0, point0);
      double double0 = line2.y2();
      assertEquals((-803.608338), rectangle0.y, 0.01);
      assertEquals((-803.608338), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Line line0 = new Line(0.0, 0.0, 0.0, 0.0);
      double double0 = line0.y1();
      assertEquals(0.0, line0.x2, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, line0.y2, 0.01);
      assertEquals(0.0, line0.x1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Line line0 = new Line();
      line0.setLine(87.44019329012269, 87.44019329012269, 87.44019329012269, 87.44019329012269);
      double double0 = line0.y1();
      assertEquals(87.44019329012269, line0.x1, 0.01);
      assertEquals(87.44019329012269, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Line line0 = new Line((-68.5776374597), (-68.5776374597), (-68.5776374597), (-68.5776374597));
      double double0 = line0.y1();
      assertEquals((-68.5776374597), line0.x1, 0.01);
      assertEquals((-68.5776374597), line0.y2, 0.01);
      assertEquals((-68.5776374597), line0.x2, 0.01);
      assertEquals((-68.5776374597), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Line line0 = new Line(0.0, 0.0, 0.0, 0.0);
      double double0 = line0.x2();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, line0.y1, 0.01);
      assertEquals(0.0, line0.y2, 0.01);
      assertEquals(0.0, line0.x1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Line line0 = new Line();
      line0.setLine(87.44019329012269, 87.44019329012269, 87.44019329012269, 87.44019329012269);
      double double0 = line0.x2();
      assertEquals(87.44019329012269, line0.y1, 0.01);
      assertEquals(87.44019329012269, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Line line0 = new Line(3.4028234663852886E38, (-773.01), (-773.01), 0.0);
      double double0 = line0.x2();
      assertEquals((-773.01), line0.y1, 0.01);
      assertEquals(0.0, line0.y2, 0.01);
      assertEquals(3.4028234663852886E38, line0.x1, 0.01);
      assertEquals((-773.01), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Line line0 = new Line(0.0, 0.0, 0.0, 0.0);
      double double0 = line0.x1();
      assertEquals(0.0, line0.x2, 0.01);
      assertEquals(0.0, line0.y2, 0.01);
      assertEquals(0.0, line0.y1, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Line line0 = new Line((-68.5776374597), (-68.5776374597), (-68.5776374597), (-68.5776374597));
      line0.setLine(1.0, (-433.86), (-433.86), 1.0);
      double double0 = line0.x1();
      assertEquals(1.0, line0.y2, 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Line line0 = new Line(0.0, 0.0, 0.0, 0.0);
      line0.setLine((-112.486), (-1305.4585156266), 0.0, 0.0);
      double double0 = line0.x1();
      assertEquals((-1305.4585156266), line0.y1, 0.01);
      assertEquals((-112.486), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.setLine((XY) null, (XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Point point0 = rectangle0.min();
      Line line0 = null;
      try {
        line0 = new Line(point0, (XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Line line0 = new Line();
      Vector vector0 = new Vector(0.0, 0.0);
      line0.setLine((XY) vector0, (XY) vector0);
      assertEquals(0.0, line0.x2, 0.01);
      assertEquals(0.0, line0.y2, 0.01);
      assertEquals(0.0, line0.x1, 0.01);
      assertEquals(0.0, line0.y1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Line line0 = new Line(3.4028234663852886E38, (-773.01), (-773.01), 0.0);
      line0.setLine((-773.01), 2807.8771, 0.0, 443.61747581727);
      double double0 = line0.y2();
      assertEquals((-773.01), line0.x1, 0.01);
      assertEquals(443.61747581727, double0, 0.01);
  }
}
