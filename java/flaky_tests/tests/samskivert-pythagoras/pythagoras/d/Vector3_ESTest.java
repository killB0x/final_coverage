/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:51:20 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.DoubleBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.IVector3;
import pythagoras.d.Vector3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector3_ESTest extends Vector3_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = vector3_0.multLocal((-1.1579207543382391E77));
      Vector3 vector3_2 = vector3_1.mult((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_1.mult((-1.1579207543382391E77));
      vector3_3.lerp((IVector3) vector3_1, 1.797692277655609E308, vector3_1);
      Vector3 vector3_4 = vector3_1.addLocal((IVector3) vector3_0);
      vector3_3.hashCode();
      Vector3 vector3_5 = vector3_2.multLocal(1190.545123);
      Vector3 vector3_6 = vector3_2.subtractLocal(vector3_5);
      vector3_1.add((IVector3) vector3_5, vector3_6);
      Vector3 vector3_7 = vector3_3.normalize();
      Vector3 vector3_8 = vector3_6.abs();
      vector3_8.y = Double.POSITIVE_INFINITY;
      vector3_5.lerp((IVector3) vector3_7, Double.NaN, vector3_1);
      vector3_6.crossLocal(vector3_1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      vector3_4.set(doubleArray0);
      Vector3 vector3_9 = (Vector3)Vector3.MAX_VALUE;
      vector3_3.addScaled((IVector3) vector3_9, (-243.52469433891));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      vector3_0.toString();
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_2 = new Vector3(vector3_0);
      Vector3 vector3_3 = vector3_1.lerp((IVector3) vector3_2, 33.885120460783, vector3_2);
      Vector3 vector3_4 = vector3_2.lerp((IVector3) vector3_0, (-1.2522115703330516E80), vector3_3);
      Vector3 vector3_5 = vector3_2.add((IVector3) vector3_3, vector3_4);
      Vector3 vector3_6 = vector3_5.addScaledLocal(vector3_3, 6.272135267503868E160);
      Vector3 vector3_7 = vector3_2.add((-1.0), 1.2544270535007735E161, 1.2544270535007735E161, vector3_3);
      Vector3 vector3_8 = vector3_7.normalizeLocal();
      vector3_7.cross((IVector3) vector3_3, vector3_8);
      Vector3 vector3_9 = vector3_7.add((-1.0), 0.0, 0.0);
      Vector3 vector3_10 = vector3_9.mult((-1.0));
      Vector3 vector3_11 = vector3_10.abs();
      vector3_10.addLocal((-1.0), 0.0, (-1.0));
      Vector3 vector3_12 = vector3_5.multLocal(1312.812290130281);
      vector3_3.addScaled((IVector3) vector3_12, 0.0, vector3_8);
      vector3_5.length();
      vector3_3.addScaled((IVector3) vector3_7, 5071.51140390053);
      vector3_6.length();
      vector3_7.addScaled((IVector3) vector3_9, 1312.812290130281, vector3_11);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.abs();
      Vector3 vector3_2 = vector3_1.addLocal(0.0, 0.0, 0.0);
      vector3_1.distanceSquared(vector3_2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.manhattanDistance((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.lerpLocal((IVector3) null, 2071.85086761862);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_1.addLocal(1.1579207543382391E77, 1.1579207543382391E77, (-1149.2858629709));
      Vector3 vector3_3 = vector3_2.negate(vector3_1);
      Vector3 vector3_4 = vector3_2.mult((IVector3) vector3_1, vector3_1);
      Vector3 vector3_5 = vector3_2.normalize(vector3_3);
      Vector3 vector3_6 = vector3_2.add(1.1579207543382391E77, (-1071.995252085674), (-1071.995252085674), vector3_1);
      Vector3 vector3_7 = vector3_3.subtract((IVector3) vector3_6);
      Vector3 vector3_8 = vector3_2.addLocal((IVector3) vector3_3);
      vector3_8.mult((IVector3) vector3_5, vector3_6);
      Vector3 vector3_9 = vector3_5.addScaledLocal(vector3_6, Double.POSITIVE_INFINITY);
      vector3_4.multLocal((IVector3) vector3_9);
      vector3_7.abs(vector3_6);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.normalize((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      // Undeclared exception!
      try { 
        vector3_0.cross((IVector3) vector3_1, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_2 = new Vector3();
      Vector3 vector3_3 = vector3_0.add((IVector3) vector3_1, vector3_2);
      Vector3 vector3_4 = vector3_3.cross((IVector3) vector3_0);
      vector3_3.length();
      vector3_2.mult((IVector3) vector3_0);
      Vector3 vector3_5 = vector3_2.cross((IVector3) vector3_1);
      Vector3 vector3_6 = vector3_3.cross((IVector3) vector3_0, vector3_5);
      Vector3 vector3_7 = new Vector3(vector3_4);
      vector3_5.addScaledLocal(vector3_6, (-923.35));
      vector3_5.normalize(vector3_7);
      vector3_5.length();
      Vector3 vector3_8 = vector3_7.addScaled((IVector3) vector3_4, (-3450.6609), vector3_5);
      Vector3 vector3_9 = vector3_7.normalizeLocal();
      vector3_9.mult((IVector3) vector3_3);
      vector3_2.add((-1.0), 0.0, 2043.0);
      vector3_8.subtractLocal(vector3_3);
      // Undeclared exception!
      try { 
        DoubleBuffer.allocate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-1 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.abs((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      vector3_0.distanceSquared(vector3_1);
      Vector3 vector3_2 = new Vector3();
      Vector3 vector3_3 = vector3_2.multLocal((IVector3) vector3_1);
      Vector3 vector3_4 = vector3_2.mult(3.4737622630147174E77);
      Vector3 vector3_5 = vector3_4.abs(vector3_3);
      vector3_2.multLocal((-2326.987610219664));
      Vector3 vector3_6 = vector3_2.normalize();
      Vector3 vector3_7 = vector3_2.add(0.0, 0.0, -0.0, vector3_4);
      vector3_7.mult((IVector3) vector3_0);
      vector3_5.toString();
      Vector3 vector3_8 = (Vector3)Vector3.UNIT_XYZ;
      vector3_5.manhattanDistance(vector3_8);
      vector3_7.multLocal(-0.0);
      vector3_6.lengthSquared();
      vector3_7.abs();
      vector3_5.lerp((IVector3) vector3_7, 681.607290053, vector3_3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.subtract((IVector3) null, vector3_1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_2 = vector3_0.addScaledLocal(vector3_1, (-1685.727277));
      Vector3 vector3_3 = vector3_2.normalizeLocal();
      vector3_0.toString();
      vector3_2.lerp((IVector3) vector3_3, 0.0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.cross((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.add((IVector3) null, vector3_1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.distanceSquared((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.subtract((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-2557.1181035564);
      Vector3 vector3_0 = new Vector3(doubleArray0);
      Vector3 vector3_1 = new Vector3(0.0, 0.0, 4950.83830994166);
      vector3_1.normalize();
      Vector3 vector3_2 = vector3_0.normalizeLocal();
      vector3_1.z();
      vector3_0.length();
      Object object0 = new Object();
      vector3_2.subtract((IVector3) vector3_0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.addScaled((IVector3) null, 1010.0, vector3_1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.mult((-1047.6478), (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.subtractLocal((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.multLocal((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = new Vector3();
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_XYZ;
      vector3_2.x();
      vector3_1.length();
      vector3_1.negate(vector3_2);
      // Undeclared exception!
      try { 
        vector3_0.get((-4707));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -4707
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(vector3_0);
      // Undeclared exception!
      try { 
        vector3_0.lerp((IVector3) vector3_1, 0.0, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Vector3 vector3_1 = new Vector3(4950.83830994166, (-825.617344060202), (-825.617344060202));
      Vector3 vector3_2 = vector3_0.subtractLocal(vector3_1);
      Vector3 vector3_3 = vector3_1.mult((IVector3) vector3_0);
      Vector3 vector3_4 = vector3_3.lerp((IVector3) vector3_0, 1018.28354917);
      Vector3 vector3_5 = vector3_1.abs(vector3_2);
      vector3_2.manhattanDistance(vector3_1);
      Vector3 vector3_6 = vector3_1.mult((IVector3) vector3_0);
      Vector3 vector3_7 = vector3_4.addScaledLocal(vector3_2, 0.0);
      Vector3 vector3_8 = vector3_6.crossLocal(vector3_2);
      vector3_1.triple(vector3_7, vector3_8);
      vector3_4.multLocal((IVector3) vector3_5);
      vector3_7.crossLocal(vector3_1);
      Vector3 vector3_9 = vector3_6.negateLocal();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-825.617344060202);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 825.617344060202;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 2.3611250796066788E10;
      doubleArray0[5] = (-2.3611250796066788E10);
      Vector3 vector3_10 = new Vector3(doubleArray0);
      Vector3 vector3_11 = vector3_2.subtract((IVector3) vector3_3, vector3_10);
      Vector3 vector3_12 = vector3_11.addLocal(1.04736650913564352E17, 3302.469376240808, (-681643.9988130219));
      Vector3 vector3_13 = vector3_12.set((IVector3) vector3_4);
      vector3_6.crossLocal(vector3_0);
      vector3_9.multLocal((-1685.31448));
      vector3_3.add(0.0, 77.853605919226, 0.0);
      vector3_13.lengthSquared();
      vector3_4.cross((IVector3) vector3_10, vector3_2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3();
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_XYZ;
      vector3_1.z = (-2557.1181035564);
      vector3_1.x();
      vector3_0.equals(vector3_1);
      vector3_0.length();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.add((-1.0), (-1.0), (-1.0), (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector3 vector3_0 = new Vector3((-4996.991), (-2510.791910005735), 1.0);
      Vector3 vector3_1 = new Vector3((-4996.991), (-77.0), (-3123.556736));
      vector3_0.addScaledLocal(vector3_1, 1.0);
      vector3_0.set((-4996.991), (-2510.791910005735), (-1324.236));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_1.subtract((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_1.addScaled((IVector3) vector3_0, (-3546.056013));
      vector3_3.add((IVector3) vector3_2);
      vector3_3.negate();
      // Undeclared exception!
      try { 
        vector3_3.get((-3380));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -3380
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-208.9913);
      doubleArray0[1] = (-684.8);
      doubleArray0[2] = (-5.9985356443476185E41);
      doubleArray0[3] = 1893.7653045711668;
      doubleArray0[4] = 2583.47196955834;
      doubleArray0[5] = (-1208.06857635);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 2282.5700366414;
      doubleArray0[8] = 283.0;
      vector3_0.set(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      // Undeclared exception!
      try { 
        vector3_0.mult((IVector3) vector3_1, (Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_2 = new Vector3(vector3_1);
      Vector3 vector3_3 = vector3_0.add((IVector3) vector3_1, vector3_2);
      Vector3 vector3_4 = vector3_2.normalizeLocal();
      Vector3 vector3_5 = vector3_3.negate();
      vector3_5.negate(vector3_2);
      Vector3 vector3_6 = vector3_5.multLocal((IVector3) vector3_1);
      vector3_3.distanceSquared(vector3_0);
      Vector3 vector3_7 = (Vector3)Vector3.UNIT_Y;
      vector3_3.manhattanDistance(vector3_7);
      Vector3 vector3_8 = vector3_5.normalizeLocal();
      vector3_3.normalize();
      vector3_2.cross((IVector3) vector3_5);
      Vector3 vector3_9 = vector3_5.add((IVector3) vector3_6, vector3_6);
      vector3_3.addLocal((IVector3) vector3_2);
      vector3_6.toString();
      vector3_9.add(Double.NaN, (-3.4028234663852886E38), 1446.01855959941, vector3_8);
      Vector3 vector3_10 = (Vector3)Vector3.ZERO;
      vector3_9.subtract((IVector3) vector3_10, vector3_5);
      vector3_4.mult(Double.NaN, vector3_8);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.set((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_1 = vector3_0.addLocal((-226.80669778148), (-226.80669778148), (-1520.1259357));
      Vector3 vector3_2 = vector3_1.addLocal((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_1.lerp((IVector3) vector3_0, 1.0);
      Vector3 vector3_4 = vector3_1.addLocal((IVector3) vector3_0);
      Vector3 vector3_5 = vector3_3.abs(vector3_4);
      Vector3 vector3_6 = vector3_1.addScaledLocal(vector3_0, 6.805646932770577E38);
      vector3_4.x = 2.0690880823443417E42;
      Vector3 vector3_7 = vector3_3.normalize(vector3_6);
      Vector3 vector3_8 = vector3_7.multLocal((IVector3) vector3_3);
      Vector3 vector3_9 = vector3_6.add((IVector3) vector3_3, vector3_7);
      vector3_9.add((IVector3) vector3_3);
      vector3_1.lengthSquared();
      Vector3 vector3_10 = vector3_7.subtract((IVector3) vector3_6);
      Vector3 vector3_11 = new Vector3();
      vector3_4.equals(vector3_11);
      Vector3 vector3_12 = vector3_4.multLocal((IVector3) vector3_3);
      vector3_11.abs(vector3_5);
      Vector3 vector3_13 = vector3_12.cross((IVector3) vector3_11, vector3_11);
      vector3_12.crossLocal(vector3_10);
      vector3_3.addScaled((IVector3) vector3_4, (-453.61339556296), vector3_8);
      Vector3 vector3_14 = vector3_10.subtract((IVector3) vector3_13, vector3_7);
      Vector3 vector3_15 = vector3_1.mult((IVector3) vector3_3);
      vector3_15.x = 0.0;
      Vector3 vector3_16 = (Vector3)Vector3.UNIT_XYZ;
      vector3_10.distanceSquared(vector3_16);
      vector3_6.distanceSquared(vector3_2);
      vector3_11.addLocal((-226.80669778148), 0.0, (-1520.1259357));
      Vector3 vector3_17 = new Vector3((-5.9985356443476185E41), 0.0, (-1520.1259357));
      vector3_3.lerp((IVector3) vector3_17, (-3040.2518714), vector3_14);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_0.mult((IVector3) vector3_1, vector3_1);
      vector3_2.negate();
      vector3_1.addScaled((IVector3) vector3_2, -0.0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      vector3_1.x();
      Object object0 = new Object();
      vector3_0.equals(object0);
      vector3_0.z();
      vector3_0.get(0);
      Vector3 vector3_2 = vector3_0.add((IVector3) vector3_1);
      vector3_0.add((IVector3) vector3_2, vector3_2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.addScaledLocal((IVector3) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = vector3_0.normalize();
      Vector3 vector3_2 = vector3_1.absLocal();
      Vector3 vector3_3 = vector3_1.addLocal((-4668.266053603067), (-4668.843403872257), (-998.53262721));
      Vector3 vector3_4 = vector3_2.cross((IVector3) vector3_1);
      Vector3 vector3_5 = vector3_1.cross((IVector3) vector3_0);
      Vector3 vector3_6 = vector3_4.addLocal((IVector3) vector3_4);
      Vector3 vector3_7 = vector3_1.addScaled((IVector3) vector3_0, 1.1547005383792517, vector3_4);
      Vector3 vector3_8 = new Vector3();
      Vector3 vector3_9 = vector3_7.addScaled((IVector3) vector3_8, (-3.4028234663852886E38), vector3_5);
      Vector3 vector3_10 = vector3_4.normalize();
      Vector3 vector3_11 = vector3_10.set((IVector3) vector3_4);
      vector3_11.mult((IVector3) vector3_0, vector3_2);
      Vector3 vector3_12 = vector3_10.subtractLocal(vector3_4);
      Vector3 vector3_13 = vector3_12.addScaled((IVector3) vector3_10, (-997.9552769408103));
      vector3_1.hashCode();
      vector3_2.toString();
      Vector3 vector3_14 = vector3_10.abs(vector3_4);
      Vector3 vector3_15 = vector3_11.abs();
      Vector3 vector3_16 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_17 = vector3_14.mult((IVector3) vector3_16, vector3_6);
      vector3_6.subtract((IVector3) vector3_3, vector3_3);
      vector3_8.subtract((IVector3) vector3_5, vector3_13);
      Vector3 vector3_18 = vector3_17.multLocal((IVector3) vector3_15);
      vector3_8.abs();
      vector3_9.cross((IVector3) vector3_18);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      vector3_0.toString();
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_2 = new Vector3();
      Vector3 vector3_3 = vector3_1.normalize(vector3_2);
      vector3_3.mult((-337.853078003), vector3_2);
      Vector3 vector3_4 = vector3_3.add((-390.1191310631514), (-267.0595655315757), (-72.0), vector3_2);
      Vector3 vector3_5 = vector3_2.addScaled((IVector3) vector3_1, (-615.3545163984849), vector3_3);
      vector3_5.distance(vector3_3);
      Vector3 vector3_6 = vector3_4.addLocal(1.1579207543382391E77, 2638.0864744681244, 2022.7319580696394);
      vector3_5.triple(vector3_2, vector3_1);
      Vector3 vector3_7 = vector3_2.mult((IVector3) vector3_6, vector3_5);
      vector3_7.abs();
      vector3_5.abs();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      double double0 = 6.805646932770577E38;
      Vector3 vector3_1 = new Vector3(0.0, 6.805646932770577E38, (-2557.1181035564));
      vector3_0.equals(vector3_1);
      Vector3 vector3_2 = new Vector3(1181.061258799851, 899.515579, 1318.0);
      vector3_0.x();
      vector3_2.z();
      // Undeclared exception!
      try { 
        vector3_1.get(226);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 226
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_X;
      vector3_1.equals(vector3_2);
      vector3_0.length();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Object object0 = new Object();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      vector3_0.triple(vector3_1, vector3_1);
      Vector3 vector3_2 = vector3_1.lerpLocal(vector3_0, 0.0);
      Vector3 vector3_3 = vector3_2.subtractLocal(vector3_1);
      vector3_1.lerp((IVector3) vector3_2, 0.0, vector3_0);
      vector3_2.add(1018.28354917, 1018.28354917, 0.0, vector3_3);
      Vector3 vector3_4 = (Vector3)Vector3.UNIT_XYZ;
      vector3_1.x();
      vector3_3.equals(vector3_2);
      vector3_1.z();
      vector3_1.get(0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.mult((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-2557.1181035564);
      Vector3 vector3_0 = new Vector3(doubleArray0);
      Vector3 vector3_1 = new Vector3(0.0, 0.0, 4950.83830994166);
      vector3_0.normalizeLocal();
      vector3_1.z();
      vector3_0.length();
      Object object1 = new Object();
      vector3_0.equals(object1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.multLocal((-3650.1879272775554));
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_3 = vector3_0.lerpLocal(vector3_2, (-337.853078003));
      Vector3 vector3_4 = new Vector3(vector3_0);
      Vector3 vector3_5 = vector3_4.lerp((IVector3) vector3_0, 0.0, vector3_0);
      Vector3 vector3_6 = vector3_4.subtract((IVector3) vector3_2, vector3_3);
      vector3_6.add((IVector3) vector3_5);
      Vector3 vector3_7 = vector3_5.negate();
      vector3_5.lerp((IVector3) vector3_3, 338.853078003);
      Vector3 vector3_8 = vector3_0.mult((IVector3) vector3_4);
      vector3_8.subtractLocal(vector3_2);
      vector3_8.toString();
      Vector3 vector3_9 = vector3_0.add((IVector3) vector3_3);
      vector3_7.lerp((IVector3) vector3_8, (-288.726819328806), vector3_3);
      vector3_8.multLocal((-338.853078003));
      vector3_9.hashCode();
      Vector3 vector3_10 = vector3_4.lerp((IVector3) vector3_2, 3525.958100617499, vector3_7);
      Vector3 vector3_11 = vector3_9.mult((IVector3) vector3_0);
      vector3_5.addLocal((-3.879242741986316E7), (-337.853078003), (-2365.91255976082));
      vector3_6.hashCode();
      vector3_9.multLocal((IVector3) vector3_10);
      Vector3 vector3_12 = (Vector3)Vector3.UNIT_X;
      vector3_11.mult((IVector3) vector3_12);
      vector3_3.cross((IVector3) vector3_11, vector3_1);
      Vector3 vector3_13 = (Vector3)Vector3.UNIT_Z;
      vector3_0.addScaled((IVector3) vector3_13, (-338.853078003), vector3_10);
      vector3_1.mult((IVector3) vector3_6, vector3_9);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_1 = new Vector3((-3.4028234663852886E38), (-3.4028234663852886E38), (-3.4028234663852886E38));
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      vector3_1.triple(vector3_0, vector3_2);
      Vector3 vector3_3 = vector3_1.lerpLocal(vector3_2, (-3.4028234663852886E38));
      Vector3 vector3_4 = vector3_1.subtractLocal(vector3_0);
      Vector3 vector3_5 = (Vector3)Vector3.UNIT_XYZ;
      vector3_3.x();
      vector3_4.z();
      vector3_1.get(0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      Object object0 = new Object();
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_XYZ;
      vector3_1.triple(vector3_2, vector3_0);
      Vector3 vector3_3 = vector3_0.lerpLocal(vector3_1, 0.5773502691896258);
      Vector3 vector3_4 = vector3_0.subtractLocal(vector3_3);
      Vector3 vector3_5 = (Vector3)Vector3.UNIT_XYZ;
      vector3_4.x();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.5773502691896258;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.5773502691896258;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.5773502691896258;
      Vector3 vector3_6 = new Vector3(doubleArray0);
      vector3_6.z();
      vector3_6.get(0);
      vector3_1.add((IVector3) vector3_3, vector3_4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_2 = vector3_0.addScaled((IVector3) vector3_1, 655.4061450651405);
      Vector3 vector3_3 = vector3_2.abs();
      vector3_2.toString();
      vector3_3.manhattanDistance(vector3_0);
      Vector3 vector3_4 = vector3_2.cross((IVector3) vector3_0, vector3_3);
      Vector3 vector3_5 = vector3_3.absLocal();
      vector3_4.y = (-337.853078003);
      Vector3 vector3_6 = vector3_4.crossLocal(vector3_3);
      vector3_2.distance(vector3_0);
      Vector3 vector3_7 = vector3_4.add((IVector3) vector3_1);
      vector3_4.add((IVector3) vector3_7);
      Vector3 vector3_8 = vector3_5.set((IVector3) vector3_1);
      Vector3 vector3_9 = vector3_8.negateLocal();
      vector3_4.add(1.0, 0.0, -0.0);
      Vector3 vector3_10 = vector3_5.mult((IVector3) vector3_6, vector3_9);
      vector3_10.cross((IVector3) vector3_9);
      vector3_6.negate(vector3_3);
      Vector3 vector3_11 = (Vector3)Vector3.MAX_VALUE;
      vector3_5.lerp((IVector3) vector3_11, 1.0, vector3_4);
      vector3_5.cross((IVector3) vector3_2, vector3_10);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.233634233907166E41;
      doubleArray0[2] = (-337.853078003);
      Vector3 vector3_12 = new Vector3(doubleArray0);
      vector3_10.equals(vector3_12);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      // Undeclared exception!
      try { 
        vector3_0.addLocal((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.angle((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Object object0 = new Object();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      vector3_0.triple(vector3_1, vector3_1);
      Vector3 vector3_2 = vector3_0.lerpLocal(vector3_1, 0.0);
      vector3_0.subtractLocal(vector3_1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.4028234663852886E38;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3.4028234663852886E38;
      Vector3 vector3_3 = new Vector3(doubleArray0);
      vector3_2.equals(vector3_0);
      vector3_0.z();
      vector3_3.get(0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.length();
      Vector3 vector3_1 = new Vector3(0.0, 0.0, 0.0);
      vector3_0.equals(vector3_1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector3 vector3_0 = new Vector3((-3072.257), (-3.4028234663852886E38), (-3.4028234663852886E38));
      vector3_0.x();
      vector3_0.z();
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_2 = new Vector3(vector3_0);
      vector3_0.mult((IVector3) vector3_1, vector3_2);
      vector3_0.get(0);
      vector3_0.length();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 864.44040385;
      doubleArray0[1] = 4071.61348495505;
      doubleArray0[2] = (-2557.1181035564);
      doubleArray0[3] = 3.4028234663852886E38;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 2213.51546;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 301.0954486103197;
      doubleArray0[8] = 1956.576269979941;
      Vector3 vector3_0 = new Vector3(doubleArray0);
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_2 = vector3_0.normalize();
      vector3_2.toString();
      Vector3 vector3_3 = vector3_0.addScaled((IVector3) vector3_2, 4071.61348495505, vector3_2);
      Vector3 vector3_4 = vector3_0.mult((IVector3) vector3_1);
      Vector3 vector3_5 = vector3_0.set((IVector3) vector3_4);
      vector3_0.abs(vector3_5);
      vector3_2.abs();
      vector3_3.cross((IVector3) vector3_0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.get(2);
      vector3_0.normalize();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.set((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Object object0 = new Object();
      vector3_0.equals(object0);
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      vector3_0.addLocal((IVector3) vector3_1);
      vector3_0.hashCode();
      Vector3 vector3_2 = new Vector3((-1.0), (-1.0), (-3.4028234663852886E38));
      vector3_2.mult(2.0, vector3_0);
      Vector3 vector3_3 = new Vector3((-1.0), 1420.56222414, 2.0);
      vector3_2.x();
      vector3_2.z();
      Vector3 vector3_4 = (Vector3)Vector3.UNIT_Y;
      vector3_1.get(0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(0.0, 0.0, (-765.78504517));
      Vector3 vector3_2 = vector3_1.add((IVector3) vector3_0);
      Vector3 vector3_3 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_4 = new Vector3(3.4028234663852886E38, (-469.43), (-2557.1181035564));
      vector3_1.triple(vector3_2, vector3_4);
      Vector3 vector3_5 = vector3_1.lerpLocal(vector3_2, 0.0);
      vector3_5.subtractLocal(vector3_2);
      vector3_1.subtractLocal(vector3_3);
      Vector3 vector3_6 = new Vector3((-469.43), 3.4028234663852886E38, (-3.4028234663852886E38));
      vector3_0.x();
      vector3_0.z();
      Vector3 vector3_7 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_8 = new Vector3(vector3_2);
      vector3_1.multLocal((-1954.0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      Object object0 = new Object();
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_Z;
      vector3_1.equals(vector3_2);
      Vector3 vector3_3 = new Vector3((-1143.0146109401699), 4950.83830994166, 2642.39);
      vector3_1.x();
      vector3_1.z();
      vector3_3.get(0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Object object0 = new Object();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3.0);
      doubleArray0[1] = (-2557.1181035564);
      doubleArray0[2] = (-3.0);
      doubleArray0[3] = (-3.0);
      Vector3 vector3_1 = new Vector3(doubleArray0);
      Vector3 vector3_2 = new Vector3((-3.0), (-3.0), 4950.83830994166);
      vector3_2.equals(vector3_0);
      Vector3 vector3_3 = new Vector3(vector3_0);
      vector3_2.x();
      vector3_0.z();
      Vector3 vector3_4 = new Vector3(doubleArray0);
      // Undeclared exception!
      try { 
        vector3_4.get((-2779));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2779
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Object object0 = new Object();
      vector3_0.equals(object0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.4028234663852886E38;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3.4028234663852886E38;
      doubleArray0[3] = 3.4028234663852886E38;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 3.4028234663852886E38;
      doubleArray0[6] = (-1.0);
      Vector3 vector3_1 = new Vector3(doubleArray0);
      Vector3 vector3_2 = vector3_1.abs();
      Vector3 vector3_3 = vector3_1.addScaled((IVector3) vector3_2, (-1.0), vector3_0);
      vector3_0.angle(vector3_3);
      vector3_3.get(0);
      vector3_3.addScaledLocal(vector3_1, 1.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Object object0 = new Object();
      vector3_0.equals(object0);
      Vector3 vector3_1 = new Vector3(3.4028234663852886E38, (-1.0), 1.0);
      vector3_0.mult((IVector3) vector3_1, vector3_1);
      vector3_0.x();
      vector3_1.z();
      // Undeclared exception!
      try { 
        vector3_0.get((-160));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -160
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.negate((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_2 = vector3_0.crossLocal(vector3_1);
      Vector3 vector3_3 = null;
      // Undeclared exception!
      try { 
        vector3_2.negate((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector3 vector3_0 = new Vector3((-443.4220910401543), 707.54696, (-443.4220910401543));
      Vector3 vector3_1 = vector3_0.add(0.0, (-443.4220910401543), 707.54696);
      Vector3 vector3_2 = vector3_1.cross((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_1.add(1022.1711635589795, (-1127.30396), 0.0, vector3_0);
      vector3_1.mult((-256630.1239238474), vector3_3);
      Vector3 vector3_4 = vector3_1.negate(vector3_3);
      vector3_4.hashCode();
      Vector3 vector3_5 = vector3_3.abs();
      vector3_0.cross((IVector3) vector3_2, vector3_4);
      vector3_1.multLocal((IVector3) vector3_5);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Object object0 = new Object();
      vector3_0.equals(object0);
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      vector3_0.addLocal((IVector3) vector3_1);
      vector3_0.hashCode();
      Vector3 vector3_2 = new Vector3((-1.0), (-1.0), (-3.4028234663852886E38));
      vector3_2.mult(6.805646932770577E38, vector3_0);
      vector3_2.x();
      vector3_2.z();
      vector3_2.get(0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Object object0 = new Object();
      vector3_0.equals(object0);
      Vector3 vector3_1 = new Vector3((-1.0), (-1.0), (-3.4028234663852886E38));
      vector3_1.x();
      vector3_1.z();
      vector3_1.get(0);
      Vector3 vector3_2 = vector3_1.subtract((IVector3) vector3_0, vector3_0);
      vector3_2.addScaled((IVector3) vector3_0, 1.0, vector3_0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_1 = vector3_0.normalize();
      Vector3 vector3_2 = vector3_1.add(848.05615926455, 848.05615926455, 0.0);
      Vector3 vector3_3 = vector3_2.add(0.0, 1.0, 0.6689376420087201);
      Vector3 vector3_4 = new Vector3(1.0, 0.0, (-2994.91867));
      vector3_1.dot(vector3_4);
      Vector3 vector3_5 = vector3_1.addScaledLocal(vector3_2, (-763.000298465));
      vector3_5.length();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      Vector3 vector3_6 = vector3_3.set(doubleArray0);
      vector3_6.abs();
      vector3_5.manhattanDistance(vector3_2);
      vector3_4.get(0);
      vector3_1.add((IVector3) vector3_2);
      vector3_1.negate();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_2 = vector3_0.add((IVector3) vector3_1);
      Vector3 vector3_3 = (Vector3)Vector3.UNIT_XYZ;
      vector3_2.triple(vector3_1, vector3_3);
      Vector3 vector3_4 = vector3_2.lerpLocal(vector3_3, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 866.74557177445;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 1166.27248857656;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.5773502691896258;
      doubleArray0[7] = 0.5773502691896258;
      DoubleBuffer.wrap(doubleArray0);
      vector3_3.angle(vector3_4);
      Vector3 vector3_5 = new Vector3(doubleArray0);
      vector3_5.addScaled((IVector3) vector3_0, 739.183848951);
      Vector3 vector3_6 = new Vector3(doubleArray0);
      Vector3 vector3_7 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_8 = (Vector3)Vector3.ZERO;
      vector3_7.triple(vector3_8, vector3_5);
      Vector3 vector3_9 = vector3_4.absLocal();
      vector3_9.distance(vector3_5);
      vector3_4.multLocal(0.0);
      vector3_4.hashCode();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Object object0 = new Object();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2557.1181035564);
      doubleArray0[1] = 3.4028234663852886E38;
      doubleArray0[2] = 3.4028234663852886E38;
      doubleArray0[3] = 3.4028234663852886E38;
      doubleArray0[4] = 3.4028234663852886E38;
      doubleArray0[5] = 3.4028234663852886E38;
      Vector3 vector3_1 = new Vector3(doubleArray0);
      vector3_1.equals(vector3_0);
      Vector3 vector3_2 = new Vector3(3.4028234663852886E38, 3.4028234663852886E38, (-1.0));
      vector3_1.x();
      vector3_0.z();
      vector3_0.get(0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Object object0 = new Object();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      vector3_0.triple(vector3_1, vector3_1);
      Vector3 vector3_2 = vector3_0.lerpLocal(vector3_1, 0.0);
      vector3_1.subtractLocal(vector3_2);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3.4028234663852886E38);
      doubleArray0[2] = (-3.4028234663852886E38);
      Vector3 vector3_3 = new Vector3(3.4028234663852886E38, (-3.4028234663852886E38), (-3.4028234663852886E38));
      vector3_0.equals(vector3_3);
      vector3_3.z();
      vector3_1.get(0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.length();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      vector3_0.equals(vector3_1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      vector3_0.equals(vector3_1);
      // Undeclared exception!
      try { 
        vector3_0.get(1067);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1067
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      vector3_0.add((IVector3) vector3_1);
      Vector3 vector3_2 = vector3_1.add(1957.21685950185, 0.0, 0.0);
      Vector3 vector3_3 = vector3_2.add((-1.0), 1.0, 1860.8938233);
      Vector3 vector3_4 = new Vector3(1957.7942097710395, 86.4, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1610.30390586;
      doubleArray0[3] = 1.5773502691896257;
      doubleArray0[4] = 0.5773502691896258;
      doubleArray0[5] = (-1.0);
      Vector3 vector3_5 = new Vector3(doubleArray0);
      vector3_5.dot(vector3_0);
      vector3_4.addScaledLocal(vector3_5, 6599.2331238414);
      vector3_0.length();
      Vector3 vector3_6 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_7 = vector3_6.set(doubleArray0);
      vector3_7.abs();
      vector3_7.manhattanDistance(vector3_2);
      vector3_3.get(0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_1 = vector3_0.normalize();
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_XYZ;
      vector3_1.triple(vector3_0, vector3_2);
      Vector3 vector3_3 = vector3_1.lerpLocal(vector3_2, 0.0);
      vector3_1.subtractLocal(vector3_2);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 866.74557177445;
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      DoubleBuffer doubleBuffer1 = vector3_1.get(doubleBuffer0);
      // Undeclared exception!
      try { 
        vector3_3.get(doubleBuffer1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector3 vector3_0 = new Vector3((-998.56336074), (-998.56336074), 1.0);
      Vector3 vector3_1 = new Vector3(vector3_0);
      vector3_1.distance(vector3_0);
      vector3_0.angle(vector3_1);
      vector3_0.length();
      vector3_0.abs();
      Vector3 vector3_2 = vector3_1.abs(vector3_0);
      vector3_2.lerpLocal(vector3_1, 0.0);
      Vector3 vector3_3 = (Vector3)Vector3.UNIT_Y;
      vector3_2.addScaledLocal(vector3_3, 0.0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      vector3_0.hashCode();
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_2 = vector3_1.lerpLocal(vector3_0, 328.68685414);
      Vector3 vector3_3 = vector3_2.subtract((IVector3) vector3_1);
      Vector3 vector3_4 = vector3_3.subtractLocal(vector3_2);
      Vector3 vector3_5 = (Vector3)Vector3.ZERO;
      Vector3 vector3_6 = vector3_2.lerpLocal(vector3_0, 954.34201092416);
      Vector3 vector3_7 = vector3_3.subtract((IVector3) vector3_5, vector3_2);
      Vector3 vector3_8 = vector3_4.add((IVector3) vector3_5, vector3_3);
      vector3_8.x = (-1.1150605168935651E41);
      vector3_2.absLocal();
      Vector3 vector3_9 = vector3_7.subtract((IVector3) vector3_8, vector3_4);
      Vector3 vector3_10 = vector3_9.negate();
      vector3_4.dot(vector3_6);
      vector3_2.multLocal((IVector3) vector3_0);
      vector3_10.mult((IVector3) vector3_7);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_2 = vector3_0.subtract((IVector3) vector3_1);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        vector3_2.get((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_1 = vector3_0.normalize();
      Vector3 vector3_2 = vector3_1.add(848.05615926455, 848.05615926455, 0.0);
      Vector3 vector3_3 = vector3_2.add(0.0, 1.0, (-1.0));
      Vector3 vector3_4 = new Vector3(1.0, 0.0, (-2994.91867));
      vector3_1.dot(vector3_4);
      Vector3 vector3_5 = vector3_1.addScaledLocal(vector3_2, (-763.000298465));
      vector3_5.length();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      Vector3 vector3_6 = vector3_3.set(doubleArray0);
      vector3_6.abs();
      vector3_5.manhattanDistance(vector3_2);
      vector3_4.get(0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = vector3_0.normalize();
      Vector3 vector3_2 = vector3_1.absLocal();
      vector3_1.addLocal((-4668.266053603067), (-4668.843403872257), (-998.53262721));
      Vector3 vector3_3 = vector3_2.cross((IVector3) vector3_1);
      Vector3 vector3_4 = vector3_1.cross((IVector3) vector3_0);
      Vector3 vector3_5 = vector3_2.abs(vector3_1);
      Vector3 vector3_6 = vector3_5.addLocal((IVector3) vector3_3);
      Vector3 vector3_7 = vector3_1.addScaled((IVector3) vector3_0, 1.1547005383792517, vector3_3);
      Vector3 vector3_8 = new Vector3();
      Vector3 vector3_9 = vector3_7.addScaled((IVector3) vector3_8, (-3.4028234663852886E38), vector3_4);
      Vector3 vector3_10 = vector3_5.normalize();
      Vector3 vector3_11 = vector3_10.set((IVector3) vector3_3);
      vector3_11.mult((IVector3) vector3_0, vector3_2);
      Vector3 vector3_12 = vector3_10.subtractLocal(vector3_3);
      Vector3 vector3_13 = vector3_12.addScaled((IVector3) vector3_10, 997.9552769408103);
      vector3_1.hashCode();
      vector3_2.toString();
      Vector3 vector3_14 = vector3_10.absLocal();
      vector3_14.y();
      Vector3 vector3_15 = vector3_10.abs(vector3_3);
      Vector3 vector3_16 = vector3_11.abs();
      Vector3 vector3_17 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_18 = vector3_15.mult((IVector3) vector3_17, vector3_6);
      vector3_6.subtract((IVector3) vector3_14, vector3_14);
      vector3_8.subtract((IVector3) vector3_4, vector3_13);
      Vector3 vector3_19 = vector3_18.multLocal((IVector3) vector3_16);
      vector3_8.abs();
      vector3_9.cross((IVector3) vector3_19);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.set(2217.484126387, 2217.484126387, 2217.484126387);
      double[] doubleArray0 = new double[2];
      Vector3 vector3_2 = vector3_1.add(2217.484126387, (-214.781453295), 0.0, vector3_0);
      vector3_2.addLocal(0.0, 2217.484126387, 0.0);
      vector3_2.abs();
      doubleArray0[0] = 2217.484126387;
      doubleArray0[1] = 4434.968252774;
      // Undeclared exception!
      try { 
        vector3_1.get(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = vector3_0.normalizeLocal();
      Vector3 vector3_2 = vector3_1.negate();
      Vector3 vector3_3 = vector3_1.negateLocal();
      Vector3 vector3_4 = new Vector3(vector3_3);
      vector3_4.crossLocal(vector3_0);
      vector3_2.negate(vector3_4);
      // Undeclared exception!
      try { 
        vector3_1.get((-637));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -637
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.addScaled((IVector3) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = new Vector3();
      Vector3 vector3_3 = vector3_1.cross((IVector3) vector3_0, vector3_2);
      vector3_1.hashCode();
      vector3_3.y();
      vector3_3.x();
      Vector3 vector3_4 = vector3_3.set((IVector3) vector3_2);
      vector3_2.add(1.0, 0.0, 4058.5);
      Vector3 vector3_5 = vector3_1.multLocal((IVector3) vector3_2);
      Vector3 vector3_6 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_7 = vector3_4.mult((IVector3) vector3_6, vector3_3);
      Vector3 vector3_8 = vector3_7.multLocal((-1989.1145492958792));
      vector3_4.add((IVector3) vector3_2);
      vector3_1.set(-0.0, -0.0, 530.57963931);
      vector3_3.cross((IVector3) vector3_1, vector3_4);
      vector3_8.lengthSquared();
      Vector3 vector3_9 = vector3_7.normalize();
      Vector3 vector3_10 = vector3_5.add((IVector3) vector3_9, vector3_9);
      vector3_10.set(0.0, -0.0, -0.0);
      vector3_7.lerp((IVector3) vector3_4, 0.0);
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(0);
      // Undeclared exception!
      try { 
        vector3_8.get(doubleBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector3 vector3_0 = new Vector3((-443.4220910401543), 707.54696, (-443.4220910401543));
      Vector3 vector3_1 = vector3_0.add(0.0, (-443.4220910401543), 707.54696);
      vector3_1.cross((IVector3) vector3_0);
      Vector3 vector3_2 = vector3_1.add(1022.1711635589795, (-1127.30396), 0.0, vector3_0);
      Vector3 vector3_3 = vector3_1.negate(vector3_2);
      Vector3 vector3_4 = (Vector3)Vector3.MIN_VALUE;
      vector3_3.subtractLocal(vector3_4);
      vector3_3.add((IVector3) vector3_1, vector3_2);
      Object object0 = new Object();
      vector3_3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = vector3_0.set(4043.0, 4043.0, 4043.0);
      Vector3 vector3_2 = vector3_1.mult((-472.7419));
      Vector3 vector3_3 = vector3_2.add((IVector3) vector3_1, vector3_1);
      vector3_1.toString();
      vector3_1.addScaled((IVector3) vector3_3, (-1907252.5017));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.add((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = vector3_0.mult(2377.309);
      vector3_1.hashCode();
      vector3_1.z();
      vector3_1.length();
      Vector3 vector3_2 = vector3_1.set((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_2.negate(vector3_1);
      Vector3 vector3_4 = vector3_3.addLocal((IVector3) vector3_1);
      Vector3 vector3_5 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_6 = vector3_3.cross((IVector3) vector3_5, vector3_2);
      Vector3 vector3_7 = vector3_2.crossLocal(vector3_0);
      Vector3 vector3_8 = vector3_2.subtractLocal(vector3_0);
      Vector3 vector3_9 = vector3_7.negateLocal();
      Vector3 vector3_10 = vector3_8.normalizeLocal();
      vector3_10.subtract((IVector3) vector3_6, vector3_9);
      Vector3 vector3_11 = vector3_4.mult(0.0);
      vector3_11.addScaledLocal(vector3_7, 2377.309);
      Vector3 vector3_12 = vector3_7.cross((IVector3) vector3_0, vector3_1);
      Vector3 vector3_13 = vector3_12.subtract((IVector3) vector3_7);
      vector3_7.y();
      vector3_13.y = 2377.309;
      vector3_4.lengthSquared();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        vector3_4.get(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = vector3_0.negateLocal();
      Vector3 vector3_2 = vector3_1.negateLocal();
      vector3_2.distanceSquared(vector3_1);
      Vector3 vector3_3 = vector3_1.cross((IVector3) vector3_0, vector3_2);
      Vector3 vector3_4 = vector3_1.subtract((IVector3) vector3_2);
      vector3_2.z();
      Vector3 vector3_5 = vector3_1.mult((IVector3) vector3_2);
      Vector3 vector3_6 = vector3_5.absLocal();
      Vector3 vector3_7 = vector3_6.lerp((IVector3) vector3_3, 0.0);
      vector3_5.toString();
      Vector3 vector3_8 = vector3_1.absLocal();
      vector3_2.length();
      vector3_5.lengthSquared();
      Vector3 vector3_9 = vector3_7.absLocal();
      Vector3 vector3_10 = (Vector3)Vector3.UNIT_Z;
      vector3_6.subtract((IVector3) vector3_10, vector3_4);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      vector3_9.set(doubleArray0);
      vector3_8.z();
      Vector3 vector3_11 = vector3_9.add(1787.424, 0.0, 0.0);
      vector3_5.set((-3415.978688), 1.0, (-1.0));
      vector3_11.set(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.distance((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      double[] doubleArray0 = new double[3];
      Vector3 vector3_1 = new Vector3();
      Vector3 vector3_2 = vector3_0.mult(0.0, vector3_1);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Vector3 vector3_3 = vector3_0.set(doubleArray0);
      Vector3 vector3_4 = new Vector3(vector3_1);
      vector3_3.lerp((IVector3) vector3_4, (-2186.1688976946), vector3_4);
      Vector3 vector3_5 = vector3_3.abs();
      Vector3 vector3_6 = vector3_5.add((IVector3) vector3_0);
      Vector3 vector3_7 = vector3_6.set(0.0, 0.0, 0.0);
      Vector3 vector3_8 = vector3_1.normalize();
      vector3_8.mult(0.0);
      Vector3 vector3_9 = vector3_3.absLocal();
      vector3_2.angle(vector3_1);
      Vector3 vector3_10 = vector3_1.addScaled((IVector3) vector3_0, 1888.0);
      Vector3 vector3_11 = new Vector3(doubleArray0);
      vector3_9.triple(vector3_11, vector3_10);
      Vector3 vector3_12 = vector3_7.absLocal();
      // Undeclared exception!
      try { 
        vector3_12.distance((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      vector3_0.negate();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = vector3_0.negate();
      Vector3 vector3_2 = vector3_1.set(0.0, (-1893.0), (-1893.0));
      Vector3 vector3_3 = vector3_2.mult((-3011.63));
      Vector3 vector3_4 = vector3_3.absLocal();
      Vector3 vector3_5 = vector3_4.negate();
      Vector3 vector3_6 = vector3_3.addScaledLocal(vector3_0, 0.0);
      Vector3 vector3_7 = vector3_4.negateLocal();
      vector3_4.mult((-5701015.59));
      Vector3 vector3_8 = vector3_1.addScaledLocal(vector3_0, (-2090.1954185824293));
      vector3_3.add((IVector3) vector3_6, vector3_8);
      Vector3 vector3_9 = vector3_4.mult(0.0);
      vector3_4.negate();
      vector3_1.lengthSquared();
      Vector3 vector3_10 = vector3_4.multLocal((IVector3) vector3_5);
      vector3_4.manhattanDistance(vector3_8);
      vector3_1.set((IVector3) vector3_4);
      vector3_9.addScaled((IVector3) vector3_5, 0.0, vector3_7);
      vector3_4.dot(vector3_0);
      vector3_5.distanceSquared(vector3_10);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_1 = vector3_0.absLocal();
      Vector3 vector3_2 = vector3_1.lerp((IVector3) vector3_0, (-1479.4028));
      vector3_1.normalizeLocal();
      vector3_1.manhattanDistance(vector3_2);
      vector3_2.angle(vector3_0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.5773502691896258;
      doubleArray0[1] = 0.5773502691896258;
      doubleArray0[2] = 0.5773502691896258;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.5773502691896258;
      doubleArray0[5] = 0.0;
      Vector3 vector3_3 = new Vector3(doubleArray0);
      vector3_2.subtract((IVector3) vector3_1, vector3_3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.hashCode();
      vector3_0.normalizeLocal();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3(916.4069528528162, 0.0, 916.4069528528162);
      Vector3 vector3_2 = vector3_1.addScaled((IVector3) vector3_0, (-1677.3575813105608), vector3_0);
      Vector3 vector3_3 = vector3_1.cross((IVector3) vector3_2, vector3_2);
      Vector3 vector3_4 = vector3_3.addScaled((IVector3) vector3_2, (-1677.3575813105608), vector3_1);
      Vector3 vector3_5 = vector3_3.negateLocal();
      vector3_0.mult((IVector3) vector3_1);
      vector3_2.crossLocal(vector3_4);
      vector3_2.hashCode();
      vector3_2.distanceSquared(vector3_5);
      // Undeclared exception!
      try { 
        vector3_0.get((DoubleBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      vector3_0.x();
      Vector3 vector3_1 = new Vector3(vector3_0);
      Vector3 vector3_2 = vector3_1.mult(0.0);
      Vector3 vector3_3 = vector3_2.add(1.0, 0.0, 1.0);
      Vector3 vector3_4 = vector3_1.abs();
      Vector3 vector3_5 = vector3_2.set((IVector3) vector3_1);
      Vector3 vector3_6 = new Vector3(vector3_3);
      vector3_5.subtract((IVector3) vector3_6, vector3_3);
      double[] doubleArray0 = new double[0];
      vector3_4.mult((IVector3) vector3_0, vector3_5);
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      doubleBuffer0.duplicate();
      // Undeclared exception!
      try { 
        doubleBuffer0.put(0.0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        vector3_0.get(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = vector3_0.normalize();
      Vector3 vector3_2 = vector3_1.add((-227.35777650747), (-227.35777650747), (-3615.57));
      vector3_1.normalize(vector3_2);
      vector3_1.y();
      double[] doubleArray0 = new double[6];
      vector3_2.z = 0.5773502691896257;
      doubleArray0[0] = 0.5773502691896257;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-227.35777650747);
      doubleArray0[3] = 0.5773502691896257;
      doubleArray0[4] = (-227.35777650747);
      doubleArray0[5] = 0.5773502691896257;
      vector3_2.get(doubleArray0);
      // Undeclared exception!
      try { 
        DoubleBuffer.wrap(doubleArray0, 1361, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DoubleBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_2 = vector3_1.set(2497.916933781636, (-782.633955), 2497.916933781636);
      vector3_2.addScaledLocal(vector3_1, 1473.92396);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Object object0 = new Object();
      vector3_0.equals(object0);
      vector3_0.z();
      vector3_0.abs();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_2 = vector3_0.add((IVector3) vector3_1);
      Vector3 vector3_3 = (Vector3)Vector3.UNIT_XYZ;
      vector3_2.triple(vector3_1, vector3_3);
      Vector3 vector3_4 = vector3_2.lerpLocal(vector3_3, 0.0);
      Vector3 vector3_5 = vector3_4.subtractLocal(vector3_2);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 866.74557177445;
      doubleArray0[1] = 0.0;
      vector3_3.x = (-373.5359791);
      doubleArray0[2] = 0.0;
      vector3_0.get(2);
      Vector3 vector3_6 = new Vector3(1322.81934556, (-1.0), 0.0);
      vector3_3.addScaled((IVector3) vector3_2, 0.5773502691896258, vector3_5);
      vector3_2.negateLocal();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.negateLocal();
      Vector3 vector3_2 = vector3_0.subtract((IVector3) vector3_1);
      vector3_2.get(0);
      vector3_2.length();
      Vector3 vector3_3 = vector3_2.multLocal((IVector3) vector3_1);
      vector3_3.y = -0.0;
      vector3_3.addScaled((IVector3) vector3_2, -0.0, vector3_2);
      Vector3 vector3_4 = new Vector3((-1077.6), (-1.0), 0.0);
      vector3_0.cross((IVector3) vector3_4, vector3_4);
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(0);
      // Undeclared exception!
      try { 
        vector3_2.get(doubleBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector3 vector3_0 = null;
      try {
        vector3_0 = new Vector3((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      vector3_0.triple(vector3_0, vector3_0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      Vector3 vector3_2 = vector3_0.add((IVector3) vector3_1);
      Vector3 vector3_3 = (Vector3)Vector3.UNIT_XYZ;
      vector3_2.triple(vector3_1, vector3_3);
      Vector3 vector3_4 = vector3_2.lerpLocal(vector3_3, 0.0);
      Vector3 vector3_5 = vector3_4.subtractLocal(vector3_2);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 866.74557177445;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1166.27248857656;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      DoubleBuffer doubleBuffer1 = vector3_4.get(doubleBuffer0);
      vector3_5.get(doubleBuffer1);
      vector3_2.subtractLocal(vector3_1);
      Vector3 vector3_6 = null;
      try {
        vector3_6 = new Vector3((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector3 vector3_0 = new Vector3(0.0, 891.0, 1.0);
      vector3_0.toString();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_2 = vector3_0.lerpLocal(vector3_1, (-3086.176731272277));
      vector3_2.abs(vector3_0);
      Vector3 vector3_3 = (Vector3)Vector3.MAX_VALUE;
      vector3_0.subtractLocal(vector3_3);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3.4028234663852886E38);
      doubleArray0[1] = (-3.4028234663852886E38);
      doubleArray0[2] = (-3.4028234663852886E38);
      doubleArray0[3] = (-3.4028234663852886E38);
      doubleArray0[4] = (-3.4028234663852886E38);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3.4028234663852886E38);
      // Undeclared exception!
      try { 
        DoubleBuffer.wrap(doubleArray0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DoubleBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector3 vector3_0 = new Vector3((-601.05), (-601.05), (-601.05));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector3 vector3_0 = new Vector3((-3072.257), (-3.4028234663852886E38), (-3.4028234663852886E38));
      vector3_0.z();
      vector3_0.get(0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      vector3_0.toString();
      Vector3 vector3_1 = new Vector3(vector3_0);
      double double0 = (-160.1783);
      Vector3 vector3_2 = new Vector3(1.0, (-160.1783), 1.0);
      Vector3 vector3_3 = vector3_2.crossLocal(vector3_1);
      Vector3 vector3_4 = vector3_3.lerpLocal(vector3_1, 567.1478866810314);
      vector3_3.crossLocal(vector3_2);
      vector3_3.mult((IVector3) vector3_0);
      Vector3 vector3_5 = vector3_1.add((-1690.6755832563629), (-1690.6755832563629), 53.379726033049, vector3_2);
      Vector3 vector3_6 = vector3_5.normalizeLocal();
      vector3_4.dot(vector3_0);
      Vector3 vector3_7 = vector3_5.addScaled((IVector3) vector3_6, 145.19428680549328, vector3_1);
      vector3_2.get(0);
      vector3_6.lerp((IVector3) vector3_7, (-0.7071396204379222));
      vector3_1.get(0);
      Vector3 vector3_8 = vector3_7.absLocal();
      vector3_8.manhattanDistance(vector3_6);
      vector3_5.negateLocal();
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(0);
      // Undeclared exception!
      try { 
        vector3_6.get(doubleBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      vector3_0.dot(vector3_1);
      Vector3 vector3_2 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_3 = vector3_2.cross((IVector3) vector3_0);
      Vector3 vector3_4 = vector3_3.multLocal(6481.857642);
      vector3_4.set((IVector3) vector3_0);
      vector3_4.lengthSquared();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3.4028234663852886E38);
      doubleArray0[1] = 6481.857642;
      doubleArray0[2] = (-3.4028234663852886E38);
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      vector3_3.get(doubleBuffer0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Vector3 vector3_1 = vector3_0.normalize();
      Vector3 vector3_2 = vector3_1.subtract((IVector3) vector3_0);
      vector3_2.x = Double.NaN;
      Vector3 vector3_3 = vector3_2.subtractLocal(vector3_0);
      Vector3 vector3_4 = vector3_3.subtractLocal(vector3_0);
      Vector3 vector3_5 = vector3_1.crossLocal(vector3_0);
      vector3_2.multLocal(150.25114);
      vector3_5.cross((IVector3) vector3_4, vector3_1);
      // Undeclared exception!
      try { 
        vector3_2.get(1298);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1298
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      vector3_0.x();
      Vector3 vector3_1 = (Vector3)Vector3.MAX_VALUE;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 1.0;
      Vector3 vector3_2 = new Vector3(doubleArray0);
      Vector3 vector3_3 = new Vector3(doubleArray0);
      vector3_2.mult((IVector3) vector3_0, vector3_3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector3 vector3_0 = null;
      try {
        vector3_0 = new Vector3((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Z;
      vector3_0.distanceSquared(vector3_1);
      Vector3 vector3_2 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_3 = vector3_2.addLocal(0.0, 0.0, 0.0);
      vector3_3.lengthSquared();
      vector3_3.y();
      Vector3 vector3_4 = new Vector3(vector3_3);
      vector3_4.add((IVector3) vector3_3);
      vector3_3.abs(vector3_4);
      Vector3 vector3_5 = vector3_3.addLocal(3.4028234663852886E38, 0.0, 3.4028234663852886E38);
      vector3_5.subtractLocal(vector3_2);
      vector3_3.set((-6.805646932770577E38), (-1538.148098), (-6.805646932770577E38));
      vector3_5.normalizeLocal();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      vector3_0.y();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_Y;
      Vector3 vector3_2 = vector3_1.add(3.4028234663852886E38, 0.0, 3.4028234663852886E38);
      Vector3 vector3_3 = new Vector3(vector3_2);
      Vector3 vector3_4 = vector3_2.lerp((IVector3) vector3_3, 0.0, vector3_3);
      vector3_4.mult((IVector3) vector3_2, vector3_2);
      vector3_4.add((IVector3) vector3_3);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.toString();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1904.24083567);
      doubleArray0[2] = 0.0;
      Vector3 vector3_1 = new Vector3(doubleArray0);
      Vector3 vector3_2 = vector3_0.addScaled((IVector3) vector3_1, 0.0);
      Vector3 vector3_3 = vector3_2.addScaled((IVector3) vector3_1, 0.0, vector3_0);
      doubleArray0[3] = 4064.5787123;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      Vector3 vector3_4 = new Vector3(doubleArray0);
      vector3_4.add((IVector3) vector3_1);
      Vector3 vector3_5 = (Vector3)Vector3.UNIT_XYZ;
      vector3_0.lerpLocal(vector3_4, 0.0);
      Vector3 vector3_6 = vector3_4.lerpLocal(vector3_5, (-3144.95));
      Vector3 vector3_7 = vector3_6.lerp((IVector3) vector3_5, (-107.0934));
      vector3_4.abs();
      Vector3 vector3_8 = new Vector3(vector3_4);
      Vector3 vector3_9 = vector3_8.lerp((IVector3) vector3_0, 0.0);
      vector3_9.add((IVector3) vector3_6);
      vector3_0.add((-1904.24083567), 0.0, (-1904.24083567), vector3_8);
      vector3_0.mult((IVector3) vector3_7);
      vector3_9.crossLocal(vector3_4);
      vector3_3.addLocal(0.0, (-3144.95), 0.0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3();
      vector3_0.lerpLocal(vector3_1, 0.0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.toString();
      Vector3 vector3_1 = (Vector3)Vector3.ZERO;
      Vector3 vector3_2 = vector3_0.lerpLocal(vector3_1, (-1472.749881442346));
      Vector3 vector3_3 = vector3_2.add((-1472.749881442346), 0.0, (-1472.749881442346));
      vector3_3.multLocal(0.0);
      vector3_2.set((IVector3) vector3_3);
      Vector3 vector3_4 = vector3_2.cross((IVector3) vector3_0);
      Vector3 vector3_5 = vector3_2.lerpLocal(vector3_4, 0.0);
      vector3_2.lerpLocal(vector3_0, 0.0);
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        vector3_5.get((-154));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -154
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.lerp((IVector3) null, (-3.4028234663852886E38));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Vector3 vector3_1 = new Vector3();
      vector3_0.angle(vector3_1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.normalize();
      vector3_1.lerp((IVector3) vector3_0, 0.0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      vector3_0.negateLocal();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3();
      vector3_0.lerp((IVector3) vector3_1, 0.0, vector3_1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Z;
      Vector3 vector3_1 = vector3_0.absLocal();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 332.0424665389162;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 668.4828;
      Vector3 vector3_2 = new Vector3(doubleArray0);
      Vector3 vector3_3 = vector3_1.addScaled((IVector3) vector3_0, 332.0424665389162, vector3_2);
      Vector3 vector3_4 = vector3_1.add((IVector3) vector3_0);
      Vector3 vector3_5 = vector3_2.normalize(vector3_4);
      Vector3 vector3_6 = vector3_5.add((IVector3) vector3_3, vector3_4);
      Vector3 vector3_7 = vector3_2.negate(vector3_4);
      vector3_1.addScaled((IVector3) vector3_7, (-296.4918));
      Vector3 vector3_8 = vector3_7.lerp((IVector3) vector3_0, 0.0);
      Vector3 vector3_9 = vector3_8.cross((IVector3) vector3_6);
      vector3_9.addLocal(-0.0, 0.0, (-2988.24717));
      vector3_8.set(doubleArray0);
      vector3_6.abs();
      vector3_6.set((IVector3) vector3_4);
      Vector3 vector3_10 = (Vector3)Vector3.MAX_VALUE;
      vector3_3.dot(vector3_10);
      vector3_2.addScaled((IVector3) vector3_10, 668.4828, vector3_6);
      // Undeclared exception!
      try { 
        DoubleBuffer.wrap(doubleArray0, 1250, 1250);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DoubleBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector3 vector3_0 = new Vector3((-3072.257), (-3.4028234663852886E38), (-3.4028234663852886E38));
      vector3_0.x();
      vector3_0.z();
      vector3_0.get(1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.crossLocal((IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.get(1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.get((-130));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -130
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1653.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1050.396183995768;
      doubleArray0[6] = 893.0548;
      doubleArray0[7] = (-322.73);
      Vector3 vector3_0 = new Vector3(doubleArray0);
      Vector3 vector3_1 = vector3_0.normalize();
      Vector3 vector3_2 = vector3_1.subtract((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_1.subtract((IVector3) vector3_0, vector3_0);
      Vector3 vector3_4 = vector3_3.crossLocal(vector3_0);
      vector3_0.toString();
      Vector3 vector3_5 = vector3_3.addScaledLocal(vector3_0, (-1.0));
      vector3_5.z();
      vector3_0.normalize(vector3_4);
      vector3_1.cross((IVector3) vector3_3, vector3_3);
      Vector3 vector3_6 = vector3_2.add((-4346.5361194), (-4346.5361194), (-2159.189844));
      vector3_6.subtract((IVector3) vector3_3, vector3_3);
      vector3_2.addScaledLocal(vector3_5, (-0.5773502691896258));
      // Undeclared exception!
      try { 
        vector3_2.get((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      double[] doubleArray0 = new double[0];
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      // Undeclared exception!
      try { 
        vector3_0.get(doubleBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.negateLocal();
      vector3_1.addScaledLocal(vector3_0, 0.0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.addScaled((IVector3) vector3_0, 0.0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      // Undeclared exception!
      try { 
        vector3_0.get((DoubleBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = new Vector3();
      Vector3 vector3_2 = vector3_1.subtractLocal(vector3_0);
      Vector3 vector3_3 = vector3_1.addLocal((IVector3) vector3_0);
      vector3_0.distance(vector3_1);
      vector3_3.mult((-1.0), vector3_1);
      Vector3 vector3_4 = vector3_3.mult(0.0);
      vector3_4.mult(0.0, vector3_3);
      vector3_4.addScaledLocal(vector3_2, (-1.0));
      Vector3 vector3_5 = new Vector3(vector3_1);
      vector3_1.addLocal(0.0, 0.0, 5.8938631329669654E38);
      vector3_1.multLocal((IVector3) vector3_5);
      Vector3 vector3_6 = (Vector3)Vector3.UNIT_XYZ;
      Vector3 vector3_7 = vector3_1.addLocal((IVector3) vector3_6);
      vector3_7.mult(1.0);
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(0);
      // Undeclared exception!
      try { 
        vector3_1.get(doubleBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.addLocal((-2383.743), (-2383.743), (-2383.743));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        vector3_0.set(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Vector3 vector3_0 = null;
      try {
        vector3_0 = new Vector3(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.manhattanDistance(vector3_0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.MAX_VALUE;
      Vector3 vector3_1 = vector3_0.normalize();
      vector3_1.manhattanDistance(vector3_0);
      Vector3 vector3_2 = new Vector3(vector3_1);
      vector3_2.mult((IVector3) vector3_0);
      Vector3 vector3_3 = vector3_1.mult((IVector3) vector3_0, vector3_2);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        vector3_3.set(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Vector3", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.add((-1843.0697968), (-1843.0697968), (-1843.0697968));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.multLocal(0.0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.NORMAL_XYZ;
      vector3_0.cross((IVector3) vector3_1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      vector3_0.addLocal((IVector3) vector3_1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.length();
      vector3_0.mult(0.0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      vector3_0.add((IVector3) vector3_1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.distance(vector3_0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.z();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.MIN_VALUE;
      vector3_0.mult((IVector3) vector3_1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      vector3_0.subtractLocal(vector3_1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      vector3_0.subtract((IVector3) vector3_1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = new Vector3();
      vector3_0.multLocal((IVector3) vector3_1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_Y;
      vector3_0.normalizeLocal();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      vector3_0.absLocal();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Vector3 vector3_1 = vector3_0.multLocal(2596.5);
      Vector3 vector3_2 = vector3_1.cross((IVector3) vector3_0, vector3_0);
      Vector3 vector3_3 = vector3_2.mult((IVector3) vector3_0, vector3_0);
      Vector3 vector3_4 = vector3_1.add(0.0, 0.0, 0.0);
      Vector3 vector3_5 = vector3_4.add(0.0, 2596.5, 0.0);
      vector3_5.cross((IVector3) vector3_0, vector3_3);
      vector3_0.length();
      Vector3 vector3_6 = vector3_1.subtract((IVector3) vector3_4);
      Vector3 vector3_7 = vector3_0.mult((-530.7));
      vector3_2.multLocal((IVector3) vector3_1);
      vector3_7.abs(vector3_2);
      vector3_2.distanceSquared(vector3_0);
      Vector3 vector3_8 = vector3_0.mult(0.0, vector3_4);
      Vector3 vector3_9 = vector3_1.add((IVector3) vector3_6);
      vector3_9.multLocal(0.0);
      Vector3 vector3_10 = vector3_3.absLocal();
      Vector3 vector3_11 = vector3_10.add(0.0, 0.0, 1.0);
      assertEquals(1.0, vector3_11.z, 0.01);
      
      vector3_8.y();
      vector3_1.subtract((IVector3) vector3_6, vector3_11);
      assertEquals(0.0, vector3_10.lengthSquared(), 0.01);
  }
}
