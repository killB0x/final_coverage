/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:07:49 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.Point;
import pythagoras.d.Vector;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPoint_ESTest extends AbstractPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point point0 = new Point(726.8337807, (-1088.0));
      point0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point point0 = new Point();
      point0.addLocal(0.0, (-926.767));
      Point point1 = new Point();
      boolean boolean0 = point0.equals(point1);
      assertEquals((-926.767), point0.y, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point point0 = new Point((-2119.9), (-2119.9));
      Point point1 = point0.subtract(506.8558580339, 1193.133);
      boolean boolean0 = point0.equals(point1);
      assertEquals((-2626.7558580339), point1.x, 0.01);
      assertEquals((-3313.0330000000004), point1.y, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point point0 = new Point(726.8337807, (-1088.0));
      Point point1 = new Point(point0);
      Point point2 = point0.rotate((-1194.7356593036902), point1);
      point0.mult((-5401.2), point2);
      point2.subtract((XY) point0, point0);
      assertEquals(5876505.6, point2.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector vector0 = new Vector((-4439.67274), (-1021.71001851119));
      Point point0 = new Point(vector0);
      Point point1 = point0.rotate((-1021.71001851119), point0);
      point1.subtract((XY) vector0, point1);
      assertEquals(8509.193589976421, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.subtract(0.0, 0.0, point0);
      assertEquals(0.0, point1.x, 0.01);
      assertEquals(0.0, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector vector0 = new Vector((-4439.67274), (-1021.71001851119));
      Point point0 = new Point(vector0);
      point0.subtract(561.0, (-0.9745271147204845), point0);
      assertEquals((-5000.67274), point0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.subtract((-381.14), 0.0);
      assertEquals(381.14, point1.x, 0.01);
      assertEquals(0.0, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector vector0 = new Vector((-4439.67274), (-1021.71001851119));
      Point point0 = new Point(vector0);
      Point point1 = point0.subtract((-1021.71001851119), (-4439.67274));
      assertEquals((-3417.96272148881), point1.x, 0.01);
      assertEquals(3417.96272148881, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.rotateLocal((-1131.8));
      point1.x = (-1131.8);
      point1.rotateLocal(1.0);
      point1.multLocal((-975.6));
      point0.rotate(1538.8, point1);
      assertEquals(449839.0162308113, point1.y, 0.01);
      assertEquals(449839.0162308113, point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector vector0 = new Vector();
      Point point0 = new Point(vector0);
      Point point1 = point0.addLocal(0.0, 9.999999747378752E-6);
      Point point2 = point1.rotate(1866.04288591);
      assertEquals(9.999999747378752E-6, point0.y, 0.01);
      assertEquals(9.980066557549432E-6, point2.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point point0 = new Point(726.8337807, (-1088.0));
      Point point1 = point0.rotate((-1194.7356593036902), point0);
      point1.mult((-5401.2), point1);
      assertEquals(2366765.685762023, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.add((-1.0), 0.0);
      point1.mult(935.0128014468385, point0);
      assertEquals((-935.0128014468385), point0.x, 0.01);
      assertFalse(point0.equals((Object)point1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector vector0 = new Vector((-747.393002), (-747.393002));
      Point point0 = new Point(vector0);
      Point point1 = point0.mult((-747.393002));
      assertEquals(558596.299438572, point1.y, 0.01);
      assertEquals(558596.299438572, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector vector0 = new Vector((-4439.67274), (-1021.71001851119));
      Point point0 = new Point(vector0);
      Point point1 = point0.mult(3460.359602145778);
      assertEquals((-1.5362864196243856E7), point1.x, 0.01);
      assertEquals((-3535484.073163737), point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point point0 = new Point();
      double double0 = point0.distanceSq(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point point0 = new Point();
      double double0 = point0.distance((XY) point0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point point0 = new Point(726.8337807, (-1088.0));
      Point point1 = new Point(point0);
      point0.rotate((-1194.7356593036902), point1);
      double double0 = point0.distance((XY) point1);
      assertEquals((-438.1925656820749), point1.x, 0.01);
      assertEquals(1174.001534018577, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point point0 = new Point();
      double double0 = point0.distance(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point point0 = new Point((-2119.9), (-2119.9));
      Point point1 = point0.clone();
      Point point2 = point0.addLocal(1491.58, 1654.43);
      double double0 = point1.direction(point2);
      assertEquals((-465.47), point0.y, 0.01);
      assertEquals(0.8371159839644801, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point point0 = new Point(1.0, 1.0);
      Point point1 = point0.rotate((-1755.538858387));
      double double0 = point0.direction(point1);
      assertEquals((-2.0504770053450807), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.rotateLocal((-1131.8));
      point1.x = (-1131.8);
      point1.rotateLocal(1.0);
      point1.add((XY) point0, point0);
      assertEquals((-1904.7537212111545), point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.set((-1735.8929), 1809.8024344677);
      Point point2 = point0.rotateLocal((-2282.75));
      point2.add((XY) point1, point2);
      assertEquals(4654.661787982386, point2.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.rotateLocal((-1131.8));
      point1.x = (-1131.8);
      point1.add((XY) point1, point0);
      assertEquals((-2263.6), point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point point0 = new Point(1030.285, 1030.285);
      Point point1 = point0.subtract(1030.285, 1030.285);
      point1.add((-1.0), 0.0, point0);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals((-1.0), point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector vector0 = new Vector();
      Point point0 = new Point(vector0);
      point0.add(0.0, (-3.141592653589793), point0);
      assertEquals((-3.141592653589793), point0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point point0 = new Point();
      point0.add(17.960576, 1483.666, point0);
      point0.subtract(17.960576, 0.0, point0);
      assertEquals(0.0, point0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.add(6.283185307179586, 1.0);
      assertEquals(1.0, point1.y, 0.01);
      assertEquals(6.283185307179586, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.add((-1.0), 0.0);
      double double0 = point0.distanceSq((XY) point1);
      assertEquals((-1.0), point1.x, 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.subtract((XY) null, point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.subtract((-1483.104147077245), (-1483.104147077245), (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.rotate(757.7760363076, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.mult((-5216.748929600712), (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector vector0 = new Vector();
      Point point0 = new Point(vector0);
      // Undeclared exception!
      try { 
        point0.distanceSq((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.direction((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        point0.add((XY) vector0, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector vector0 = new Vector();
      Point point0 = new Point(vector0);
      Point point1 = point0.rotate(0.0, point0);
      assertEquals(0.0, point1.x, 0.01);
      assertEquals(0.0, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector vector0 = new Vector();
      Point point0 = new Point(vector0);
      point0.subtract((-3.141592653589793), (-913.794803225), point0);
      point0.clone();
      assertEquals(3.141592653589793, point0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.mult(2327.330893991193, point0);
      assertEquals(0.0, point1.y, 0.01);
      assertEquals(0.0, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.clone();
      assertNotSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.add(3220.6945, (-1184.1250306262968));
      boolean boolean0 = point0.equals(point1);
      assertEquals(3220.6945, point1.x, 0.01);
      assertFalse(boolean0);
      assertEquals((-1184.1250306262968), point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point point0 = new Point();
      Object object0 = new Object();
      boolean boolean0 = point0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point point0 = new Point();
      boolean boolean0 = point0.equals(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector();
      Point point1 = new Point(vector0);
      boolean boolean0 = point1.equals(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.mult(0.0);
      assertEquals(0.0, point1.x, 0.01);
      assertEquals(0.0, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point point0 = new Point();
      double double0 = point0.distance((-1783.05606), 0.0);
      assertEquals(1783.05606, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.add(0.0, 0.0);
      assertTrue(point1.equals((Object)point0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Point point0 = new Point();
      double double0 = point0.distanceSq(746.61151630419, (-3447.76));
      assertEquals(1.2444477773878044E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.subtract((XY) point0, point0);
      assertEquals(0.0, point1.y, 0.01);
      assertEquals(0.0, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.add((XY) point0, point0);
      assertEquals(0.0, point1.y, 0.01);
      assertEquals(0.0, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.subtract(0.0, (-3882.0814763));
      boolean boolean0 = point1.equals(point0);
      assertEquals(3882.0814763, point1.y, 0.01);
      assertFalse(boolean0);
      assertFalse(point0.equals((Object)point1));
      assertEquals(0.0, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector();
      double double0 = point0.distanceSq((XY) vector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.add((-1135.1758580339), (-1135.1758580339), (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = point0.rotate(1114536.4359196967);
      assertTrue(point1.equals((Object)point0));
      assertEquals(0.0, point1.x, 0.01);
      assertEquals(0.0, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        point0.distance((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Point point0 = new Point();
      String string0 = point0.toString();
      assertEquals("+0.0+0.0", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Point point0 = new Point();
      double double0 = point0.direction(point0);
      assertEquals(0.0, double0, 0.01);
  }
}
