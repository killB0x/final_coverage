/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:38:34 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.IVector;
import pythagoras.d.Point;
import pythagoras.d.Vector;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector_ESTest extends Vector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      double double0 = vector0.y();
      assertEquals(0.0, vector0.x, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector vector0 = new Vector((-6003.5809456794), (-6003.5809456794));
      Vector vector1 = vector0.addScaledLocal(vector0, (-2084.0));
      double double0 = vector1.y();
      assertEquals(1.250545910985019E7, vector0.x, 0.01);
      assertEquals(1.250545910985019E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector vector0 = new Vector(0.0, (-1119.049573211));
      double double0 = vector0.y();
      assertEquals((-1119.049573211), double0, 0.01);
      assertEquals(0.0, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector vector0 = new Vector();
      double double0 = vector0.x();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector vector0 = new Vector((-737.823), (-737.823));
      Vector vector1 = new Vector();
      Vector vector2 = vector0.subtract((IVector) vector1, vector1);
      Vector vector3 = vector0.scale((IVector) vector1);
      vector0.lerp((IVector) vector3, 544382.7793289999, vector2);
      double double0 = vector2.x();
      assertEquals(2.967542678275365E11, vector2.y, 0.01);
      assertEquals(2.967542678275365E11, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector vector0 = new Vector((-6003.5809456794), (-6003.5809456794));
      double double0 = vector0.x();
      assertEquals((-6003.5809456794), vector0.y, 0.01);
      assertEquals((-6003.5809456794), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.setLength(0.0);
      vector0.subtractLocal((IVector) vector1);
      assertEquals(Double.NaN, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector vector0 = new Vector(2957.0, 2957.0);
      Vector vector1 = new Vector(2957.0, 2957.0);
      Vector vector2 = vector0.setAngle(186.1947);
      vector2.subtractLocal((IVector) vector1);
      assertEquals((-5745.931082371873), vector2.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      vector0.subtractLocal((-601.290647170597), 0.0);
      assertEquals(601.290647170597, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector vector0 = new Vector(2123.25911362, 0.0);
      assertEquals(2123.25911362, vector0.x, 0.01);
      
      vector0.setLength(0.0);
      assertEquals(0.0, vector0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector vector0 = new Vector((-6003.5809456794), (-6003.5809456794));
      vector0.setLength(1.2502507571097638E7);
      assertEquals((-8840607.885359293), vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.set((-341.21080433635), -0.0);
      vector0.setAngle(548.4091725095735);
      assertEquals((-68.20757118966586), vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      vector0.add(1.0, 1.0, vector0);
      vector0.setAngle(3122.3637287251017);
      assertEquals(1.3136608886594714, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector vector0 = new Vector(924.8, 924.8);
      assertEquals(924.8, vector0.x, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 924.8;
      Vector vector1 = vector0.set(doubleArray0);
      assertEquals(0.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector vector0 = new Vector(924.8, 924.8);
      assertEquals(924.8, vector0.y, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 924.8;
      Vector vector1 = vector0.set(doubleArray0);
      assertEquals(0.0, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector vector0 = new Vector();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1573.8599346085887);
      vector0.set(doubleArray0);
      assertEquals((-1573.8599346085887), vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector vector0 = new Vector((-737.823), (-737.823));
      Vector vector1 = new Vector();
      Vector vector2 = vector0.lerp((IVector) vector1, 544382.7793289999, vector1);
      vector1.set((XY) vector2);
      assertEquals(4.016573975698607E8, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.set((-341.21080433635), -0.0);
      vector0.set((XY) vector0);
      assertEquals(-0.0, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.set((-4056.85966019812), (-1014.778341));
      assertEquals((-4056.85966019812), vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector(point0);
      Vector vector1 = vector0.set(0.0, 0.0);
      assertEquals(0.0, vector1.y, 0.01);
      assertEquals(0.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.set(1632.4, 1.0);
      assertEquals(1.0, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector vector0 = new Vector();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1573.8599346085887);
      vector0.set(doubleArray0);
      vector0.scaleLocal((IVector) vector0);
      assertEquals(2477035.093766151, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.set((-1573.8599346085887), 0.0);
      vector0.scaleLocal((IVector) vector0);
      assertEquals(2477035.093766151, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector vector0 = new Vector(2957.0, 2957.0);
      Vector vector1 = new Vector(vector0);
      vector0.setAngle(186.1947);
      vector0.scaleLocal((IVector) vector1);
      assertEquals((-9214062.01917996), vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.setLength(0.0);
      vector0.scaleLocal((-3373.04));
      assertEquals(Double.NaN, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point point0 = new Point(0.0, 0.0);
      Vector vector0 = new Vector(point0);
      vector0.normalizeLocal();
      vector0.rotateLocal(0.0);
      assertEquals(Double.NaN, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point point0 = new Point(0.0, (-334.2372462607966));
      Vector vector0 = new Vector(point0);
      vector0.rotateLocal((-0.5403023058681398));
      assertEquals((-286.62622538658906), vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector vector0 = new Vector();
      Point point0 = new Point(-0.0, (-1.0));
      vector0.set((XY) point0);
      Vector vector1 = vector0.subtractLocal(1864.466298182477, (-1.0));
      vector1.normalizeLocal();
      assertEquals((-1.0), vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point point0 = new Point(0.0, (-334.2372462607966));
      Vector vector0 = new Vector(point0);
      vector0.normalizeLocal();
      assertEquals((-1.0), vector0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtractLocal(1864.466298182477, (-1.0));
      vector1.normalizeLocal();
      assertEquals((-0.9999998561662394), vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point point0 = new Point(0.0, 0.0);
      Vector vector0 = new Vector(point0);
      Vector vector1 = new Vector(0.0, 173.515104526112);
      vector1.subtract((IVector) vector0, vector0);
      vector0.negateLocal();
      assertEquals((-173.515104526112), vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector vector0 = new Vector((-737.823), (-737.823));
      assertEquals((-737.823), vector0.x(), 0.01);
      
      vector0.negateLocal();
      assertEquals(737.823, vector0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector vector0 = new Vector((-737.823), (-737.823));
      vector0.lerpLocal(vector0, 1.1919376588548193E20);
      assertEquals((-737.823), vector0.y, 0.01);
      assertEquals((-737.823), vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      vector0.lerpLocal(vector0, 0.0);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.lerpLocal(vector0, Double.NaN);
      assertEquals(Double.NaN, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector vector0 = new Vector(2123.25911362, 0.0);
      Vector vector1 = vector0.negateLocal();
      vector1.lerpLocal(vector0, 0.0);
      assertEquals((-2123.25911362), vector0.x, 0.01);
      assertEquals((-2123.25911362), vector0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      Vector vector1 = vector0.add((-1.0), 1.0);
      Vector vector2 = vector0.add(1.0, 1.0, vector0);
      vector0.scaleLocal((-1.0));
      vector2.crossLocal(vector1);
      assertEquals((-2.0), vector2.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector vector0 = new Vector(2957.0, 2957.0);
      Vector vector1 = new Vector(2957.0, 2957.0);
      vector0.setAngle(186.1947);
      vector0.crossLocal(vector1);
      assertEquals((-967192.8086063303), vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.addScaledLocal(vector0, 0.0);
      assertEquals(0.0, vector1.x, 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point point0 = new Point(1391.041, 1391.041);
      Vector vector0 = new Vector(point0);
      vector0.addLocal((IVector) vector0);
      assertEquals(2782.082, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      Vector vector1 = new Vector((-1.0), (-1.0));
      vector0.addLocal((IVector) vector1);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      vector0.addLocal(4028.04, (-1.0));
      assertEquals(4028.04, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector vector0 = new Vector(1.0, 0.0);
      Vector vector1 = vector0.subtractLocal(2119.05748, 1.0);
      vector1.addLocal(0.0, 1.0);
      assertEquals((-2118.05748), vector0.x, 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.subtractLocal((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.set((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector vector0 = new Vector();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        vector0.set(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.set((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.scaleLocal((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.crossLocal((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.addScaledLocal((IVector) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.addLocal((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector vector0 = null;
      try {
        vector0 = new Vector((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.scaleLocal(341.21080433635);
      assertEquals(0.0, vector1.y, 0.01);
      assertEquals(0.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector(point0);
      Vector vector1 = vector0.rotateLocal((-1834.823005962));
      assertEquals(0.0, vector1.x(), 0.01);
      assertEquals(0.0, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector vector0 = new Vector(2957.0, 2957.0);
      assertEquals(2957.0, vector0.x, 0.01);
      
      vector0.crossLocal(vector0);
      assertEquals(0.0, vector0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector vector0 = new Vector(2957.0, 2957.0);
      vector0.addScaledLocal(vector0, (-535.90106));
      assertEquals((-1581702.43442), vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.addLocal(0.0, 0.0);
      assertEquals(0.0, vector1.x(), 0.01);
      assertEquals(0.0, vector1.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector(point0);
      Vector vector1 = vector0.setAngle(0.0);
      assertEquals(0.0, vector1.y(), 0.01);
      assertEquals(0.0, vector1.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtractLocal(0.0, 0.0);
      assertEquals(0.0, vector1.x, 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector(point0);
      Vector vector1 = vector0.subtractLocal((IVector) vector0);
      assertEquals(0.0, vector1.x(), 0.01);
      assertEquals(0.0, vector1.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector(point0);
      vector0.addLocal((IVector) vector0);
      assertEquals(0.0, vector0.y, 0.01);
      assertEquals(0.0, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.setLength(0.0);
      vector1.addLocal(Double.NaN, (-1971.80854));
      assertEquals(Double.NaN, vector0.y, 0.01);
      assertEquals(Double.NaN, vector0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.lerpLocal((IVector) null, 1361.253949868224);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }
}
