/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:33:13 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AffineTransform;
import pythagoras.d.IQuadCurve;
import pythagoras.d.Line;
import pythagoras.d.Point;
import pythagoras.d.QuadCurve;
import pythagoras.d.Vector;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuadCurve_ESTest extends QuadCurve_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.0, 0.0, 1156.75, 0.0, 0.0);
      Vector vector0 = new Vector();
      Vector vector1 = vector0.negate();
      Point point0 = quadCurve0.ctrlP();
      quadCurve0.setCurve((XY) point0, (XY) vector0, (XY) vector1);
      assertEquals(1156.75, quadCurve0.y1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = affineTransform0.scale();
      XY[] xYArray0 = new XY[3];
      xYArray0[0] = (XY) vector0;
      xYArray0[1] = (XY) vector0;
      xYArray0[2] = (XY) vector0;
      quadCurve0.setCurve(xYArray0, 0);
      assertEquals(1.0, quadCurve0.x2, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = affineTransform0.scale();
      XY[] xYArray0 = new XY[3];
      xYArray0[0] = (XY) vector0;
      xYArray0[1] = (XY) vector0;
      // Undeclared exception!
      try { 
        quadCurve0.setCurve(xYArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      double[] doubleArray0 = new double[7];
      quadCurve0.setCurve(doubleArray0, 0);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      quadCurve0.setCurve((IQuadCurve) quadCurve0);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      double double0 = quadCurve0.y2();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.0, 0.0, 0.0, 0.0, 0.5);
      double double0 = quadCurve0.y2();
      assertEquals(0.5, double0, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      quadCurve0.y2 = (-2003.4402856078);
      double double0 = quadCurve0.y2();
      assertEquals((-2003.4402856078), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      double double0 = quadCurve0.y1();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(2228.2194, 0.5, (-772.635231804), 0.0, 0.0, (-772.635231804));
      double double0 = quadCurve0.y1();
      assertEquals((-772.635231804), quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals((-772.635231804), quadCurve0.ctrlx, 0.01);
      assertEquals(0.5, double0, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(2228.2194, quadCurve0.x1, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-724.5682226399288), (-1839.16349213), (-1839.16349213), 0.0, 1230.4797528047973, 0.0);
      double double0 = quadCurve0.y1();
      assertEquals((-724.5682226399288), quadCurve0.x1, 0.01);
      assertEquals(1230.4797528047973, quadCurve0.x2, 0.01);
      assertEquals((-1839.16349213), quadCurve0.ctrlx, 0.01);
      assertEquals((-1839.16349213), double0, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      double double0 = quadCurve0.x2();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      quadCurve0.x2 = 1.0;
      double double0 = quadCurve0.x2();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-724.5682226399288), (-1839.16349213), (-1839.16349213), 0.0, 1230.4797528047973, 0.0);
      Point point0 = quadCurve0.p1();
      quadCurve0.setCurve((XY) point0, (XY) point0, (XY) point0);
      double double0 = quadCurve0.x2();
      assertEquals((-724.5682226399288), quadCurve0.ctrlx, 0.01);
      assertEquals((-724.5682226399288), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.0, 0.0, 0.0, 0.0, 0.5);
      double double0 = quadCurve0.x1();
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.5, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1.0, 387.56816806, 195.0, (-1616.35), (-783.2655), (-1616.35));
      double double0 = quadCurve0.x1();
      assertEquals(195.0, quadCurve0.ctrlx, 0.01);
      assertEquals((-1616.35), quadCurve0.ctrly, 0.01);
      assertEquals(387.56816806, quadCurve0.y1, 0.01);
      assertEquals((-1616.35), quadCurve0.y2, 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals((-783.2655), quadCurve0.x2, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Line line0 = new Line((-15.138292), 1.0, 756.0, 0.0);
      Point point0 = line0.p1();
      quadCurve0.setCurve((XY) point0, (XY) point0, (XY) point0);
      double double0 = quadCurve0.x1();
      assertEquals(1.0, quadCurve0.y2, 0.01);
      assertEquals((-15.138292), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.0, 0.0, 0.0, 0.0, 0.5);
      double double0 = quadCurve0.ctrlY();
      assertEquals(0.5, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.0, 0.0, 0.0, 0.0, 0.5);
      quadCurve0.setCurve(0.0, 0.5, 0.5, 1341.7, 0.0, 0.5);
      double double0 = quadCurve0.ctrlY();
      assertEquals(0.5, quadCurve0.y1, 0.01);
      assertEquals(1341.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-3384.68855586), (-3512.60592), (-3512.60592), (-287.488742602166), (-3512.60592), (-3384.68855586));
      double double0 = quadCurve0.ctrlY();
      assertEquals((-3512.60592), quadCurve0.ctrlx, 0.01);
      assertEquals((-287.488742602166), double0, 0.01);
      assertEquals((-3512.60592), quadCurve0.y1, 0.01);
      assertEquals((-3384.68855586), quadCurve0.x1, 0.01);
      assertEquals((-3384.68855586), quadCurve0.y2, 0.01);
      assertEquals((-3512.60592), quadCurve0.x2, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-2646.133660370564), (-2646.133660370564), 0.0, 0.0, 1.0, 1519.9255481074113);
      double double0 = quadCurve0.ctrlX();
      assertEquals(1.0, quadCurve0.x2, 0.01);
      assertEquals((-2646.133660370564), quadCurve0.y1, 0.01);
      assertEquals(1519.9255481074113, quadCurve0.y2, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2646.133660370564), quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-319.3699), 0.0, 2404.171640016, 0.0, 796.29786, 6.9395754251158);
      double double0 = quadCurve0.ctrlX();
      assertEquals(2404.171640016, double0, 0.01);
      assertEquals((-319.3699), quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(6.9395754251158, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(796.29786, quadCurve0.x2, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-724.5682226399288), (-1839.16349213), (-1839.16349213), 0.0, 1230.4797528047973, 0.0);
      double double0 = quadCurve0.ctrlX();
      assertEquals((-1839.16349213), double0, 0.01);
      assertEquals((-724.5682226399288), quadCurve0.x1, 0.01);
      assertEquals((-1839.16349213), quadCurve0.y1, 0.01);
      assertEquals(1230.4797528047973, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      XY[] xYArray0 = new XY[1];
      // Undeclared exception!
      try { 
        quadCurve0.setCurve(xYArray0, 1087);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1087 out of bounds for length 1
         //
         verifyException("pythagoras.d.QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        quadCurve0.setCurve(doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-2646.133660370564), (-2646.133660370564), 0.0, 0.0, 1.0, 1519.9255481074113);
      // Undeclared exception!
      try { 
        quadCurve0.setCurve((XY) null, (XY) null, (XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      // Undeclared exception!
      try { 
        quadCurve0.setCurve((IQuadCurve) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      // Undeclared exception!
      try { 
        quadCurve0.setCurve((double[]) null, (-2688));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.QuadCurve", e);
      }
  }
}
