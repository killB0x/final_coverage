/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:41:55 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.Box;
import pythagoras.d.Frustum;
import pythagoras.d.IVector3;
import pythagoras.d.Matrix3;
import pythagoras.d.Matrix4;
import pythagoras.d.Plane;
import pythagoras.d.Vector3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Frustum_ESTest extends Frustum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3 vector3_0 = new Vector3();
      Matrix4 matrix4_0 = new Matrix4(1.0, 1820.84980410709, 742.477, 2124.25, 0.0, 0.9999900000002526, (-1607.67944756618), 1334.315621845, (-3.4028234663852886E38), 1.0, 2463.8431, (-3.4028234663852886E38), 1.0, (-1.0), 1.5707963267948966, 0.0);
      Vector3 vector3_1 = matrix4_0.extractScale(vector3_0);
      Frustum frustum1 = frustum0.setToProjection(1820.8503532956322, 2124.25, 1334.315621845, 1820.8503532956322, 2.0, (-3232.56503417), vector3_1, true, true);
      assertSame(frustum0, frustum1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0.updateDerivedState();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0._vertices = null;
      IVector3[] iVector3Array0 = frustum0.vertices();
      assertNull(iVector3Array0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Frustum frustum1 = frustum0.setToFrustum((-3.4028234663852886E38), 3792.17333021, (-99.4435), (-99.4435), 0.0, (-99.4435));
      Vector3[] vector3Array0 = new Vector3[0];
      frustum1._vertices = vector3Array0;
      IVector3[] iVector3Array0 = frustum1.vertices();
      assertEquals(0, iVector3Array0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane plane0 = new Plane(1.5707963267948966, 0.0, 2381.507738849, 0.0);
      Vector3 vector3_0 = plane0._v2;
      Frustum frustum1 = frustum0.setToOrtho(273.691, 0.0, 0.0, (-1655.047), 1631.40737494133, 0.0);
      double double0 = frustum1.distance(vector3_0);
      assertEquals(1655.047, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane plane0 = new Plane();
      Vector3 vector3_0 = plane0._v1;
      frustum0.setToOrtho(1500.97, (-3.791507782042833E35), (-3.4028234663852886E38), 1237.72, 0.9999900000002526, (-5914.368561699904));
      double double0 = frustum0.distance(vector3_0);
      assertEquals((-0.9999900000002526), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      Box box0 = Box.UNIT;
      Frustum frustum0 = new Frustum();
      Vector3[] vector3Array0 = new Vector3[0];
      frustum0._vertices = vector3Array0;
      Box box1 = frustum0.boundsUnderRotation(matrix3_0, box0);
      assertSame(box1, box0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Matrix3 matrix3_0 = new Matrix3();
      Box box0 = Box.UNIT;
      assertEquals(3.4641016151377544, box0.diagonalLength(), 0.01);
      
      Frustum frustum0 = new Frustum();
      frustum0.boundsUnderRotation(matrix3_0, box0);
      assertEquals(0.0, box0.longestEdge(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0._bounds = null;
      Box box0 = frustum0.bounds();
      assertNull(box0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0.setToOrtho(2017.144, 2017.144, 2017.144, 2017.144, 2017.144, 2017.144);
      Box box0 = frustum0.bounds();
      assertEquals(0.0, box0.longestEdge(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0._vertices = null;
      // Undeclared exception!
      try { 
        frustum0.updateDerivedState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane[] planeArray0 = new Plane[0];
      frustum0._planes = planeArray0;
      // Undeclared exception!
      try { 
        frustum0.updateDerivedState();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      // Undeclared exception!
      try { 
        frustum0.setToProjection((-242.17288340359818), (-242.17288340359818), 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, (IVector3) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane[] planeArray0 = new Plane[0];
      frustum0._planes = planeArray0;
      Box box0 = Box.MAX_VALUE;
      Vector3 vector3_0 = box0.center();
      // Undeclared exception!
      try { 
        frustum0.setToProjection(1.4768074425040638, 1.4768074425040638, 1.4768074425040638, 1.4768074425040638, 1.4768074425040638, 1.4768074425040638, vector3_0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane[] planeArray0 = new Plane[1];
      frustum0._planes = planeArray0;
      // Undeclared exception!
      try { 
        frustum0.setToPerspective((-297.5712159347808), (-297.5712159347808), (-2014.6961545948643), 995.3738);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane[] planeArray0 = new Plane[0];
      frustum0._planes = planeArray0;
      // Undeclared exception!
      try { 
        frustum0.setToPerspective((-297.5712159347808), (-297.5712159347808), (-2014.6961545948643), 995.3738);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane[] planeArray0 = new Plane[1];
      frustum0._planes = planeArray0;
      // Undeclared exception!
      try { 
        frustum0.setToOrtho((-20.232648679122114), (-20.232648679122114), (-20.232648679122114), (-20.232648679122114), (-20.232648679122114), (-20.232648679122114));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane[] planeArray0 = new Plane[1];
      Plane plane0 = Plane.YZ_PLANE;
      planeArray0[0] = plane0;
      frustum0._planes = planeArray0;
      // Undeclared exception!
      try { 
        frustum0.setToOrtho((-2287.4885764306246), 126.64598228716454, (-1333.413), (-2287.4885764306246), 126.64598228716454, (-1333.413));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.d.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane[] planeArray0 = new Plane[1];
      frustum0._planes = planeArray0;
      // Undeclared exception!
      try { 
        frustum0.setToFrustum(430.473061730291, (-3.7922629423), 430.473061730291, 430.473061730291, 1789.8531457671947, 1789.8531457671947);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane[] planeArray0 = new Plane[0];
      frustum0._planes = planeArray0;
      // Undeclared exception!
      try { 
        frustum0.setToFrustum(9.999999747378752E-5, (-3.7922629423), 9.999999747378752E-5, 9.999999747378752E-5, 1789.8531457671947, 1789.8531457671947);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      // Undeclared exception!
      try { 
        frustum0.intersectionType((Box) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane[] planeArray0 = new Plane[0];
      frustum0._planes = planeArray0;
      Box box0 = Box.MAX_VALUE;
      // Undeclared exception!
      try { 
        frustum0.intersectionType(box0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      // Undeclared exception!
      try { 
        frustum0.distance((Vector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Box box0 = Box.MAX_VALUE;
      // Undeclared exception!
      try { 
        frustum0.boundsUnderRotation((Matrix3) null, box0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Frustum", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3 vector3_0 = (Vector3)Vector3.ZERO;
      Frustum frustum1 = frustum0.setToProjection(0.0, 1.0, 1.0, 0.0, 487.67, 487.67, vector3_0, true, false);
      assertSame(frustum0, frustum1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Matrix3 matrix3_0 = Matrix3.IDENTITY;
      Box box0 = new Box();
      frustum0.boundsUnderRotation(matrix3_0, box0);
      assertFalse(box0.isEmpty());
      assertEquals(0.0, box0.diagonalLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      frustum0.setToPerspective(863.918721673, 863.918721673, 863.918721673, 863.918721673);
      Box box0 = Box.MAX_VALUE;
      Frustum.IntersectionType frustum_IntersectionType0 = frustum0.intersectionType(box0);
      assertEquals(Frustum.IntersectionType.NONE, frustum_IntersectionType0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Box box0 = Box.MAX_VALUE;
      Frustum.IntersectionType frustum_IntersectionType0 = frustum0.intersectionType(box0);
      assertEquals(Frustum.IntersectionType.CONTAINS, frustum_IntersectionType0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Plane plane0 = new Plane();
      Vector3 vector3_0 = plane0._v1;
      double double0 = frustum0.distance(vector3_0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Frustum frustum1 = frustum0.setToProjection((-1387.0431787132768), (-1387.0431787132768), (-1387.0431787132768), (-1387.0431787132768), (-1387.0431787132768), (-1387.0431787132768), vector3_0, false, true);
      assertSame(frustum1, frustum0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      IVector3[] iVector3Array0 = frustum0.vertices();
      assertEquals(8, iVector3Array0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Box box0 = frustum0.bounds();
      Vector3 vector3_0 = box0.center();
      Frustum frustum1 = frustum0.setToProjection(0.0, 0.0, (-600.4572991), 2445.98749394152, (-3.4028234663852886E38), (-3.4028234663852886E38), vector3_0, false, false);
      assertSame(frustum0, frustum1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Frustum frustum1 = frustum0.setToOrtho(1500.97, (-3.791507782042833E35), (-3.4028234663852886E38), 1237.72, 0.9999900000002526, (-5914.368561699904));
      Box box0 = Box.MAX_VALUE;
      Frustum.IntersectionType frustum_IntersectionType0 = frustum1.intersectionType(box0);
      assertEquals(Frustum.IntersectionType.INTERSECTS, frustum_IntersectionType0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Frustum frustum0 = new Frustum();
      Frustum frustum1 = frustum0.setToPerspective(2.0, 1490.7449655800863, 1490.7449655800863, 2.0);
      Box box0 = frustum1.bounds();
      assertEquals(6922120.107441844, box0.diagonalLength(), 0.01);
  }
}
