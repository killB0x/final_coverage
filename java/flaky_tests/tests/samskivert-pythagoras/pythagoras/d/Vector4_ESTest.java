/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:46:56 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.DoubleBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.IMatrix4;
import pythagoras.d.IVector4;
import pythagoras.d.Matrix4;
import pythagoras.d.Vector3;
import pythagoras.d.Vector4;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector4_ESTest extends Vector4_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = Double.NaN;
      Vector4 vector4_0 = new Vector4(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(Double.NaN, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = vector4_0.equals(vector4_0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(Double.NaN, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      
      vector4_0.z = (-3310.82242361);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals((-3310.82242361), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      
      Vector4 vector4_1 = vector4_0.negateLocal();
      assertEquals(-0.0, vector4_0.y(), 0.01);
      assertEquals(-0.0, vector4_0.x(), 0.01);
      assertEquals(3310.82242361, vector4_0.z(), 0.01);
      assertEquals(-0.0, vector4_0.w(), 0.01);
      assertEquals(-0.0, vector4_1.y(), 0.01);
      assertEquals(-0.0, vector4_1.x(), 0.01);
      assertEquals(-0.0, vector4_1.w(), 0.01);
      assertEquals(3310.82242361, vector4_1.z(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(3310.82242361, vector4_0.z, 0.01);
      assertEquals(-0.0, vector4_0.y, 0.01);
      assertEquals(-0.0, vector4_0.x, 0.01);
      assertEquals(-0.0, vector4_0.w, 0.01);
      assertEquals(3310.82242361, vector4_1.z, 0.01);
      assertEquals(-0.0, vector4_1.x, 0.01);
      assertEquals(-0.0, vector4_1.y, 0.01);
      assertEquals(-0.0, vector4_1.w, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      Vector4 vector4_2 = vector4_1.mult(0.0);
      assertFalse(vector4_2.equals((Object)vector4_1));
      assertFalse(vector4_2.equals((Object)vector4_0));
      assertEquals(-0.0, vector4_0.y(), 0.01);
      assertEquals(-0.0, vector4_0.x(), 0.01);
      assertEquals(3310.82242361, vector4_0.z(), 0.01);
      assertEquals(-0.0, vector4_0.w(), 0.01);
      assertEquals(-0.0, vector4_1.y(), 0.01);
      assertEquals(-0.0, vector4_1.x(), 0.01);
      assertEquals(-0.0, vector4_1.w(), 0.01);
      assertEquals(3310.82242361, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_2.z(), 0.01);
      assertEquals(-0.0, vector4_2.x(), 0.01);
      assertEquals(-0.0, vector4_2.y(), 0.01);
      assertEquals(-0.0, vector4_2.w(), 0.01);
      assertNotNull(vector4_2);
      assertEquals(3310.82242361, vector4_0.z, 0.01);
      assertEquals(-0.0, vector4_0.y, 0.01);
      assertEquals(-0.0, vector4_0.x, 0.01);
      assertEquals(-0.0, vector4_0.w, 0.01);
      assertEquals(3310.82242361, vector4_1.z, 0.01);
      assertEquals(-0.0, vector4_1.x, 0.01);
      assertEquals(-0.0, vector4_1.y, 0.01);
      assertEquals(-0.0, vector4_1.w, 0.01);
      assertEquals(-0.0, vector4_2.x, 0.01);
      assertEquals(0.0, vector4_2.z, 0.01);
      assertEquals(-0.0, vector4_2.w, 0.01);
      assertEquals(-0.0, vector4_2.y, 0.01);
      assertSame(vector4_0, vector4_1);
      assertNotSame(vector4_0, vector4_2);
      assertNotSame(vector4_1, vector4_2);
      assertSame(vector4_1, vector4_0);
      assertNotSame(vector4_2, vector4_1);
      assertNotSame(vector4_2, vector4_0);
      
      boolean boolean0 = vector4_0.equals(vector4_2);
      assertFalse(vector4_0.equals((Object)vector4_2));
      assertFalse(vector4_1.equals((Object)vector4_2));
      assertFalse(vector4_2.equals((Object)vector4_1));
      assertFalse(vector4_2.equals((Object)vector4_0));
      assertEquals(-0.0, vector4_0.y(), 0.01);
      assertEquals(-0.0, vector4_0.x(), 0.01);
      assertEquals(3310.82242361, vector4_0.z(), 0.01);
      assertEquals(-0.0, vector4_0.w(), 0.01);
      assertEquals(-0.0, vector4_1.y(), 0.01);
      assertEquals(-0.0, vector4_1.x(), 0.01);
      assertEquals(-0.0, vector4_1.w(), 0.01);
      assertEquals(3310.82242361, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_2.z(), 0.01);
      assertEquals(-0.0, vector4_2.x(), 0.01);
      assertEquals(-0.0, vector4_2.y(), 0.01);
      assertEquals(-0.0, vector4_2.w(), 0.01);
      assertFalse(boolean0);
      assertEquals(3310.82242361, vector4_0.z, 0.01);
      assertEquals(-0.0, vector4_0.y, 0.01);
      assertEquals(-0.0, vector4_0.x, 0.01);
      assertEquals(-0.0, vector4_0.w, 0.01);
      assertEquals(3310.82242361, vector4_1.z, 0.01);
      assertEquals(-0.0, vector4_1.x, 0.01);
      assertEquals(-0.0, vector4_1.y, 0.01);
      assertEquals(-0.0, vector4_1.w, 0.01);
      assertEquals(-0.0, vector4_2.x, 0.01);
      assertEquals(0.0, vector4_2.z, 0.01);
      assertEquals(-0.0, vector4_2.w, 0.01);
      assertEquals(-0.0, vector4_2.y, 0.01);
      assertSame(vector4_0, vector4_1);
      assertNotSame(vector4_0, vector4_2);
      assertNotSame(vector4_1, vector4_2);
      assertSame(vector4_1, vector4_0);
      assertNotSame(vector4_2, vector4_1);
      assertNotSame(vector4_2, vector4_0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      
      Vector4 vector4_1 = vector4_0.set((-28.80670950428117), 1.5707963267948966, 1.0, (-1144.599));
      assertEquals((-1144.599), vector4_0.w(), 0.01);
      assertEquals((-28.80670950428117), vector4_0.x(), 0.01);
      assertEquals(1.0, vector4_0.z(), 0.01);
      assertEquals(1.5707963267948966, vector4_0.y(), 0.01);
      assertEquals((-28.80670950428117), vector4_1.x(), 0.01);
      assertEquals((-1144.599), vector4_1.w(), 0.01);
      assertEquals(1.5707963267948966, vector4_1.y(), 0.01);
      assertEquals(1.0, vector4_1.z(), 0.01);
      assertNotNull(vector4_1);
      assertEquals((-28.80670950428117), vector4_0.x, 0.01);
      assertEquals((-1144.599), vector4_0.w, 0.01);
      assertEquals(1.5707963267948966, vector4_0.y, 0.01);
      assertEquals(1.0, vector4_0.z, 0.01);
      assertEquals((-1144.599), vector4_1.w, 0.01);
      assertEquals((-28.80670950428117), vector4_1.x, 0.01);
      assertEquals(1.5707963267948966, vector4_1.y, 0.01);
      assertEquals(1.0, vector4_1.z, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      boolean boolean0 = vector4_0.equals(vector4_0);
      assertEquals((-1144.599), vector4_0.w(), 0.01);
      assertEquals((-28.80670950428117), vector4_0.x(), 0.01);
      assertEquals(1.0, vector4_0.z(), 0.01);
      assertEquals(1.5707963267948966, vector4_0.y(), 0.01);
      assertTrue(boolean0);
      assertEquals((-28.80670950428117), vector4_0.x, 0.01);
      assertEquals((-1144.599), vector4_0.w, 0.01);
      assertEquals(1.5707963267948966, vector4_0.y, 0.01);
      assertEquals(1.0, vector4_0.z, 0.01);
      assertSame(vector4_0, vector4_1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      
      Matrix4 matrix4_0 = new Matrix4(0.0, 0.0, 0.0, 45.6, 133.7053393045846, 0.0, Double.NaN, 1370.9134320480355, 938.81633812938, (-1.0), 3840.0, 1.0, 549.5900035566, 0.0, 3840.0, (-2114.39276416499));
      assertEquals((-1.0), matrix4_0.m12(), 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(549.5900035566, matrix4_0.m03(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(0.0, matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m11(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01(), 0.01);
      assertEquals(938.81633812938, matrix4_0.m02(), 0.01);
      assertEquals(45.6, matrix4_0.m30(), 0.01);
      assertEquals(3840.0, matrix4_0.m23(), 0.01);
      assertEquals(1.0, matrix4_0.m32(), 0.01);
      assertEquals(3840.0, matrix4_0.m22(), 0.01);
      assertNotNull(matrix4_0);
      assertEquals(3840.0, matrix4_0.m23, 0.01);
      assertEquals(3840.0, matrix4_0.m22, 0.01);
      assertEquals(549.5900035566, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m11, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31, 0.01);
      assertEquals(Double.NaN, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(1.0, matrix4_0.m32, 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01, 0.01);
      assertEquals((-1.0), matrix4_0.m12, 0.01);
      assertEquals(45.6, matrix4_0.m30, 0.01);
      assertEquals(938.81633812938, matrix4_0.m02, 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33, 0.01);
      
      Vector4 vector4_1 = matrix4_0.transform((IVector4) vector4_0, vector4_0);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(Double.NaN, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals((-1.0), matrix4_0.m12(), 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(549.5900035566, matrix4_0.m03(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(0.0, matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m11(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01(), 0.01);
      assertEquals(938.81633812938, matrix4_0.m02(), 0.01);
      assertEquals(45.6, matrix4_0.m30(), 0.01);
      assertEquals(3840.0, matrix4_0.m23(), 0.01);
      assertEquals(1.0, matrix4_0.m32(), 0.01);
      assertEquals(3840.0, matrix4_0.m22(), 0.01);
      assertEquals(Double.NaN, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(Double.NaN, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(3840.0, matrix4_0.m23, 0.01);
      assertEquals(3840.0, matrix4_0.m22, 0.01);
      assertEquals(549.5900035566, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m11, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31, 0.01);
      assertEquals(Double.NaN, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(1.0, matrix4_0.m32, 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01, 0.01);
      assertEquals((-1.0), matrix4_0.m12, 0.01);
      assertEquals(45.6, matrix4_0.m30, 0.01);
      assertEquals(938.81633812938, matrix4_0.m02, 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(Double.NaN, vector4_1.y, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      boolean boolean0 = vector4_1.equals(vector4_0);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(Double.NaN, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals((-1.0), matrix4_0.m12(), 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(549.5900035566, matrix4_0.m03(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(0.0, matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m11(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01(), 0.01);
      assertEquals(938.81633812938, matrix4_0.m02(), 0.01);
      assertEquals(45.6, matrix4_0.m30(), 0.01);
      assertEquals(3840.0, matrix4_0.m23(), 0.01);
      assertEquals(1.0, matrix4_0.m32(), 0.01);
      assertEquals(3840.0, matrix4_0.m22(), 0.01);
      assertEquals(Double.NaN, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(Double.NaN, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(3840.0, matrix4_0.m23, 0.01);
      assertEquals(3840.0, matrix4_0.m22, 0.01);
      assertEquals(549.5900035566, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m11, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31, 0.01);
      assertEquals(Double.NaN, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(1.0, matrix4_0.m32, 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01, 0.01);
      assertEquals((-1.0), matrix4_0.m12, 0.01);
      assertEquals(45.6, matrix4_0.m30, 0.01);
      assertEquals(938.81633812938, matrix4_0.m02, 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(Double.NaN, vector4_1.y, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6);
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.z, 0.01);
      
      Vector4 vector4_1 = new Vector4();
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      
      boolean boolean0 = vector4_0.equals(vector4_1);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertFalse(boolean0);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1483.5097423375), 0.0, (-1483.5097423375), 0.0);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.x(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals((-1483.5097423375), vector4_0.x, 0.01);
      assertEquals((-1483.5097423375), vector4_0.z, 0.01);
      
      vector4_0.hashCode();
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.x(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals((-1483.5097423375), vector4_0.x, 0.01);
      assertEquals((-1483.5097423375), vector4_0.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(49.9493440026, 1906.375, 1906.375, 49.9493440026);
      assertEquals(49.9493440026, vector4_0.x(), 0.01);
      assertEquals(1906.375, vector4_0.y(), 0.01);
      assertEquals(1906.375, vector4_0.z(), 0.01);
      assertEquals(49.9493440026, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(49.9493440026, vector4_0.x, 0.01);
      assertEquals(49.9493440026, vector4_0.w, 0.01);
      assertEquals(1906.375, vector4_0.z, 0.01);
      assertEquals(1906.375, vector4_0.y, 0.01);
      
      vector4_0.hashCode();
      assertEquals(49.9493440026, vector4_0.x(), 0.01);
      assertEquals(1906.375, vector4_0.y(), 0.01);
      assertEquals(1906.375, vector4_0.z(), 0.01);
      assertEquals(49.9493440026, vector4_0.w(), 0.01);
      assertEquals(49.9493440026, vector4_0.x, 0.01);
      assertEquals(49.9493440026, vector4_0.w, 0.01);
      assertEquals(1906.375, vector4_0.z, 0.01);
      assertEquals(1906.375, vector4_0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-0.9999900000002526), (-119.882330617), (-0.9999900000002526), (-892.261586));
      assertEquals((-119.882330617), vector4_0.y(), 0.01);
      assertEquals((-892.261586), vector4_0.w(), 0.01);
      assertEquals((-0.9999900000002526), vector4_0.x(), 0.01);
      assertEquals((-0.9999900000002526), vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals((-0.9999900000002526), vector4_0.x, 0.01);
      assertEquals((-119.882330617), vector4_0.y, 0.01);
      assertEquals((-0.9999900000002526), vector4_0.z, 0.01);
      assertEquals((-892.261586), vector4_0.w, 0.01);
      
      String string0 = vector4_0.toString();
      assertEquals((-119.882330617), vector4_0.y(), 0.01);
      assertEquals((-892.261586), vector4_0.w(), 0.01);
      assertEquals((-0.9999900000002526), vector4_0.x(), 0.01);
      assertEquals((-0.9999900000002526), vector4_0.z(), 0.01);
      assertNotNull(string0);
      assertEquals("[-0.9999900000002526, -119.882330617, -0.9999900000002526, -892.261586]", string0);
      assertEquals((-0.9999900000002526), vector4_0.x, 0.01);
      assertEquals((-119.882330617), vector4_0.y, 0.01);
      assertEquals((-0.9999900000002526), vector4_0.z, 0.01);
      assertEquals((-892.261586), vector4_0.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0, 1125.733229038855, 1125.733229038855, (-4.552786261316881E-7));
      assertEquals((-4.552786261316881E-7), vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(1125.733229038855, vector4_0.y(), 0.01);
      assertEquals(1125.733229038855, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-4.552786261316881E-7), vector4_0.w, 0.01);
      assertEquals(1125.733229038855, vector4_0.y, 0.01);
      assertEquals(1125.733229038855, vector4_0.z, 0.01);
      
      String string0 = vector4_0.toString();
      assertEquals((-4.552786261316881E-7), vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(1125.733229038855, vector4_0.y(), 0.01);
      assertEquals(1125.733229038855, vector4_0.z(), 0.01);
      assertNotNull(string0);
      assertEquals("[0.0, 1125.733229038855, 1125.733229038855, -4.552786261316881E-7]", string0);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-4.552786261316881E-7), vector4_0.w, 0.01);
      assertEquals(1125.733229038855, vector4_0.y, 0.01);
      assertEquals(1125.733229038855, vector4_0.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4((-1399.47), 0.0, (-1154.57145005715), (-1399.47), 0.0, 62.21065693, (-1154.57145005715), 9.999999747378752E-6, (-1399.47), 9.999999747378752E-6, 151.774136075986, 0.0, (-1154.57145005715), 1.0, 1.0, 1.0);
      assertEquals(1.0, matrix4_0.m23(), 0.01);
      assertEquals((-1154.57145005715), matrix4_0.m20(), 0.01);
      assertEquals(1.0, matrix4_0.m13(), 0.01);
      assertEquals(9.999999747378752E-6, matrix4_0.m12(), 0.01);
      assertEquals(9.999999747378752E-6, matrix4_0.m31(), 0.01);
      assertEquals((-1154.57145005715), matrix4_0.m21(), 0.01);
      assertEquals(1.0, matrix4_0.m33(), 0.01);
      assertEquals((-1399.47), matrix4_0.m02(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-1399.47), matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m01(), 0.01);
      assertEquals(62.21065693, matrix4_0.m11(), 0.01);
      assertEquals((-1399.47), matrix4_0.m30(), 0.01);
      assertEquals(0.0, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(151.774136075986, matrix4_0.m22(), 0.01);
      assertTrue(matrix4_0.isMirrored());
      assertEquals((-1154.57145005715), matrix4_0.m03(), 0.01);
      assertEquals((-484.5019263672027), matrix4_0.approximateUniformScale(), 0.01);
      assertNotNull(matrix4_0);
      assertEquals((-1399.47), matrix4_0.m00, 0.01);
      assertEquals(9.999999747378752E-6, matrix4_0.m31, 0.01);
      assertEquals((-1154.57145005715), matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m32, 0.01);
      assertEquals(9.999999747378752E-6, matrix4_0.m12, 0.01);
      assertEquals(0.0, matrix4_0.m01, 0.01);
      assertEquals((-1399.47), matrix4_0.m30, 0.01);
      assertEquals((-1399.47), matrix4_0.m02, 0.01);
      assertEquals((-1154.57145005715), matrix4_0.m03, 0.01);
      assertEquals(151.774136075986, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m33, 0.01);
      assertEquals(1.0, matrix4_0.m23, 0.01);
      assertEquals(1.0, matrix4_0.m13, 0.01);
      assertEquals((-1154.57145005715), matrix4_0.m21, 0.01);
      assertEquals(62.21065693, matrix4_0.m11, 0.01);
      
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0, vector4_0);
      assertEquals(1.0, matrix4_0.m23(), 0.01);
      assertEquals((-1154.57145005715), matrix4_0.m20(), 0.01);
      assertEquals(1.0, matrix4_0.m13(), 0.01);
      assertEquals(9.999999747378752E-6, matrix4_0.m12(), 0.01);
      assertEquals(9.999999747378752E-6, matrix4_0.m31(), 0.01);
      assertEquals((-1154.57145005715), matrix4_0.m21(), 0.01);
      assertEquals(1.0, matrix4_0.m33(), 0.01);
      assertEquals((-1399.47), matrix4_0.m02(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-1399.47), matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m01(), 0.01);
      assertEquals(62.21065693, matrix4_0.m11(), 0.01);
      assertEquals((-1399.47), matrix4_0.m30(), 0.01);
      assertEquals(0.0, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(151.774136075986, matrix4_0.m22(), 0.01);
      assertTrue(matrix4_0.isMirrored());
      assertEquals((-1154.57145005715), matrix4_0.m03(), 0.01);
      assertEquals((-484.5019263672027), matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals((-1399.47), matrix4_0.m00, 0.01);
      assertEquals(9.999999747378752E-6, matrix4_0.m31, 0.01);
      assertEquals((-1154.57145005715), matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m32, 0.01);
      assertEquals(9.999999747378752E-6, matrix4_0.m12, 0.01);
      assertEquals(0.0, matrix4_0.m01, 0.01);
      assertEquals((-1399.47), matrix4_0.m30, 0.01);
      assertEquals((-1399.47), matrix4_0.m02, 0.01);
      assertEquals((-1154.57145005715), matrix4_0.m03, 0.01);
      assertEquals(151.774136075986, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m33, 0.01);
      assertEquals(1.0, matrix4_0.m23, 0.01);
      assertEquals(1.0, matrix4_0.m13, 0.01);
      assertEquals((-1154.57145005715), matrix4_0.m21, 0.01);
      assertEquals(62.21065693, matrix4_0.m11, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6);
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(9.999999747378752E-6, vector4_0.z, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
      
      Vector4 vector4_1 = new Vector4(vector4_0);
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.w(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.z(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(9.999999747378752E-6, vector4_0.z, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.w, 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.z, 0.01);
      
      vector4_1.w = 25.090273318226107;
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.z(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.y(), 0.01);
      assertEquals(25.090273318226107, vector4_1.w(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.x(), 0.01);
      
      boolean boolean0 = vector4_1.epsilonEquals(vector4_0, 9.999999747378752E-6);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.z(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.y(), 0.01);
      assertEquals(25.090273318226107, vector4_1.w(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.x(), 0.01);
      assertFalse(boolean0);
      assertEquals(9.999999747378752E-6, vector4_0.z, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
      assertEquals(25.090273318226107, vector4_1.w, 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.z, 0.01);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      
      vector4_0.z = (-3310.82242361);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals((-3310.82242361), vector4_0.z(), 0.01);
      
      Vector4 vector4_1 = new Vector4(0.0, -0.0, 0.9999900000002526, -0.0);
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(-0.0, vector4_1.w(), 0.01);
      assertEquals(0.9999900000002526, vector4_1.z(), 0.01);
      assertEquals(-0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(-0.0, vector4_1.y, 0.01);
      assertEquals(-0.0, vector4_1.w, 0.01);
      assertEquals(0.9999900000002526, vector4_1.z, 0.01);
      
      boolean boolean0 = vector4_0.epsilonEquals(vector4_1, 0.9999900000002526);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals((-3310.82242361), vector4_0.z(), 0.01);
      assertEquals(-0.0, vector4_1.w(), 0.01);
      assertEquals(0.9999900000002526, vector4_1.z(), 0.01);
      assertEquals(-0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-3310.82242361), vector4_0.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(-0.0, vector4_1.y, 0.01);
      assertEquals(-0.0, vector4_1.w, 0.01);
      assertEquals(0.9999900000002526, vector4_1.z, 0.01);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      
      vector4_0.z = (-3310.82242361);
      assertEquals((-3310.82242361), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      
      boolean boolean0 = vector4_0.epsilonEquals(vector4_0, 0.9999900000002526);
      assertEquals((-3310.82242361), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-3310.82242361), vector4_0.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      
      Vector4 vector4_1 = new Vector4(0.0, (-830.054469137), (-229.9879004), (-830.054469137));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals((-229.9879004), vector4_1.z(), 0.01);
      assertEquals((-830.054469137), vector4_1.y(), 0.01);
      assertEquals((-830.054469137), vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals((-229.9879004), vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals((-830.054469137), vector4_1.y, 0.01);
      assertEquals((-830.054469137), vector4_1.w, 0.01);
      
      boolean boolean0 = vector4_0.epsilonEquals(vector4_1, 1.5707963267948966);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals((-229.9879004), vector4_1.z(), 0.01);
      assertEquals((-830.054469137), vector4_1.y(), 0.01);
      assertEquals((-830.054469137), vector4_1.w(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals((-229.9879004), vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals((-830.054469137), vector4_1.y, 0.01);
      assertEquals((-830.054469137), vector4_1.w, 0.01);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-3310.82242361);
      Vector4 vector4_1 = vector4_0.set(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-3310.82242361), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals((-3310.82242361), vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals((-3310.82242361), vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-3310.82242361), vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals((-3310.82242361), vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(8, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      boolean boolean0 = vector4_1.epsilonEquals(vector4_0, 1483.5097423375);
      assertArrayEquals(new double[] {0.0, (-3310.82242361), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals((-3310.82242361), vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals((-3310.82242361), vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-3310.82242361), vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals((-3310.82242361), vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(8, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4((-1483.5097423375), 1526.0, 638.4, 1526.0, 1.0, 4654.0, 1526.0, 1.0, 50.2413005, (-2700.32), 0.0, (-1483.5097423375), 0.0, (-1.0), 1.0, (-1483.5097423375));
      assertEquals(638.4, matrix4_0.m20(), 0.01);
      assertEquals(1.0, matrix4_0.m01(), 0.01);
      assertEquals(1.0, matrix4_0.m23(), 0.01);
      assertEquals(4654.0, matrix4_0.m11(), 0.01);
      assertEquals((-2700.32), matrix4_0.m12(), 0.01);
      assertEquals(1.0, matrix4_0.m31(), 0.01);
      assertEquals(50.2413005, matrix4_0.m02(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m32(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-1.0), matrix4_0.m13(), 0.01);
      assertEquals((-1831.8489929293412), matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, matrix4_0.m22(), 0.01);
      assertEquals(1526.0, matrix4_0.m21(), 0.01);
      assertEquals(1526.0, matrix4_0.m10(), 0.01);
      assertTrue(matrix4_0.isMirrored());
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertEquals(1526.0, matrix4_0.m30(), 0.01);
      assertNotNull(matrix4_0);
      assertEquals(4654.0, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m31, 0.01);
      assertEquals(1.0, matrix4_0.m01, 0.01);
      assertEquals(1.0, matrix4_0.m23, 0.01);
      assertEquals((-1.0), matrix4_0.m13, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m32, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33, 0.01);
      assertEquals(638.4, matrix4_0.m20, 0.01);
      assertEquals((-2700.32), matrix4_0.m12, 0.01);
      assertEquals(50.2413005, matrix4_0.m02, 0.01);
      assertEquals(1526.0, matrix4_0.m10, 0.01);
      assertEquals(1526.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m22, 0.01);
      assertEquals(1526.0, matrix4_0.m30, 0.01);
      
      Vector4 vector4_0 = new Vector4((-1483.5097423375), 0.0, (-1483.5097423375), 0.0);
      assertEquals((-1483.5097423375), vector4_0.x(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals((-1483.5097423375), vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals((-1483.5097423375), vector4_0.x, 0.01);
      
      Vector4 vector4_1 = new Vector4(vector4_0);
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertEquals((-1483.5097423375), vector4_0.x(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals((-1483.5097423375), vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals((-1483.5097423375), vector4_0.x, 0.01);
      assertEquals((-1483.5097423375), vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals((-1483.5097423375), vector4_1.x, 0.01);
      
      Vector4 vector4_2 = matrix4_0.transform((IVector4) vector4_1, vector4_0);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertFalse(vector4_2.equals((Object)vector4_1));
      assertEquals(638.4, matrix4_0.m20(), 0.01);
      assertEquals(1.0, matrix4_0.m01(), 0.01);
      assertEquals(1.0, matrix4_0.m23(), 0.01);
      assertEquals(4654.0, matrix4_0.m11(), 0.01);
      assertEquals((-2700.32), matrix4_0.m12(), 0.01);
      assertEquals(1.0, matrix4_0.m31(), 0.01);
      assertEquals(50.2413005, matrix4_0.m02(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m32(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-1.0), matrix4_0.m13(), 0.01);
      assertEquals((-1831.8489929293412), matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, matrix4_0.m22(), 0.01);
      assertEquals(1526.0, matrix4_0.m21(), 0.01);
      assertEquals(1526.0, matrix4_0.m10(), 0.01);
      assertTrue(matrix4_0.isMirrored());
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertEquals(1526.0, matrix4_0.m30(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.w(), 0.01);
      assertEquals(1253728.536102016, vector4_0.x(), 0.01);
      assertEquals((-74533.45875945591), vector4_0.z(), 0.01);
      assertEquals((-2265319.376549362), vector4_0.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(1253728.536102016, vector4_2.x(), 0.01);
      assertEquals((-2265319.376549362), vector4_2.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_2.w(), 0.01);
      assertEquals((-74533.45875945591), vector4_2.z(), 0.01);
      assertNotNull(vector4_2);
      assertEquals(4654.0, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m31, 0.01);
      assertEquals(1.0, matrix4_0.m01, 0.01);
      assertEquals(1.0, matrix4_0.m23, 0.01);
      assertEquals((-1.0), matrix4_0.m13, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m32, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33, 0.01);
      assertEquals(638.4, matrix4_0.m20, 0.01);
      assertEquals((-2700.32), matrix4_0.m12, 0.01);
      assertEquals(50.2413005, matrix4_0.m02, 0.01);
      assertEquals(1526.0, matrix4_0.m10, 0.01);
      assertEquals(1526.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m22, 0.01);
      assertEquals(1526.0, matrix4_0.m30, 0.01);
      assertEquals((-74533.45875945591), vector4_0.z, 0.01);
      assertEquals(1253728.536102016, vector4_0.x, 0.01);
      assertEquals((-1483.5097423375), vector4_0.w, 0.01);
      assertEquals((-2265319.376549362), vector4_0.y, 0.01);
      assertEquals((-1483.5097423375), vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals((-1483.5097423375), vector4_1.x, 0.01);
      assertEquals(1253728.536102016, vector4_2.x, 0.01);
      assertEquals((-2265319.376549362), vector4_2.y, 0.01);
      assertEquals((-1483.5097423375), vector4_2.w, 0.01);
      assertEquals((-74533.45875945591), vector4_2.z, 0.01);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertNotSame(vector4_1, vector4_2);
      assertSame(vector4_2, vector4_0);
      assertNotSame(vector4_2, vector4_1);
      
      boolean boolean0 = vector4_0.epsilonEquals(vector4_1, 0.0);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertFalse(vector4_1.equals((Object)vector4_2));
      assertEquals((-1483.5097423375), vector4_0.w(), 0.01);
      assertEquals(1253728.536102016, vector4_0.x(), 0.01);
      assertEquals((-74533.45875945591), vector4_0.z(), 0.01);
      assertEquals((-2265319.376549362), vector4_0.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertFalse(boolean0);
      assertEquals((-74533.45875945591), vector4_0.z, 0.01);
      assertEquals(1253728.536102016, vector4_0.x, 0.01);
      assertEquals((-1483.5097423375), vector4_0.w, 0.01);
      assertEquals((-2265319.376549362), vector4_0.y, 0.01);
      assertEquals((-1483.5097423375), vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals((-1483.5097423375), vector4_1.x, 0.01);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertNotSame(vector4_1, vector4_2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4((-1483.5097423375), 1526.0, 638.4, 1526.0, 1.0, 4654.0, 1526.0, 1.0, 50.2413005, (-2700.32), 0.0, (-1483.5097423375), 0.0, (-1.0), 1.0, (-1483.5097423375));
      assertEquals(1526.0, matrix4_0.m30(), 0.01);
      assertEquals((-2700.32), matrix4_0.m12(), 0.01);
      assertEquals(638.4, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m22(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(50.2413005, matrix4_0.m02(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33(), 0.01);
      assertTrue(matrix4_0.isMirrored());
      assertEquals((-1483.5097423375), matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertEquals(4654.0, matrix4_0.m11(), 0.01);
      assertEquals(1.0, matrix4_0.m01(), 0.01);
      assertEquals(1.0, matrix4_0.m23(), 0.01);
      assertEquals((-1.0), matrix4_0.m13(), 0.01);
      assertEquals(1526.0, matrix4_0.m21(), 0.01);
      assertEquals(1526.0, matrix4_0.m10(), 0.01);
      assertEquals(1.0, matrix4_0.m31(), 0.01);
      assertEquals((-1831.8489929293412), matrix4_0.approximateUniformScale(), 0.01);
      assertNotNull(matrix4_0);
      assertEquals(638.4, matrix4_0.m20, 0.01);
      assertEquals(1.0, matrix4_0.m01, 0.01);
      assertEquals(1.0, matrix4_0.m23, 0.01);
      assertEquals((-1.0), matrix4_0.m13, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m32, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33, 0.01);
      assertEquals(4654.0, matrix4_0.m11, 0.01);
      assertEquals(0.0, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m31, 0.01);
      assertEquals(50.2413005, matrix4_0.m02, 0.01);
      assertEquals(1526.0, matrix4_0.m30, 0.01);
      assertEquals(1526.0, matrix4_0.m10, 0.01);
      assertEquals(1526.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals((-2700.32), matrix4_0.m12, 0.01);
      
      Vector4 vector4_0 = new Vector4((-1483.5097423375), 0.0, (-1483.5097423375), 0.0);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.x(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals((-1483.5097423375), vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals((-1483.5097423375), vector4_0.x, 0.01);
      
      Vector4 vector4_1 = matrix4_0.transform((IVector4) vector4_0, vector4_0);
      assertEquals(1526.0, matrix4_0.m30(), 0.01);
      assertEquals((-2700.32), matrix4_0.m12(), 0.01);
      assertEquals(638.4, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m22(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(50.2413005, matrix4_0.m02(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33(), 0.01);
      assertTrue(matrix4_0.isMirrored());
      assertEquals((-1483.5097423375), matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertEquals(4654.0, matrix4_0.m11(), 0.01);
      assertEquals(1.0, matrix4_0.m01(), 0.01);
      assertEquals(1.0, matrix4_0.m23(), 0.01);
      assertEquals((-1.0), matrix4_0.m13(), 0.01);
      assertEquals(1526.0, matrix4_0.m21(), 0.01);
      assertEquals(1526.0, matrix4_0.m10(), 0.01);
      assertEquals(1.0, matrix4_0.m31(), 0.01);
      assertEquals((-1831.8489929293412), matrix4_0.approximateUniformScale(), 0.01);
      assertEquals((-2265319.376549362), vector4_0.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.w(), 0.01);
      assertEquals(1253728.536102016, vector4_0.x(), 0.01);
      assertEquals((-74533.45875945591), vector4_0.z(), 0.01);
      assertEquals((-74533.45875945591), vector4_1.z(), 0.01);
      assertEquals(1253728.536102016, vector4_1.x(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.w(), 0.01);
      assertEquals((-2265319.376549362), vector4_1.y(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(638.4, matrix4_0.m20, 0.01);
      assertEquals(1.0, matrix4_0.m01, 0.01);
      assertEquals(1.0, matrix4_0.m23, 0.01);
      assertEquals((-1.0), matrix4_0.m13, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m32, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33, 0.01);
      assertEquals(4654.0, matrix4_0.m11, 0.01);
      assertEquals(0.0, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m31, 0.01);
      assertEquals(50.2413005, matrix4_0.m02, 0.01);
      assertEquals(1526.0, matrix4_0.m30, 0.01);
      assertEquals(1526.0, matrix4_0.m10, 0.01);
      assertEquals(1526.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals((-2700.32), matrix4_0.m12, 0.01);
      assertEquals(1253728.536102016, vector4_0.x, 0.01);
      assertEquals((-2265319.376549362), vector4_0.y, 0.01);
      assertEquals((-74533.45875945591), vector4_0.z, 0.01);
      assertEquals((-1483.5097423375), vector4_0.w, 0.01);
      assertEquals((-2265319.376549362), vector4_1.y, 0.01);
      assertEquals((-1483.5097423375), vector4_1.w, 0.01);
      assertEquals(1253728.536102016, vector4_1.x, 0.01);
      assertEquals((-74533.45875945591), vector4_1.z, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      boolean boolean0 = vector4_0.epsilonEquals(vector4_0, 0.0);
      assertEquals((-2265319.376549362), vector4_0.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.w(), 0.01);
      assertEquals(1253728.536102016, vector4_0.x(), 0.01);
      assertEquals((-74533.45875945591), vector4_0.z(), 0.01);
      assertFalse(boolean0);
      assertEquals(1253728.536102016, vector4_0.x, 0.01);
      assertEquals((-2265319.376549362), vector4_0.y, 0.01);
      assertEquals((-74533.45875945591), vector4_0.z, 0.01);
      assertEquals((-1483.5097423375), vector4_0.w, 0.01);
      assertSame(vector4_0, vector4_1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m31(), 0.01);
      assertEquals(1.0, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, matrix4_0.m30(), 0.01);
      assertEquals(0.0, matrix4_0.m02(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(0.0, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m12(), 0.01);
      assertEquals(0.0, matrix4_0.m23(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(1.0, matrix4_0.m00(), 0.01);
      assertEquals(1.0, matrix4_0.m22(), 0.01);
      assertEquals(1.0, matrix4_0.m33(), 0.01);
      assertEquals(1.0, matrix4_0.m11(), 0.01);
      assertEquals(0.0, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertNotNull(matrix4_0);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m31, 0.01);
      assertEquals(1.0, matrix4_0.m00, 0.01);
      assertEquals(1.0, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m33, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m30, 0.01);
      assertEquals(0.0, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(0.0, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m12, 0.01);
      assertEquals(0.0, matrix4_0.m23, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m32, 0.01);
      
      Vector4 vector4_0 = new Vector4(0.0, (-1946.1094771), 0.0, 0.0);
      assertEquals((-1946.1094771), vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-1946.1094771), vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      
      Matrix4 matrix4_1 = matrix4_0.setToOrtho(-0.0, 4.0, (-2251.6723), 0.0, 0.0, 0.0);
      assertEquals(Double.NaN, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(0.0, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m23(), 0.01);
      assertEquals(0.5, matrix4_0.m00(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(8.882287178289664E-4, matrix4_0.m11(), 0.01);
      assertEquals(1.0, matrix4_0.m31(), 0.01);
      assertEquals((-1.0), matrix4_0.m30(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, matrix4_0.m22(), 0.01);
      assertEquals(1.0, matrix4_0.m33(), 0.01);
      assertEquals(0.0, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m02(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m12(), 0.01);
      assertEquals(1.0, matrix4_1.m31(), 0.01);
      assertEquals((-1.0), matrix4_1.m30(), 0.01);
      assertEquals(0.0, matrix4_1.m03(), 0.01);
      assertEquals(Double.NaN, matrix4_1.approximateUniformScale(), 0.01);
      assertTrue(matrix4_1.isAffine());
      assertEquals(Double.POSITIVE_INFINITY, matrix4_1.m22(), 0.01);
      assertEquals(1.0, matrix4_1.m33(), 0.01);
      assertFalse(matrix4_1.isMirrored());
      assertEquals(Double.NaN, matrix4_1.m32(), 0.01);
      assertEquals(0.0, matrix4_1.m20(), 0.01);
      assertEquals(Double.NaN, matrix4_1.m02(), 0.01);
      assertEquals(Double.NaN, matrix4_1.m12(), 0.01);
      assertEquals(8.882287178289664E-4, matrix4_1.m11(), 0.01);
      assertEquals(0.0, matrix4_1.m21(), 0.01);
      assertEquals(0.0, matrix4_1.m10(), 0.01);
      assertEquals(0.0, matrix4_1.m13(), 0.01);
      assertEquals(0.0, matrix4_1.m01(), 0.01);
      assertEquals(0.0, matrix4_1.m23(), 0.01);
      assertEquals(0.5, matrix4_1.m00(), 0.01);
      assertNotNull(matrix4_1);
      assertEquals(Double.NaN, matrix4_0.m02, 0.01);
      assertEquals(Double.NaN, matrix4_0.m12, 0.01);
      assertEquals(Double.NaN, matrix4_0.m32, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals((-1.0), matrix4_0.m30, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m33, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals(8.882287178289664E-4, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m31, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(0.0, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m23, 0.01);
      assertEquals(0.5, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_1.m03, 0.01);
      assertEquals(0.0, matrix4_1.m01, 0.01);
      assertEquals(0.0, matrix4_1.m23, 0.01);
      assertEquals(0.5, matrix4_1.m00, 0.01);
      assertEquals(0.0, matrix4_1.m10, 0.01);
      assertEquals(0.0, matrix4_1.m21, 0.01);
      assertEquals((-1.0), matrix4_1.m30, 0.01);
      assertEquals(Double.NaN, matrix4_1.m12, 0.01);
      assertEquals(Double.NaN, matrix4_1.m32, 0.01);
      assertEquals(1.0, matrix4_1.m31, 0.01);
      assertEquals(Double.NaN, matrix4_1.m02, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, matrix4_1.m22, 0.01);
      assertEquals(1.0, matrix4_1.m33, 0.01);
      assertEquals(0.0, matrix4_1.m13, 0.01);
      assertEquals(8.882287178289664E-4, matrix4_1.m11, 0.01);
      assertEquals(0.0, matrix4_1.m20, 0.01);
      assertSame(matrix4_0, matrix4_1);
      assertSame(matrix4_1, matrix4_0);
      
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0);
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(Double.NaN, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(0.0, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m23(), 0.01);
      assertEquals(0.5, matrix4_0.m00(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(8.882287178289664E-4, matrix4_0.m11(), 0.01);
      assertEquals(1.0, matrix4_0.m31(), 0.01);
      assertEquals((-1.0), matrix4_0.m30(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, matrix4_0.m22(), 0.01);
      assertEquals(1.0, matrix4_0.m33(), 0.01);
      assertEquals(0.0, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m02(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m12(), 0.01);
      assertEquals((-1946.1094771), vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(Double.NaN, vector4_1.z(), 0.01);
      assertEquals(Double.NaN, vector4_1.w(), 0.01);
      assertEquals(Double.NaN, vector4_1.y(), 0.01);
      assertEquals(Double.NaN, vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(Double.NaN, matrix4_0.m02, 0.01);
      assertEquals(Double.NaN, matrix4_0.m12, 0.01);
      assertEquals(Double.NaN, matrix4_0.m32, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals((-1.0), matrix4_0.m30, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m33, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals(8.882287178289664E-4, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m31, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(0.0, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m23, 0.01);
      assertEquals(0.5, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-1946.1094771), vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(Double.NaN, vector4_1.x, 0.01);
      assertEquals(Double.NaN, vector4_1.z, 0.01);
      assertEquals(Double.NaN, vector4_1.w, 0.01);
      assertEquals(Double.NaN, vector4_1.y, 0.01);
      assertSame(matrix4_0, matrix4_1);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(9);
      assertFalse(doubleBuffer0.isReadOnly());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(9, doubleBuffer0.limit());
      assertEquals(9, doubleBuffer0.capacity());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(0, doubleBuffer0.position());
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=9 cap=9]", doubleBuffer0.toString());
      assertFalse(doubleBuffer0.isDirect());
      assertEquals(9, doubleBuffer0.remaining());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertNotNull(doubleBuffer0);
      
      DoubleBuffer doubleBuffer1 = vector4_1.get(doubleBuffer0);
      assertFalse(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(Double.NaN, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(0.0, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m23(), 0.01);
      assertEquals(0.5, matrix4_0.m00(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(8.882287178289664E-4, matrix4_0.m11(), 0.01);
      assertEquals(1.0, matrix4_0.m31(), 0.01);
      assertEquals((-1.0), matrix4_0.m30(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, matrix4_0.m22(), 0.01);
      assertEquals(1.0, matrix4_0.m33(), 0.01);
      assertEquals(0.0, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m02(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m12(), 0.01);
      assertEquals((-1946.1094771), vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(Double.NaN, vector4_1.z(), 0.01);
      assertEquals(Double.NaN, vector4_1.w(), 0.01);
      assertEquals(Double.NaN, vector4_1.y(), 0.01);
      assertEquals(Double.NaN, vector4_1.x(), 0.01);
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(5, doubleBuffer0.remaining());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=9 cap=9]", doubleBuffer0.toString());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(9, doubleBuffer0.limit());
      assertEquals(9, doubleBuffer0.capacity());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(4, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isDirect());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(9, doubleBuffer1.capacity());
      assertEquals(9, doubleBuffer1.limit());
      assertEquals(5, doubleBuffer1.remaining());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=9 cap=9]", doubleBuffer1.toString());
      assertTrue(doubleBuffer1.hasRemaining());
      assertTrue(doubleBuffer1.hasArray());
      assertEquals(0, doubleBuffer1.arrayOffset());
      assertFalse(doubleBuffer1.isReadOnly());
      assertEquals(4, doubleBuffer1.position());
      assertFalse(doubleBuffer1.isDirect());
      assertNotNull(doubleBuffer1);
      assertEquals(Double.NaN, matrix4_0.m02, 0.01);
      assertEquals(Double.NaN, matrix4_0.m12, 0.01);
      assertEquals(Double.NaN, matrix4_0.m32, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals((-1.0), matrix4_0.m30, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m33, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals(8.882287178289664E-4, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m31, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(0.0, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m23, 0.01);
      assertEquals(0.5, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-1946.1094771), vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(Double.NaN, vector4_1.x, 0.01);
      assertEquals(Double.NaN, vector4_1.z, 0.01);
      assertEquals(Double.NaN, vector4_1.w, 0.01);
      assertEquals(Double.NaN, vector4_1.y, 0.01);
      assertSame(matrix4_0, matrix4_1);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
      assertSame(doubleBuffer0, doubleBuffer1);
      assertSame(doubleBuffer1, doubleBuffer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(2616.02112978, (-1202.4190421), (-692.8824991018472), 2616.02112978);
      assertEquals((-1202.4190421), vector4_0.y(), 0.01);
      assertEquals(2616.02112978, vector4_0.w(), 0.01);
      assertEquals(2616.02112978, vector4_0.x(), 0.01);
      assertEquals((-692.8824991018472), vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(2616.02112978, vector4_0.w, 0.01);
      assertEquals((-1202.4190421), vector4_0.y, 0.01);
      assertEquals(2616.02112978, vector4_0.x, 0.01);
      assertEquals((-692.8824991018472), vector4_0.z, 0.01);
      
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(2);
      assertTrue(doubleBuffer0.hasArray());
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=2 cap=2]", doubleBuffer0.toString());
      assertEquals(2, doubleBuffer0.limit());
      assertEquals(2, doubleBuffer0.remaining());
      assertTrue(doubleBuffer0.hasRemaining());
      assertFalse(doubleBuffer0.isDirect());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(2, doubleBuffer0.capacity());
      assertEquals(0, doubleBuffer0.position());
      assertNotNull(doubleBuffer0);
      
      // Undeclared exception!
      try { 
        vector4_0.get(doubleBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(3952);
      assertEquals(3952, doubleBuffer0.limit());
      assertEquals(3952, doubleBuffer0.remaining());
      assertEquals(3952, doubleBuffer0.capacity());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(0, doubleBuffer0.position());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertFalse(doubleBuffer0.isDirect());
      assertTrue(doubleBuffer0.hasRemaining());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=3952 cap=3952]", doubleBuffer0.toString());
      assertNotNull(doubleBuffer0);
      
      Vector4 vector4_0 = new Vector4(doubleBuffer0);
      assertEquals(4, doubleBuffer0.position());
      assertEquals(3952, doubleBuffer0.limit());
      assertEquals(3952, doubleBuffer0.capacity());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=3952 cap=3952]", doubleBuffer0.toString());
      assertEquals(3948, doubleBuffer0.remaining());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertFalse(doubleBuffer0.isDirect());
      assertTrue(doubleBuffer0.hasRemaining());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      
      double double0 = vector4_0.z();
      assertEquals(4, doubleBuffer0.position());
      assertEquals(3952, doubleBuffer0.limit());
      assertEquals(3952, doubleBuffer0.capacity());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=3952 cap=3952]", doubleBuffer0.toString());
      assertEquals(3948, doubleBuffer0.remaining());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertFalse(doubleBuffer0.isDirect());
      assertTrue(doubleBuffer0.hasRemaining());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      
      vector4_0.z = (-3310.82242361);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals((-3310.82242361), vector4_0.z(), 0.01);
      
      Vector4 vector4_1 = vector4_0.negateLocal();
      assertEquals(-0.0, vector4_0.x(), 0.01);
      assertEquals(-0.0, vector4_0.w(), 0.01);
      assertEquals(-0.0, vector4_0.y(), 0.01);
      assertEquals(3310.82242361, vector4_0.z(), 0.01);
      assertEquals(-0.0, vector4_1.w(), 0.01);
      assertEquals(3310.82242361, vector4_1.z(), 0.01);
      assertEquals(-0.0, vector4_1.y(), 0.01);
      assertEquals(-0.0, vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(3310.82242361, vector4_0.z, 0.01);
      assertEquals(-0.0, vector4_0.y, 0.01);
      assertEquals(-0.0, vector4_0.x, 0.01);
      assertEquals(-0.0, vector4_0.w, 0.01);
      assertEquals(-0.0, vector4_1.y, 0.01);
      assertEquals(-0.0, vector4_1.x, 0.01);
      assertEquals(3310.82242361, vector4_1.z, 0.01);
      assertEquals(-0.0, vector4_1.w, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      double double0 = vector4_0.z();
      assertEquals(-0.0, vector4_0.x(), 0.01);
      assertEquals(-0.0, vector4_0.w(), 0.01);
      assertEquals(-0.0, vector4_0.y(), 0.01);
      assertEquals(3310.82242361, vector4_0.z(), 0.01);
      assertEquals(3310.82242361, double0, 0.01);
      assertEquals(3310.82242361, vector4_0.z, 0.01);
      assertEquals(-0.0, vector4_0.y, 0.01);
      assertEquals(-0.0, vector4_0.x, 0.01);
      assertEquals(-0.0, vector4_0.w, 0.01);
      assertSame(vector4_0, vector4_1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-1.0);
      Vector4 vector4_0 = new Vector4(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1.0), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-1.0), vector4_0.z, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double0 = vector4_0.z();
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1.0), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-1.0), vector4_0.z, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      
      double double0 = vector4_0.y();
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-0.9999900000002526), (-119.882330617), (-0.9999900000002526), (-892.261586));
      assertEquals((-0.9999900000002526), vector4_0.x(), 0.01);
      assertEquals((-0.9999900000002526), vector4_0.z(), 0.01);
      assertEquals((-892.261586), vector4_0.w(), 0.01);
      assertEquals((-119.882330617), vector4_0.y(), 0.01);
      assertNotNull(vector4_0);
      assertEquals((-0.9999900000002526), vector4_0.x, 0.01);
      assertEquals((-892.261586), vector4_0.w, 0.01);
      assertEquals((-0.9999900000002526), vector4_0.z, 0.01);
      assertEquals((-119.882330617), vector4_0.y, 0.01);
      
      Vector4 vector4_1 = vector4_0.negate(vector4_0);
      assertEquals(0.9999900000002526, vector4_0.x(), 0.01);
      assertEquals(0.9999900000002526, vector4_0.z(), 0.01);
      assertEquals(892.261586, vector4_0.w(), 0.01);
      assertEquals(119.882330617, vector4_0.y(), 0.01);
      assertEquals(119.882330617, vector4_1.y(), 0.01);
      assertEquals(0.9999900000002526, vector4_1.x(), 0.01);
      assertEquals(892.261586, vector4_1.w(), 0.01);
      assertEquals(0.9999900000002526, vector4_1.z(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.9999900000002526, vector4_0.x, 0.01);
      assertEquals(892.261586, vector4_0.w, 0.01);
      assertEquals(0.9999900000002526, vector4_0.z, 0.01);
      assertEquals(119.882330617, vector4_0.y, 0.01);
      assertEquals(119.882330617, vector4_1.y, 0.01);
      assertEquals(0.9999900000002526, vector4_1.x, 0.01);
      assertEquals(0.9999900000002526, vector4_1.z, 0.01);
      assertEquals(892.261586, vector4_1.w, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      double double0 = vector4_0.y();
      assertEquals(0.9999900000002526, vector4_0.x(), 0.01);
      assertEquals(0.9999900000002526, vector4_0.z(), 0.01);
      assertEquals(892.261586, vector4_0.w(), 0.01);
      assertEquals(119.882330617, vector4_0.y(), 0.01);
      assertEquals(119.882330617, double0, 0.01);
      assertEquals(0.9999900000002526, vector4_0.x, 0.01);
      assertEquals(892.261586, vector4_0.w, 0.01);
      assertEquals(0.9999900000002526, vector4_0.z, 0.01);
      assertEquals(119.882330617, vector4_0.y, 0.01);
      assertSame(vector4_0, vector4_1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      
      double double0 = vector4_0.x();
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      
      vector4_0.x = 698.864;
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(698.864, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      
      double double0 = vector4_0.x();
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(698.864, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(698.864, double0, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(698.864, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      
      double double0 = vector4_0.w();
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6);
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(9.999999747378752E-6, vector4_0.z, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
      
      double double0 = vector4_0.w();
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertEquals(9.999999747378752E-6, double0, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.z, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4((-1483.5097423375), 1526.0, 638.4, 1526.0, 1.0, 4654.0, 1526.0, 1.0, 50.2413005, (-2700.32), 0.0, (-1483.5097423375), 0.0, (-1.0), 1.0, (-1483.5097423375));
      assertEquals(1.0, matrix4_0.m31(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m32(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33(), 0.01);
      assertEquals(50.2413005, matrix4_0.m02(), 0.01);
      assertEquals(4654.0, matrix4_0.m11(), 0.01);
      assertEquals(1.0, matrix4_0.m01(), 0.01);
      assertEquals(1.0, matrix4_0.m23(), 0.01);
      assertEquals((-1.0), matrix4_0.m13(), 0.01);
      assertTrue(matrix4_0.isMirrored());
      assertEquals(1526.0, matrix4_0.m21(), 0.01);
      assertEquals(1526.0, matrix4_0.m10(), 0.01);
      assertEquals(1526.0, matrix4_0.m30(), 0.01);
      assertEquals((-2700.32), matrix4_0.m12(), 0.01);
      assertEquals(0.0, matrix4_0.m22(), 0.01);
      assertEquals(638.4, matrix4_0.m20(), 0.01);
      assertEquals((-1831.8489929293412), matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertNotNull(matrix4_0);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33, 0.01);
      assertEquals(1.0, matrix4_0.m31, 0.01);
      assertEquals(4654.0, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m01, 0.01);
      assertEquals(1.0, matrix4_0.m23, 0.01);
      assertEquals((-1.0), matrix4_0.m13, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m32, 0.01);
      assertEquals(1526.0, matrix4_0.m30, 0.01);
      assertEquals(1526.0, matrix4_0.m10, 0.01);
      assertEquals(1526.0, matrix4_0.m21, 0.01);
      assertEquals(50.2413005, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m22, 0.01);
      assertEquals((-2700.32), matrix4_0.m12, 0.01);
      assertEquals(638.4, matrix4_0.m20, 0.01);
      
      Vector4 vector4_0 = new Vector4((-1483.5097423375), 0.0, (-1483.5097423375), 0.0);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.x(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals((-1483.5097423375), vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals((-1483.5097423375), vector4_0.z, 0.01);
      
      Vector4 vector4_1 = matrix4_0.transform((IVector4) vector4_0, vector4_0);
      assertEquals(1.0, matrix4_0.m31(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m32(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33(), 0.01);
      assertEquals(50.2413005, matrix4_0.m02(), 0.01);
      assertEquals(4654.0, matrix4_0.m11(), 0.01);
      assertEquals(1.0, matrix4_0.m01(), 0.01);
      assertEquals(1.0, matrix4_0.m23(), 0.01);
      assertEquals((-1.0), matrix4_0.m13(), 0.01);
      assertTrue(matrix4_0.isMirrored());
      assertEquals(1526.0, matrix4_0.m21(), 0.01);
      assertEquals(1526.0, matrix4_0.m10(), 0.01);
      assertEquals(1526.0, matrix4_0.m30(), 0.01);
      assertEquals((-2700.32), matrix4_0.m12(), 0.01);
      assertEquals(0.0, matrix4_0.m22(), 0.01);
      assertEquals(638.4, matrix4_0.m20(), 0.01);
      assertEquals((-1831.8489929293412), matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-74533.45875945591), vector4_0.z(), 0.01);
      assertEquals((-2265319.376549362), vector4_0.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.w(), 0.01);
      assertEquals(1253728.536102016, vector4_0.x(), 0.01);
      assertEquals(1253728.536102016, vector4_1.x(), 0.01);
      assertEquals((-74533.45875945591), vector4_1.z(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.w(), 0.01);
      assertEquals((-2265319.376549362), vector4_1.y(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33, 0.01);
      assertEquals(1.0, matrix4_0.m31, 0.01);
      assertEquals(4654.0, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m01, 0.01);
      assertEquals(1.0, matrix4_0.m23, 0.01);
      assertEquals((-1.0), matrix4_0.m13, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m32, 0.01);
      assertEquals(1526.0, matrix4_0.m30, 0.01);
      assertEquals(1526.0, matrix4_0.m10, 0.01);
      assertEquals(1526.0, matrix4_0.m21, 0.01);
      assertEquals(50.2413005, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m22, 0.01);
      assertEquals((-2700.32), matrix4_0.m12, 0.01);
      assertEquals(638.4, matrix4_0.m20, 0.01);
      assertEquals(1253728.536102016, vector4_0.x, 0.01);
      assertEquals((-1483.5097423375), vector4_0.w, 0.01);
      assertEquals((-74533.45875945591), vector4_0.z, 0.01);
      assertEquals((-2265319.376549362), vector4_0.y, 0.01);
      assertEquals((-2265319.376549362), vector4_1.y, 0.01);
      assertEquals((-1483.5097423375), vector4_1.w, 0.01);
      assertEquals(1253728.536102016, vector4_1.x, 0.01);
      assertEquals((-74533.45875945591), vector4_1.z, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      double double0 = vector4_1.w();
      assertEquals(1.0, matrix4_0.m31(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m32(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00(), 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33(), 0.01);
      assertEquals(50.2413005, matrix4_0.m02(), 0.01);
      assertEquals(4654.0, matrix4_0.m11(), 0.01);
      assertEquals(1.0, matrix4_0.m01(), 0.01);
      assertEquals(1.0, matrix4_0.m23(), 0.01);
      assertEquals((-1.0), matrix4_0.m13(), 0.01);
      assertTrue(matrix4_0.isMirrored());
      assertEquals(1526.0, matrix4_0.m21(), 0.01);
      assertEquals(1526.0, matrix4_0.m10(), 0.01);
      assertEquals(1526.0, matrix4_0.m30(), 0.01);
      assertEquals((-2700.32), matrix4_0.m12(), 0.01);
      assertEquals(0.0, matrix4_0.m22(), 0.01);
      assertEquals(638.4, matrix4_0.m20(), 0.01);
      assertEquals((-1831.8489929293412), matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals((-74533.45875945591), vector4_0.z(), 0.01);
      assertEquals((-2265319.376549362), vector4_0.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.w(), 0.01);
      assertEquals(1253728.536102016, vector4_0.x(), 0.01);
      assertEquals(1253728.536102016, vector4_1.x(), 0.01);
      assertEquals((-74533.45875945591), vector4_1.z(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.w(), 0.01);
      assertEquals((-2265319.376549362), vector4_1.y(), 0.01);
      assertEquals((-1483.5097423375), double0, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m00, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m33, 0.01);
      assertEquals(1.0, matrix4_0.m31, 0.01);
      assertEquals(4654.0, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m01, 0.01);
      assertEquals(1.0, matrix4_0.m23, 0.01);
      assertEquals((-1.0), matrix4_0.m13, 0.01);
      assertEquals((-1483.5097423375), matrix4_0.m32, 0.01);
      assertEquals(1526.0, matrix4_0.m30, 0.01);
      assertEquals(1526.0, matrix4_0.m10, 0.01);
      assertEquals(1526.0, matrix4_0.m21, 0.01);
      assertEquals(50.2413005, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m22, 0.01);
      assertEquals((-2700.32), matrix4_0.m12, 0.01);
      assertEquals(638.4, matrix4_0.m20, 0.01);
      assertEquals(1253728.536102016, vector4_0.x, 0.01);
      assertEquals((-1483.5097423375), vector4_0.w, 0.01);
      assertEquals((-74533.45875945591), vector4_0.z, 0.01);
      assertEquals((-2265319.376549362), vector4_0.y, 0.01);
      assertEquals((-2265319.376549362), vector4_1.y, 0.01);
      assertEquals((-1483.5097423375), vector4_1.w, 0.01);
      assertEquals(1253728.536102016, vector4_1.x, 0.01);
      assertEquals((-74533.45875945591), vector4_1.z, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 50.2413005;
      Vector4 vector4_0 = new Vector4(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 50.2413005, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(50.2413005, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(50.2413005, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.set(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 50.2413005, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(50.2413005, vector4_0.z(), 0.01);
      assertEquals(50.2413005, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(50.2413005, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(50.2413005, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(5, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 2327.9095;
      Vector4 vector4_0 = new Vector4(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2327.9095, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(2327.9095, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(2327.9095, vector4_0.y, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.set(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2327.9095, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(2327.9095, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(2327.9095, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(2327.9095, vector4_0.y, 0.01);
      assertEquals(2327.9095, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(5, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 638.4;
      Vector4 vector4_0 = new Vector4(doubleArray0);
      assertArrayEquals(new double[] {638.4, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(638.4, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(638.4, vector4_0.x, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.set(doubleArray0);
      assertArrayEquals(new double[] {638.4, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(638.4, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(638.4, vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(638.4, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(638.4, vector4_1.x, 0.01);
      assertEquals(5, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2956.6290460441);
      Vector4 vector4_0 = new Vector4(doubleArray0);
      assertArrayEquals(new double[] {(-2956.6290460441), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals((-2956.6290460441), vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals((-2956.6290460441), vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.set(doubleArray0);
      assertArrayEquals(new double[] {(-2956.6290460441), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals((-2956.6290460441), vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals((-2956.6290460441), vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals((-2956.6290460441), vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals((-2956.6290460441), vector4_1.x, 0.01);
      assertEquals(7, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 1.0;
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleBuffer0.remaining());
      assertFalse(doubleBuffer0.isDirect());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=7 cap=7]", doubleBuffer0.toString());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(7, doubleBuffer0.limit());
      assertEquals(7, doubleBuffer0.capacity());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(0, doubleBuffer0.position());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertNotNull(doubleBuffer0);
      assertEquals(7, doubleArray0.length);
      
      Vector4 vector4_0 = new Vector4(doubleBuffer0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleBuffer0.isDirect());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(3, doubleBuffer0.remaining());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(7, doubleBuffer0.limit());
      assertEquals(7, doubleBuffer0.capacity());
      assertEquals(4, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=7 cap=7]", doubleBuffer0.toString());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(1.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(1.0, vector4_0.w, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.set(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleBuffer0.isDirect());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(3, doubleBuffer0.remaining());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(7, doubleBuffer0.limit());
      assertEquals(7, doubleBuffer0.capacity());
      assertEquals(4, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=7 cap=7]", doubleBuffer0.toString());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(1.0, vector4_0.w(), 0.01);
      assertEquals(1.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(1.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(1.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(7, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-1483.5097423375);
      Vector4 vector4_1 = vector4_0.set(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1483.5097423375), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertNotNull(vector4_1);
      assertEquals((-1483.5097423375), vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals((-1483.5097423375), vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(7, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      Vector4 vector4_2 = vector4_1.set((IVector4) vector4_0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1483.5097423375), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_2.x(), 0.01);
      assertEquals(0.0, vector4_2.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_2.z(), 0.01);
      assertEquals(0.0, vector4_2.w(), 0.01);
      assertNotNull(vector4_2);
      assertEquals((-1483.5097423375), vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals((-1483.5097423375), vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals((-1483.5097423375), vector4_2.z, 0.01);
      assertEquals(0.0, vector4_2.x, 0.01);
      assertEquals(0.0, vector4_2.y, 0.01);
      assertEquals(0.0, vector4_2.w, 0.01);
      assertEquals(7, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertSame(vector4_1, vector4_0);
      assertSame(vector4_1, vector4_2);
      assertSame(vector4_2, vector4_1);
      assertSame(vector4_2, vector4_0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      
      Matrix4 matrix4_0 = new Matrix4(0.0, 0.0, 0.0, 45.6, 133.7053393045846, 0.0, Double.NaN, 1370.9134320480355, 938.81633812938, (-1.0), 3840.0, 1.0, 549.5900035566, 0.0, 3840.0, (-2114.39276416499));
      assertEquals(133.7053393045846, matrix4_0.m01(), 0.01);
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(549.5900035566, matrix4_0.m03(), 0.01);
      assertEquals((-1.0), matrix4_0.m12(), 0.01);
      assertEquals(3840.0, matrix4_0.m22(), 0.01);
      assertEquals(3840.0, matrix4_0.m23(), 0.01);
      assertEquals(1.0, matrix4_0.m32(), 0.01);
      assertEquals(45.6, matrix4_0.m30(), 0.01);
      assertEquals(938.81633812938, matrix4_0.m02(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-2114.39276416499), matrix4_0.m33(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m21(), 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(0.0, matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m11(), 0.01);
      assertNotNull(matrix4_0);
      assertEquals(1370.9134320480355, matrix4_0.m31, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(938.81633812938, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m11, 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01, 0.01);
      assertEquals(45.6, matrix4_0.m30, 0.01);
      assertEquals(549.5900035566, matrix4_0.m03, 0.01);
      assertEquals(Double.NaN, matrix4_0.m21, 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33, 0.01);
      assertEquals(3840.0, matrix4_0.m23, 0.01);
      assertEquals((-1.0), matrix4_0.m12, 0.01);
      assertEquals(1.0, matrix4_0.m32, 0.01);
      assertEquals(3840.0, matrix4_0.m22, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      
      Vector4 vector4_1 = matrix4_0.transform((IVector4) vector4_0, vector4_0);
      assertEquals(Double.NaN, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01(), 0.01);
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(549.5900035566, matrix4_0.m03(), 0.01);
      assertEquals((-1.0), matrix4_0.m12(), 0.01);
      assertEquals(3840.0, matrix4_0.m22(), 0.01);
      assertEquals(3840.0, matrix4_0.m23(), 0.01);
      assertEquals(1.0, matrix4_0.m32(), 0.01);
      assertEquals(45.6, matrix4_0.m30(), 0.01);
      assertEquals(938.81633812938, matrix4_0.m02(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-2114.39276416499), matrix4_0.m33(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m21(), 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(0.0, matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m11(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(Double.NaN, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(Double.NaN, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(938.81633812938, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m11, 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01, 0.01);
      assertEquals(45.6, matrix4_0.m30, 0.01);
      assertEquals(549.5900035566, matrix4_0.m03, 0.01);
      assertEquals(Double.NaN, matrix4_0.m21, 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33, 0.01);
      assertEquals(3840.0, matrix4_0.m23, 0.01);
      assertEquals((-1.0), matrix4_0.m12, 0.01);
      assertEquals(1.0, matrix4_0.m32, 0.01);
      assertEquals(3840.0, matrix4_0.m22, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(Double.NaN, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      Vector4 vector4_2 = vector4_0.multLocal((IMatrix4) matrix4_0);
      assertEquals(Double.NaN, vector4_0.x(), 0.01);
      assertEquals(Double.NaN, vector4_0.y(), 0.01);
      assertEquals(Double.NaN, vector4_0.w(), 0.01);
      assertEquals(Double.NaN, vector4_0.z(), 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01(), 0.01);
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(549.5900035566, matrix4_0.m03(), 0.01);
      assertEquals((-1.0), matrix4_0.m12(), 0.01);
      assertEquals(3840.0, matrix4_0.m22(), 0.01);
      assertEquals(3840.0, matrix4_0.m23(), 0.01);
      assertEquals(1.0, matrix4_0.m32(), 0.01);
      assertEquals(45.6, matrix4_0.m30(), 0.01);
      assertEquals(938.81633812938, matrix4_0.m02(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-2114.39276416499), matrix4_0.m33(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m21(), 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(0.0, matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m11(), 0.01);
      assertEquals(Double.NaN, vector4_2.w(), 0.01);
      assertEquals(Double.NaN, vector4_2.y(), 0.01);
      assertEquals(Double.NaN, vector4_2.x(), 0.01);
      assertEquals(Double.NaN, vector4_2.z(), 0.01);
      assertNotNull(vector4_2);
      assertEquals(Double.NaN, vector4_0.z, 0.01);
      assertEquals(Double.NaN, vector4_0.x, 0.01);
      assertEquals(Double.NaN, vector4_0.y, 0.01);
      assertEquals(Double.NaN, vector4_0.w, 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(938.81633812938, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m11, 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01, 0.01);
      assertEquals(45.6, matrix4_0.m30, 0.01);
      assertEquals(549.5900035566, matrix4_0.m03, 0.01);
      assertEquals(Double.NaN, matrix4_0.m21, 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33, 0.01);
      assertEquals(3840.0, matrix4_0.m23, 0.01);
      assertEquals((-1.0), matrix4_0.m12, 0.01);
      assertEquals(1.0, matrix4_0.m32, 0.01);
      assertEquals(3840.0, matrix4_0.m22, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(Double.NaN, vector4_2.w, 0.01);
      assertEquals(Double.NaN, vector4_2.y, 0.01);
      assertEquals(Double.NaN, vector4_2.x, 0.01);
      assertEquals(Double.NaN, vector4_2.z, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertSame(vector4_2, vector4_1);
      assertSame(vector4_2, vector4_0);
      
      Vector4 vector4_3 = vector4_1.set((IVector4) vector4_1);
      assertEquals(Double.NaN, vector4_0.x(), 0.01);
      assertEquals(Double.NaN, vector4_0.y(), 0.01);
      assertEquals(Double.NaN, vector4_0.w(), 0.01);
      assertEquals(Double.NaN, vector4_0.z(), 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01(), 0.01);
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(549.5900035566, matrix4_0.m03(), 0.01);
      assertEquals((-1.0), matrix4_0.m12(), 0.01);
      assertEquals(3840.0, matrix4_0.m22(), 0.01);
      assertEquals(3840.0, matrix4_0.m23(), 0.01);
      assertEquals(1.0, matrix4_0.m32(), 0.01);
      assertEquals(45.6, matrix4_0.m30(), 0.01);
      assertEquals(938.81633812938, matrix4_0.m02(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-2114.39276416499), matrix4_0.m33(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m21(), 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(0.0, matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m11(), 0.01);
      assertEquals(Double.NaN, vector4_1.w(), 0.01);
      assertEquals(Double.NaN, vector4_1.x(), 0.01);
      assertEquals(Double.NaN, vector4_1.y(), 0.01);
      assertEquals(Double.NaN, vector4_1.z(), 0.01);
      assertEquals(Double.NaN, vector4_3.x(), 0.01);
      assertEquals(Double.NaN, vector4_3.y(), 0.01);
      assertEquals(Double.NaN, vector4_3.w(), 0.01);
      assertEquals(Double.NaN, vector4_3.z(), 0.01);
      assertNotNull(vector4_3);
      assertEquals(Double.NaN, vector4_0.z, 0.01);
      assertEquals(Double.NaN, vector4_0.x, 0.01);
      assertEquals(Double.NaN, vector4_0.y, 0.01);
      assertEquals(Double.NaN, vector4_0.w, 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(938.81633812938, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m11, 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01, 0.01);
      assertEquals(45.6, matrix4_0.m30, 0.01);
      assertEquals(549.5900035566, matrix4_0.m03, 0.01);
      assertEquals(Double.NaN, matrix4_0.m21, 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33, 0.01);
      assertEquals(3840.0, matrix4_0.m23, 0.01);
      assertEquals((-1.0), matrix4_0.m12, 0.01);
      assertEquals(1.0, matrix4_0.m32, 0.01);
      assertEquals(3840.0, matrix4_0.m22, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(Double.NaN, vector4_1.z, 0.01);
      assertEquals(Double.NaN, vector4_1.w, 0.01);
      assertEquals(Double.NaN, vector4_1.y, 0.01);
      assertEquals(Double.NaN, vector4_1.x, 0.01);
      assertEquals(Double.NaN, vector4_3.x, 0.01);
      assertEquals(Double.NaN, vector4_3.z, 0.01);
      assertEquals(Double.NaN, vector4_3.w, 0.01);
      assertEquals(Double.NaN, vector4_3.y, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertSame(vector4_0, vector4_3);
      assertSame(vector4_1, vector4_0);
      assertSame(vector4_1, vector4_2);
      assertSame(vector4_1, vector4_3);
      assertSame(vector4_3, vector4_2);
      assertSame(vector4_3, vector4_1);
      assertSame(vector4_3, vector4_0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Vector4 vector4_0 = new Vector4(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Vector4 vector4_1 = new Vector4((-1.0), 3902.0, 0.0, 3902.0);
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals((-1.0), vector4_1.x(), 0.01);
      assertEquals(3902.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(3902.0, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(3902.0, vector4_1.w, 0.01);
      assertEquals(3902.0, vector4_1.y, 0.01);
      assertEquals((-1.0), vector4_1.x, 0.01);
      
      Vector4 vector4_2 = vector4_0.set((IVector4) vector4_1);
      assertTrue(vector4_0.equals((Object)vector4_1));
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertTrue(vector4_2.equals((Object)vector4_1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(3902.0, vector4_0.y(), 0.01);
      assertEquals((-1.0), vector4_0.x(), 0.01);
      assertEquals(3902.0, vector4_0.w(), 0.01);
      assertEquals((-1.0), vector4_1.x(), 0.01);
      assertEquals(3902.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(3902.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_2.z(), 0.01);
      assertEquals((-1.0), vector4_2.x(), 0.01);
      assertEquals(3902.0, vector4_2.w(), 0.01);
      assertEquals(3902.0, vector4_2.y(), 0.01);
      assertNotNull(vector4_2);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals((-1.0), vector4_0.x, 0.01);
      assertEquals(3902.0, vector4_0.y, 0.01);
      assertEquals(3902.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(3902.0, vector4_1.w, 0.01);
      assertEquals(3902.0, vector4_1.y, 0.01);
      assertEquals((-1.0), vector4_1.x, 0.01);
      assertEquals(3902.0, vector4_2.w, 0.01);
      assertEquals((-1.0), vector4_2.x, 0.01);
      assertEquals(3902.0, vector4_2.y, 0.01);
      assertEquals(0.0, vector4_2.z, 0.01);
      assertEquals(8, doubleArray0.length);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_2);
      assertNotSame(vector4_1, vector4_0);
      assertNotSame(vector4_2, vector4_1);
      assertSame(vector4_2, vector4_0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1483.5097423375);
      Vector4 vector4_1 = vector4_0.set(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1483.5097423375), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1483.5097423375), vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-1483.5097423375), vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals((-1483.5097423375), vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(7, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      Vector4 vector4_2 = vector4_1.set((IVector4) vector4_0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1483.5097423375), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1483.5097423375), vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.w(), 0.01);
      assertEquals((-1483.5097423375), vector4_2.w(), 0.01);
      assertEquals(0.0, vector4_2.z(), 0.01);
      assertEquals(0.0, vector4_2.y(), 0.01);
      assertEquals(0.0, vector4_2.x(), 0.01);
      assertNotNull(vector4_2);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-1483.5097423375), vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals((-1483.5097423375), vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_2.y, 0.01);
      assertEquals(0.0, vector4_2.x, 0.01);
      assertEquals((-1483.5097423375), vector4_2.w, 0.01);
      assertEquals(0.0, vector4_2.z, 0.01);
      assertEquals(7, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertSame(vector4_1, vector4_0);
      assertSame(vector4_1, vector4_2);
      assertSame(vector4_2, vector4_1);
      assertSame(vector4_2, vector4_0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6);
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.z, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 1938.7;
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1938.7, 0.0}, doubleArray0, 0.01);
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(4, doubleBuffer0.remaining());
      assertFalse(doubleBuffer0.isDirect());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(0, doubleBuffer0.position());
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=4 cap=4]", doubleBuffer0.toString());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(4, doubleBuffer0.capacity());
      assertEquals(4, doubleBuffer0.limit());
      assertNotNull(doubleBuffer0);
      assertEquals(4, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.set(doubleBuffer0);
      assertArrayEquals(new double[] {0.0, 0.0, 1938.7, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(1938.7, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertFalse(doubleBuffer0.isDirect());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]", doubleBuffer0.toString());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertFalse(doubleBuffer0.isReadOnly());
      assertFalse(doubleBuffer0.hasRemaining());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(4, doubleBuffer0.position());
      assertEquals(4, doubleBuffer0.capacity());
      assertEquals(0, doubleBuffer0.remaining());
      assertEquals(4, doubleBuffer0.limit());
      assertEquals(1938.7, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(1938.7, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(1938.7, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(4, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      
      Vector3 vector3_0 = new Vector3(593.0, 50.2413005, (-15.7627098216644));
      assertEquals(593.0, vector3_0.x(), 0.01);
      assertEquals(50.2413005, vector3_0.y(), 0.01);
      assertEquals((-15.7627098216644), vector3_0.z(), 0.01);
      assertEquals(354421.65129685326, vector3_0.lengthSquared(), 0.01);
      assertEquals(595.3332271063435, vector3_0.length(), 0.01);
      assertNotNull(vector3_0);
      assertEquals(50.2413005, vector3_0.y, 0.01);
      assertEquals(593.0, vector3_0.x, 0.01);
      assertEquals((-15.7627098216644), vector3_0.z, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = (-2011.039942);
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-2011.039942), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleBuffer0.limit());
      assertEquals(8, doubleBuffer0.remaining());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(8, doubleBuffer0.capacity());
      assertFalse(doubleBuffer0.isReadOnly());
      assertTrue(doubleBuffer0.hasRemaining());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(0, doubleBuffer0.position());
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=8 cap=8]", doubleBuffer0.toString());
      assertFalse(doubleBuffer0.isDirect());
      assertNotNull(doubleBuffer0);
      assertEquals(8, doubleArray0.length);
      
      DoubleBuffer doubleBuffer1 = vector3_0.get(doubleBuffer0);
      assertArrayEquals(new double[] {593.0, 50.2413005, (-15.7627098216644), 0.0, 0.0, (-2011.039942), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(593.0, vector3_0.x(), 0.01);
      assertEquals(50.2413005, vector3_0.y(), 0.01);
      assertEquals((-15.7627098216644), vector3_0.z(), 0.01);
      assertEquals(354421.65129685326, vector3_0.lengthSquared(), 0.01);
      assertEquals(595.3332271063435, vector3_0.length(), 0.01);
      assertEquals(5, doubleBuffer0.remaining());
      assertEquals(8, doubleBuffer0.limit());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(8, doubleBuffer0.capacity());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals("java.nio.HeapDoubleBuffer[pos=3 lim=8 cap=8]", doubleBuffer0.toString());
      assertTrue(doubleBuffer0.hasRemaining());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(3, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isDirect());
      assertEquals(0, doubleBuffer1.arrayOffset());
      assertEquals(8, doubleBuffer1.limit());
      assertEquals(8, doubleBuffer1.capacity());
      assertTrue(doubleBuffer1.hasArray());
      assertFalse(doubleBuffer1.isDirect());
      assertTrue(doubleBuffer1.hasRemaining());
      assertEquals(3, doubleBuffer1.position());
      assertEquals(5, doubleBuffer1.remaining());
      assertFalse(doubleBuffer1.isReadOnly());
      assertEquals("java.nio.HeapDoubleBuffer[pos=3 lim=8 cap=8]", doubleBuffer1.toString());
      assertNotNull(doubleBuffer1);
      assertEquals(50.2413005, vector3_0.y, 0.01);
      assertEquals(593.0, vector3_0.x, 0.01);
      assertEquals((-15.7627098216644), vector3_0.z, 0.01);
      assertEquals(8, doubleArray0.length);
      assertSame(doubleBuffer0, doubleBuffer1);
      assertSame(doubleBuffer1, doubleBuffer0);
      
      Vector4 vector4_1 = vector4_0.set(doubleBuffer1);
      assertArrayEquals(new double[] {593.0, 50.2413005, (-15.7627098216644), 0.0, 0.0, (-2011.039942), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals((-2011.039942), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(593.0, vector3_0.x(), 0.01);
      assertEquals(50.2413005, vector3_0.y(), 0.01);
      assertEquals((-15.7627098216644), vector3_0.z(), 0.01);
      assertEquals(354421.65129685326, vector3_0.lengthSquared(), 0.01);
      assertEquals(595.3332271063435, vector3_0.length(), 0.01);
      assertEquals(8, doubleBuffer0.limit());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(8, doubleBuffer0.capacity());
      assertEquals(1, doubleBuffer0.remaining());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals("java.nio.HeapDoubleBuffer[pos=7 lim=8 cap=8]", doubleBuffer0.toString());
      assertTrue(doubleBuffer0.hasRemaining());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(7, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isDirect());
      assertEquals(7, doubleBuffer1.position());
      assertEquals("java.nio.HeapDoubleBuffer[pos=7 lim=8 cap=8]", doubleBuffer1.toString());
      assertEquals(0, doubleBuffer1.arrayOffset());
      assertEquals(1, doubleBuffer1.remaining());
      assertEquals(8, doubleBuffer1.limit());
      assertEquals(8, doubleBuffer1.capacity());
      assertTrue(doubleBuffer1.hasArray());
      assertFalse(doubleBuffer1.isDirect());
      assertTrue(doubleBuffer1.hasRemaining());
      assertFalse(doubleBuffer1.isReadOnly());
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals((-2011.039942), vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-2011.039942), vector4_0.z, 0.01);
      assertEquals(50.2413005, vector3_0.y, 0.01);
      assertEquals(593.0, vector3_0.x, 0.01);
      assertEquals((-15.7627098216644), vector3_0.z, 0.01);
      assertEquals((-2011.039942), vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(8, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(doubleBuffer0, doubleBuffer1);
      assertSame(doubleBuffer1, doubleBuffer0);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6);
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(9.999999747378752E-6, vector4_0.z, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 9.999999747378752E-6;
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      assertArrayEquals(new double[] {0.0, 9.999999747378752E-6, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(4, doubleBuffer0.limit());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=4 cap=4]", doubleBuffer0.toString());
      assertEquals(4, doubleBuffer0.remaining());
      assertTrue(doubleBuffer0.hasRemaining());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(0, doubleBuffer0.position());
      assertEquals(4, doubleBuffer0.capacity());
      assertFalse(doubleBuffer0.isDirect());
      assertNotNull(doubleBuffer0);
      assertEquals(4, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.set(doubleBuffer0);
      assertArrayEquals(new double[] {0.0, 9.999999747378752E-6, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(4, doubleBuffer0.limit());
      assertEquals(0, doubleBuffer0.remaining());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]", doubleBuffer0.toString());
      assertFalse(doubleBuffer0.hasRemaining());
      assertEquals(4, doubleBuffer0.capacity());
      assertEquals(4, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isDirect());
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(4, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-0.9999900000002526);
      Vector4 vector4_0 = new Vector4(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-0.9999900000002526), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals((-0.9999900000002526), vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals((-0.9999900000002526), vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(6, doubleArray0.length);
      
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-0.9999900000002526), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(0, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isDirect());
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=6 cap=6]", doubleBuffer0.toString());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(6, doubleBuffer0.capacity());
      assertEquals(6, doubleBuffer0.limit());
      assertEquals(6, doubleBuffer0.remaining());
      assertFalse(doubleBuffer0.isReadOnly());
      assertTrue(doubleBuffer0.hasRemaining());
      assertNotNull(doubleBuffer0);
      assertEquals(6, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.set(doubleBuffer0);
      assertArrayEquals(new double[] {0.0, (-0.9999900000002526), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals((-0.9999900000002526), vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertTrue(doubleBuffer0.hasArray());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=6 cap=6]", doubleBuffer0.toString());
      assertEquals(4, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isDirect());
      assertEquals(2, doubleBuffer0.remaining());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(6, doubleBuffer0.capacity());
      assertEquals(6, doubleBuffer0.limit());
      assertFalse(doubleBuffer0.isReadOnly());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals((-0.9999900000002526), vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals((-0.9999900000002526), vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals((-0.9999900000002526), vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(6, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6);
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.z, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 9.99999949475751E-11;
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      assertArrayEquals(new double[] {9.99999949475751E-11, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(4, doubleBuffer0.limit());
      assertEquals(4, doubleBuffer0.remaining());
      assertEquals(4, doubleBuffer0.capacity());
      assertTrue(doubleBuffer0.hasArray());
      assertFalse(doubleBuffer0.isDirect());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(0, doubleBuffer0.position());
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=4 cap=4]", doubleBuffer0.toString());
      assertNotNull(doubleBuffer0);
      assertEquals(4, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.set(doubleBuffer0);
      assertArrayEquals(new double[] {9.99999949475751E-11, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(9.99999949475751E-11, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(4, doubleBuffer0.limit());
      assertEquals(4, doubleBuffer0.position());
      assertEquals(4, doubleBuffer0.capacity());
      assertEquals(0, doubleBuffer0.remaining());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]", doubleBuffer0.toString());
      assertTrue(doubleBuffer0.hasArray());
      assertFalse(doubleBuffer0.isDirect());
      assertFalse(doubleBuffer0.hasRemaining());
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(9.99999949475751E-11, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(9.99999949475751E-11, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(9.99999949475751E-11, vector4_1.x, 0.01);
      assertEquals(4, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1483.5097423375);
      Vector4 vector4_0 = new Vector4(doubleArray0);
      assertArrayEquals(new double[] {(-1483.5097423375), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals((-1483.5097423375), vector4_0.x, 0.01);
      assertEquals(6, doubleArray0.length);
      
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      assertArrayEquals(new double[] {(-1483.5097423375), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=6 cap=6]", doubleBuffer0.toString());
      assertEquals(6, doubleBuffer0.limit());
      assertEquals(6, doubleBuffer0.remaining());
      assertEquals(6, doubleBuffer0.capacity());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertFalse(doubleBuffer0.isDirect());
      assertEquals(0, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isReadOnly());
      assertTrue(doubleBuffer0.hasRemaining());
      assertTrue(doubleBuffer0.hasArray());
      assertNotNull(doubleBuffer0);
      assertEquals(6, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.set(doubleBuffer0);
      assertArrayEquals(new double[] {(-1483.5097423375), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(6, doubleBuffer0.limit());
      assertEquals(6, doubleBuffer0.capacity());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(4, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isDirect());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=6 cap=6]", doubleBuffer0.toString());
      assertFalse(doubleBuffer0.isReadOnly());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(2, doubleBuffer0.remaining());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals((-1483.5097423375), vector4_0.x, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals((-1483.5097423375), vector4_1.x, 0.01);
      assertEquals(6, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6);
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(9.999999747378752E-6, vector4_0.z, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 9.999999747378752E-6;
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 9.999999747378752E-6}, doubleArray0, 0.01);
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(0, doubleBuffer0.position());
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=4 cap=4]", doubleBuffer0.toString());
      assertTrue(doubleBuffer0.hasRemaining());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(4, doubleBuffer0.remaining());
      assertEquals(4, doubleBuffer0.capacity());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(4, doubleBuffer0.limit());
      assertFalse(doubleBuffer0.isDirect());
      assertNotNull(doubleBuffer0);
      assertEquals(4, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.set(doubleBuffer0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 9.999999747378752E-6}, doubleArray0, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertTrue(doubleBuffer0.hasArray());
      assertFalse(doubleBuffer0.hasRemaining());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]", doubleBuffer0.toString());
      assertEquals(4, doubleBuffer0.capacity());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertEquals(0, doubleBuffer0.remaining());
      assertEquals(4, doubleBuffer0.limit());
      assertEquals(4, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isDirect());
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(4, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0, (-9.999999747378752E-6), (-42.97), (-9.999999747378752E-6));
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals((-9.999999747378752E-6), vector4_0.y(), 0.01);
      assertEquals((-42.97), vector4_0.z(), 0.01);
      assertEquals((-9.999999747378752E-6), vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-9.999999747378752E-6), vector4_0.y, 0.01);
      assertEquals((-42.97), vector4_0.z, 0.01);
      assertEquals((-9.999999747378752E-6), vector4_0.w, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (-42.97);
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-42.97), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleBuffer0.limit());
      assertTrue(doubleBuffer0.hasRemaining());
      assertFalse(doubleBuffer0.isDirect());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(9, doubleBuffer0.remaining());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(0, doubleBuffer0.position());
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=9 cap=9]", doubleBuffer0.toString());
      assertEquals(9, doubleBuffer0.capacity());
      assertNotNull(doubleBuffer0);
      assertEquals(9, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.set(doubleBuffer0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-42.97), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals((-42.97), vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(5, doubleBuffer0.remaining());
      assertEquals("java.nio.HeapDoubleBuffer[pos=4 lim=9 cap=9]", doubleBuffer0.toString());
      assertEquals(9, doubleBuffer0.limit());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(4, doubleBuffer0.position());
      assertFalse(doubleBuffer0.isDirect());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertTrue(doubleBuffer0.hasArray());
      assertEquals(9, doubleBuffer0.capacity());
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals((-42.97), vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals((-42.97), vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals((-42.97), vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(9, doubleArray0.length);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      
      Vector4 vector4_1 = vector4_0.set(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      
      Vector4 vector4_1 = vector4_0.set(3.1415826535900457, 0.0, -0.0, -0.0);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(-0.0, vector4_0.w(), 0.01);
      assertEquals(3.1415826535900457, vector4_0.x(), 0.01);
      assertEquals(-0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(-0.0, vector4_1.z(), 0.01);
      assertEquals(3.1415826535900457, vector4_1.x(), 0.01);
      assertEquals(-0.0, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(3.1415826535900457, vector4_0.x, 0.01);
      assertEquals(-0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(-0.0, vector4_0.z, 0.01);
      assertEquals(-0.0, vector4_1.z, 0.01);
      assertEquals(-0.0, vector4_1.w, 0.01);
      assertEquals(3.1415826535900457, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      
      Vector4 vector4_1 = vector4_0.set((-3760.28160942), 0.0, (-1.0), 1.0);
      assertEquals((-1.0), vector4_0.z(), 0.01);
      assertEquals(1.0, vector4_0.w(), 0.01);
      assertEquals((-3760.28160942), vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals((-1.0), vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals((-3760.28160942), vector4_1.x(), 0.01);
      assertEquals(1.0, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(1.0, vector4_0.w, 0.01);
      assertEquals((-3760.28160942), vector4_0.x, 0.01);
      assertEquals((-1.0), vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals((-3760.28160942), vector4_1.x, 0.01);
      assertEquals((-1.0), vector4_1.z, 0.01);
      assertEquals(1.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      
      Matrix4 matrix4_0 = new Matrix4(0.0, 0.0, 0.0, 45.6, 133.7053393045846, 0.0, Double.NaN, 1370.9134320480355, 938.81633812938, (-1.0), 3840.0, 1.0, 549.5900035566, 0.0, 3840.0, (-2114.39276416499));
      assertEquals((-2114.39276416499), matrix4_0.m33(), 0.01);
      assertEquals(1.0, matrix4_0.m32(), 0.01);
      assertEquals(3840.0, matrix4_0.m22(), 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(938.81633812938, matrix4_0.m02(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(45.6, matrix4_0.m30(), 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m11(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(549.5900035566, matrix4_0.m03(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(3840.0, matrix4_0.m23(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m21(), 0.01);
      assertEquals((-1.0), matrix4_0.m12(), 0.01);
      assertNotNull(matrix4_0);
      assertEquals(3840.0, matrix4_0.m23, 0.01);
      assertEquals(3840.0, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m32, 0.01);
      assertEquals((-1.0), matrix4_0.m12, 0.01);
      assertEquals(45.6, matrix4_0.m30, 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(938.81633812938, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m11, 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33, 0.01);
      assertEquals(Double.NaN, matrix4_0.m21, 0.01);
      assertEquals(549.5900035566, matrix4_0.m03, 0.01);
      
      Vector4 vector4_1 = matrix4_0.transform((IVector4) vector4_0, vector4_0);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(Double.NaN, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33(), 0.01);
      assertEquals(1.0, matrix4_0.m32(), 0.01);
      assertEquals(3840.0, matrix4_0.m22(), 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(938.81633812938, matrix4_0.m02(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(45.6, matrix4_0.m30(), 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m11(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(549.5900035566, matrix4_0.m03(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(3840.0, matrix4_0.m23(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m21(), 0.01);
      assertEquals((-1.0), matrix4_0.m12(), 0.01);
      assertEquals(Double.NaN, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(Double.NaN, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(3840.0, matrix4_0.m23, 0.01);
      assertEquals(3840.0, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m32, 0.01);
      assertEquals((-1.0), matrix4_0.m12, 0.01);
      assertEquals(45.6, matrix4_0.m30, 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(938.81633812938, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m11, 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33, 0.01);
      assertEquals(Double.NaN, matrix4_0.m21, 0.01);
      assertEquals(549.5900035566, matrix4_0.m03, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(Double.NaN, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      Vector4 vector4_2 = vector4_0.multLocal((IMatrix4) matrix4_0);
      assertEquals(Double.NaN, vector4_0.z(), 0.01);
      assertEquals(Double.NaN, vector4_0.y(), 0.01);
      assertEquals(Double.NaN, vector4_0.x(), 0.01);
      assertEquals(Double.NaN, vector4_0.w(), 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33(), 0.01);
      assertEquals(1.0, matrix4_0.m32(), 0.01);
      assertEquals(3840.0, matrix4_0.m22(), 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(938.81633812938, matrix4_0.m02(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(45.6, matrix4_0.m30(), 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m11(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(549.5900035566, matrix4_0.m03(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(3840.0, matrix4_0.m23(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m21(), 0.01);
      assertEquals((-1.0), matrix4_0.m12(), 0.01);
      assertEquals(Double.NaN, vector4_2.w(), 0.01);
      assertEquals(Double.NaN, vector4_2.y(), 0.01);
      assertEquals(Double.NaN, vector4_2.x(), 0.01);
      assertEquals(Double.NaN, vector4_2.z(), 0.01);
      assertNotNull(vector4_2);
      assertEquals(Double.NaN, vector4_0.z, 0.01);
      assertEquals(Double.NaN, vector4_0.y, 0.01);
      assertEquals(Double.NaN, vector4_0.x, 0.01);
      assertEquals(Double.NaN, vector4_0.w, 0.01);
      assertEquals(3840.0, matrix4_0.m23, 0.01);
      assertEquals(3840.0, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m32, 0.01);
      assertEquals((-1.0), matrix4_0.m12, 0.01);
      assertEquals(45.6, matrix4_0.m30, 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(938.81633812938, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m11, 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33, 0.01);
      assertEquals(Double.NaN, matrix4_0.m21, 0.01);
      assertEquals(549.5900035566, matrix4_0.m03, 0.01);
      assertEquals(Double.NaN, vector4_2.z, 0.01);
      assertEquals(Double.NaN, vector4_2.x, 0.01);
      assertEquals(Double.NaN, vector4_2.y, 0.01);
      assertEquals(Double.NaN, vector4_2.w, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertSame(vector4_2, vector4_0);
      assertSame(vector4_2, vector4_1);
      
      Vector4 vector4_3 = vector4_0.negateLocal();
      assertEquals(Double.NaN, vector4_0.z(), 0.01);
      assertEquals(Double.NaN, vector4_0.y(), 0.01);
      assertEquals(Double.NaN, vector4_0.x(), 0.01);
      assertEquals(Double.NaN, vector4_0.w(), 0.01);
      assertEquals(Double.NaN, vector4_3.z(), 0.01);
      assertEquals(Double.NaN, vector4_3.x(), 0.01);
      assertEquals(Double.NaN, vector4_3.y(), 0.01);
      assertEquals(Double.NaN, vector4_3.w(), 0.01);
      assertNotNull(vector4_3);
      assertEquals(Double.NaN, vector4_0.z, 0.01);
      assertEquals(Double.NaN, vector4_0.y, 0.01);
      assertEquals(Double.NaN, vector4_0.x, 0.01);
      assertEquals(Double.NaN, vector4_0.w, 0.01);
      assertEquals(Double.NaN, vector4_3.w, 0.01);
      assertEquals(Double.NaN, vector4_3.y, 0.01);
      assertEquals(Double.NaN, vector4_3.x, 0.01);
      assertEquals(Double.NaN, vector4_3.z, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_3);
      assertSame(vector4_0, vector4_2);
      assertSame(vector4_3, vector4_0);
      assertSame(vector4_3, vector4_1);
      assertSame(vector4_3, vector4_2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6);
      assertEquals(9.999999747378752E-6, vector4_0.x(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.z(), 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(9.999999747378752E-6, vector4_0.z, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.w, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.x, 0.01);
      assertEquals(9.999999747378752E-6, vector4_0.y, 0.01);
      
      Vector4 vector4_1 = vector4_0.negateLocal();
      assertEquals((-9.999999747378752E-6), vector4_0.x(), 0.01);
      assertEquals((-9.999999747378752E-6), vector4_0.y(), 0.01);
      assertEquals((-9.999999747378752E-6), vector4_0.z(), 0.01);
      assertEquals((-9.999999747378752E-6), vector4_0.w(), 0.01);
      assertEquals((-9.999999747378752E-6), vector4_1.y(), 0.01);
      assertEquals((-9.999999747378752E-6), vector4_1.x(), 0.01);
      assertEquals((-9.999999747378752E-6), vector4_1.z(), 0.01);
      assertEquals((-9.999999747378752E-6), vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals((-9.999999747378752E-6), vector4_0.z, 0.01);
      assertEquals((-9.999999747378752E-6), vector4_0.w, 0.01);
      assertEquals((-9.999999747378752E-6), vector4_0.x, 0.01);
      assertEquals((-9.999999747378752E-6), vector4_0.y, 0.01);
      assertEquals((-9.999999747378752E-6), vector4_1.w, 0.01);
      assertEquals((-9.999999747378752E-6), vector4_1.z, 0.01);
      assertEquals((-9.999999747378752E-6), vector4_1.y, 0.01);
      assertEquals((-9.999999747378752E-6), vector4_1.x, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      
      Vector4 vector4_1 = vector4_0.negate(vector4_0);
      assertEquals(-0.0, vector4_0.z(), 0.01);
      assertEquals(-0.0, vector4_0.y(), 0.01);
      assertEquals(-0.0, vector4_0.x(), 0.01);
      assertEquals(-0.0, vector4_0.w(), 0.01);
      assertEquals(-0.0, vector4_1.w(), 0.01);
      assertEquals(-0.0, vector4_1.y(), 0.01);
      assertEquals(-0.0, vector4_1.x(), 0.01);
      assertEquals(-0.0, vector4_1.z(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(-0.0, vector4_0.z, 0.01);
      assertEquals(-0.0, vector4_0.w, 0.01);
      assertEquals(-0.0, vector4_0.x, 0.01);
      assertEquals(-0.0, vector4_0.y, 0.01);
      assertEquals(-0.0, vector4_1.z, 0.01);
      assertEquals(-0.0, vector4_1.x, 0.01);
      assertEquals(-0.0, vector4_1.y, 0.01);
      assertEquals(-0.0, vector4_1.w, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4(1892.0717, 1892.0717, 1892.0717, 0.0, 1596.0557174696, 773.9505320869, 0.0, 1596.0557174696, 773.9505320869, 1596.0557174696, 0.0, 0.0, 107.11636, 107.11636, 3004.0, 760.844);
      assertEquals(107.11636, matrix4_0.m03(), 0.01);
      assertEquals(773.9505320869, matrix4_0.m02(), 0.01);
      assertEquals(1544.797256771555, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(1596.0557174696, matrix4_0.m01(), 0.01);
      assertEquals(1596.0557174696, matrix4_0.m12(), 0.01);
      assertEquals(0.0, matrix4_0.m30(), 0.01);
      assertEquals(1596.0557174696, matrix4_0.m31(), 0.01);
      assertEquals(773.9505320869, matrix4_0.m11(), 0.01);
      assertEquals(1892.0717, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m22(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(107.11636, matrix4_0.m13(), 0.01);
      assertEquals(1892.0717, matrix4_0.m10(), 0.01);
      assertEquals(760.844, matrix4_0.m33(), 0.01);
      assertEquals(1892.0717, matrix4_0.m00(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(3004.0, matrix4_0.m23(), 0.01);
      assertNotNull(matrix4_0);
      assertEquals(107.11636, matrix4_0.m13, 0.01);
      assertEquals(1892.0717, matrix4_0.m10, 0.01);
      assertEquals(760.844, matrix4_0.m33, 0.01);
      assertEquals(1892.0717, matrix4_0.m00, 0.01);
      assertEquals(1596.0557174696, matrix4_0.m31, 0.01);
      assertEquals(773.9505320869, matrix4_0.m02, 0.01);
      assertEquals(773.9505320869, matrix4_0.m11, 0.01);
      assertEquals(107.11636, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m30, 0.01);
      assertEquals(3004.0, matrix4_0.m23, 0.01);
      assertEquals(1596.0557174696, matrix4_0.m01, 0.01);
      assertEquals(1596.0557174696, matrix4_0.m12, 0.01);
      assertEquals(1892.0717, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m32, 0.01);
      assertEquals(0.0, matrix4_0.m22, 0.01);
      
      Vector4 vector4_0 = new Vector4(107.11636, 1892.0717, 1596.0557174696, 0.0);
      assertEquals(107.11636, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(1596.0557174696, vector4_0.z(), 0.01);
      assertEquals(1892.0717, vector4_0.y(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(107.11636, vector4_0.x, 0.01);
      assertEquals(1596.0557174696, vector4_0.z, 0.01);
      assertEquals(1892.0717, vector4_0.y, 0.01);
      
      Vector4 vector4_1 = matrix4_0.transform((IVector4) vector4_0, vector4_0);
      assertEquals(107.11636, matrix4_0.m03(), 0.01);
      assertEquals(773.9505320869, matrix4_0.m02(), 0.01);
      assertEquals(1544.797256771555, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(1596.0557174696, matrix4_0.m01(), 0.01);
      assertEquals(1596.0557174696, matrix4_0.m12(), 0.01);
      assertEquals(0.0, matrix4_0.m30(), 0.01);
      assertEquals(1596.0557174696, matrix4_0.m31(), 0.01);
      assertEquals(773.9505320869, matrix4_0.m11(), 0.01);
      assertEquals(1892.0717, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m22(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(107.11636, matrix4_0.m13(), 0.01);
      assertEquals(1892.0717, matrix4_0.m10(), 0.01);
      assertEquals(760.844, matrix4_0.m33(), 0.01);
      assertEquals(1892.0717, matrix4_0.m00(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(3004.0, matrix4_0.m23(), 0.01);
      assertEquals(3102754.618464638, vector4_0.z(), 0.01);
      assertEquals(5008697.123221341, vector4_0.w(), 0.01);
      assertEquals(6802459.005951328, vector4_0.x(), 0.01);
      assertEquals(1635333.5777740974, vector4_0.y(), 0.01);
      assertEquals(6802459.005951328, vector4_1.x(), 0.01);
      assertEquals(1635333.5777740974, vector4_1.y(), 0.01);
      assertEquals(3102754.618464638, vector4_1.z(), 0.01);
      assertEquals(5008697.123221341, vector4_1.w(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(107.11636, matrix4_0.m13, 0.01);
      assertEquals(1892.0717, matrix4_0.m10, 0.01);
      assertEquals(760.844, matrix4_0.m33, 0.01);
      assertEquals(1892.0717, matrix4_0.m00, 0.01);
      assertEquals(1596.0557174696, matrix4_0.m31, 0.01);
      assertEquals(773.9505320869, matrix4_0.m02, 0.01);
      assertEquals(773.9505320869, matrix4_0.m11, 0.01);
      assertEquals(107.11636, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m30, 0.01);
      assertEquals(3004.0, matrix4_0.m23, 0.01);
      assertEquals(1596.0557174696, matrix4_0.m01, 0.01);
      assertEquals(1596.0557174696, matrix4_0.m12, 0.01);
      assertEquals(1892.0717, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m32, 0.01);
      assertEquals(0.0, matrix4_0.m22, 0.01);
      assertEquals(6802459.005951328, vector4_0.x, 0.01);
      assertEquals(5008697.123221341, vector4_0.w, 0.01);
      assertEquals(1635333.5777740974, vector4_0.y, 0.01);
      assertEquals(3102754.618464638, vector4_0.z, 0.01);
      assertEquals(5008697.123221341, vector4_1.w, 0.01);
      assertEquals(1635333.5777740974, vector4_1.y, 0.01);
      assertEquals(3102754.618464638, vector4_1.z, 0.01);
      assertEquals(6802459.005951328, vector4_1.x, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      Vector4 vector4_2 = vector4_0.negate(vector4_1);
      assertEquals(107.11636, matrix4_0.m03(), 0.01);
      assertEquals(773.9505320869, matrix4_0.m02(), 0.01);
      assertEquals(1544.797256771555, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(1596.0557174696, matrix4_0.m01(), 0.01);
      assertEquals(1596.0557174696, matrix4_0.m12(), 0.01);
      assertEquals(0.0, matrix4_0.m30(), 0.01);
      assertEquals(1596.0557174696, matrix4_0.m31(), 0.01);
      assertEquals(773.9505320869, matrix4_0.m11(), 0.01);
      assertEquals(1892.0717, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m22(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(107.11636, matrix4_0.m13(), 0.01);
      assertEquals(1892.0717, matrix4_0.m10(), 0.01);
      assertEquals(760.844, matrix4_0.m33(), 0.01);
      assertEquals(1892.0717, matrix4_0.m00(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(3004.0, matrix4_0.m23(), 0.01);
      assertEquals((-3102754.618464638), vector4_0.z(), 0.01);
      assertEquals((-5008697.123221341), vector4_0.w(), 0.01);
      assertEquals((-6802459.005951328), vector4_0.x(), 0.01);
      assertEquals((-1635333.5777740974), vector4_0.y(), 0.01);
      assertEquals((-6802459.005951328), vector4_1.x(), 0.01);
      assertEquals((-1635333.5777740974), vector4_1.y(), 0.01);
      assertEquals((-3102754.618464638), vector4_1.z(), 0.01);
      assertEquals((-5008697.123221341), vector4_1.w(), 0.01);
      assertEquals((-6802459.005951328), vector4_2.x(), 0.01);
      assertEquals((-3102754.618464638), vector4_2.z(), 0.01);
      assertEquals((-1635333.5777740974), vector4_2.y(), 0.01);
      assertEquals((-5008697.123221341), vector4_2.w(), 0.01);
      assertNotNull(vector4_2);
      assertEquals(107.11636, matrix4_0.m13, 0.01);
      assertEquals(1892.0717, matrix4_0.m10, 0.01);
      assertEquals(760.844, matrix4_0.m33, 0.01);
      assertEquals(1892.0717, matrix4_0.m00, 0.01);
      assertEquals(1596.0557174696, matrix4_0.m31, 0.01);
      assertEquals(773.9505320869, matrix4_0.m02, 0.01);
      assertEquals(773.9505320869, matrix4_0.m11, 0.01);
      assertEquals(107.11636, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m30, 0.01);
      assertEquals(3004.0, matrix4_0.m23, 0.01);
      assertEquals(1596.0557174696, matrix4_0.m01, 0.01);
      assertEquals(1596.0557174696, matrix4_0.m12, 0.01);
      assertEquals(1892.0717, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m32, 0.01);
      assertEquals(0.0, matrix4_0.m22, 0.01);
      assertEquals((-6802459.005951328), vector4_0.x, 0.01);
      assertEquals((-5008697.123221341), vector4_0.w, 0.01);
      assertEquals((-1635333.5777740974), vector4_0.y, 0.01);
      assertEquals((-3102754.618464638), vector4_0.z, 0.01);
      assertEquals((-5008697.123221341), vector4_1.w, 0.01);
      assertEquals((-1635333.5777740974), vector4_1.y, 0.01);
      assertEquals((-3102754.618464638), vector4_1.z, 0.01);
      assertEquals((-6802459.005951328), vector4_1.x, 0.01);
      assertEquals((-5008697.123221341), vector4_2.w, 0.01);
      assertEquals((-3102754.618464638), vector4_2.z, 0.01);
      assertEquals((-6802459.005951328), vector4_2.x, 0.01);
      assertEquals((-1635333.5777740974), vector4_2.y, 0.01);
      assertSame(vector4_0, vector4_2);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_2);
      assertSame(vector4_1, vector4_0);
      assertSame(vector4_2, vector4_0);
      assertSame(vector4_2, vector4_1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 638.4;
      Vector4 vector4_0 = new Vector4(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 638.4, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(638.4, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(638.4, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.negate();
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertArrayEquals(new double[] {0.0, 0.0, 638.4, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(638.4, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(-0.0, vector4_1.w(), 0.01);
      assertEquals((-638.4), vector4_1.z(), 0.01);
      assertEquals(-0.0, vector4_1.x(), 0.01);
      assertEquals(-0.0, vector4_1.y(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(638.4, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals((-638.4), vector4_1.z, 0.01);
      assertEquals(-0.0, vector4_1.w, 0.01);
      assertEquals(-0.0, vector4_1.y, 0.01);
      assertEquals(-0.0, vector4_1.x, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(0.0, matrix4_0.m30(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m31(), 0.01);
      assertEquals(0.0, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(0.0, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m12(), 0.01);
      assertEquals(0.0, matrix4_0.m23(), 0.01);
      assertEquals(0.0, matrix4_0.m02(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(1.0, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0, matrix4_0.m00(), 0.01);
      assertEquals(1.0, matrix4_0.m22(), 0.01);
      assertEquals(1.0, matrix4_0.m33(), 0.01);
      assertEquals(1.0, matrix4_0.m11(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertNotNull(matrix4_0);
      assertEquals(1.0, matrix4_0.m00, 0.01);
      assertEquals(1.0, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m33, 0.01);
      assertEquals(0.0, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(0.0, matrix4_0.m30, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m31, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m32, 0.01);
      assertEquals(0.0, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m12, 0.01);
      assertEquals(0.0, matrix4_0.m23, 0.01);
      
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      
      Vector4 vector4_1 = new Vector4(0.0, 3310.82242361, 0.0, 1.0);
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(3310.82242361, vector4_1.y(), 0.01);
      assertEquals(1.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(1.0, vector4_1.w, 0.01);
      assertEquals(3310.82242361, vector4_1.y, 0.01);
      
      Vector4 vector4_2 = matrix4_0.transform((IVector4) vector4_1, vector4_0);
      assertTrue(vector4_0.equals((Object)vector4_1));
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertTrue(vector4_2.equals((Object)vector4_1));
      assertEquals(0.0, matrix4_0.m30(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m31(), 0.01);
      assertEquals(0.0, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(0.0, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m12(), 0.01);
      assertEquals(0.0, matrix4_0.m23(), 0.01);
      assertEquals(0.0, matrix4_0.m02(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(1.0, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertTrue(matrix4_0.isAffine());
      assertEquals(1.0, matrix4_0.m00(), 0.01);
      assertEquals(1.0, matrix4_0.m22(), 0.01);
      assertEquals(1.0, matrix4_0.m33(), 0.01);
      assertEquals(1.0, matrix4_0.m11(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(3310.82242361, vector4_0.y(), 0.01);
      assertEquals(1.0, vector4_0.w(), 0.01);
      assertEquals(3310.82242361, vector4_1.y(), 0.01);
      assertEquals(1.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(0.0, vector4_2.x(), 0.01);
      assertEquals(0.0, vector4_2.z(), 0.01);
      assertEquals(1.0, vector4_2.w(), 0.01);
      assertEquals(3310.82242361, vector4_2.y(), 0.01);
      assertNotNull(vector4_2);
      assertEquals(1.0, matrix4_0.m00, 0.01);
      assertEquals(1.0, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m33, 0.01);
      assertEquals(0.0, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(0.0, matrix4_0.m30, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m31, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m32, 0.01);
      assertEquals(0.0, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m12, 0.01);
      assertEquals(0.0, matrix4_0.m23, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(3310.82242361, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(1.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(1.0, vector4_1.w, 0.01);
      assertEquals(3310.82242361, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_2.z, 0.01);
      assertEquals(0.0, vector4_2.x, 0.01);
      assertEquals(1.0, vector4_2.w, 0.01);
      assertEquals(3310.82242361, vector4_2.y, 0.01);
      assertNotSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_1, vector4_0);
      assertNotSame(vector4_1, vector4_2);
      assertNotSame(vector4_2, vector4_1);
      assertSame(vector4_2, vector4_0);
      
      Vector4 vector4_3 = vector4_0.negate();
      assertTrue(vector4_0.equals((Object)vector4_1));
      assertFalse(vector4_3.equals((Object)vector4_1));
      assertFalse(vector4_3.equals((Object)vector4_0));
      assertFalse(vector4_3.equals((Object)vector4_2));
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(3310.82242361, vector4_0.y(), 0.01);
      assertEquals(1.0, vector4_0.w(), 0.01);
      assertEquals(-0.0, vector4_3.z(), 0.01);
      assertEquals(-0.0, vector4_3.x(), 0.01);
      assertEquals((-1.0), vector4_3.w(), 0.01);
      assertEquals((-3310.82242361), vector4_3.y(), 0.01);
      assertNotNull(vector4_3);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(3310.82242361, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(1.0, vector4_0.w, 0.01);
      assertEquals(-0.0, vector4_3.z, 0.01);
      assertEquals((-1.0), vector4_3.w, 0.01);
      assertEquals(-0.0, vector4_3.x, 0.01);
      assertEquals((-3310.82242361), vector4_3.y, 0.01);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_0, vector4_3);
      assertSame(vector4_0, vector4_2);
      assertNotSame(vector4_3, vector4_1);
      assertNotSame(vector4_3, vector4_0);
      assertNotSame(vector4_3, vector4_2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1483.5097423375);
      Vector4 vector4_0 = new Vector4(doubleArray0);
      assertArrayEquals(new double[] {(-1483.5097423375), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals((-1483.5097423375), vector4_0.x, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.negate();
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertArrayEquals(new double[] {(-1483.5097423375), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals((-1483.5097423375), vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(-0.0, vector4_1.w(), 0.01);
      assertEquals(-0.0, vector4_1.y(), 0.01);
      assertEquals(1483.5097423375, vector4_1.x(), 0.01);
      assertEquals(-0.0, vector4_1.z(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals((-1483.5097423375), vector4_0.x, 0.01);
      assertEquals(-0.0, vector4_1.z, 0.01);
      assertEquals(-0.0, vector4_1.y, 0.01);
      assertEquals(-0.0, vector4_1.w, 0.01);
      assertEquals(1483.5097423375, vector4_1.x, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(2616.02112978, (-1202.4190421), (-692.8824991018472), 2616.02112978);
      assertEquals((-692.8824991018472), vector4_0.z(), 0.01);
      assertEquals((-1202.4190421), vector4_0.y(), 0.01);
      assertEquals(2616.02112978, vector4_0.x(), 0.01);
      assertEquals(2616.02112978, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(2616.02112978, vector4_0.x, 0.01);
      assertEquals((-692.8824991018472), vector4_0.z, 0.01);
      assertEquals((-1202.4190421), vector4_0.y, 0.01);
      assertEquals(2616.02112978, vector4_0.w, 0.01);
      
      Vector4 vector4_1 = vector4_0.negate();
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals((-692.8824991018472), vector4_0.z(), 0.01);
      assertEquals((-1202.4190421), vector4_0.y(), 0.01);
      assertEquals(2616.02112978, vector4_0.x(), 0.01);
      assertEquals(2616.02112978, vector4_0.w(), 0.01);
      assertEquals((-2616.02112978), vector4_1.w(), 0.01);
      assertEquals(692.8824991018472, vector4_1.z(), 0.01);
      assertEquals(1202.4190421, vector4_1.y(), 0.01);
      assertEquals((-2616.02112978), vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(2616.02112978, vector4_0.x, 0.01);
      assertEquals((-692.8824991018472), vector4_0.z, 0.01);
      assertEquals((-1202.4190421), vector4_0.y, 0.01);
      assertEquals(2616.02112978, vector4_0.w, 0.01);
      assertEquals((-2616.02112978), vector4_1.x, 0.01);
      assertEquals((-2616.02112978), vector4_1.w, 0.01);
      assertEquals(692.8824991018472, vector4_1.z, 0.01);
      assertEquals(1202.4190421, vector4_1.y, 0.01);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = Double.NaN;
      Vector4 vector4_0 = new Vector4(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(Double.NaN, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(Double.NaN, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Vector4 vector4_1 = vector4_0.negate();
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(Double.NaN, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(-0.0, vector4_1.z(), 0.01);
      assertEquals(Double.NaN, vector4_1.w(), 0.01);
      assertEquals(-0.0, vector4_1.y(), 0.01);
      assertEquals(-0.0, vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(Double.NaN, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(-0.0, vector4_1.x, 0.01);
      assertEquals(-0.0, vector4_1.y, 0.01);
      assertEquals(Double.NaN, vector4_1.w, 0.01);
      assertEquals(-0.0, vector4_1.z, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(vector4_0, vector4_1);
      assertNotSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4();
      assertEquals(1.0, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m31(), 0.01);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0, matrix4_0.m30(), 0.01);
      assertEquals(1.0, matrix4_0.m00(), 0.01);
      assertEquals(1.0, matrix4_0.m22(), 0.01);
      assertEquals(1.0, matrix4_0.m33(), 0.01);
      assertEquals(1.0, matrix4_0.m11(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertEquals(0.0, matrix4_0.m02(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(0.0, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m12(), 0.01);
      assertEquals(0.0, matrix4_0.m23(), 0.01);
      assertEquals(0.0, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertNotNull(matrix4_0);
      assertEquals(1.0, matrix4_0.m00, 0.01);
      assertEquals(1.0, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m33, 0.01);
      assertEquals(0.0, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m12, 0.01);
      assertEquals(0.0, matrix4_0.m23, 0.01);
      assertEquals(0.0, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m32, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m30, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m31, 0.01);
      
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      
      vector4_0.z = (-3310.82242361);
      assertEquals((-3310.82242361), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      
      Vector4 vector4_1 = vector4_0.multLocal((IMatrix4) matrix4_0);
      assertEquals(1.0, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(0.0, matrix4_0.m31(), 0.01);
      assertTrue(matrix4_0.isAffine());
      assertEquals(0.0, matrix4_0.m30(), 0.01);
      assertEquals(1.0, matrix4_0.m00(), 0.01);
      assertEquals(1.0, matrix4_0.m22(), 0.01);
      assertEquals(1.0, matrix4_0.m33(), 0.01);
      assertEquals(1.0, matrix4_0.m11(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals(0.0, matrix4_0.m03(), 0.01);
      assertEquals(0.0, matrix4_0.m02(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(0.0, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m12(), 0.01);
      assertEquals(0.0, matrix4_0.m23(), 0.01);
      assertEquals(0.0, matrix4_0.m21(), 0.01);
      assertEquals(0.0, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals((-3310.82242361), vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_1.w(), 0.01);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals((-3310.82242361), vector4_1.z(), 0.01);
      assertNotNull(vector4_1);
      assertEquals(1.0, matrix4_0.m00, 0.01);
      assertEquals(1.0, matrix4_0.m11, 0.01);
      assertEquals(1.0, matrix4_0.m22, 0.01);
      assertEquals(1.0, matrix4_0.m33, 0.01);
      assertEquals(0.0, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m12, 0.01);
      assertEquals(0.0, matrix4_0.m23, 0.01);
      assertEquals(0.0, matrix4_0.m02, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(0.0, matrix4_0.m21, 0.01);
      assertEquals(0.0, matrix4_0.m32, 0.01);
      assertEquals(0.0, matrix4_0.m03, 0.01);
      assertEquals(0.0, matrix4_0.m30, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m31, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals((-3310.82242361), vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals((-3310.82242361), vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      assertEquals(0.0, vector4_0.z(), 0.01);
      assertEquals(0.0, vector4_0.x(), 0.01);
      assertEquals(0.0, vector4_0.y(), 0.01);
      assertEquals(0.0, vector4_0.w(), 0.01);
      assertNotNull(vector4_0);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      
      Matrix4 matrix4_0 = new Matrix4(0.0, 0.0, 0.0, 45.6, 133.7053393045846, 0.0, Double.NaN, 1370.9134320480355, 938.81633812938, (-1.0), 3840.0, 1.0, 549.5900035566, 0.0, 3840.0, (-2114.39276416499));
      assertEquals(1.0, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(0.0, matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m11(), 0.01);
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31(), 0.01);
      assertEquals(549.5900035566, matrix4_0.m03(), 0.01);
      assertEquals(45.6, matrix4_0.m30(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(938.81633812938, matrix4_0.m02(), 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(3840.0, matrix4_0.m22(), 0.01);
      assertEquals(3840.0, matrix4_0.m23(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-1.0), matrix4_0.m12(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m21(), 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33(), 0.01);
      assertNotNull(matrix4_0);
      assertEquals((-1.0), matrix4_0.m12, 0.01);
      assertEquals(3840.0, matrix4_0.m22, 0.01);
      assertEquals(3840.0, matrix4_0.m23, 0.01);
      assertEquals(1.0, matrix4_0.m32, 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m11, 0.01);
      assertEquals(938.81633812938, matrix4_0.m02, 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(45.6, matrix4_0.m30, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31, 0.01);
      assertEquals(Double.NaN, matrix4_0.m21, 0.01);
      assertEquals(549.5900035566, matrix4_0.m03, 0.01);
      
      Vector4 vector4_1 = vector4_0.set((-28.80670950428117), 1.5707963267948966, 1.0, (-1144.599));
      assertEquals((-28.80670950428117), vector4_0.x(), 0.01);
      assertEquals(1.0, vector4_0.z(), 0.01);
      assertEquals(1.5707963267948966, vector4_0.y(), 0.01);
      assertEquals((-1144.599), vector4_0.w(), 0.01);
      assertEquals(1.5707963267948966, vector4_1.y(), 0.01);
      assertEquals(1.0, vector4_1.z(), 0.01);
      assertEquals((-1144.599), vector4_1.w(), 0.01);
      assertEquals((-28.80670950428117), vector4_1.x(), 0.01);
      assertNotNull(vector4_1);
      assertEquals((-1144.599), vector4_0.w, 0.01);
      assertEquals((-28.80670950428117), vector4_0.x, 0.01);
      assertEquals(1.5707963267948966, vector4_0.y, 0.01);
      assertEquals(1.0, vector4_0.z, 0.01);
      assertEquals((-28.80670950428117), vector4_1.x, 0.01);
      assertEquals((-1144.599), vector4_1.w, 0.01);
      assertEquals(1.0, vector4_1.z, 0.01);
      assertEquals(1.5707963267948966, vector4_1.y, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_1, vector4_0);
      
      Vector4 vector4_2 = vector4_0.multLocal((IMatrix4) matrix4_0);
      assertEquals(2420972.6833005026, vector4_0.w(), 0.01);
      assertEquals((-627911.3282868989), vector4_0.x(), 0.01);
      assertEquals((-1.0), vector4_0.y(), 0.01);
      assertEquals(Double.NaN, vector4_0.z(), 0.01);
      assertEquals(1.0, matrix4_0.m32(), 0.01);
      assertEquals(0.0, matrix4_0.m13(), 0.01);
      assertEquals(0.0, matrix4_0.m00(), 0.01);
      assertEquals(0.0, matrix4_0.m11(), 0.01);
      assertEquals(Double.NaN, matrix4_0.approximateUniformScale(), 0.01);
      assertEquals(0.0, matrix4_0.m20(), 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31(), 0.01);
      assertEquals(549.5900035566, matrix4_0.m03(), 0.01);
      assertEquals(45.6, matrix4_0.m30(), 0.01);
      assertFalse(matrix4_0.isAffine());
      assertEquals(938.81633812938, matrix4_0.m02(), 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01(), 0.01);
      assertEquals(0.0, matrix4_0.m10(), 0.01);
      assertEquals(3840.0, matrix4_0.m22(), 0.01);
      assertEquals(3840.0, matrix4_0.m23(), 0.01);
      assertFalse(matrix4_0.isMirrored());
      assertEquals((-1.0), matrix4_0.m12(), 0.01);
      assertEquals(Double.NaN, matrix4_0.m21(), 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33(), 0.01);
      assertEquals(2420972.6833005026, vector4_2.w(), 0.01);
      assertEquals(Double.NaN, vector4_2.z(), 0.01);
      assertEquals((-627911.3282868989), vector4_2.x(), 0.01);
      assertEquals((-1.0), vector4_2.y(), 0.01);
      assertNotNull(vector4_2);
      assertEquals((-1.0), vector4_0.y, 0.01);
      assertEquals(2420972.6833005026, vector4_0.w, 0.01);
      assertEquals((-627911.3282868989), vector4_0.x, 0.01);
      assertEquals(Double.NaN, vector4_0.z, 0.01);
      assertEquals((-1.0), matrix4_0.m12, 0.01);
      assertEquals(3840.0, matrix4_0.m22, 0.01);
      assertEquals(3840.0, matrix4_0.m23, 0.01);
      assertEquals(1.0, matrix4_0.m32, 0.01);
      assertEquals((-2114.39276416499), matrix4_0.m33, 0.01);
      assertEquals(0.0, matrix4_0.m20, 0.01);
      assertEquals(0.0, matrix4_0.m00, 0.01);
      assertEquals(0.0, matrix4_0.m11, 0.01);
      assertEquals(938.81633812938, matrix4_0.m02, 0.01);
      assertEquals(133.7053393045846, matrix4_0.m01, 0.01);
      assertEquals(0.0, matrix4_0.m10, 0.01);
      assertEquals(45.6, matrix4_0.m30, 0.01);
      assertEquals(0.0, matrix4_0.m13, 0.01);
      assertEquals(1370.9134320480355, matrix4_0.m31, 0.01);
      assertEquals(Double.NaN, matrix4_0.m21, 0.01);
      assertEquals(549.5900035566, matrix4_0.m03, 0.01);
      assertEquals(2420972.6833005026, vector4_2.w, 0.01);
      assertEquals((-627911.3282868989), vector4_2.x, 0.01);
      assertEquals(Double.NaN, vector4_2.z, 0.01);
      assertEquals((-1.0), vector4_2.y, 0.01);
      assertSame(vector4_0, vector4_1);
      assertSame(vector4_0, vector4_2);
      assertSame(vector4_2, vector4_0);
      assertSame(vector4_2, vector4_1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (-2011.039942);
      Vector4 vector4_0 = new Vector4(doubleArray0);
      Matrix4 matrix4_0 = new Matrix4();
      Vector4 vector4_1 = vector4_0.multLocal((IMatrix4) matrix4_0);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals((-2011.039942), vector4_0.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(49.9493440026, 1906.375, 1906.375, 49.9493440026);
      vector4_0.multLocal(49.9493440026);
      assertEquals(2494.9369662900726, vector4_0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-0.9999900000002526), (-119.882330617), (-0.9999900000002526), (-892.261586));
      Vector4 vector4_1 = vector4_0.negate(vector4_0);
      Vector4 vector4_2 = vector4_0.mult((-491.3279), vector4_1);
      vector4_2.multLocal(241398.27728056588);
      assertEquals((-1.0582731769967157E11), vector4_2.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4();
      Vector4 vector4_0 = new Vector4(0.0, (-1946.1094771), 0.0, 0.0);
      Matrix4 matrix4_1 = matrix4_0.setToOrtho(0.0, 4.0, (-2251.6723), 0.0, 0.0, 0.0);
      vector4_0.mult((IMatrix4) matrix4_1, vector4_0);
      assertEquals(Double.NaN, vector4_0.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = vector4_0.set((-44.1729032492552), (-44.1729032492552), (-791.930400347), (-791.930400347));
      Matrix4 matrix4_0 = (Matrix4)Matrix4.IDENTITY;
      vector4_1.mult((IMatrix4) matrix4_0, vector4_0);
      assertEquals((-791.930400347), vector4_0.w, 0.01);
      assertEquals((-44.1729032492552), vector4_0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-0.9999900000002526), (-119.882330617), (-0.9999900000002526), (-892.261586));
      Matrix4 matrix4_0 = new Matrix4();
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0);
      assertEquals((-892.261586), vector4_1.w, 0.01);
      assertEquals((-0.9999900000002526), vector4_1.z, 0.01);
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertEquals((-0.9999900000002526), vector4_0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Matrix4 matrix4_0 = new Matrix4();
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0);
      assertTrue(vector4_1.equals((Object)vector4_0));
      assertEquals(0.0, vector4_1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Matrix4 matrix4_0 = new Matrix4();
      Vector4 vector4_0 = new Vector4(0.0, (-1946.1094771), 0.0, 0.0);
      matrix4_0.setToOrtho(0.0, 4.0, (-2251.6723), 0.0, 0.0, 0.0);
      Vector4 vector4_1 = vector4_0.mult((IMatrix4) matrix4_0);
      vector4_1.mult((IMatrix4) matrix4_0, vector4_0);
      assertEquals(Double.NaN, vector4_0.y, 0.01);
      assertEquals(Double.NaN, vector4_1.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Matrix4 matrix4_0 = new Matrix4(0.0, 0.0, 0.0, 45.6, 133.7053393045846, 0.0, Double.NaN, 1370.9134320480355, 938.81633812938, (-1.0), 3840.0, 1.0, 549.5900035566, 0.0, 3840.0, (-2114.39276416499));
      Vector4 vector4_1 = matrix4_0.transform((IVector4) vector4_0, vector4_0);
      vector4_0.multLocal((IMatrix4) matrix4_0);
      vector4_0.mult(1778.6189335957354, vector4_1);
      assertEquals(Double.NaN, vector4_1.w, 0.01);
      assertEquals(Double.NaN, vector4_0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0, -0.0, 0.9999900000002526, -0.0);
      Vector4 vector4_1 = vector4_0.mult((-1471.6));
      assertEquals(-0.0, vector4_1.x, 0.01);
      assertEquals(-0.0, vector4_0.w, 0.01);
      assertEquals(0.9999900000002526, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals((-1471.5852840003718), vector4_1.z, 0.01);
      assertEquals(-0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(0.0, (-1946.1094771), 0.0, 0.0);
      Vector4 vector4_1 = vector4_0.mult(Double.NaN);
      assertEquals(Double.NaN, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals((-1946.1094771), vector4_0.y, 0.01);
      assertEquals(Double.NaN, vector4_1.x, 0.01);
      assertEquals(Double.NaN, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(Double.NaN, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1546.7190698283164;
      Vector4 vector4_0 = new Vector4(doubleArray0);
      Vector4 vector4_1 = vector4_0.mult((-451.1095973772896));
      assertEquals((-697739.8168460277), vector4_1.y, 0.01);
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(-0.0, vector4_1.z, 0.01);
      assertEquals(1546.7190698283164, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.w, 0.01);
      assertEquals(-0.0, vector4_1.w, 0.01);
      assertEquals(-0.0, vector4_1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-1068.9947256781284), 0.0, 0.9999900000002526, 0.0);
      assertEquals((-1068.9947256781284), vector4_0.x, 0.01);
      
      Vector4 vector4_1 = vector4_0.absLocal();
      Vector4 vector4_2 = vector4_1.mult(1068.9947256781284);
      assertEquals(1142749.7235276569, vector4_2.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = 3464.738629439877;
      Vector4 vector4_0 = new Vector4(doubleArray0);
      Vector4 vector4_1 = vector4_0.mult((-451.1095973772896));
      assertEquals(0.0, vector4_0.z, 0.01);
      assertEquals(-0.0, vector4_1.x, 0.01);
      assertEquals(-0.0, vector4_1.y, 0.01);
      assertEquals((-1562976.8481441652), vector4_1.w, 0.01);
      assertEquals(3464.738629439877, vector4_0.w, 0.01);
      assertEquals(0.0, vector4_0.y, 0.01);
      assertEquals(0.0, vector4_0.x, 0.01);
      assertEquals(-0.0, vector4_1.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = vector4_0.absLocal();
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-0.9999900000002526), (-119.882330617), (-0.9999900000002526), (-892.261586));
      assertEquals((-0.9999900000002526), vector4_0.z, 0.01);
      
      vector4_0.abs(vector4_0);
      assertEquals(0.9999900000002526, vector4_0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-152.0933), 4516.195799582811, (-152.0933), (-152.0933));
      Vector4 vector4_1 = vector4_0.abs();
      assertEquals((-152.0933), vector4_0.z, 0.01);
      assertEquals(152.0933, vector4_1.z, 0.01);
      assertEquals(152.0933, vector4_1.x, 0.01);
      assertEquals(152.0933, vector4_1.w, 0.01);
      assertEquals(4516.195799582811, vector4_0.y, 0.01);
      assertEquals(4516.195799582811, vector4_1.y, 0.01);
      assertEquals((-152.0933), vector4_0.w, 0.01);
      assertEquals((-152.0933), vector4_0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        vector4_0.set(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.set((IVector4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(2);
      // Undeclared exception!
      try { 
        vector4_0.set(doubleBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.negate((Vector4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.multLocal((IMatrix4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.mult((IMatrix4) null, vector4_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.mult((IMatrix4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.mult((-4833.0), (Vector4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.get((DoubleBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.epsilonEquals((IVector4) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.abs((Vector4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector4 vector4_0 = null;
      try {
        vector4_0 = new Vector4((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Vector4 vector4_0 = null;
      try {
        vector4_0 = new Vector4(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vector4 vector4_0 = null;
      try {
        vector4_0 = new Vector4((IVector4) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector4 vector4_0 = null;
      try {
        vector4_0 = new Vector4((DoubleBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.set((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      // Undeclared exception!
      try { 
        vector4_0.set((DoubleBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = vector4_0.mult(0.0, vector4_0);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-152.0933), 4516.195799582811, (-152.0933), (-152.0933));
      Vector4 vector4_1 = vector4_0.negate(vector4_0);
      vector4_0.set((IVector4) vector4_1);
      assertEquals(152.0933, vector4_0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = new Vector4(0.0, 0.0, 0.0, (-11.074902799939));
      boolean boolean0 = vector4_0.equals(vector4_1);
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertFalse(boolean0);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals((-11.074902799939), vector4_1.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = new Vector4(0.0, 0.0, 1.0, 0.0);
      boolean boolean0 = vector4_0.equals(vector4_1);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertFalse(boolean0);
      assertFalse(vector4_1.equals((Object)vector4_0));
      assertEquals(1.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = new Vector4(0.0, 1125.733229038855, 1125.733229038855, (-4.552786261316881E-7));
      boolean boolean0 = vector4_1.equals(vector4_0);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(1125.733229038855, vector4_1.z, 0.01);
      assertFalse(boolean0);
      assertEquals(1125.733229038855, vector4_1.y, 0.01);
      assertEquals((-4.552786261316881E-7), vector4_1.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector4 vector4_0 = new Vector4(3.4028234663852886E38, 0.0, (-1.0), 0.0);
      Vector4 vector4_1 = new Vector4(vector4_0);
      vector4_1.multLocal((-1.0));
      boolean boolean0 = vector4_1.equals(vector4_0);
      assertEquals(1.0, vector4_1.z, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Object object0 = new Object();
      boolean boolean0 = vector4_0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = new Vector4(0.0, 0.0, 0.0, 1143.016256868);
      boolean boolean0 = vector4_0.epsilonEquals(vector4_1, 1143.016256868);
      assertEquals(0.0, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals(1143.016256868, vector4_1.w, 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, vector4_1.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = new Vector4(0.0, 0.0, 1159.7229, 0.0);
      boolean boolean0 = vector4_0.epsilonEquals(vector4_1, 1159.7229);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, vector4_1.y(), 0.01);
      assertEquals(1159.7229, vector4_1.z(), 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = new Vector4(0.0, 1125.733229038855, 1125.733229038855, (-4.552786261316881E-7));
      boolean boolean0 = vector4_0.epsilonEquals(vector4_1, 1125.733229038855);
      assertFalse(boolean0);
      assertEquals(1125.733229038855, vector4_1.y(), 0.01);
      assertEquals(0.0, vector4_1.x(), 0.01);
      assertEquals((-4.552786261316881E-7), vector4_1.w, 0.01);
      assertEquals(1125.733229038855, vector4_1.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector4 vector4_0 = new Vector4((-152.0933), 4516.195799582811, (-152.0933), (-152.0933));
      Vector4 vector4_1 = vector4_0.absLocal();
      Vector4 vector4_2 = vector4_0.negate(vector4_1);
      double double0 = vector4_2.x();
      assertEquals((-152.0933), vector4_0.x, 0.01);
      assertEquals((-152.0933), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = vector4_0.abs();
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertNotSame(vector4_1, vector4_0);
      assertEquals(0.0, vector4_1.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = vector4_0.multLocal(4.0);
      assertEquals(0.0, vector4_1.w, 0.01);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      Vector4 vector4_1 = vector4_0.abs(vector4_0);
      assertEquals(0.0, vector4_1.z, 0.01);
      assertEquals(0.0, vector4_1.x, 0.01);
      assertEquals(0.0, vector4_1.y, 0.01);
      assertEquals(0.0, vector4_1.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector4 vector4_0 = new Vector4();
      vector4_0.negateLocal();
      assertEquals(-0.0, vector4_0.w, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(1);
      Vector4 vector4_0 = null;
      try {
        vector4_0 = new Vector4(doubleBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
