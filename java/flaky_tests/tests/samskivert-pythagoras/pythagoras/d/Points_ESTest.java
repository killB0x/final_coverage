/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:16:52 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.IPoint;
import pythagoras.d.MathUtil;
import pythagoras.d.Point;
import pythagoras.d.Points;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Points_ESTest extends Points_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = Points.pointToString(9.999999747378752E-6, (-3.141592653589793));
      assertEquals("+0.0-3.141", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point point0 = (Point)Points.ZERO;
      Point point1 = new Point(point0);
      boolean boolean0 = Points.epsilonEquals((IPoint) point1, (IPoint) point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point point0 = new Point();
      boolean boolean0 = Points.epsilonEquals((IPoint) point0, (IPoint) point0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point point0 = new Point();
      Points points0 = new Points();
      boolean boolean0 = Points.epsilonEquals(points0.ZERO, (IPoint) point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Points.distance(0.0, 0.0, (-111.07492866), (-2851.01732603977));
      assertEquals(2853.180231453279, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point point0 = new Point(628.7953342297607, 0.0);
      Points.transform(1.0, 9.999999747378752E-6, 9.999999747378752E-6, 0.0, 9.999999747378752E-6, 9.999999747378752E-6, 0.0, point0);
      assertEquals(1.9999999493257503E-5, point0.x, 0.01);
      assertEquals(0.0, point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point point0 = new Point();
      Points.transform((-910.04429124), 4007.621, 0.0, 0.027510033166073467, 2853.180231453279, 0.0, 0.0, point0);
      assertEquals(75.68019439168873, point0.y, 0.01);
      assertEquals(75.68019439168873, point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point point0 = new Point(0.0, 321.5709548498614);
      Points.transform(925.2853568, 0.0, 0.0, 5600485.861549662, (-373.724922474), 1881.27, 2.2340920285481848E7, point0);
      assertEquals(1881.27, point0.x, 0.01);
      assertEquals((-6.216897642073189E8), point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point point0 = new Point((-1913.06360346), 1929.102936631943);
      Points.transform(1404.3, 0.0, 0.0, 0.0, 2938478.355607195, (-237.065188872), 9.999999747378752E-6, 0.0, point0);
      assertEquals(9.999999747378752E-6, point0.x, 0.01);
      assertEquals(0.0, point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point point0 = new Point();
      Points.transform((-412.9638), (-1.0), 1459.72394, 0.0, 0.0, (-111.07492866), (-3.141592653589793), 2853.180231453279, point0);
      assertEquals(2853.180231453279, point0.y, 0.01);
      assertEquals(6.6957423958292864E7, point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point point0 = new Point();
      Points.transform((-2723.7891041), 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, (-2723.7891041), (-2723.7891041), (-2723.7891041), point0);
      assertEquals((-2649.5988351380647), point0.x, 0.01);
      assertEquals((-2723.7891046447576), point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point point0 = new Point((-2207.600934), (-2207.600934));
      Points.inverseTransform((-2207.600934), (-2207.600934), (-2207.600934), (-2207.600934), (-2207.600934), (-2207.600934), (-2207.600934), point0);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point point0 = (Point)Points.ZERO;
      assertEquals(0.0, point0.y, 0.01);
      
      Points.inverseTransform(3.141592653589793, (-2627.75928), 3.141592653589793, (-497.9455675), 3.141592653589793, 0.0, 0.0, point0);
      assertEquals((-1.0000000000001026), point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point point0 = new Point();
      boolean boolean0 = Points.epsilonEquals((IPoint) point0, (IPoint) point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = Points.distanceSq(1432.8526907789333, 1432.8526907789333, 1432.8526907789333, 1432.8526907789333);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = Points.distance(1432.8526907789333, 1432.8526907789333, 1432.8526907789333, 1432.8526907789333);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Points.transform((-819.63), (-819.63), (-819.63), (-819.63), (-819.63), (-819.63), (-819.63), (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Points", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Points.transform((-819.63), (-819.63), (-819.63), (-819.63), (-819.63), (-819.63), (-819.63), (-819.63), (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Points", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MathUtil.TO_STRING_DECIMAL_PLACES = 1321991402;
      // Undeclared exception!
      Points.pointToString(1321991402, 1321991402);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Points.inverseTransform(9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, 9.999999747378752E-6, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Points", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Points.epsilonEquals((IPoint) null, (IPoint) null, 258.7098151255788);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Points", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Points.epsilonEquals((IPoint) null, (IPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Points", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point point0 = (Point)Points.ZERO;
      boolean boolean0 = Points.epsilonEquals((IPoint) point0, (IPoint) point0, 1.5707963267948966);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point point0 = new Point((-1913.06360346), 1929.102936631943);
      Points.transform(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1929.102936631943, point0);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = Points.distanceSq((-394.2650073810489), (-0.01508336001909221), 1.5707963267948966, 112.832651251319);
      assertEquals(169420.59470394562, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Points points0 = new Points();
      Point point0 = new Point(points0.ZERO);
      Point point1 = Points.inverseTransform(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-2564.535), 1660.94, 722.3946867874, 1012.81476982183, Double.NaN, point0);
      Point point2 = Points.inverseTransform(722.3946867874, 1012.81476982183, 0.5, 9.999999747378752E-6, Double.NaN, (-1148.97736), 1.5707963267948966, point1);
      Points.epsilonEquals(points0.ZERO, (IPoint) point2, Double.NaN);
      assertEquals(Double.NaN, point0.y, 0.01);
      
      boolean boolean0 = Points.epsilonEquals(points0.ZERO, points0.ZERO);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point point0 = new Point();
      Points.transform(0.0, (-111.07492866), 9.999999747378752E-6, 0.0, 0.0, (-412.9638), 9.999999747378752E-6, point0);
      assertEquals(9.999999747378752E-6, point0.y, 0.01);
      assertEquals((-412.9638), point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = Points.distance(1.5707963267948966, (-4093.4512909975), 1.5707963267948966, 21.530859112719575);
      assertEquals(4114.98215011022, double0, 0.01);
  }
}
