/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:31:42 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AffineTransform;
import pythagoras.d.Dimension;
import pythagoras.d.IDimension;
import pythagoras.d.IRoundRectangle;
import pythagoras.d.Point;
import pythagoras.d.Rectangle;
import pythagoras.d.RoundRectangle;
import pythagoras.d.Vector;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RoundRectangle_ESTest extends RoundRectangle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(0.0, 0.0, 0.0, 0.0, 0.0, 1058.436256079);
      AffineTransform affineTransform0 = new AffineTransform(0.0, 3789.034770739592, 0.0, 0.0, (-608.9319430712));
      Vector vector0 = affineTransform0.translation();
      roundRectangle0.setFrameFromCenter((XY) vector0, (XY) vector0);
      assertEquals((-608.9319430712), roundRectangle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.x = (-4326.32448643);
      Rectangle rectangle0 = new Rectangle(1.0, 0.0, (-1.0), (-1.0));
      roundRectangle0.bounds(rectangle0);
      assertEquals(0.0, rectangle0.width, 0.01);
      assertEquals((-4326.32448643), roundRectangle0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame((-2409.2), 9.999999747378752E-6, 0.0, (-4326.32448643));
      assertEquals(9.999999747378752E-6, roundRectangle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      double double0 = roundRectangle0.y();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setRoundRect(3438.8836460239986, 3438.8836460239986, 734.9682001, (-1.0), 9.999999747378752E-6, 79.29199);
      double double0 = roundRectangle0.y();
      assertEquals(9.999999747378752E-6, roundRectangle0.arcwidth, 0.01);
      assertEquals(3438.8836460239986, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-1015.5725), (-1015.5725), 4726.118390944216, 4726.118390944216, (-476.608896), 0.0);
      double double0 = roundRectangle0.y();
      assertEquals(0.0, roundRectangle0.archeight, 0.01);
      assertEquals(4726.118390944216, roundRectangle0.width, 0.01);
      assertEquals((-476.608896), roundRectangle0.arcwidth, 0.01);
      assertEquals((-1015.5725), roundRectangle0.x, 0.01);
      assertEquals(4726.118390944216, roundRectangle0.height, 0.01);
      assertEquals((-1015.5725), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0, 0.0, 0.0, (-0.5), 0.0, (-430.98));
      double double0 = roundRectangle0.x();
      assertEquals(0.0, roundRectangle0.y, 0.01);
      assertEquals(0.0, roundRectangle0.width, 0.01);
      assertEquals((-0.5), roundRectangle0.height, 0.01);
      assertEquals(0.0, roundRectangle0.arcwidth, 0.01);
      assertEquals((-430.98), roundRectangle0.archeight, 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.x = (-4326.32448643);
      double double0 = roundRectangle0.x();
      assertEquals((-4326.32448643), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      double double0 = roundRectangle0.width();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(748.7, 1500.5108957345028, 1500.5108957345028, 3101.91368, 0.0, 0.0);
      double double0 = roundRectangle0.width();
      assertEquals(748.7, roundRectangle0.x, 0.01);
      assertEquals(3101.91368, roundRectangle0.height, 0.01);
      assertEquals(1500.5108957345028, roundRectangle0.y, 0.01);
      assertEquals(0.0, roundRectangle0.archeight, 0.01);
      assertEquals(0.0, roundRectangle0.arcwidth, 0.01);
      assertEquals(1500.5108957345028, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-938.043139444558), 0.0, (-938.043139444558), (-938.043139444558), 0.0, 1.0);
      double double0 = roundRectangle0.width();
      assertEquals((-938.043139444558), double0, 0.01);
      assertEquals(0.0, roundRectangle0.y, 0.01);
      assertEquals(0.0, roundRectangle0.arcwidth, 0.01);
      assertEquals((-938.043139444558), roundRectangle0.x, 0.01);
      assertEquals(1.0, roundRectangle0.archeight, 0.01);
      assertEquals((-938.043139444558), roundRectangle0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(0.0, 0.0, 0.0, 0.0, 0.0, 1058.436256079);
      double double0 = roundRectangle0.height();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1058.436256079, roundRectangle0.archeight, 0.01);
      assertEquals(0.0, roundRectangle0.arcwidth, 0.01);
      assertEquals(0.0, roundRectangle0.width, 0.01);
      assertEquals(0.0, roundRectangle0.x, 0.01);
      assertEquals(0.0, roundRectangle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.height = 3438.8836460239986;
      double double0 = roundRectangle0.height();
      assertEquals(3438.8836460239986, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0, 0.0, 0.0, (-0.5), 0.0, (-430.98));
      double double0 = roundRectangle0.height();
      assertEquals(1.0, roundRectangle0.x, 0.01);
      assertEquals(0.0, roundRectangle0.width, 0.01);
      assertEquals(0.0, roundRectangle0.y, 0.01);
      assertEquals(0.0, roundRectangle0.arcwidth, 0.01);
      assertEquals((-0.5), double0, 0.01);
      assertEquals((-430.98), roundRectangle0.archeight, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      double double0 = roundRectangle0.arcWidth();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(0.0, 0.0, 0.0, 0.0, 0.0, 1058.436256079);
      roundRectangle0.setRoundRect(0.0, 0.0, 0.0, 9.999999747378752E-6, 1.0, 1.0);
      double double0 = roundRectangle0.arcWidth();
      assertEquals(9.999999747378752E-6, roundRectangle0.height, 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-1018.545), (-1018.545), (-1018.545), 2000.83247, (-873.58876), (-1812.042234));
      double double0 = roundRectangle0.arcWidth();
      assertEquals((-1018.545), roundRectangle0.y, 0.01);
      assertEquals((-1018.545), roundRectangle0.x, 0.01);
      assertEquals((-873.58876), double0, 0.01);
      assertEquals((-1812.042234), roundRectangle0.archeight, 0.01);
      assertEquals(2000.83247, roundRectangle0.height, 0.01);
      assertEquals((-1018.545), roundRectangle0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      double double0 = roundRectangle0.arcHeight();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(0.0, 0.0, 0.0, 0.0, 0.0, 1058.436256079);
      double double0 = roundRectangle0.arcHeight();
      assertEquals(0.0, roundRectangle0.height, 0.01);
      assertEquals(1058.436256079, double0, 0.01);
      assertEquals(0.0, roundRectangle0.x, 0.01);
      assertEquals(0.0, roundRectangle0.y, 0.01);
      assertEquals(0.0, roundRectangle0.arcwidth, 0.01);
      assertEquals(0.0, roundRectangle0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-1018.545), (-1018.545), (-1018.545), 2000.83247, (-873.58876), (-1812.042234));
      double double0 = roundRectangle0.arcHeight();
      assertEquals(2000.83247, roundRectangle0.height, 0.01);
      assertEquals((-1018.545), roundRectangle0.y, 0.01);
      assertEquals((-1018.545), roundRectangle0.x, 0.01);
      assertEquals((-873.58876), roundRectangle0.arcwidth, 0.01);
      assertEquals((-1812.042234), double0, 0.01);
      assertEquals((-1018.545), roundRectangle0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setRoundRect((IRoundRectangle) roundRectangle0);
      assertEquals(0.0, roundRectangle0.height, 0.01);
      assertEquals(0.0, roundRectangle0.arcwidth, 0.01);
      assertEquals(0.0, roundRectangle0.arcHeight(), 0.01);
      assertEquals(0.0, roundRectangle0.y, 0.01);
      assertEquals(0.0, roundRectangle0.x, 0.01);
      assertEquals(0.0, roundRectangle0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(748.7, 1500.5108957345028, 1500.5108957345028, 3101.91368, 0.0, 0.0);
      Point point0 = new Point();
      Dimension dimension0 = new Dimension(1451.5174423, 0.0);
      roundRectangle0.setFrame((XY) point0, (IDimension) dimension0);
      double double0 = roundRectangle0.x();
      assertEquals(1451.5174423, roundRectangle0.width, 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
