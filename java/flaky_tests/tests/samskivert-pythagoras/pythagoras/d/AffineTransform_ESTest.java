/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:38:53 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AffineTransform;
import pythagoras.d.IPoint;
import pythagoras.d.IVector;
import pythagoras.d.IdentityTransform;
import pythagoras.d.MathUtil;
import pythagoras.d.Point;
import pythagoras.d.Transform;
import pythagoras.d.Vector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AffineTransform_ESTest extends AffineTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      
      affineTransform0.ty = (-1394.3330622415542);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals((-1394.3330622415542), affineTransform0.ty(), 0.01);
      
      String string0 = affineTransform0.toString();
      assertEquals("trans +0.0-1394.333", string0);
      assertNotNull(string0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals((-1394.3330622415542), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals((-1394.3330622415542), affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.translate((-1912.532162409235), (-1912.532162409235));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals((-1912.532162409235), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1912.532162409235), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1912.532162409235), affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals((-1912.532162409235), affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals((-1912.532162409235), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1912.532162409235), affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals((-1912.532162409235), affineTransform1.ty, 0.01);
      assertEquals((-1912.532162409235), affineTransform1.tx, 0.01);
      
      String string0 = affineTransform1.toString();
      assertEquals("trans -1912.532-1912.532", string0);
      assertNotNull(string0);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals((-1912.532162409235), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1912.532162409235), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1912.532162409235), affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals((-1912.532162409235), affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals((-1912.532162409235), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1912.532162409235), affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals((-1912.532162409235), affineTransform1.ty, 0.01);
      assertEquals((-1912.532162409235), affineTransform1.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0, (-70.29758), 0.0, 0.0, 1.0, 2.9343097238243607);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals(70.30469226059097, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2.9343097238243607, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(2.9343097238243607, affineTransform0.ty, 0.01);
      assertEquals((-70.29758), affineTransform0.m01, 0.01);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      
      // Undeclared exception!
      try { 
        affineTransform0.inverseTransform((IPoint) point0, point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // affine [+1.0 -70.297 +0.0 +0.0 +1.0+2.934]
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 0.5);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.5, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.5, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setScale(0.5, Double.NaN);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.5, affineTransform0.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(Double.NaN, affineTransform1.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleY(), 0.01);
      assertEquals(0.5, affineTransform1.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals(0.5, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(Double.NaN, affineTransform1.m10, 0.01);
      assertEquals(Double.NaN, affineTransform1.m00, 0.01);
      assertEquals(Double.NaN, affineTransform1.m11, 0.01);
      assertEquals(0.5, affineTransform1.ty, 0.01);
      assertEquals(Double.NaN, affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      Point point0 = new Point((-1534.0), 0.0);
      assertNotNull(point0);
      assertEquals((-1534.0), point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals((-1534.0), point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      
      Vector vector0 = new Vector(point0);
      assertNotNull(vector0);
      assertEquals((-1534.0), point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals((-1534.0), vector0.x(), 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals((-1534.0), point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals(0.0, vector0.y, 0.01);
      assertEquals((-1534.0), vector0.x, 0.01);
      
      Vector vector1 = affineTransform1.inverseTransform((IVector) vector0, vector0);
      assertNotNull(vector1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.5, affineTransform0.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(Double.NaN, affineTransform1.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleY(), 0.01);
      assertEquals(0.5, affineTransform1.ty(), 0.01);
      assertEquals((-1534.0), point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals(Double.NaN, vector0.x(), 0.01);
      assertEquals(Double.NaN, vector0.y(), 0.01);
      assertEquals(Double.NaN, vector1.x(), 0.01);
      assertEquals(Double.NaN, vector1.y(), 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals(0.5, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(Double.NaN, affineTransform1.m10, 0.01);
      assertEquals(Double.NaN, affineTransform1.m00, 0.01);
      assertEquals(Double.NaN, affineTransform1.m11, 0.01);
      assertEquals(0.5, affineTransform1.ty, 0.01);
      assertEquals(Double.NaN, affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1534.0), point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals(Double.NaN, vector0.y, 0.01);
      assertEquals(Double.NaN, vector0.x, 0.01);
      assertEquals(Double.NaN, vector1.y, 0.01);
      assertEquals(Double.NaN, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3.141592653589793, 3.141592653589793, 0.0, (-1.0), (-1.0), (-1.0));
      assertNotNull(affineTransform0);
      assertEquals((-1.7724538509055159), affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m01, 0.01);
      
      Vector vector0 = new Vector(9.999999747378752E-6, 3.141592653589793);
      assertNotNull(vector0);
      assertEquals(3.141592653589793, vector0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector0.x(), 0.01);
      assertEquals(3.141592653589793, vector0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector0.x, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setRotation(4.442882938158366);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(2.1078147305108117, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals(4.442882938158366, affineTransform1.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform1.tx(), 0.01);
      assertEquals((-1.0), affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(2.1078147305108117, affineTransform1.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals((-0.26625534204141565), affineTransform0.m11, 0.01);
      assertEquals((-4.282506117246354), affineTransform0.m01, 0.01);
      assertEquals((-1.1829413163493254), affineTransform0.m00, 0.01);
      assertEquals(0.9639025328498773, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-1.0), affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-4.282506117246354), affineTransform1.m01, 0.01);
      assertEquals((-1.1829413163493254), affineTransform1.m00, 0.01);
      assertEquals(0.9639025328498773, affineTransform1.m10, 0.01);
      assertEquals((-0.26625534204141565), affineTransform1.m11, 0.01);
      assertEquals((-1.0), affineTransform1.tx, 0.01);
      
      Vector vector1 = affineTransform0.transform((IVector) vector0, vector0);
      assertNotNull(vector1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertEquals(2.1078147305108117, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals((-0.8365086515964396), vector0.y(), 0.01);
      assertEquals(3.0281772865649037, vector0.x(), 0.01);
      assertEquals((-0.8365086515964396), vector1.y(), 0.01);
      assertEquals(3.0281772865649037, vector1.x(), 0.01);
      assertEquals((-0.26625534204141565), affineTransform0.m11, 0.01);
      assertEquals((-4.282506117246354), affineTransform0.m01, 0.01);
      assertEquals((-1.1829413163493254), affineTransform0.m00, 0.01);
      assertEquals(0.9639025328498773, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-0.8365086515964396), vector0.y, 0.01);
      assertEquals(3.0281772865649037, vector0.x, 0.01);
      assertEquals(3.0281772865649037, vector1.x, 0.01);
      assertEquals((-0.8365086515964396), vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 1290.8801);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setScale(0.0, 2110.3002420571725);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleX(), 0.01);
      assertEquals(1290.8801, affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(Double.NaN, affineTransform1.m00, 0.01);
      assertEquals(Double.NaN, affineTransform1.m11, 0.01);
      assertEquals(Double.NaN, affineTransform1.m10, 0.01);
      assertEquals(Double.NaN, affineTransform1.m01, 0.01);
      assertEquals(1290.8801, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      
      Point point1 = affineTransform0.inverseTransform((IPoint) point0, point0);
      assertNotNull(point1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(Double.NaN, point0.y(), 0.01);
      assertEquals(Double.NaN, point0.x(), 0.01);
      assertEquals(Double.NaN, point1.x(), 0.01);
      assertEquals(Double.NaN, point1.y(), 0.01);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(Double.NaN, point0.y, 0.01);
      assertEquals(Double.NaN, point0.x, 0.01);
      assertEquals(Double.NaN, point1.x, 0.01);
      assertEquals(Double.NaN, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setScale(0.0, 2057.7998392616005);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(Double.NaN, affineTransform1.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(Double.NaN, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(Double.NaN, affineTransform1.m00, 0.01);
      assertEquals(Double.NaN, affineTransform1.m11, 0.01);
      assertEquals(Double.NaN, affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = affineTransform1.shearY(0.0);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform0.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(Double.NaN, affineTransform1.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform1.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(Double.NaN, affineTransform2.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform2.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform2.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform2.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform2.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals(Double.NaN, affineTransform0.ty, 0.01);
      assertEquals(Double.NaN, affineTransform0.tx, 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals(Double.NaN, affineTransform1.m10, 0.01);
      assertEquals(Double.NaN, affineTransform1.m00, 0.01);
      assertEquals(Double.NaN, affineTransform1.m11, 0.01);
      assertEquals(Double.NaN, affineTransform1.m01, 0.01);
      assertEquals(Double.NaN, affineTransform1.ty, 0.01);
      assertEquals(Double.NaN, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Double.NaN, affineTransform2.tx, 0.01);
      assertEquals(Double.NaN, affineTransform2.m00, 0.01);
      assertEquals(Double.NaN, affineTransform2.m11, 0.01);
      assertEquals(Double.NaN, affineTransform2.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Double.NaN, affineTransform2.m10, 0.01);
      assertEquals(Double.NaN, affineTransform2.ty, 0.01);
      
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        affineTransform2.transform(doubleArray0, 0, doubleArray0, 0, 2956);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(5.427965971680854E9, (-858.75), (-80.619585828), 0.0, (-80.619585828), (-1.0));
      assertNotNull(affineTransform0);
      assertEquals((-263.1198763487757), affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(5.427965971680922E9, affineTransform0.scaleX(), 0.01);
      assertEquals((-80.619585828), affineTransform0.tx(), 0.01);
      assertEquals(80.619585828, affineTransform0.scaleY(), 0.01);
      assertEquals((-80.619585828), affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(5.427965971680854E9, affineTransform0.m00, 0.01);
      assertEquals((-858.75), affineTransform0.m01, 0.01);
      assertEquals((-80.619585828), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 2806;
      // Undeclared exception!
      try { 
        affineTransform0.transform(doubleArray0, 0, doubleArray0, 1236, 2147470001);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1236 out of bounds for length 9
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 4;
      // Undeclared exception!
      try { 
        affineTransform0.transform(doubleArray0, 4, doubleArray0, 0, 1731);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = Double.NaN;
      // Undeclared exception!
      try { 
        affineTransform0.transform(doubleArray0, 4, doubleArray0, 0, 1731);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-247.67081), 417.0617924, (-2772.394248), 417.0617924);
      assertNotNull(affineTransform0);
      assertEquals(247.67080999999996, affineTransform0.uniformScale(), 0.01);
      assertEquals(417.0617924, affineTransform0.ty(), 0.01);
      assertEquals(247.67080999999996, affineTransform0.scaleX(), 0.01);
      assertEquals(247.67080999999996, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-2772.394248), affineTransform0.tx(), 0.01);
      assertEquals(417.0617924, affineTransform0.ty, 0.01);
      assertEquals(172.41780628773995, affineTransform0.m10, 0.01);
      assertEquals(177.80025365836647, affineTransform0.m00, 0.01);
      assertEquals(177.80025365836647, affineTransform0.m11, 0.01);
      assertEquals((-172.41780628773995), affineTransform0.m01, 0.01);
      assertEquals((-2772.394248), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      affineTransform0.transform(doubleArray0, (-666), doubleArray1, (-666), 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(247.67080999999996, affineTransform0.uniformScale(), 0.01);
      assertEquals(417.0617924, affineTransform0.ty(), 0.01);
      assertEquals(247.67080999999996, affineTransform0.scaleX(), 0.01);
      assertEquals(247.67080999999996, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-2772.394248), affineTransform0.tx(), 0.01);
      assertEquals(417.0617924, affineTransform0.ty, 0.01);
      assertEquals(172.41780628773995, affineTransform0.m10, 0.01);
      assertEquals(177.80025365836647, affineTransform0.m00, 0.01);
      assertEquals(177.80025365836647, affineTransform0.m11, 0.01);
      assertEquals((-172.41780628773995), affineTransform0.m01, 0.01);
      assertEquals((-2772.394248), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      IPoint[] iPointArray0 = new IPoint[4];
      Point[] pointArray0 = new Point[9];
      affineTransform0.transform(iPointArray0, 4, pointArray0, 0, (-1));
      assertEquals(4, iPointArray0.length);
      assertEquals(9, pointArray0.length);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, (-3474.44443), 0.0, 1.5707963267948966, 1.5707963267948966, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(1.5707963267948966, affineTransform0.scaleY(), 0.01);
      assertEquals(1.5707963267948966, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3474.44443, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.5707963267948966, affineTransform0.tx, 0.01);
      assertEquals((-3474.44443), affineTransform0.m01, 0.01);
      assertEquals(1.5707963267948966, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTranslation(520.802, 520.802);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1.5707963267948966, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(520.802, affineTransform0.tx(), 0.01);
      assertEquals(3474.44443, affineTransform0.scaleX(), 0.01);
      assertEquals(520.802, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.5707963267948966, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(3474.44443, affineTransform1.scaleX(), 0.01);
      assertEquals(520.802, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(520.802, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-3474.44443), affineTransform0.m01, 0.01);
      assertEquals(520.802, affineTransform0.tx, 0.01);
      assertEquals(1.5707963267948966, affineTransform0.m11, 0.01);
      assertEquals(520.802, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals((-3474.44443), affineTransform1.m01, 0.01);
      assertEquals(1.5707963267948966, affineTransform1.m11, 0.01);
      assertEquals(520.802, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(520.802, affineTransform1.ty, 0.01);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      assertEquals(0.0, vector0.y, 0.01);
      
      Vector vector1 = affineTransform1.transformPoint(vector0, vector0);
      assertNotNull(vector1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertEquals(1.5707963267948966, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(520.802, affineTransform0.tx(), 0.01);
      assertEquals(3474.44443, affineTransform0.scaleX(), 0.01);
      assertEquals(520.802, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.5707963267948966, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(3474.44443, affineTransform1.scaleX(), 0.01);
      assertEquals(520.802, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(520.802, affineTransform1.ty(), 0.01);
      assertEquals(520.802, vector0.x(), 0.01);
      assertEquals(520.802, vector0.y(), 0.01);
      assertEquals(520.802, vector1.y(), 0.01);
      assertEquals(520.802, vector1.x(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-3474.44443), affineTransform0.m01, 0.01);
      assertEquals(520.802, affineTransform0.tx, 0.01);
      assertEquals(1.5707963267948966, affineTransform0.m11, 0.01);
      assertEquals(520.802, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals((-3474.44443), affineTransform1.m01, 0.01);
      assertEquals(1.5707963267948966, affineTransform1.m11, 0.01);
      assertEquals(520.802, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(520.802, affineTransform1.ty, 0.01);
      assertEquals(520.802, vector0.x, 0.01);
      assertEquals(520.802, vector0.y, 0.01);
      assertEquals(520.802, vector1.x, 0.01);
      assertEquals(520.802, vector1.y, 0.01);
      
      Point point0 = new Point(vector0);
      assertNotNull(point0);
      assertEquals(520.802, vector0.x(), 0.01);
      assertEquals(520.802, vector0.y(), 0.01);
      assertEquals(520.802, point0.y(), 0.01);
      assertEquals(520.802, point0.x(), 0.01);
      assertEquals(520.802, vector0.x, 0.01);
      assertEquals(520.802, vector0.y, 0.01);
      assertEquals(520.802, point0.x, 0.01);
      assertEquals(520.802, point0.y, 0.01);
      
      Point point1 = affineTransform1.transform((IPoint) point0, point0);
      assertNotNull(point1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertSame(vector0, vector1);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(1.5707963267948966, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(520.802, affineTransform0.tx(), 0.01);
      assertEquals(3474.44443, affineTransform0.scaleX(), 0.01);
      assertEquals(520.802, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.5707963267948966, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(3474.44443, affineTransform1.scaleX(), 0.01);
      assertEquals(520.802, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(520.802, affineTransform1.ty(), 0.01);
      assertEquals(520.802, vector0.x(), 0.01);
      assertEquals(520.802, vector0.y(), 0.01);
      assertEquals(520.802, point0.x(), 0.01);
      assertEquals((-1808158.7321642728), point0.y(), 0.01);
      assertEquals(520.802, point1.x(), 0.01);
      assertEquals((-1808158.7321642728), point1.y(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-3474.44443), affineTransform0.m01, 0.01);
      assertEquals(520.802, affineTransform0.tx, 0.01);
      assertEquals(1.5707963267948966, affineTransform0.m11, 0.01);
      assertEquals(520.802, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals((-3474.44443), affineTransform1.m01, 0.01);
      assertEquals(1.5707963267948966, affineTransform1.m11, 0.01);
      assertEquals(520.802, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(520.802, affineTransform1.ty, 0.01);
      assertEquals(520.802, vector0.x, 0.01);
      assertEquals(520.802, vector0.y, 0.01);
      assertEquals((-1808158.7321642728), point0.y, 0.01);
      assertEquals(520.802, point0.x, 0.01);
      assertEquals(520.802, point1.x, 0.01);
      assertEquals((-1808158.7321642728), point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3.141592653589793, 3.141592653589793, 0.0, (-1.0), (-1.0), (-1.0));
      assertNotNull(affineTransform0);
      assertEquals((-1.7724538509055159), affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.141592653589793, affineTransform0.m01, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      assertEquals((-1.0), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setRotation(4.442882938158366);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(2.1078147305108117, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1.0), affineTransform1.tx(), 0.01);
      assertEquals(4.442882938158366, affineTransform1.scaleX(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(2.1078147305108117, affineTransform1.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-4.282506117246354), affineTransform0.m01, 0.01);
      assertEquals((-1.1829413163493254), affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.9639025328498773, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-0.26625534204141565), affineTransform0.m11, 0.01);
      assertEquals((-1.0), affineTransform1.ty, 0.01);
      assertEquals((-1.0), affineTransform1.tx, 0.01);
      assertEquals(0.9639025328498773, affineTransform1.m10, 0.01);
      assertEquals((-4.282506117246354), affineTransform1.m01, 0.01);
      assertEquals((-1.1829413163493254), affineTransform1.m00, 0.01);
      assertEquals((-0.26625534204141565), affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = (AffineTransform)affineTransform1.lerp(affineTransform0, (-2417.65));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertNotNull(affineTransform2);
      assertNotSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertNotSame(affineTransform2, affineTransform0);
      assertNotSame(affineTransform2, affineTransform1);
      assertEquals(2.1078147305108117, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1.0), affineTransform1.tx(), 0.01);
      assertEquals(4.442882938158366, affineTransform1.scaleX(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(2.1078147305108117, affineTransform1.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1.0), affineTransform2.tx(), 0.01);
      assertEquals(4.442882938158366, affineTransform2.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform2.ty(), 0.01);
      assertEquals(2.1078147305108117, affineTransform2.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform2.scaleY(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-4.282506117246354), affineTransform0.m01, 0.01);
      assertEquals((-1.1829413163493254), affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.9639025328498773, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-0.26625534204141565), affineTransform0.m11, 0.01);
      assertEquals((-1.0), affineTransform1.ty, 0.01);
      assertEquals((-1.0), affineTransform1.tx, 0.01);
      assertEquals(0.9639025328498773, affineTransform1.m10, 0.01);
      assertEquals((-4.282506117246354), affineTransform1.m01, 0.01);
      assertEquals((-1.1829413163493254), affineTransform1.m00, 0.01);
      assertEquals((-0.26625534204141565), affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform2.ty, 0.01);
      assertEquals((-4.282506117246354), affineTransform2.m01, 0.01);
      assertEquals((-1.1829413163493254), affineTransform2.m00, 0.01);
      assertEquals(0.9639025328498773, affineTransform2.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform2.tx, 0.01);
      assertEquals((-0.26625534204141565), affineTransform2.m11, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 1290.8801);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.setScale(0.0, 2110.3002420571725);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1290.8801, affineTransform1.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals(Double.NaN, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(Double.NaN, affineTransform1.m00, 0.01);
      assertEquals(Double.NaN, affineTransform1.m11, 0.01);
      assertEquals(Double.NaN, affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform1.ty, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.invert();
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertNotNull(affineTransform2);
      assertNotSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform2, affineTransform1);
      assertNotSame(affineTransform2, affineTransform0);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(Double.NaN, affineTransform2.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform2.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform2.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform2.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform2.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals(Double.NaN, affineTransform2.tx, 0.01);
      assertEquals(Double.NaN, affineTransform2.ty, 0.01);
      assertEquals(Double.NaN, affineTransform2.m00, 0.01);
      assertEquals(Double.NaN, affineTransform2.m11, 0.01);
      assertEquals(Double.NaN, affineTransform2.m10, 0.01);
      assertEquals(Double.NaN, affineTransform2.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1568.7), (-1568.7), (-1220.2), (-2192.8789252530964));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1568.7, affineTransform0.uniformScale(), 0.01);
      assertEquals((-2192.8789252530964), affineTransform0.ty(), 0.01);
      assertEquals((-1220.2), affineTransform0.tx(), 0.01);
      assertEquals(1568.7, affineTransform0.scaleY(), 0.01);
      assertEquals(1568.7, affineTransform0.scaleX(), 0.01);
      assertEquals((-1357.016394203293), affineTransform0.m01, 0.01);
      assertEquals(1357.016394203293, affineTransform0.m10, 0.01);
      assertEquals(786.972805034261, affineTransform0.m00, 0.01);
      assertEquals(786.972805034261, affineTransform0.m11, 0.01);
      assertEquals((-2192.8789252530964), affineTransform0.ty, 0.01);
      assertEquals((-1220.2), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.setScaleX(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-2192.8789252530964), affineTransform0.ty(), 0.01);
      assertEquals((-1220.2), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1568.7, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals((-2192.8789252530964), affineTransform1.ty(), 0.01);
      assertEquals((-1220.2), affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(1568.7, affineTransform1.scaleY(), 0.01);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertEquals(1357.016394203293, affineTransform0.m10, 0.01);
      assertEquals(786.972805034261, affineTransform0.m11, 0.01);
      assertEquals((-2192.8789252530964), affineTransform0.ty, 0.01);
      assertEquals((-1220.2), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform1.m01, 0.01);
      assertEquals((-2192.8789252530964), affineTransform1.ty, 0.01);
      assertEquals(786.972805034261, affineTransform1.m11, 0.01);
      assertEquals((-1220.2), affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1357.016394203293, affineTransform1.m10, 0.01);
      
      AffineTransform affineTransform2 = affineTransform1.setUniformScale((-2192.8789252530964));
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(2192.8789252530964, affineTransform0.scaleY(), 0.01);
      assertEquals((-2192.8789252530964), affineTransform0.ty(), 0.01);
      assertEquals((-1220.2), affineTransform0.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(Double.NaN, affineTransform1.scaleX(), 0.01);
      assertEquals(2192.8789252530964, affineTransform1.scaleY(), 0.01);
      assertEquals((-2192.8789252530964), affineTransform1.ty(), 0.01);
      assertEquals((-1220.2), affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(Double.NaN, affineTransform2.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform2.uniformScale(), 0.01);
      assertEquals((-1220.2), affineTransform2.tx(), 0.01);
      assertEquals((-2192.8789252530964), affineTransform2.ty(), 0.01);
      assertEquals(2192.8789252530964, affineTransform2.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals((-1100.105870406671), affineTransform0.m11, 0.01);
      assertEquals((-2192.8789252530964), affineTransform0.ty, 0.01);
      assertEquals((-1220.2), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1896.9673309564284), affineTransform0.m10, 0.01);
      assertEquals(Double.NaN, affineTransform1.m00, 0.01);
      assertEquals((-2192.8789252530964), affineTransform1.ty, 0.01);
      assertEquals((-1100.105870406671), affineTransform1.m11, 0.01);
      assertEquals((-1220.2), affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1896.9673309564284), affineTransform1.m10, 0.01);
      assertEquals(Double.NaN, affineTransform1.m01, 0.01);
      assertEquals((-1100.105870406671), affineTransform2.m11, 0.01);
      assertEquals(Double.NaN, affineTransform2.m01, 0.01);
      assertEquals(Double.NaN, affineTransform2.m00, 0.01);
      assertEquals((-1896.9673309564284), affineTransform2.m10, 0.01);
      assertEquals((-1220.2), affineTransform2.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2192.8789252530964), affineTransform2.ty, 0.01);
      
      double double0 = affineTransform1.rotation();
      assertEquals(Double.NaN, double0, 0.01);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform1, affineTransform2);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(2192.8789252530964, affineTransform0.scaleY(), 0.01);
      assertEquals((-2192.8789252530964), affineTransform0.ty(), 0.01);
      assertEquals((-1220.2), affineTransform0.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(Double.NaN, affineTransform1.scaleX(), 0.01);
      assertEquals(2192.8789252530964, affineTransform1.scaleY(), 0.01);
      assertEquals((-2192.8789252530964), affineTransform1.ty(), 0.01);
      assertEquals((-1220.2), affineTransform1.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals((-1100.105870406671), affineTransform0.m11, 0.01);
      assertEquals((-2192.8789252530964), affineTransform0.ty, 0.01);
      assertEquals((-1220.2), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1896.9673309564284), affineTransform0.m10, 0.01);
      assertEquals(Double.NaN, affineTransform1.m00, 0.01);
      assertEquals((-2192.8789252530964), affineTransform1.ty, 0.01);
      assertEquals((-1100.105870406671), affineTransform1.m11, 0.01);
      assertEquals((-1220.2), affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1896.9673309564284), affineTransform1.m10, 0.01);
      assertEquals(Double.NaN, affineTransform1.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 1290.8801);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      double[] doubleArray0 = new double[7];
      affineTransform0.get(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1290.8801, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1784.24821), (-80.619585828), 0.0, 0.0, (-1.0), (-1.0));
      assertNotNull(affineTransform0);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1786.0686416001156, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-80.619585828), affineTransform0.m01, 0.01);
      assertEquals((-1784.24821), affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      
      double double0 = affineTransform0.uniformScale();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1786.0686416001156, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-80.619585828), affineTransform0.m01, 0.01);
      assertEquals((-1784.24821), affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      double double0 = affineTransform0.ty();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1875.5717036985225), (-1875.5717036985225), 9.999999747378752E-6, 2791.1128811);
      assertNotNull(affineTransform0);
      assertEquals(9.999999747378752E-6, affineTransform0.tx(), 0.01);
      assertEquals(1875.5717036985225, affineTransform0.scaleX(), 0.01);
      assertEquals(1875.5717036985225, affineTransform0.scaleY(), 0.01);
      assertEquals(2791.1128811, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1875.5717036985225, affineTransform0.uniformScale(), 0.01);
      assertEquals(76.66983045984684, affineTransform0.m10, 0.01);
      assertEquals((-76.66983045984684), affineTransform0.m01, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.tx, 0.01);
      assertEquals(1874.00398954, affineTransform0.m00, 0.01);
      assertEquals(1874.00398954, affineTransform0.m11, 0.01);
      assertEquals(2791.1128811, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      double double0 = affineTransform0.ty();
      assertEquals(2791.1128811, double0, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.tx(), 0.01);
      assertEquals(1875.5717036985225, affineTransform0.scaleX(), 0.01);
      assertEquals(1875.5717036985225, affineTransform0.scaleY(), 0.01);
      assertEquals(2791.1128811, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1875.5717036985225, affineTransform0.uniformScale(), 0.01);
      assertEquals(76.66983045984684, affineTransform0.m10, 0.01);
      assertEquals((-76.66983045984684), affineTransform0.m01, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.tx, 0.01);
      assertEquals(1874.00398954, affineTransform0.m00, 0.01);
      assertEquals(1874.00398954, affineTransform0.m11, 0.01);
      assertEquals(2791.1128811, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3.141592653589793, 3.141592653589793, 0.0, (-1.0), (-1.0), (-1.0));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.7724538509055159), affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m01, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      assertEquals((-1.0), affineTransform0.m11, 0.01);
      
      double double0 = affineTransform0.ty();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.7724538509055159), affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m01, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      assertEquals((-1.0), affineTransform0.m11, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      double double0 = affineTransform0.tx();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1876.38926), (-1876.38926), (-1876.38926), (-1876.38926), 1.5707963267948966, 9.999999747378752E-6);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.5707963267948966, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(2653.6151397832155, affineTransform0.scaleX(), 0.01);
      assertEquals(2653.6151397832155, affineTransform0.scaleY(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty(), 0.01);
      assertEquals((-1876.38926), affineTransform0.m01, 0.01);
      assertEquals((-1876.38926), affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.5707963267948966, affineTransform0.tx, 0.01);
      assertEquals((-1876.38926), affineTransform0.m00, 0.01);
      assertEquals((-1876.38926), affineTransform0.m11, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty, 0.01);
      
      double double0 = affineTransform0.tx();
      assertEquals(1.5707963267948966, double0, 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.5707963267948966, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(2653.6151397832155, affineTransform0.scaleX(), 0.01);
      assertEquals(2653.6151397832155, affineTransform0.scaleY(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty(), 0.01);
      assertEquals((-1876.38926), affineTransform0.m01, 0.01);
      assertEquals((-1876.38926), affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.5707963267948966, affineTransform0.tx, 0.01);
      assertEquals((-1876.38926), affineTransform0.m00, 0.01);
      assertEquals((-1876.38926), affineTransform0.m11, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-158.93), (-2941.6283711), (-1.0), (-1.0));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(158.93, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(158.93, affineTransform0.scaleY(), 0.01);
      assertEquals(158.93, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-141.46959056595637), affineTransform0.m10, 0.01);
      assertEquals(141.46959056595637, affineTransform0.m01, 0.01);
      assertEquals((-72.42306155569975), affineTransform0.m00, 0.01);
      assertEquals((-72.42306155569975), affineTransform0.m11, 0.01);
      
      double double0 = affineTransform0.tx();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(158.93, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(158.93, affineTransform0.scaleY(), 0.01);
      assertEquals(158.93, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-141.46959056595637), affineTransform0.m10, 0.01);
      assertEquals(141.46959056595637, affineTransform0.m01, 0.01);
      assertEquals((-72.42306155569975), affineTransform0.m00, 0.01);
      assertEquals((-72.42306155569975), affineTransform0.m11, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-158.93), (-2941.6283711), (-1.0), (-1.0));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(158.93, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(158.93, affineTransform0.uniformScale(), 0.01);
      assertEquals(158.93, affineTransform0.scaleY(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(141.46959056595637, affineTransform0.m01, 0.01);
      assertEquals((-72.42306155569975), affineTransform0.m00, 0.01);
      assertEquals((-72.42306155569975), affineTransform0.m11, 0.01);
      assertEquals((-141.46959056595637), affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setScaleY((-2941.6283711));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(2941.6283711, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(158.93, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals((-683.7492208543445), affineTransform0.uniformScale(), 0.01);
      assertEquals(2941.6283711, affineTransform1.scaleY(), 0.01);
      assertEquals((-683.7492208543445), affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1.0), affineTransform1.tx(), 0.01);
      assertEquals(158.93, affineTransform1.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform1.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(141.46959056595637, affineTransform0.m01, 0.01);
      assertEquals((-72.42306155569975), affineTransform0.m00, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals(1340.4752569947025, affineTransform0.m11, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(2618.4544218002775, affineTransform0.m10, 0.01);
      assertEquals(1340.4752569947025, affineTransform1.m11, 0.01);
      assertEquals((-72.42306155569975), affineTransform1.m00, 0.01);
      assertEquals(141.46959056595637, affineTransform1.m01, 0.01);
      assertEquals((-1.0), affineTransform1.tx, 0.01);
      assertEquals((-1.0), affineTransform1.ty, 0.01);
      assertEquals(2618.4544218002775, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = affineTransform1.translateY(0.0);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertEquals(2941.6283711, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(158.93, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals((-683.7492208543445), affineTransform0.uniformScale(), 0.01);
      assertEquals(2941.6283711, affineTransform1.scaleY(), 0.01);
      assertEquals((-683.7492208543445), affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1.0), affineTransform1.tx(), 0.01);
      assertEquals(158.93, affineTransform1.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform1.ty(), 0.01);
      assertEquals((-1.0), affineTransform2.tx(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-683.7492208543445), affineTransform2.uniformScale(), 0.01);
      assertEquals(158.93, affineTransform2.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform2.ty(), 0.01);
      assertEquals(2941.6283711, affineTransform2.scaleY(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(141.46959056595637, affineTransform0.m01, 0.01);
      assertEquals((-72.42306155569975), affineTransform0.m00, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals(1340.4752569947025, affineTransform0.m11, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(2618.4544218002775, affineTransform0.m10, 0.01);
      assertEquals(1340.4752569947025, affineTransform1.m11, 0.01);
      assertEquals((-72.42306155569975), affineTransform1.m00, 0.01);
      assertEquals(141.46959056595637, affineTransform1.m01, 0.01);
      assertEquals((-1.0), affineTransform1.tx, 0.01);
      assertEquals((-1.0), affineTransform1.ty, 0.01);
      assertEquals(2618.4544218002775, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform2.tx, 0.01);
      assertEquals((-1.0), affineTransform2.ty, 0.01);
      assertEquals((-72.42306155569975), affineTransform2.m00, 0.01);
      assertEquals(141.46959056595637, affineTransform2.m01, 0.01);
      assertEquals(1340.4752569947025, affineTransform2.m11, 0.01);
      assertEquals(2618.4544218002775, affineTransform2.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(21282.673468972855, 2334.8477318719492, 1356.851, 1356.851);
      assertNotNull(affineTransform0);
      assertEquals(21282.67346897285, affineTransform0.uniformScale(), 0.01);
      assertEquals(1356.851, affineTransform0.ty(), 0.01);
      assertEquals(21282.67346897285, affineTransform0.scaleX(), 0.01);
      assertEquals(21282.67346897285, affineTransform0.scaleY(), 0.01);
      assertEquals(1356.851, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-12784.73775384791), affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(12784.73775384791, affineTransform0.m10, 0.01);
      assertEquals(1356.851, affineTransform0.ty, 0.01);
      assertEquals(1356.851, affineTransform0.tx, 0.01);
      assertEquals((-17014.778004789157), affineTransform0.m00, 0.01);
      assertEquals((-17014.778004789157), affineTransform0.m11, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.translateY(2035.08318334);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(21282.67346897285, affineTransform0.uniformScale(), 0.01);
      assertEquals(2.6019361657267887E7, affineTransform0.tx(), 0.01);
      assertEquals(21282.67346897285, affineTransform0.scaleX(), 0.01);
      assertEquals(21282.67346897285, affineTransform0.scaleY(), 0.01);
      assertEquals((-3.462513173480973E7), affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals(21282.67346897285, affineTransform1.uniformScale(), 0.01);
      assertEquals(2.6019361657267887E7, affineTransform1.tx(), 0.01);
      assertEquals(21282.67346897285, affineTransform1.scaleX(), 0.01);
      assertEquals((-3.462513173480973E7), affineTransform1.ty(), 0.01);
      assertEquals(21282.67346897285, affineTransform1.scaleY(), 0.01);
      assertEquals(2.6019361657267887E7, affineTransform0.tx, 0.01);
      assertEquals((-12784.73775384791), affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(12784.73775384791, affineTransform0.m10, 0.01);
      assertEquals((-3.462513173480973E7), affineTransform0.ty, 0.01);
      assertEquals((-17014.778004789157), affineTransform0.m00, 0.01);
      assertEquals((-17014.778004789157), affineTransform0.m11, 0.01);
      assertEquals((-3.462513173480973E7), affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2.6019361657267887E7, affineTransform1.tx, 0.01);
      assertEquals((-12784.73775384791), affineTransform1.m01, 0.01);
      assertEquals((-17014.778004789157), affineTransform1.m00, 0.01);
      assertEquals((-17014.778004789157), affineTransform1.m11, 0.01);
      assertEquals(12784.73775384791, affineTransform1.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.translateY(2248.66);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-748.985573), 4540114.568163369, 4222.1, 0.0, 1797.6924, 0.0);
      assertNotNull(affineTransform0);
      assertEquals((-138451.49951604917), affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1797.6924, affineTransform0.tx(), 0.01);
      assertEquals(4540114.62994368, affineTransform0.scaleX(), 0.01);
      assertEquals(4222.1, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-748.985573), affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1797.6924, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4222.1, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4540114.568163369, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.translateX(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals((-138451.49951604917), affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1797.6924, affineTransform0.tx(), 0.01);
      assertEquals(4540114.62994368, affineTransform0.scaleX(), 0.01);
      assertEquals(4222.1, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-138451.49951604917), affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(4222.1, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4540114.62994368, affineTransform1.scaleX(), 0.01);
      assertEquals(1797.6924, affineTransform1.tx(), 0.01);
      assertEquals((-748.985573), affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1797.6924, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4222.1, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4540114.568163369, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals((-748.985573), affineTransform1.m00, 0.01);
      assertEquals(4540114.568163369, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(1797.6924, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4222.1, affineTransform1.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.translate((-1912.532162409235), (-1912.532162409235));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1912.532162409235), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1912.532162409235), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals((-1912.532162409235), affineTransform1.ty(), 0.01);
      assertEquals((-1912.532162409235), affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1912.532162409235), affineTransform0.tx, 0.01);
      assertEquals((-1912.532162409235), affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m11, 0.01);
      assertEquals((-1912.532162409235), affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals((-1912.532162409235), affineTransform1.ty, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.translateX(3.124);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1909.408162409235), affineTransform0.tx(), 0.01);
      assertEquals((-1912.532162409235), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform2.uniformScale(), 0.01);
      assertEquals((-1909.408162409235), affineTransform2.tx(), 0.01);
      assertEquals((-1912.532162409235), affineTransform2.ty(), 0.01);
      assertEquals(1.0, affineTransform2.scaleX(), 0.01);
      assertEquals(1.0, affineTransform2.scaleY(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1912.532162409235), affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals((-1909.408162409235), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform2.m10, 0.01);
      assertEquals(1.0, affineTransform2.m00, 0.01);
      assertEquals(1.0, affineTransform2.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1912.532162409235), affineTransform2.ty, 0.01);
      assertEquals((-1909.408162409235), affineTransform2.tx, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(9.999999747378752E-6, 9.999999747378752E-6, (-5306.002996), (-2849.912131204), 4138.08251, 50000.00126810627);
      assertNotNull(affineTransform0);
      assertEquals(6022.92843632935, affineTransform0.scaleY(), 0.01);
      assertEquals(0.15671920120872, affineTransform0.uniformScale(), 0.01);
      assertEquals(4138.08251, affineTransform0.tx(), 0.01);
      assertEquals(1.4142135266470555E-5, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(50000.00126810627, affineTransform0.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9.999999747378752E-6, affineTransform0.m00, 0.01);
      assertEquals((-2849.912131204), affineTransform0.m11, 0.01);
      assertEquals(4138.08251, affineTransform0.tx, 0.01);
      assertEquals(50000.00126810627, affineTransform0.ty, 0.01);
      assertEquals((-5306.002996), affineTransform0.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.uniformScale(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4138.08251, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(50000.00126810627, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(4138.08251, affineTransform1.tx(), 0.01);
      assertEquals(50000.00126810627, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(-0.0, affineTransform0.m11, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(4138.08251, affineTransform0.tx, 0.01);
      assertEquals(50000.00126810627, affineTransform0.ty, 0.01);
      assertEquals(4138.08251, affineTransform1.tx, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(-0.0, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(50000.00126810627, affineTransform1.ty, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.translateX((-1887.0));
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4138.08251, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(50000.00126810627, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform2.scaleX(), 0.01);
      assertEquals(0.0, affineTransform2.scaleY(), 0.01);
      assertEquals(0.0, affineTransform2.uniformScale(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(50000.00126810627, affineTransform2.ty(), 0.01);
      assertEquals(4138.08251, affineTransform2.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4138.08251, affineTransform0.tx, 0.01);
      assertEquals(50000.00126810627, affineTransform0.ty, 0.01);
      assertEquals(4138.08251, affineTransform2.tx, 0.01);
      assertEquals(0.0, affineTransform2.m10, 0.01);
      assertEquals(0.0, affineTransform2.m00, 0.01);
      assertEquals(0.0, affineTransform2.m11, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals(50000.00126810627, affineTransform2.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      assertNotNull(identityTransform0);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(0, IdentityTransform.GENERALITY);
      
      AffineTransform affineTransform0 = new AffineTransform(identityTransform0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0, IdentityTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.scale((double) 0, (-777.6772213361645));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(777.6772213361645, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(-0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(-0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(777.6772213361645, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0, IdentityTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-777.6772213361645), affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals((-777.6772213361645), affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.translateX(10.0);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(777.6772213361645, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(-0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform2.scaleX(), 0.01);
      assertEquals(777.6772213361645, affineTransform2.scaleY(), 0.01);
      assertEquals(0.0, affineTransform2.tx(), 0.01);
      assertEquals(-0.0, affineTransform2.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform2.ty(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0, IdentityTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-777.6772213361645), affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform2.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform2.ty, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals(0.0, affineTransform2.m10, 0.01);
      assertEquals((-777.6772213361645), affineTransform2.m11, 0.01);
      assertEquals(0.0, affineTransform2.m00, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 1290.8801);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      affineTransform0.ty = 0.0;
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.translate(4, 0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 1290.8801);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.translate(1940.448416192631, (-13.0));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1290.8801, affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1290.8801, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      Vector vector0 = affineTransform0.translation();
      assertNotNull(vector0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, vector0.y, 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      
      Vector vector1 = affineTransform0.transformPoint(vector0, vector0);
      assertNotNull(vector1);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(0.0, vector1.y(), 0.01);
      assertEquals(0.0, vector1.x(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, vector0.y, 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      assertEquals(0.0, vector1.x, 0.01);
      assertEquals(0.0, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      assertNotNull(identityTransform0);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(0, IdentityTransform.GENERALITY);
      
      AffineTransform affineTransform0 = new AffineTransform(identityTransform0);
      assertNotNull(affineTransform0);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0, IdentityTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(0.0, vector0.y, 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      
      Vector vector1 = affineTransform0.transform((IVector) vector0, vector0);
      assertNotNull(vector1);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(0.0, vector1.y(), 0.01);
      assertEquals(0.0, vector1.x(), 0.01);
      assertEquals(0, IdentityTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, vector0.y, 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      assertEquals(0.0, vector1.y, 0.01);
      assertEquals(0.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      affineTransform0.m00 = 0.0;
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      
      Vector vector0 = affineTransform0.scale();
      assertNotNull(vector0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(1.0, vector0.y(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, vector0.y, 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      
      Vector vector1 = affineTransform0.transform((IVector) vector0, vector0);
      assertNotNull(vector1);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(1.0, vector0.y(), 0.01);
      assertEquals(1.0, vector1.y(), 0.01);
      assertEquals(0.0, vector1.x(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, vector0.y, 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      assertEquals(0.0, vector1.x, 0.01);
      assertEquals(1.0, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3.141592653589793, 3.141592653589793, 0.0, (-1.0), (-1.0), (-1.0));
      assertNotNull(affineTransform0);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.7724538509055159), affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.m11, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m01, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      
      Vector vector0 = new Vector(9.999999747378752E-6, 3.141592653589793);
      assertNotNull(vector0);
      assertEquals(3.141592653589793, vector0.y(), 0.01);
      assertEquals(9.999999747378752E-6, vector0.x(), 0.01);
      assertEquals(3.141592653589793, vector0.y, 0.01);
      assertEquals(9.999999747378752E-6, vector0.x, 0.01);
      
      Vector vector1 = affineTransform0.transformPoint(vector0, vector0);
      assertNotNull(vector1);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.7724538509055159), affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-4.141561237664051), vector0.y(), 0.01);
      assertEquals((-0.9999685840742577), vector0.x(), 0.01);
      assertEquals((-4.141561237664051), vector1.y(), 0.01);
      assertEquals((-0.9999685840742577), vector1.x(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.m11, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m01, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-4.141561237664051), vector0.y, 0.01);
      assertEquals((-0.9999685840742577), vector0.x, 0.01);
      assertEquals((-4.141561237664051), vector1.y, 0.01);
      assertEquals((-0.9999685840742577), vector1.x, 0.01);
      
      Vector vector2 = affineTransform0.transform((IVector) vector0, vector0);
      assertNotNull(vector2);
      assertSame(vector0, vector1);
      assertSame(vector0, vector2);
      assertSame(vector2, vector0);
      assertSame(vector2, vector1);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.7724538509055159), affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.000067280115776, vector0.y(), 0.01);
      assertEquals((-3.1414939575482754), vector0.x(), 0.01);
      assertEquals((-3.1414939575482754), vector2.x(), 0.01);
      assertEquals(1.000067280115776, vector2.y(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.m11, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m01, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(1.000067280115776, vector0.y, 0.01);
      assertEquals((-3.1414939575482754), vector0.x, 0.01);
      assertEquals(1.000067280115776, vector2.y, 0.01);
      assertEquals((-3.1414939575482754), vector2.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.5, 2499.0, 2499.0, 2499.0, (-3.141592653589793));
      assertNotNull(affineTransform0);
      assertEquals((-3.141592653589793), affineTransform0.ty(), 0.01);
      assertEquals(35.34826728426727, affineTransform0.uniformScale(), 0.01);
      assertEquals(2499.0, affineTransform0.tx(), 0.01);
      assertEquals(341.1842979503678, affineTransform0.scaleY(), 0.01);
      assertEquals(2475.5998313201017, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2499.0, affineTransform0.tx, 0.01);
      assertEquals(0.4953180933131089, affineTransform0.m10, 0.01);
      assertEquals((-2475.5998303789183), affineTransform0.m01, 0.01);
      assertEquals((-341.1839384084072), affineTransform0.m11, 0.01);
      assertEquals((-0.06826409331900904), affineTransform0.m00, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setScaleY(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-3.141592653589793), affineTransform0.ty(), 0.01);
      assertEquals(2499.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(2475.5998313201017, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2475.5998313201017, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(2499.0, affineTransform1.tx(), 0.01);
      assertEquals((-3.141592653589793), affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2499.0, affineTransform0.tx, 0.01);
      assertEquals(-0.0, affineTransform0.m11, 0.01);
      assertEquals((-2475.5998303789183), affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-0.06826409331900904), affineTransform0.m00, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.ty, 0.01);
      assertEquals((-0.06826409331900904), affineTransform1.m00, 0.01);
      assertEquals((-3.141592653589793), affineTransform1.ty, 0.01);
      assertEquals((-2475.5998303789183), affineTransform1.m01, 0.01);
      assertEquals(2499.0, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      
      AffineTransform affineTransform2 = affineTransform1.setScaleY(0.0);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals((-3.141592653589793), affineTransform0.ty(), 0.01);
      assertEquals(2499.0, affineTransform0.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(2475.5998313201017, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2475.5998313201017, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(2499.0, affineTransform1.tx(), 0.01);
      assertEquals((-3.141592653589793), affineTransform1.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals((-3.141592653589793), affineTransform2.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform2.uniformScale(), 0.01);
      assertEquals(2499.0, affineTransform2.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform2.scaleY(), 0.01);
      assertEquals(2475.5998313201017, affineTransform2.scaleX(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2499.0, affineTransform0.tx, 0.01);
      assertEquals((-2475.5998303789183), affineTransform0.m01, 0.01);
      assertEquals((-0.06826409331900904), affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.ty, 0.01);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals((-0.06826409331900904), affineTransform1.m00, 0.01);
      assertEquals(Double.NaN, affineTransform1.m11, 0.01);
      assertEquals(Double.NaN, affineTransform1.m10, 0.01);
      assertEquals((-3.141592653589793), affineTransform1.ty, 0.01);
      assertEquals((-2475.5998303789183), affineTransform1.m01, 0.01);
      assertEquals(2499.0, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2475.5998303789183), affineTransform2.m01, 0.01);
      assertEquals(2499.0, affineTransform2.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Double.NaN, affineTransform2.m10, 0.01);
      assertEquals((-0.06826409331900904), affineTransform2.m00, 0.01);
      assertEquals((-3.141592653589793), affineTransform2.ty, 0.01);
      assertEquals(Double.NaN, affineTransform2.m11, 0.01);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      
      Point point1 = affineTransform0.transform((IPoint) point0, point0);
      assertNotNull(point1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals((-3.141592653589793), affineTransform0.ty(), 0.01);
      assertEquals(2499.0, affineTransform0.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(2475.5998313201017, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, point0.x(), 0.01);
      assertEquals(Double.NaN, point0.y(), 0.01);
      assertEquals(Double.NaN, point1.x(), 0.01);
      assertEquals(Double.NaN, point1.y(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2499.0, affineTransform0.tx, 0.01);
      assertEquals((-2475.5998303789183), affineTransform0.m01, 0.01);
      assertEquals((-0.06826409331900904), affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.ty, 0.01);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals(Double.NaN, point0.y, 0.01);
      assertEquals(Double.NaN, point0.x, 0.01);
      assertEquals(Double.NaN, point1.y, 0.01);
      assertEquals(Double.NaN, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      
      Point point1 = affineTransform0.transform((IPoint) point0, point0);
      assertNotNull(point1);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals(0.0, point1.y(), 0.01);
      assertEquals(0.0, point1.x(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point1.x, 0.01);
      assertEquals(0.0, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 1.0, 1.0, (-3052.43544), 0.0, (-1.0));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals((-1.0), affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(3052.435603803624, affineTransform0.scaleY(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(1.0, affineTransform0.m01, 0.01);
      assertEquals((-3052.43544), affineTransform0.m11, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTx((-989.42608909));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-989.42608909), affineTransform0.tx(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals((-1.0), affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(3052.435603803624, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(3052.435603803624, affineTransform1.scaleY(), 0.01);
      assertEquals((-989.42608909), affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform1.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform1.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-989.42608909), affineTransform0.tx, 0.01);
      assertEquals(1.0, affineTransform0.m01, 0.01);
      assertEquals((-3052.43544), affineTransform0.m11, 0.01);
      assertEquals(1.0, affineTransform1.m01, 0.01);
      assertEquals((-989.42608909), affineTransform1.tx, 0.01);
      assertEquals((-1.0), affineTransform1.ty, 0.01);
      assertEquals((-3052.43544), affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform1.m10, 0.01);
      
      IPoint[] iPointArray0 = new IPoint[7];
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      
      iPointArray0[1] = (IPoint) point0;
      Point point1 = affineTransform0.transform(iPointArray0[1], point0);
      assertEquals(7, iPointArray0.length);
      assertNotNull(point1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-989.42608909), affineTransform0.tx(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals((-1.0), affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(3052.435603803624, affineTransform0.scaleY(), 0.01);
      assertEquals((-989.42608909), point0.x(), 0.01);
      assertEquals((-1.0), point0.y(), 0.01);
      assertEquals((-1.0), point1.y(), 0.01);
      assertEquals((-989.42608909), point1.x(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-989.42608909), affineTransform0.tx, 0.01);
      assertEquals(1.0, affineTransform0.m01, 0.01);
      assertEquals((-3052.43544), affineTransform0.m11, 0.01);
      assertEquals((-989.42608909), point0.x, 0.01);
      assertEquals((-1.0), point0.y, 0.01);
      assertEquals((-1.0), point1.y, 0.01);
      assertEquals((-989.42608909), point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(131.2482, (-3.141592653589793), (-3.141592653589793), 4363.456320197, (-3.141592653589793), 4363.456320197);
      assertNotNull(affineTransform0);
      assertEquals(4363.457451135687, affineTransform0.scaleY(), 0.01);
      assertEquals((-3.141592653589793), affineTransform0.tx(), 0.01);
      assertEquals(131.2857936246001, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4363.456320197, affineTransform0.ty(), 0.01);
      assertEquals(756.7601457529848, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-3.141592653589793), affineTransform0.tx, 0.01);
      assertEquals(4363.456320197, affineTransform0.m11, 0.01);
      assertEquals(131.2482, affineTransform0.m00, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.m01, 0.01);
      assertEquals(4363.456320197, affineTransform0.ty, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.m10, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.shearY(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4363.457451135687, affineTransform0.scaleY(), 0.01);
      assertEquals((-3.141592653589793), affineTransform0.tx(), 0.01);
      assertEquals(131.2857936246001, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4363.456320197, affineTransform0.ty(), 0.01);
      assertEquals(756.7601457529848, affineTransform0.uniformScale(), 0.01);
      assertEquals(4363.457451135687, affineTransform1.scaleY(), 0.01);
      assertEquals((-3.141592653589793), affineTransform1.tx(), 0.01);
      assertEquals(131.2857936246001, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4363.456320197, affineTransform1.ty(), 0.01);
      assertEquals(756.7601457529848, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-3.141592653589793), affineTransform0.tx, 0.01);
      assertEquals(4363.456320197, affineTransform0.m11, 0.01);
      assertEquals(131.2482, affineTransform0.m00, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.m01, 0.01);
      assertEquals(4363.456320197, affineTransform0.ty, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.m10, 0.01);
      assertEquals(131.2482, affineTransform1.m00, 0.01);
      assertEquals((-3.141592653589793), affineTransform1.tx, 0.01);
      assertEquals(4363.456320197, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-3.141592653589793), affineTransform1.m01, 0.01);
      assertEquals(4363.456320197, affineTransform1.ty, 0.01);
      assertEquals((-3.141592653589793), affineTransform1.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1876.38926), (-1876.38926), (-1876.38926), (-1876.38926), 1.5707963267948966, 9.999999747378752E-6);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.5707963267948966, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(2653.6151397832155, affineTransform0.scaleX(), 0.01);
      assertEquals(2653.6151397832155, affineTransform0.scaleY(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty(), 0.01);
      assertEquals(1.5707963267948966, affineTransform0.tx, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty, 0.01);
      assertEquals((-1876.38926), affineTransform0.m00, 0.01);
      assertEquals((-1876.38926), affineTransform0.m11, 0.01);
      assertEquals((-1876.38926), affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1876.38926), affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.uniformScale((-1876.38926));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.5707963267948966, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty(), 0.01);
      assertEquals(4979214.948462624, affineTransform0.scaleY(), 0.01);
      assertEquals(4979214.948462624, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.5707963267948966, affineTransform1.tx(), 0.01);
      assertEquals(4979214.948462624, affineTransform1.scaleY(), 0.01);
      assertEquals(4979214.948462624, affineTransform1.scaleX(), 0.01);
      assertEquals(3520836.6550433473, affineTransform0.m01, 0.01);
      assertEquals(1.5707963267948966, affineTransform0.tx, 0.01);
      assertEquals(3520836.6550433473, affineTransform0.m00, 0.01);
      assertEquals(3520836.6550433473, affineTransform0.m11, 0.01);
      assertEquals(3520836.6550433473, affineTransform0.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9.999999747378752E-6, affineTransform1.ty, 0.01);
      assertEquals(3520836.6550433473, affineTransform1.m00, 0.01);
      assertEquals(3520836.6550433473, affineTransform1.m11, 0.01);
      assertEquals(3520836.6550433473, affineTransform1.m10, 0.01);
      assertEquals(3520836.6550433473, affineTransform1.m01, 0.01);
      assertEquals(1.5707963267948966, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = affineTransform1.shearY((-2124.122));
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.5707963267948966, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty(), 0.01);
      assertEquals(4979214.948462624, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0571480799809862E10, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.5707963267948966, affineTransform1.tx(), 0.01);
      assertEquals(4979214.948462624, affineTransform1.scaleY(), 0.01);
      assertEquals(1.0571480799809862E10, affineTransform1.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform2.ty(), 0.01);
      assertEquals(1.0571480799809862E10, affineTransform2.scaleX(), 0.01);
      assertEquals(4979214.948462624, affineTransform2.scaleY(), 0.01);
      assertEquals(1.5707963267948966, affineTransform2.tx(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0, affineTransform2.uniformScale(), 0.01);
      assertEquals((-7.475165760728941E9), affineTransform0.m01, 0.01);
      assertEquals(1.5707963267948966, affineTransform0.tx, 0.01);
      assertEquals(3520836.6550433473, affineTransform0.m11, 0.01);
      assertEquals(3520836.6550433473, affineTransform0.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-7.475165760728941E9), affineTransform0.m00, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty, 0.01);
      assertEquals(3520836.6550433473, affineTransform1.m11, 0.01);
      assertEquals(3520836.6550433473, affineTransform1.m10, 0.01);
      assertEquals(1.5707963267948966, affineTransform1.tx, 0.01);
      assertEquals((-7.475165760728941E9), affineTransform1.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-7.475165760728941E9), affineTransform1.m01, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform2.ty, 0.01);
      assertEquals((-7.475165760728941E9), affineTransform2.m00, 0.01);
      assertEquals(1.5707963267948966, affineTransform2.tx, 0.01);
      assertEquals((-7.475165760728941E9), affineTransform2.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3520836.6550433473, affineTransform2.m10, 0.01);
      assertEquals(3520836.6550433473, affineTransform2.m11, 0.01);
      
      affineTransform2.m01 = 3520836.6550433473;
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.5707963267948966, affineTransform0.tx(), 0.01);
      assertEquals((-1.6226901707858756E8), affineTransform0.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty(), 0.01);
      assertEquals(4979214.948462624, affineTransform0.scaleY(), 0.01);
      assertEquals(7.475166589893836E9, affineTransform0.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.5707963267948966, affineTransform1.tx(), 0.01);
      assertEquals((-1.6226901707858756E8), affineTransform1.uniformScale(), 0.01);
      assertEquals(7.475166589893836E9, affineTransform1.scaleX(), 0.01);
      assertEquals(4979214.948462624, affineTransform1.scaleY(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform2.ty(), 0.01);
      assertEquals(7.475166589893836E9, affineTransform2.scaleX(), 0.01);
      assertEquals(4979214.948462624, affineTransform2.scaleY(), 0.01);
      assertEquals(1.5707963267948966, affineTransform2.tx(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-1.6226901707858756E8), affineTransform2.uniformScale(), 0.01);
      
      AffineTransform affineTransform3 = affineTransform1.shearX(1.460793765177777E12);
      assertNotNull(affineTransform3);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform3);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform3);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform3, affineTransform2);
      assertSame(affineTransform3, affineTransform0);
      assertSame(affineTransform3, affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0919676748182137E22, affineTransform0.scaleY(), 0.01);
      assertEquals(1.5707963267948966, affineTransform0.tx(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty(), 0.01);
      assertEquals((-1.622821694102305E8), affineTransform0.uniformScale(), 0.01);
      assertEquals(7.475166589893836E9, affineTransform0.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.5707963267948966, affineTransform1.tx(), 0.01);
      assertEquals(7.475166589893836E9, affineTransform1.scaleX(), 0.01);
      assertEquals(1.0919676748182137E22, affineTransform1.scaleY(), 0.01);
      assertEquals((-1.622821694102305E8), affineTransform1.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform3.ty(), 0.01);
      assertEquals(7.475166589893836E9, affineTransform3.scaleX(), 0.01);
      assertEquals(1.0919676748182137E22, affineTransform3.scaleY(), 0.01);
      assertEquals((-1.622821694102305E8), affineTransform3.uniformScale(), 0.01);
      assertEquals(4, affineTransform3.generality());
      assertEquals(1.5707963267948966, affineTransform3.tx(), 0.01);
      assertEquals(3520836.6550433473, affineTransform0.m01, 0.01);
      assertEquals(5.1432162339002225E18, affineTransform0.m11, 0.01);
      assertEquals(1.5707963267948966, affineTransform0.tx, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0919675536943228E22), affineTransform0.m10, 0.01);
      assertEquals((-7.475165760728941E9), affineTransform0.m00, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty, 0.01);
      assertEquals(3520836.6550433473, affineTransform1.m01, 0.01);
      assertEquals(1.5707963267948966, affineTransform1.tx, 0.01);
      assertEquals((-7.475165760728941E9), affineTransform1.m00, 0.01);
      assertEquals(5.1432162339002225E18, affineTransform1.m11, 0.01);
      assertEquals((-1.0919675536943228E22), affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9.999999747378752E-6, affineTransform3.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0919675536943228E22), affineTransform3.m10, 0.01);
      assertEquals((-7.475165760728941E9), affineTransform3.m00, 0.01);
      assertEquals(5.1432162339002225E18, affineTransform3.m11, 0.01);
      assertEquals(1.5707963267948966, affineTransform3.tx, 0.01);
      assertEquals(3520836.6550433473, affineTransform3.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1876.38926), (-1876.38926), (-1876.38926), (-1876.38926), 1.5707963267948966, 9.999999747378752E-6);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.5707963267948966, affineTransform0.tx(), 0.01);
      assertEquals(2653.6151397832155, affineTransform0.scaleX(), 0.01);
      assertEquals(2653.6151397832155, affineTransform0.scaleY(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1876.38926), affineTransform0.m01, 0.01);
      assertEquals((-1876.38926), affineTransform0.m00, 0.01);
      assertEquals((-1876.38926), affineTransform0.m11, 0.01);
      assertEquals(1.5707963267948966, affineTransform0.tx, 0.01);
      assertEquals((-1876.38926), affineTransform0.m10, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.shearX(1.460793765177777E12);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(3.8763844513793305E15, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.5707963267948966, affineTransform0.tx(), 0.01);
      assertEquals(2653.6151397832155, affineTransform0.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty(), 0.01);
      assertEquals(1.5707963267948966, affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(2653.6151397832155, affineTransform1.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty(), 0.01);
      assertEquals(3.8763844513793305E15, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1876.38926), affineTransform0.m01, 0.01);
      assertEquals((-2.7410177320564195E15), affineTransform0.m10, 0.01);
      assertEquals((-1876.38926), affineTransform0.m00, 0.01);
      assertEquals(1.5707963267948966, affineTransform0.tx, 0.01);
      assertEquals((-2.7410177320564195E15), affineTransform0.m11, 0.01);
      assertEquals((-1876.38926), affineTransform1.m00, 0.01);
      assertEquals(1.5707963267948966, affineTransform1.tx, 0.01);
      assertEquals((-1876.38926), affineTransform1.m01, 0.01);
      assertEquals((-2.7410177320564195E15), affineTransform1.m11, 0.01);
      assertEquals((-2.7410177320564195E15), affineTransform1.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 1290.8801);
      assertNotNull(affineTransform0);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.shearX(9.999999747378752E-6);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(1290.8801, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(1290.8801, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, (-169.0389951251), (-169.0389951251));
      assertNotNull(affineTransform0);
      assertEquals((-169.0389951251), affineTransform0.tx(), 0.01);
      assertEquals((-169.0389951251), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-169.0389951251), affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals((-169.0389951251), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.setUniformScale(2788.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals((-169.0389951251), affineTransform0.tx(), 0.01);
      assertEquals((-169.0389951251), affineTransform0.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, affineTransform1.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-169.0389951251), affineTransform1.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals((-169.0389951251), affineTransform1.ty(), 0.01);
      assertEquals((-169.0389951251), affineTransform0.ty, 0.01);
      assertEquals((-169.0389951251), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals(Double.NaN, affineTransform1.m00, 0.01);
      assertEquals(Double.NaN, affineTransform1.m11, 0.01);
      assertEquals(Double.NaN, affineTransform1.m10, 0.01);
      assertEquals((-169.0389951251), affineTransform1.tx, 0.01);
      assertEquals((-169.0389951251), affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Double.NaN, affineTransform1.m01, 0.01);
      
      AffineTransform affineTransform2 = affineTransform1.shear(Double.NaN, 0.0);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform0.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, affineTransform1.scaleY(), 0.01);
      assertEquals(Double.NaN, affineTransform1.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform2.scaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform2.scaleY(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(Double.NaN, affineTransform2.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform2.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform2.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform0.ty, 0.01);
      assertEquals(Double.NaN, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals(Double.NaN, affineTransform1.m00, 0.01);
      assertEquals(Double.NaN, affineTransform1.m11, 0.01);
      assertEquals(Double.NaN, affineTransform1.m10, 0.01);
      assertEquals(Double.NaN, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Double.NaN, affineTransform1.tx, 0.01);
      assertEquals(Double.NaN, affineTransform1.m01, 0.01);
      assertEquals(Double.NaN, affineTransform2.ty, 0.01);
      assertEquals(Double.NaN, affineTransform2.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Double.NaN, affineTransform2.m10, 0.01);
      assertEquals(Double.NaN, affineTransform2.m00, 0.01);
      assertEquals(Double.NaN, affineTransform2.m11, 0.01);
      assertEquals(Double.NaN, affineTransform2.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.shear((-550.31505), 0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1568.7), (-1568.7), (-1220.2), (-2192.8789252530964));
      assertNotNull(affineTransform0);
      assertEquals(1568.7, affineTransform0.scaleX(), 0.01);
      assertEquals(1568.7, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-2192.8789252530964), affineTransform0.ty(), 0.01);
      assertEquals((-1220.2), affineTransform0.tx(), 0.01);
      assertEquals(1568.7, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1357.016394203293), affineTransform0.m01, 0.01);
      assertEquals(1357.016394203293, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2192.8789252530964), affineTransform0.ty, 0.01);
      assertEquals(786.972805034261, affineTransform0.m00, 0.01);
      assertEquals(786.972805034261, affineTransform0.m11, 0.01);
      assertEquals((-1220.2), affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setUniformScale((-2192.8789252530964));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2192.8789252530964, affineTransform0.uniformScale(), 0.01);
      assertEquals(2192.8789252530964, affineTransform0.scaleY(), 0.01);
      assertEquals((-2192.8789252530964), affineTransform0.ty(), 0.01);
      assertEquals(2192.8789252530964, affineTransform0.scaleX(), 0.01);
      assertEquals((-1220.2), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(2192.8789252530964, affineTransform1.uniformScale(), 0.01);
      assertEquals((-1220.2), affineTransform1.tx(), 0.01);
      assertEquals(2192.8789252530964, affineTransform1.scaleY(), 0.01);
      assertEquals((-2192.8789252530964), affineTransform1.ty(), 0.01);
      assertEquals(2192.8789252530964, affineTransform1.scaleX(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1896.9673309564284), affineTransform0.m10, 0.01);
      assertEquals(1896.9673309564284, affineTransform0.m01, 0.01);
      assertEquals((-2192.8789252530964), affineTransform0.ty, 0.01);
      assertEquals((-1220.2), affineTransform0.tx, 0.01);
      assertEquals((-1100.105870406671), affineTransform0.m00, 0.01);
      assertEquals((-1100.105870406671), affineTransform0.m11, 0.01);
      assertEquals((-1896.9673309564284), affineTransform1.m10, 0.01);
      assertEquals((-1100.105870406671), affineTransform1.m00, 0.01);
      assertEquals((-1100.105870406671), affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1896.9673309564284, affineTransform1.m01, 0.01);
      assertEquals((-2192.8789252530964), affineTransform1.ty, 0.01);
      assertEquals((-1220.2), affineTransform1.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setUniformScale(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(131.2482, (-3.141592653589793), (-3.141592653589793), 4363.456320197, (-3.141592653589793), 4363.456320197);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-3.141592653589793), affineTransform0.tx(), 0.01);
      assertEquals(131.2857936246001, affineTransform0.scaleX(), 0.01);
      assertEquals(4363.457451135687, affineTransform0.scaleY(), 0.01);
      assertEquals(756.7601457529848, affineTransform0.uniformScale(), 0.01);
      assertEquals(4363.456320197, affineTransform0.ty(), 0.01);
      assertEquals(131.2482, affineTransform0.m00, 0.01);
      assertEquals(4363.456320197, affineTransform0.ty, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-3.141592653589793), affineTransform0.m01, 0.01);
      assertEquals(4363.456320197, affineTransform0.m11, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.m10, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTy(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-3.141592653589793), affineTransform0.tx(), 0.01);
      assertEquals(131.2857936246001, affineTransform0.scaleX(), 0.01);
      assertEquals(4363.457451135687, affineTransform0.scaleY(), 0.01);
      assertEquals(756.7601457529848, affineTransform0.uniformScale(), 0.01);
      assertEquals(756.7601457529848, affineTransform1.uniformScale(), 0.01);
      assertEquals((-3.141592653589793), affineTransform1.tx(), 0.01);
      assertEquals(4363.457451135687, affineTransform1.scaleY(), 0.01);
      assertEquals(131.2857936246001, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(131.2482, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-3.141592653589793), affineTransform0.m01, 0.01);
      assertEquals(4363.456320197, affineTransform0.m11, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.m10, 0.01);
      assertEquals((-3.141592653589793), affineTransform1.tx, 0.01);
      assertEquals(131.2482, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals((-3.141592653589793), affineTransform1.m10, 0.01);
      assertEquals((-3.141592653589793), affineTransform1.m01, 0.01);
      assertEquals(4363.456320197, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTy(1.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(1.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1553.508933001502), 3.4028234663852886E38, 3287.1524272, (-1501.0), (-2757.81899));
      assertNotNull(affineTransform0);
      assertEquals((-2757.81899), affineTransform0.ty(), 0.01);
      assertEquals(1.703432945778528E38, affineTransform0.scaleY(), 0.01);
      assertEquals(2.9457636942936675E38, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1501.0), affineTransform0.tx(), 0.01);
      assertEquals((-7.270706054061519E20), affineTransform0.uniformScale(), 0.01);
      assertEquals((-2757.81899), affineTransform0.ty, 0.01);
      assertEquals(1344.8450261388216, affineTransform0.m10, 0.01);
      assertEquals((-1501.0), affineTransform0.tx, 0.01);
      assertEquals(1.703432945778528E38, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-777.6772213361645), affineTransform0.m00, 0.01);
      assertEquals(2.9457636942936675E38, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTy((-1501.0));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1.703432945778528E38, affineTransform0.scaleY(), 0.01);
      assertEquals(2.9457636942936675E38, affineTransform0.scaleX(), 0.01);
      assertEquals((-1501.0), affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1501.0), affineTransform0.tx(), 0.01);
      assertEquals((-7.270706054061519E20), affineTransform0.uniformScale(), 0.01);
      assertEquals(2.9457636942936675E38, affineTransform1.scaleX(), 0.01);
      assertEquals(1.703432945778528E38, affineTransform1.scaleY(), 0.01);
      assertEquals((-7.270706054061519E20), affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1501.0), affineTransform1.tx(), 0.01);
      assertEquals((-1501.0), affineTransform1.ty(), 0.01);
      assertEquals(1344.8450261388216, affineTransform0.m10, 0.01);
      assertEquals((-1501.0), affineTransform0.ty, 0.01);
      assertEquals((-1501.0), affineTransform0.tx, 0.01);
      assertEquals(1.703432945778528E38, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-777.6772213361645), affineTransform0.m00, 0.01);
      assertEquals(2.9457636942936675E38, affineTransform0.m01, 0.01);
      assertEquals((-777.6772213361645), affineTransform1.m00, 0.01);
      assertEquals((-1501.0), affineTransform1.tx, 0.01);
      assertEquals(1344.8450261388216, affineTransform1.m10, 0.01);
      assertEquals(2.9457636942936675E38, affineTransform1.m01, 0.01);
      assertEquals(1.703432945778528E38, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1501.0), affineTransform1.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 1.0, (-3899.157914004464));
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-3899.157914004464), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals((-3899.157914004464), affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTy(25.46);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(25.46, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(25.46, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(1.0, affineTransform1.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(25.46, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform1.tx, 0.01);
      assertEquals(25.46, affineTransform1.ty, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTranslation(9.999999747378752E-6, 9765625.159);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(9.999999747378752E-6, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(9765625.159, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(9765625.159, affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9.999999747378752E-6, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(9765625.159, affineTransform0.ty, 0.01);
      assertEquals(9765625.159, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9.999999747378752E-6, affineTransform1.tx, 0.01);
      
      AffineTransform affineTransform2 = affineTransform1.setTx(1.0);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(9765625.159, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals(9765625.159, affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(1.0, affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0, affineTransform2.uniformScale(), 0.01);
      assertEquals(9765625.159, affineTransform2.ty(), 0.01);
      assertEquals(1.0, affineTransform2.tx(), 0.01);
      assertEquals(1.0, affineTransform2.scaleX(), 0.01);
      assertEquals(1.0, affineTransform2.scaleY(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(9765625.159, affineTransform0.ty, 0.01);
      assertEquals(9765625.159, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals(0.0, affineTransform2.m10, 0.01);
      assertEquals(1.0, affineTransform2.m00, 0.01);
      assertEquals(1.0, affineTransform2.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9765625.159, affineTransform2.ty, 0.01);
      assertEquals(1.0, affineTransform2.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3.141592653589793, 3.141592653589793, 0.0, (-1.0), (-1.0), (-1.0));
      assertNotNull(affineTransform0);
      assertEquals((-1.7724538509055159), affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3.141592653589793, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.m11, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTx(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals((-1.7724538509055159), affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(4.442882938158366, affineTransform1.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1.7724538509055159), affineTransform1.uniformScale(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3.141592653589793, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1.0), affineTransform0.m11, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(3.141592653589793, affineTransform1.m00, 0.01);
      assertEquals((-1.0), affineTransform1.ty, 0.01);
      assertEquals(3.141592653589793, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals((-1.0), affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTx(2753.404);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2753.404, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(2753.404, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(2753.404, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(2753.404, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.shear((-550.31505), 0.0);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2753.404, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform2.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform2.scaleX(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0, affineTransform2.scaleY(), 0.01);
      assertEquals(2753.404, affineTransform2.tx(), 0.01);
      assertEquals(0.0, affineTransform2.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(2753.404, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform2.ty, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals(-0.0, affineTransform2.m10, 0.01);
      assertEquals(2753.404, affineTransform2.tx, 0.01);
      assertEquals(0.0, affineTransform2.m00, 0.01);
      assertEquals(0.0, affineTransform2.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3.141592653589793, 2432.9573527, 9.999999747378752E-6, -0.0, 0.0, 3.141592653589793);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty(), 0.01);
      assertEquals((-0.15597939899994254), affineTransform0.uniformScale(), 0.01);
      assertEquals(2432.959381013459, affineTransform0.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(2432.9573527, affineTransform0.m01, 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty, 0.01);
      assertEquals(-0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m10, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTranslation(0.0, 9.999999747378752E-6);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals((-0.15597939899994254), affineTransform0.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty(), 0.01);
      assertEquals(2432.959381013459, affineTransform0.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-0.15597939899994254), affineTransform1.uniformScale(), 0.01);
      assertEquals(2432.959381013459, affineTransform1.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.scaleY(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(2432.9573527, affineTransform0.m01, 0.01);
      assertEquals(-0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m10, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3.141592653589793, affineTransform1.m00, 0.01);
      assertEquals(-0.0, affineTransform1.m11, 0.01);
      assertEquals(2432.9573527, affineTransform1.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTranslation((-1766.6), (-1267.838449));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-1766.6), affineTransform0.tx(), 0.01);
      assertEquals((-1267.838449), affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals((-1766.6), affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals((-1267.838449), affineTransform1.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1766.6), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals((-1267.838449), affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals((-1267.838449), affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1766.6), affineTransform1.tx, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m11, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.shearX((-1263.710519611598));
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertEquals(1263.7109152717703, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals((-1766.6), affineTransform0.tx(), 0.01);
      assertEquals((-1267.838449), affineTransform0.ty(), 0.01);
      assertEquals(1263.7109152717703, affineTransform2.scaleY(), 0.01);
      assertEquals(1.0, affineTransform2.uniformScale(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(1.0, affineTransform2.scaleX(), 0.01);
      assertEquals((-1766.6), affineTransform2.tx(), 0.01);
      assertEquals((-1267.838449), affineTransform2.ty(), 0.01);
      assertEquals((-1263.710519611598), affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1766.6), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals((-1267.838449), affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals((-1263.710519611598), affineTransform2.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1766.6), affineTransform2.tx, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals((-1267.838449), affineTransform2.ty, 0.01);
      assertEquals(1.0, affineTransform2.m00, 0.01);
      assertEquals(1.0, affineTransform2.m11, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-485.853991), (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), 0.0);
      assertNotNull(affineTransform0);
      assertEquals((-3.141592653589793), affineTransform0.tx(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(39.06859773325479, affineTransform0.uniformScale(), 0.01);
      assertEquals(485.853991, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals((-3.141592653589793), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(485.853991, affineTransform0.m00, 0.01);
      assertEquals((-5.94999534931117E-14), affineTransform0.m10, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(3.8473413874435795E-16, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTransform(1.5707963267948966, 4, 3066.79470732, 0.5, 1.5707963267948966, (-1526.3553288425462));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1.5707963267948966, affineTransform0.tx(), 0.01);
      assertEquals((-110.75375131848402), affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1526.3553288425462), affineTransform0.ty(), 0.01);
      assertEquals(4.297371417537975, affineTransform0.scaleX(), 0.01);
      assertEquals(3066.794748079167, affineTransform0.scaleY(), 0.01);
      assertEquals(4.297371417537975, affineTransform1.scaleX(), 0.01);
      assertEquals((-110.75375131848402), affineTransform1.uniformScale(), 0.01);
      assertEquals(1.5707963267948966, affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1526.3553288425462), affineTransform1.ty(), 0.01);
      assertEquals(3066.794748079167, affineTransform1.scaleY(), 0.01);
      assertEquals(1.5707963267948966, affineTransform0.tx, 0.01);
      assertEquals(0.5, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.5707963267948966, affineTransform0.m00, 0.01);
      assertEquals(3066.79470732, affineTransform0.m10, 0.01);
      assertEquals((-1526.3553288425462), affineTransform0.ty, 0.01);
      assertEquals(4.0, affineTransform0.m01, 0.01);
      assertEquals(3066.79470732, affineTransform1.m10, 0.01);
      assertEquals(1.5707963267948966, affineTransform1.tx, 0.01);
      assertEquals(4.0, affineTransform1.m01, 0.01);
      assertEquals(0.5, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1526.3553288425462), affineTransform1.ty, 0.01);
      assertEquals(1.5707963267948966, affineTransform1.m00, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.shear((-1526.3553288425462), 0.0);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertEquals(1.5707963267948966, affineTransform0.tx(), 0.01);
      assertEquals((-110.75375131848402), affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1526.3553288425462), affineTransform0.ty(), 0.01);
      assertEquals(4.297371417537975, affineTransform0.scaleX(), 0.01);
      assertEquals(6141.489618294952, affineTransform0.scaleY(), 0.01);
      assertEquals((-1526.3553288425462), affineTransform2.ty(), 0.01);
      assertEquals(6141.489618294952, affineTransform2.scaleY(), 0.01);
      assertEquals(4.297371417537975, affineTransform2.scaleX(), 0.01);
      assertEquals((-110.75375131848402), affineTransform2.uniformScale(), 0.01);
      assertEquals(1.5707963267948966, affineTransform2.tx(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(1.5707963267948966, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-6104.921315370185), affineTransform0.m11, 0.01);
      assertEquals(669.2013633903116, affineTransform0.m10, 0.01);
      assertEquals(1.5707963267948966, affineTransform0.m00, 0.01);
      assertEquals((-1526.3553288425462), affineTransform0.ty, 0.01);
      assertEquals(4.0, affineTransform0.m01, 0.01);
      assertEquals(4.0, affineTransform2.m01, 0.01);
      assertEquals(1.5707963267948966, affineTransform2.m00, 0.01);
      assertEquals((-1526.3553288425462), affineTransform2.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(669.2013633903116, affineTransform2.m10, 0.01);
      assertEquals((-6104.921315370185), affineTransform2.m11, 0.01);
      assertEquals(1.5707963267948966, affineTransform2.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1456.1178, 0.0, 0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(1456.1178, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1456.1178, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1456.1178, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(1456.1178, affineTransform0.m00, 0.01);
      assertEquals(1456.1178, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTransform(1535.07868, (-0.4165909220575431), 1535.07868, 3709.92, 0.0, 75.017180506491);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(75.017180506491, affineTransform0.ty(), 0.01);
      assertEquals(1535.0787365273936, affineTransform0.scaleX(), 0.01);
      assertEquals(2386.5578971289033, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4014.968612603409, affineTransform0.scaleY(), 0.01);
      assertEquals(4014.968612603409, affineTransform1.scaleY(), 0.01);
      assertEquals(75.017180506491, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(2386.5578971289033, affineTransform1.uniformScale(), 0.01);
      assertEquals(1535.0787365273936, affineTransform1.scaleX(), 0.01);
      assertEquals(1535.07868, affineTransform0.m00, 0.01);
      assertEquals(1535.07868, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(75.017180506491, affineTransform0.ty, 0.01);
      assertEquals(3709.92, affineTransform0.m11, 0.01);
      assertEquals((-0.4165909220575431), affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(1535.07868, affineTransform1.m10, 0.01);
      assertEquals(1535.07868, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals((-0.4165909220575431), affineTransform1.m01, 0.01);
      assertEquals(3709.92, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(75.017180506491, affineTransform1.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, (-169.0389951251), (-169.0389951251));
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-169.0389951251), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-169.0389951251), affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals((-169.0389951251), affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals((-169.0389951251), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTransform(0.0, 0.0, 0.0, 0.0, (-1.0), 0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 1290.8801);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.setScaleY(4);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(1290.8801, affineTransform1.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(Double.NaN, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(Double.NaN, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(Double.NaN, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(Double.NaN, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(Double.NaN, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-1.0), (-937.8121879422441), (-1197.75197692145), 0.0);
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals(0.9989059757779418, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.invert();
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.scaleY(), 0.01);
      assertEquals(56.01141551704674, affineTransform1.tx(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1196.4416072466797), affineTransform1.ty(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.scaleX(), 0.01);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals(0.9989059757779418, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.9989059757779416, affineTransform1.m01, 0.01);
      assertEquals(56.01141551704674, affineTransform1.tx, 0.01);
      assertEquals((-0.9989059757779416), affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.04676378465349011, affineTransform1.m00, 0.01);
      assertEquals(0.04676378465349011, affineTransform1.m11, 0.01);
      assertEquals((-1196.4416072466797), affineTransform1.ty, 0.01);
      
      AffineTransform affineTransform2 = affineTransform1.setScaleY(0.04676378465349012);
      assertFalse(affineTransform0.equals((Object)affineTransform1));
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertNotNull(affineTransform2);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform2);
      assertNotSame(affineTransform1, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertNotSame(affineTransform2, affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.04676378465349012, affineTransform1.scaleY(), 0.01);
      assertEquals(0.21624935757936972, affineTransform1.uniformScale(), 0.01);
      assertEquals(56.01141551704674, affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1196.4416072466797), affineTransform1.ty(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.9999999999999998, affineTransform2.scaleX(), 0.01);
      assertEquals(56.01141551704674, affineTransform2.tx(), 0.01);
      assertEquals((-1196.4416072466797), affineTransform2.ty(), 0.01);
      assertEquals(0.04676378465349012, affineTransform2.scaleY(), 0.01);
      assertEquals(0.21624935757936972, affineTransform2.uniformScale(), 0.01);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals(0.9989059757779418, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.9989059757779416, affineTransform1.m01, 0.01);
      assertEquals(56.01141551704674, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.04671262394036409), affineTransform1.m10, 0.01);
      assertEquals(0.04676378465349011, affineTransform1.m00, 0.01);
      assertEquals((-1196.4416072466797), affineTransform1.ty, 0.01);
      assertEquals(0.002186851555117998, affineTransform1.m11, 0.01);
      assertEquals(0.04676378465349011, affineTransform2.m00, 0.01);
      assertEquals((-1196.4416072466797), affineTransform2.ty, 0.01);
      assertEquals(0.002186851555117998, affineTransform2.m11, 0.01);
      assertEquals(0.9989059757779416, affineTransform2.m01, 0.01);
      assertEquals(56.01141551704674, affineTransform2.tx, 0.01);
      assertEquals((-0.04671262394036409), affineTransform2.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-1.0), (-937.8121879422441), (-1197.75197692145), 0.0);
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.9989059757779418, affineTransform0.m01, 0.01);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.scaleX((-1197.75197692145));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals((-34.6085535225246), affineTransform0.uniformScale(), 0.01);
      assertEquals(1197.75197692145, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-34.6085535225246), affineTransform1.uniformScale(), 0.01);
      assertEquals((-1197.75197692145), affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(1197.75197692145, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals((-56.01141551704676), affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals((-1196.44160724668), affineTransform0.m01, 0.01);
      assertEquals((-1196.44160724668), affineTransform1.m01, 0.01);
      assertEquals((-56.01141551704676), affineTransform1.m00, 0.01);
      assertEquals((-0.9989059757779418), affineTransform1.m10, 0.01);
      assertEquals((-1197.75197692145), affineTransform1.tx, 0.01);
      assertEquals(0.04676378465349012, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = affineTransform0.setScaleX(0.04676378465349012);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-0.21624935757936975), affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.046763784653490126, affineTransform0.scaleX(), 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals((-0.21624935757936975), affineTransform2.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform2.ty(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.046763784653490126, affineTransform2.scaleX(), 0.01);
      assertEquals(1.0, affineTransform2.scaleY(), 0.01);
      assertEquals((-1197.75197692145), affineTransform2.tx(), 0.01);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals((-0.002186851555117998), affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals((-0.046712623940364094), affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals((-1197.75197692145), affineTransform2.tx, 0.01);
      assertEquals(0.0, affineTransform2.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.046712623940364094), affineTransform2.m01, 0.01);
      assertEquals((-0.9989059757779418), affineTransform2.m10, 0.01);
      assertEquals((-0.002186851555117998), affineTransform2.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform2.m11, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-1.0), (-937.8121879422441), (-1197.75197692145), 0.0);
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.04676378465349012, affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals(0.9989059757779418, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.invert();
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.uniformScale(), 0.01);
      assertEquals(56.01141551704674, affineTransform1.tx(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1196.4416072466797), affineTransform1.ty(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.scaleX(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.04676378465349012, affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals(0.9989059757779418, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(56.01141551704674, affineTransform1.tx, 0.01);
      assertEquals(0.9989059757779416, affineTransform1.m01, 0.01);
      assertEquals((-0.9989059757779416), affineTransform1.m10, 0.01);
      assertEquals(0.04676378465349011, affineTransform1.m00, 0.01);
      assertEquals(0.04676378465349011, affineTransform1.m11, 0.01);
      assertEquals((-1196.4416072466797), affineTransform1.ty, 0.01);
      
      AffineTransform affineTransform2 = affineTransform1.setScaleX(0.04676378465349012);
      assertFalse(affineTransform0.equals((Object)affineTransform1));
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertNotNull(affineTransform2);
      assertNotSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform2);
      assertNotSame(affineTransform1, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertNotSame(affineTransform2, affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.04676378465349012, affineTransform1.scaleX(), 0.01);
      assertEquals(56.01141551704674, affineTransform1.tx(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.scaleY(), 0.01);
      assertEquals(0.21624935757936972, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1196.4416072466797), affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.21624935757936972, affineTransform2.uniformScale(), 0.01);
      assertEquals((-1196.4416072466797), affineTransform2.ty(), 0.01);
      assertEquals(0.9999999999999998, affineTransform2.scaleY(), 0.01);
      assertEquals(56.01141551704674, affineTransform2.tx(), 0.01);
      assertEquals(0.04676378465349012, affineTransform2.scaleX(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.04676378465349012, affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals(0.9989059757779418, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.04671262394036409, affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(56.01141551704674, affineTransform1.tx, 0.01);
      assertEquals((-0.9989059757779416), affineTransform1.m10, 0.01);
      assertEquals(0.002186851555117998, affineTransform1.m00, 0.01);
      assertEquals(0.04676378465349011, affineTransform1.m11, 0.01);
      assertEquals((-1196.4416072466797), affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.04671262394036409, affineTransform2.m01, 0.01);
      assertEquals((-1196.4416072466797), affineTransform2.ty, 0.01);
      assertEquals(0.002186851555117998, affineTransform2.m00, 0.01);
      assertEquals(0.04676378465349011, affineTransform2.m11, 0.01);
      assertEquals((-0.9989059757779416), affineTransform2.m10, 0.01);
      assertEquals(56.01141551704674, affineTransform2.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 1290.8801);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setScaleX(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(Double.NaN, affineTransform0.uniformScale(), 0.01);
      assertEquals(Double.NaN, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(Double.NaN, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1290.8801, affineTransform1.ty(), 0.01);
      assertEquals(Double.NaN, affineTransform1.scaleX(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(Double.NaN, affineTransform0.m00, 0.01);
      assertEquals(Double.NaN, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(Double.NaN, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(Double.NaN, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(1290.8801, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 1290.8801);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setRotation(10.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(1290.8801, affineTransform1.ty(), 0.01);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(-0.0, affineTransform0.m00, 0.01);
      assertEquals(-0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(-0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(-0.0, affineTransform1.m00, 0.01);
      assertEquals(-0.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform1.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0, 7.113032015446608, (-1.0), 1.0, 1.0, (-833.7063483505518));
      assertNotNull(affineTransform0);
      assertEquals(7.182981585161445, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2.848338465745707, affineTransform0.uniformScale(), 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty(), 0.01);
      assertEquals(1.4142135623730951, affineTransform0.scaleY(), 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(7.113032015446608, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals((-1.0), affineTransform0.m10, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setRotation((-30.406863237));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(7.182981585161445, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.1872041001497706, affineTransform0.uniformScale(), 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty(), 0.01);
      assertEquals(1.4142135623730951, affineTransform0.scaleY(), 0.01);
      assertEquals((-833.7063483505518), affineTransform1.ty(), 0.01);
      assertEquals(7.182981585161445, affineTransform1.scaleX(), 0.01);
      assertEquals(1.0, affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(3.1872041001497706, affineTransform1.uniformScale(), 0.01);
      assertEquals(1.4142135623730951, affineTransform1.scaleY(), 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty, 0.01);
      assertEquals((-1.1968960009659961), affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(0.7532861095703322, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(6.07919635551056, affineTransform0.m01, 0.01);
      assertEquals(3.82604183509741, affineTransform0.m00, 0.01);
      assertEquals((-833.7063483505518), affineTransform1.ty, 0.01);
      assertEquals((-1.1968960009659961), affineTransform1.m10, 0.01);
      assertEquals(1.0, affineTransform1.tx, 0.01);
      assertEquals(0.7532861095703322, affineTransform1.m11, 0.01);
      assertEquals(6.07919635551056, affineTransform1.m01, 0.01);
      assertEquals(3.82604183509741, affineTransform1.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTranslation(9.999999747378752E-6, 9765625.159);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(9765625.159, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(9765625.159, affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(9765625.159, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9.999999747378752E-6, affineTransform0.tx, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9765625.159, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.set(affineTransform1);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals(9765625.159, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(9765625.159, affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4, affineTransform2.generality());
      assertEquals(9.999999747378752E-6, affineTransform2.tx(), 0.01);
      assertEquals(1.0, affineTransform2.scaleY(), 0.01);
      assertEquals(1.0, affineTransform2.scaleX(), 0.01);
      assertEquals(1.0, affineTransform2.uniformScale(), 0.01);
      assertEquals(9765625.159, affineTransform2.ty(), 0.01);
      assertEquals(9765625.159, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9.999999747378752E-6, affineTransform0.tx, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9765625.159, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(9765625.159, affineTransform2.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9.999999747378752E-6, affineTransform2.tx, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals(1.0, affineTransform2.m00, 0.01);
      assertEquals(1.0, affineTransform2.m11, 0.01);
      assertEquals(0.0, affineTransform2.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(195.31421159113947, 0.0, 195.31421159113947, (-1513371.522721123), (-748.985573));
      assertNotNull(affineTransform0);
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-748.985573), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(167.97616044267096, affineTransform0.scaleX(), 0.01);
      assertEquals(99.65766790571844, affineTransform0.scaleY(), 0.01);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals((-99.65766790571844), affineTransform0.m10, 0.01);
      assertEquals(167.97616044267096, affineTransform0.m00, 0.01);
      assertEquals((-748.985573), affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.uniformScale(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-748.985573), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx(), 0.01);
      assertEquals((-748.985573), affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals((-748.985573), affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx, 0.01);
      assertEquals((-748.985573), affineTransform1.ty, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.set(affineTransform1);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-748.985573), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx(), 0.01);
      assertEquals((-748.985573), affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform2.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform2.scaleY(), 0.01);
      assertEquals((-1513371.522721123), affineTransform2.tx(), 0.01);
      assertEquals(0.0, affineTransform2.scaleX(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-748.985573), affineTransform2.ty(), 0.01);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals((-748.985573), affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx, 0.01);
      assertEquals((-748.985573), affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform2.m00, 0.01);
      assertEquals(0.0, affineTransform2.m11, 0.01);
      assertEquals(-0.0, affineTransform2.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1513371.522721123), affineTransform2.tx, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals((-748.985573), affineTransform2.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.scaleY(1.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 1.0, 1.0, (-3052.43544), 0.0, (-1.0));
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals((-1.0), affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3052.435603803624, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-3052.43544), affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTx((-989.42608909));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals((-989.42608909), affineTransform0.tx(), 0.01);
      assertEquals((-1.0), affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3052.435603803624, affineTransform0.scaleY(), 0.01);
      assertEquals((-989.42608909), affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(3052.435603803624, affineTransform1.scaleY(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform1.ty(), 0.01);
      assertEquals((-1.0), affineTransform1.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-3052.43544), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m10, 0.01);
      assertEquals((-989.42608909), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-989.42608909), affineTransform1.tx, 0.01);
      assertEquals((-1.0), affineTransform1.ty, 0.01);
      assertEquals((-3052.43544), affineTransform1.m11, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.scaleY(1673.23);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals((-989.42608909), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(5107426.825352338, affineTransform0.scaleY(), 0.01);
      assertEquals((-40.90513415208414), affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-989.42608909), affineTransform2.tx(), 0.01);
      assertEquals((-40.90513415208414), affineTransform2.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform2.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform2.ty(), 0.01);
      assertEquals(5107426.825352338, affineTransform2.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(1673.23, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m01, 0.01);
      assertEquals((-989.42608909), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals((-5107426.5512712), affineTransform0.m11, 0.01);
      assertEquals((-989.42608909), affineTransform2.tx, 0.01);
      assertEquals(0.0, affineTransform2.m00, 0.01);
      assertEquals((-5107426.5512712), affineTransform2.m11, 0.01);
      assertEquals((-1.0), affineTransform2.ty, 0.01);
      assertEquals(1673.23, affineTransform2.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform2.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 1290.8801);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.scaleY(10.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(1290.8801, affineTransform1.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(1290.8801, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(195.31421159113947, 0.0, 195.31421159113947, (-1513371.522721123), 3485.75176);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(3485.75176, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(167.97616044267096, affineTransform0.scaleX(), 0.01);
      assertEquals(99.65766790571844, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(3485.75176, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals(167.97616044267096, affineTransform0.m00, 0.01);
      assertEquals((-99.65766790571844), affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.uniformScale(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(3485.75176, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(3485.75176, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1513371.522721123), affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(3485.75176, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(3485.75176, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      
      double double0 = affineTransform1.scaleY();
      assertEquals(0.0, double0, 0.01);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(3485.75176, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(3485.75176, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1513371.522721123), affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(3485.75176, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(3485.75176, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      
      double double0 = affineTransform0.scaleY();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setScaleY((-4272.666146197665));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals((-65.36563429048681), affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4272.666146197665, affineTransform0.scaleY(), 0.01);
      assertEquals((-65.36563429048681), affineTransform1.uniformScale(), 0.01);
      assertEquals(4272.666146197665, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals((-4272.666146197665), affineTransform0.m11, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals((-4272.666146197665), affineTransform1.m11, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      
      AffineTransform affineTransform2 = affineTransform1.scaleX((-40.6698932201));
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(416.85594146059043, affineTransform0.uniformScale(), 0.01);
      assertEquals(4272.666146197665, affineTransform0.scaleY(), 0.01);
      assertEquals(40.6698932201, affineTransform0.scaleX(), 0.01);
      assertEquals(40.6698932201, affineTransform1.scaleX(), 0.01);
      assertEquals(416.85594146059043, affineTransform1.uniformScale(), 0.01);
      assertEquals(4272.666146197665, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4, affineTransform2.generality());
      assertEquals(416.85594146059043, affineTransform2.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform2.ty(), 0.01);
      assertEquals(4272.666146197665, affineTransform2.scaleY(), 0.01);
      assertEquals(0.0, affineTransform2.tx(), 0.01);
      assertEquals(40.6698932201, affineTransform2.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals((-4272.666146197665), affineTransform0.m11, 0.01);
      assertEquals((-40.6698932201), affineTransform0.m00, 0.01);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(-0.0, affineTransform1.m01, 0.01);
      assertEquals((-4272.666146197665), affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals((-40.6698932201), affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals((-4272.666146197665), affineTransform2.m11, 0.01);
      assertEquals(0.0, affineTransform2.tx, 0.01);
      assertEquals((-40.6698932201), affineTransform2.m00, 0.01);
      assertEquals(0.0, affineTransform2.ty, 0.01);
      assertEquals(-0.0, affineTransform2.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform2.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(195.31421159113947, 0.0, 195.31421159113947, (-1513371.522721123), 3485.75176);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(167.97616044267096, affineTransform0.scaleX(), 0.01);
      assertEquals(3485.75176, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(99.65766790571844, affineTransform0.scaleY(), 0.01);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(167.97616044267096, affineTransform0.m00, 0.01);
      assertEquals((-99.65766790571844), affineTransform0.m10, 0.01);
      assertEquals(3485.75176, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.uniformScale(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(3485.75176, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(3485.75176, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1513371.522721123), affineTransform1.tx(), 0.01);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(3485.75176, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(3485.75176, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.scaleX(6250.000211013283);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(3485.75176, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1513371.522721123), affineTransform2.tx(), 0.01);
      assertEquals(3485.75176, affineTransform2.ty(), 0.01);
      assertEquals(0.0, affineTransform2.scaleY(), 0.01);
      assertEquals(0.0, affineTransform2.scaleX(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0, affineTransform2.uniformScale(), 0.01);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(3485.75176, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform2.m00, 0.01);
      assertEquals(0.0, affineTransform2.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform2.m10, 0.01);
      assertEquals((-1513371.522721123), affineTransform2.tx, 0.01);
      assertEquals(3485.75176, affineTransform2.ty, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 1290.8801);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      double double0 = affineTransform0.scaleX();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1290.8801, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(1290.8801, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      
      double double0 = affineTransform0.scaleX();
      assertEquals(1.0, double0, 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.scale(2117.45, (-15.90086));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals((-183.49189629790192), affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(15.90086, affineTransform0.scaleY(), 0.01);
      assertEquals(2117.45, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(15.90086, affineTransform1.scaleY(), 0.01);
      assertEquals((-183.49189629790192), affineTransform1.uniformScale(), 0.01);
      assertEquals(2117.45, affineTransform1.scaleX(), 0.01);
      assertEquals((-15.90086), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(2117.45, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(2117.45, affineTransform1.m00, 0.01);
      assertEquals((-15.90086), affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = affineTransform0.setUniformScale((-1263.710519611598));
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals((-1263.710519611598), affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1263.710519611598, affineTransform0.scaleY(), 0.01);
      assertEquals(1263.710519611598, affineTransform0.scaleX(), 0.01);
      assertEquals(1263.710519611598, affineTransform2.scaleX(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-1263.710519611598), affineTransform2.uniformScale(), 0.01);
      assertEquals(1263.710519611598, affineTransform2.scaleY(), 0.01);
      assertEquals(0.0, affineTransform2.ty(), 0.01);
      assertEquals(0.0, affineTransform2.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1263.710519611598), affineTransform0.m00, 0.01);
      assertEquals(1263.710519611598, affineTransform0.m11, 0.01);
      assertEquals((-1263.710519611598), affineTransform2.m00, 0.01);
      assertEquals(1263.710519611598, affineTransform2.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform2.m10, 0.01);
      assertEquals(0.0, affineTransform2.tx, 0.01);
      assertEquals(0.0, affineTransform2.ty, 0.01);
      assertEquals(-0.0, affineTransform2.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, (-2825.629105514876), (-944.84721), (-944.84721));
      assertNotNull(affineTransform0);
      assertEquals((-944.84721), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-944.84721), affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-944.84721), affineTransform0.ty, 0.01);
      assertEquals((-944.84721), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(-0.0, affineTransform0.m00, 0.01);
      assertEquals(-0.0, affineTransform0.m11, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.scale(1.0, (-1221.81742528314));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals((-944.84721), affineTransform0.tx(), 0.01);
      assertEquals(-0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-944.84721), affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(-0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals((-944.84721), affineTransform1.tx(), 0.01);
      assertEquals((-944.84721), affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-944.84721), affineTransform0.ty, 0.01);
      assertEquals((-944.84721), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(-0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(-0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals((-944.84721), affineTransform1.tx, 0.01);
      assertEquals((-944.84721), affineTransform1.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1875.5717036985225), (-1875.5717036985225), 9.999999747378752E-6, 2791.1128811);
      assertNotNull(affineTransform0);
      assertEquals(1875.5717036985225, affineTransform0.scaleX(), 0.01);
      assertEquals(2791.1128811, affineTransform0.ty(), 0.01);
      assertEquals(1875.5717036985225, affineTransform0.scaleY(), 0.01);
      assertEquals(1875.5717036985225, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(9.999999747378752E-6, affineTransform0.tx(), 0.01);
      assertEquals(1874.00398954, affineTransform0.m00, 0.01);
      assertEquals(1874.00398954, affineTransform0.m11, 0.01);
      assertEquals(2791.1128811, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-76.66983045984684), affineTransform0.m01, 0.01);
      assertEquals(76.66983045984684, affineTransform0.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.scale(0.5, 108.29);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(203105.659793513, affineTransform0.scaleY(), 0.01);
      assertEquals(13801.072936002687, affineTransform0.uniformScale(), 0.01);
      assertEquals(937.7858518492612, affineTransform0.scaleX(), 0.01);
      assertEquals(2791.1128811, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(9.999999747378752E-6, affineTransform0.tx(), 0.01);
      assertEquals(203105.659793513, affineTransform1.scaleY(), 0.01);
      assertEquals(13801.072936002687, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(9.999999747378752E-6, affineTransform1.tx(), 0.01);
      assertEquals(937.7858518492612, affineTransform1.scaleX(), 0.01);
      assertEquals(2791.1128811, affineTransform1.ty(), 0.01);
      assertEquals(937.00199477, affineTransform0.m00, 0.01);
      assertEquals(202935.8920272866, affineTransform0.m11, 0.01);
      assertEquals(8302.575940496814, affineTransform0.m10, 0.01);
      assertEquals(2791.1128811, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-38.33491522992342), affineTransform0.m01, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.tx, 0.01);
      assertEquals(2791.1128811, affineTransform1.ty, 0.01);
      assertEquals(8302.575940496814, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9.999999747378752E-6, affineTransform1.tx, 0.01);
      assertEquals((-38.33491522992342), affineTransform1.m01, 0.01);
      assertEquals(202935.8920272866, affineTransform1.m11, 0.01);
      assertEquals(937.00199477, affineTransform1.m00, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      double double0 = affineTransform0.rotation();
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 3.141592653589793, 3485.75176, 3485.75176, 3.141592653589793, (-1.0));
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.141592653589793, affineTransform0.tx(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(4929.5974140578855, affineTransform0.scaleY(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.scaleX(), 0.01);
      assertEquals((-104.64612807674105), affineTransform0.uniformScale(), 0.01);
      assertEquals(3485.75176, affineTransform0.m10, 0.01);
      assertEquals(3.141592653589793, affineTransform0.tx, 0.01);
      assertEquals(3485.75176, affineTransform0.m11, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      double double0 = affineTransform0.rotation();
      assertEquals(2.3539942065447774, double0, 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.141592653589793, affineTransform0.tx(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(4929.5974140578855, affineTransform0.scaleY(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.scaleX(), 0.01);
      assertEquals((-104.64612807674105), affineTransform0.uniformScale(), 0.01);
      assertEquals(3485.75176, affineTransform0.m10, 0.01);
      assertEquals(3.141592653589793, affineTransform0.tx, 0.01);
      assertEquals(3485.75176, affineTransform0.m11, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1035.83333), 968.7, (-1035.83333), 968.7);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1035.83333, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1035.83333), affineTransform0.tx(), 0.01);
      assertEquals(1035.83333, affineTransform0.scaleX(), 0.01);
      assertEquals(968.7, affineTransform0.ty(), 0.01);
      assertEquals(1035.83333, affineTransform0.scaleY(), 0.01);
      assertEquals((-479.5511487555095), affineTransform0.m00, 0.01);
      assertEquals((-479.5511487555095), affineTransform0.m11, 0.01);
      assertEquals((-1035.83333), affineTransform0.tx, 0.01);
      assertEquals((-918.1401762618603), affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(918.1401762618603, affineTransform0.m10, 0.01);
      assertEquals(968.7, affineTransform0.ty, 0.01);
      
      double double0 = affineTransform0.rotation();
      assertEquals((-2.0521299592460656), double0, 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1035.83333, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1035.83333), affineTransform0.tx(), 0.01);
      assertEquals(1035.83333, affineTransform0.scaleX(), 0.01);
      assertEquals(968.7, affineTransform0.ty(), 0.01);
      assertEquals(1035.83333, affineTransform0.scaleY(), 0.01);
      assertEquals((-479.5511487555095), affineTransform0.m00, 0.01);
      assertEquals((-479.5511487555095), affineTransform0.m11, 0.01);
      assertEquals((-1035.83333), affineTransform0.tx, 0.01);
      assertEquals((-918.1401762618603), affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(918.1401762618603, affineTransform0.m10, 0.01);
      assertEquals(968.7, affineTransform0.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.rotate(1.39109290382486E7);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.7313819576307817, affineTransform0.m00, 0.01);
      assertEquals(0.7313819576307817, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.6819680579412539), affineTransform0.m10, 0.01);
      assertEquals(0.6819680579412539, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.7313819576307817, affineTransform1.m00, 0.01);
      assertEquals(0.7313819576307817, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.6819680579412539, affineTransform1.m01, 0.01);
      assertEquals((-0.6819680579412539), affineTransform1.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1875.5717036985225), (-1875.5717036985225), 9.999999747378752E-6, 2791.1128811);
      assertNotNull(affineTransform0);
      assertEquals(9.999999747378752E-6, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2791.1128811, affineTransform0.ty(), 0.01);
      assertEquals(1875.5717036985225, affineTransform0.scaleX(), 0.01);
      assertEquals(1875.5717036985225, affineTransform0.scaleY(), 0.01);
      assertEquals(1875.5717036985225, affineTransform0.uniformScale(), 0.01);
      assertEquals(1874.00398954, affineTransform0.m00, 0.01);
      assertEquals(1874.00398954, affineTransform0.m11, 0.01);
      assertEquals(76.66983045984684, affineTransform0.m10, 0.01);
      assertEquals(2791.1128811, affineTransform0.ty, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.tx, 0.01);
      assertEquals((-76.66983045984684), affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.rotate((-2235.3552273));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(9.999999747378752E-6, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2791.1128811, affineTransform0.ty(), 0.01);
      assertEquals(1875.5717036985225, affineTransform0.scaleX(), 0.01);
      assertEquals(1875.5717036985225, affineTransform0.scaleY(), 0.01);
      assertEquals(1875.5717036985225, affineTransform0.uniformScale(), 0.01);
      assertEquals(1875.5717036985225, affineTransform1.uniformScale(), 0.01);
      assertEquals(1875.5717036985225, affineTransform1.scaleX(), 0.01);
      assertEquals(1875.5717036985225, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(2791.1128811, affineTransform1.ty(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.tx(), 0.01);
      assertEquals(285.7399760525615, affineTransform0.m00, 0.01);
      assertEquals(285.7399760525615, affineTransform0.m11, 0.01);
      assertEquals((-1853.6779336767377), affineTransform0.m10, 0.01);
      assertEquals(1853.6779336767377, affineTransform0.m01, 0.01);
      assertEquals(2791.1128811, affineTransform0.ty, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2791.1128811, affineTransform1.ty, 0.01);
      assertEquals((-1853.6779336767377), affineTransform1.m10, 0.01);
      assertEquals(1853.6779336767377, affineTransform1.m01, 0.01);
      assertEquals(285.7399760525615, affineTransform1.m00, 0.01);
      assertEquals(285.7399760525615, affineTransform1.m11, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0, 0.5);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.5, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.5, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.rotate(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.5, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.5, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.5, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.5, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0, 7.113032015446608, (-1.0), 1.0, 1.0, (-833.7063483505518));
      assertNotNull(affineTransform0);
      assertEquals(1.4142135623730951, affineTransform0.scaleY(), 0.01);
      assertEquals(2.848338465745707, affineTransform0.uniformScale(), 0.01);
      assertEquals(7.182981585161445, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-833.7063483505518), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform0.m10, 0.01);
      assertEquals(7.113032015446608, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.scaleY((-507.48163));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(717.6874038012049, affineTransform0.scaleY(), 0.01);
      assertEquals(7.182981585161445, affineTransform0.scaleX(), 0.01);
      assertEquals((-64.16552587987594), affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-833.7063483505518), affineTransform0.ty(), 0.01);
      assertEquals(7.182981585161445, affineTransform1.scaleX(), 0.01);
      assertEquals(717.6874038012049, affineTransform1.scaleY(), 0.01);
      assertEquals((-833.7063483505518), affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-64.16552587987594), affineTransform1.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform1.tx(), 0.01);
      assertEquals(507.48163, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-507.48163), affineTransform0.m11, 0.01);
      assertEquals(7.113032015446608, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty, 0.01);
      assertEquals(7.113032015446608, affineTransform1.m01, 0.01);
      assertEquals((-833.7063483505518), affineTransform1.ty, 0.01);
      assertEquals(1.0, affineTransform1.tx, 0.01);
      assertEquals(507.48163, affineTransform1.m10, 0.01);
      assertEquals((-507.48163), affineTransform1.m11, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = affineTransform0.uniformScale(2760.8);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertEquals((-177148.18384916152), affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals(1981391.3844143667, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-833.7063483505518), affineTransform0.ty(), 0.01);
      assertEquals(19830.77556031372, affineTransform0.scaleX(), 0.01);
      assertEquals((-177148.18384916152), affineTransform2.uniformScale(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(1.0, affineTransform2.tx(), 0.01);
      assertEquals(1981391.3844143667, affineTransform2.scaleY(), 0.01);
      assertEquals((-833.7063483505518), affineTransform2.ty(), 0.01);
      assertEquals(19830.77556031372, affineTransform2.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2760.8, affineTransform0.m00, 0.01);
      assertEquals(19637.658788244997, affineTransform0.m01, 0.01);
      assertEquals(1401055.284104, affineTransform0.m10, 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty, 0.01);
      assertEquals((-1401055.284104), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(19637.658788244997, affineTransform2.m01, 0.01);
      assertEquals((-1401055.284104), affineTransform2.m11, 0.01);
      assertEquals(1.0, affineTransform2.tx, 0.01);
      assertEquals((-833.7063483505518), affineTransform2.ty, 0.01);
      assertEquals(2760.8, affineTransform2.m00, 0.01);
      assertEquals(1401055.284104, affineTransform2.m10, 0.01);
      
      AffineTransform affineTransform3 = affineTransform2.shearY((-1.1183227398720013E7));
      assertNotNull(affineTransform3);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform3);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform3);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform3, affineTransform1);
      assertSame(affineTransform3, affineTransform2);
      assertSame(affineTransform3, affineTransform0);
      assertEquals((-177148.1849300184), affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals(1981391.3844143667, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-833.7063483505518), affineTransform0.ty(), 0.01);
      assertEquals(2.215835042970426E13, affineTransform0.scaleX(), 0.01);
      assertEquals((-177148.1849300184), affineTransform2.uniformScale(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(1.0, affineTransform2.tx(), 0.01);
      assertEquals(1981391.3844143667, affineTransform2.scaleY(), 0.01);
      assertEquals(2.215835042970426E13, affineTransform2.scaleX(), 0.01);
      assertEquals((-833.7063483505518), affineTransform2.ty(), 0.01);
      assertEquals((-833.7063483505518), affineTransform3.ty(), 0.01);
      assertEquals(1981391.3844143667, affineTransform3.scaleY(), 0.01);
      assertEquals(4, affineTransform3.generality());
      assertEquals((-177148.1849300184), affineTransform3.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform3.tx(), 0.01);
      assertEquals(2.215835042970426E13, affineTransform3.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.5668319837552504E13), affineTransform0.m00, 0.01);
      assertEquals(1.5668319859950963E13, affineTransform0.m01, 0.01);
      assertEquals(1401055.284104, affineTransform0.m10, 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty, 0.01);
      assertEquals((-1401055.284104), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1401055.284104), affineTransform2.m11, 0.01);
      assertEquals(1.0, affineTransform2.tx, 0.01);
      assertEquals((-833.7063483505518), affineTransform2.ty, 0.01);
      assertEquals((-1.5668319837552504E13), affineTransform2.m00, 0.01);
      assertEquals(1.5668319859950963E13, affineTransform2.m01, 0.01);
      assertEquals(1401055.284104, affineTransform2.m10, 0.01);
      assertEquals((-833.7063483505518), affineTransform3.ty, 0.01);
      assertEquals((-1.5668319837552504E13), affineTransform3.m00, 0.01);
      assertEquals(1.0, affineTransform3.tx, 0.01);
      assertEquals((-1401055.284104), affineTransform3.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.5668319859950963E13, affineTransform3.m01, 0.01);
      assertEquals(1401055.284104, affineTransform3.m10, 0.01);
      
      AffineTransform affineTransform4 = (AffineTransform)affineTransform2.preConcatenate(affineTransform3);
      assertFalse(affineTransform4.equals((Object)affineTransform1));
      assertFalse(affineTransform4.equals((Object)affineTransform0));
      assertFalse(affineTransform4.equals((Object)affineTransform2));
      assertFalse(affineTransform4.equals((Object)affineTransform3));
      assertNotNull(affineTransform4);
      assertNotSame(affineTransform0, affineTransform4);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform3);
      assertSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform2, affineTransform4);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform3);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform3, affineTransform1);
      assertSame(affineTransform3, affineTransform2);
      assertNotSame(affineTransform3, affineTransform4);
      assertSame(affineTransform3, affineTransform0);
      assertNotSame(affineTransform4, affineTransform1);
      assertNotSame(affineTransform4, affineTransform0);
      assertNotSame(affineTransform4, affineTransform2);
      assertNotSame(affineTransform4, affineTransform3);
      assertEquals((-177148.1849300184), affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals(1981391.3844143667, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-833.7063483505518), affineTransform0.ty(), 0.01);
      assertEquals(2.215835042970426E13, affineTransform0.scaleX(), 0.01);
      assertEquals((-177148.1849300184), affineTransform2.uniformScale(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(1.0, affineTransform2.tx(), 0.01);
      assertEquals(1981391.3844143667, affineTransform2.scaleY(), 0.01);
      assertEquals(2.215835042970426E13, affineTransform2.scaleX(), 0.01);
      assertEquals((-833.7063483505518), affineTransform2.ty(), 0.01);
      assertEquals((-833.7063483505518), affineTransform3.ty(), 0.01);
      assertEquals(1981391.3844143667, affineTransform3.scaleY(), 0.01);
      assertEquals(4, affineTransform3.generality());
      assertEquals((-177148.1849300184), affineTransform3.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform3.tx(), 0.01);
      assertEquals(2.215835042970426E13, affineTransform3.scaleX(), 0.01);
      assertEquals(3.4718415265024934E26, affineTransform4.scaleX(), 0.01);
      assertEquals(1.5669487927802004E13, affineTransform4.ty(), 0.01);
      assertEquals(4, affineTransform4.generality());
      assertEquals((-7.961314590657216E14), affineTransform4.uniformScale(), 0.01);
      assertEquals(3.1045076732604162E19, affineTransform4.scaleY(), 0.01);
      assertEquals((-1.5669487906236252E13), affineTransform4.tx(), 0.01);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.5668319837552504E13), affineTransform0.m00, 0.01);
      assertEquals(1.5668319859950963E13, affineTransform0.m01, 0.01);
      assertEquals(1401055.284104, affineTransform0.m10, 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty, 0.01);
      assertEquals((-1401055.284104), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1401055.284104), affineTransform2.m11, 0.01);
      assertEquals(1.0, affineTransform2.tx, 0.01);
      assertEquals((-833.7063483505518), affineTransform2.ty, 0.01);
      assertEquals((-1.5668319837552504E13), affineTransform2.m00, 0.01);
      assertEquals(1.5668319859950963E13, affineTransform2.m01, 0.01);
      assertEquals(1401055.284104, affineTransform2.m10, 0.01);
      assertEquals((-833.7063483505518), affineTransform3.ty, 0.01);
      assertEquals((-1.5668319837552504E13), affineTransform3.m00, 0.01);
      assertEquals(1.0, affineTransform3.tx, 0.01);
      assertEquals((-1401055.284104), affineTransform3.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.5668319859950963E13, affineTransform3.m01, 0.01);
      assertEquals(1401055.284104, affineTransform3.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.5669487927802004E13, affineTransform4.ty, 0.01);
      assertEquals((-2.195218426439037E19), affineTransform4.m10, 0.01);
      assertEquals(2.4549626848402365E26, affineTransform4.m00, 0.01);
      assertEquals((-2.454962688349699E26), affineTransform4.m01, 0.01);
      assertEquals(2.195218429577185E19, affineTransform4.m11, 0.01);
      assertEquals((-1.5669487906236252E13), affineTransform4.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0, 7.113032015446608, (-1.0), 1.0, 1.0, (-833.7063483505518));
      assertNotNull(affineTransform0);
      assertEquals(2.848338465745707, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty(), 0.01);
      assertEquals(7.182981585161445, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.4142135623730951, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(7.113032015446608, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform0.m10, 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.preConcatenate(affineTransform0);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertEquals(2.848338465745707, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty(), 0.01);
      assertEquals(7.182981585161445, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.4142135623730951, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(6.431886225818615, affineTransform1.scaleY(), 0.01);
      assertEquals(835.7063483505518, affineTransform1.tx(), 0.01);
      assertEquals(15.483864447641905, affineTransform1.scaleX(), 0.01);
      assertEquals(8.113032015446608, affineTransform1.uniformScale(), 0.01);
      assertEquals((-1660.299664685657), affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(7.113032015446608, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform0.m10, 0.01);
      assertEquals((-833.7063483505518), affineTransform0.ty, 0.01);
      assertEquals((-6.113032015446608), affineTransform1.m00, 0.01);
      assertEquals((-6.113032015446608), affineTransform1.m11, 0.01);
      assertEquals(14.226064030893216, affineTransform1.m01, 0.01);
      assertEquals((-1660.299664685657), affineTransform1.ty, 0.01);
      assertEquals(835.7063483505518, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2.0), affineTransform1.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setScaleY(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      
      AffineTransform affineTransform2 = (AffineTransform)affineTransform0.preConcatenate(affineTransform0);
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform2, affineTransform1);
      assertNotSame(affineTransform2, affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, affineTransform2.generality());
      assertEquals(1.0, affineTransform2.scaleX(), 0.01);
      assertEquals(0.0, affineTransform2.scaleY(), 0.01);
      assertEquals(0.0, affineTransform2.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform2.tx(), 0.01);
      assertEquals(0.0, affineTransform2.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals(0.0, affineTransform2.m10, 0.01);
      assertEquals(1.0, affineTransform2.m00, 0.01);
      assertEquals(0.0, affineTransform2.m11, 0.01);
      assertEquals(0.0, affineTransform2.tx, 0.01);
      assertEquals(0.0, affineTransform2.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 1.0, 1.0, (-3052.43544), 0.0, (-1.0));
      assertNotNull(affineTransform0);
      assertEquals((-1.0), affineTransform0.uniformScale(), 0.01);
      assertEquals(3052.435603803624, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-3052.43544), affineTransform0.m11, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.scaleX(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(-0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(3052.435603803624, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(-0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals((-1.0), affineTransform1.ty(), 0.01);
      assertEquals(3052.435603803624, affineTransform1.scaleY(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-3052.43544), affineTransform0.m11, 0.01);
      assertEquals(1.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals((-1.0), affineTransform1.ty, 0.01);
      assertEquals((-3052.43544), affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = (AffineTransform)affineTransform1.preConcatenate(affineTransform0);
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertNotSame(affineTransform2, affineTransform0);
      assertNotSame(affineTransform2, affineTransform1);
      assertEquals(-0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(3052.435603803624, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(-0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals((-1.0), affineTransform1.ty(), 0.01);
      assertEquals(3052.435603803624, affineTransform1.scaleY(), 0.01);
      assertEquals(3051.43544, affineTransform2.ty(), 0.01);
      assertEquals(9317362.615367983, affineTransform2.scaleY(), 0.01);
      assertEquals(0.0, affineTransform2.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform2.scaleX(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-1.0), affineTransform2.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-3052.43544), affineTransform0.m11, 0.01);
      assertEquals(1.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals((-1.0), affineTransform1.ty, 0.01);
      assertEquals((-3052.43544), affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform2.m00, 0.01);
      assertEquals(3051.43544, affineTransform2.ty, 0.01);
      assertEquals(9317362.115367996, affineTransform2.m11, 0.01);
      assertEquals((-1.0), affineTransform2.tx, 0.01);
      assertEquals((-3052.43544), affineTransform2.m10, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0, 0.0, 0.0, 9.999999747378752E-6, 0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0031622776202254524, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = new AffineTransform(4, (-354.11), 617.4556769, 0.5, 617.4556769);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(47.027225200015465, affineTransform1.scaleY(), 0.01);
      assertEquals(617.4556769, affineTransform1.ty(), 0.01);
      assertEquals((-37.63562142438995), affineTransform1.uniformScale(), 0.01);
      assertEquals(0.5, affineTransform1.tx(), 0.01);
      assertEquals(350.996199680263, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-3.964822236619211), affineTransform1.m10, 0.01);
      assertEquals(46.85979187581801, affineTransform1.m11, 0.01);
      assertEquals(617.4556769, affineTransform1.ty, 0.01);
      assertEquals((-0.52932469431327), affineTransform1.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.5, affineTransform1.tx, 0.01);
      assertEquals((-350.99580055230723), affineTransform1.m01, 0.01);
      
      AffineTransform affineTransform2 = (AffineTransform)affineTransform0.lerp(affineTransform1, (-1958.97));
      assertFalse(affineTransform0.equals((Object)affineTransform1));
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertNotNull(affineTransform2);
      assertNotSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform2);
      assertNotSame(affineTransform1, affineTransform0);
      assertNotSame(affineTransform2, affineTransform0);
      assertNotSame(affineTransform2, affineTransform1);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0031622776202254524, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(47.027225200015465, affineTransform1.scaleY(), 0.01);
      assertEquals(617.4556769, affineTransform1.ty(), 0.01);
      assertEquals((-37.63562142438995), affineTransform1.uniformScale(), 0.01);
      assertEquals(0.5, affineTransform1.tx(), 0.01);
      assertEquals(350.996199680263, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4, affineTransform2.generality());
      assertEquals(92124.90382015659, affineTransform2.scaleY(), 0.01);
      assertEquals((-74937.29079592711), affineTransform2.uniformScale(), 0.01);
      assertEquals((-1209577.147376793), affineTransform2.ty(), 0.01);
      assertEquals(687596.7744591226, affineTransform2.scaleX(), 0.01);
      assertEquals((-979.485), affineTransform2.tx(), 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-3.964822236619211), affineTransform1.m10, 0.01);
      assertEquals(46.85979187581801, affineTransform1.m11, 0.01);
      assertEquals(617.4556769, affineTransform1.ty, 0.01);
      assertEquals((-0.52932469431327), affineTransform1.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.5, affineTransform1.tx, 0.01);
      assertEquals((-350.99580055230723), affineTransform1.m01, 0.01);
      assertEquals((-979.485), affineTransform2.tx, 0.01);
      assertEquals(2996.901196418866, affineTransform2.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(687590.2434079533, affineTransform2.m01, 0.01);
      assertEquals(7766.9678168699365, affineTransform2.m10, 0.01);
      assertEquals((-1209577.147376793), affineTransform2.ty, 0.01);
      assertEquals((-91796.9068912717), affineTransform2.m11, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = new AffineTransform(0, (-2149.2207417272894), (-3117.0344), 1.0, 3921.9874);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(1167.8967595313138, affineTransform1.scaleX(), 0.01);
      assertEquals(1.0, affineTransform1.tx(), 0.01);
      assertEquals(-0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(1804.2081242880647, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(3921.9874, affineTransform1.ty(), 0.01);
      assertEquals((-1804.2081242880647), affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(1167.8967595313138, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(3921.9874, affineTransform1.ty, 0.01);
      assertEquals(1.0, affineTransform1.tx, 0.01);
      
      AffineTransform affineTransform2 = (AffineTransform)affineTransform1.lerp(affineTransform0, (-1487.0466470686192));
      assertFalse(affineTransform0.equals((Object)affineTransform1));
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertNotNull(affineTransform2);
      assertNotSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform2);
      assertNotSame(affineTransform1, affineTransform0);
      assertNotSame(affineTransform2, affineTransform0);
      assertNotSame(affineTransform2, affineTransform1);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1167.8967595313138, affineTransform1.scaleX(), 0.01);
      assertEquals(1.0, affineTransform1.tx(), 0.01);
      assertEquals(-0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(1804.2081242880647, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(3921.9874, affineTransform1.ty(), 0.01);
      assertEquals(1737885.4933493887, affineTransform2.scaleX(), 0.01);
      assertEquals(2686232.8966078856, affineTransform2.scaleY(), 0.01);
      assertEquals(5836100.200415372, affineTransform2.ty(), 0.01);
      assertEquals(1488.0466470686192, affineTransform2.tx(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(63202.48113916242, affineTransform2.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals((-1804.2081242880647), affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(1167.8967595313138, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(3921.9874, affineTransform1.ty, 0.01);
      assertEquals(1.0, affineTransform1.tx, 0.01);
      assertEquals((-1487.0466470686192), affineTransform2.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform2.m10, 0.01);
      assertEquals(5836100.200415372, affineTransform2.ty, 0.01);
      assertEquals(1488.0466470686192, affineTransform2.tx, 0.01);
      assertEquals((-2686232.8966078856), affineTransform2.m11, 0.01);
      assertEquals(1737884.8571428768, affineTransform2.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(195.31421159113947, 0.0, 195.31421159113947, (-1513371.522721123), 3485.75176);
      assertNotNull(affineTransform0);
      assertEquals(99.65766790571844, affineTransform0.scaleY(), 0.01);
      assertEquals(167.97616044267096, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(3485.75176, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(3485.75176, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(167.97616044267096, affineTransform0.m00, 0.01);
      assertEquals((-99.65766790571844), affineTransform0.m10, 0.01);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.uniformScale(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(3485.75176, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(3485.75176, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(3485.75176, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(3485.75176, affineTransform1.ty, 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx, 0.01);
      
      AffineTransform affineTransform2 = (AffineTransform)affineTransform1.lerp(affineTransform1, 4);
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertNotNull(affineTransform2);
      assertNotSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertNotSame(affineTransform1, affineTransform2);
      assertNotSame(affineTransform2, affineTransform0);
      assertNotSame(affineTransform2, affineTransform1);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(3485.75176, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(3485.75176, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform2.uniformScale(), 0.01);
      assertEquals((-1513371.522721123), affineTransform2.tx(), 0.01);
      assertEquals(0.0, affineTransform2.scaleY(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0, affineTransform2.scaleX(), 0.01);
      assertEquals(3485.75176, affineTransform2.ty(), 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(3485.75176, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(3485.75176, affineTransform1.ty, 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx, 0.01);
      assertEquals(3485.75176, affineTransform2.ty, 0.01);
      assertEquals(0.0, affineTransform2.m00, 0.01);
      assertEquals(0.0, affineTransform2.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform2.m10, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals((-1513371.522721123), affineTransform2.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 1.0, 1.0, (-3052.43544), 0.0, 421807.229223047);
      assertNotNull(affineTransform0);
      assertEquals((-1.0), affineTransform0.uniformScale(), 0.01);
      assertEquals(3052.435603803624, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(421807.229223047, affineTransform0.ty(), 0.01);
      assertEquals(421807.229223047, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals((-3052.43544), affineTransform0.m11, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.invert();
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertEquals((-1.0), affineTransform0.uniformScale(), 0.01);
      assertEquals(3052.435603803624, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(421807.229223047, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(-0.0, affineTransform1.ty(), 0.01);
      assertEquals(3052.435603803624, affineTransform1.scaleX(), 0.01);
      assertEquals((-421807.229223047), affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1.0), affineTransform1.uniformScale(), 0.01);
      assertEquals(421807.229223047, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals((-3052.43544), affineTransform0.m11, 0.01);
      assertEquals(-0.0, affineTransform1.ty, 0.01);
      assertEquals(3052.43544, affineTransform1.m00, 0.01);
      assertEquals((-421807.229223047), affineTransform1.tx, 0.01);
      assertEquals(-0.0, affineTransform1.m11, 0.01);
      assertEquals(1.0, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform1.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.invert();
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m11, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(-0.0, affineTransform1.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      assertNotNull(identityTransform0);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0, IdentityTransform.GENERALITY);
      
      AffineTransform affineTransform0 = new AffineTransform(identityTransform0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0, IdentityTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      Vector vector0 = new Vector();
      assertNotNull(vector0);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      assertEquals(0.0, vector0.y, 0.01);
      
      Vector vector1 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      assertNotNull(vector1);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(0.0, vector1.x(), 0.01);
      assertEquals(0.0, vector1.y(), 0.01);
      assertEquals(0, IdentityTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      assertEquals(0.0, vector0.y, 0.01);
      assertEquals(0.0, vector1.y, 0.01);
      assertEquals(0.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1671.1077), (-1671.1077), (-1671.1077), 0.0, (-1671.1077), 1.0);
      assertNotNull(affineTransform0);
      assertEquals(2363.3031735261093, affineTransform0.scaleX(), 0.01);
      assertEquals((-1671.1077), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.ty(), 0.01);
      assertEquals((-1671.1077), affineTransform0.uniformScale(), 0.01);
      assertEquals(1671.1077, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals((-1671.1077), affineTransform0.m01, 0.01);
      assertEquals((-1671.1077), affineTransform0.m10, 0.01);
      assertEquals((-1671.1077), affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1671.1077), affineTransform0.tx, 0.01);
      
      Vector vector0 = new Vector((-1671.1077), (-1671.1077));
      assertNotNull(vector0);
      assertEquals((-1671.1077), vector0.y(), 0.01);
      assertEquals((-1671.1077), vector0.x(), 0.01);
      assertEquals((-1671.1077), vector0.y, 0.01);
      assertEquals((-1671.1077), vector0.x, 0.01);
      
      Vector vector1 = affineTransform0.transformPoint(vector0, vector0);
      assertNotNull(vector1);
      assertSame(vector0, vector1);
      assertSame(vector1, vector0);
      assertEquals(2363.3031735261093, affineTransform0.scaleX(), 0.01);
      assertEquals((-1671.1077), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.ty(), 0.01);
      assertEquals((-1671.1077), affineTransform0.uniformScale(), 0.01);
      assertEquals(1671.1077, affineTransform0.scaleY(), 0.01);
      assertEquals(5583530.782298581, vector0.x(), 0.01);
      assertEquals(2792601.94499929, vector0.y(), 0.01);
      assertEquals(2792601.94499929, vector1.y(), 0.01);
      assertEquals(5583530.782298581, vector1.x(), 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals((-1671.1077), affineTransform0.m01, 0.01);
      assertEquals((-1671.1077), affineTransform0.m10, 0.01);
      assertEquals((-1671.1077), affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1671.1077), affineTransform0.tx, 0.01);
      assertEquals(2792601.94499929, vector0.y, 0.01);
      assertEquals(5583530.782298581, vector0.x, 0.01);
      assertEquals(2792601.94499929, vector1.y, 0.01);
      assertEquals(5583530.782298581, vector1.x, 0.01);
      
      Vector vector2 = affineTransform0.inverseTransform((IVector) vector0, vector0);
      assertNotNull(vector2);
      assertSame(vector0, vector2);
      assertSame(vector0, vector1);
      assertSame(vector2, vector1);
      assertSame(vector2, vector0);
      assertEquals(2363.3031735261093, affineTransform0.scaleX(), 0.01);
      assertEquals((-1671.1077), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.ty(), 0.01);
      assertEquals((-1671.1077), affineTransform0.uniformScale(), 0.01);
      assertEquals(1671.1077, affineTransform0.scaleY(), 0.01);
      assertEquals((-1671.108298405477), vector0.x(), 0.01);
      assertEquals((-1670.107101594523), vector0.y(), 0.01);
      assertEquals((-1671.108298405477), vector2.x(), 0.01);
      assertEquals((-1670.107101594523), vector2.y(), 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals((-1671.1077), affineTransform0.m01, 0.01);
      assertEquals((-1671.1077), affineTransform0.m10, 0.01);
      assertEquals((-1671.1077), affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1671.1077), affineTransform0.tx, 0.01);
      assertEquals((-1671.108298405477), vector0.x, 0.01);
      assertEquals((-1670.107101594523), vector0.y, 0.01);
      assertEquals((-1670.107101594523), vector2.y, 0.01);
      assertEquals((-1671.108298405477), vector2.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      Point point0 = new Point(0.0, 1.0);
      assertNotNull(point0);
      assertEquals(1.0, point0.y(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(1.0, point0.y, 0.01);
      
      Point point1 = affineTransform0.inverseTransform((IPoint) point0, point0);
      assertNotNull(point1);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, point0.y(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point1.x(), 0.01);
      assertEquals(1.0, point1.y(), 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(1.0, point0.y, 0.01);
      assertEquals(0.0, point1.x, 0.01);
      assertEquals(1.0, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      assertNotNull(identityTransform0);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals(0, IdentityTransform.GENERALITY);
      
      Vector vector0 = new Vector(0, 0);
      assertNotNull(vector0);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      assertEquals(0.0, vector0.y, 0.01);
      
      Point point0 = new Point(vector0);
      assertNotNull(point0);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      assertEquals(0.0, vector0.y, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      
      AffineTransform affineTransform0 = new AffineTransform(identityTransform0);
      assertNotNull(affineTransform0);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0, IdentityTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      Point point1 = affineTransform0.inverseTransform((IPoint) point0, point0);
      assertNotNull(point1);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, point1.x(), 0.01);
      assertEquals(0.0, point1.y(), 0.01);
      assertEquals(0, IdentityTransform.GENERALITY);
      assertEquals(0.0, vector0.x, 0.01);
      assertEquals(0.0, vector0.y, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, point1.y, 0.01);
      assertEquals(0.0, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-1.0), (-937.8121879422441), (-1197.75197692145), 0.0);
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.9989059757779418, affineTransform0.m01, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.scaleX((-1197.75197692145));
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1197.75197692145, affineTransform0.scaleX(), 0.01);
      assertEquals((-34.6085535225246), affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals((-1197.75197692145), affineTransform1.tx(), 0.01);
      assertEquals((-34.6085535225246), affineTransform1.uniformScale(), 0.01);
      assertEquals(1197.75197692145, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals((-1196.44160724668), affineTransform0.m01, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals((-56.01141551704676), affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals((-56.01141551704676), affineTransform1.m00, 0.01);
      assertEquals((-1196.44160724668), affineTransform1.m01, 0.01);
      assertEquals(0.04676378465349012, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals((-1197.75197692145), affineTransform1.tx, 0.01);
      assertEquals((-0.9989059757779418), affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      Point point0 = new Point(4, 1831.2);
      assertNotNull(point0);
      assertEquals(1831.2, point0.y(), 0.01);
      assertEquals(4.0, point0.x(), 0.01);
      assertEquals(1831.2, point0.y, 0.01);
      assertEquals(4.0, point0.x, 0.01);
      
      Point point1 = affineTransform1.inverseTransform((IPoint) point0, point0);
      assertNotNull(point1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1197.75197692145, affineTransform0.scaleX(), 0.01);
      assertEquals((-34.6085535225246), affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals((-1197.75197692145), affineTransform1.tx(), 0.01);
      assertEquals((-34.6085535225246), affineTransform1.uniformScale(), 0.01);
      assertEquals(1197.75197692145, affineTransform1.scaleX(), 0.01);
      assertEquals((-1.5741114436280945), point0.x(), 0.01);
      assertEquals((-1114.8033886923206), point0.y(), 0.01);
      assertEquals((-1.5741114436280945), point1.x(), 0.01);
      assertEquals((-1114.8033886923206), point1.y(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals((-1196.44160724668), affineTransform0.m01, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals((-56.01141551704676), affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals((-56.01141551704676), affineTransform1.m00, 0.01);
      assertEquals((-1196.44160724668), affineTransform1.m01, 0.01);
      assertEquals(0.04676378465349012, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals((-1197.75197692145), affineTransform1.tx, 0.01);
      assertEquals((-0.9989059757779418), affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1114.8033886923206), point0.y, 0.01);
      assertEquals((-1.5741114436280945), point0.x, 0.01);
      assertEquals((-1114.8033886923206), point1.y, 0.01);
      assertEquals((-1.5741114436280945), point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3.141592653589793, 2432.9573527, 9.999999747378752E-6, -0.0, 0.0, 3.141592653589793);
      assertNotNull(affineTransform0);
      assertEquals((-0.15597939899994254), affineTransform0.uniformScale(), 0.01);
      assertEquals(2432.959381013459, affineTransform0.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.141592653589793, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m10, 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m11, 0.01);
      assertEquals(2432.9573527, affineTransform0.m01, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.copy();
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertEquals((-0.15597939899994254), affineTransform0.uniformScale(), 0.01);
      assertEquals(2432.959381013459, affineTransform0.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.141592653589793, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(2432.959381013459, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(3.141592653589793, affineTransform1.ty(), 0.01);
      assertEquals((-0.15597939899994254), affineTransform1.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.scaleY(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m10, 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m11, 0.01);
      assertEquals(2432.9573527, affineTransform0.m01, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      assertEquals(3.141592653589793, affineTransform1.ty, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(2432.9573527, affineTransform1.m01, 0.01);
      assertEquals(3.141592653589793, affineTransform1.m00, 0.01);
      assertEquals(-0.0, affineTransform1.m11, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.copy();
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(1.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-1.0), (-937.8121879422441), (-1197.75197692145), 0.0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(0.9989059757779418, affineTransform0.m01, 0.01);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.invert();
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.scaleY(), 0.01);
      assertEquals(56.01141551704674, affineTransform1.tx(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.uniformScale(), 0.01);
      assertEquals((-1196.4416072466797), affineTransform1.ty(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.9989059757779418, affineTransform0.m01, 0.01);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals(0.9989059757779416, affineTransform1.m01, 0.01);
      assertEquals(56.01141551704674, affineTransform1.tx, 0.01);
      assertEquals((-0.9989059757779416), affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.04676378465349011, affineTransform1.m00, 0.01);
      assertEquals(0.04676378465349011, affineTransform1.m11, 0.01);
      assertEquals((-1196.4416072466797), affineTransform1.ty, 0.01);
      
      AffineTransform affineTransform2 = affineTransform1.copy();
      assertFalse(affineTransform0.equals((Object)affineTransform1));
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertNotNull(affineTransform2);
      assertNotSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform2);
      assertNotSame(affineTransform1, affineTransform0);
      assertNotSame(affineTransform2, affineTransform1);
      assertNotSame(affineTransform2, affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1197.75197692145), affineTransform0.tx(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.scaleY(), 0.01);
      assertEquals(56.01141551704674, affineTransform1.tx(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.uniformScale(), 0.01);
      assertEquals((-1196.4416072466797), affineTransform1.ty(), 0.01);
      assertEquals(0.9999999999999998, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.9999999999999998, affineTransform2.uniformScale(), 0.01);
      assertEquals(0.9999999999999998, affineTransform2.scaleY(), 0.01);
      assertEquals(0.9999999999999998, affineTransform2.scaleX(), 0.01);
      assertEquals((-1196.4416072466797), affineTransform2.ty(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(56.01141551704674, affineTransform2.tx(), 0.01);
      assertEquals(0.9989059757779418, affineTransform0.m01, 0.01);
      assertEquals((-0.9989059757779418), affineTransform0.m10, 0.01);
      assertEquals((-1197.75197692145), affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m00, 0.01);
      assertEquals(0.04676378465349012, affineTransform0.m11, 0.01);
      assertEquals(0.9989059757779416, affineTransform1.m01, 0.01);
      assertEquals(56.01141551704674, affineTransform1.tx, 0.01);
      assertEquals((-0.9989059757779416), affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.04676378465349011, affineTransform1.m00, 0.01);
      assertEquals(0.04676378465349011, affineTransform1.m11, 0.01);
      assertEquals((-1196.4416072466797), affineTransform1.ty, 0.01);
      assertEquals(56.01141551704674, affineTransform2.tx, 0.01);
      assertEquals(0.04676378465349011, affineTransform2.m00, 0.01);
      assertEquals(0.04676378465349011, affineTransform2.m11, 0.01);
      assertEquals((-1196.4416072466797), affineTransform2.ty, 0.01);
      assertEquals(0.9989059757779416, affineTransform2.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-0.9989059757779416), affineTransform2.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, (-2825.629105514876), (-944.84721), (-944.84721));
      assertNotNull(affineTransform0);
      assertEquals((-944.84721), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-944.84721), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-944.84721), affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m00, 0.01);
      assertEquals(-0.0, affineTransform0.m11, 0.01);
      assertEquals((-944.84721), affineTransform0.tx, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.copy();
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertEquals((-944.84721), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals((-944.84721), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals((-944.84721), affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals((-944.84721), affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-944.84721), affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m00, 0.01);
      assertEquals(-0.0, affineTransform0.m11, 0.01);
      assertEquals((-944.84721), affineTransform0.tx, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals((-944.84721), affineTransform1.ty, 0.01);
      assertEquals((-944.84721), affineTransform1.tx, 0.01);
      assertEquals(-0.0, affineTransform1.m00, 0.01);
      assertEquals(-0.0, affineTransform1.m11, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3.141592653589793, 3.141592653589793, 0.0, (-1.0), (-1.0), (-1.0));
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1.7724538509055159), affineTransform0.uniformScale(), 0.01);
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m01, 0.01);
      assertEquals(3.141592653589793, affineTransform0.m00, 0.01);
      assertEquals((-1.0), affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform1 = affineTransform0.setRotation(4.442882938158366);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(2.1078147305108117, affineTransform0.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4.442882938158366, affineTransform0.scaleX(), 0.01);
      assertEquals(2.1078147305108117, affineTransform1.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform1.tx(), 0.01);
      assertEquals((-1.0), affineTransform1.ty(), 0.01);
      assertEquals(4.442882938158366, affineTransform1.scaleX(), 0.01);
      assertEquals(1.0, affineTransform1.scaleY(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-0.26625534204141565), affineTransform0.m11, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals((-1.1829413163493254), affineTransform0.m00, 0.01);
      assertEquals((-4.282506117246354), affineTransform0.m01, 0.01);
      assertEquals(0.9639025328498773, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-4.282506117246354), affineTransform1.m01, 0.01);
      assertEquals((-1.1829413163493254), affineTransform1.m00, 0.01);
      assertEquals(0.9639025328498773, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform1.tx, 0.01);
      assertEquals((-1.0), affineTransform1.ty, 0.01);
      assertEquals((-0.26625534204141565), affineTransform1.m11, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.uniformScale((-1353.57));
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(6013.753058603019, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2853.074784777519, affineTransform0.uniformScale(), 0.01);
      assertEquals(1353.57, affineTransform0.scaleY(), 0.01);
      assertEquals(2853.074784777519, affineTransform2.uniformScale(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-1.0), affineTransform2.tx(), 0.01);
      assertEquals(1353.57, affineTransform2.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform2.ty(), 0.01);
      assertEquals(6013.753058603019, affineTransform2.scaleX(), 0.01);
      assertEquals((-1304.7095513896084), affineTransform0.m10, 0.01);
      assertEquals(1601.1938775709564, affineTransform0.m00, 0.01);
      assertEquals(360.395243326999, affineTransform0.m11, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(5796.6718051211465, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(360.395243326999, affineTransform2.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform2.tx, 0.01);
      assertEquals((-1.0), affineTransform2.ty, 0.01);
      assertEquals(1601.1938775709564, affineTransform2.m00, 0.01);
      assertEquals((-1304.7095513896084), affineTransform2.m10, 0.01);
      assertEquals(5796.6718051211465, affineTransform2.m01, 0.01);
      
      AffineTransform affineTransform3 = (AffineTransform)affineTransform2.concatenate(affineTransform1);
      assertFalse(affineTransform3.equals((Object)affineTransform2));
      assertFalse(affineTransform3.equals((Object)affineTransform1));
      assertFalse(affineTransform3.equals((Object)affineTransform0));
      assertNotNull(affineTransform3);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform0, affineTransform3);
      assertSame(affineTransform1, affineTransform2);
      assertNotSame(affineTransform1, affineTransform3);
      assertSame(affineTransform1, affineTransform0);
      assertNotSame(affineTransform2, affineTransform3);
      assertSame(affineTransform2, affineTransform1);
      assertSame(affineTransform2, affineTransform0);
      assertNotSame(affineTransform3, affineTransform2);
      assertNotSame(affineTransform3, affineTransform1);
      assertNotSame(affineTransform3, affineTransform0);
      assertEquals((-1.0), affineTransform0.ty(), 0.01);
      assertEquals(6013.753058603019, affineTransform0.scaleX(), 0.01);
      assertEquals((-1.0), affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2853.074784777519, affineTransform0.uniformScale(), 0.01);
      assertEquals(1353.57, affineTransform0.scaleY(), 0.01);
      assertEquals(2853.074784777519, affineTransform1.uniformScale(), 0.01);
      assertEquals((-1.0), affineTransform1.tx(), 0.01);
      assertEquals(1353.57, affineTransform1.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform1.ty(), 0.01);
      assertEquals(6013.753058603019, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(2853.074784777519, affineTransform2.uniformScale(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-1.0), affineTransform2.tx(), 0.01);
      assertEquals(1353.57, affineTransform2.scaleY(), 0.01);
      assertEquals((-1.0), affineTransform2.ty(), 0.01);
      assertEquals(6013.753058603019, affineTransform2.scaleX(), 0.01);
      assertEquals(7861350.999467126, affineTransform3.scaleY(), 0.01);
      assertEquals(1.2421113744322967E7, affineTransform3.scaleX(), 0.01);
      assertEquals((-297.484326181348), affineTransform3.tx(), 0.01);
      assertEquals((-6158.067048448145), affineTransform3.ty(), 0.01);
      assertEquals(4, affineTransform3.generality());
      assertEquals(8140035.727533288, affineTransform3.uniformScale(), 0.01);
      assertEquals((-1304.7095513896084), affineTransform0.m10, 0.01);
      assertEquals(1601.1938775709564, affineTransform0.m00, 0.01);
      assertEquals(360.395243326999, affineTransform0.m11, 0.01);
      assertEquals((-1.0), affineTransform0.tx, 0.01);
      assertEquals((-1.0), affineTransform0.ty, 0.01);
      assertEquals(5796.6718051211465, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(360.395243326999, affineTransform1.m11, 0.01);
      assertEquals(5796.6718051211465, affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1601.1938775709564, affineTransform1.m00, 0.01);
      assertEquals((-1.0), affineTransform1.tx, 0.01);
      assertEquals((-1.0), affineTransform1.ty, 0.01);
      assertEquals((-1304.7095513896084), affineTransform1.m10, 0.01);
      assertEquals(360.395243326999, affineTransform2.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1.0), affineTransform2.tx, 0.01);
      assertEquals((-1.0), affineTransform2.ty, 0.01);
      assertEquals(1601.1938775709564, affineTransform2.m00, 0.01);
      assertEquals((-1304.7095513896084), affineTransform2.m10, 0.01);
      assertEquals(5796.6718051211465, affineTransform2.m01, 0.01);
      assertEquals((-7433088.338999676), affineTransform3.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2559304.0619375077), affineTransform3.m10, 0.01);
      assertEquals((-4999151.236841687), affineTransform3.m00, 0.01);
      assertEquals((-6158.067048448145), affineTransform3.ty, 0.01);
      assertEquals(1.1370688350341555E7, affineTransform3.m01, 0.01);
      assertEquals((-297.484326181348), affineTransform3.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0, 0.0, 0.0, 9.999999747378752E-6, 0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0031622776202254524, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = new AffineTransform(4, (-354.11), 617.4556769, 0.5, 617.4556769);
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertNotNull(affineTransform1);
      assertEquals(47.027225200015465, affineTransform1.scaleY(), 0.01);
      assertEquals(617.4556769, affineTransform1.ty(), 0.01);
      assertEquals(0.5, affineTransform1.tx(), 0.01);
      assertEquals(350.996199680263, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-37.63562142438995), affineTransform1.uniformScale(), 0.01);
      assertEquals((-0.52932469431327), affineTransform1.m00, 0.01);
      assertEquals((-3.964822236619211), affineTransform1.m10, 0.01);
      assertEquals(0.5, affineTransform1.tx, 0.01);
      assertEquals(46.85979187581801, affineTransform1.m11, 0.01);
      assertEquals(617.4556769, affineTransform1.ty, 0.01);
      assertEquals((-350.99580055230723), affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      AffineTransform affineTransform2 = (AffineTransform)affineTransform1.concatenate(affineTransform0);
      assertFalse(affineTransform0.equals((Object)affineTransform1));
      assertFalse(affineTransform1.equals((Object)affineTransform0));
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertNotNull(affineTransform2);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform0, affineTransform2);
      assertNotSame(affineTransform1, affineTransform0);
      assertNotSame(affineTransform1, affineTransform2);
      assertNotSame(affineTransform2, affineTransform1);
      assertNotSame(affineTransform2, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0031622776202254524, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(47.027225200015465, affineTransform1.scaleY(), 0.01);
      assertEquals(617.4556769, affineTransform1.ty(), 0.01);
      assertEquals(0.5, affineTransform1.tx(), 0.01);
      assertEquals(350.996199680263, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-37.63562142438995), affineTransform1.uniformScale(), 0.01);
      assertEquals(4.702722401200783E-4, affineTransform2.scaleY(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(350.996199680263, affineTransform2.scaleX(), 0.01);
      assertEquals(617.4556769, affineTransform2.ty(), 0.01);
      assertEquals((-0.11901428335362592), affineTransform2.uniformScale(), 0.01);
      assertEquals(0.5, affineTransform2.tx(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals((-0.52932469431327), affineTransform1.m00, 0.01);
      assertEquals((-3.964822236619211), affineTransform1.m10, 0.01);
      assertEquals(0.5, affineTransform1.tx, 0.01);
      assertEquals(46.85979187581801, affineTransform1.m11, 0.01);
      assertEquals(617.4556769, affineTransform1.ty, 0.01);
      assertEquals((-350.99580055230723), affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.5, affineTransform2.tx, 0.01);
      assertEquals((-350.99580055230723), affineTransform2.m01, 0.01);
      assertEquals((-3.964822136459377E-5), affineTransform2.m10, 0.01);
      assertEquals(617.4556769, affineTransform2.ty, 0.01);
      assertEquals((-0.52932469431327), affineTransform2.m00, 0.01);
      assertEquals(4.68597906920401E-4, affineTransform2.m11, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(195.31421159113947, 0.0, 195.31421159113947, (-1513371.522721123), 3485.75176);
      assertNotNull(affineTransform0);
      assertEquals(3485.75176, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(99.65766790571844, affineTransform0.scaleY(), 0.01);
      assertEquals(167.97616044267096, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(3485.75176, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals(167.97616044267096, affineTransform0.m00, 0.01);
      assertEquals((-99.65766790571844), affineTransform0.m10, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.uniformScale(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(3485.75176, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1513371.522721123), affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(3485.75176, affineTransform1.ty(), 0.01);
      assertEquals(3485.75176, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(3485.75176, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx, 0.01);
      
      AffineTransform affineTransform2 = (AffineTransform)affineTransform0.concatenate(affineTransform1);
      assertFalse(affineTransform2.equals((Object)affineTransform1));
      assertFalse(affineTransform2.equals((Object)affineTransform0));
      assertNotNull(affineTransform2);
      assertNotSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertNotSame(affineTransform2, affineTransform1);
      assertNotSame(affineTransform2, affineTransform0);
      assertEquals(3485.75176, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1513371.522721123), affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals((-1513371.522721123), affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(3485.75176, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform2.scaleY(), 0.01);
      assertEquals(0.0, affineTransform2.scaleX(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals((-1513371.522721123), affineTransform2.tx(), 0.01);
      assertEquals(0.0, affineTransform2.uniformScale(), 0.01);
      assertEquals(3485.75176, affineTransform2.ty(), 0.01);
      assertEquals(3485.75176, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals((-1513371.522721123), affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(-0.0, affineTransform1.m10, 0.01);
      assertEquals(3485.75176, affineTransform1.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals((-1513371.522721123), affineTransform1.tx, 0.01);
      assertEquals((-1513371.522721123), affineTransform2.tx, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals(3485.75176, affineTransform2.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform2.m00, 0.01);
      assertEquals(0.0, affineTransform2.m11, 0.01);
      assertEquals(-0.0, affineTransform2.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      // Undeclared exception!
      try { 
        affineTransform0.transform((IPoint[]) null, 76, (Point[]) null, 76, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      assertNotNull(affineTransform0);
      assertEquals(3.141592653589793, affineTransform0.uniformScale(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.141592653589793, affineTransform0.scaleX(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.tx(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty(), 0.01);
      assertEquals((-3.8473413874435795E-16), affineTransform0.m10, 0.01);
      assertEquals(3.8473413874435795E-16, affineTransform0.m01, 0.01);
      assertEquals(3.141592653589793, affineTransform0.tx, 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-3.141592653589793), affineTransform0.m00, 0.01);
      assertEquals((-3.141592653589793), affineTransform0.m11, 0.01);
      
      // Undeclared exception!
      try { 
        affineTransform0.transform((double[]) null, 519080211, (double[]) null, 519080211, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      // Undeclared exception!
      try { 
        affineTransform0.transform((IVector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-2403.5457105), (-2403.5457105), (-2403.5457105), (-2403.5457105), (-2403.5457105));
      assertNotNull(affineTransform0);
      assertEquals(2403.5457105, affineTransform0.scaleX(), 0.01);
      assertEquals(2403.5457105, affineTransform0.scaleY(), 0.01);
      assertEquals(2403.5457105, affineTransform0.uniformScale(), 0.01);
      assertEquals((-2403.5457105), affineTransform0.tx(), 0.01);
      assertEquals((-2403.5457105), affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(2341.706109059228, affineTransform0.m00, 0.01);
      assertEquals(2341.706109059228, affineTransform0.m11, 0.01);
      assertEquals((-541.7051608187259), affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2403.5457105), affineTransform0.tx, 0.01);
      assertEquals(541.7051608187259, affineTransform0.m10, 0.01);
      assertEquals((-2403.5457105), affineTransform0.ty, 0.01);
      
      MathUtil.setToStringDecimalPlaces(1436809446);
      // Undeclared exception!
      affineTransform0.toString();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      // Undeclared exception!
      try { 
        affineTransform0.set((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      MathUtil.setToStringDecimalPlaces(2100935715);
      AffineTransform affineTransform1 = affineTransform0.setScaleY(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      
      // Undeclared exception!
      affineTransform0.rotation();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      
      // Undeclared exception!
      try { 
        affineTransform0.preConcatenate((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      // Undeclared exception!
      try { 
        affineTransform0.lerp((Transform) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MathUtil.setToStringDecimalPlaces(260);
      AffineTransform affineTransform0 = new AffineTransform(0, 1.0, 9536.410318920587, 3.141592653589793, 3.141592653589793);
      assertNotNull(affineTransform0);
      assertEquals(0.9944063975644531, affineTransform0.scaleX(), 0.01);
      assertEquals(0.10562157205271445, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.141592653589793, affineTransform0.tx(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty, 0.01);
      assertEquals(0.10562157205271445, affineTransform0.m11, 0.01);
      assertEquals((-0.9944063975644531), affineTransform0.m01, 0.01);
      assertEquals(3.141592653589793, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.uniformScale(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.141592653589793, affineTransform0.tx(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(3.141592653589793, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(3.141592653589793, affineTransform1.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty, 0.01);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertEquals(3.141592653589793, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(-0.0, affineTransform1.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(3.141592653589793, affineTransform1.tx, 0.01);
      assertEquals(3.141592653589793, affineTransform1.ty, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.shearY(493.0888892908206);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.141592653589793, affineTransform0.tx(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(3.141592653589793, affineTransform2.ty(), 0.01);
      assertEquals(3.141592653589793, affineTransform2.tx(), 0.01);
      assertEquals(0.0, affineTransform2.uniformScale(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0, affineTransform2.scaleX(), 0.01);
      assertEquals(0.0, affineTransform2.scaleY(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(3.141592653589793, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform2.m00, 0.01);
      assertEquals(0.0, affineTransform2.m11, 0.01);
      assertEquals(3.141592653589793, affineTransform2.ty, 0.01);
      assertEquals(3.141592653589793, affineTransform2.tx, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform2.m10, 0.01);
      
      String string0 = affineTransform0.toString();
      assertEquals("affine [+0.0 +0.0 +0.0 +0.0 +3.141592653589793115997963468544185161590576171875+3.141592653589793115997963468544185161590576171875]", string0);
      assertNotNull(string0);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(3.141592653589793, affineTransform0.tx(), 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(3.141592653589793, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(3.141592653589793, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform3 = affineTransform0.setTranslation(0.5, (-2335.277615257071));
      assertNotNull(affineTransform3);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform3);
      assertSame(affineTransform3, affineTransform1);
      assertSame(affineTransform3, affineTransform0);
      assertSame(affineTransform3, affineTransform2);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.5, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-2335.277615257071), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform3.scaleX(), 0.01);
      assertEquals((-2335.277615257071), affineTransform3.ty(), 0.01);
      assertEquals(0.0, affineTransform3.scaleY(), 0.01);
      assertEquals(0.0, affineTransform3.uniformScale(), 0.01);
      assertEquals(0.5, affineTransform3.tx(), 0.01);
      assertEquals(4, affineTransform3.generality());
      assertEquals(0.5, affineTransform0.tx, 0.01);
      assertEquals((-2335.277615257071), affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.5, affineTransform3.tx, 0.01);
      assertEquals(0.0, affineTransform3.m01, 0.01);
      assertEquals(0.0, affineTransform3.m10, 0.01);
      assertEquals(0.0, affineTransform3.m00, 0.01);
      assertEquals(0.0, affineTransform3.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-2335.277615257071), affineTransform3.ty, 0.01);
      
      Vector vector0 = affineTransform2.scale();
      assertNotNull(vector0);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform3);
      assertSame(affineTransform2, affineTransform3);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.5, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals((-2335.277615257071), affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform2.uniformScale(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(0.0, affineTransform2.scaleX(), 0.01);
      assertEquals(0.0, affineTransform2.scaleY(), 0.01);
      assertEquals((-2335.277615257071), affineTransform2.ty(), 0.01);
      assertEquals(0.5, affineTransform2.tx(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(0.5, affineTransform0.tx, 0.01);
      assertEquals((-2335.277615257071), affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform2.m00, 0.01);
      assertEquals(0.0, affineTransform2.m11, 0.01);
      assertEquals(0.5, affineTransform2.tx, 0.01);
      assertEquals((-2335.277615257071), affineTransform2.ty, 0.01);
      assertEquals(0.0, affineTransform2.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform2.m10, 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      assertEquals(0.0, vector0.y, 0.01);
      
      // Undeclared exception!
      affineTransform3.inverseTransform((IVector) vector0, vector0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      Vector vector0 = affineTransform0.translation();
      assertNotNull(vector0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(0.0, vector0.y(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, vector0.y, 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      
      // Undeclared exception!
      try { 
        affineTransform0.inverseTransform((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(21282.673468972855, 2334.8477318719492, 1356.851, 1356.851);
      assertNotNull(affineTransform0);
      assertEquals(1356.851, affineTransform0.ty(), 0.01);
      assertEquals(21282.67346897285, affineTransform0.uniformScale(), 0.01);
      assertEquals(21282.67346897285, affineTransform0.scaleY(), 0.01);
      assertEquals(21282.67346897285, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1356.851, affineTransform0.tx(), 0.01);
      assertEquals((-12784.73775384791), affineTransform0.m01, 0.01);
      assertEquals(12784.73775384791, affineTransform0.m10, 0.01);
      assertEquals((-17014.778004789157), affineTransform0.m00, 0.01);
      assertEquals((-17014.778004789157), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1356.851, affineTransform0.tx, 0.01);
      assertEquals(1356.851, affineTransform0.ty, 0.01);
      
      Vector vector0 = affineTransform0.scale();
      assertNotNull(vector0);
      assertEquals(1356.851, affineTransform0.ty(), 0.01);
      assertEquals(21282.67346897285, affineTransform0.uniformScale(), 0.01);
      assertEquals(21282.67346897285, affineTransform0.scaleY(), 0.01);
      assertEquals(21282.67346897285, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1356.851, affineTransform0.tx(), 0.01);
      assertEquals(21282.67346897285, vector0.y(), 0.01);
      assertEquals(21282.67346897285, vector0.x(), 0.01);
      assertEquals((-12784.73775384791), affineTransform0.m01, 0.01);
      assertEquals(12784.73775384791, affineTransform0.m10, 0.01);
      assertEquals((-17014.778004789157), affineTransform0.m00, 0.01);
      assertEquals((-17014.778004789157), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1356.851, affineTransform0.tx, 0.01);
      assertEquals(1356.851, affineTransform0.ty, 0.01);
      assertEquals(21282.67346897285, vector0.y, 0.01);
      assertEquals(21282.67346897285, vector0.x, 0.01);
      
      MathUtil.TO_STRING_DECIMAL_PLACES = 2146564288;
      AffineTransform affineTransform1 = affineTransform0.scaleX(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(1356.851, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(21282.67346897285, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1356.851, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(1356.851, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1356.851, affineTransform1.ty(), 0.01);
      assertEquals(21282.67346897285, affineTransform1.scaleY(), 0.01);
      assertEquals(12784.73775384791, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals((-17014.778004789157), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertEquals(1356.851, affineTransform0.tx, 0.01);
      assertEquals(1356.851, affineTransform0.ty, 0.01);
      assertEquals(12784.73775384791, affineTransform1.m10, 0.01);
      assertEquals(1356.851, affineTransform1.ty, 0.01);
      assertEquals(1356.851, affineTransform1.tx, 0.01);
      assertEquals((-17014.778004789157), affineTransform1.m11, 0.01);
      assertEquals(-0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      Point point0 = new Point(vector0);
      assertNotNull(point0);
      assertEquals(1356.851, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(21282.67346897285, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1356.851, affineTransform0.tx(), 0.01);
      assertEquals(21282.67346897285, vector0.y(), 0.01);
      assertEquals(21282.67346897285, vector0.x(), 0.01);
      assertEquals(21282.67346897285, point0.y(), 0.01);
      assertEquals(21282.67346897285, point0.x(), 0.01);
      assertEquals(12784.73775384791, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals((-17014.778004789157), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertEquals(1356.851, affineTransform0.tx, 0.01);
      assertEquals(1356.851, affineTransform0.ty, 0.01);
      assertEquals(21282.67346897285, vector0.y, 0.01);
      assertEquals(21282.67346897285, vector0.x, 0.01);
      assertEquals(21282.67346897285, point0.y, 0.01);
      assertEquals(21282.67346897285, point0.x, 0.01);
      
      // Undeclared exception!
      affineTransform0.inverseTransform((IPoint) point0, point0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      // Undeclared exception!
      try { 
        affineTransform0.concatenate((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 1.0, 1.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.tx(), 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(-0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(1.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      AffineTransform affineTransform1 = null;
      try {
        affineTransform1 = new AffineTransform(affineTransform0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // affine [+0.0 +0.0 +0.0 +0.0 +1.0+0.0]
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      MathUtil.setToStringDecimalPlaces(2147483418);
      AffineTransform affineTransform1 = affineTransform0.uniformScale(0.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(0.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m11, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      
      AffineTransform affineTransform2 = new AffineTransform(affineTransform0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      AffineTransform affineTransform0 = null;
      try {
        affineTransform0 = new AffineTransform((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      affineTransform0.m10 = (-1549.537423);
      assertEquals(1549.5377456769102, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      
      String string0 = affineTransform0.toString();
      assertEquals("affine [+1.0 +0.0 -1549.537 +1.0 +0.0+0.0]", string0);
      assertNotNull(string0);
      assertEquals(1549.5377456769102, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals((-1549.537423), affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      affineTransform0.m11 = 3.4028234663852886E38;
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(3.4028234663852886E38, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.844674352395373E19, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      
      String string0 = affineTransform0.toString();
      assertEquals("affine [+1.0 +0.0 +0.0 +2147483647.214748364721474836472147483647 +0.0+0.0]", string0);
      assertNotNull(string0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(3.4028234663852886E38, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.844674352395373E19, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(3.4028234663852886E38, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0, 0.0, 0.0, 9.999999747378752E-6, 0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0031622776202254524, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.shearY(1.0);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0031622776202254524, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.00000000005, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform1.ty(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.tx(), 0.01);
      assertEquals(0.0031622776202254524, affineTransform1.uniformScale(), 0.01);
      assertEquals(1.00000000005, affineTransform1.scaleX(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9.999999747378752E-6, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(1.0, affineTransform1.m00, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      String string0 = affineTransform0.toString();
      assertEquals("affine [+1.0 +0.0 +0.0 +0.0 +0.0+0.0]", string0);
      assertNotNull(string0);
      assertSame(affineTransform0, affineTransform1);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0031622776202254524, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.00000000005, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(9.999999747378752E-6, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      AffineTransform affineTransform1 = affineTransform0.setTransform(4, 4, 4, 9.999999747378752E-6, 4, 9.999999747378752E-6);
      assertNotNull(affineTransform1);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(5.656854249492381, affineTransform0.scaleX(), 0.01);
      assertEquals((-3.9999949999970013), affineTransform0.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty(), 0.01);
      assertEquals(4.000000000012499, affineTransform0.scaleY(), 0.01);
      assertEquals(4.0, affineTransform0.tx(), 0.01);
      assertEquals(5.656854249492381, affineTransform1.scaleX(), 0.01);
      assertEquals((-3.9999949999970013), affineTransform1.uniformScale(), 0.01);
      assertEquals(4.000000000012499, affineTransform1.scaleY(), 0.01);
      assertEquals(4.0, affineTransform1.tx(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(4.0, affineTransform0.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m11, 0.01);
      assertEquals(4.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4.0, affineTransform0.m00, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty, 0.01);
      assertEquals(4.0, affineTransform0.tx, 0.01);
      assertEquals(4.0, affineTransform1.m01, 0.01);
      assertEquals(4.0, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4.0, affineTransform1.m00, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.m11, 0.01);
      assertEquals(4.0, affineTransform1.tx, 0.01);
      
      AffineTransform affineTransform2 = affineTransform0.set(affineTransform1);
      assertNotNull(affineTransform2);
      assertSame(affineTransform0, affineTransform2);
      assertSame(affineTransform0, affineTransform1);
      assertSame(affineTransform1, affineTransform2);
      assertSame(affineTransform1, affineTransform0);
      assertSame(affineTransform2, affineTransform0);
      assertSame(affineTransform2, affineTransform1);
      assertEquals(4, affineTransform0.generality());
      assertEquals(5.656854249492381, affineTransform0.scaleX(), 0.01);
      assertEquals((-3.9999949999970013), affineTransform0.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty(), 0.01);
      assertEquals(4.000000000012499, affineTransform0.scaleY(), 0.01);
      assertEquals(4.0, affineTransform0.tx(), 0.01);
      assertEquals(5.656854249492381, affineTransform1.scaleX(), 0.01);
      assertEquals((-3.9999949999970013), affineTransform1.uniformScale(), 0.01);
      assertEquals(4.000000000012499, affineTransform1.scaleY(), 0.01);
      assertEquals(4.0, affineTransform1.tx(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty(), 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(5.656854249492381, affineTransform2.scaleX(), 0.01);
      assertEquals(4.000000000012499, affineTransform2.scaleY(), 0.01);
      assertEquals(4.0, affineTransform2.tx(), 0.01);
      assertEquals((-3.9999949999970013), affineTransform2.uniformScale(), 0.01);
      assertEquals(4, affineTransform2.generality());
      assertEquals(9.999999747378752E-6, affineTransform2.ty(), 0.01);
      assertEquals(4.0, affineTransform0.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m11, 0.01);
      assertEquals(4.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4.0, affineTransform0.m00, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.ty, 0.01);
      assertEquals(4.0, affineTransform0.tx, 0.01);
      assertEquals(4.0, affineTransform1.m01, 0.01);
      assertEquals(4.0, affineTransform1.m10, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4.0, affineTransform1.m00, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.ty, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform1.m11, 0.01);
      assertEquals(4.0, affineTransform1.tx, 0.01);
      assertEquals(4.0, affineTransform2.m00, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform2.m11, 0.01);
      assertEquals(4.0, affineTransform2.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4.0, affineTransform2.m10, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform2.ty, 0.01);
      assertEquals(4.0, affineTransform2.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0, 0.0, 0.0, 9.999999747378752E-6, 0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0031622776202254524, affineTransform0.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      
      int int0 = affineTransform0.generality();
      assertEquals(4, int0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0031622776202254524, affineTransform0.uniformScale(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      
      affineTransform0.tx = 179.683460778;
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(179.683460778, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      
      String string0 = affineTransform0.toString();
      assertEquals("trans +179.683+0.0", string0);
      assertNotNull(string0);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(179.683460778, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(179.683460778, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      
      String string0 = affineTransform0.toString();
      assertEquals("ident", string0);
      assertNotNull(string0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0, 0.0, 1.0, 0.0, 4, 1.0);
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.ty(), 0.01);
      assertEquals(4.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(1.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(4.0, affineTransform0.tx, 0.01);
      
      // Undeclared exception!
      try { 
        affineTransform0.rotation();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // affine [+1.0 +0.0 +1.0 +0.0 +4.0+1.0]
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      
      affineTransform0.m00 = 0.0;
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      
      Vector vector0 = affineTransform0.scale();
      assertNotNull(vector0);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, vector0.y(), 0.01);
      assertEquals(0.0, vector0.x(), 0.01);
      assertEquals(0.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, vector0.y, 0.01);
      assertEquals(0.0, vector0.x, 0.01);
      
      // Undeclared exception!
      try { 
        affineTransform0.inverseTransform((IVector) vector0, vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // affine [+0.0 +0.0 +0.0 +1.0 +0.0+0.0]
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.0, 0.0, 0.0, 9.999999747378752E-6, 0.0, 0.0);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.scaleY(), 0.01);
      assertEquals(0.0031622776202254524, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(9.999999747378752E-6, affineTransform0.m11, 0.01);
      
      Point point0 = new Point(0.0, 887.9677666524391);
      assertNotNull(point0);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(887.9677666524391, point0.y(), 0.01);
      assertEquals(887.9677666524391, point0.y, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      
      // Undeclared exception!
      try { 
        affineTransform0.inverseTransform((IPoint) point0, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      affineTransform0.transform((double[]) null, (-895), (double[]) null, (-895), (-895));
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      
      IPoint[] iPointArray0 = new IPoint[0];
      // Undeclared exception!
      try { 
        affineTransform0.transform(iPointArray0, 4, (Point[]) null, 4, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 0
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      assertNotNull(affineTransform0);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      
      IPoint[] iPointArray0 = new IPoint[0];
      Point[] pointArray0 = new Point[0];
      affineTransform0.transform(iPointArray0, 0, pointArray0, 0, 0);
      assertEquals(0, iPointArray0.length);
      assertEquals(0, pointArray0.length);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1.0, affineTransform0.scaleX(), 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
      assertEquals(1.0, affineTransform0.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx(), 0.01);
      assertEquals(0.0, affineTransform0.m01, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals(1.0, affineTransform0.m00, 0.01);
      assertEquals(1.0, affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.lerp(affineTransform0, 1.0);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.preConcatenate(identityTransform0);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertNotSame(affineTransform1, affineTransform0);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.concatenate(identityTransform0);
      assertEquals(4, affineTransform1.generality());
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-461.87), (-461.87), (-461.87), (-461.87), (-461.87), (-461.87));
      // Undeclared exception!
      try { 
        affineTransform0.invert();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // affine [-461.87 -461.87 -461.87 -461.87 -461.87-461.87]
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1784.24821), (-80.619585828), 0.0, 0.0, (-1.0), (-1.0));
      affineTransform0.rotate(9.999999747378752E-6);
      double double0 = affineTransform0.uniformScale();
      assertEquals(0.017842481648963612, affineTransform0.m10, 0.01);
      assertEquals((-1.4901161193847656E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(3.141592653589793, 3.141592653589793, 0.0, (-1.0), (-1.0), (-1.0));
      affineTransform0.setRotation(4.442882938158366);
      double double0 = affineTransform0.uniformScale();
      assertEquals(0.9639025328498773, affineTransform0.m10, 0.01);
      assertEquals(2.1078147305108117, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(465.68, 465.68, 465.68, 465.68, 465.68, 465.68);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        affineTransform0.get(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = affineTransform0.translateY(914.1736649457);
      String string0 = affineTransform1.toString();
      assertEquals(914.1736649457, affineTransform0.ty, 0.01);
      assertEquals("trans +0.0+914.173", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(21282.673468972855, 2334.8477318719492, 1356.851, 1356.851);
      affineTransform0.translate((-933.0538096018578), 616.00051498);
      assertEquals(2.375246532815298E7, affineTransform0.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(21282.673468972855, 2334.8477318719492, 1356.851, 1356.851);
      affineTransform0.setUniformScale(1167.0960122517085);
      assertEquals(1167.0960122517088, affineTransform0.scaleX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        affineTransform0.transform((IPoint) null, point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(21282.673468972855, 2334.8477318719492, 1356.851, 1356.851);
      AffineTransform affineTransform1 = affineTransform0.scaleX((-570.0886471473675));
      affineTransform1.translate((-933.0538096018578), 616.00051498);
      assertEquals(9699931.774263036, affineTransform0.m00, 0.01);
      assertEquals((-9.042681532962978E9), affineTransform0.tx(), 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.shearX(4);
      assertEquals(4.0, affineTransform0.m10, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.setRotation(2088.1105598884287);
      assertEquals((-0.49882417227612913), affineTransform0.m00, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      // Undeclared exception!
      try { 
        affineTransform0.transformPoint((IVector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = affineTransform0.setTranslation(0.0, 0.0);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform0.tx, 0.01);
      assertEquals(0.0, affineTransform0.ty, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = affineTransform0.set(affineTransform0);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform1 = (AffineTransform)affineTransform0.lerp(identityTransform0, 0);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(4, affineTransform1.generality());
  }
}
