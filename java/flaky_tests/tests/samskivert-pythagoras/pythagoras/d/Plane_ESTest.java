/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:53:38 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.DoubleBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.IRay3;
import pythagoras.d.IVector3;
import pythagoras.d.Plane;
import pythagoras.d.Ray3;
import pythagoras.d.Vector3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Plane_ESTest extends Plane_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = plane0._normal;
      Plane plane1 = plane0.XZ_PLANE.fromPoints(vector3_0, vector3_0, vector3_0);
      Plane plane2 = plane1.fromPointNormal(vector3_0, vector3_0);
      plane1.negateLocal();
      boolean boolean0 = plane2.equals(plane0);
      assertEquals(1.0, plane2.constant, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Plane plane0 = Plane.XZ_PLANE;
      boolean boolean0 = plane0.equals(plane0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Plane plane0 = Plane.XZ_PLANE;
      Vector3 vector3_0 = plane0._v2;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      Plane plane1 = plane0.fromPoints(vector3_0, vector3_0, ray3_0.origin);
      plane1.hashCode();
      assertEquals(Double.NaN, plane0.constant, 0.01);
      assertEquals(0.0, vector3_0.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Ray3 ray3_0 = new Ray3();
      Plane plane1 = plane0.YZ_PLANE.set((IVector3) vector3_0, 901.417552);
      assertEquals(901.417552, plane1.constant, 0.01);
      
      plane1.YZ_PLANE.set((IVector3) ray3_0.origin, 9.999999747378752E-6);
      double double0 = plane1.distance((IRay3) ray3_0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      plane0.constant();
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = new Vector3((-1843.1529909), 0.0, (-3.4028234663852886E38));
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_1);
      boolean boolean0 = plane0.intersection(ray3_0, vector3_1);
      assertEquals((-3.4028234663852886E38), vector3_1.y, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3 vector3_0 = new Vector3();
      Plane plane0 = new Plane(vector3_0, 0.0);
      double[] doubleArray0 = new double[9];
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      plane0.get(doubleBuffer0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Plane plane0 = Plane.XZ_PLANE;
      double[] doubleArray0 = new double[8];
      Plane plane1 = plane0.YZ_PLANE.set(doubleArray0);
      assertEquals(0.0, plane1.constant, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Plane plane0 = new Plane((-1843.1529909), (-1843.1529909), (-1843.1529909), (-1843.1529909));
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (-1843.1529909);
      plane0.set(doubleArray0);
      assertEquals((-1843.1529909), plane0.constant, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Plane plane0 = new Plane(2909.0, 2909.0, (-1752.0), (-1752.0));
      Plane plane1 = Plane.YZ_PLANE;
      Plane plane2 = plane0.XY_PLANE.set(plane1);
      assertTrue(plane2.equals((Object)plane1));
      assertEquals(0.0, plane2.constant, 0.01);
      assertEquals((-1752.0), plane0.constant, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Plane plane0 = Plane.YZ_PLANE;
      Ray3 ray3_0 = new Ray3();
      Plane plane1 = plane0.XZ_PLANE.set((IVector3) ray3_0.direction, 0.0);
      assertEquals(0.0, plane1.constant, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Plane plane0 = new Plane(doubleArray0);
      Plane plane1 = plane0.set((-2418.3), (-183.14742813722194), (-2418.3), 0.0);
      assertEquals(0.0, plane1.constant, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      plane0.negateLocal();
      plane0.normal();
      assertEquals(-0.0, plane0.constant, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = plane0._normal;
      Plane plane1 = plane0.fromPoints(vector3_0, vector3_0, vector3_0);
      plane1.normal();
      assertEquals(Double.NaN, vector3_0.z, 0.01);
      assertEquals(Double.NaN, plane0.constant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-183.14742813722194);
      Plane plane0 = new Plane(doubleArray0);
      Vector3 vector3_0 = (Vector3)plane0.normal();
      assertEquals(0.0, vector3_0.z, 0.01);
      assertEquals(0.0, vector3_0.y, 0.01);
      assertEquals(183.14742813722194, vector3_0.length(), 0.01);
      assertEquals((-183.14742813722194), vector3_0.x, 0.01);
      assertEquals(0.0, plane0.constant, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = plane0._v1;
      Plane plane1 = plane0.fromPointNormal(vector3_0, vector3_0);
      plane1.normal();
      assertEquals(-0.0, plane0.constant, 0.01);
      assertEquals(-0.0, plane0.constant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Plane plane0 = new Plane(vector3_0, 1695.974);
      plane0.negateLocal();
      assertEquals((-1695.974), plane0.constant, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Plane plane0 = new Plane(0.0, 215.644, 0.0, 478.19592469);
      Plane plane1 = Plane.XY_PLANE;
      plane0.set(plane1);
      Plane plane2 = Plane.XY_PLANE;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 215.644;
      Plane plane3 = plane2.XZ_PLANE.set(doubleArray0);
      plane3.YZ_PLANE.constant = 0.0;
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Plane plane4 = plane2.XY_PLANE.fromPoints(vector3_0, vector3_0, vector3_0);
      plane4.XZ_PLANE.negate();
      plane4.XZ_PLANE.constant = 215.644;
      plane0.negate(plane2);
      assertEquals(-0.0, plane2.constant, 0.01);
      assertEquals(0.0, plane0.constant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      plane0.fromPoints(vector3_0, vector3_0, vector3_0);
      plane0.negate(plane0);
      assertEquals(Double.NaN, plane0.constant, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Plane plane0 = new Plane(2909.0, 2909.0, (-1752.0), (-1752.0));
      Plane plane1 = Plane.YZ_PLANE;
      Vector3 vector3_0 = plane1._v2;
      plane1.XZ_PLANE.fromPointNormal(vector3_0, vector3_0);
      plane1.negate(plane1);
      assertEquals(-0.0, plane1.constant, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = plane0._normal;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_X;
      Vector3 vector3_2 = plane0._v2;
      Plane plane1 = plane0.fromPoints(vector3_0, vector3_1, vector3_2);
      plane1.set(plane0);
      assertEquals(1.0, vector3_2.lengthSquared(), 0.01);
      assertEquals(1.0, vector3_0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Vector3 vector3_1 = (Vector3)Vector3.UNIT_XYZ;
      plane0.fromPointNormal(vector3_0, vector3_1);
      assertEquals(1.0208470399155866E39, plane0.constant, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Plane plane0 = new Plane(2909.0, 2909.0, (-1752.0), (-1752.0));
      Vector3 vector3_0 = plane0._v2;
      Plane plane1 = plane0.XZ_PLANE.fromPointNormal(vector3_0, vector3_0);
      double double0 = plane1.distance((IVector3) vector3_0);
      assertEquals((-1752.0), plane0.constant, 0.01);
      assertEquals(-0.0, plane1.constant, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      double double0 = plane0.distance((IVector3) vector3_0);
      assertEquals((-3.4028234663852886E38), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = plane0._normal;
      plane0.fromPointNormal(vector3_0, vector3_0);
      Plane plane1 = plane0.negateLocal();
      double double0 = plane1.constant();
      assertEquals(1.0, plane0.constant, 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      plane0.set((-3765.9), (-3765.9), (-3765.9), (-3765.9));
      double double0 = plane0.constant();
      assertEquals((-3765.9), plane0.constant, 0.01);
      assertEquals((-3765.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Plane plane0 = Plane.YZ_PLANE;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        plane0.set(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.set((IVector3) null, (-316.48591));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Plane plane0 = Plane.XZ_PLANE;
      // Undeclared exception!
      try { 
        plane0.get((DoubleBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.fromPoints((IVector3) null, (IVector3) null, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.fromPointNormal((IVector3) null, (IVector3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Plane plane0 = Plane.YZ_PLANE;
      // Undeclared exception!
      try { 
        plane0.distance((IRay3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Plane plane0 = null;
      try {
        plane0 = new Plane(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Plane plane0 = null;
      try {
        plane0 = new Plane((Plane) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Plane plane0 = null;
      try {
        plane0 = new Plane((IVector3) null, (-678.6664841696));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      double double0 = plane0.distance((IRay3) ray3_0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.negate((Plane) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Plane plane0 = Plane.YZ_PLANE;
      // Undeclared exception!
      try { 
        plane0.set((Plane) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Plane plane0 = new Plane();
      // Undeclared exception!
      try { 
        plane0.set((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3 vector3_0 = (Vector3)Vector3.UNIT_XYZ;
      Plane plane0 = new Plane(vector3_0, 1695.974);
      double double0 = plane0.distance((IVector3) vector3_0);
      assertEquals(1698.974, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      plane0.set((-1557.5457880030942), 1.0, 1.0, 1.0);
      assertEquals(1.0, plane0.constant, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Plane plane1 = new Plane(3011.94, 0.0, 0.0, 0.0);
      boolean boolean0 = plane1.equals(plane0);
      assertEquals(0.0, plane1.constant, 0.01);
      assertFalse(plane0.equals((Object)plane1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Plane plane0 = Plane.XZ_PLANE;
      Object object0 = new Object();
      boolean boolean0 = plane0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Plane plane0 = Plane.XZ_PLANE;
      Vector3 vector3_0 = plane0._normal;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      boolean boolean0 = plane0.intersection(ray3_0, ray3_0.direction);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Ray3 ray3_0 = new Ray3();
      Plane plane1 = plane0.fromPoints(ray3_0.origin, vector3_0, vector3_0);
      boolean boolean0 = plane1.intersection(ray3_0, vector3_0);
      assertEquals(Double.NaN, plane0.constant, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      plane0.constant();
      Vector3 vector3_0 = (Vector3)Vector3.MIN_VALUE;
      Plane plane1 = plane0.negate();
      Plane plane2 = plane1.negate();
      assertFalse(plane2.equals((Object)plane1));
      assertEquals(-0.0, plane1.constant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Plane plane0 = new Plane();
      double[] doubleArray0 = new double[0];
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      // Undeclared exception!
      try { 
        plane0.get(doubleBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Plane plane0 = null;
      try {
        plane0 = new Plane((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Plane", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Ray3 ray3_0 = new Ray3();
      plane0.fromPoints(ray3_0.direction, ray3_0.direction, ray3_0.direction);
      boolean boolean0 = plane0.equals(plane0);
      assertEquals(Double.NaN, plane0.constant, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Plane plane0 = Plane.XY_PLANE;
      Plane plane1 = new Plane(plane0);
      assertEquals(0.0, plane1.constant, 0.01);
      assertTrue(plane1.equals((Object)plane0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Plane plane0 = Plane.XZ_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      Ray3 ray3_0 = new Ray3(vector3_0, vector3_0);
      double double0 = plane0.distance((IRay3) ray3_0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Plane plane0 = Plane.XZ_PLANE;
      Vector3 vector3_0 = (Vector3)Vector3.NORMAL_XYZ;
      plane0.set((IVector3) vector3_0, (-4362.0219105935));
      assertEquals((-4362.0219105935), plane0.constant, 0.01);
  }
}
