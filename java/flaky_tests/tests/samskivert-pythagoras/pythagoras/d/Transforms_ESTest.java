/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:18:31 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AffineTransform;
import pythagoras.d.IShape;
import pythagoras.d.IdentityTransform;
import pythagoras.d.Path;
import pythagoras.d.QuadCurve;
import pythagoras.d.RoundRectangle;
import pythagoras.d.Transform;
import pythagoras.d.Transforms;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Transforms_ESTest extends Transforms_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply(affineTransform1, affineTransform0, identityTransform0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = (AffineTransform)Transforms.multiply(affineTransform0, affineTransform0, (Transform) affineTransform0);
      assertEquals(1.0, affineTransform1.uniformScale(), 0.01);
      assertEquals(0.0, affineTransform1.m10, 0.01);
      assertEquals(0.0, affineTransform1.m01, 0.01);
      assertEquals(0.0, affineTransform1.ty, 0.01);
      assertEquals(0.0, affineTransform1.tx, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-1.0), (-1.0), 0.0);
      Transforms.multiply(affineTransform0, affineTransform0, (Transform) affineTransform0);
      assertEquals((-0.45969769413186023), affineTransform0.tx, 0.01);
      assertEquals(1.0, affineTransform0.scaleY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-1.0), (-1.0), (-1.0));
      Transforms.multiply(affineTransform0, affineTransform0, (Transform) affineTransform0);
      assertEquals((-0.9092974268256818), affineTransform0.m01, 0.01);
      assertEquals(0.38177329067603627, affineTransform0.tx(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 1375.282845, 0.0, 4.71238898038469);
      AffineTransform affineTransform1 = (AffineTransform)Transforms.multiply(affineTransform0, affineTransform0, (Transform) affineTransform0);
      assertEquals(0.0, affineTransform1.tx, 0.01);
      assertEquals(0.0, affineTransform1.scaleY(), 0.01);
      assertEquals(0.0, affineTransform1.m00, 0.01);
      assertEquals(4.71238898038469, affineTransform1.ty, 0.01);
      assertEquals(-0.0, affineTransform1.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-2840.0), (-902.926662797), 308.64299369152, (-1.0));
      Transforms.multiply(affineTransform0, 7444351.377986392, 0.0, 308.64299369152, 308.64299369152, 0.0, 1085382.3261703085, (Transform) affineTransform0);
      assertEquals(5.867587613804995E9, affineTransform0.m00, 0.01);
      assertEquals(1.3613192424807745E8, affineTransform0.uniformScale(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1521.1419246996), (-1.0), (-1.0), (-1.0));
      Transforms.multiply(affineTransform0, (-1.0), (-1323.669), 1086612.4341440685, (double) 4, 0.0, 0.0, (Transform) affineTransform0);
      assertEquals(1086612.4341440685, affineTransform0.m01, 0.01);
      assertEquals(1.652891729487625E9, affineTransform0.scaleY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(identityTransform0);
      Transforms.multiply(713.2961540608864, (double) 0, 1.0, 1.0, 0.0, 1.0, affineTransform0, (Transform) affineTransform0);
      assertEquals(1.0, affineTransform0.ty, 0.01);
      assertEquals(1.4142135623730951, affineTransform0.scaleY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Transforms.multiply((double) 4, 0.0, (double) 4, (-3597.487), 0.0, 0.0, affineTransform0, (Transform) affineTransform0);
      assertEquals(4.0, affineTransform0.m00, 0.01);
      assertEquals(3597.489223773853, affineTransform0.scaleY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-1.0), 54.0, 615.471201, (-1.0), 0.0);
      Transforms.multiply(1904.777, 1904.777, (-3135.67129), (-3135.67129), 0.0, (-1.0), affineTransform0, (Transform) affineTransform0);
      assertEquals((-1827057.4167975192), affineTransform0.m10, 0.01);
      assertEquals((-1905.777), affineTransform0.ty(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0), 0.0, 0.0, 0.0, 2756.2220242);
      Transforms.multiply(0.0, 0.0, 2756.2220242, 0.0, 1.0, (-2385.4021323173893), affineTransform0, (Transform) affineTransform0);
      assertEquals((-2385.4021323173893), affineTransform0.ty, 0.01);
      assertEquals(0.0, affineTransform0.uniformScale(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Transforms.multiply((-3574.6457484), (-3574.6457484), (-1776.605022), (-107.8346), 5.0, 2216.4894546869, 1773.54, (-3574.6457484), 2216.4894546869, (-307.4931762825349), (-107.8346), (-864.534857252808), (Transform) affineTransform0);
      assertEquals((-7890006.201902804), affineTransform0.m11, 0.01);
      assertEquals(5954316.806454843, affineTransform0.scaleX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1521.1419246996), (-1.0), (-1.0), (-1.0));
      Transforms.multiply(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1437.8660058796, (-1.0), (-1521.1419246996), 894.3278068695461, (-1.0), (-1.0), (Transform) affineTransform0);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.ty(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(305.0397582407703, 1413.2, 918.8612791275859, 90.0, 918.8612791275859, 0.0);
      Transforms.multiply((-3906.77673082), (double) 4, (-211.381), 3217.4, 0.0, (-1868.0), (-3.0), 0.0, (-3906.77673082), 0.0, 4.0, 5965.327790282548, (Transform) affineTransform0);
      assertEquals(11720.33019246, affineTransform0.m00, 0.01);
      assertEquals((-1276584.0605609955), affineTransform0.tx(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-697.0999), 0.0, (-974.76626), 0.0, 3.0, 9.999999747378752E-6);
      Transforms.multiply(877.07358462931, 0.5, 0.0, 0.0, (-974.76626), (-1617.787), (-974.76626), (-974.76626), (-3404.0), (-697.0999), 877.07358462931, 0.0, (Transform) affineTransform0);
      assertEquals((-2985558.482078171), affineTransform0.m10, 0.01);
      assertEquals(768283.3065945074, affineTransform0.tx(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply((AffineTransform) null, (AffineTransform) null, identityTransform0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Transforms", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply(affineTransform0, 0.0, (double) 4, 1.0, (double) 4, 0.0, 1.0, identityTransform0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply((AffineTransform) null, 0.0, 0.0, 2.0943951023931953, 0.0, 0.0, 0.0, identityTransform0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Transforms", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Transforms.multiply(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (AffineTransform) null, (IdentityTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Transforms", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, identityTransform0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Transforms.multiply(0.36822678839492423, 0.36822678839492423, 0.36822678839492423, 0.36822678839492423, 0.36822678839492423, 0.36822678839492423, 0.36822678839492423, 0.36822678839492423, 0.36822678839492423, 0.36822678839492423, 0.36822678839492423, 0.36822678839492423, (IdentityTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Transforms", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, (-491.746045), 0.6666666865348816, 0.0, 2265.28187248304);
      QuadCurve quadCurve0 = new QuadCurve(1753.025, (-491.746045), 473.93, 2538.890347188, 2265.28187248304, (-491.746045));
      IShape iShape0 = Transforms.createTransformedShape(affineTransform0, quadCurve0);
      Path path0 = (Path)Transforms.createTransformedShape(affineTransform0, iShape0);
      assertEquals(0, Path.WIND_EVEN_ODD);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IShape iShape0 = Transforms.createTransformedShape((Transform) null, (IShape) null);
      assertNull(iShape0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-14.0), (-14.0), (-14.0), (-14.0));
      RoundRectangle roundRectangle0 = new RoundRectangle(4, 13.868502979728184, 13.868502979728184, (-1.9143210549096705), (-13.868502979728184), 4);
      // Undeclared exception!
      try { 
        Transforms.createTransformedShape(affineTransform0, roundRectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // First segment must be a SEG_MOVETO
         //
         verifyException("pythagoras.d.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Transforms.multiply(affineTransform0, (-1118.9461156954792), 0.0, 0.0, 0.0, 0.0, 0.0, (Transform) affineTransform0);
      assertEquals(0.0, affineTransform0.m11, 0.01);
      assertEquals(0.0, affineTransform0.scaleY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transforms transforms0 = new Transforms();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-697.0999), 0.0, (-974.76626), 0.0, 3.0, 9.999999747378752E-6);
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        Transforms.multiply((-974.76626), (-1617.787), 877.07358462931, 877.07358462931, (-974.76626), 0.0, affineTransform0, identityTransform0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractTransform", e);
      }
  }
}
