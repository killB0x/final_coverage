/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:12:21 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AbstractQuadCurve;
import pythagoras.d.AffineTransform;
import pythagoras.d.FlatteningPathIterator;
import pythagoras.d.IRectangle;
import pythagoras.d.IdentityTransform;
import pythagoras.d.PathIterator;
import pythagoras.d.Point;
import pythagoras.d.QuadCurve;
import pythagoras.d.Rectangle;
import pythagoras.d.Transform;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractQuadCurve_ESTest extends AbstractQuadCurve_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      
      AffineTransform affineTransform0 = new AffineTransform((-1980.888389302553), 0.0, (-1114.03764), (-1753.3));
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m00, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1753.3), affineTransform0.ty, 0.01);
      assertEquals((-1114.03764), affineTransform0.tx, 0.01);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertNotNull(affineTransform0);
      assertEquals(1980.888389302553, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1753.3), affineTransform0.ty(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.scaleY(), 0.01);
      assertEquals((-1114.03764), affineTransform0.tx(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.scaleX(), 0.01);
      
      AbstractQuadCurve.Iterator abstractQuadCurve_Iterator0 = new AbstractQuadCurve.Iterator(quadCurve0, affineTransform0);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m00, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1753.3), affineTransform0.ty, 0.01);
      assertEquals((-1114.03764), affineTransform0.tx, 0.01);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertNotNull(abstractQuadCurve_Iterator0);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1980.888389302553, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1753.3), affineTransform0.ty(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.scaleY(), 0.01);
      assertEquals((-1114.03764), affineTransform0.tx(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.scaleX(), 0.01);
      assertEquals(1, abstractQuadCurve_Iterator0.windingRule());
      assertFalse(abstractQuadCurve_Iterator0.isDone());
      
      double[] doubleArray0 = new double[7];
      abstractQuadCurve_Iterator0.next();
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m00, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1753.3), affineTransform0.ty, 0.01);
      assertEquals((-1114.03764), affineTransform0.tx, 0.01);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1980.888389302553, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1753.3), affineTransform0.ty(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.scaleY(), 0.01);
      assertEquals((-1114.03764), affineTransform0.tx(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.scaleX(), 0.01);
      assertEquals(1, abstractQuadCurve_Iterator0.windingRule());
      assertFalse(abstractQuadCurve_Iterator0.isDone());
      
      int int0 = abstractQuadCurve_Iterator0.currentSegment(doubleArray0);
      assertArrayEquals(new double[] {(-2662666.5084577557), (-2663305.7708177553), (-2662666.5084577557), 3596133.0376527905, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m00, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m11, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals((-1753.3), affineTransform0.ty, 0.01);
      assertEquals((-1114.03764), affineTransform0.tx, 0.01);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1980.888389302553, affineTransform0.uniformScale(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals((-1753.3), affineTransform0.ty(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.scaleY(), 0.01);
      assertEquals((-1114.03764), affineTransform0.tx(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.scaleX(), 0.01);
      assertEquals(1, abstractQuadCurve_Iterator0.windingRule());
      assertFalse(abstractQuadCurve_Iterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      
      QuadCurve quadCurve1 = new QuadCurve(2.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(2.0, quadCurve1.x1, 0.01);
      assertEquals(0.0, quadCurve1.y2, 0.01);
      assertEquals(0.0, quadCurve1.y1, 0.01);
      assertEquals(0.0, quadCurve1.x2, 0.01);
      assertEquals(0.0, quadCurve1.ctrly, 0.01);
      assertEquals(0.0, quadCurve1.ctrlx, 0.01);
      assertNotNull(quadCurve1);
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      assertEquals(0.0, quadCurve1.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve1.x2(), 0.01);
      assertEquals(2.0, quadCurve1.x1(), 0.01);
      assertEquals(0.0, quadCurve1.y2(), 0.01);
      assertEquals(0.0, quadCurve1.y1(), 0.01);
      assertTrue(quadCurve1.isEmpty());
      assertEquals(0.0, quadCurve1.ctrlX(), 0.01);
      
      quadCurve0.subdivide(quadCurve0, quadCurve1);
      assertNotSame(quadCurve0, quadCurve1);
      assertNotSame(quadCurve1, quadCurve0);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve1.x1, 0.01);
      assertEquals(0.0, quadCurve1.y2, 0.01);
      assertEquals(0.0, quadCurve1.y1, 0.01);
      assertEquals(0.0, quadCurve1.x2, 0.01);
      assertEquals(0.0, quadCurve1.ctrly, 0.01);
      assertEquals(0.0, quadCurve1.ctrlx, 0.01);
      assertFalse(quadCurve0.equals((Object)quadCurve1));
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, quadCurve1.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve1.x2(), 0.01);
      assertEquals(0.0, quadCurve1.x1(), 0.01);
      assertEquals(0.0, quadCurve1.y2(), 0.01);
      assertEquals(0.0, quadCurve1.y1(), 0.01);
      assertTrue(quadCurve1.isEmpty());
      assertEquals(0.0, quadCurve1.ctrlX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) null);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertNotNull(pathIterator0);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertFalse(pathIterator0.isDone());
      assertEquals(1, pathIterator0.windingRule());
      
      boolean boolean0 = pathIterator0.isDone();
      assertFalse(boolean0);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertFalse(pathIterator0.isDone());
      assertEquals(1, pathIterator0.windingRule());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      
      IdentityTransform identityTransform0 = new IdentityTransform();
      assertEquals(0, IdentityTransform.GENERALITY);
      assertNotNull(identityTransform0);
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)quadCurve0.pathIterator((Transform) identityTransform0, (double) 0);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0, IdentityTransform.GENERALITY);
      assertNotNull(flatteningPathIterator0);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
      assertEquals(1.0, identityTransform0.scaleY(), 0.01);
      assertEquals(0.0, identityTransform0.ty(), 0.01);
      assertEquals("ident", identityTransform0.toString());
      assertEquals(0.0, identityTransform0.tx(), 0.01);
      assertEquals(0, identityTransform0.generality());
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
      assertEquals(0.0, identityTransform0.rotation(), 0.01);
      assertFalse(flatteningPathIterator0.isDone());
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertEquals(0.0, flatteningPathIterator0.flatness(), 0.01);
      assertEquals(1, flatteningPathIterator0.windingRule());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      
      Point point0 = quadCurve0.p2();
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertNotNull(point0);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.3));
      assertEquals((-1816.3), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertNotNull(quadCurve0);
      assertEquals((-1816.3), quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      
      quadCurve0.setCurve(0.0, 1343.6155642039257, (-1816.3), 0.0, 0.0, (-1816.3));
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals((-1816.3), quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals((-1816.3), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals((-1816.3), quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals((-1816.3), quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      
      Point point0 = quadCurve0.p2();
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals((-1816.3), quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals((-1816.3), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.3), point0.y, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertNotNull(point0);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals((-1816.3), quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals((-1816.3), quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals((-1816.3), point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(561.3164542117157, 561.3164542117157, (-127.68), 561.3164542117157, (-2129.57963509), 4602.2244926);
      assertEquals(561.3164542117157, quadCurve0.x1, 0.01);
      assertEquals((-2129.57963509), quadCurve0.x2, 0.01);
      assertEquals(561.3164542117157, quadCurve0.y1, 0.01);
      assertEquals(561.3164542117157, quadCurve0.ctrly, 0.01);
      assertEquals((-127.68), quadCurve0.ctrlx, 0.01);
      assertEquals(4602.2244926, quadCurve0.y2, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(4602.2244926, quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(561.3164542117157, quadCurve0.y1(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.ctrlY(), 0.01);
      assertEquals((-2129.57963509), quadCurve0.x2(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.x1(), 0.01);
      assertEquals((-127.68), quadCurve0.ctrlX(), 0.01);
      
      Point point0 = quadCurve0.p2();
      assertEquals(561.3164542117157, quadCurve0.x1, 0.01);
      assertEquals((-2129.57963509), quadCurve0.x2, 0.01);
      assertEquals(561.3164542117157, quadCurve0.y1, 0.01);
      assertEquals(561.3164542117157, quadCurve0.ctrly, 0.01);
      assertEquals((-127.68), quadCurve0.ctrlx, 0.01);
      assertEquals(4602.2244926, quadCurve0.y2, 0.01);
      assertEquals(4602.2244926, point0.y, 0.01);
      assertEquals((-2129.57963509), point0.x, 0.01);
      assertNotNull(point0);
      assertEquals(4602.2244926, quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(561.3164542117157, quadCurve0.y1(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.ctrlY(), 0.01);
      assertEquals((-2129.57963509), quadCurve0.x2(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.x1(), 0.01);
      assertEquals((-127.68), quadCurve0.ctrlX(), 0.01);
      assertEquals(4602.2244926, point0.y(), 0.01);
      assertEquals((-2129.57963509), point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      
      Point point0 = quadCurve0.p1();
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertNotNull(point0);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-2686.47065827288), (-2471.86), 9.999999747378752E-6, 9.999999747378752E-6, (-805.0), (-3413.9529259005103));
      assertEquals((-2686.47065827288), quadCurve0.x1, 0.01);
      assertEquals((-3413.9529259005103), quadCurve0.y2, 0.01);
      assertEquals((-2471.86), quadCurve0.y1, 0.01);
      assertEquals(9.999999747378752E-6, quadCurve0.ctrly, 0.01);
      assertEquals(9.999999747378752E-6, quadCurve0.ctrlx, 0.01);
      assertEquals((-805.0), quadCurve0.x2, 0.01);
      assertNotNull(quadCurve0);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(9.999999747378752E-6, quadCurve0.ctrlY(), 0.01);
      assertEquals(9.999999747378752E-6, quadCurve0.ctrlX(), 0.01);
      assertEquals((-3413.9529259005103), quadCurve0.y2(), 0.01);
      assertEquals((-805.0), quadCurve0.x2(), 0.01);
      assertEquals((-2471.86), quadCurve0.y1(), 0.01);
      assertEquals((-2686.47065827288), quadCurve0.x1(), 0.01);
      
      Point point0 = quadCurve0.p1();
      assertEquals((-2686.47065827288), quadCurve0.x1, 0.01);
      assertEquals((-3413.9529259005103), quadCurve0.y2, 0.01);
      assertEquals((-2471.86), quadCurve0.y1, 0.01);
      assertEquals(9.999999747378752E-6, quadCurve0.ctrly, 0.01);
      assertEquals(9.999999747378752E-6, quadCurve0.ctrlx, 0.01);
      assertEquals((-805.0), quadCurve0.x2, 0.01);
      assertEquals((-2686.47065827288), point0.x, 0.01);
      assertEquals((-2471.86), point0.y, 0.01);
      assertNotNull(point0);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(9.999999747378752E-6, quadCurve0.ctrlY(), 0.01);
      assertEquals(9.999999747378752E-6, quadCurve0.ctrlX(), 0.01);
      assertEquals((-3413.9529259005103), quadCurve0.y2(), 0.01);
      assertEquals((-805.0), quadCurve0.x2(), 0.01);
      assertEquals((-2471.86), quadCurve0.y1(), 0.01);
      assertEquals((-2686.47065827288), quadCurve0.x1(), 0.01);
      assertEquals((-2686.47065827288), point0.x(), 0.01);
      assertEquals((-2471.86), point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(561.3164542117157, 561.3164542117157, (-127.68), 561.3164542117157, (-2129.57963509), 4602.2244926);
      assertEquals(4602.2244926, quadCurve0.y2, 0.01);
      assertEquals(561.3164542117157, quadCurve0.x1, 0.01);
      assertEquals((-2129.57963509), quadCurve0.x2, 0.01);
      assertEquals(561.3164542117157, quadCurve0.y1, 0.01);
      assertEquals((-127.68), quadCurve0.ctrlx, 0.01);
      assertEquals(561.3164542117157, quadCurve0.ctrly, 0.01);
      assertNotNull(quadCurve0);
      assertEquals((-127.68), quadCurve0.ctrlX(), 0.01);
      assertEquals((-2129.57963509), quadCurve0.x2(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.ctrlY(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(561.3164542117157, quadCurve0.y1(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.x1(), 0.01);
      assertEquals(4602.2244926, quadCurve0.y2(), 0.01);
      
      double double0 = quadCurve0.flatnessSq();
      assertEquals(328878.06871534203, double0, 0.01);
      assertEquals(4602.2244926, quadCurve0.y2, 0.01);
      assertEquals(561.3164542117157, quadCurve0.x1, 0.01);
      assertEquals((-2129.57963509), quadCurve0.x2, 0.01);
      assertEquals(561.3164542117157, quadCurve0.y1, 0.01);
      assertEquals((-127.68), quadCurve0.ctrlx, 0.01);
      assertEquals(561.3164542117157, quadCurve0.ctrly, 0.01);
      assertEquals((-127.68), quadCurve0.ctrlX(), 0.01);
      assertEquals((-2129.57963509), quadCurve0.x2(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.ctrlY(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(561.3164542117157, quadCurve0.y1(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.x1(), 0.01);
      assertEquals(4602.2244926, quadCurve0.y2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      
      double double0 = quadCurve0.flatness();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1948.224397064182), 0.0, 0.0, (-1.0), 320.627785102801, 0.0);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals((-1.0), quadCurve0.ctrly, 0.01);
      assertEquals(320.627785102801, quadCurve0.x2, 0.01);
      assertEquals((-1948.224397064182), quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(320.627785102801, quadCurve0.x2(), 0.01);
      assertEquals((-1948.224397064182), quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals((-1.0), quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      
      Point point0 = quadCurve0.ctrlP();
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals((-1.0), quadCurve0.ctrly, 0.01);
      assertEquals(320.627785102801, quadCurve0.x2, 0.01);
      assertEquals((-1948.224397064182), quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals((-1.0), point0.y, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertNotNull(point0);
      assertEquals(320.627785102801, quadCurve0.x2(), 0.01);
      assertEquals((-1948.224397064182), quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals((-1.0), quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals((-1.0), point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      
      quadCurve0.setCurve(0.5, 0.0, (-1114.03764), 1295.6809088708, 0.0, (-1816.29937208101));
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.5, quadCurve0.x1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrly, 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.5, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrlY(), 0.01);
      
      Point point0 = quadCurve0.ctrlP();
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.5, quadCurve0.x1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrly, 0.01);
      assertEquals(1295.6809088708, point0.y, 0.01);
      assertEquals((-1114.03764), point0.x, 0.01);
      assertNotNull(point0);
      assertEquals((-1114.03764), quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.5, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrlY(), 0.01);
      assertEquals(1295.6809088708, point0.y(), 0.01);
      assertEquals((-1114.03764), point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      
      Point point0 = quadCurve0.ctrlP();
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertNotNull(point0);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
      
      quadCurve0.setCurve(0.5, 0.0, (-1114.03764), 1295.6809088708, 0.0, (-1816.29937208101));
      assertEquals((-1114.03764), quadCurve0.ctrlx, 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrly, 0.01);
      assertEquals(0.5, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.5, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1295.6809088708, quadCurve0.ctrlY(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      
      boolean boolean0 = quadCurve0.contains((XY) point0);
      assertTrue(boolean0);
      assertEquals((-1114.03764), quadCurve0.ctrlx, 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrly, 0.01);
      assertEquals(0.5, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.5, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1295.6809088708, quadCurve0.ctrlY(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(0.0, point0.x(), 0.01);
      assertEquals(0.0, point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      
      quadCurve0.setCurve(0.5, 0.0, (-1114.03764), 1295.6809088708, 0.0, (-1816.29937208101));
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.5, quadCurve0.x1, 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.5, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlX(), 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrlY(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      
      boolean boolean0 = quadCurve0.contains(0.0, (-1343.6155642039257));
      assertTrue(boolean0);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.5, quadCurve0.x1, 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.5, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlX(), 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrlY(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(561.3164542117157, 561.3164542117157, (-127.68), 561.3164542117157, (-2129.57963509), 4602.2244926);
      assertEquals(561.3164542117157, quadCurve0.x1, 0.01);
      assertEquals((-2129.57963509), quadCurve0.x2, 0.01);
      assertEquals(561.3164542117157, quadCurve0.ctrly, 0.01);
      assertEquals(561.3164542117157, quadCurve0.y1, 0.01);
      assertEquals(4602.2244926, quadCurve0.y2, 0.01);
      assertEquals((-127.68), quadCurve0.ctrlx, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(561.3164542117157, quadCurve0.ctrlY(), 0.01);
      assertEquals(4602.2244926, quadCurve0.y2(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.x1(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-2129.57963509), quadCurve0.x2(), 0.01);
      assertEquals((-127.68), quadCurve0.ctrlX(), 0.01);
      
      QuadCurve quadCurve1 = quadCurve0.clone();
      assertNotSame(quadCurve0, quadCurve1);
      assertNotSame(quadCurve1, quadCurve0);
      assertEquals(561.3164542117157, quadCurve0.x1, 0.01);
      assertEquals((-2129.57963509), quadCurve0.x2, 0.01);
      assertEquals(561.3164542117157, quadCurve0.ctrly, 0.01);
      assertEquals(561.3164542117157, quadCurve0.y1, 0.01);
      assertEquals(4602.2244926, quadCurve0.y2, 0.01);
      assertEquals((-127.68), quadCurve0.ctrlx, 0.01);
      assertEquals(561.3164542117157, quadCurve1.ctrly, 0.01);
      assertEquals(561.3164542117157, quadCurve1.x1, 0.01);
      assertEquals((-2129.57963509), quadCurve1.x2, 0.01);
      assertEquals(561.3164542117157, quadCurve1.y1, 0.01);
      assertEquals(4602.2244926, quadCurve1.y2, 0.01);
      assertEquals((-127.68), quadCurve1.ctrlx, 0.01);
      assertNotNull(quadCurve1);
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      assertEquals(561.3164542117157, quadCurve0.ctrlY(), 0.01);
      assertEquals(4602.2244926, quadCurve0.y2(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.x1(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-2129.57963509), quadCurve0.x2(), 0.01);
      assertEquals((-127.68), quadCurve0.ctrlX(), 0.01);
      assertEquals(4602.2244926, quadCurve1.y2(), 0.01);
      assertEquals(561.3164542117157, quadCurve1.ctrlY(), 0.01);
      assertTrue(quadCurve1.isEmpty());
      assertEquals((-2129.57963509), quadCurve1.x2(), 0.01);
      assertEquals(561.3164542117157, quadCurve1.x1(), 0.01);
      assertEquals(561.3164542117157, quadCurve1.y1(), 0.01);
      assertEquals((-127.68), quadCurve1.ctrlX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-605.3526397695485), (-605.3526397695485), (-605.3526397695485), 0.0, 1.0, (-605.3526397695485));
      assertEquals((-605.3526397695485), quadCurve0.x1, 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y2, 0.01);
      assertEquals(1.0, quadCurve0.x2, 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y1, 0.01);
      assertEquals((-605.3526397695485), quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertNotNull(quadCurve0);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-605.3526397695485), quadCurve0.ctrlX(), 0.01);
      assertEquals((-605.3526397695485), quadCurve0.x1(), 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y2(), 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y1(), 0.01);
      assertEquals(1.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      
      QuadCurve quadCurve1 = quadCurve0.clone();
      assertNotSame(quadCurve0, quadCurve1);
      assertNotSame(quadCurve1, quadCurve0);
      assertEquals((-605.3526397695485), quadCurve0.x1, 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y2, 0.01);
      assertEquals(1.0, quadCurve0.x2, 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y1, 0.01);
      assertEquals((-605.3526397695485), quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals((-605.3526397695485), quadCurve1.ctrlx, 0.01);
      assertEquals(0.0, quadCurve1.ctrly, 0.01);
      assertEquals((-605.3526397695485), quadCurve1.y1, 0.01);
      assertEquals((-605.3526397695485), quadCurve1.x1, 0.01);
      assertEquals((-605.3526397695485), quadCurve1.y2, 0.01);
      assertEquals(1.0, quadCurve1.x2, 0.01);
      assertNotNull(quadCurve1);
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-605.3526397695485), quadCurve0.ctrlX(), 0.01);
      assertEquals((-605.3526397695485), quadCurve0.x1(), 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y2(), 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y1(), 0.01);
      assertEquals(1.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals((-605.3526397695485), quadCurve1.y1(), 0.01);
      assertEquals((-605.3526397695485), quadCurve1.x1(), 0.01);
      assertEquals((-605.3526397695485), quadCurve1.y2(), 0.01);
      assertEquals((-605.3526397695485), quadCurve1.ctrlX(), 0.01);
      assertEquals(1.0, quadCurve1.x2(), 0.01);
      assertEquals(0.0, quadCurve1.ctrlY(), 0.01);
      assertTrue(quadCurve1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0, 2.0, 2.0, (-2677.8988371979435), 0.0, (-1293.0));
      assertEquals((-2677.8988371979435), quadCurve0.ctrly, 0.01);
      assertEquals((-1293.0), quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(2.0, quadCurve0.y1, 0.01);
      assertEquals(2.0, quadCurve0.ctrlx, 0.01);
      assertNotNull(quadCurve0);
      assertEquals((-2677.8988371979435), quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(2.0, quadCurve0.y1(), 0.01);
      assertEquals((-1293.0), quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(2.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      
      QuadCurve quadCurve1 = quadCurve0.clone();
      assertNotSame(quadCurve0, quadCurve1);
      assertNotSame(quadCurve1, quadCurve0);
      assertEquals((-2677.8988371979435), quadCurve0.ctrly, 0.01);
      assertEquals((-1293.0), quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(2.0, quadCurve0.y1, 0.01);
      assertEquals(2.0, quadCurve0.ctrlx, 0.01);
      assertEquals((-2677.8988371979435), quadCurve1.ctrly, 0.01);
      assertEquals(0.0, quadCurve1.x1, 0.01);
      assertEquals(0.0, quadCurve1.x2, 0.01);
      assertEquals((-1293.0), quadCurve1.y2, 0.01);
      assertEquals(2.0, quadCurve1.ctrlx, 0.01);
      assertEquals(2.0, quadCurve1.y1, 0.01);
      assertNotNull(quadCurve1);
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      assertEquals((-2677.8988371979435), quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(2.0, quadCurve0.y1(), 0.01);
      assertEquals((-1293.0), quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(2.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(2.0, quadCurve1.ctrlX(), 0.01);
      assertTrue(quadCurve1.isEmpty());
      assertEquals((-1293.0), quadCurve1.y2(), 0.01);
      assertEquals((-2677.8988371979435), quadCurve1.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve1.x1(), 0.01);
      assertEquals(0.0, quadCurve1.x2(), 0.01);
      assertEquals(2.0, quadCurve1.y1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      
      QuadCurve quadCurve1 = quadCurve0.clone();
      assertNotSame(quadCurve0, quadCurve1);
      assertNotSame(quadCurve1, quadCurve0);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve1.x2, 0.01);
      assertEquals(0.0, quadCurve1.y1, 0.01);
      assertEquals(0.0, quadCurve1.ctrly, 0.01);
      assertEquals(0.0, quadCurve1.x1, 0.01);
      assertEquals(0.0, quadCurve1.y2, 0.01);
      assertEquals(0.0, quadCurve1.ctrlx, 0.01);
      assertNotNull(quadCurve1);
      assertFalse(quadCurve1.equals((Object)quadCurve0));
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, quadCurve1.x2(), 0.01);
      assertEquals(0.0, quadCurve1.y1(), 0.01);
      assertEquals(0.0, quadCurve1.x1(), 0.01);
      assertEquals(0.0, quadCurve1.y2(), 0.01);
      assertTrue(quadCurve1.isEmpty());
      assertEquals(0.0, quadCurve1.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve1.ctrlX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.0, 0.0, 0.0, 1517.9032, 1517.9032);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(1517.9032, quadCurve0.y2, 0.01);
      assertEquals(1517.9032, quadCurve0.x2, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertEquals(1517.9032, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1517.9032, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      
      quadCurve0.subdivide(quadCurve0, quadCurve0);
      assertEquals(758.9516, quadCurve0.ctrlx, 0.01);
      assertEquals(379.4758, quadCurve0.x1, 0.01);
      assertEquals(1517.9032, quadCurve0.y2, 0.01);
      assertEquals(758.9516, quadCurve0.ctrly, 0.01);
      assertEquals(379.4758, quadCurve0.y1, 0.01);
      assertEquals(1517.9032, quadCurve0.x2, 0.01);
      assertEquals(1517.9032, quadCurve0.x2(), 0.01);
      assertEquals(379.4758, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(379.4758, quadCurve0.x1(), 0.01);
      assertEquals(1517.9032, quadCurve0.y2(), 0.01);
      assertEquals(758.9516, quadCurve0.ctrlX(), 0.01);
      assertEquals(758.9516, quadCurve0.ctrlY(), 0.01);
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.height, 0.01);
      assertEquals(0.0, rectangle0.width, 0.01);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(0.0, rectangle0.y, 0.01);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.height(), 0.01);
      assertEquals(0.0, rectangle0.width(), 0.01);
      assertEquals(0.0, rectangle0.x(), 0.01);
      assertEquals(0.0, rectangle0.y(), 0.01);
      
      Rectangle rectangle1 = quadCurve0.bounds(rectangle0);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertEquals(758.9516, quadCurve0.ctrlx, 0.01);
      assertEquals(379.4758, quadCurve0.x1, 0.01);
      assertEquals(1517.9032, quadCurve0.y2, 0.01);
      assertEquals(758.9516, quadCurve0.ctrly, 0.01);
      assertEquals(379.4758, quadCurve0.y1, 0.01);
      assertEquals(1517.9032, quadCurve0.x2, 0.01);
      assertEquals(379.4758, rectangle0.x, 0.01);
      assertEquals(1138.4274, rectangle0.width, 0.01);
      assertEquals(379.4758, rectangle0.y, 0.01);
      assertEquals(1138.4274, rectangle0.height, 0.01);
      assertEquals(1138.4274, rectangle1.height, 0.01);
      assertEquals(1138.4274, rectangle1.width, 0.01);
      assertEquals(379.4758, rectangle1.x, 0.01);
      assertEquals(379.4758, rectangle1.y, 0.01);
      assertNotNull(rectangle1);
      assertEquals(1517.9032, quadCurve0.x2(), 0.01);
      assertEquals(379.4758, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(379.4758, quadCurve0.x1(), 0.01);
      assertEquals(1517.9032, quadCurve0.y2(), 0.01);
      assertEquals(758.9516, quadCurve0.ctrlX(), 0.01);
      assertEquals(758.9516, quadCurve0.ctrlY(), 0.01);
      assertEquals(379.4758, rectangle0.x(), 0.01);
      assertEquals(379.4758, rectangle0.y(), 0.01);
      assertEquals(1138.4274, rectangle0.width(), 0.01);
      assertEquals(1138.4274, rectangle0.height(), 0.01);
      assertEquals(379.4758, rectangle1.y(), 0.01);
      assertEquals(1138.4274, rectangle1.width(), 0.01);
      assertEquals(379.4758, rectangle1.x(), 0.01);
      assertEquals(1138.4274, rectangle1.height(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.width, 0.01);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(0.0, rectangle0.y, 0.01);
      assertEquals(0.0, rectangle0.height, 0.01);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.width(), 0.01);
      assertEquals(0.0, rectangle0.x(), 0.01);
      assertEquals(0.0, rectangle0.y(), 0.01);
      assertEquals(0.0, rectangle0.height(), 0.01);
      
      Rectangle rectangle1 = quadCurve0.bounds(rectangle0);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, rectangle0.width, 0.01);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(0.0, rectangle0.y, 0.01);
      assertEquals(0.0, rectangle0.height, 0.01);
      assertEquals(0.0, rectangle1.y, 0.01);
      assertEquals(0.0, rectangle1.width, 0.01);
      assertEquals(0.0, rectangle1.x, 0.01);
      assertEquals(0.0, rectangle1.height, 0.01);
      assertNotNull(rectangle1);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, rectangle0.width(), 0.01);
      assertEquals(0.0, rectangle0.x(), 0.01);
      assertEquals(0.0, rectangle0.y(), 0.01);
      assertEquals(0.0, rectangle0.height(), 0.01);
      assertEquals(0.0, rectangle1.x(), 0.01);
      assertEquals(0.0, rectangle1.width(), 0.01);
      assertEquals(0.0, rectangle1.y(), 0.01);
      assertEquals(0.0, rectangle1.height(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(561.3164542117157, 561.3164542117157, (-127.68), 561.3164542117157, (-2129.57963509), 4602.2244926);
      assertEquals(561.3164542117157, quadCurve0.x1, 0.01);
      assertEquals(4602.2244926, quadCurve0.y2, 0.01);
      assertEquals(561.3164542117157, quadCurve0.y1, 0.01);
      assertEquals(561.3164542117157, quadCurve0.ctrly, 0.01);
      assertEquals((-2129.57963509), quadCurve0.x2, 0.01);
      assertEquals((-127.68), quadCurve0.ctrlx, 0.01);
      assertNotNull(quadCurve0);
      assertEquals((-2129.57963509), quadCurve0.x2(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.x1(), 0.01);
      assertEquals((-127.68), quadCurve0.ctrlX(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(561.3164542117157, quadCurve0.ctrlY(), 0.01);
      assertEquals(4602.2244926, quadCurve0.y2(), 0.01);
      
      Rectangle rectangle0 = quadCurve0.bounds();
      assertEquals(561.3164542117157, quadCurve0.x1, 0.01);
      assertEquals(4602.2244926, quadCurve0.y2, 0.01);
      assertEquals(561.3164542117157, quadCurve0.y1, 0.01);
      assertEquals(561.3164542117157, quadCurve0.ctrly, 0.01);
      assertEquals((-2129.57963509), quadCurve0.x2, 0.01);
      assertEquals((-127.68), quadCurve0.ctrlx, 0.01);
      assertEquals(2690.8960893017156, rectangle0.width, 0.01);
      assertEquals((-2129.57963509), rectangle0.x, 0.01);
      assertEquals(4040.9080383882847, rectangle0.height, 0.01);
      assertEquals(561.3164542117157, rectangle0.y, 0.01);
      assertNotNull(rectangle0);
      assertEquals((-2129.57963509), quadCurve0.x2(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.x1(), 0.01);
      assertEquals((-127.68), quadCurve0.ctrlX(), 0.01);
      assertEquals(561.3164542117157, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(561.3164542117157, quadCurve0.ctrlY(), 0.01);
      assertEquals(4602.2244926, quadCurve0.y2(), 0.01);
      assertEquals((-2129.57963509), rectangle0.x(), 0.01);
      assertEquals(561.3164542117157, rectangle0.y(), 0.01);
      assertEquals(2690.8960893017156, rectangle0.width(), 0.01);
      assertEquals(4040.9080383882847, rectangle0.height(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-605.3526397695485), (-605.3526397695485), (-605.3526397695485), 0.0, 1.0, (-605.3526397695485));
      assertEquals((-605.3526397695485), quadCurve0.x1, 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y2, 0.01);
      assertEquals(1.0, quadCurve0.x2, 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y1, 0.01);
      assertEquals((-605.3526397695485), quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertNotNull(quadCurve0);
      assertEquals((-605.3526397695485), quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-605.3526397695485), quadCurve0.y1(), 0.01);
      assertEquals(1.0, quadCurve0.x2(), 0.01);
      assertEquals((-605.3526397695485), quadCurve0.x1(), 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y2(), 0.01);
      
      Rectangle rectangle0 = quadCurve0.bounds();
      assertEquals((-605.3526397695485), quadCurve0.x1, 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y2, 0.01);
      assertEquals(1.0, quadCurve0.x2, 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y1, 0.01);
      assertEquals((-605.3526397695485), quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals((-605.3526397695485), rectangle0.x, 0.01);
      assertEquals((-605.3526397695485), rectangle0.y, 0.01);
      assertEquals(605.3526397695485, rectangle0.height, 0.01);
      assertEquals(606.3526397695485, rectangle0.width, 0.01);
      assertNotNull(rectangle0);
      assertEquals((-605.3526397695485), quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-605.3526397695485), quadCurve0.y1(), 0.01);
      assertEquals(1.0, quadCurve0.x2(), 0.01);
      assertEquals((-605.3526397695485), quadCurve0.x1(), 0.01);
      assertEquals((-605.3526397695485), quadCurve0.y2(), 0.01);
      assertEquals((-605.3526397695485), rectangle0.x(), 0.01);
      assertEquals(606.3526397695485, rectangle0.width(), 0.01);
      assertEquals((-605.3526397695485), rectangle0.y(), 0.01);
      assertEquals(605.3526397695485, rectangle0.height(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      
      Rectangle rectangle0 = quadCurve0.bounds();
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(0.0, rectangle0.width, 0.01);
      assertEquals(0.0, rectangle0.y, 0.01);
      assertEquals(0.0, rectangle0.height, 0.01);
      assertNotNull(rectangle0);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, rectangle0.width(), 0.01);
      assertEquals(0.0, rectangle0.height(), 0.01);
      assertEquals(0.0, rectangle0.x(), 0.01);
      assertEquals(0.0, rectangle0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      
      // Undeclared exception!
      try { 
        quadCurve0.intersects((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractQuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      
      // Undeclared exception!
      try { 
        quadCurve0.contains((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractQuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      
      // Undeclared exception!
      try { 
        quadCurve0.contains((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractQuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      assertEquals(0.0, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(0.0, quadCurve0.ctrly, 0.01);
      assertEquals(0.0, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.y1, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.0, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.0, quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(0.0, quadCurve0.y1(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals(0.0, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      
      // Undeclared exception!
      try { 
        quadCurve0.bounds((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractQuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      
      quadCurve0.setCurve(0.5, 1343.6155642039257, (-1114.03764), 1295.6809088708, 0.0, (-1816.29937208101));
      assertEquals(1295.6809088708, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(0.5, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.5, quadCurve0.x1(), 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      
      boolean boolean0 = quadCurve0.intersects((-2012.108804481084), 1295.6809088708, 3355.7243686850097, 1713.8285279116756);
      assertTrue(boolean0);
      assertEquals(1295.6809088708, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(0.5, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrlY(), 0.01);
      assertEquals(0.5, quadCurve0.x1(), 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertNotNull(quadCurve0);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      
      quadCurve0.setCurve(0.5, 1343.6155642039257, (-1114.03764), 1295.6809088708, 0.0, (-1816.29937208101));
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlx, 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrly, 0.01);
      assertEquals(0.5, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(0.5, quadCurve0.x1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1295.6809088708, quadCurve0.ctrlY(), 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      
      boolean boolean0 = quadCurve0.intersects(0.0, 0.0, 0.0, 0.0);
      assertTrue(boolean0);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlx, 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrly, 0.01);
      assertEquals(0.5, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(0.5, quadCurve0.x1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1295.6809088708, quadCurve0.ctrlY(), 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      
      quadCurve0.setCurve(0.5, 1343.6155642039257, (-1114.03764), 1295.6809088708, 0.0, (-1816.29937208101));
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlx, 0.01);
      assertEquals(0.5, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(0.5, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrlY(), 0.01);
      
      boolean boolean0 = quadCurve0.contains(0.0, 0.0, 0.0, (-327.554814719));
      assertTrue(boolean0);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlx, 0.01);
      assertEquals(0.5, quadCurve0.x1, 0.01);
      assertEquals(0.0, quadCurve0.x2, 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(0.5, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.x2(), 0.01);
      assertEquals((-1114.03764), quadCurve0.ctrlX(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals(1295.6809088708, quadCurve0.ctrlY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.3));
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.3), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1816.3), quadCurve0.y2(), 0.01);
      
      boolean boolean0 = quadCurve0.contains(1343.6155642039257, 0.0, 0.0, 1343.6155642039257);
      assertFalse(boolean0);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.3), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1816.3), quadCurve0.y2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertNotNull(quadCurve0);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      
      Rectangle rectangle0 = quadCurve0.bounds();
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals(3159.9149362849357, rectangle0.height, 0.01);
      assertEquals((-1816.29937208101), rectangle0.y, 0.01);
      assertEquals(0.0, rectangle0.width, 0.01);
      assertEquals(1343.6155642039257, rectangle0.x, 0.01);
      assertNotNull(rectangle0);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(3159.9149362849357, rectangle0.height(), 0.01);
      assertEquals((-1816.29937208101), rectangle0.y(), 0.01);
      assertEquals(0.0, rectangle0.width(), 0.01);
      assertEquals(1343.6155642039257, rectangle0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.3));
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals((-1816.3), quadCurve0.y2, 0.01);
      assertNotNull(quadCurve0);
      assertEquals((-1816.3), quadCurve0.y2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      
      boolean boolean0 = quadCurve0.contains(1343.6155642039257, 0.0);
      assertFalse(boolean0);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals((-1816.3), quadCurve0.y2, 0.01);
      assertEquals((-1816.3), quadCurve0.y2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertTrue(quadCurve0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertNotNull(quadCurve0);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      
      AffineTransform affineTransform0 = new AffineTransform((-1980.888389302553), 0.0, (-1114.03764), (-1753.3));
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m00, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m11, 0.01);
      assertEquals((-1114.03764), affineTransform0.tx, 0.01);
      assertEquals((-1753.3), affineTransform0.ty, 0.01);
      assertNotNull(affineTransform0);
      assertEquals((-1753.3), affineTransform0.ty(), 0.01);
      assertEquals((-1114.03764), affineTransform0.tx(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.uniformScale(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1980.888389302553, affineTransform0.scaleX(), 0.01);
      
      AbstractQuadCurve.Iterator abstractQuadCurve_Iterator0 = new AbstractQuadCurve.Iterator(quadCurve0, affineTransform0);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m00, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m11, 0.01);
      assertEquals((-1114.03764), affineTransform0.tx, 0.01);
      assertEquals((-1753.3), affineTransform0.ty, 0.01);
      assertNotNull(abstractQuadCurve_Iterator0);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals((-1753.3), affineTransform0.ty(), 0.01);
      assertEquals((-1114.03764), affineTransform0.tx(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.uniformScale(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1980.888389302553, affineTransform0.scaleX(), 0.01);
      assertEquals(1, abstractQuadCurve_Iterator0.windingRule());
      assertFalse(abstractQuadCurve_Iterator0.isDone());
      
      double[] doubleArray0 = new double[7];
      int int0 = abstractQuadCurve_Iterator0.currentSegment(doubleArray0);
      assertArrayEquals(new double[] {(-2662666.5084577557), (-2663305.7708177553), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(-0.0, affineTransform0.m01, 0.01);
      assertEquals(4, AffineTransform.GENERALITY);
      assertEquals(0.0, affineTransform0.m10, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m00, 0.01);
      assertEquals((-1980.888389302553), affineTransform0.m11, 0.01);
      assertEquals((-1114.03764), affineTransform0.tx, 0.01);
      assertEquals((-1753.3), affineTransform0.ty, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertEquals((-1816.29937208101), quadCurve0.y2(), 0.01);
      assertEquals((-1753.3), affineTransform0.ty(), 0.01);
      assertEquals((-1114.03764), affineTransform0.tx(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.uniformScale(), 0.01);
      assertEquals(1980.888389302553, affineTransform0.scaleY(), 0.01);
      assertEquals(4, affineTransform0.generality());
      assertEquals(1980.888389302553, affineTransform0.scaleX(), 0.01);
      assertEquals(1, abstractQuadCurve_Iterator0.windingRule());
      assertFalse(abstractQuadCurve_Iterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(875.1431, 1005.9979249, 0.9999900000002526, 478.93699, 0.9999900000002526, 0.0);
      assertEquals(478.93699, quadCurve0.ctrly, 0.01);
      assertEquals(875.1431, quadCurve0.x1, 0.01);
      assertEquals(1005.9979249, quadCurve0.y1, 0.01);
      assertEquals(0.9999900000002526, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.9999900000002526, quadCurve0.x2, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(0.9999900000002526, quadCurve0.ctrlX(), 0.01);
      assertEquals(478.93699, quadCurve0.ctrlY(), 0.01);
      assertEquals(1005.9979249, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(875.1431, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.9999900000002526, quadCurve0.x2(), 0.01);
      
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) null);
      assertEquals(478.93699, quadCurve0.ctrly, 0.01);
      assertEquals(875.1431, quadCurve0.x1, 0.01);
      assertEquals(1005.9979249, quadCurve0.y1, 0.01);
      assertEquals(0.9999900000002526, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.9999900000002526, quadCurve0.x2, 0.01);
      assertNotNull(pathIterator0);
      assertEquals(0.9999900000002526, quadCurve0.ctrlX(), 0.01);
      assertEquals(478.93699, quadCurve0.ctrlY(), 0.01);
      assertEquals(1005.9979249, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(875.1431, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.9999900000002526, quadCurve0.x2(), 0.01);
      assertEquals(1, pathIterator0.windingRule());
      assertFalse(pathIterator0.isDone());
      
      pathIterator0.next();
      assertEquals(478.93699, quadCurve0.ctrly, 0.01);
      assertEquals(875.1431, quadCurve0.x1, 0.01);
      assertEquals(1005.9979249, quadCurve0.y1, 0.01);
      assertEquals(0.9999900000002526, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.9999900000002526, quadCurve0.x2, 0.01);
      assertEquals(0.9999900000002526, quadCurve0.ctrlX(), 0.01);
      assertEquals(478.93699, quadCurve0.ctrlY(), 0.01);
      assertEquals(1005.9979249, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(875.1431, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.9999900000002526, quadCurve0.x2(), 0.01);
      assertEquals(1, pathIterator0.windingRule());
      assertFalse(pathIterator0.isDone());
      
      pathIterator0.next();
      assertEquals(478.93699, quadCurve0.ctrly, 0.01);
      assertEquals(875.1431, quadCurve0.x1, 0.01);
      assertEquals(1005.9979249, quadCurve0.y1, 0.01);
      assertEquals(0.9999900000002526, quadCurve0.ctrlx, 0.01);
      assertEquals(0.0, quadCurve0.y2, 0.01);
      assertEquals(0.9999900000002526, quadCurve0.x2, 0.01);
      assertEquals(0.9999900000002526, quadCurve0.ctrlX(), 0.01);
      assertEquals(478.93699, quadCurve0.ctrlY(), 0.01);
      assertEquals(1005.9979249, quadCurve0.y1(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals(875.1431, quadCurve0.x1(), 0.01);
      assertEquals(0.0, quadCurve0.y2(), 0.01);
      assertEquals(0.9999900000002526, quadCurve0.x2(), 0.01);
      assertTrue(pathIterator0.isDone());
      assertEquals(1, pathIterator0.windingRule());
      
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        pathIterator0.currentSegment(doubleArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.d.AbstractQuadCurve$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.3));
      assertEquals((-1816.3), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertNotNull(quadCurve0);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1816.3), quadCurve0.y2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
      
      boolean boolean0 = quadCurve0.intersects(0.0, (-1644.0100285529097), 0.0, 1343.6155642039257);
      assertFalse(boolean0);
      assertEquals((-1816.3), quadCurve0.y2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlx, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrly, 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.x2(), 0.01);
      assertTrue(quadCurve0.isEmpty());
      assertEquals((-1816.3), quadCurve0.y2(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlX(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.y1(), 0.01);
      assertEquals(1343.6155642039257, quadCurve0.ctrlY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(4244.19, 4244.19, (-0.5610954132272854), (-0.5610954132272854), (-0.5610954132272854), 4244.19);
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = quadCurve0.contains((IRectangle) rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      Point point0 = quadCurve0.ctrlP();
      quadCurve0.setCurve(0.5, 1343.6155642039257, (-1114.03764), 1295.6809088708, 0.0, (-1816.29937208101));
      Rectangle rectangle0 = new Rectangle(point0);
      quadCurve0.bounds(rectangle0);
      boolean boolean0 = quadCurve0.contains((IRectangle) rectangle0);
      assertEquals((-1114.03764), rectangle0.x, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      AbstractQuadCurve.Iterator abstractQuadCurve_Iterator0 = new AbstractQuadCurve.Iterator(quadCurve0, (Transform) null);
      int int0 = abstractQuadCurve_Iterator0.windingRule();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      Point point0 = quadCurve0.p1();
      assertEquals(1343.6155642039257, point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      // Undeclared exception!
      try { 
        quadCurve0.pathIterator((Transform) null, (-1178.55753761));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Flatness is less then zero
         //
         verifyException("pythagoras.d.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      double double0 = quadCurve0.flatnessSq();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      Point point0 = quadCurve0.ctrlP();
      quadCurve0.setCurve(0.5, 1343.6155642039257, (-1114.03764), 1295.6809088708, 0.0, (-1816.29937208101));
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle rectangle1 = quadCurve0.bounds(rectangle0);
      boolean boolean0 = quadCurve0.intersects((IRectangle) rectangle1);
      assertEquals((-1114.03764), rectangle0.x, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      Point point0 = quadCurve0.ctrlP();
      boolean boolean0 = quadCurve0.contains((XY) point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.29937208101));
      Point point0 = quadCurve0.ctrlP();
      Rectangle rectangle0 = new Rectangle(point0);
      boolean boolean0 = quadCurve0.intersects((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(875.1431, 1005.9979249, 0.9999900000002526, 478.93699, 0.9999900000002526, 0.0);
      double double0 = quadCurve0.flatness();
      assertEquals(314.13774429105774, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, 1343.6155642039257, (-1816.3));
      Point point0 = quadCurve0.p2();
      assertEquals((-1816.3), point0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(875.1431, 1005.9979249, 0.9999900000002526, 478.93699, 0.9999900000002526, 0.0);
      boolean boolean0 = quadCurve0.isEmpty();
      assertTrue(boolean0);
  }
}
