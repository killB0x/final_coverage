/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:21:41 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AbstractLine;
import pythagoras.d.AffineTransform;
import pythagoras.d.Dimension;
import pythagoras.d.IRectangle;
import pythagoras.d.IdentityTransform;
import pythagoras.d.Line;
import pythagoras.d.PathIterator;
import pythagoras.d.Point;
import pythagoras.d.Rectangle;
import pythagoras.d.Transform;
import pythagoras.d.Vector;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractLine_ESTest extends AbstractLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Line line0 = new Line((-3995.469220731), (-3995.469220731), 1793.731608536886, 1175.0);
      AbstractLine.Iterator abstractLine_Iterator0 = new AbstractLine.Iterator(line0, (Transform) null);
      double[] doubleArray0 = new double[6];
      abstractLine_Iterator0.next();
      assertFalse(abstractLine_Iterator0.isDone());
      
      int int0 = abstractLine_Iterator0.currentSegment(doubleArray0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {1793.731608536886, 1175.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Line line0 = new Line(2812.552694130032, 2812.552694130032, 4996.705283431343, 4996.705283431343);
      Vector vector0 = new Vector();
      vector0.normalizeLocal();
      line0.setLine((XY) vector0, (XY) vector0);
      Rectangle rectangle0 = line0.bounds();
      assertEquals(Double.NaN, rectangle0.height(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector vector0 = new Vector((-1.0), 399.368237);
      Line line0 = new Line(vector0, vector0);
      boolean boolean0 = line0.intersects(0.0, 179.7205336781, (-397.368237), 9.999999747378752E-6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Line line0 = new Line((-3995.469220731), (-3995.469220731), 1793.731608536886, 1175.0);
      AbstractLine.Iterator abstractLine_Iterator0 = new AbstractLine.Iterator(line0, (Transform) null);
      boolean boolean0 = abstractLine_Iterator0.isDone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Line line0 = new Line(0.0, 0.0, 0.0, 9.999999747378752E-6);
      Point point0 = new Point(535.73, 535.73);
      int int0 = line0.relativeCCW((XY) point0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3.4028234663852886E38), 1988.8158978147985, 2040.8926187749264, 1988.8158978147985, 1988.8158978147985, 1988.8158978147985);
      Vector vector0 = affineTransform0.translation();
      Line line0 = new Line(vector0, vector0);
      line0.setLine((-4849.165090413774), 1.0, 2040.8926187749264, (-2005.0));
      int int0 = line0.relativeCCW((XY) vector0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Line line0 = new Line(0.0, 0.0, 0.0, 9.999999747378752E-6);
      int int0 = line0.relativeCCW(9.999999747378752E-6, 0.0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Line line0 = new Line((-2005.0), 0.0, 0.0, (-2005.0));
      int int0 = line0.relativeCCW(0.0, 389.91010977270514);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector vector0 = new Vector((-1.0), 399.368237);
      Line line0 = new Line(vector0, vector0);
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector1 = affineTransform0.scale();
      double double0 = line0.pointSegDistSq((XY) vector1);
      assertEquals(158701.25225048818, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Line line0 = new Line();
      double double0 = line0.pointSegDistSq((-3205.3628), 3924.6640924491358);
      assertEquals(2.567733891818344E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Line line0 = new Line(3262.04, 2382.9268, 2382.9268, (-220.2));
      Vector vector0 = new Vector();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(vector0, dimension0);
      Point point0 = rectangle0.center();
      double double0 = line0.pointSegDist((XY) point0);
      assertEquals(2393.0792243798032, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector vector0 = new Vector((-1.0), 389.91010977270514);
      Line line0 = new Line(vector0, vector0);
      double double0 = line0.pointSegDist((-1.0), 389.91010977270514);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Line line0 = new Line((-1429.72797275571), (-1429.72797275571), 2364.227168950374, (-1429.72797275571));
      AffineTransform affineTransform0 = new AffineTransform();
      Vector vector0 = affineTransform0.scale();
      double double0 = line0.pointLineDistSq((XY) vector0);
      assertEquals(2046982.532025664, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Line line0 = new Line(178.9265329035695, 1.0, 178.9265329035695, 494.0);
      double double0 = line0.pointLineDistSq(178.9265329035695, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Line line0 = new Line((-1429.72797275571), (-1429.72797275571), 2364.227168950374, (-1429.72797275571));
      double double0 = line0.pointLineDistSq((-1429.72797275571), (-346.06598));
      assertEquals(1174323.3145432763, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Line line0 = new Line(0.0, 0.0, 0.0, 9.999999747378752E-6);
      Point point0 = new Point(535.73, 535.73);
      double double0 = line0.pointLineDist((XY) point0);
      assertEquals(535.73, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Line line0 = new Line(5097.08585, 0.0, 2267.575076295831, -0.0);
      double double0 = line0.pointLineDist(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Line line0 = new Line((-2005.0), 0.0, 0.0, (-2005.0));
      double double0 = line0.pointLineDist((-2413.375347971), 466.23272436355444);
      assertEquals(40.9113431888378, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = new Rectangle(1074.04773332631, (-1565.11756), 0.0, 9.999999747378752E-6);
      Point point0 = rectangle0.min();
      line0.setLine((XY) point0, (XY) point0);
      Point point1 = line0.p2(point0);
      assertEquals((-1565.11756), point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(7.848814037734518, 389.91010977270514, (-1847.385537), 178.9265329035695);
      Line line0 = new Line(0.5, 389.91010977270514, 294.452500307519, 0.0);
      Point point0 = rectangle0.max();
      Point point1 = line0.p2(point0);
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Line line0 = new Line(178.9265329035695, 0.5, (-890.41251216), 3039.57951127);
      Point point0 = new Point(9.999999747378752E-6, (-1162.5617525528));
      Point point1 = line0.p2(point0);
      assertSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector vector0 = new Vector((-1.0), 399.368237);
      Line line0 = new Line(vector0, vector0);
      line0.setLine(0.0, (double) 1, 9.999999747378752E-6, (-1.0));
      Point point0 = line0.p2();
      assertEquals(9.999999747378752E-6, point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Line line0 = new Line();
      Point point0 = line0.p2();
      assertEquals(0.0, point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Line line0 = new Line((-1151.2869924412444), (-1151.2869924412444), (-1151.2869924412444), 1617.25586645939);
      Point point0 = line0.p2();
      assertEquals((-1151.2869924412444), point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Line line0 = new Line(2414.359026043798, (-1.0), 215.40788011262, (-1.0));
      Rectangle rectangle0 = new Rectangle(215.40788011262, (-2090.352), (-1.0), (-2126.045465310943));
      Point point0 = rectangle0.location();
      Point point1 = line0.p1(point0);
      assertSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Line line0 = new Line(1.0, 10.0, 1.0, 1.0);
      Point point0 = new Point();
      Point point1 = line0.p1(point0);
      assertEquals(1.0, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Line line0 = new Line((-2464.479), 2334.273625993251, (-3191.762), (-3191.762));
      Point point0 = new Point();
      Point point1 = line0.p1(point0);
      assertEquals((-2464.479), point1.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Line line0 = new Line(1.0, (-1847.385537), (-3592.7037), 1664.0);
      Point point0 = line0.p1();
      assertEquals(1.0, point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Line line0 = new Line((-2464.479), 2334.273625993251, (-3191.762), (-3191.762));
      Point point0 = line0.p1();
      assertEquals((-2464.479), point0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(7.848814037734518, 389.91010977270514, (-1847.385537), 178.9265329035695);
      Line line0 = new Line(0.5, 389.91010977270514, 294.452500307519, 0.0);
      boolean boolean0 = line0.intersects((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Line line0 = new Line();
      boolean boolean0 = line0.intersects(0.0, 0.0, (-876.663504744), 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Line line0 = new Line(2414.359026043798, (-1.0), 215.40788011262, (-1.0));
      Line line1 = line0.clone();
      assertEquals(2414.359026043798, line1.x1, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Line line0 = new Line(1.0, (-1847.385537), (-3592.7037), 1664.0);
      Line line1 = line0.clone();
      assertEquals(1.0, line1.x1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Line line0 = new Line(178.9265329035695, 1.0, 178.9265329035695, 494.0);
      Line line1 = line0.clone();
      assertEquals(178.9265329035695, line1.x1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector vector0 = new Vector((-1.0), 389.91010977270514);
      Line line0 = new Line(vector0, vector0);
      Line line1 = line0.clone();
      assertEquals(389.91010977270514, line1.y2, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Line line0 = new Line((-2005.0), 0.0, 0.0, (-2005.0));
      Vector vector0 = new Vector(0.0, 0.0);
      Rectangle rectangle0 = new Rectangle(vector0);
      line0.bounds(rectangle0);
      assertEquals((-2005.0), rectangle0.y, 0.01);
      assertEquals(2005.0, rectangle0.width(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.5, 389.91010977270514, (-1847.385537), 178.9265329035695);
      Line line0 = new Line(178.9265329035695, 1.0, 178.9265329035695, 494.0);
      line0.bounds(rectangle0);
      assertEquals(178.9265329035695, rectangle0.x, 0.01);
      assertEquals(493.0, rectangle0.height(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      assertEquals(0.0, rectangle0.y, 0.01);
      assertEquals(0.0, rectangle0.width, 0.01);
      assertEquals(0.0, rectangle0.x, 0.01);
      assertEquals(0.0, rectangle0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.relativeCCW((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.pointSegDistSq((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.pointSegDist((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.pointLineDistSq((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.pointLineDist((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.p2((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.p1((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.intersects((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.bounds((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Line line0 = new Line(1.0, 10.0, 1.0, 1.0);
      line0.setLine((-2865.657674864), 3.141592653589793, 0.0, 1.5707963267948966);
      Rectangle rectangle0 = new Rectangle(3.141592653589793, 826.607, 10.0, (-1505.6356063));
      line0.bounds(rectangle0);
      assertEquals(1.5707963267948966, rectangle0.height, 0.01);
      assertEquals(1.5707963267948966, rectangle0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = line0.bounds(rectangle0);
      assertEquals(0.0, rectangle1.height, 0.01);
      assertEquals(0.0, rectangle1.y, 0.01);
      assertEquals(0.0, rectangle1.x, 0.01);
      assertEquals(0.0, rectangle1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = new Rectangle();
      Point point0 = rectangle0.location();
      Point point1 = line0.p1(point0);
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Line line0 = new Line();
      AbstractLine.Iterator abstractLine_Iterator0 = new AbstractLine.Iterator(line0, (Transform) null);
      double[] doubleArray0 = new double[10];
      int int0 = abstractLine_Iterator0.currentSegment(doubleArray0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Line line0 = new Line();
      AbstractLine.Iterator abstractLine_Iterator0 = new AbstractLine.Iterator(line0, (Transform) null);
      abstractLine_Iterator0.next();
      abstractLine_Iterator0.next();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        abstractLine_Iterator0.currentSegment(doubleArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.d.AbstractLine$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3.4028234663852886E38), 1988.8158978147985, 2040.8926187749264, 1988.8158978147985, 1988.8158978147985, 1988.8158978147985);
      Vector vector0 = affineTransform0.translation();
      Line line0 = new Line(vector0, vector0);
      line0.setLine((-4849.165090413774), 1.0, 2040.8926187749264, (-2005.0));
      Rectangle rectangle0 = line0.bounds();
      assertEquals((-2005.0), rectangle0.y, 0.01);
      assertEquals(6890.057709188701, rectangle0.width, 0.01);
      assertEquals((-4849.165090413774), rectangle0.x, 0.01);
      assertEquals(2006.0, rectangle0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3.4028234663852886E38), 1988.8158978147985, 2040.8926187749264, 1988.8158978147985, 1988.8158978147985, 1988.8158978147985);
      Vector vector0 = affineTransform0.translation();
      Line line0 = new Line(vector0, vector0);
      int int0 = line0.relativeCCW((-2.8341454436918137E-32), 2040.8926187749264);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Line line0 = new Line((-3995.469220731), (-3995.469220731), 1793.731608536886, 1175.0);
      Point point0 = line0.p2();
      double double0 = line0.pointLineDistSq((XY) point0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3.4028234663852886E38), 1988.8158978147985, 2040.8926187749264, 1988.8158978147985, 1988.8158978147985, 1988.8158978147985);
      Vector vector0 = affineTransform0.translation();
      Line line0 = new Line(vector0, vector0);
      PathIterator pathIterator0 = line0.pathIterator((Transform) affineTransform0);
      assertEquals(1, pathIterator0.windingRule());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3.4028234663852886E38), 1988.8158978147985, 2040.8926187749264, 1988.8158978147985, 1988.8158978147985, 1988.8158978147985);
      Vector vector0 = affineTransform0.translation();
      Line line0 = new Line(vector0, vector0);
      int int0 = line0.relativeCCW((XY) vector0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = new Rectangle();
      Point point0 = rectangle0.location();
      double double0 = line0.pointSegDist((XY) point0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Line line0 = new Line();
      boolean boolean0 = line0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Line line0 = new Line();
      Line line1 = line0.clone();
      assertNotSame(line1, line0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Line line0 = new Line((-3995.469220731), (-3995.469220731), 1793.731608536886, 1175.0);
      Point point0 = line0.p2();
      double double0 = line0.pointLineDist((XY) point0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = new Rectangle();
      Point point0 = rectangle0.location();
      Point point1 = line0.p2(point0);
      assertEquals(0.0, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = line0.intersects((IRectangle) rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Line line0 = new Line(1.0, 10.0, 1.0, 1.0);
      boolean boolean0 = line0.contains(0.0, (-767.399583139325));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Line line0 = new Line();
      Point point0 = line0.p1();
      assertEquals(0.0, point0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector vector0 = new Vector((-1.0), 399.368237);
      Line line0 = new Line(vector0, vector0);
      double double0 = line0.pointSegDistSq((XY) vector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Line line0 = new Line(1.0, 10.0, 1.0, 1.0);
      Rectangle rectangle0 = new Rectangle(3.141592653589793, 826.607, 10.0, (-1505.6356063));
      boolean boolean0 = line0.contains((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-3.4028234663852886E38), 1988.8158978147985, 2040.8926187749264, 1988.8158978147985, 1988.8158978147985, 1988.8158978147985);
      Vector vector0 = affineTransform0.translation();
      Line line0 = new Line(vector0, vector0);
      boolean boolean0 = line0.contains((XY) vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Line line0 = new Line();
      boolean boolean0 = line0.contains(0.0, 0.0, 0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Line line0 = new Line();
      double double0 = line0.pointSegDistSq(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Line line0 = new Line();
      double double0 = line0.pointSegDist((-1896.7), (-1896.7));
      assertEquals(2682.3388637530493, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Vector vector0 = new Vector((-1.0), 399.368237);
      Line line0 = new Line(vector0, vector0);
      AffineTransform affineTransform0 = new AffineTransform();
      PathIterator pathIterator0 = line0.pathIterator((Transform) affineTransform0, 399.368237);
      assertFalse(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Line line0 = new Line();
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0);
      AbstractLine.Iterator abstractLine_Iterator0 = new AbstractLine.Iterator(line0, affineTransform0);
      int int0 = abstractLine_Iterator0.windingRule();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Line line0 = new Line();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractLine.Iterator abstractLine_Iterator0 = new AbstractLine.Iterator(line0, identityTransform0);
      assertFalse(abstractLine_Iterator0.isDone());
      
      double[] doubleArray0 = new double[7];
      int int0 = abstractLine_Iterator0.currentSegment(doubleArray0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
