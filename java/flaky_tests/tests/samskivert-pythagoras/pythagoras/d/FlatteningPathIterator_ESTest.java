/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:33:28 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AbstractEllipse;
import pythagoras.d.AbstractQuadCurve;
import pythagoras.d.AbstractRoundRectangle;
import pythagoras.d.AffineTransform;
import pythagoras.d.Area;
import pythagoras.d.Dimension;
import pythagoras.d.Ellipse;
import pythagoras.d.FlatteningPathIterator;
import pythagoras.d.IdentityTransform;
import pythagoras.d.Path;
import pythagoras.d.PathIterator;
import pythagoras.d.QuadCurve;
import pythagoras.d.Rectangle;
import pythagoras.d.RoundRectangle;
import pythagoras.d.Transform;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FlatteningPathIterator_ESTest extends FlatteningPathIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Dimension dimension0 = new Dimension(0.0, 0.0);
      Rectangle rectangle0 = new Rectangle(dimension0);
      Area area0 = new Area(rectangle0);
      PathIterator pathIterator0 = area0.pathIterator((Transform) null);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0, 0);
      flatteningPathIterator0.windingRule();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Dimension dimension0 = new Dimension(0.0, 0.0);
      Rectangle rectangle0 = new Rectangle(dimension0);
      Area area0 = new Area(rectangle0);
      PathIterator pathIterator0 = area0.pathIterator((Transform) null);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0, 0);
      flatteningPathIterator0.recursionLimit();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(0.0, 0.0, 0.0, 1421.7162271845, 206.5259481, (-1014.0842445166392));
      AffineTransform affineTransform0 = new AffineTransform(1338.77032125374, (-954.352345232887), 1421.7162271845, 206.5259481, (-1498.61602));
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, affineTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(abstractRoundRectangle_Iterator0, 1421.7162271845);
      flatteningPathIterator0.flatness();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Path.Iterator path_Iterator0 = new Path.Iterator((Path) null, identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 0.0);
      // Undeclared exception!
      try { 
        flatteningPathIterator0.windingRule();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Path$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      IdentityTransform identityTransform0 = new IdentityTransform();
      Path path0 = new Path(quadCurve0);
      PathIterator pathIterator0 = path0.pathIterator((Transform) identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0, 2146970754);
      flatteningPathIterator0.next();
      // Undeclared exception!
      flatteningPathIterator0.evaluate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Path path0 = new Path();
      Path.Iterator path_Iterator0 = new Path.Iterator(path0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 1);
      // Undeclared exception!
      try { 
        flatteningPathIterator0.evaluate();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.d.Path$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Path.Iterator path_Iterator0 = new Path.Iterator((Path) null);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 1);
      // Undeclared exception!
      try { 
        flatteningPathIterator0.evaluate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Path$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractQuadCurve.Iterator abstractQuadCurve_Iterator0 = new AbstractQuadCurve.Iterator(quadCurve0, identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(abstractQuadCurve_Iterator0, 0.0, 0);
      flatteningPathIterator0.next();
      // Undeclared exception!
      try { 
        flatteningPathIterator0.evaluate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -6 out of bounds for length 0
         //
         verifyException("pythagoras.d.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      IdentityTransform identityTransform0 = new IdentityTransform();
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) identityTransform0, (double) 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        pathIterator0.currentSegment(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FlatteningPathIterator flatteningPathIterator0 = null;
      try {
        flatteningPathIterator0 = new FlatteningPathIterator((PathIterator) null, 1173.690846700286);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Path is null
         //
         verifyException("pythagoras.d.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-4285.729599137115), (-569.503719), (-569.503719), (-4285.729599137115), (-4285.729599137115), 225.790187);
      IdentityTransform identityTransform0 = new IdentityTransform();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)quadCurve0.pathIterator((Transform) identityTransform0, 225.790187);
      double[] doubleArray0 = new double[4];
      int int0 = flatteningPathIterator0.currentSegment(doubleArray0);
      assertEquals(225.790187, flatteningPathIterator0.flatness(), 0.01);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-4285.729599137115), (-569.503719), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-4285.729599137115), (-4285.729599137115), (-4285.729599137115), (-4285.729599137115), (-4285.729599137115), 225.790187);
      IdentityTransform identityTransform0 = new IdentityTransform();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)quadCurve0.pathIterator((Transform) identityTransform0, 225.790187);
      double[] doubleArray0 = new double[2];
      flatteningPathIterator0.next();
      int int0 = flatteningPathIterator0.currentSegment(doubleArray0);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-1875.0066996224878), (-1593.0367129889178)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      IdentityTransform identityTransform0 = new IdentityTransform();
      PathIterator pathIterator0 = quadCurve0.pathIterator((Transform) identityTransform0, (double) 0);
      // Undeclared exception!
      try { 
        pathIterator0.currentSegment((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle(0.0, 0.0, 0.0, 1421.7162271845, 206.5259481, (-1014.0842445166392));
      AffineTransform affineTransform0 = new AffineTransform((-1014.0842445166392), 2625.016772, 377.943849, 2625.016772, 2461.803350499542);
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, affineTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(abstractRoundRectangle_Iterator0, 2625.016772);
      double[] doubleArray0 = new double[9];
      int int0 = flatteningPathIterator0.currentSegment(doubleArray0);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertEquals(4, int0);
      assertEquals(2625.016772, flatteningPathIterator0.flatness(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      AffineTransform affineTransform0 = new AffineTransform(2477.23248532, 1367.214133166445, 0.0, (-2381.575573730445), 0.0);
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, affineTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(abstractRoundRectangle_Iterator0, 0.0);
      boolean boolean0 = flatteningPathIterator0.isDone();
      assertEquals(0.0, flatteningPathIterator0.flatness(), 0.01);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      QuadCurve quadCurve0 = new QuadCurve((-4285.729599137115), (-4285.729599137115), (-2526.23889), (-1396.31560537114), 1329.526089099, 0);
      AbstractQuadCurve.Iterator abstractQuadCurve_Iterator0 = new AbstractQuadCurve.Iterator(quadCurve0, identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(abstractQuadCurve_Iterator0, 0);
      flatteningPathIterator0.next();
      flatteningPathIterator0.evaluate();
      boolean boolean0 = flatteningPathIterator0.isDone();
      assertFalse(boolean0);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Area area0 = new Area();
      PathIterator pathIterator0 = area0.pathIterator((Transform) null);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0);
      boolean boolean0 = flatteningPathIterator0.isDone();
      assertEquals(0.0, flatteningPathIterator0.flatness(), 0.01);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Path.Iterator path_Iterator0 = new Path.Iterator((Path) null);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 0.0, 0);
      // Undeclared exception!
      try { 
        flatteningPathIterator0.isDone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Path$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      AffineTransform affineTransform0 = new AffineTransform();
      PathIterator pathIterator0 = ellipse0.pathIterator((Transform) affineTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 3990.07945031062);
      flatteningPathIterator0.next();
      flatteningPathIterator0.evaluate();
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertEquals(3990.07945031062, flatteningPathIterator0.flatness(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ellipse ellipse0 = new Ellipse();
      AbstractEllipse.Iterator abstractEllipse_Iterator0 = new AbstractEllipse.Iterator(ellipse0, identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(abstractEllipse_Iterator0, 0.0);
      flatteningPathIterator0.next();
      flatteningPathIterator0.evaluate();
      flatteningPathIterator0.evaluate();
      assertEquals(0.0, flatteningPathIterator0.flatness(), 0.01);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      IdentityTransform identityTransform0 = new IdentityTransform();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)quadCurve0.pathIterator((Transform) identityTransform0, (double) 1);
      flatteningPathIterator0.next();
      flatteningPathIterator0.evaluate();
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      IdentityTransform identityTransform0 = new IdentityTransform();
      PathIterator pathIterator0 = roundRectangle0.pathIterator((Transform) identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0, 1852628642);
      double[] doubleArray0 = new double[6];
      flatteningPathIterator0.next();
      flatteningPathIterator0.next();
      // Undeclared exception!
      flatteningPathIterator0.currentSegment(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      IdentityTransform identityTransform0 = new IdentityTransform();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)quadCurve0.pathIterator((Transform) identityTransform0, 0.0);
      flatteningPathIterator0.next();
      flatteningPathIterator0.evaluate();
      flatteningPathIterator0.next();
      assertEquals(0.0, flatteningPathIterator0.flatness(), 0.01);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Path path0 = new Path();
      Path.Iterator path_Iterator0 = new Path.Iterator(path0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 1);
      // Undeclared exception!
      try { 
        flatteningPathIterator0.currentSegment((double[]) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.d.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      IdentityTransform identityTransform0 = new IdentityTransform();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)quadCurve0.pathIterator((Transform) identityTransform0, 0.0);
      FlatteningPathIterator flatteningPathIterator1 = new FlatteningPathIterator(flatteningPathIterator0, 0.0, 0);
      flatteningPathIterator1.next();
      flatteningPathIterator1.evaluate();
      flatteningPathIterator1.evaluate();
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FlatteningPathIterator flatteningPathIterator0 = null;
      try {
        flatteningPathIterator0 = new FlatteningPathIterator((PathIterator) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Path is null
         //
         verifyException("pythagoras.d.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Path path0 = new Path();
      Path.Iterator path_Iterator0 = new Path.Iterator(path0);
      FlatteningPathIterator flatteningPathIterator0 = null;
      try {
        flatteningPathIterator0 = new FlatteningPathIterator(path_Iterator0, 1, (-1646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Limit is less then zero
         //
         verifyException("pythagoras.d.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FlatteningPathIterator flatteningPathIterator0 = null;
      try {
        flatteningPathIterator0 = new FlatteningPathIterator((PathIterator) null, (-2072.740265));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Flatness is less then zero
         //
         verifyException("pythagoras.d.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      IdentityTransform identityTransform0 = new IdentityTransform();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)quadCurve0.pathIterator((Transform) identityTransform0, (double) 0);
      flatteningPathIterator0.windingRule();
      assertEquals(0.0, flatteningPathIterator0.flatness(), 0.01);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      IdentityTransform identityTransform0 = new IdentityTransform();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)quadCurve0.pathIterator((Transform) identityTransform0, (double) 0);
      double double0 = flatteningPathIterator0.flatness();
      assertEquals(16, flatteningPathIterator0.recursionLimit());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      IdentityTransform identityTransform0 = new IdentityTransform();
      PathIterator pathIterator0 = roundRectangle0.pathIterator((Transform) identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(pathIterator0, 0.0, 1852628642);
      int int0 = flatteningPathIterator0.recursionLimit();
      assertEquals(0.0, flatteningPathIterator0.flatness(), 0.01);
      assertEquals(1852628642, int0);
  }
}
