/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:31:47 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.MathUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtil_ESTest extends MathUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = MathUtil.roundNearest((-1462.75990109013), 1);
      assertEquals((-1463.0), double0, 0.01);
      
      int int0 = MathUtil.ifloor(458.0389322);
      assertEquals(458, int0);
      
      double double1 = MathUtil.HALF_PI;
      assertEquals(1.5707963267948966, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.exponential(1, (-1463.0));
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      String string0 = MathUtil.toString(458.0389322);
      assertEquals("+458.038", string0);
      assertNotNull(string0);
      
      int int1 = MathUtil.ifloor(Double.NEGATIVE_INFINITY);
      assertEquals(Integer.MIN_VALUE, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      MathUtil.normalizeAnglePositive(2793534.723405363);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = MathUtil.toString((-3799.4));
      assertEquals("-3799.4", string0);
      assertNotNull(string0);
      
      double double0 = MathUtil.roundNearest(0.0, 313.4836640828);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = MathUtil.ifloor((-3799.4));
      assertEquals((-3800), int0);
      
      double double1 = MathUtil.roundNearest(0.0, 0.0);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int1 = MathUtil.iceil(Double.NaN);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      double double2 = MathUtil.normalizeAngle(3.141592653589793);
      assertEquals((-3.141592653589793), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = MathUtil.epsilonEquals(1748.16, 1.0);
      assertFalse(boolean0);
      
      int int0 = MathUtil.iceil((-330.38928124));
      assertEquals((-330), int0);
      
      double double0 = MathUtil.exponential(1748.16, 3.141592653589793);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean1 = MathUtil.isWithin(22.325306858466426, (-2876.435790465164), 141.70582769487865);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = MathUtil.iceil((-330.38928124));
      assertEquals((-330), int1);
      assertTrue(int1 == int0);
      
      String string0 = MathUtil.toString(Double.NaN, (-330));
      assertEquals("NaN", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = MathUtil.toString(1784.91382662);
      assertEquals("+1784.913", string0);
      assertNotNull(string0);
      
      double double0 = MathUtil.angularDistance(6.283185307179586, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtil.normalizeAngle(1.0);
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.angularDistance((-59.823031791277806), 1.0);
      assertEquals(54.53984648409822, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = MathUtil.normalizeAngle(320.2);
      assertEquals((-0.2424506661589092), double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = MathUtil.mirrorAngle(1.5707963267948966);
      assertEquals(1.5707963267948966, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      double double5 = MathUtil.normalizeAngle((-84.95577301999617));
      assertEquals(3.008821280518056, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      int int0 = MathUtil.iceil(1627.315546);
      assertEquals(1628, int0);
      
      double double6 = MathUtil.mirrorAngle((-1482.276145516));
      assertEquals(1479.1345528624101, double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      
      int int1 = MathUtil.ifloor(1.0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      double double7 = MathUtil.angularDistance((-138.42), (-482.8930796053566));
      assertEquals(344.4730796053566, double7, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      
      String string1 = MathUtil.toString((-482.8930796053566), 3);
      assertEquals("-482.893", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int2 = MathUtil.iceil(3.008821280518056);
      assertEquals(4, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string2 = MathUtil.toString((-222.97899));
      assertEquals("-222.978", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double double8 = MathUtil.normalizeAngle((-84.95577301999617));
      assertEquals(3.008821280518056, double8, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      
      double double9 = MathUtil.mirrorAngle((-3.141592653589793));
      assertEquals(0.0, double9, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(double9, double0, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      
      double double10 = MathUtil.angularDistance(1479.1345528624101, (-1.0));
      assertEquals(1473.8513675552304, double10, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double6, 0.01);
      
      int int3 = MathUtil.ifloor((-2045.0));
      assertEquals((-2045), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = MathUtil.roundNearest((-1463.33978318118), 719.0885453466326);
      assertEquals((-1438.1770906932652), double0, 0.01);
      
      int int0 = MathUtil.ifloor(458.0389322);
      assertEquals(458, int0);
      
      double double1 = MathUtil.roundNearest(3959.48977, (-1438.1770906932652));
      assertEquals(4314.531272079796, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.exponential(2122.3554067, (-1438.1770906932652));
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int1 = MathUtil.iceil(1);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string0 = MathUtil.toString(6.283185307179586, 458);
      assertEquals("+6.28318530717958623199592693708837032318115234375", string0);
      assertNotNull(string0);
      
      int int2 = MathUtil.ifloor(Double.NaN);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = MathUtil.epsilonEquals(1748.16, 2.365792694430901);
      assertFalse(boolean0);
      
      int int0 = MathUtil.iceil(1748.16);
      assertEquals(1749, int0);
      
      int int1 = MathUtil.ifloor(307.4608442);
      assertEquals(307, int1);
      assertFalse(int1 == int0);
      
      double double0 = MathUtil.exponential(3506.17, 1749);
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = MathUtil.toString(Double.NaN);
      assertEquals("NaN", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = MathUtil.exponential(10.0, 1.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = MathUtil.toString(Double.NaN, 3);
      assertEquals("NaN", string0);
      assertNotNull(string0);
      
      int int0 = MathUtil.ifloor((-1.0));
      assertEquals((-1), int0);
      
      String string1 = MathUtil.toString(1.0);
      assertEquals("+1.0", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = MathUtil.ifloor((-182.611463));
      assertEquals((-183), int0);
      
      boolean boolean0 = MathUtil.epsilonEquals((-183), (-182.611463));
      assertFalse(boolean0);
      
      int int1 = MathUtil.iceil((-1.0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double double0 = MathUtil.normalizeAngle((-3.141592653589793));
      assertEquals((-3.141592653589793), double0, 0.01);
      
      double double1 = MathUtil.angularDistance((-1), (-3.141592653589793));
      assertEquals(2.141592653589793, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = MathUtil.iceil((-567.4894249663));
      assertEquals((-567), int0);
      
      double double0 = MathUtil.angularDistance(3.141592653589793, 1715.52);
      assertEquals(1712.37840734641, double0, 0.01);
      
      double double1 = 1054.0715809099588;
      int int1 = MathUtil.ifloor(1054.0715809099588);
      assertEquals(1054, int1);
      assertFalse(int1 == int0);
      
      double double2 = 9.999999747378752E-6;
      double double3 = MathUtil.normalizeAngle(9.999999747378752E-6);
      assertEquals(9.999999747378752E-6, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = (-4361.00714948897);
      String string0 = MathUtil.toString((-4361.00714948897), (-567));
      assertEquals("-4361", string0);
      assertNotNull(string0);
      
      boolean boolean0 = MathUtil.epsilonEquals((-1.4063120258137545), 9.999999747378752E-6);
      assertFalse(boolean0);
      
      double double5 = 0.0;
      boolean boolean1 = MathUtil.epsilonEquals(0.0, 9.999999747378752E-6);
      assertFalse(boolean1);
      
      double double6 = MathUtil.mirrorAngle((-567));
      assertEquals(563.8584073464102, double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      
      // Undeclared exception!
      MathUtil.toString(937.9274216798674, 2146264508);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = MathUtil.iceil(1.0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 2996.8416457586;
      MathUtil.setToStringDecimalPlaces(21475);
      // Undeclared exception!
      MathUtil.toString(2996.8416457586);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = MathUtil.round(281.934);
      assertEquals(282, int0);
      
      int int1 = MathUtil.ifloor(4004.7196);
      assertEquals(4004, int1);
      assertFalse(int1 == int0);
      
      double double0 = MathUtil.roundNearest((-1216.8433282980388), 2425.351208);
      assertEquals((-2425.351208), double0, 0.01);
      
      double double1 = MathUtil.normalizeAngle(282);
      assertEquals((-0.7433388230815083), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int2 = MathUtil.round((-1216.8433282980388));
      assertEquals((-1217), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean0 = MathUtil.epsilonEquals((-1216.8433282980388), 4004.7196);
      assertFalse(boolean0);
      
      double double2 = MathUtil.normalizeAnglePositive((-2853.93901835007));
      assertEquals(4.910296416662256, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = MathUtil.normalizeAngle(4004.7196);
      assertEquals(2.3305593265452416, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      boolean boolean1 = MathUtil.epsilonEquals((-3731.9663236052), 558.429222);
      assertFalse(boolean1);
      
      double double4 = MathUtil.clamp((-31.08025981196067), (-1570.976), (-31.08025981196067));
      assertEquals((-31.08025981196067), double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      boolean boolean2 = MathUtil.epsilonEquals(4.910296416662256, 4.910296416662256);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      double double5 = MathUtil.exponential(558.429222, (-117.52552));
      assertEquals(Double.NaN, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      double double6 = MathUtil.normalizeAnglePositive(6.283185307179586);
      assertEquals(0.0, double6, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      
      double double7 = MathUtil.angularDistance(3242.61, 2.3305593265452416);
      assertEquals(3240.2794406734547, double7, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      
      double double8 = MathUtil.TWO_PI;
      assertEquals(6.283185307179586, double8, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      
      MathUtil mathUtil0 = new MathUtil();
      assertEquals(6.283185307179586, MathUtil.TAU, 0.01);
      assertEquals(1.5707963267948966, MathUtil.HALF_PI, 0.01);
      assertEquals(6.283185307179586, MathUtil.TWO_PI, 0.01);
      assertEquals(9.999999747378752E-6, MathUtil.EPSILON, 0.01);
      assertNotNull(mathUtil0);
      
      MathUtil.TO_STRING_DECIMAL_PLACES = (-1217);
      double double9 = MathUtil.lerp(282, 4004, 282);
      assertEquals(1049886.0, double9, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      
      double double10 = MathUtil.lerpa((-0.7433388230815083), 4004.7196, (-1.0));
      assertEquals((-3993.6399070318043), double10, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double6, 0.01);
      
      String string0 = MathUtil.toString(6.283185307179586);
      assertEquals("+6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      MathUtil.toString(2345.6387043587683, 1957935005);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = MathUtil.iceil(3563.7185273);
      assertEquals(3564, int0);
      
      boolean boolean0 = MathUtil.epsilonEquals(3564, 3563.7185273);
      assertFalse(boolean0);
      
      MathUtil mathUtil0 = new MathUtil();
      assertEquals(1.5707963267948966, MathUtil.HALF_PI, 0.01);
      assertEquals(9.999999747378752E-6, MathUtil.EPSILON, 0.01);
      assertEquals(6.283185307179586, MathUtil.TAU, 0.01);
      assertEquals(6.283185307179586, MathUtil.TWO_PI, 0.01);
      assertNotNull(mathUtil0);
      
      double double0 = MathUtil.normalizeAnglePositive(6.283185307179586);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = MathUtil.epsilonEquals(9.999999747378752E-6, 3564);
      assertFalse(boolean1);
      
      int int1 = MathUtil.ifloor((-150.6769));
      assertEquals((-151), int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = MathUtil.epsilonEquals((-421.5899), (-954.1670267));
      assertFalse(boolean2);
      
      MathUtil mathUtil1 = new MathUtil();
      assertEquals(9.999999747378752E-6, MathUtil.EPSILON, 0.01);
      assertEquals(6.283185307179586, MathUtil.TAU, 0.01);
      assertEquals(6.283185307179586, MathUtil.TWO_PI, 0.01);
      assertEquals(1.5707963267948966, MathUtil.HALF_PI, 0.01);
      assertNotNull(mathUtil1);
      assertFalse(mathUtil1.equals((Object)mathUtil0));
      
      MathUtil.setToStringDecimalPlaces(4842);
      double double1 = MathUtil.lerp(3563.7185273, 748.71, (-1.0));
      assertEquals(6378.7270546, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.angularDifference(748.71, 3.141592653589793);
      assertEquals(745.5684073464103, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      String string0 = MathUtil.toString(0.0);
      assertEquals("+0.0", string0);
      assertNotNull(string0);
      
      double double3 = MathUtil.lerp((-421.5899), 9.999999747378752E-6, 2225.10925967);
      assertEquals(937662.0226244413, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = MathUtil.mirrorAngle((-3908.4));
      assertEquals(3905.2584073464104, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      boolean boolean3 = MathUtil.isWithin((-197.25476002970112), (-1988.6205), 1.0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      double double5 = MathUtil.lerpa((-71.59105388610925), (-190.97157472252152), (-1785.328));
      assertEquals(213061.79544994415, double5, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      
      String string1 = MathUtil.toString((-82.8610636053072), 4842);
      assertEquals("-82.8610636053071942797032534144818782806396484375", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = MathUtil.angularDifference((-115.4157581082668), (-115.4157581082668));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtil.clamp(9.999999747378752E-6, (-2015.1042660249755), (-995.24));
      assertEquals((-995.24), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.clamp(9.999999747378752E-6, (-182.0), (-995.24));
      assertEquals((-995.24), double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = MathUtil.angularDifference(9.999999747378752E-6, (-1.0));
      assertEquals(1.0000099999997474, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      String string0 = MathUtil.toString(458.45747558076);
      assertEquals("+458.457", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = MathUtil.exponential(0.0, 0.0);
      assertEquals(-0.0, double0, 0.01);
      
      String string0 = MathUtil.toString(0.0, 0);
      assertEquals("+0", string0);
      assertNotNull(string0);
      
      MathUtil mathUtil0 = new MathUtil();
      assertEquals(1.5707963267948966, MathUtil.HALF_PI, 0.01);
      assertEquals(9.999999747378752E-6, MathUtil.EPSILON, 0.01);
      assertEquals(6.283185307179586, MathUtil.TWO_PI, 0.01);
      assertEquals(6.283185307179586, MathUtil.TAU, 0.01);
      assertNotNull(mathUtil0);
      
      String string1 = MathUtil.toString(6.283185307179586);
      assertEquals("+6.283", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      MathUtil.setToStringDecimalPlaces(0);
      String string2 = MathUtil.toString((double) 0, 0);
      assertEquals("+0", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = MathUtil.toString((-1707.98286722));
      assertEquals("-1707", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = MathUtil.toString((-1.0));
      assertEquals("-1", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = MathUtil.toString(0.0);
      assertEquals("+0", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      
      String string6 = MathUtil.toString(1804.0);
      assertEquals("+1804", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean0 = MathUtil.isWithin((-1733.33904201881), 1804.0, 1804.0);
      assertFalse(boolean0);
      
      MathUtil.setToStringDecimalPlaces(48);
      String string7 = MathUtil.toString(0.0, 48);
      assertEquals("+0.0", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      
      double double1 = MathUtil.angularDifference((-2332.784885770721), (-1733.33904201881));
      assertEquals((-599.4458437519108), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.normalizeAngle((-3631.0));
      assertEquals(0.6811075498466792, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = MathUtil.lerpa(6.283185307179586, 0.0, 9.999999747378752E-6);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      double double4 = MathUtil.lerpa((-2332.784885770721), (-1.0), (-1733.33904201881));
      assertEquals((-4044106.5649815323), double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      String string8 = MathUtil.toString(0.0);
      assertEquals("+0.0", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      
      double double5 = MathUtil.lerp(0.0, 0.0, 1804.0);
      assertEquals(0.0, double5, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      
      double double6 = MathUtil.mirrorAngle(6.283185307179586);
      assertEquals((-3.141592653589793), double6, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      
      double double7 = MathUtil.roundNearest((-3631.0), (-4044106.5649815323));
      assertEquals(-0.0, double7, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MathUtil.setToStringDecimalPlaces(0);
      double double0 = MathUtil.clamp(0.0, 0.0, (-1.0));
      assertEquals((-1.0), double0, 0.01);
      
      double double1 = MathUtil.normal(0.0, 0, (-1835.6));
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.roundNearest((-1835.6), 1782.884);
      assertEquals((-1782.884), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = MathUtil.angularDifference(1015.97827295, 1015.97827295);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = MathUtil.angularDifference(0, 1015.97827295);
      assertEquals((-1009.6950876428205), double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      double double5 = MathUtil.clamp(540.6699879799944, 0.0, 0.0);
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      
      String string0 = MathUtil.toString((double) 0);
      assertEquals("+0", string0);
      assertNotNull(string0);
      
      int int0 = MathUtil.round((-1.0));
      assertEquals((-1), int0);
      
      double double6 = MathUtil.normal((-1835.6), (-1.0), 0.0);
      assertEquals((-1.0), double6, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double0, 0.01);
      
      boolean boolean0 = MathUtil.isWithin(0.0, 0.0, 1015.97827295);
      assertTrue(boolean0);
      
      double double7 = MathUtil.lerpa(540.6699879799944, (-1), 0.0);
      assertEquals(534.3868026728148, double7, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      
      MathUtil mathUtil0 = new MathUtil();
      assertEquals(1.5707963267948966, MathUtil.HALF_PI, 0.01);
      assertEquals(9.999999747378752E-6, MathUtil.EPSILON, 0.01);
      assertEquals(6.283185307179586, MathUtil.TWO_PI, 0.01);
      assertEquals(6.283185307179586, MathUtil.TAU, 0.01);
      assertNotNull(mathUtil0);
      
      String string1 = MathUtil.toString(0.0, (-1));
      assertEquals("+0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = MathUtil.toString(0.0);
      assertEquals("+0", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = MathUtil.epsilonEquals(6.283185307179586, 0.5);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double8 = MathUtil.lerp(0.0, 1.0, 0.0);
      assertEquals(0.0, double8, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = MathUtil.isWithin(0.0, 0.0, 0.0);
      assertTrue(boolean0);
      
      double double0 = MathUtil.lerp(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtil.exponential(3626.772416, 1164.838644000942);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.normalizeAnglePositive(0.0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int0 = MathUtil.iceil(0.0);
      assertEquals(0, int0);
      
      double double3 = MathUtil.lerpa((-2802.7954), 0.0, 0.0);
      assertEquals((-2802.7954), double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      boolean boolean1 = MathUtil.epsilonEquals(1.0, 0.0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MathUtil mathUtil0 = new MathUtil();
      assertEquals(6.283185307179586, MathUtil.TAU, 0.01);
      assertEquals(1.5707963267948966, MathUtil.HALF_PI, 0.01);
      assertEquals(9.999999747378752E-6, MathUtil.EPSILON, 0.01);
      assertEquals(6.283185307179586, MathUtil.TWO_PI, 0.01);
      assertNotNull(mathUtil0);
      
      String string0 = MathUtil.toString((-150.8));
      assertEquals("-150.8", string0);
      assertNotNull(string0);
      
      String string1 = MathUtil.toString(1.5707963267948966);
      assertEquals("+1.57", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = MathUtil.isWithin(0.0, 0.0, 0.0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      
      double double4 = MathUtil.lerpa((-1.0), (-532.904895975297), (-1.0));
      assertEquals(530.904895975297, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      boolean boolean3 = MathUtil.isWithin(9.999999747378752E-6, 0.0, 0.0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      double double5 = MathUtil.angularDifference(596.9490954948, 0.0);
      assertEquals(590.6659101876204, double5, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      String string2 = MathUtil.toString(0.0, 2072);
      assertEquals("+0.0", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = MathUtil.lerpa(1.5707963267948966, 1.5707963267948966, 3160.1127953007);
      assertEquals(1.5707963267948966, double0, 0.01);
      
      double double1 = MathUtil.roundNearest(1209.3731702, 1.5707963267948966);
      assertEquals(1209.5131716320705, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.angularDistance(1.5707963267948966, 1209.3731702);
      assertEquals(1207.802373873205, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = MathUtil.normalizeAngle((-1.0));
      assertEquals((-1.0), double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = MathUtil.lerp((-1.0), 0.0, (-5334.388666619485));
      assertEquals((-5335.388666619485), double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = (-1692.525992926);
      double double1 = MathUtil.lerp((-1.0), (-1692.525992926), (-1692.525992926));
      assertEquals(2862950.7107372163, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = 9.999999747378752E-6;
      double double3 = MathUtil.lerpa(9.999999747378752E-6, (-1692.525992926), (-1692.525992926));
      assertEquals(2854003.5160293225, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      int int0 = 1;
      String string0 = MathUtil.toString((-1.0), 1);
      assertEquals("-1.0", string0);
      assertNotNull(string0);
      
      double double4 = MathUtil.exponential((-4016.0), 0.0);
      assertEquals(-0.0, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      
      double double5 = MathUtil.roundNearest((-1692.525992926), (-1692.525992926));
      assertEquals((-1692.525992926), double5, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      
      double double6 = MathUtil.lerpa(9.999999747378752E-6, 1, 0.0);
      assertEquals(9.999999747378752E-6, double6, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double4, 0.01);
      
      MathUtil.setToStringDecimalPlaces(1);
      double double7 = MathUtil.normal(1, (-1692.525992926), 0.0);
      assertEquals((-1692.525992926), double7, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      
      int int1 = MathUtil.iceil(0.0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      MathUtil.normalizeAngle(2854003.5160293225);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = MathUtil.toString((-3799.4));
      assertEquals("-3799.4", string0);
      assertNotNull(string0);
      
      boolean boolean0 = MathUtil.isWithin((-3799.4), 1103.0, (-3799.4));
      assertFalse(boolean0);
      
      int int0 = MathUtil.TO_STRING_DECIMAL_PLACES;
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = MathUtil.epsilonEquals((-1307.6040064017673), 0.0);
      assertFalse(boolean0);
      
      double double0 = MathUtil.exponential(0.0, (-1307.6040064017673));
      assertEquals(0.0, double0, 0.01);
      
      String string0 = MathUtil.toString(0.0);
      assertEquals("+0.0", string0);
      assertNotNull(string0);
      
      int int0 = MathUtil.ifloor(0.0);
      assertEquals(0, int0);
      
      double double1 = MathUtil.normalizeAngle((-1415.231));
      assertEquals((-1.5143058845967943), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean1 = MathUtil.isWithin(0.0, (-1.5143058845967943), 0.0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = MathUtil.toString(0.0);
      assertEquals("+0.0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      double double2 = MathUtil.lerp(816.7462990608, 0.5, 0);
      assertEquals(816.7462990608, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = MathUtil.lerp((-560.7858), 0.0, 0.0);
      assertEquals((-560.7858), double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      String string2 = MathUtil.toString(0.0, (-1356));
      assertEquals("+0", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      double double4 = MathUtil.roundNearest(0.0, 0.0);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      boolean boolean2 = MathUtil.isWithin((-3931.7568602802), 31.86514394712304, 3.141592653589793);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        MathUtil.setToStringDecimalPlaces((-1356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Decimal places must be >= 0.
         //
         verifyException("pythagoras.d.MathUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MathUtil mathUtil0 = new MathUtil();
      assertEquals(6.283185307179586, MathUtil.TWO_PI, 0.01);
      assertEquals(6.283185307179586, MathUtil.TAU, 0.01);
      assertEquals(1.5707963267948966, MathUtil.HALF_PI, 0.01);
      assertEquals(9.999999747378752E-6, MathUtil.EPSILON, 0.01);
      assertNotNull(mathUtil0);
      
      String string0 = MathUtil.toString(1.5707963267948966);
      assertEquals("+1.57", string0);
      assertNotNull(string0);
      
      String string1 = MathUtil.toString(686.5698464975);
      assertEquals("+686.569", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = MathUtil.toString((-2099.2), 2350);
      assertEquals("-2099.1999999999998181010596454143524169921875", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      MathUtil.setToStringDecimalPlaces(3);
      MathUtil.setToStringDecimalPlaces(3);
      MathUtil.TO_STRING_DECIMAL_PLACES = 2350;
      double double0 = MathUtil.lerp(1.5707963267948966, (-4989.56), 9.999999747378752E-6);
      assertEquals(1.5208850200924944, double0, 0.01);
      
      boolean boolean0 = MathUtil.isWithin(6.283185307179586, 6.283185307179586, 9.999999747378752E-6);
      assertFalse(boolean0);
      
      double double1 = MathUtil.lerp(2350, 3076.88525, 2350);
      assertEquals(1710530.3374999997, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      String string3 = MathUtil.toString(0.0);
      assertEquals("+0.0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = MathUtil.toString(0.0);
      assertEquals("+0.0", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = MathUtil.round(1.5707963267948966);
      assertEquals(2, int0);
      
      double double2 = MathUtil.mirrorAngle(2);
      assertEquals(1.1415926535897931, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      boolean boolean1 = MathUtil.epsilonEquals((-2099.2), (-4989.56));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = MathUtil.mirrorAngle((-1.0));
      assertEquals((-2.141592653589793), double0, 0.01);
      
      int int0 = MathUtil.round(10.0);
      assertEquals(10, int0);
      
      int int1 = MathUtil.ifloor((-1.0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double double1 = MathUtil.roundNearest((-117.52552), (-1));
      assertEquals((-118.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.normalizeAngle(10.0);
      assertEquals((-2.5663706143591725), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      int int2 = MathUtil.round((-1.0));
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      
      boolean boolean0 = MathUtil.epsilonEquals((-2.141592653589793), (-1.0));
      assertFalse(boolean0);
      
      double double3 = MathUtil.normalizeAnglePositive((-3731.9663236052));
      assertEquals(0.24574885952342385, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = MathUtil.normalizeAngle(0.24574885952342385);
      assertEquals(0.24574885952342385, double4, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      boolean boolean1 = MathUtil.epsilonEquals(10.0, 0.24574885952342385);
      assertFalse(boolean1);
      
      double double5 = MathUtil.clamp(10.0, (-1570.976), (-117.52552));
      assertEquals((-117.52552), double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      
      boolean boolean2 = MathUtil.epsilonEquals((-1.0), 1799.691959766);
      assertFalse(boolean2);
      
      double double6 = MathUtil.exponential((-1), 1356.9837565554906);
      assertEquals((-940.5894649220814), double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      
      double double7 = MathUtil.normalizeAnglePositive(10.0);
      assertEquals(3.7168146928204138, double7, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      
      double double8 = MathUtil.angularDistance((-3731.9663236052), 1356.9837565554906);
      assertEquals(5082.666894853512, double8, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      
      double double9 = MathUtil.roundNearest((-2.5663706143591725), 1878.425237947639);
      assertEquals(-0.0, double9, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double1, 0.01);
      
      MathUtil mathUtil0 = new MathUtil();
      assertEquals(1.5707963267948966, MathUtil.HALF_PI, 0.01);
      assertEquals(9.999999747378752E-6, MathUtil.EPSILON, 0.01);
      assertEquals(6.283185307179586, MathUtil.TWO_PI, 0.01);
      assertEquals(6.283185307179586, MathUtil.TAU, 0.01);
      assertNotNull(mathUtil0);
      
      double double10 = MathUtil.lerp((-4518.67034), 1356.9837565554906, 9.999999747378752E-6);
      assertEquals((-4518.611583460518), double10, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double2, 0.01);
      
      double double11 = MathUtil.lerpa(830.0, 0.24574885952342385, (-3713.0325123));
      assertEquals(3081734.5117037287, double11, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double6, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = MathUtil.ifloor((-1635.0));
      assertEquals((-1635), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = MathUtil.iceil(671.1);
      assertEquals(672, int0);
      
      double double0 = MathUtil.normalizeAngle(672);
      assertEquals((-0.3008278682145331), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = MathUtil.ifloor((-80.01312281691273));
      assertEquals((-81), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = MathUtil.isWithin(0.0, 0.0, 1171.310038);
      assertTrue(boolean0);
      
      double double0 = MathUtil.angularDistance(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = MathUtil.iceil(0.0);
      assertEquals(0, int0);
      
      double double1 = MathUtil.mirrorAngle(936.6469922237);
      assertEquals((-933.5053995701102), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.angularDistance(936.6469922237, (-2579.0));
      assertEquals(3509.3638069165204, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int1 = MathUtil.ifloor(1681.01878096);
      assertEquals(1681, int1);
      assertFalse(int1 == int0);
      
      double double3 = MathUtil.angularDifference((-1058.0), 3246.078773);
      assertEquals((-4297.795587692821), double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      boolean boolean1 = MathUtil.epsilonEquals((-4297.795587692821), (-1725.0972902878966));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int2 = MathUtil.round(0.0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      
      double double4 = MathUtil.roundNearest(0.0, (-274.587));
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      
      double double5 = MathUtil.exponential(0.0, 0.0);
      assertEquals(-0.0, double5, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      
      double double6 = MathUtil.roundNearest(0.0, 0.0);
      assertEquals(Double.NaN, double6, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      
      MathUtil.setToStringDecimalPlaces(Integer.MAX_VALUE);
      String string0 = MathUtil.toString(0.0, 0);
      assertEquals("+0", string0);
      assertNotNull(string0);
      
      double double7 = MathUtil.lerpa(0.0, (-2579.0), (-4297.795587692821));
      assertEquals(1.1084014820659785E7, double7, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      
      double double8 = MathUtil.angularDifference((-1.0), 0.0);
      assertEquals((-1.0), double8, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = MathUtil.normalizeAnglePositive((-2669.67137));
      assertEquals(0.6823855513384345, double0, 0.01);
      
      double double1 = MathUtil.normalizeAngle((-2669.67137));
      assertEquals(0.6823855513384345, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = MathUtil.toString((-1.0), 0);
      assertEquals("-1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = MathUtil.epsilonEquals(0, 0);
      assertTrue(boolean0);
      
      double double0 = MathUtil.roundNearest(0, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathUtil.clamp(0.0, 0.0, (-124.332715));
      assertEquals((-124.332715), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathUtil.setToStringDecimalPlaces(0);
      int int0 = MathUtil.iceil(1304.554);
      assertEquals(1305, int0);
      
      double double2 = MathUtil.lerpa(0.0, 3315.4315, 0.0);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = MathUtil.epsilonEquals(1459.71928, (-1117.0));
      assertFalse(boolean0);
      
      int int0 = MathUtil.round((-1.0));
      assertEquals((-1), int0);
      
      double double0 = MathUtil.normalizeAnglePositive(0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = MathUtil.toString((-556.6598316679), (-1));
      assertEquals("-556", string0);
      assertNotNull(string0);
      
      MathUtil mathUtil0 = new MathUtil();
      assertEquals(6.283185307179586, MathUtil.TWO_PI, 0.01);
      assertEquals(6.283185307179586, MathUtil.TAU, 0.01);
      assertEquals(9.999999747378752E-6, MathUtil.EPSILON, 0.01);
      assertEquals(1.5707963267948966, MathUtil.HALF_PI, 0.01);
      assertNotNull(mathUtil0);
      
      MathUtil.TO_STRING_DECIMAL_PLACES = (-1);
      MathUtil.TO_STRING_DECIMAL_PLACES = 48;
      boolean boolean1 = MathUtil.isWithin(9.999999747378752E-6, (-1941.978908823267), 6.283185307179586);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = MathUtil.iceil((-556.6598316679));
      assertEquals((-556), int1);
      assertFalse(int1 == int0);
      
      int int2 = MathUtil.iceil((-556.6598316679));
      assertEquals((-556), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean2 = MathUtil.epsilonEquals((-558.9259892662079), (-1941.978908823267));
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      double double1 = MathUtil.lerp(6.283185307179586, 1.0, 0.0);
      assertEquals(6.283185307179586, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.normalizeAnglePositive(3392.36771);
      assertEquals(5.730829430165002, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = MathUtil.normalizeAngle(9.999999747378752E-6);
      assertEquals(9.999999747378752E-6, double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = MathUtil.lerp((-1.0), 0.0, 3392.36771);
      assertEquals(3391.36771, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = MathUtil.iceil((-2765.4));
      assertEquals((-2765), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = MathUtil.round(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = MathUtil.roundNearest((-3889.078082051129), 3.141592653589793);
      assertEquals((-3889.291705144164), double0, 0.01);
      
      double double1 = MathUtil.angularDistance(3.141592653589793, 0.0);
      assertEquals(3.141592653589793, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.normal(0.0, 6.283185307179586, 0.0);
      assertEquals(6.283185307179586, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = MathUtil.lerpa((-3889.078082051129), 6.283185307179586, 1.0);
      assertEquals((-1.2434497875801753E-13), double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = MathUtil.mirrorAngle(1.0);
      assertEquals(2.141592653589793, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      int int0 = MathUtil.ifloor(0.0);
      assertEquals(0, int0);
      
      double double5 = MathUtil.angularDistance(2.141592653589793, 2253.4);
      assertEquals(2251.2584073464104, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      double double6 = MathUtil.angularDifference(0.0, 3773.8672841);
      assertEquals((-3767.5840987928204), double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      
      MathUtil.setToStringDecimalPlaces(1);
      MathUtil.setToStringDecimalPlaces(1);
      double double7 = MathUtil.normal(2253.4, (-2149.862476915871), 1.5707963267948966);
      assertEquals(1389.7699658837491, double7, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      
      int int1 = MathUtil.iceil(3.141592653589793);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      double double8 = MathUtil.clamp(0.0, 0.0, 1);
      assertEquals(0.0, double8, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      
      double double9 = MathUtil.normalizeAngle(0.0);
      assertEquals(0.0, double9, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double8, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double0, 0.01);
      
      double double10 = MathUtil.lerpa((-3889.078082051129), 0.0, 0.0);
      assertEquals((-3889.078082051129), double10, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double8, 0.01);
      
      double double11 = MathUtil.lerp(4, 0.0, 0.0);
      assertEquals(4.0, double11, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double1, 0.01);
      
      String string0 = MathUtil.toString(831.078494217846);
      assertEquals("+831.0", string0);
      assertNotNull(string0);
      
      int int2 = MathUtil.round(1389.7699658837491);
      assertEquals(1390, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double12 = MathUtil.lerpa(0.0, 2423.134882939239, 3.141592653589793);
      assertEquals(7592.763538096899, double12, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double6, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = MathUtil.normalizeAngle(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtil.normalizeAngle((-1432.4161302));
      assertEquals(0.15011983694189013, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathUtil.epsilonEquals((-1432.4161302), 0.0);
      assertFalse(boolean0);
      
      double double2 = MathUtil.exponential(0.0, 1091.23346889);
      assertEquals(-0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = MathUtil.roundNearest(0.0, 1561.8822);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = MathUtil.lerpa(0.15011983694189013, 1091.23346889, 892.7703998);
      assertEquals(974087.0678690585, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      double double5 = MathUtil.exponential((-336.95593), 0.15011983694189013);
      assertEquals((-0.8741351257417114), double5, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      
      double double6 = MathUtil.roundNearest(0.0, 1.0);
      assertEquals(0.0, double6, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      
      String string0 = MathUtil.toString(1.0, 3108);
      assertEquals("+1.0", string0);
      assertNotNull(string0);
      
      double double7 = MathUtil.angularDistance(1561.8822, (-0.8741351257417114));
      assertEquals(1556.473149818562, double7, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MathUtil mathUtil0 = new MathUtil();
      assertEquals(6.283185307179586, MathUtil.TAU, 0.01);
      assertEquals(9.999999747378752E-6, MathUtil.EPSILON, 0.01);
      assertEquals(1.5707963267948966, MathUtil.HALF_PI, 0.01);
      assertEquals(6.283185307179586, MathUtil.TWO_PI, 0.01);
      assertNotNull(mathUtil0);
      
      MathUtil.setToStringDecimalPlaces(142);
      String string0 = MathUtil.toString(6.283185307179586, Integer.MIN_VALUE);
      assertEquals("+6", string0);
      assertNotNull(string0);
      
      MathUtil.setToStringDecimalPlaces(142);
      double double0 = MathUtil.mirrorAngle((-2253.24478));
      assertEquals(2250.1031873464103, double0, 0.01);
      
      double double1 = MathUtil.angularDistance((-290.642630903137), 2250.1031873464103);
      assertEquals(2534.4626329423677, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.clamp(2250.1031873464103, 9.999999747378752E-6, 0.0);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int0 = MathUtil.iceil(0.5);
      assertEquals(1, int0);
      
      double double3 = MathUtil.normalizeAnglePositive((-2222.0));
      assertEquals(2.247598741573235, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = MathUtil.angularDifference((-787.42), (-787.42));
      assertEquals(0.0, double0, 0.01);
      
      MathUtil.setToStringDecimalPlaces(1);
      double double1 = MathUtil.normalizeAnglePositive(0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      String string0 = MathUtil.toString(2996.8416457586);
      assertEquals("+2996.8", string0);
      assertNotNull(string0);
      
      double double2 = MathUtil.angularDistance(0.0, 1);
      assertEquals(1.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int0 = MathUtil.ifloor(1);
      assertEquals(1, int0);
      
      int int1 = MathUtil.iceil(1.0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = MathUtil.iceil(1293.2);
      assertEquals(1294, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = MathUtil.angularDifference((-787.42), (-787.42));
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathUtil.isWithin(2996.8416457586, (-787.42), 0.0);
      assertFalse(boolean0);
      
      MathUtil.setToStringDecimalPlaces(1);
      double double1 = MathUtil.normalizeAnglePositive(0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      String string0 = MathUtil.toString(2996.8416457586);
      assertEquals("+2996.8", string0);
      assertNotNull(string0);
      
      double double2 = MathUtil.angularDistance(0.0, 1);
      assertEquals(1.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      MathUtil.setToStringDecimalPlaces(1);
      int int0 = MathUtil.iceil(9.999999747378752E-6);
      assertEquals(1, int0);
      
      double double3 = MathUtil.angularDistance(1, (-1.0));
      assertEquals(2.0, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = MathUtil.TO_STRING_DECIMAL_PLACES;
      assertEquals(3, int0);
      
      int int1 = MathUtil.iceil(3);
      assertEquals(3, int1);
      
      int int2 = MathUtil.ifloor((-1.0));
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double0 = MathUtil.normalizeAngle((-1.0));
      assertEquals((-1.0), double0, 0.01);
      
      boolean boolean0 = MathUtil.isWithin(556.73547, 3, (-1.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = MathUtil.isWithin((-2325.0337951), (-2325.0337951), (-2325.0337951));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MathUtil.setToStringDecimalPlaces(1);
      String string0 = MathUtil.toString((double) 1, 1);
      assertEquals("+1.0", string0);
      assertNotNull(string0);
      
      MathUtil.setToStringDecimalPlaces(1);
      int int0 = MathUtil.iceil(9.999999747378752E-6);
      assertEquals(1, int0);
      
      double double0 = MathUtil.angularDistance(1, 9.999999747378752E-6);
      assertEquals(0.9999900000002526, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathUtil.setToStringDecimalPlaces((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Decimal places must be >= 0.
         //
         verifyException("pythagoras.d.MathUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MathUtil mathUtil0 = new MathUtil();
      assertEquals(6.283185307179586, MathUtil.TWO_PI, 0.01);
      assertEquals(6.283185307179586, MathUtil.TAU, 0.01);
      assertEquals(1.5707963267948966, MathUtil.HALF_PI, 0.01);
      assertEquals(9.999999747378752E-6, MathUtil.EPSILON, 0.01);
      assertNotNull(mathUtil0);
      
      // Undeclared exception!
      try { 
        MathUtil.setToStringDecimalPlaces((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Decimal places must be >= 0.
         //
         verifyException("pythagoras.d.MathUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = MathUtil.roundNearest((-1463.33978318118), 719.0885453466326);
      assertEquals((-1438.1770906932652), double0, 0.01);
      
      int int0 = MathUtil.iceil(719.0885453466326);
      assertEquals(720, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = MathUtil.angularDifference(1179.4803804763, 340.5);
      assertEquals(838.9803804763, double0, 0.01);
      
      double double1 = MathUtil.mirrorAngle((-1242.1698247));
      assertEquals(1239.02823204641, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.lerpa((-1914.313736994), 491.4064651693532, 340.5);
      assertEquals(815093.990502533, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = MathUtil.angularDifference(0.0, 1239.02823204641);
      assertEquals((-1232.7450467392302), double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = MathUtil.normalizeAnglePositive(3280.0);
      assertEquals(0.17726965222146163, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double double0 = MathUtil.angularDistance(1.0, 1.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtil.clamp(0.0, (-1.0), 1.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = MathUtil.toString(2276.109074033549, 1);
      assertEquals("+2276.1", string0);
      assertNotNull(string0);
      
      double double0 = MathUtil.clamp(3.141592653589793, (-1575.4131670587235), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      MathUtil mathUtil0 = new MathUtil();
      assertEquals(6.283185307179586, MathUtil.TWO_PI, 0.01);
      assertEquals(9.999999747378752E-6, MathUtil.EPSILON, 0.01);
      assertEquals(1.5707963267948966, MathUtil.HALF_PI, 0.01);
      assertEquals(6.283185307179586, MathUtil.TAU, 0.01);
      assertNotNull(mathUtil0);
      
      boolean boolean0 = MathUtil.isWithin(9.999999747378752E-6, 0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = MathUtil.normal(1.0, (-1929.337), 0.0);
      assertEquals((-1929.337), double0, 0.01);
      
      double double1 = MathUtil.clamp((-1929.337), 1.0, 0.0);
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double double0 = MathUtil.angularDistance(1.0, 1.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtil.clamp(0.0, 0.0, 1.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double double0 = MathUtil.angularDifference(824.715, 0.02327);
      assertEquals(824.69173, double0, 0.01);
      
      int int0 = MathUtil.ifloor(0.0);
      assertEquals(0, int0);
      
      String string0 = MathUtil.toString(1.0);
      assertEquals("+1.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = MathUtil.lerpa(1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      assertEquals(1.5707963267948966, double0, 0.01);
      
      double double1 = MathUtil.roundNearest(1.5707963267948966, 1.5707963267948966);
      assertEquals(1.5707963267948966, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.angularDistance(1.5707963267948966, 1.5707963267948966);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = MathUtil.normalizeAngle((-1.0));
      assertEquals((-1.0), double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = MathUtil.toString(9.999999747378752E-6);
      assertEquals("+0.0", string0);
      
      MathUtil.mirrorAngle(9.999999747378752E-6);
      double double0 = MathUtil.normal(9.999999747378752E-6, 459.0, 0.0);
      assertEquals(459.0, double0, 0.01);
      
      double double1 = MathUtil.lerpa(459.0, 459.0, 3.141592653589793);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathUtil.lerpa(1.5707963267948966, (-3.141592653589793), (-2439.0));
      assertEquals((-3829.601444725958), double2, 0.01);
      
      double double3 = MathUtil.exponential((-4314.2402), 1093.672);
      assertEquals((-9153.934315552024), double3, 0.01);
      
      double double4 = MathUtil.normalizeAnglePositive(459.0);
      assertEquals(0.327472575890674, double4, 0.01);
      
      MathUtil.lerp((-3829.601444725958), 42.57274886635888, 1093.672);
      String string1 = MathUtil.toString((-2228.0));
      assertEquals("-2228.0", string1);
      
      double double5 = MathUtil.angularDifference(0.0, 4231058.89320977);
      assertEquals((-4231052.610024463), double5, 0.01);
      
      double double6 = MathUtil.normalizeAnglePositive((-3.141592653589793));
      double double7 = MathUtil.clamp(459.0, (-2228.0), 3.1415826535900457);
      assertEquals(double7, double6, 0.01);
      assertEquals(3.1415826535900457, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = MathUtil.toString(1.0);
      assertEquals("+1.0", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = MathUtil.toString((-1092.316201158663), (-1111));
      assertEquals("-1092", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = MathUtil.toString((-3799.4));
      assertEquals("-3799.4", string0);
      
      double double0 = MathUtil.roundNearest(0.0, 313.4836640828);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = MathUtil.ifloor((-3799.4));
      assertEquals((-3800), int0);
      
      double double1 = MathUtil.exponential((-3800), (-3800));
      assertEquals(31323.473982159147, double1, 0.01);
      
      boolean boolean0 = MathUtil.isWithin(0.0, (-1505.045038216), (-442.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = MathUtil.toString(3.141592653589793);
      assertEquals("+3.141", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MathUtil.lerp((-2959.99), (-2959.99), (-2959.99));
      MathUtil.lerp((-2959.99), 1716.35, (-2959.99));
      double double0 = MathUtil.lerpa((-2959.99), (-2207.0), (-2207.0));
      assertEquals((-1664808.9199999995), double0, 0.01);
      
      boolean boolean0 = MathUtil.epsilonEquals(0.0, (-2562.4));
      assertFalse(boolean0);
      
      double double1 = MathUtil.mirrorAngle(1.0);
      assertEquals(2.141592653589793, double1, 0.01);
      
      double double2 = MathUtil.normalizeAnglePositive(2279.4834777);
      assertEquals(4.970396500988343, double2, 0.01);
      
      double double3 = MathUtil.roundNearest((-1034.442046551605), 338.6249);
      assertEquals((-1015.8747000000001), double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = MathUtil.epsilonEquals(1293.2, 1293.2);
      assertTrue(boolean0);
      
      int int0 = MathUtil.iceil(1293.2);
      assertEquals(1294, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MathUtil mathUtil0 = new MathUtil();
      String string0 = MathUtil.toString(4378.14150370932);
      assertEquals("+4378.141", string0);
      
      MathUtil.setToStringDecimalPlaces(0);
      MathUtil.setToStringDecimalPlaces(0);
      double double0 = MathUtil.angularDistance(0.0, 291.0519069596047);
      assertEquals(284.76872165242514, double0, 0.01);
      
      boolean boolean0 = MathUtil.isWithin(6.283185307179586, 1.5707963267948966, 1.5707963267948966);
      assertFalse(boolean0);
      
      double double1 = MathUtil.angularDifference(6.283185307179586, 0.0);
      assertEquals(0.0, double1, 0.01);
      
      String string1 = MathUtil.toString((-1.0), 0);
      assertEquals("-1", string1);
      
      double double2 = MathUtil.mirrorAngle((-1.0));
      assertEquals((-2.141592653589793), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = MathUtil.ifloor(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double double0 = MathUtil.roundNearest(0.0, 313.4836640828);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double double0 = MathUtil.angularDistance(87.72214363435532, 87.72214363435532);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MathUtil mathUtil0 = new MathUtil();
      boolean boolean0 = MathUtil.isWithin(1.5707963267948966, 0.0, 1.5707963267948966);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double double0 = MathUtil.roundNearest((-1463.33978318118), 719.0885453466326);
      assertEquals((-1438.1770906932652), double0, 0.01);
      
      MathUtil.ifloor(458.0389322);
      double double1 = MathUtil.roundNearest(3959.48977, (-1438.1770906932652));
      assertEquals(4314.531272079796, double1, 0.01);
      
      double double2 = MathUtil.exponential(1, (-1438.1770906932652));
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      
      int int0 = MathUtil.iceil(1);
      assertEquals(1, int0);
      
      String string0 = MathUtil.toString(6.283185307179586, 458);
      assertEquals("+6.28318530717958623199592693708837032318115234375", string0);
      
      int int1 = MathUtil.ifloor(Double.NEGATIVE_INFINITY);
      assertEquals(Integer.MIN_VALUE, int1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = MathUtil.toString((-27.367658893194815));
      assertEquals("-27.367", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = MathUtil.epsilonEquals(0.0, 0.0);
      assertTrue(boolean0);
      
      double double0 = MathUtil.roundNearest(0.0, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathUtil mathUtil0 = new MathUtil();
      MathUtil.toString(0.0);
      int int0 = MathUtil.ifloor(1.0);
      assertEquals(1, int0);
      
      MathUtil.toString(6.283185307179586, 0);
      String string0 = MathUtil.toString(1876.7);
      assertEquals("+1876.7", string0);
      
      MathUtil.angularDistance(Double.NaN, 0.0);
      MathUtil.normal((-1404.552853), Double.NaN, (-1.0));
      double double1 = MathUtil.normal(6.283185307179586, 6.283185307179586, 0.0);
      assertEquals(6.283185307179586, double1, 0.01);
      
      MathUtil.exponential(Double.NaN, 0.0);
      String string1 = MathUtil.toString(0.0, 1);
      assertEquals("+0.0", string1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = MathUtil.round((-1.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double double0 = MathUtil.exponential((-4116.956422400474), (-4116.956422400474));
      assertEquals(34265.89065969604, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double double0 = MathUtil.normalizeAngle((-1.0));
      assertEquals((-1.0), double0, 0.01);
      
      int int0 = MathUtil.round((-1.0));
      assertEquals((-1), int0);
      
      double double1 = MathUtil.exponential(1536.40594921, 1536.40594921);
      double double2 = MathUtil.mirrorAngle(Double.NaN);
      assertEquals(double2, double1, 0.01);
      
      double double3 = MathUtil.normal(0.0, (-1867.72), (-760.7087409140656));
      assertEquals((-1867.72), double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double double0 = MathUtil.normal(1.0, 1.0, 0.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = MathUtil.TO_STRING_DECIMAL_PLACES;
      double double0 = MathUtil.mirrorAngle(3);
      assertEquals(0.14159265358979312, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double double0 = MathUtil.mirrorAngle((-3799.4));
      assertEquals(3796.2584073464104, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double double0 = MathUtil.lerp(3272.5245265434273, 3272.5245265434273, 3272.5245265434273);
      assertEquals(3272.5245265434273, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double double0 = MathUtil.lerpa(2015.267205168, (-2747.95295786), 0.0);
      assertEquals(2008.9840198608201, double0, 0.01);
  }
}
