/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:28:14 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AbstractRectangle;
import pythagoras.d.AffineTransform;
import pythagoras.d.Dimension;
import pythagoras.d.ILine;
import pythagoras.d.IPoint;
import pythagoras.d.IRectangle;
import pythagoras.d.IdentityTransform;
import pythagoras.d.Line;
import pythagoras.d.PathIterator;
import pythagoras.d.Point;
import pythagoras.d.Rectangle;
import pythagoras.d.Transform;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractRectangle_ESTest extends AbstractRectangle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      rectangle0.setFrameFromCenter((-3.4028234663852886E38), (-2704.2235664), (-355.1186269), 1270.8276520561208);
      rectangle0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle();
      assertTrue(rectangle1.equals((Object)rectangle0));
      
      rectangle1.setSize(0.0, (-693.4427686161471));
      boolean boolean0 = rectangle1.equals(rectangle0);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0, 1.0, 1.0, 1.0);
      Rectangle rectangle1 = new Rectangle(1.0, 1.0, 0.0, 1.0);
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
      assertFalse(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      rectangle0.setFrameFromCenter(0.0, (-1466.334447589), (-1.0), 0.0);
      Point point0 = rectangle0.center();
      Rectangle rectangle1 = new Rectangle(point0);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle2 = new Rectangle(dimension0);
      boolean boolean0 = rectangle1.equals(rectangle2);
      assertFalse(rectangle2.equals((Object)rectangle1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0, 218.09436727105, 1.0, 0.0);
      Dimension dimension0 = rectangle0.size();
      Rectangle rectangle1 = new Rectangle(dimension0);
      boolean boolean0 = rectangle1.equals(rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0, 0.0, 0.0, 0.0);
      rectangle0.setFrameFromCenter(0.0, (-1466.334447589), (-1.0), 0.0);
      boolean boolean0 = rectangle0.intersects(0.0, 0.0, 2.0, (double) 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0, 0.0, 0.0, 0.0);
      rectangle0.setFrameFromCenter(0.0, (-1466.334447589), (-1.0), 0.0);
      boolean boolean0 = rectangle0.intersects(6.283185307179586, (-353.1731683435), (double) 0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1068.0957732), 647.0, (-1068.0957732), 0.0);
      Point point0 = new Point();
      Point point1 = new Point();
      point0.subtract(3612.308501581581, 10.0, point0);
      rectangle0.setLocation((XY) point0);
      rectangle0.add((XY) point1);
      boolean boolean0 = rectangle0.intersects((-3612.308501581581), 1.5707963267948966, 0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Line line0 = new Line((-4569.31357), (-4569.31357), 3.4028234663852886E38, 3.4028234663852886E38);
      Rectangle rectangle0 = line0.bounds();
      rectangle0.setLocation(572.3598793894193, 3.4028234663852886E38);
      boolean boolean0 = rectangle0.intersects((-4569.31357), 3.4028234663852886E38, 3.4028234663852886E38, (-4569.31357));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-674.62439748072), (-674.62439748072), 155.43102091851247, 155.43102091851247);
      boolean boolean0 = rectangle0.contains(155.43102091851247, 3603.376214659, (-674.62439748072), (-1594.9085562));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0, 0.0, 0.0, 0.0);
      rectangle0.setFrameFromCenter(0.0, (-1466.334447589), (-1.0), 0.0);
      boolean boolean0 = rectangle0.contains((-1.0), (-1466.334447589), (-1.0), (-1.0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      rectangle0.setFrameFromCenter(0.0, (-1466.334447589), (-1.0), 0.0);
      boolean boolean0 = rectangle0.contains(0.0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      rectangle0.setFrameFromCenter((-3.4028234663852886E38), (-2704.2235664), (-355.1186269), 1270.8276520561208);
      boolean boolean0 = rectangle0.contains(1270.8276520561208, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      rectangle0.setFrameFromCenter(0.0, (-1466.334447589), (-1.0), 0.0);
      Point point0 = new Point();
      int int0 = rectangle0.outcode((XY) point0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      Point point0 = rectangle0.center();
      Dimension dimension0 = new Dimension((-2932.668895178), 1.0);
      Rectangle rectangle1 = new Rectangle(point0, dimension0);
      int int0 = rectangle1.outcode(0.0, (-2932.668895178));
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1068.0957732), 647.0, (-1068.0957732), 0.0);
      Point point0 = new Point();
      rectangle0.add((XY) point0);
      int int0 = rectangle0.outcode(0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Dimension dimension0 = new Dimension((-3.141592653589793), (-3.141592653589793));
      Rectangle rectangle0 = new Rectangle(dimension0);
      Point point0 = new Point();
      int int0 = rectangle0.outcode((XY) point0);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-674.62439748072), (-674.62439748072), 155.43102091851247, 155.43102091851247);
      Line line0 = new Line((-1594.9085562), (-1066.8548525), (-674.62439748072), (-674.62439748072));
      boolean boolean0 = rectangle0.intersectsLine((ILine) line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0, 218.09436727105, 1.0, 0.0);
      Rectangle rectangle1 = rectangle0.intersection(0.0, (-204.2), 10.0, 1.0);
      assertEquals(1.0, rectangle1.width, 0.01);
      assertEquals(1.0, rectangle1.x, 0.01);
      assertEquals((-421.29436727104996), rectangle1.height, 0.01);
      assertEquals(218.09436727105, rectangle1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0, 1.0, 0.0, 1.0);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, identityTransform0);
      boolean boolean0 = abstractRectangle_Iterator0.isDone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0, 0.0, 0.0, 0.0);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, identityTransform0);
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        abstractRectangle_Iterator0.currentSegment(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.d.AbstractRectangle$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Line line0 = new Line();
      Point point0 = line0.p2();
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle rectangle1 = rectangle0.union(rectangle0);
      assertEquals(0.0, rectangle1.height(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0, 218.09436727105, 1.0, 0.0);
      Rectangle rectangle1 = rectangle0.union(rectangle0);
      assertTrue(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1527.1555742537237), 67.3372337, (-1527.1555742537237), 67.3372337);
      rectangle0.setFrame(67.3372337, (-1686.2), 67.3372337, (-1834.5532579302142));
      Rectangle rectangle1 = rectangle0.union(rectangle0);
      assertEquals((-1834.5532579302142), rectangle1.height(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      rectangle0.setFrameFromCenter(0.0, (-1466.334447589), (-1.0), 0.0);
      Dimension dimension0 = new Dimension(-0.0, 583.92);
      Dimension dimension1 = rectangle0.size(dimension0);
      assertEquals(2932.668895178, dimension1.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle1 = rectangle0.intersection(0.0, 1055.574599, (-1.0), (-1.0));
      rectangle1.size(dimension0);
      assertEquals((-1.0), dimension0.width, 0.01);
      assertEquals((-1055.574599), dimension0.height(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.grow((-1408.1680067058328), 945.43988727195);
      Dimension dimension0 = rectangle0.size();
      assertEquals(1890.8797745439, dimension0.height(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0, 3.4028234663852886E38, 1.0, (-48.30991188));
      Dimension dimension0 = rectangle0.size();
      assertEquals(1.0, dimension0.width(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Line line0 = new Line();
      Point point0 = line0.p2();
      Rectangle rectangle0 = new Rectangle(point0);
      rectangle0.setFrame(0.0, 0.0, 0.0, (-3863.13));
      IdentityTransform identityTransform0 = new IdentityTransform();
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) identityTransform0);
      assertTrue(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Dimension dimension0 = new Dimension((-3.141592653589793), (-3.141592653589793));
      Rectangle rectangle0 = new Rectangle(dimension0);
      rectangle0.setFrameFromCenter(1.0, (-3.141592653589793), 1120.152603, 1458.3350594100004);
      Point point0 = rectangle0.center();
      int int0 = rectangle0.outcode((XY) point0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3766.4604772766656, 3766.4604772766656, 3766.4604772766656, 3766.4604772766656);
      int int0 = rectangle0.outcode(3766.4604772766656, 3766.4604772766656);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Point point0 = new Point(0.0, 0.0);
      Point point1 = rectangle0.location(point0);
      assertSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0, 218.09436727105, 1.0, 0.0);
      Point point0 = new Point();
      Point point1 = rectangle0.location(point0);
      assertEquals(218.09436727105, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      rectangle0.setFrameFromCenter(0.0, (-1466.334447589), (-1.0), 0.0);
      Point point0 = rectangle0.center();
      Point point1 = rectangle0.location(point0);
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0, 218.09436727105, 1.0, 0.0);
      Point point0 = rectangle0.location();
      assertEquals(1.0, point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Line line0 = new Line(218.09436727105, (-1458.8), (-1458.8), 248.98938119716865);
      Rectangle rectangle0 = new Rectangle();
      line0.bounds(rectangle0);
      Point point0 = rectangle0.location();
      assertEquals((-1458.8), point0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Line line0 = new Line();
      Rectangle rectangle0 = line0.bounds();
      rectangle0.setFrameFromCenter((-1466.334447589), 1465.0, (-1466.334447589), (-1.0));
      boolean boolean0 = rectangle0.intersectsLine((ILine) line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Dimension dimension0 = new Dimension((-3.141592653589793), (-3.141592653589793));
      Rectangle rectangle0 = new Rectangle(dimension0);
      boolean boolean0 = rectangle0.intersectsLine((-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-729.8462896352418));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Point point0 = new Point(0.0, 2.0);
      Dimension dimension0 = new Dimension(1.0, (-407.07652));
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      Rectangle rectangle1 = rectangle0.intersection((IRectangle) rectangle0);
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertEquals(0.0, rectangle1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1391.7756401), (-1.0), (-1.0), (-3169.90361366865), (-3169.90361366865));
      Dimension dimension0 = new Dimension((-2181.5262831), (-2737.35));
      Rectangle rectangle0 = new Rectangle(dimension0);
      Point point0 = rectangle0.location();
      Point point1 = affineTransform0.transform((IPoint) point0, point0);
      rectangle0.setLocation((XY) point1);
      Rectangle rectangle1 = rectangle0.intersection((IRectangle) rectangle0);
      assertEquals((-2737.3500000000004), rectangle1.height, 0.01);
      assertEquals((-2181.5262831), rectangle1.width, 0.01);
      assertEquals((-3169.90361366865), rectangle1.x, 0.01);
      assertEquals((-3169.90361366865), rectangle1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Line line0 = new Line(3846.5, 0.0, (-3905.8), 53.27737);
      Rectangle rectangle0 = new Rectangle(0.0, 0.0, 4477.0623726, 0.0);
      Rectangle rectangle1 = line0.bounds(rectangle0);
      Rectangle rectangle2 = rectangle1.intersection((IRectangle) rectangle0);
      assertTrue(rectangle2.equals((Object)rectangle0));
      assertEquals(0.0, rectangle2.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0, 0.0, 0.0, 0.0);
      Rectangle rectangle1 = new Rectangle(3505.45, 0.0, 0.0, (-805.1401));
      Rectangle rectangle2 = rectangle0.intersection((IRectangle) rectangle1);
      assertEquals(0.0, rectangle2.y, 0.01);
      assertEquals(3505.45, rectangle2.x, 0.01);
      assertEquals((-805.1401), rectangle2.height, 0.01);
      assertEquals((-3505.45), rectangle2.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.intersection(0.0, 2.0, 2.0, 0.0);
      assertEquals((-2.0), rectangle1.height, 0.01);
      assertEquals(0.0, rectangle1.width, 0.01);
      assertEquals(2.0, rectangle1.y, 0.01);
      assertEquals(0.0, rectangle1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.intersection(1.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, rectangle1.height, 0.01);
      assertEquals(0.0, rectangle1.y, 0.01);
      assertEquals((-1.0), rectangle1.width, 0.01);
      assertEquals(1.0, rectangle1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Dimension dimension0 = new Dimension((-3.141592653589793), (-3.141592653589793));
      Rectangle rectangle0 = new Rectangle(dimension0);
      rectangle0.setFrameFromCenter(1.0, (-3.141592653589793), 1120.152603, 1458.3350594100004);
      Rectangle rectangle1 = rectangle0.intersection((-3.141592653589896), (-3.141592653589896), 262.0, 1.0);
      assertEquals(262.0, rectangle1.width, 0.01);
      assertEquals((-3.141592653589896), rectangle1.y, 0.01);
      assertEquals(1.0, rectangle1.height, 0.01);
      assertEquals((-3.141592653589896), rectangle1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0, 218.09436727105, 1.0, 0.0);
      Rectangle rectangle1 = rectangle0.clone();
      assertEquals(1.0, rectangle1.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-3.4028234663852886E38), (-3.4028234663852886E38), (-3.4028234663852886E38), 0.0);
      Rectangle rectangle1 = rectangle0.clone();
      assertEquals((-3.4028234663852886E38), rectangle1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Dimension dimension0 = new Dimension((-3.141592653589793), (-3.141592653589793));
      Rectangle rectangle0 = new Rectangle(dimension0);
      rectangle0.setFrameFromCenter(1.0, (-3.141592653589793), 1120.152603, 1458.3350594100004);
      Rectangle rectangle1 = rectangle0.clone();
      assertEquals((-1464.6182447171802), rectangle1.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Dimension dimension0 = new Dimension(3494.3109359357, (-1467.334447589));
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle rectangle1 = rectangle0.clone();
      assertEquals(0.0, rectangle1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.union((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.size((Dimension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.outcode((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.intersectsLine((ILine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.5234938871977355, 0.5234938871977355, 0.5234938871977355, 0.5234938871977355);
      int int0 = rectangle0.outcode((-3.4028234663852886E38), (-3.4028234663852886E38));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.intersectsLine((-601.0), (-601.0), (-601.0), (-601.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = rectangle0.size(dimension0);
      assertSame(dimension0, dimension1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      double[] doubleArray0 = new double[5];
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, (Transform) null);
      int int0 = abstractRectangle_Iterator0.currentSegment(doubleArray0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3766.4604772766656, 3766.4604772766656, 3766.4604772766656, 3766.4604772766656);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, identityTransform0);
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      double[] doubleArray0 = new double[5];
      int int0 = abstractRectangle_Iterator0.currentSegment(doubleArray0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {3766.4604772766656, 7532.920954553331, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3766.4604772766656, 3766.4604772766656, 3766.4604772766656, 3766.4604772766656);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, identityTransform0);
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      double[] doubleArray0 = new double[5];
      int int0 = abstractRectangle_Iterator0.currentSegment(doubleArray0);
      assertArrayEquals(new double[] {7532.920954553331, 7532.920954553331, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, (Transform) null);
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      abstractRectangle_Iterator0.next();
      assertFalse(abstractRectangle_Iterator0.isDone());
      
      int int0 = abstractRectangle_Iterator0.currentSegment((double[]) null);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(390.002453797, 390.002453797, 390.002453797, (-3121.433566403683));
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) null, (-3121.433566403683));
      assertTrue(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.width = (-1.0);
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, (Transform) null);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        abstractRectangle_Iterator0.currentSegment(doubleArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.d.AbstractRectangle$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle();
      Line line0 = new Line(0.0, 0.0, 0.0, 2.0);
      Point point0 = rectangle0.location();
      Point point1 = line0.p2(point0);
      assertTrue(rectangle0.equals((Object)rectangle1));
      
      rectangle1.add((XY) point1);
      boolean boolean0 = rectangle1.equals(rectangle0);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0, 1.0, 1.0, 1.0);
      Rectangle rectangle1 = new Rectangle(1.0, 1.0, 8.143762183235868, 1.0);
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
      assertFalse(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.y = 201.616651;
      Rectangle rectangle1 = new Rectangle();
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
      assertFalse(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3766.4604772766656, 3766.4604772766656, 3766.4604772766656, 3766.4604772766656);
      Rectangle rectangle1 = new Rectangle();
      boolean boolean0 = rectangle0.equals(rectangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3766.4604772766656, 3766.4604772766656, 3766.4604772766656, 3766.4604772766656);
      boolean boolean0 = rectangle0.equals(rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle();
      boolean boolean0 = rectangle1.equals(rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3778.5687518145787, 3778.5687518145787, 3778.5687518145787, 3778.5687518145787);
      boolean boolean0 = rectangle0.intersects(3778.5687518145787, 3778.5687518145787, 3778.5687518145787, 3778.5687518145787);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2548.334, 2548.334, 2548.334, 2548.334);
      boolean boolean0 = rectangle0.intersects(2548.334, (-519.1933765622075), 2548.334, 2548.334);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3766.366963936981, 3766.366963936981, 3766.366963936981, 3766.366963936981);
      boolean boolean0 = rectangle0.intersects(7532.733927873962, 3766.366963936981, 7532.733927873962, 3766.366963936981);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2604.972158564773, 2604.972158564773, 2604.972158564773, 2604.972158564773);
      boolean boolean0 = rectangle0.intersects(2604.972158564773, (-1.0), (-1.0), 2604.972158564773);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.intersects((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0401169629211, 0.0401169629211, 0.0401169629211, 0.0401169629211);
      boolean boolean0 = rectangle0.intersects(0.0401169629211, 3767.394059159145, 3767.394059159145, (-1407.457));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.5234938871977355, 0.5234938871977355, 0.5234938871977355, 0.5234938871977355);
      boolean boolean0 = rectangle0.contains(0.5234938871977355, 0.5234938871977355, 0.5234938871977355, 0.5234938871977355);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.5234938871977355, 0.5234938871977355, 0.5234938871977355, 0.5234938871977355);
      boolean boolean0 = rectangle0.contains(0.5234938871977355, (-1.0), 0.5234938871977355, (-1.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(5.586108926163006, 5.586108926163006, 5.586108926163006, 5.586108926163006);
      boolean boolean0 = rectangle0.contains(1007.22, 1007.22, (-3.4028234663852886E38), 5.586108926163006);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1028.4912), (-1028.4912), 133.50092300080215, 133.50092300080215);
      boolean boolean0 = rectangle0.contains(133.50092300080215, (-1028.4912), 134.23256005284472, (-1028.4912));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.contains(0.0, 0.0, 0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(38.0, 38.0, 38.0, 38.0);
      boolean boolean0 = rectangle0.contains(0.0, 38.0, 0.0, 38.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.2994685, 1.2994685, 1.2994685, 1.2994685);
      boolean boolean0 = rectangle0.contains(1.2994685, 1.2994685);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.2994685, 1.2994685, 1.2994685, 1.2994685);
      boolean boolean0 = rectangle0.contains(451.64334448905, 1.2994685);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1028.4912), (-1028.4912), 133.25201, 133.25201);
      boolean boolean0 = rectangle0.contains((-1028.4912), (-92.7391020807884));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(10308.220439991865, 10308.220439991865, 10308.220439991865, 10308.220439991865);
      boolean boolean0 = rectangle0.contains((-3193.0), (-3193.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.contains((-996.1710338603527), 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(25.59753010371546, 25.59753010371546, 25.59753010371546, 25.59753010371546);
      boolean boolean0 = rectangle0.contains(25.59753010371546, (-2209.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-666.7152574200404), (-666.7152574200404), 134.23256005284472, 134.23256005284472);
      int int0 = rectangle0.outcode(134.23256005284472, (-666.7152574200404));
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-666.7152574200404), (-666.7152574200404), 134.23256005284472, 134.23256005284472);
      int int0 = rectangle0.outcode((-666.7152574200404), 134.23256005284472);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      int int0 = rectangle0.outcode(0.0, 0.0);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3766.4604772766656, 3766.4604772766656, 3766.4604772766656, 3766.4604772766656);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, identityTransform0);
      abstractRectangle_Iterator0.next();
      assertFalse(abstractRectangle_Iterator0.isDone());
      
      double[] doubleArray0 = new double[5];
      int int0 = abstractRectangle_Iterator0.currentSegment(doubleArray0);
      assertArrayEquals(new double[] {7532.920954553331, 3766.4604772766656, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0, 0.0, 0.0, 0.0);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractRectangle.Iterator abstractRectangle_Iterator0 = new AbstractRectangle.Iterator(rectangle0, identityTransform0);
      int int0 = abstractRectangle_Iterator0.windingRule();
      assertFalse(abstractRectangle_Iterator0.isDone());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Point point0 = rectangle0.location();
      boolean boolean0 = rectangle0.equals(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.location((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.clone();
      assertNotSame(rectangle0, rectangle1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(5.586108926163006, 5.586108926163006, 5.586108926163006, 5.586108926163006);
      String string0 = rectangle0.toString();
      assertEquals("5.586108926163006x5.586108926163006+5.586+5.586", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Dimension dimension0 = rectangle0.size();
      assertEquals(0.0, dimension0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = rectangle0.intersection((IRectangle) rectangle0);
      assertEquals(0.0, rectangle1.width, 0.01);
      assertEquals(0.0, rectangle1.y, 0.01);
      assertEquals(0.0, rectangle1.x, 0.01);
      assertEquals(0.0, rectangle1.height, 0.01);
      assertTrue(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      AffineTransform affineTransform0 = new AffineTransform();
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) affineTransform0, 1.0);
      assertFalse(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.intersection((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractRectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      PathIterator pathIterator0 = rectangle0.pathIterator((Transform) null);
      assertFalse(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1527.1555742537237), 67.3372337, (-1527.1555742537237), 67.3372337);
      Rectangle rectangle1 = rectangle0.union(rectangle0);
      assertEquals((-1527.1555742537237), rectangle1.width(), 0.01);
  }
}
