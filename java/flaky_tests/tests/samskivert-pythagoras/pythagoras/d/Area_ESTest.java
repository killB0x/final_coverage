/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:05:02 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AffineTransform;
import pythagoras.d.Arc;
import pythagoras.d.Area;
import pythagoras.d.CubicCurve;
import pythagoras.d.Ellipse;
import pythagoras.d.FlatteningPathIterator;
import pythagoras.d.IRectangle;
import pythagoras.d.IShape;
import pythagoras.d.IdentityTransform;
import pythagoras.d.Line;
import pythagoras.d.Path;
import pythagoras.d.PathIterator;
import pythagoras.d.Point;
import pythagoras.d.QuadCurve;
import pythagoras.d.Rectangle;
import pythagoras.d.RoundRectangle;
import pythagoras.d.Transform;
import pythagoras.d.Vector;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Area_ESTest extends Area_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Line line0 = new Line((-1479.095808139), 0.0, 1692.8818288856874, (-1372.8649));
      Area area0 = new Area(line0);
      line0.x1 = 22.9522760597067;
      line0.x1 = 0.0;
      Area area1 = new Area(line0);
      area1.exclusiveOr(area0);
      assertFalse(area1.isEmpty());
      assertTrue(area1.isSingular());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(3013.54052231, 3013.54052231, (-110.2307620198425), (-110.2307620198425), 2373.355, (-110.2307620198425));
      Area area0 = new Area(quadCurve0);
      Area area1 = area0.clone();
      Rectangle rectangle0 = quadCurve0.bounds();
      Area area2 = new Area(rectangle0);
      // Undeclared exception!
      try { 
        area2.exclusiveOr(area1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 40 out of bounds for length 40
         //
         verifyException("pythagoras.d.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-277.2801221102326), (-487.06308891), (-277.2801221102326), (-277.2801221102326));
      Area area0 = new Area(rectangle0);
      boolean boolean0 = area0.intersects((-277.2801221102326), (-277.2801221102326), 3061.04217, (-475.55532));
      assertTrue(area0.isEmpty());
      assertFalse(boolean0);
      assertTrue(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Area area0 = new Area(ellipse0);
      boolean boolean0 = area0.intersects(0.0, 0.0, (-20.940097703779433), 0.0);
      assertTrue(area0.isSingular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Arc arc0 = new Arc();
      Area area0 = new Area(arc0);
      boolean boolean0 = area0.contains(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Line line0 = new Line(0.25, (-132.74785654715893), (-132.74785654715893), 0);
      Point point0 = new Point(0, (-132.74785654715893));
      Point point1 = line0.p2(point0);
      Line line1 = new Line(point1, point1);
      Area area0 = new Area(line1);
      boolean boolean0 = area0.isRectangular();
      assertFalse(boolean0);
      assertTrue(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Line line0 = new Line((-1479.095808139), 0.0, 1692.8818288856874, (-1372.8649));
      Area area0 = new Area(line0);
      area0.isRectangular();
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-110.2307620198425), (-151.6173), 0.0, (-110.2307620198425), 3013.54052231, 3013.54052231, (-110.2307620198425), (-1348.42657683201));
      Rectangle rectangle0 = cubicCurve0.bounds();
      Area area0 = new Area(rectangle0);
      boolean boolean0 = area0.isRectangular();
      assertTrue(boolean0);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Area area0 = new Area();
      IdentityTransform identityTransform0 = new IdentityTransform();
      area0.transform(identityTransform0);
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Area area0 = new Area();
      IdentityTransform identityTransform0 = new IdentityTransform();
      FlatteningPathIterator flatteningPathIterator0 = (FlatteningPathIterator)area0.pathIterator((Transform) identityTransform0, (double) 0);
      assertEquals(16, flatteningPathIterator0.recursionLimit());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(740.52041016, 2704.3, 0.0, (-1032.074330617468), 0.0, 2.0, 2373.35474781107, (-1032.074330617468));
      Rectangle rectangle0 = cubicCurve0.bounds();
      Area area0 = new Area(rectangle0);
      IdentityTransform identityTransform0 = new IdentityTransform();
      area0.pathIterator((Transform) identityTransform0, 1.0E-14);
      assertTrue(area0.isSingular());
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Area area0 = new Area(ellipse0);
      area0.isPolygonal();
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Area area0 = new Area();
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = area0.intersects((IRectangle) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Area area0 = new Area();
      Area area1 = area0.createTransformedArea((Transform) null);
      assertTrue(area1.isEmpty());
      assertTrue(area1.isRectangular());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-110.2307620198425), (-151.6173), 0.0, (-110.2307620198425), 3013.54052231, 3013.54052231, 2084.73406, (-1348.42657683201));
      Rectangle rectangle0 = cubicCurve0.bounds();
      Area area0 = new Area(rectangle0);
      Vector vector0 = new Vector();
      boolean boolean0 = area0.contains((XY) vector0);
      assertTrue(area0.isSingular());
      assertTrue(boolean0);
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0, 0.25, 0.25, 1129.884938947);
      Area area0 = new Area(rectangle0);
      boolean boolean0 = area0.contains((IRectangle) rectangle0);
      assertTrue(area0.isSingular());
      assertTrue(area0.isRectangular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(3013.54052231, 3013.54052231, (-110.2307620198425), (-110.2307620198425), 2373.35474781107, (-110.2307620198425));
      Area area0 = new Area(quadCurve0);
      QuadCurve quadCurve1 = new QuadCurve();
      Rectangle rectangle0 = quadCurve1.bounds();
      Area area1 = new Area(rectangle0);
      Area area2 = new Area(area1);
      area2.exclusiveOr(area0);
      Area area3 = new Area(area2);
      Area area4 = area3.clone();
      assertFalse(area2.isRectangular());
      assertFalse(area4.isSingular());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Area area0 = new Area();
      Area area1 = area0.clone();
      assertTrue(area1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Area area0 = new Area(ellipse0);
      area0.exclusiveOr((Area) null);
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = area0.bounds(rectangle0);
      assertEquals(Double.NaN, rectangle1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1372.8649), (-93.16456555), 1.0, (-93.16456555), (-93.16456555), (-1479.095808139));
      Area area0 = new Area(quadCurve0);
      Rectangle rectangle0 = area0.bounds();
      Rectangle rectangle1 = area0.bounds(rectangle0);
      assertTrue(area0.isSingular());
      assertEquals(1373.8649, rectangle1.width, 0.01);
      assertEquals((-1479.095808139), rectangle1.y, 0.01);
      assertEquals(1385.931242589, rectangle1.height, 0.01);
      assertEquals((-1372.8649), rectangle1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      ellipse0.setFrameFromCenter(3050.11492835981, 1697.3098878851, (-309.611), 2256.074882780984);
      Area area0 = new Area(ellipse0);
      Rectangle rectangle0 = area0.bounds();
      assertEquals(1117.529989791768, rectangle0.height, 0.01);
      assertEquals(1138.544892989216, rectangle0.y, 0.01);
      assertEquals(6719.45185671962, rectangle0.width, 0.01);
      assertEquals((-309.6109999999999), rectangle0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse(4.6046232901345325, 4.6046232901345325, 1571.53594918799, 1571.53594918799);
      Area area0 = new Area(ellipse0);
      // Undeclared exception!
      area0.subtract(area0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Area area0 = new Area(cubicCurve0);
      area0.intersect(area0);
      // Undeclared exception!
      try { 
        area0.subtract(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Area area0 = new Area();
      // Undeclared exception!
      try { 
        area0.intersects((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse(1479.095808139, 1479.095808139, 1479.095808139, 1479.095808139);
      Area area0 = new Area(ellipse0);
      // Undeclared exception!
      area0.intersect(area0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse(2372.661114935472, 2372.661114935472, 2372.661114935472, 2372.661114935472);
      Area area0 = new Area(ellipse0);
      // Undeclared exception!
      area0.exclusiveOr(area0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse((-110.2307620198425), (-110.2307620198425), 1686.519233, 3202.829006);
      Area area0 = new Area(ellipse0);
      Area area1 = new Area(area0);
      // Undeclared exception!
      area0.equals(area1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      area1.exclusiveOr(area0);
      // Undeclared exception!
      try { 
        area1.equals(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-993.909370489), (-993.909370489), (-993.909370489), 5625030.437757266, 5625030.437757266, (-1756.58022584696));
      Area area0 = new Area(roundRectangle0);
      // Undeclared exception!
      try { 
        area0.createTransformedArea((Transform) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // First segment must be a SEG_MOVETO
         //
         verifyException("pythagoras.d.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Area area0 = new Area();
      // Undeclared exception!
      try { 
        area0.contains((IRectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(3013.54052231, 3013.54052231, (-93.16456555), (-93.16456555), 2373.35474781107, (-93.16456555));
      Area area0 = new Area(quadCurve0);
      Area area1 = area0.clone();
      area1.exclusiveOr(area0);
      area0.add(area1);
      // Undeclared exception!
      try { 
        area0.add(area1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      Area area0 = new Area(roundRectangle0);
      // Undeclared exception!
      try { 
        area0.add(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 29
         //
         verifyException("pythagoras.d.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Area area0 = null;
      try {
        area0 = new Area((IShape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-11.241068), (-56.0444262603), (-56.0444262603), (-11.241068), 1.000000013351432E-10, (-11.241068), 1.5707963267948966, 1.5707963267948966);
      Path path0 = new Path(cubicCurve0);
      int[] intArray0 = new int[0];
      Path.pointShift = intArray0;
      Area area0 = null;
      try {
        area0 = new Area(path0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Path$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse(3013.54052231, 3013.54052231, 2373.35474781107, 1573.5657);
      Area area0 = new Area(ellipse0);
      Rectangle rectangle0 = area0.bounds();
      Area area1 = new Area(rectangle0);
      // Undeclared exception!
      try { 
        area0.exclusiveOr(area1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2 out of bounds for length 52
         //
         verifyException("pythagoras.d.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Area area0 = new Area();
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.25, (-764.027852), (-1562.56), 0.25, 566.4442467);
      Area area1 = new Area(quadCurve0);
      area0.exclusiveOr(area1);
      area0.exclusiveOr(area0);
      assertFalse(area0.isRectangular());
      assertFalse(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Line line0 = new Line((-1479.095808139), 0.0, 1692.8818288856874, (-1372.8649));
      Area area0 = new Area(line0);
      line0.x1 = 22.9522760597067;
      Area area1 = new Area(line0);
      area1.exclusiveOr(area0);
      assertFalse(area0.equals((Object)area1));
      assertFalse(area1.equals((Object)area0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Area area0 = new Area(ellipse0);
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = area0.bounds(rectangle0);
      assertEquals(0.0, rectangle1.height, 0.01);
      assertEquals(0.0, rectangle1.y, 0.01);
      assertEquals(0.0, rectangle1.x, 0.01);
      assertTrue(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(3013.54052231, 3013.54052231, (-93.16456555), (-93.16456555), 2373.35474781107, (-93.16456555));
      Area area0 = new Area(quadCurve0);
      boolean boolean0 = area0.intersects(4.71238898038469, (-396.2162693), 1767.6283636788, 3409.75679161);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(334500.47327105096, 334500.47327105096, 334500.47327105096, 5629520.7663269695, 1.0, 4.71238898038469, (-1034.866), 4.71238898038469);
      Area area0 = new Area(cubicCurve0);
      boolean boolean0 = area0.contains((-493.445413765), 3076.669983838, 311.55, 334500.47327105096);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Point point0 = new Point(0, (-132.74785654715893));
      Line line0 = new Line(point0, point0);
      Area area0 = new Area(line0);
      boolean boolean0 = area0.contains((-132.74785654715893), (-9.999999747378752E-6), 5555.4785, 0.0);
      assertTrue(area0.isSingular());
      assertFalse(boolean0);
      assertTrue(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(3013.54052231, 3013.54052231, (-110.2307620198425), (-110.2307620198425), 2373.35474781107, (-110.2307620198425));
      CubicCurve cubicCurve0 = new CubicCurve((-151.6173), 1.0, (-1372.8649), 871.4269773355325, 0.0, 2305.0, 2305.0, (-1348.42657683201));
      Rectangle rectangle0 = cubicCurve0.bounds();
      quadCurve0.bounds(rectangle0);
      Area area0 = new Area(rectangle0);
      boolean boolean0 = area0.contains(2305.0, 1.0, 1.0, 270.0);
      assertTrue(boolean0);
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Area area0 = new Area();
      boolean boolean0 = area0.contains(0.0, 0.0);
      assertTrue(area0.isEmpty());
      assertFalse(boolean0);
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Area area0 = new Area();
      boolean boolean0 = area0.isEmpty();
      assertTrue(boolean0);
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-864.475), (-864.475), (-864.475), 9651616.502935212, (-864.475), 1.0);
      Area area0 = new Area(roundRectangle0);
      boolean boolean0 = area0.isEmpty();
      assertFalse(boolean0);
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Arc arc0 = new Arc();
      Area area0 = new Area(arc0);
      area0.subtract(area0);
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Area area0 = new Area();
      assertTrue(area0.isEmpty());
      
      QuadCurve quadCurve0 = new QuadCurve(1692.8818288856874, 1716.0, 0.0, (-607.9765937353822), (-607.9765937353822), 4145.6869613761155);
      Area area1 = new Area(quadCurve0);
      area1.subtract(area0);
      assertTrue(area1.isSingular());
      assertTrue(area0.isPolygonal());
      assertFalse(area1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Area area0 = new Area();
      area0.subtract(area0);
      assertTrue(area0.isEmpty());
      assertTrue(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Area area0 = new Area(ellipse0);
      Rectangle rectangle0 = new Rectangle();
      Area area1 = new Area(rectangle0);
      area1.intersect(area0);
      assertTrue(area1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Area area0 = new Area(ellipse0);
      Area area1 = area0.clone();
      area1.intersect(area0);
      // Undeclared exception!
      try { 
        area1.intersect(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 88 out of bounds for length 88
         //
         verifyException("pythagoras.d.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-110.2307620198425), (-151.6173), 0.0, (-110.2307620198425), 3013.54052231, 3013.54052231, 1.0, (-1348.42657683201));
      Rectangle rectangle0 = cubicCurve0.bounds();
      Area area0 = new Area(rectangle0);
      assertFalse(area0.isEmpty());
      
      Area area1 = new Area();
      area0.intersect(area1);
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Area area0 = new Area();
      area0.intersect(area0);
      assertTrue(area0.isEmpty());
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Area area0 = new Area();
      area0.intersect((Area) null);
      assertTrue(area0.isEmpty());
      assertTrue(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Area area0 = new Area(ellipse0);
      Rectangle rectangle0 = new Rectangle();
      Area area1 = new Area(rectangle0);
      area0.add(area1);
      assertFalse(area1.isEmpty());
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(3013.54052231, 3013.54052231, (-110.2307620198425), (-110.2307620198425), 2373.35474781107, (-110.2307620198425));
      Area area0 = new Area(quadCurve0);
      Area area1 = area0.clone();
      area1.add(area0);
      assertFalse(area0.equals((Object)area1));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      Area area0 = new Area(roundRectangle0);
      Area area1 = new Area();
      area1.add(area0);
      assertFalse(area1.isRectangular());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1342.274970571, 3001.702380513169, 2451.5395479, 6.0, (-1479.095808139), 3001.702380513169, 1342.274970571, 1342.274970571);
      Area area0 = new Area(cubicCurve0);
      area0.add((Area) null);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Area area0 = new Area();
      area0.add(area0);
      assertTrue(area0.isRectangular());
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Area area0 = new Area(ellipse0);
      area0.reset();
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Area area0 = new Area();
      boolean boolean0 = area0.isPolygonal();
      assertTrue(boolean0);
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(3013.54052231, 3013.54052231, (-107.60913109793616), (-107.60913109793616), 3013.54052231, (-107.60913109793616));
      Area area0 = new Area(quadCurve0);
      area0.exclusiveOr(area0);
      assertFalse(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(3013.54052231, 3013.54052231, (-93.16456555), (-93.16456555), 2373.35474781107, (-93.16456555));
      Area area0 = new Area(quadCurve0);
      area0.subtract(area0);
      assertFalse(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(3013.54052231, 3013.54052231, (-93.16456555), (-93.16456555), 3013.54052231, (-93.16456555));
      Area area0 = new Area(quadCurve0);
      area0.intersect(area0);
      area0.exclusiveOr(area0);
      assertFalse(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4.6046232901345, 4.6046232901345, 4.6046232901345, 4.6046232901345);
      Area area0 = new Area(rectangle0);
      area0.exclusiveOr(area0);
      // Undeclared exception!
      try { 
        area0.exclusiveOr(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 100 out of bounds for length 100
         //
         verifyException("pythagoras.d.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3001.702380513169, 3001.702380513169, 3001.702380513169, 3001.702380513169);
      Area area0 = new Area(rectangle0);
      area0.intersect(area0);
      area0.exclusiveOr(area0);
      assertFalse(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2373.355, 2373.355, 2373.355, 2373.355);
      Area area0 = new Area(rectangle0);
      Area area1 = new Area(rectangle0);
      area0.exclusiveOr(area1);
      area0.subtract(area1);
      assertFalse(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(334500.47327105096, 334500.47327105096, 334500.47327105096, 5629520.7663269695, 1.0, 4.71238898038469, (-1034.866), 4.71238898038469);
      Rectangle rectangle0 = cubicCurve0.bounds();
      Path path0 = new Path(rectangle0);
      Area area0 = new Area(path0);
      Area area1 = new Area(cubicCurve0);
      assertFalse(area1.equals((Object)area0));
      
      area0.subtract(area1);
      assertFalse(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(3013.54052231, 1.0000099999997474, 1.0000099999997474, (-937.0), 1.0000099999997474, 1692.8818288856874, (-1397.06171236), 0.0);
      Area area0 = new Area(cubicCurve0);
      area0.exclusiveOr((Area) null);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1453.81156), (-1453.81156), 2692.52864, 2692.52864, 0.0, (-1453.81156), 4746.8, 0.0);
      Rectangle rectangle0 = cubicCurve0.bounds();
      Area area0 = new Area(rectangle0);
      AffineTransform affineTransform0 = new AffineTransform(4146.340200000001, 4746.8, 2692.52864, 2692.52864);
      Area area1 = area0.createTransformedArea(affineTransform0);
      area0.intersect(area1);
      assertFalse(area0.isEmpty());
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      roundRectangle0.setFrame(0.5, 0.5, 1.0, 0.5);
      Area area0 = new Area(roundRectangle0);
      // Undeclared exception!
      try { 
        area0.exclusiveOr(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve((-1372.8649), (-93.16456555), 1.0, (-93.16456555), (-93.16456555), (-1479.095808139));
      Area area0 = new Area(quadCurve0);
      Area area1 = area0.clone();
      area1.exclusiveOr(area0);
      area1.exclusiveOr(area0);
      assertTrue(area1.isSingular());
      assertFalse(area0.equals((Object)area1));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2373.355, 2373.355, 2373.355, 2373.355);
      Area area0 = new Area(rectangle0);
      AffineTransform affineTransform0 = new AffineTransform(2373.355, 2373.355, 2373.355, 2373.355);
      Area area1 = area0.createTransformedArea(affineTransform0);
      area0.exclusiveOr(area1);
      // Undeclared exception!
      try { 
        area1.exclusiveOr(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(54.687839812669395, 54.687839812669395, 54.687839812669395, 54.687839812669395);
      Area area0 = new Area(rectangle0);
      CubicCurve cubicCurve0 = new CubicCurve(54.687839812669395, 54.687839812669395, (-2822.1), 54.687839812669395, 54.687839812669395, (-2822.1), 2259.24, 54.687839812669395);
      Rectangle rectangle1 = cubicCurve0.bounds(rectangle0);
      Area area1 = new Area(rectangle1);
      area0.exclusiveOr(area1);
      assertFalse(area1.equals((Object)area0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.1519553475, 0.1519553475, 0.1519553475, 0.1519553475);
      Area area0 = new Area(rectangle0);
      AffineTransform affineTransform0 = new AffineTransform(0.1519553475, 0.1519553475, 0.1519553475, 0.1519553475, 0.1519553475);
      Area area1 = area0.createTransformedArea(affineTransform0);
      area0.exclusiveOr(area1);
      assertFalse(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1453.81156), (-1453.81156), 2692.52864, 2692.52864, 0.0, (-1453.81156), 4746.8, 0.0);
      Rectangle rectangle0 = cubicCurve0.bounds();
      Area area0 = new Area(rectangle0);
      AffineTransform affineTransform0 = new AffineTransform(4146.340200000001, 4746.8, 2692.52864, 2692.52864);
      Area area1 = area0.createTransformedArea(affineTransform0);
      area0.add(area1);
      assertFalse(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Rectangle rectangle0 = new Rectangle((-1.0), (-1.0), 158.10746439986, 1910.0);
      Area area0 = new Area(rectangle0);
      Area area1 = new Area(quadCurve0);
      area0.exclusiveOr(area1);
      assertTrue(area0.equals((Object)area1));
      assertFalse(area0.isEmpty());
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Arc arc0 = new Arc();
      Area area0 = new Area(arc0);
      CubicCurve cubicCurve0 = new CubicCurve(697.17, (-1.0), 363.1233046751531, 0.0, 0.0, 697.17, (-1.0), 0.0);
      Area area1 = new Area(cubicCurve0);
      Area area2 = area0.clone();
      area2.exclusiveOr(area1);
      assertFalse(area2.isRectangular());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-1453.81156), (-1453.81156), 2692.52864, 2692.52864, 0.0, (-1453.81156), 4746.8, 0.0);
      Rectangle rectangle0 = cubicCurve0.bounds();
      Area area0 = new Area(rectangle0);
      IdentityTransform identityTransform0 = new IdentityTransform();
      PathIterator pathIterator0 = area0.pathIterator((Transform) identityTransform0);
      boolean boolean0 = area0.equals(pathIterator0);
      assertTrue(area0.isRectangular());
      assertFalse(pathIterator0.isDone());
      assertFalse(boolean0);
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Area area0 = new Area(ellipse0);
      boolean boolean0 = area0.equals(area0);
      assertTrue(boolean0);
      assertTrue(area0.isSingular());
      assertFalse(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      boolean boolean0 = area1.equals(area0);
      assertTrue(area0.equals((Object)area1));
      assertTrue(area1.isRectangular());
      assertTrue(area1.isSingular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Area area0 = new Area();
      boolean boolean0 = area0.intersects(0.0, 0.0, 262.8849502, 4356976.280836607);
      assertTrue(area0.isEmpty());
      assertFalse(boolean0);
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Area area0 = new Area();
      boolean boolean0 = area0.intersects(0.0, 0.0, 2996.39267317515, 0.0);
      assertTrue(area0.isEmpty());
      assertFalse(boolean0);
      assertTrue(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Area area0 = new Area();
      assertTrue(area0.isEmpty());
      
      Rectangle rectangle0 = new Rectangle(0.0, 0.0, 0.0, 0.0);
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.25, (-764.027852), (-1562.56), 0.25, 0.0);
      Area area1 = new Area(quadCurve0);
      area0.exclusiveOr(area1);
      boolean boolean0 = area0.contains((IRectangle) rectangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Area area0 = new Area();
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.25, (-764.027852), (-1562.56), 0.25, 566.4442467);
      Area area1 = new Area(quadCurve0);
      area0.exclusiveOr(area1);
      boolean boolean0 = area0.contains(0.0, 0.0);
      assertFalse(area0.isRectangular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Area area0 = new Area();
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.25, (-764.027852), (-1562.56), 0.25, 0.0);
      Area area1 = new Area(quadCurve0);
      area0.exclusiveOr(area1);
      boolean boolean0 = area0.contains(0.0, 0.0);
      assertFalse(area0.isEmpty());
      assertFalse(area0.isRectangular());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Area area0 = new Area();
      Point point0 = new Point();
      boolean boolean0 = area0.contains((XY) point0);
      assertFalse(boolean0);
      assertTrue(area0.isEmpty());
      assertTrue(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Area area0 = new Area();
      area0.subtract((Area) null);
      assertTrue(area0.isRectangular());
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      area0.intersect(area0);
      area0.exclusiveOr(area0);
      assertFalse(area0.isEmpty());
      assertTrue(area0.isSingular());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Area area0 = new Area(ellipse0);
      Rectangle rectangle0 = area0.bounds();
      Area area1 = new Area(rectangle0);
      area0.exclusiveOr(area1);
      assertTrue(area0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(1342.274970571, 3001.702380513169, 2451.5395479, 6.0, (-1479.095808139), 3001.702380513169, 1342.274970571, 1342.274970571);
      Area area0 = new Area(cubicCurve0);
      area0.exclusiveOr((Area) null);
      // Undeclared exception!
      try { 
        area0.createTransformedArea((Transform) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Area area0 = new Area();
      boolean boolean0 = area0.isSingular();
      assertTrue(area0.isRectangular());
      assertTrue(area0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      area0.add(area0);
      area0.add(area0);
      Area area1 = area0.createTransformedArea((Transform) null);
      boolean boolean0 = area1.isSingular();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.0, 982.1605158400536, 0.0, 0.0, 0.0);
      Area area0 = new Area(quadCurve0);
      Area area1 = area0.clone();
      boolean boolean0 = area1.isRectangular();
      assertFalse(boolean0);
      assertTrue(area1.isSingular());
      assertTrue(area1.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Arc arc0 = new Arc();
      Point point0 = new Point(1134.03252113962, 0.0);
      Rectangle rectangle0 = new Rectangle(point0);
      arc0.setFrame((IRectangle) rectangle0);
      Area area0 = new Area(arc0);
      boolean boolean0 = area0.isRectangular();
      assertTrue(area0.isPolygonal());
      assertTrue(area0.isSingular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.0, 982.1605158400536, 0.0, 0.0, 1723.51961212);
      Area area0 = new Area(quadCurve0);
      Area area1 = area0.clone();
      boolean boolean0 = area1.isRectangular();
      assertTrue(area1.isPolygonal());
      assertFalse(area0.equals((Object)area1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      Area area1 = area0.clone();
      assertTrue(area1.isRectangular());
      
      area1.exclusiveOr(area0);
      boolean boolean0 = area1.isRectangular();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Area area0 = new Area(cubicCurve0);
      Area area1 = area0.clone();
      assertTrue(area1.isPolygonal());
      
      area1.exclusiveOr(area0);
      boolean boolean0 = area1.isRectangular();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(334500.47327105096, 334500.47327105096, 334500.47327105096, 5629520.7663269695, 1.0, 4.71238898038469, (-1034.866), 4.71238898038469);
      Rectangle rectangle0 = cubicCurve0.bounds();
      Path path0 = new Path(rectangle0);
      Area area0 = new Area(path0);
      assertTrue(area0.isRectangular());
      
      area0.subtract(area0);
      boolean boolean0 = area0.isRectangular();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Area area0 = new Area(ellipse0);
      boolean boolean0 = area0.isRectangular();
      assertTrue(area0.isSingular());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle((-864.475), (-864.475), (-864.475), 9651616.502935212, (-864.475), 1.0);
      Area area0 = new Area(roundRectangle0);
      AffineTransform affineTransform0 = new AffineTransform();
      // Undeclared exception!
      try { 
        area0.transform(affineTransform0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // First segment must be a SEG_MOVETO
         //
         verifyException("pythagoras.d.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Area area0 = new Area();
      // Undeclared exception!
      try { 
        area0.pathIterator((Transform) null, (-2630.1364974937696));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Flatness is less then zero
         //
         verifyException("pythagoras.d.FlatteningPathIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(3013.54052231, 3013.54052231, (-90.46358122395705), (-90.46358122395705), 2374.260414037, (-90.46358122395705));
      Area area0 = new Area(quadCurve0);
      AffineTransform affineTransform0 = new AffineTransform(1.0, (-90.46358122395705), (-90.46358122395705), (-90.46358122395705), (-90.46358122395705), (-90.46358122395705));
      Area area1 = area0.createTransformedArea(affineTransform0);
      // Undeclared exception!
      area0.add(area1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Area area0 = new Area();
      // Undeclared exception!
      try { 
        area0.contains((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Area", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      Area area0 = new Area(quadCurve0);
      String string0 = area0.toString();
      assertTrue(area0.isSingular());
      assertEquals("Area[coords=6, rules=3, isPoly=false]", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3001.702380513169, 3001.702380513169, 3001.702380513169, 3001.702380513169);
      Area area0 = new Area(rectangle0);
      boolean boolean0 = area0.intersects((IRectangle) rectangle0);
      assertTrue(boolean0);
      assertTrue(area0.isRectangular());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      Area area0 = new Area(cubicCurve0);
      RoundRectangle roundRectangle0 = new RoundRectangle(1.0, 0.0, 1.0, 0.0, 1.0, 0.0);
      Area area1 = new Area(roundRectangle0);
      // Undeclared exception!
      try { 
        area1.exclusiveOr(area0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Area", e);
      }
  }
}
