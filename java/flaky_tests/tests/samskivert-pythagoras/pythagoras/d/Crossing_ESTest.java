/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:12:44 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AbstractCubicCurve;
import pythagoras.d.AbstractEllipse;
import pythagoras.d.AbstractQuadCurve;
import pythagoras.d.AbstractRoundRectangle;
import pythagoras.d.AffineTransform;
import pythagoras.d.Arc;
import pythagoras.d.Area;
import pythagoras.d.Crossing;
import pythagoras.d.CubicCurve;
import pythagoras.d.Ellipse;
import pythagoras.d.FlatteningPathIterator;
import pythagoras.d.IShape;
import pythagoras.d.IdentityTransform;
import pythagoras.d.Line;
import pythagoras.d.Path;
import pythagoras.d.PathIterator;
import pythagoras.d.Point;
import pythagoras.d.QuadCurve;
import pythagoras.d.Rectangle;
import pythagoras.d.RoundRectangle;
import pythagoras.d.Transform;
import pythagoras.d.Vector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Crossing_ESTest extends Crossing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Crossing.intersectCubic(0, (-2615.0), 2834.1508, 0, (-2520.4910688), 1975.946149, 250.8324658047198, (-692.18818491), 0.0, 1.0, 291.83863928, 1.0000099999997474);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Crossing.crossBound(doubleArray0, 2, 0.0, 2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Crossing.isInsideNonZero((-643));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Crossing.intersectCubic((-558.628412014), 0, 2604.833416751756, (-8035.0), 0.0, (-1442.3169), 0, 1324.473134, (-1612.299), 969.0264145112, (-1.000000013351432E-10), (-2598.638721600676));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Crossing.intersectCubic(1.4020629137548057, (-2.0), 0.0, 0.0, 3.4028234663852886E38, 1.6002418867214283, 0.0, Double.NaN, (-292.0227817165), 0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Crossing.intersectCubic((-2475.4581), 0.0, (-1488.437834673121), (-2.0), (-1705.76411052), 2762.5019668665, 3449.869930667, (-4332.198234595799), (-392.82615150000026), 2558.362381296653, 270.0, (-2475.4581));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Crossing.intersectCubic(1281.6492078460046, 0, 275.162739, 655.47, 4043.998544080083, 1773.6041852669357, (-1), 2.0, (-1849.457), (-0.5), 1.000000013351432E-10, (-1));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Crossing.intersectQuad((-2615.0), 1278.5789749, 333.20047335655, 2279.451748271, (-1175.3484245033), 0.0, 0.0, (-2296.614), (-2615.0), 333.20047335655);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Crossing.intersectQuad(1580.042, 360.0, 1202.2185141824475, 0.0, (-3013.1367284976322), 0.0, (-175.16574582552016), (-895.38067238851), 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Crossing.intersectQuad((-3748.64059), 2.0, 412.4050653866, (-410.0986), 1189.28756222104, 3574.784541851391, 0.0, 477.2095381731534, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Crossing.intersectQuad((-860.4517), (-558.628412014), 0, 272.89698789315, 1.000000013351432E-10, 1547.90316, (-1.000000013351432E-10), 0.0, (-558.628412014), 0.0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Crossing.intersectQuad(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Crossing.intersectQuad(2937.65, 2615.8098, (-128.674129), 3.0, (-2.931464563280909), 2615.8098, (-1090.69277714), 2615.8098, 0.5042199015590509, 0.0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Crossing.intersectLine(Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Crossing.isZero(9.999999747378752E-6);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 9.999999747378752E-6;
      // Undeclared exception!
      try { 
        Crossing.fixRoots(doubleArray0, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Crossing.crossCubic(1076.173977, 2, (-732.4837599999997), 0.0, 1076.173977, (-1947.033), (-4625.948295), 0.0, 297.36467357417916, (-0.5));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Crossing.crossCubic(0, (-2354.026095), 0.0, (-558.628412014), (-1.000000013351432E-10), (-46386.602959158), 1293.347296791, 2051.37, 0.0, 1547.90316);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Crossing.crossCubic(1036.8, (-1125.561), 27.0, 1.49983227118515, 27.0, 2604.471626313119, (-855.0), (-1.0), 180.0, 1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Crossing.crossCubic((-845.8450771555), (-845.8450771555), (-845.8450771555), 0.0708024030355611, (-845.8450771555), 7.0, 1.5707963267948966, (-2014.4), 9.999999747378752E-6, (-1004.8079298578));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Crossing.crossCubic((-4062.61982821127), 0.9999900000002526, (-843.9426), 5180.0, 0.9999900000002526, 1.000000013351432E-10, 5932.848396550658, 0.9999900000002526, (-1.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Crossing.crossCubic((-2314.334989351992), 4, 1.0, 0.0, 0.0, (-2314.334989351992), 4, 0.0, 0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Crossing.crossCubic(254, 4.71238898038469, 1.0, 1263.535993, 3025.06962221, 177.22165, (-0.7631693707766776), (-6910.70668238556), (-0.5), (-2748.4985134));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Crossing.crossQuad(6.0, 259.4774223, 6.0, 4854.9298, (-0.5), 6.0, 6.0, 6.0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Crossing.crossQuad(0.2537801238131552, 360.0, 0.0, (-842.0), 0.0, 3114.90675, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Crossing.crossQuad(4107.1130965956, 2193.3212128197633, 4107.1130965956, 5932.848396550658, 0.0, (-1.000000013351432E-10), 2616.75879589, 520.703346000002);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Crossing.crossQuad((-485.9037623), (-113.835426948), 0.0, 0.0, 1092.3, 0.0, 0.9999900000002526, (-2767.71));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Crossing.crossQuad(2624400.0, (-1), 2566.74742, 0.0, (-8039.232164058297), 2.0, 3.406603324457536, (-2615.9727));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(1.0000099999997474, 1.0000099999997474, 1.0000099999997474, 1.0000099999997474, 1.0000099999997474, 1.0000099999997474, 3257.249, 2680.3516284);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0000099999997474;
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.addBound(doubleArray0, 744250901, doubleArray0, 744250901, 2680.3516284, 1013.51585, true, (-2146923499));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-9.999999747378752E-6);
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-9.999999747378752E-6), 447.5862624267, 3096428.9930343996, (-4773.7301702463), 4736.334, (-60.925172234934), (-1974.63), 2337.5176728);
      crossing_CubicCurveH0.addBound(doubleArray0, 2, doubleArray0, 1, (-569.32819), (-515.28831934), false, (-1909));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(33.905850227, (-2.0), (-4249.220134309813), (-1216.9397), (-3953.8157910856944), (-558.628412014), 0.9999900000002526, (-3031.1137));
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 0.9999900000002526;
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(doubleArray0, 592, (-3031.1137), 0.01597337029473296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(254, (-793.104), 0.5042199015590509, (-2643.994), 1, 233.04308000000026, 1, 46.03367049952272);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 9.999999747378752E-6;
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(doubleArray0, 254, (-0.013761894492116065), 9.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(224.2048273, (-3216.58), 1614.7857525, 1614.7857525, 161.33588701743, (-2387.2811515802264), 4375.86855612, 193.80415);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0000099999997474;
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(doubleArray0, 4, 161.33588701743, (-5060.8284168));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(46.03367049952272, (-633.621), 254, 1.5707963267948966, 636.7576001989, 2193.3212128197633, 270.0, 254);
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (-9.999999747378752E-6);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(doubleArray0, 255, (-2.1841624974512177), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(0, 0.0, 930.5636039628, 0.0, 0.0, 1.3333333730697632, (-1180.215), 0.0);
      crossing_CubicCurveH0.cross(doubleArray0, (-728), 2705.599145209, (-30.0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-1.000000013351432E-10), (-1.000000013351432E-10), -0.0, 3.141592653589793, 1.0, 2258.8402075778);
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (-9.999999747378752E-6);
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.addBound(doubleArray0, 2695, doubleArray0, 692, 0.0, (-3.141592653589793), false, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0.25, (-2488.4780043187), 360.0, (-584.191), (-81.649), (-2488.4780043187));
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (-9.999999747378752E-6);
      crossing_QuadCurve0.cross(doubleArray0, 5, 223.133852, 2.41562882566089);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Crossing.crossQuad(Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Crossing.sortBound((double[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.8583087074164344);
      doubleArray0[2] = (-1.8583087074164344);
      Crossing.solveCubic(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Crossing.solveCubic(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Crossing.isInsideEvenOdd((-5227));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Crossing.isInsideEvenOdd(270);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse();
      Crossing.intersectShape(ellipse0, (-1632.79), (-1364.199829512), 1.0000099999997474, (-1.0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Line line0 = new Line(2.0, 137.74143, 1700.4071587, 4.0);
      Rectangle rectangle0 = line0.bounds();
      Crossing.intersectShape(rectangle0, (-348.7883432248314), 1.0, 1700.4071587, 4.0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-4099.513220923798), 0, (-2081.887), (-1.0), 2044.0585339926722, 1265.9217, (-1004.8079298578), 4246.778648312);
      Rectangle rectangle0 = cubicCurve0.bounds();
      Crossing.intersectShape(rectangle0, (-2081.887), 27.0, 0.3333333432674408, 0.6666666865348816);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Ellipse ellipse0 = new Ellipse(135.2, 9.999999747378752E-6, 3.4028234663852886E38, 3.4028234663852886E38);
      PathIterator pathIterator0 = ellipse0.pathIterator((Transform) null);
      Crossing.intersectPath(pathIterator0, 264.89115654, 264.89115654, 6.0, 1695.873070827708);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Crossing.fixRoots((double[]) null, (-952));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Crossing.fixRoots(doubleArray0, 1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector vector0 = new Vector();
      Line line0 = new Line(vector0, vector0);
      Point point0 = line0.p2();
      Rectangle rectangle0 = new Rectangle(point0);
      Crossing.crossShape(rectangle0, 0.5, (-1459.6937764));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(6.0, 0.3122555249664043, 1322.194074, (-3758.53696), 728.88, 4.71238898038469, 135.2, (-492.36240893));
      cubicCurve0.setCurve(0.6666666865348816, 0.0, (-1224.340013960257), 135.2, (-1192.3711983), (-3758.53696), 1.3333333730697632, 3547.8133006143);
      int int0 = Crossing.crossShape(cubicCurve0, 9.999999747378752E-6, 135.2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve((-22285.482291813954), 2161.0256952353, 4.71238898038469, 10075.040465277492, 10075.040465277492, (-1175.3484245033), 4641.2, 0.0);
      Rectangle rectangle0 = cubicCurve0.bounds();
      int int0 = Crossing.crossShape(rectangle0, 2161.0256952353, (-1175.3484245033));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.22226106278273913, 418.141560728586, (-2951.02932), (-198.56869841), 1.5707963267948966, 0.0, 298.9354699009741, 418.141560728586);
      IdentityTransform identityTransform0 = new IdentityTransform();
      PathIterator pathIterator0 = cubicCurve0.pathIterator((Transform) identityTransform0);
      int int0 = Crossing.crossPath(pathIterator0, 298.9354699009741, 2.0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(2, 200.8251, (-23.057372577852192), (-23.057372577852192), 6.0, (-324.890702427));
      AffineTransform affineTransform0 = new AffineTransform((-600.890382839559), 6.0, (-2.0), 0.6666666865348816, 1399.93);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      AbstractQuadCurve.Iterator abstractQuadCurve_Iterator0 = new AbstractQuadCurve.Iterator(quadCurve0, affineTransform1);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(abstractQuadCurve_Iterator0, 107.35540162, 1349);
      int int0 = Crossing.crossPath(flatteningPathIterator0, 250.0586319302838, 1261.1881);
      assertTrue(flatteningPathIterator0.isDone());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = Crossing.crossBound(doubleArray0, (-6), 0.5, (-6));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = Crossing.crossBound(doubleArray0, 1557, (-487.0629859998), 594.206002054);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      Crossing.sortBound(doubleArray0, (-2147483647));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.sortBound((double[]) null, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Crossing.sortBound(doubleArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.solveQuad((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Crossing.solveQuad(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 0
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.solveCubic((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Crossing.solveCubic(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 0
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.intersectShape((IShape) null, (-1090.69277714), 90.0, (-4372.23), 78.2544317746);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.intersectPath((PathIterator) null, (-1.000000013351432E-10), 0.0, (-1.000000013351432E-10), (-1.000000013351432E-10));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      CubicCurve cubicCurve0 = new CubicCurve();
      AbstractCubicCurve.Iterator abstractCubicCurve_Iterator0 = new AbstractCubicCurve.Iterator(cubicCurve0, identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(abstractCubicCurve_Iterator0, 0.0, 0);
      // Undeclared exception!
      try { 
        Crossing.intersectPath(flatteningPathIterator0, 0.005135802469135804, 0.0, 0.4, (-1240.61178151));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.fixRoots((double[]) null, 858607789);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.crossShape((IShape) null, (-166.3544), 1027.05441);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Ellipse ellipse0 = new Ellipse();
      AbstractEllipse.Iterator abstractEllipse_Iterator0 = new AbstractEllipse.Iterator(ellipse0, identityTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(abstractEllipse_Iterator0, 0.0, 3288);
      // Undeclared exception!
      Crossing.crossPath(flatteningPathIterator0, (-2189.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.crossPath((PathIterator) null, 3150.77333732, 3150.77333732);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      AffineTransform affineTransform0 = new AffineTransform();
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, affineTransform0);
      FlatteningPathIterator flatteningPathIterator0 = new FlatteningPathIterator(abstractRoundRectangle_Iterator0, 1.0, 4);
      // Undeclared exception!
      try { 
        Crossing.crossPath(flatteningPathIterator0, 1.5707963267948966, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Crossing.crossBound((double[]) null, 2353, 2353, 2353);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Crossing.crossBound(doubleArray0, 4, 4, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 0
         //
         verifyException("pythagoras.d.Crossing", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve();
      AffineTransform affineTransform0 = new AffineTransform();
      PathIterator pathIterator0 = cubicCurve0.pathIterator((Transform) affineTransform0, 0.0);
      int int0 = Crossing.intersectPath(pathIterator0, 0.0, 0.0, 1.0, 0.0);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0.0, 0.0, 4, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = Crossing.intersectLine(1266.8831677315961, 1266.8831677315961, 0.0, 1266.8831677315961, 741.50652787, 0.6667261423306962, 0.0, 0.6667261423306962);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = Crossing.intersectLine((-63.3630768145135), 0.0, 0.0, 0.0, (-1.000000013351432E-10), (-63.3630768145135), (-63.3630768145135), (-63.3630768145135));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = Crossing.intersectLine((-63.3630768145135), 0.0, 0.0, 0.0, 0.0, (-63.3630768145135), (-63.3630768145135), (-63.3630768145135));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = Crossing.intersectLine(5.0, 5.0, 5.0, 5.0, (-3262.0), 5.0, 5.0, (-3262.0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = Crossing.intersectLine(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = Crossing.intersectLine(0.0, 0.0, 0.0, 0.0, 0.0, 3647.09221, 4, 1.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = Crossing.intersectLine(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = Crossing.intersectLine(90.0, 90.0, 90.0, (-640.0617957928207), 90.0, 90.0, (-640.0617957928207), 90.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = Crossing.isZero((-559.2021));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = Crossing.isZero(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = Crossing.crossCubic((-3310.644), (-3310.644), 0.0, (-3310.644), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = Crossing.crossCubic(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = Crossing.crossCubic(1572.527298, 1572.527298, 1572.527298, 1572.527298, 1572.527298, 1572.527298, 1572.527298, 1572.527298, 4.0, 1572.527298);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = Crossing.crossCubic(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = Crossing.crossCubic(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = Crossing.crossQuad((-1.0E-10), (-1.0E-10), (-1.0E-10), (-1.0E-10), (-1.0E-10), (-1.0E-10), (-1.0E-10), (-1.0E-10));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = Crossing.crossLine(5180.0, 5180.0, 0.3333333432674408, 0.3333333432674408, 3449.869930667, 275.162739);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = Crossing.crossLine(1.0, 1.0, 4, 1.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = Crossing.crossLine(0.0, 4, 0.0, 0.0, 1.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = Crossing.crossLine(3058.469252226554, 6.283185307179586, 2.0943951023931953, (-3.141592653589793), 2.0943951023931953, 3058.469252226554);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(2, 4021.0209220786646, (-1), 7.0, 1.6168609255794354E7, 2227.32525, 5726.34547, 204.2812492855028);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.addBound(doubleArray0, 0, doubleArray0, 2, (-1067.7528454), 9.999999747378752E-6, false, (-321));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-2488.4780043187), (-780.8537885), (-584.191), 454.531517, (-2488.4780043187), 0.0, (-20.23055083), (-432.206791881));
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.addBound(doubleArray0, 0, doubleArray0, 6, (-4397.492342719575), 3.141592653589793, true, 1073747193);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-548.671191024531);
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(1435.82, 1278.5789749, 0.0, (-2555.503), 1.3521893337235045E8, 3.141592653589793, 2383.45421492, (-1.000000013351432E-10));
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.addBound(doubleArray0, 1318, doubleArray0, 1318, -0.0, (-186.348260165), false, 1318);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(0.0, 3114.90675, 0.0, 0.0, 0.0, 3114.90675, 0.0, 3114.90675);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.addBound(doubleArray0, (-2737), doubleArray0, 11, (-2737), 0.0, false, 3567);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2737 out of bounds for length 7
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-1577.745452808), 1.000000013351432E-10, 2.0, 867.3, (-2014.4), 867.3, 78.12036319385, (-0.5));
      double[] doubleArray0 = new double[9];
      crossing_CubicCurveH0.solveExtremeX(doubleArray0);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(doubleArray0, 1592, (-0.5), 0.6322371258360852);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(0.0, 3114.90675, 0.0, 0.0, 0.0, 3114.90675, 0.0, 3114.90675);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.5;
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(doubleArray0, 733, 0.5, (-3.4028234663852886E38));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(2714.69710557, 1323.329869726, 3.141592653589793, 2.0, 1.000000013351432E-10, 2164935.148176841, (-24921.197793694213), 2.0);
      double[] doubleArray0 = new double[6];
      crossing_CubicCurveH0.solveExtremeY(doubleArray0);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(doubleArray0, 2144171137, 1667.428379, (-1470.31343750645));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-1880.37), 0.5, 1906.231222102, 0.0, 0.0, (-1171.899094), 0.0, 7464.716678294091);
      double[] doubleArray0 = new double[7];
      int int0 = crossing_CubicCurveH0.solveExtremeX(doubleArray0);
      assertEquals(2, int0);
      
      int int1 = crossing_CubicCurveH0.cross(doubleArray0, 2, (-3169.98), 0.0);
      assertArrayEquals(new double[] {1.0000000000000002, 0.49829839416817434, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-2615.0), 0.0, 0.0, 270.0, 270.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[4];
      crossing_CubicCurveH0.ay = 6.0;
      crossing_CubicCurveH0.solveExtremeY(doubleArray0);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(doubleArray0, 2144171156, 0.0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-1880.37), 0.0, 0.0, 0.0, 0.0, (-1171.899094), 0.0, 7464.716678294091);
      double[] doubleArray0 = new double[7];
      int int0 = crossing_CubicCurveH0.solveExtremeX(doubleArray0);
      assertEquals(1, int0);
      
      int int1 = crossing_CubicCurveH0.cross(doubleArray0, 2, (-3169.98), 0.0);
      assertEquals(1, int1);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(0.0, 3114.90675, 0.0, 0.0, 0.0, 3114.90675, 477.2095381731534, 3114.90675);
      crossing_CubicCurveH0.cx = 477.2095381731534;
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(doubleArray0, 2779, (-966.74353311), 3.141592653589793);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 360.0;
      int int0 = crossing_CubicCurveH0.cross(doubleArray0, 2, (-17.38), 1823.062797);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(254, (-793.104), 0.5042199015590509, (-2643.994), 1, 233.04308000000026, 1, 46.03367049952272);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-299.00934601543474);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(doubleArray0, 254, (-0.013761894492116065), 9.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-1248.9391892604), 3114.90675, 477.2095381731534, 1887.98620632683, 0.0, 384);
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.addBound(doubleArray0, 2, doubleArray0, 384, (-798.43), 0.0, false, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(180.0, 180.0, 180.0, 180.0, 0.0, 1855.624080939);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.addBound(doubleArray0, (-1276), doubleArray0, 56411563, 1.5707963267948966, 6187.43990536616, true, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-425.45232);
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0.9999900000002526, 1036.8, 9.999999747378752E-6, 1012.2201800876526, 2.0943951023931953, (-1894.16672));
      int int0 = crossing_QuadCurve0.addBound(doubleArray0, 1, doubleArray0, 1, (-3102.334307), 90.0, true, 4018);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-2951.02932), (-1187.2088411), (-1796.6), (-1796.6), 0, 4.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0000099999997474;
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.addBound(doubleArray0, (-1580), doubleArray0, 2146662744, (-174.571729), (-1580), true, (-3679));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("pythagoras.d.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0.9999900000002526, 1036.8, 9.999999747378752E-6, 1012.2201800876526, 2.0943951023931953, (-1894.16672));
      int int0 = crossing_QuadCurve0.addBound(doubleArray0, 1, doubleArray0, 1, (-3102.334307), 90.0, true, 4018);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, -0.0, 4018.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0.0, 5.0, 5.0, 54.0, 1373.8629370202564, 54.0);
      double[] doubleArray0 = new double[2];
      int int0 = crossing_QuadCurve0.solveExtreme(doubleArray0);
      assertArrayEquals(new double[] {(-0.0036660575372213806), 1.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0, 0, 0, 0, 0, 0);
      double[] doubleArray0 = new double[4];
      int int0 = crossing_QuadCurve0.solveExtreme(doubleArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(0.9999900000002526, 0, (-3.3793526611334794), 1.000000013351432E-10, (-600.8903828395594), 0.9999900000002526, 0.9999900000002526, (-600.8903828395594));
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-600.8903828395594);
      crossing_CubicCurveH0.solvePoint(doubleArray0, 1.0000000000000555);
      Crossing.solveCubic(doubleArray0, doubleArray0);
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-2700.7440952361576), 614.954567236, (-3721.03612061), 6.0, 0.0, (-3.3793526611334794));
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(doubleArray0, 1884, 1.0000099999997474, (-1112.2157206585919));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-9.999999747378752E-6), -0.0, (-643.0), 1.000000013351432E-10, -0.0, (-1248.38345004603));
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 0.9999900000002526;
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(doubleArray0, 205, 0, (-1771.103));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("pythagoras.d.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0, (-600.8903828395594), 1.000000013351432E-10, 1.000000013351432E-10, 0, (-600.8903828395594));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 9.999999747378752E-6;
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(doubleArray0, 254, 254, 1.000000013351432E-10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("pythagoras.d.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0.0, 0.0, 0.0, (-1832.0), 0.0, 2754.90675);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(doubleArray0, 2145628210, 1438.92828, (-626.7878300001));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-6.447945711467406E-10), (-3461.637391785), 1.0, (-3048.89205), 0, (-233.04309));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      int int0 = crossing_QuadCurve0.cross(doubleArray0, 4, 1.5707963267948966, (-3461.637391785));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(1.0000099999997474, 674.892097953, 674.892097953, 674.892097953, 27.0, (-2093.337111));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0000099999997474;
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(doubleArray0, 585, 0.5, 585);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-62.4), 1, 0, 16.5530062895901, 1285.630414791898, 2260.2297746);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      int int0 = crossing_QuadCurve0.cross(doubleArray0, 1, (-1.000000013351432E-10), 1.0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(60.328419194, 60.328419194, 60.328419194, 60.328419194, 0.0, (-1.000000013351432E-10));
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(doubleArray0, 28, (-831.262455137), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("pythagoras.d.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0.0, 27.0, 2273.0, 0.0, (-515.82607513243), 1220.2904);
      double[] doubleArray0 = new double[1];
      int int0 = crossing_QuadCurve0.cross(doubleArray0, 1, (-261.9344438915), (-2497.39));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(2937.65, 0.0, (-328.9736167708), (-328.9736167708), (-328.9736167708), 2615.8098);
      double[] doubleArray0 = new double[0];
      int int0 = crossing_QuadCurve0.cross(doubleArray0, (-2147483566), (-2724.94), (-128.674129));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 60.328419194;
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-1.000000013351432E-10), 60.328419194, (-1.000000013351432E-10), 60.328419194, 0.0, 0.0, (-26.25812537), 0.0);
      crossing_CubicCurveH0.solvePoint(doubleArray0, (-1.000000013351432E-10));
      int int0 = Crossing.solveCubic(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-0.013761894492116065), 0.0068809472460580326, 0.0, 60.328419194}, doubleArray0, 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-26.25812537);
      doubleArray0[3] = 0.6666666865348816;
      int int0 = Crossing.solveCubic(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.402397132862765, 0.0, 0.0, 0.6666666865348816}, doubleArray0, 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (-345.403);
      int int0 = Crossing.solveCubic(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-345.403), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-548.671191024531);
      doubleArray0[2] = (-2555.503);
      int int0 = Crossing.solveQuad(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-0.21470183796478853), -0.0, (-2555.503), 0.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH((-1577.745452808), 1.000000013351432E-10, 2.0, 867.3, (-2014.4), 867.3, 78.12036319385, (-0.5));
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 63.523;
      int int0 = crossing_CubicCurveH0.solveExtremeX(doubleArray0);
      assertEquals(2, int0);
      
      int int1 = Crossing.solveQuad(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.5798848694655769, 0.35356476968988354, 63.523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-2649.838);
      int int0 = Crossing.solveQuad(doubleArray0, doubleArray0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, (-2649.838), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-2555.503);
      int int0 = Crossing.solveQuad(doubleArray0, doubleArray0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {-0.0, 0.0, (-2555.503), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = Crossing.solveQuad(doubleArray0, doubleArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Crossing.CubicCurveH crossing_CubicCurveH0 = new Crossing.CubicCurveH(0.0, 3114.90675, 0.0, 0.0, 0.0, 3114.90675, 477.2095381731534, 3114.90675);
      double[] doubleArray0 = new double[7];
      crossing_CubicCurveH0.solveExtremeY(doubleArray0);
      // Undeclared exception!
      try { 
        crossing_CubicCurveH0.cross(doubleArray0, 2712, 1975.9265401369425, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.Crossing$CubicCurveH", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve((-5953.2577923393), 1.0000099999997474, (-5953.2577923393), (-553.2082876270096), (-1026.949869650992), (-1396.1942561699339));
      double[] doubleArray0 = new double[3];
      int int0 = crossing_QuadCurve0.solvePoint(doubleArray0, 2793.1);
      assertArrayEquals(new double[] {0.7529783082860841, (-0.7529783082860841), 0.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = Crossing.isInsideNonZero(919);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = Crossing.isInsideNonZero(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0, 0.0, 0.22, 0.22, 0.22, 0.0, 0.0, 0.22);
      IdentityTransform identityTransform0 = new IdentityTransform();
      Area area0 = new Area(cubicCurve0);
      PathIterator pathIterator0 = area0.pathIterator((Transform) identityTransform0, 0.0);
      int int0 = Crossing.intersectPath(pathIterator0, 0.22, 0.22, 0.0, 0.0);
      assertTrue(pathIterator0.isDone());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-15.311225599005159), 0.0, 0.0, 0.0, 0.0, (-15.311225599005159), (-15.311225599005159), (-15.311225599005159), 0.0, 0.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = Crossing.intersectCubic(1.3333333730697632, 1.0000099999997474, 1.000000013351432E-10, (-601.2221566373097), 1.000000013351432E-10, (-1539.1951869071), 1.3333333730697632, (-2103.666474714536), (-2103.666474714536), (-229.76), 1.0000099999997474, 1107.9459083);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-9.999999747378752E-6), 0.0, (-610.4137541641566), 0.0, 0.0, (-9.999999747378752E-6), (-9.999999747378752E-6), (-9.999999747378752E-6), 0.0, (-610.4137541641566), 0.0, (-610.4137541641566));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-66.774367), 0.0, 0.0, 0.0, (-66.774367), 0.0, (-12.365962339670952), (-12.365962339670952), 0.0, 0.0, 0.0, (-66.774367));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = Crossing.intersectCubic(1.000000013351432E-10, 0.0, (-601.2221566373097), 0.0, 0.0, 1.000000013351432E-10, 1.0000099999997474, 1.0000099999997474, 0.0, (-601.2221566373097), 0.0, (-601.2221566373097));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = Crossing.intersectCubic(1.000000013351432E-10, 0.0, (-1101.619548669486), 0.0, 0.0, 1.000000013351432E-10, (-3.7477500082991835), (-3.7477500082991835), 0.0, (-1101.619548669486), 0.0, (-1101.619548669486));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-1114.1010422474767), 0.0, 0.0, 0.0, (-1114.1010422474767), 0.0, 1.000000013351432E-10, 1.000000013351432E-10, 0.0, 0.0, 0.0, (-1114.1010422474767));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = Crossing.intersectCubic(0.0, 0.0, 9.999999747378752E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.999999747378752E-6, 0.0, 9.999999747378752E-6);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = Crossing.intersectCubic(1.000000013351432E-10, 0.0, 1.000000013351432E-10, 0.0, 0.0, 1.000000013351432E-10, 1.000000013351432E-10, 1.000000013351432E-10, 0.0, 1.000000013351432E-10, 0.0, 1.000000013351432E-10);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = Crossing.intersectCubic(0.0, 0.0, 0.0, 2157.4, 0.0, 1.0, 0.0, 2157.4, 0.0, 4, 4, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-352.0), (-352.0), 767.0655250809883, (-352.0), (-352.0), 0.0, 0.0, 1189.4803608945945, 0.0, 1189.4803608945945, 1189.4803608945945, 1189.4803608945945);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = Crossing.intersectCubic(0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = Crossing.intersectCubic((-1.417952824409807), 0.0, (-1.417952824409807), 0.0, 0.0, (-1.417952824409807), (-1.417952824409807), (-1.417952824409807), 0.0, (-1.417952824409807), 0.0, (-1.417952824409807));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = Crossing.intersectCubic(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 324.6, 0.0, 324.6, 0.0, 0.0, 1204.201842976);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = Crossing.intersectCubic(1.0, 0.0, 4, 1.0, 495.56962405925515, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = Crossing.intersectQuad(1.000000013351432E-10, 0.0, 0.0, 0.0, 1.000000013351432E-10, 0.0, 0.0, 0.0, 0.25, 1.000000013351432E-10);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0.0, 0.0, 2815.4003, 0.0, 0.0, 2815.4003, 2815.4003, 0.0, 2815.4003, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = Crossing.intersectQuad(1.0, 1.0, 4, 1.0, (-2314.334989351992), 0.0, 0.0, 1.0, 1.0, (-2314.334989351992));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = Crossing.intersectQuad(1.000000013351432E-10, 0.0, 0.0, 0.0, 1.000000013351432E-10, 0.0, 0.0, 0.0, 1.000000013351432E-10, (-0.19921917578284112));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = Crossing.intersectQuad((-0.24385095006026575), 0.0, 1.000000013351432E-10, 0.0, 0.0, 0.0, 1.000000013351432E-10, 0.0, 0.0, (-0.24385095006026575));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = Crossing.intersectQuad((-0.24385095006026575), 0.0, (-5.3711585410653795), 0.0, 0.0, 0.0, (-5.3711585410653795), 0.0, 0.0, (-0.24385095006026575));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = Crossing.intersectQuad((-0.19921917578284112), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-0.19921917578284112));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0.0, 0.0, 4, 1.0, (-2314.334989351992), 0.0, 0.0, 1.0, 0.0, (-2314.334989351992));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = Crossing.intersectQuad((-1147.347908912), (-1147.347908912), (-1147.347908912), (-1147.347908912), 6.0, 6.0, (-1147.347908912), 6.0, (-1147.347908912), 6.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      QuadCurve quadCurve0 = new QuadCurve();
      AbstractQuadCurve.Iterator abstractQuadCurve_Iterator0 = new AbstractQuadCurve.Iterator(quadCurve0, affineTransform0);
      int int0 = Crossing.intersectPath(abstractQuadCurve_Iterator0, 0.0, 1303.422724054, 1303.422724054, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = Crossing.intersectQuad((-1408.15), 1.0, (-1408.15), (-406.44260391274344), 1.0, 4, 0.0, (-406.44260391274344), 1.0, (-1408.15));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0.22226106278273913, 138.33023343750185, 138.33023343750185, 2.0, 0, (-561.1362875519434), 0.25, 0, 2.0, (-1274.5));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = Crossing.intersectQuad(180.0, 0.0, 180.0, 0.0, 0.0, 0.0, 180.0, 0.0, 0.0, 180.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = Crossing.intersectQuad(1.0, 9.999999747378752E-6, 0.0, 0.0, 1.0, 4, 4, 0.0, 0.0, 1.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0.22226106278273913, 138.33023343750185, 138.33023343750185, (-561.1362875519434), 0, (-561.1362875519434), 0.25, 0, (-561.1362875519434), (-1274.5));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = Crossing.intersectLine(Double.NaN, 1.90893699760018E8, 0.0, 595.1413610650717, 1.90893699760018E8, 595.1413610650717, (-2985.4581), (-2985.4581));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = Crossing.intersectLine(1267.441, 1267.441, 0.0, 1267.441, (-2702.2224265), 0.6667261423306962, 0.0, 0.6667261423306962);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = Crossing.intersectLine(0.0, 2948.7091554051644, 2948.7091554051644, 4, (-0.5), 0.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = Crossing.intersectLine(254, 254, 0.0, 0.3333333432674408, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = Crossing.intersectLine((-1.000000013351432E-10), 0.0, 0.0, 0.0, (-1.000000013351432E-10), (-1.000000013351432E-10), (-1.000000013351432E-10), (-1.000000013351432E-10));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.0, 0.0, 0.0, 0.0, (-2608.6855590153323), 0.0, 0.0, (-2608.6855590153323));
      IdentityTransform identityTransform0 = new IdentityTransform();
      PathIterator pathIterator0 = cubicCurve0.pathIterator((Transform) identityTransform0, 0.0);
      int int0 = Crossing.intersectPath(pathIterator0, 0.0, (-2865.2647), 6.023656775919211, (-2865.2647));
      assertTrue(pathIterator0.isDone());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = Crossing.intersectLine((-1211.530427016), 3.141592653589793, 3.141592653589793, (-1211.530427016), (-1211.530427016), (-1211.530427016), 3.141592653589793, (-1211.530427016));
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = Crossing.intersectLine(0.0, 0.0, 1337.0, 764.4794705083523, 1.0, 1.0, 1.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = Crossing.intersectLine(180.0, 175.69048994505, 0.0, 1294.65342221673, 180.0, 180.0, 175.69048994505, 180.0);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = Crossing.intersectLine(1.0, 0.0, 0.0, 4, 0.0, 0.0, 4, 4);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = Crossing.intersectLine(0, 0, (-1.0E-10), (-1.0E-10), 0, (-1.0E-10), 0, (-1.0E-10));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = Crossing.intersectLine((-780.6488173), (-6.0), (-6.0), (-780.6488173), (-780.6488173), (-6.0), 0.0, (-6.0));
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      CubicCurve cubicCurve0 = new CubicCurve(0.0, 0.0, 0.0, (-1.38044249), (-1.38044249), 0.0, 0.0, 3701.34978080349);
      PathIterator pathIterator0 = cubicCurve0.pathIterator((Transform) affineTransform0, 0.0);
      int int0 = Crossing.intersectPath(pathIterator0, 0.0, 0.012115378990918082, 1.497620470092654, 0.0);
      assertTrue(pathIterator0.isDone());
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = Crossing.intersectLine(4, (-2128.517115270723), 0.0, 0.0, 0.0, 0.0, 0.0, 4);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.22226106278273913, (-561.1362875519434), (-2951.02932), (-2951.02932), 0, 0.016, 0, (-561.1362875519434));
      IdentityTransform identityTransform0 = new IdentityTransform();
      Area area0 = new Area(cubicCurve0);
      PathIterator pathIterator0 = area0.pathIterator((Transform) identityTransform0, 0.5);
      int int0 = Crossing.intersectPath(pathIterator0, 1.000000013351432E-10, (-2951.02932), 0.22226106278273913, 180.0);
      assertTrue(pathIterator0.isDone());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Arc arc0 = new Arc(114.13317665, 2, 2, 2, 2, 2, 2);
      Path path0 = new Path(arc0);
      Path.Iterator path_Iterator0 = new Path.Iterator(path0);
      int int0 = Crossing.crossPath(path_Iterator0, (-2905.6), 2.0);
      assertTrue(path_Iterator0.isDone());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = Crossing.crossCubic((-828.714839149), 0.0, 0.0, 0.0, (-4050.718), 0.0, (-4050.718), 0.0, 0.0, (-4050.718));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = Crossing.crossCubic(52.78617858549613, 52.78617858549613, 52.78617858549613, 52.78617858549613, (-148.1457655355), 52.78617858549613, 52.78617858549613, 52.78617858549613, (-9.9999997E-6), (-9.9999997E-6));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = Crossing.crossCubic((-3301.9), 0.0, 0.0, 0.0, 0.0, 0.0, (-9.999999747378752E-6), (-9.999999747378752E-6), 0.0, (-3301.9));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = Crossing.crossCubic(4, 0.0, 911.93141454, 1.0, 0.0, 4, (-6.435850004228454E-15), 4, 1.0, (-1660.203790443));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = Crossing.crossCubic(1.944982297056597, 2950.19722352381, 0.0, 1.944982297056597, 1.944982297056597, 1.944982297056597, 2950.19722352381, 1.944982297056597, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = Crossing.crossCubic(0.0, 0.0, 9.999999747378752E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-17174.830660799));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Ellipse ellipse0 = new Ellipse(4, 4, 0.0, 4);
      AbstractEllipse.Iterator abstractEllipse_Iterator0 = new AbstractEllipse.Iterator(ellipse0, affineTransform0);
      int int0 = Crossing.crossPath(abstractEllipse_Iterator0, 4, 0.0);
      assertTrue(abstractEllipse_Iterator0.isDone());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = Crossing.crossCubic(1.0E-10, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0E-10, 1.0E-10, 0.0, 1.0E-10);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = Crossing.crossCubic((-1.4739592322601527), 0.2073901156914683, (-1.4739592322601527), 0.2073901156914683, 0.2073901156914683, (-1.4739592322601527), 0.2073901156914683, 0.2073901156914683, 0.2073901156914683, 0.2073901156914683);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = Crossing.crossCubic(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1596.680013168381), 0.0, (-1596.680013168381), 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = Crossing.crossCubic((-1.4739592322602), (-12.51681700963008), (-1.4739592322602), (-12.51681700963008), (-12.51681700963008), (-1.4739592322602), (-12.51681700963008), (-12.51681700963008), (-12.51681700963008), (-12.51681700963008));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = Crossing.crossQuad(266.45064, 266.45064, 0, 10.0, 0, 266.45064, 10.0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = Crossing.crossQuad(0.0, 4, 4, 4, 0.0, 0.75, 1.0, 1.0E-10);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = Crossing.crossQuad(0, 0, (-1.0E-10), 626.788, 626.788, 626.788, (-1.0E-10), (-1.0E-10));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = Crossing.crossQuad((-1300.5407158), 0.0, 4, 4, 1.0, 0.0, 4, (-1300.5407158));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = Crossing.crossQuad((-1082.03), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1082.03));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = Crossing.crossQuad(0, 0, (-1.0E-10), 0, 0, 0, (-1.0E-10), (-1.0E-10));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = Crossing.crossQuad(0, 0, (-1.0E-10), (-1.0E-10), (-1.0E-10), (-1.0E-10), (-1.0E-10), (-1.0E-10));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve();
      AbstractQuadCurve.Iterator abstractQuadCurve_Iterator0 = new AbstractQuadCurve.Iterator(quadCurve0, (Transform) null);
      abstractQuadCurve_Iterator0.next();
      int int0 = Crossing.crossPath(abstractQuadCurve_Iterator0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = Crossing.crossQuad((-414.2412193439498), 0.0, (-2951.02932), (-2.0), 0.0, (-1652.37), (-560.81086715), 0.01606347460763574);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = Crossing.crossQuad(0.0, 4, 0.0, 0.0, 0.0, (-356.79562197855), 1.0, 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = Crossing.crossQuad(938.07351131, 938.07351131, 938.07351131, 938.07351131, 1171.115652, 1171.115652, 1171.115652, 1171.115652);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = Crossing.crossQuad(1.000000013351432E-10, 0.0, 1.000000013351432E-10, 0.0, 1.000000013351432E-10, 1.000000013351432E-10, 0.0, 1.000000013351432E-10);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = Crossing.crossQuad(4, 0.0, 1.0, 1501.11, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = Crossing.crossLine(1.0, 0.0, 598.2559380305455, 1.0000099999997474, 1.0000099999997474, 0.0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = Crossing.crossLine(0.0, 0.0, (-2947.8850666659373), 0.0, 0.0, (-2947.8850666659373));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = Crossing.crossLine(0.0, 1.0, 1.0, 1.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = Crossing.crossLine((-1.000000013351432E-10), 0.0, 0.0, (-1.000000013351432E-10), 0.0, (-1.000000013351432E-10));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = Crossing.crossLine((-2988.2409381), 0.0, 0.0, 0.0, 0.0, (-2988.2409381));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = Crossing.crossLine(0.0, (-12.802620867916923), 0.0, 0.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      RoundRectangle roundRectangle0 = new RoundRectangle();
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 1280.806688181, 0.0);
      AbstractRoundRectangle.Iterator abstractRoundRectangle_Iterator0 = new AbstractRoundRectangle.Iterator(roundRectangle0, affineTransform0);
      abstractRoundRectangle_Iterator0.next();
      int int0 = Crossing.crossPath(abstractRoundRectangle_Iterator0, 1280.806688181, 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = Crossing.crossLine(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = Crossing.crossCubic((-3301.9), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-3301.9));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = Crossing.intersectCubic(0.0, 0.0, (-601.2221566373097), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-601.2221566373097), 0.0, (-601.2221566373097));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = Crossing.crossCubic(0.0, 3753.0, 0.0, 3753.0, 0.0, 0.0, 3753.0, 0.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = Crossing.crossCubic(1260.2, 3.4028234663852886E38, 1260.2, 3.4028234663852886E38, 0.0, 3.4028234663852886E38, 3.4028234663852886E38, 0.0, 1260.2, 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = Crossing.crossCubic(0.0, (-278.8994737), 0.0, 0.0, 0.0, 0.0, (-278.8994737), 0.0, 0.0, (-3.0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = Crossing.intersectCubic(0.0, 0.0, (-1101.2319478398167), 0.0, 0.0, 0.0, (-1101.2319478398167), (-1101.2319478398167), 0.0, (-1101.2319478398167), 0.0, (-1101.2319478398167));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0.0, 0.0, 4, 1.0, 0.0, 4, 0.0, 1.0, 0.0, 0.0);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = Crossing.crossQuad(0, 0, 1.0E-10, 0.11933, 0.11933, 0.11933, 1.0E-10, 1.0E-10);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = Crossing.crossQuad(0.0, 0.0, (-5660.0), 0.0, 0.0, 0.0, 0.0, (-5660.0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = Crossing.crossQuad(150.2523245, 0.0, 0.0, 0.0, 0.0, 150.2523245, 0.0, 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0.0, 2702.465092929, 0.0, (-1022.52731), 0.0, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = 0.1680212411219903;
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(doubleArray0, 2143776328, (-3.0), 2162.260775);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Crossing.QuadCurve crossing_QuadCurve0 = new Crossing.QuadCurve(0.0, 2702.465092929, 0.0, (-1022.52731), 0.0, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = 1353.8;
      // Undeclared exception!
      try { 
        crossing_QuadCurve0.cross(doubleArray0, 2143776328, (-3.0), 2162.260775);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.Crossing$QuadCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = Crossing.intersectQuad(0.0, 4, 0.3306444138374366, 4, 4, 0.0, 0.0, 0.0, 1.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CubicCurve cubicCurve0 = new CubicCurve(0.22226106278273913, (-561.1362875519434), (-2951.02932), (-2951.02932), 0, 0.016, 0, (-561.1362875519434));
      Area area0 = new Area(cubicCurve0);
      area0.exclusiveOr(area0);
      assertFalse(area0.isPolygonal());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = Crossing.intersectCubic(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1419.65), 0.0, 0.0, 0.0, (-1419.65), 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = Crossing.intersectCubic(1.0, 1.0, 0.0, 0.5, 1.0, 1.0, 0.0, 0.5, 0.0, 1.0, 439.4, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = Crossing.intersectCubic(4, 1.0, (-329.88797222410017), 0.0, 4, 0.0, 1.0, 1.0, 0.0, (-329.88797222410017), 4, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Crossing crossing0 = new Crossing();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      QuadCurve quadCurve0 = new QuadCurve(0.0, 0.0, 9.999999747378752E-6, 9.999999747378752E-6, 0.0, 9.999999747378752E-6);
      AbstractQuadCurve.Iterator abstractQuadCurve_Iterator0 = new AbstractQuadCurve.Iterator(quadCurve0, (Transform) null);
      int int0 = Crossing.crossPath(abstractQuadCurve_Iterator0, 9.999999747378752E-6, 9.999999747378752E-6);
      assertTrue(abstractQuadCurve_Iterator0.isDone());
      assertEquals(0, int0);
  }
}
