/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:49:04 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.Circle;
import pythagoras.d.ICircle;
import pythagoras.d.Point;
import pythagoras.d.Vector;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCircle_ESTest extends AbstractCircle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Circle circle0 = new Circle(2147.1345654, 2147.1345654, 2147.1345654);
      circle0.x = (-1610.98915622);
      circle0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Circle circle0 = new Circle((-1.0), (-2949.96932), (-1.0));
      Circle circle1 = new Circle(0.0, 0.0, (-1594.546094306775));
      Circle circle2 = circle0.set(0.0, 0.0, (-3018.6541682964303));
      boolean boolean0 = circle0.equals(circle1);
      assertFalse(circle1.equals((Object)circle2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Circle circle0 = new Circle((-1.0), (-2949.96932), (-1.0));
      Circle circle1 = new Circle(circle0);
      assertTrue(circle1.equals((Object)circle0));
      
      circle0.y = 2781.662103603262;
      boolean boolean0 = circle0.equals(circle1);
      assertFalse(circle1.equals((Object)circle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Circle circle0 = new Circle();
      circle0.x = 5041.838499591311;
      Circle circle1 = new Circle();
      boolean boolean0 = circle0.equals(circle1);
      assertFalse(circle1.equals((Object)circle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Circle circle0 = new Circle();
      boolean boolean0 = circle0.contains(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector vector0 = new Vector();
      Circle circle0 = new Circle();
      boolean boolean0 = circle0.contains((XY) vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Circle circle0 = new Circle();
      boolean boolean0 = circle0.intersects(circle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Circle circle0 = new Circle();
      circle0.offset(0.0, (-1859.0315443961156), circle0);
      assertEquals((-1859.0315443961156), circle0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Circle circle0 = new Circle();
      Circle circle1 = new Circle(1.0, 0.0, 392.61621);
      circle1.offset((-4423.76), 0.0, circle0);
      assertEquals((-4422.76), circle0.x, 0.01);
      assertEquals(0.0, circle0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Circle circle0 = new Circle((-2028.4900985499842), (-2028.4900985499842), (-2028.4900985499842));
      circle0.offset((-2027.4900985499842), 1.0, circle0);
      assertEquals((-4055.9801970999683), circle0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Circle circle0 = new Circle();
      circle0.y = (-1859.0315443961156);
      Circle circle1 = circle0.offset(1283.7252717111, 0.0);
      assertEquals((-1859.0315443961156), circle1.y, 0.01);
      assertEquals(1283.7252717111, circle1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Circle circle0 = new Circle();
      Circle circle1 = circle0.offset(0.0, 1.0);
      assertEquals(0.0, circle1.x, 0.01);
      assertEquals(1.0, circle1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Circle circle0 = new Circle(2147.1345654, 2147.1345654, 2147.1345654);
      circle0.x = (-1610.98915622);
      Circle circle1 = circle0.offset(0.0, 0.0);
      assertTrue(circle1.equals((Object)circle0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Circle circle0 = new Circle();
      Circle circle1 = circle0.offset(1283.7252717111, 0.0);
      circle1.offset((-1.0), 2609.7591, circle0);
      assertEquals(2609.7591, circle0.y, 0.01);
      assertEquals(1282.7252717111, circle0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Circle circle0 = new Circle(2103.850086696, 2103.850086696, (-1452.58678));
      Circle circle1 = circle0.offset(2103.850086696, (-1452.58678));
      assertEquals(4207.700173392, circle1.x, 0.01);
      assertEquals(651.2633066959997, circle1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Circle circle0 = new Circle(2147.1345654, 2147.1345654, 2147.1345654);
      circle0.x = (-1610.98915622);
      Circle circle1 = circle0.clone();
      assertTrue(circle1.equals((Object)circle0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Circle circle0 = new Circle((-1751.282836), (-1751.282836), (-1758.744410163377));
      Circle circle1 = circle0.set(3078.0, (-249.0), 1.0);
      Circle circle2 = circle0.clone();
      assertTrue(circle2.equals((Object)circle1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Circle circle0 = new Circle(2147.1345654, 2147.1345654, 2147.1345654);
      Circle circle1 = circle0.offset(0.0, 0.0);
      assertTrue(circle1.equals((Object)circle0));
      
      circle1.radius = (-3697.05919610609);
      circle1.clone();
      assertEquals(2147.1345654, circle1.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Circle circle0 = new Circle();
      // Undeclared exception!
      try { 
        circle0.intersects((ICircle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractCircle", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Circle circle0 = new Circle();
      // Undeclared exception!
      try { 
        circle0.contains((XY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractCircle", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Circle circle0 = new Circle(2147.1345654, 2147.1345654, 2147.1345654);
      Circle circle1 = circle0.offset(0.0, 0.0);
      assertTrue(circle1.equals((Object)circle0));
      
      circle1.radius = (-3697.05919610609);
      boolean boolean0 = circle0.equals(circle1);
      assertFalse(circle1.equals((Object)circle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Circle circle0 = new Circle((-1.0), (-2949.96932), (-1.0));
      circle0.x = 0.0;
      Circle circle1 = new Circle(0.0, 0.0, (-1594.546094306775));
      boolean boolean0 = circle0.equals(circle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Circle circle0 = new Circle(2147.1345654, 2147.1345654, 2147.1345654);
      Circle circle1 = circle0.offset(0.0, 0.0);
      boolean boolean0 = circle0.equals(circle1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Circle circle0 = new Circle(2147.1345654, 2147.1345654, 2147.1345654);
      Point point0 = new Point();
      boolean boolean0 = circle0.equals(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Circle circle0 = new Circle();
      boolean boolean0 = circle0.equals(circle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Circle circle0 = new Circle(1.0, 1.0, 1.0);
      boolean boolean0 = circle0.contains(1.0, 1.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Circle circle0 = new Circle(2147.1345654, 2147.1345654, 2147.1345654);
      boolean boolean0 = circle0.contains(809.7724391542101, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector vector0 = new Vector();
      Circle circle0 = new Circle(vector0, (-3018.6541682964303));
      boolean boolean0 = circle0.contains((XY) vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Circle circle0 = new Circle(2147.1345654, 2147.1345654, 2147.1345654);
      Point point0 = new Point();
      boolean boolean0 = circle0.contains((XY) point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Circle circle0 = new Circle((-1.0), (-2949.96932), (-1.0));
      boolean boolean0 = circle0.intersects(circle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Circle circle0 = new Circle((-1.0), (-2949.96932), (-1.0));
      Circle circle1 = new Circle(0.0, 0.0, (-1594.546094306775));
      boolean boolean0 = circle0.intersects(circle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Circle circle0 = new Circle();
      // Undeclared exception!
      try { 
        circle0.offset(0.0, 0.0, (Circle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractCircle", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Circle circle0 = new Circle(2147.1345654, 2147.1345654, 2147.1345654);
      Circle circle1 = circle0.offset(2147.1345654, 502.3025281988399);
      boolean boolean0 = circle0.equals(circle1);
      assertFalse(boolean0);
      assertEquals(4294.2691308, circle1.x, 0.01);
      assertEquals(2649.43709359884, circle1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Circle circle0 = new Circle();
      Circle circle1 = circle0.clone();
      assertNotSame(circle1, circle0);
  }
}
