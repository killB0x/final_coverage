/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 04:59:46 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.IVector;
import pythagoras.d.Point;
import pythagoras.d.Vector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractVector_ESTest extends AbstractVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector vector0 = new Vector((-848.265644918), (-848.265644918));
      vector0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      Vector vector1 = new Vector(0.0, (-2361.447943060277));
      boolean boolean0 = vector0.equals(vector1);
      assertFalse(boolean0);
      assertFalse(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.set((-3066.7384999999995), 1.0);
      Vector vector1 = new Vector();
      boolean boolean0 = vector0.equals(vector1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.x = 572.0535540326164;
      double double0 = vector0.angleBetween(vector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      vector0.set(1420.4843320696275, 1420.4843320696275);
      double double0 = vector0.distanceSq(vector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtract((-13.54353), (-13.54353));
      vector0.subtract((IVector) vector1, vector1);
      assertEquals((-13.54353), vector1.x, 0.01);
      assertEquals((-13.54353), vector1.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtract((IVector) vector0);
      assertEquals(0.0, vector1.x, 0.01);
      assertEquals(0.0, vector1.y, 0.01);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector(1.0, 1.0);
      Vector vector2 = vector1.subtract((IVector) vector0);
      assertTrue(vector2.equals((Object)vector1));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector vector0 = new Vector(0.5, 0.5);
      vector0.subtract(546.1931895, 0.0, vector0);
      assertEquals((-545.6931895), vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector vector0 = new Vector(0.5, 0.5);
      vector0.subtract(2017776.7376552958, 0.5, vector0);
      assertEquals((-2017776.2376552958), vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector(point0);
      Vector vector1 = vector0.subtract(0.0, -0.0);
      assertEquals(0.0, vector1.y, 0.01);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtract(0.0, 676.5624685551);
      assertEquals((-676.5624685551), vector1.y, 0.01);
      assertEquals(0.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector vector0 = new Vector((-3.141592653589793), (-3.141592653589793));
      Vector vector1 = vector0.subtract((IVector) vector0, vector0);
      vector0.scale((IVector) vector1, vector0);
      assertEquals(0.0, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector vector0 = new Vector(992.5204881, 992.5204881);
      vector0.scale((IVector) vector0, vector0);
      assertEquals(985096.9192982622, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector vector0 = new Vector(992.5204881, 992.5204881);
      Vector vector1 = vector0.negate();
      vector1.scale((IVector) vector0, vector0);
      assertEquals((-985096.9192982622), vector0.y, 0.01);
      assertEquals((-985096.9192982622), vector0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.scale((IVector) vector0);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Point point0 = new Point((-3.141592653589793), (-1984.1));
      Vector vector0 = new Vector(point0);
      Vector vector1 = new Vector((-1500.50019785359), (-1909.3152029999999));
      vector1.rotateScaleAndAdd(0.0, (-1840.7918), vector0, vector0);
      vector0.scale((IVector) vector1);
      assertEquals(3512667.669297735, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      Vector vector1 = vector0.addLocal(0.0, 2236.7);
      vector1.scale(3002.928634348649, vector0);
      assertEquals(6716650.476447623, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.scale((-1421.68218), vector0);
      assertEquals(-0.0, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector vector0 = new Vector(2017776.7376552958, (-182.092983));
      vector0.scale(2017776.7376552958, vector0);
      assertEquals((-3.6742298518766123E8), vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector vector0 = new Vector((-848.265644918), (-848.265644918));
      Vector vector1 = vector0.scale(1.0, vector0);
      assertEquals((-848.265644918), vector1.y, 0.01);
      assertEquals((-848.265644918), vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.scale(1.0);
      assertEquals(0.0, vector1.x, 0.01);
      assertEquals(0.0, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.scale(Double.NaN);
      assertEquals(Double.NaN, vector1.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector();
      Vector vector2 = vector0.subtract(0.0, 1616.265945883378, vector1);
      vector0.rotateScaleAndAdd(0.0, (-1863.1177832881842), vector1, vector0);
      assertEquals((-1616.265945883378), vector1.y, 0.01);
      assertTrue(vector0.equals((Object)vector2));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.rotateScaleAndAdd(0.0, 0.0, vector0, vector0);
      assertEquals(0.0, vector1.y, 0.01);
      assertEquals(0.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.rotateAndAdd((-4956.687933568315), vector0, vector0);
      assertEquals(0.0, vector1.y, 0.01);
      assertEquals(0.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.rotate(558.7716, vector0);
      assertEquals(0.0, vector1.y, 0.01);
      assertEquals(0.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.rotate(Double.NaN, vector0);
      assertEquals(Double.NaN, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector vector0 = new Vector((-1.0), (-1.0));
      vector0.rotate((-1.3817732906760363), vector0);
      assertEquals((-1.1700876970971783), vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector vector0 = new Vector((-685.1763601075312), (-1976.88589962));
      Vector vector1 = vector0.rotate(4462.51905);
      assertEquals(1886.7333907749398, vector1.x, 0.01);
      assertEquals((-904.312786983287), vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      Vector vector1 = vector0.set(1420.4843320696275, 1420.4843320696275);
      Vector vector2 = vector1.rotate(9.999999747378752E-6);
      assertEquals(1420.4985368415648, vector2.y, 0.01);
      assertEquals(1420.4701271556416, vector2.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      Vector vector1 = vector0.addLocal(0.0, 2236.7);
      Vector vector2 = vector1.rotate(798.0);
      assertEquals(2236.7, vector0.y, 0.01);
      assertEquals(2235.293446197048, vector2.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.set((-578.1863115177273), 0.0);
      vector1.normalize(vector0);
      assertEquals((-1.0), vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtract(0.0, 1616.265945883378, vector0);
      vector1.normalize(vector1);
      assertEquals((-0.9999999999999999), vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      vector0.normalize(vector0);
      assertEquals(Double.NaN, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.x = 1.0;
      Vector vector1 = vector0.normalize();
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0.0, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      Vector vector1 = vector0.set(1420.4843320696275, 1420.4843320696275);
      Vector vector2 = new Vector();
      Vector vector3 = vector2.subtract((IVector) vector1);
      Vector vector4 = vector3.normalize();
      assertEquals((-0.7071067811865475), vector4.y, 0.01);
      assertEquals((-0.7071067811865475), vector4.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.negate(vector0);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.set((-3066.7384999999995), 1.0);
      Vector vector1 = vector0.negate(vector0);
      assertEquals(3066.7384999999995, vector1.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector vector0 = new Vector(929.291259449, (-1538.8));
      Vector vector1 = vector0.negate(vector0);
      assertEquals((-929.291259449), vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector vector0 = new Vector(2017776.7376552958, (-182.092983));
      vector0.subtractLocal(4.071424980799586E12, 1354515.485049534);
      vector0.negate();
      assertEquals((-1354697.5780325339), vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.lerp((IVector) vector0, 3056.40501484242, vector0);
      assertEquals(0.0, vector1.y, 0.01);
      assertEquals(0.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      vector0.lerp((IVector) vector0, Double.NaN, vector0);
      assertEquals(Double.NaN, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector vector0 = new Vector(992.5204881, 992.5204881);
      Vector vector1 = vector0.negate();
      vector1.lerp((IVector) vector0, (-0.4999999999999999), vector0);
      assertEquals((-1985.0409761999997), vector0.y, 0.01);
      assertEquals((-1985.0409761999997), vector0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector vector0 = new Vector((-1851.79366), (-3645.003651963));
      Vector vector1 = vector0.lerp((IVector) vector0, 3172.22);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.lerp((IVector) vector0, 0.0);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector vector0 = new Vector((-1851.79366), (-3645.003651963));
      Vector vector1 = new Vector(vector0);
      Vector vector2 = vector0.addLocal((-1.0), (-723.2310291858543));
      Vector vector3 = vector2.lerp((IVector) vector1, 3172.22);
      assertEquals((-1852.79366), vector0.x, 0.01);
      assertEquals(2289879.700722802, vector3.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.subtract(0.0, 1616.265945883378, vector0);
      double double0 = vector1.lengthSq();
      assertEquals((-1616.265945883378), vector0.y, 0.01);
      assertEquals(2612315.6078222906, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      double double0 = vector0.length();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Point point0 = new Point((-3.141592653589793), (-1984.1));
      Vector vector0 = new Vector(point0);
      double double0 = vector0.length();
      assertEquals(1984.1024871725756, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vector vector0 = new Vector(992.5204881, 992.5204881);
      boolean boolean0 = vector0.isZero();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.set((-578.1863115177273), 0.0);
      double double0 = vector1.dot(vector1);
      assertEquals(334299.41082647437, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.set((-3066.7384999999995), 1.0);
      Vector vector2 = new Vector(1.0, 10.0);
      double double0 = vector1.dot(vector2);
      assertEquals((-3056.7384999999995), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vector vector0 = new Vector();
      double double0 = vector0.distanceSq(vector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector vector0 = new Vector(0.0, (-917.46274302003));
      Vector vector1 = new Vector();
      double double0 = vector0.distanceSq(vector1);
      assertEquals(841737.8848298375, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector vector0 = new Vector();
      double double0 = vector0.distance(vector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector vector0 = new Vector(0.5, 0.5);
      Vector vector1 = new Vector(vector0);
      vector1.crossLocal(vector0);
      double double0 = vector0.distance(vector1);
      assertEquals(0.0, vector1.y, 0.01);
      assertEquals(0.7071067811865476, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.cross((IVector) vector0, vector0);
      assertEquals(0.0, vector1.y, 0.01);
      assertEquals(0.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector vector0 = new Vector((-1851.79366), (-3645.003651963));
      Vector vector1 = new Vector(vector0);
      vector0.addLocal((-1.0), (-723.2310291858543));
      vector0.cross((IVector) vector1, vector1);
      assertEquals((-1852.79366), vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector vector0 = new Vector(0.5, 0.5);
      Vector vector1 = new Vector(vector0);
      Vector vector2 = vector1.crossLocal(vector0);
      Vector vector3 = vector0.normalizeLocal();
      vector2.x = 3.141592653589793;
      vector2.cross((IVector) vector3, vector3);
      assertEquals((-2.221441469079183), vector3.x, 0.01);
      assertEquals(2.221441469079183, vector0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.cross((IVector) vector0);
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0.0, vector1.x, 0.01);
      assertEquals(0.0, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector vector0 = new Vector((-549.13725702704), 839.929947209);
      Vector vector1 = vector0.normalize();
      Vector vector2 = vector1.add(706889.045039144, 1994.283296617);
      vector0.addLocal((IVector) vector2);
      vector1.cross((IVector) vector0);
      assertEquals(706339.3605660581, vector0.x, 0.01);
      assertEquals(2835.050235214816, vector0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector();
      vector1.subtractLocal(2001.2876947573, (-2247.972598104));
      vector1.rotateAndAdd(188.48031, vector0, vector0);
      Vector vector2 = vector0.rotateScaleAndAdd((-1775.708509441741), (-1775.708509441741), vector1, vector1);
      vector2.cross((IVector) vector0);
      assertEquals(2278.228117354599, vector0.y, 0.01);
      assertEquals((-20708.1103965416), vector1.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Point point0 = new Point((-2043.5493497), 3888.6096719713805);
      Vector vector0 = new Vector(point0);
      Vector vector1 = vector0.addScaled((IVector) vector0, (-1320.0));
      vector1.addScaled((IVector) vector0, 0.0, vector0);
      vector0.clone();
      assertEquals(2695441.5922542997, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector vector0 = new Vector((-549.13725702704), 839.929947209);
      Vector vector1 = vector0.scaleLocal((IVector) vector0);
      vector1.clone();
      assertEquals(705482.3162185135, vector0.y, 0.01);
      assertEquals(301551.72705518146, vector0.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector(point0);
      Vector vector1 = new Vector(point0);
      vector1.addLocal(372.9957322092, (-928.17));
      Vector vector2 = vector0.subtractLocal((IVector) vector1);
      vector2.clone();
      assertEquals(372.9957322092, vector1.x, 0.01);
      assertEquals(928.17, vector0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vector vector0 = new Vector(929.291259449, (-1538.8));
      double double0 = vector0.angleBetween(vector0);
      assertEquals(1.4901161193847656E-8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector vector0 = new Vector();
      double double0 = vector0.angle();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector vector0 = new Vector(992.5204881, 992.5204881);
      vector0.addLocal(0.0, (-1084.939237544683));
      double double0 = vector0.angle();
      assertEquals((-92.41874944468304), vector0.y, 0.01);
      assertEquals((-0.09284748048843162), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector((-685.1763601075312), (-1976.88589962));
      Vector vector2 = vector1.addScaled((IVector) vector0, 1791.7515261, vector1);
      assertEquals((-1976.88589962), vector2.y, 0.01);
      assertEquals((-685.1763601075312), vector2.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector(point0);
      Vector vector1 = vector0.addScaled((IVector) vector0, 4241.552558, vector0);
      assertEquals(0.0, vector1.x, 0.01);
      assertEquals(0.0, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector vector0 = new Vector(0.0, (-917.46274302003));
      vector0.setAngle((-794.8762311727));
      vector0.addScaled((IVector) vector0, 0.0, vector0);
      assertEquals((-916.160343943006), vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector vector0 = new Vector((-848.265644918), (-848.265644918));
      Vector vector1 = vector0.addScaled((IVector) vector0, (-1950.8170011));
      assertEquals(1653962.7759101724, vector1.x, 0.01);
      assertEquals(1653962.7759101724, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector vector0 = new Vector((-1851.79366), (-3645.003651963));
      Vector vector1 = vector0.addScaled((IVector) vector0, 0.0);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector vector0 = new Vector(2017776.7376552958, (-182.092983));
      vector0.add((IVector) vector0, vector0);
      assertEquals(4035553.4753105915, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector vector0 = new Vector((-549.13725702704), 839.929947209);
      vector0.add((IVector) vector0, vector0);
      assertEquals((-1098.27451405408), vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.add((IVector) vector0);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Point point0 = new Point((-3.141592653589793), (-1984.1));
      Vector vector0 = new Vector(point0);
      Vector vector1 = vector0.rotateScaleAndAdd(0.0, (-1840.7918), vector0, vector0);
      vector0.add((IVector) vector1);
      assertEquals(3650330.91038, vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector vector0 = new Vector((-1.0), (-1.0));
      Vector vector1 = vector0.add((IVector) vector0);
      assertEquals((-2.0), vector1.y, 0.01);
      assertEquals((-2.0), vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      vector0.set(1420.4843320696275, 1420.4843320696275);
      vector0.add(1.0, (-271.0), vector0);
      assertEquals(1421.4843320696275, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.add(0.0, -0.0, vector0);
      assertEquals(0.0, vector1.x, 0.01);
      assertEquals(0.0, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      vector0.add(1.0, (-271.0), vector0);
      assertEquals((-271.0), vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector vector0 = new Vector(2017776.7376552958, (-182.092983));
      vector0.add((-6.271221038169882E12), (-2.1997980751470337E12), vector0);
      assertEquals((-2.1997980753291265E12), vector0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.add(0.0, 0.0);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      Vector vector1 = vector0.add((-3082.03), (-844.5357090684533));
      assertEquals((-3082.03), vector1.x, 0.01);
      assertEquals((-844.5357090684533), vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.subtract((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.subtract(2433.0, 2433.0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.scale((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.rotateAndAdd((-3.4028234663852886E38), (IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.normalize((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.dot((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.cross((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.angleBetween((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.addScaled((IVector) null, 0.0, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.addScaled((IVector) null, 1986.26485);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.add((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.add(3.4028234663852886E38, 3.4028234663852886E38, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Point point0 = new Point();
      Vector vector0 = new Vector(point0);
      // Undeclared exception!
      try { 
        vector0.scale(0.0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.negate((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.rotate(0.0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.scale((IVector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector vector0 = new Vector();
      double double0 = vector0.lengthSq();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.distanceSq((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector vector0 = new Vector();
      vector0.subtract(Double.NaN, 0.0, vector0);
      assertEquals(Double.NaN, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector vector0 = new Vector();
      double double0 = vector0.dot(vector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector(0.0, 6.283185307179586);
      boolean boolean0 = vector0.equals(vector1);
      assertFalse(boolean0);
      assertFalse(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector vector0 = new Vector(0.5, 0.5);
      Vector vector1 = new Vector(vector0);
      Vector vector2 = vector0.normalizeLocal();
      boolean boolean0 = vector2.equals(vector1);
      assertEquals(0.7071067811865475, vector0.x, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector vector0 = new Vector();
      Object object0 = new Object();
      boolean boolean0 = vector0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector vector0 = new Vector();
      boolean boolean0 = vector0.equals(vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector vector0 = new Vector(0.5, 0.5);
      Vector vector1 = new Vector(vector0);
      boolean boolean0 = vector0.equals(vector1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector vector0 = new Vector((-0.899679708765149), (-0.899679708765149));
      double double0 = vector0.angleBetween(vector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vector vector0 = new Vector();
      boolean boolean0 = vector0.isZero();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector vector0 = new Vector(0.5, 0.5);
      Vector vector1 = vector0.scale((-1178.407729));
      assertEquals((-589.2038645), vector1.y, 0.01);
      assertEquals((-589.2038645), vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector vector0 = new Vector(0.5, 0.5);
      Vector vector1 = vector0.subtract(3765.53332615968, 10.0);
      assertEquals((-9.5), vector1.y, 0.01);
      assertEquals((-3765.03332615968), vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.normalize();
      Vector vector2 = vector0.subtract((IVector) vector1, vector1);
      assertEquals(Double.NaN, vector2.x, 0.01);
      assertEquals(Double.NaN, vector2.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.lerp((IVector) null, (-2917.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Vector vector0 = new Vector(2017776.7376552958, (-182.092983));
      Vector vector1 = vector0.scale((IVector) vector0);
      assertEquals(33157.85445783829, vector1.y, 0.01);
      assertEquals(4.071422963022848E12, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vector vector0 = new Vector(0.5, 0.5);
      String string0 = vector0.toString();
      assertEquals("+0.5+0.5", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vector vector0 = new Vector(0.5, 0.5);
      vector0.rotateAndAdd((-589.2038644999999), vector0, vector0);
      assertEquals(0.08332249837797456, vector0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.add((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.addScaled((IVector) vector0, 0.0);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vector vector0 = new Vector(0.5, 0.5);
      double double0 = vector0.angle();
      assertEquals(0.7853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.clone();
      assertNotSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.rotateScaleAndAdd(0.5, 0.5, (IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.rotate(0.0);
      assertEquals(0.0, vector1.x, 0.01);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.lerp((IVector) vector0, 0.0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.negate();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.subtract((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.distance((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = vector0.add((IVector) vector0, vector0);
      assertEquals(0.0, vector1.x, 0.01);
      assertEquals(0.0, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Vector vector0 = new Vector();
      // Undeclared exception!
      try { 
        vector0.cross((IVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractVector", e);
      }
  }
}
