/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 05:22:29 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AffineTransform;
import pythagoras.d.IPoint;
import pythagoras.d.IVector;
import pythagoras.d.IdentityTransform;
import pythagoras.d.Point;
import pythagoras.d.Transform;
import pythagoras.d.Vector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IdentityTransform_ESTest extends IdentityTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        identityTransform0.transform((double[]) null, (-3046), doubleArray0, 0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      double[] doubleArray0 = new double[4];
      identityTransform0.transform(doubleArray0, (-35), doubleArray0, 0, (-5));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        identityTransform0.transform(doubleArray0, 0, doubleArray0, 0, 3202);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("pythagoras.d.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      IPoint[] iPointArray0 = new IPoint[2];
      Point[] pointArray0 = new Point[5];
      identityTransform0.transform(iPointArray0, 4, pointArray0, 4, (-645));
      assertEquals(2, iPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      IPoint[] iPointArray0 = new IPoint[5];
      Vector vector0 = new Vector();
      Point point0 = new Point(vector0);
      iPointArray0[4] = (IPoint) point0;
      Point[] pointArray0 = new Point[6];
      pointArray0[3] = point0;
      // Undeclared exception!
      try { 
        identityTransform0.transform(iPointArray0, 4, pointArray0, 3, 3839);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("pythagoras.d.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      double double0 = identityTransform0.ty();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      double double0 = identityTransform0.tx();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.scale();
      Vector vector1 = identityTransform0.transformPoint(vector0, vector0);
      assertEquals(1.0, vector1.y, 0.01);
      assertEquals(1.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector((-192.6), (-192.6));
      Vector vector1 = identityTransform0.transformPoint(vector0, vector0);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector(0, (-3.4028234663852886E38));
      Vector vector1 = identityTransform0.transform((IVector) vector0, vector0);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point();
      Vector vector0 = new Vector(point0);
      Vector vector1 = identityTransform0.transform((IVector) vector0, vector0);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point((-682.71407699302), 0.0);
      Vector vector0 = new Vector(point0);
      Vector vector1 = identityTransform0.transform((IVector) vector0, vector0);
      assertEquals((-682.71407699302), vector1.x(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.scale();
      Point point0 = new Point(vector0);
      Point point1 = identityTransform0.transform((IPoint) point0, point0);
      assertEquals(1.0, point1.x, 0.01);
      assertEquals(1.0, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point();
      Point point1 = identityTransform0.transform((IPoint) point0, point0);
      assertEquals(0.0, point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point(1.0, (-3542.8924828327577));
      Point point1 = identityTransform0.transform((IPoint) point0, point0);
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point(402.222, 0);
      Point point1 = new Point((-3173.94731539641), 0.0);
      Point point2 = identityTransform0.transform((IPoint) point1, point0);
      assertTrue(point2.equals((Object)point1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      double double0 = identityTransform0.scaleY();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      double double0 = identityTransform0.scaleX();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Transform transform0 = identityTransform0.preConcatenate((Transform) null);
      assertNull(transform0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(0, 0.5, 0.5, 1312.2412, 1750.2, 0.5);
      Transform transform0 = identityTransform0.preConcatenate(affineTransform0);
      assertEquals(0.5, transform0.ty(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-3.4028234663852886E38), (-3.4028234663852886E38), (-1.0));
      Transform transform0 = identityTransform0.preConcatenate(affineTransform0);
      assertEquals((-1.0), transform0.ty(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Transform transform0 = identityTransform0.preConcatenate(identityTransform0);
      assertEquals(1.0, transform0.uniformScale(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point((-682.71407699302), 0.0);
      Vector vector0 = new Vector(point0);
      Vector vector1 = identityTransform0.inverseTransform((IVector) vector0, vector0);
      assertEquals(0.0, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector(0, (-3.4028234663852886E38));
      Vector vector1 = identityTransform0.inverseTransform((IVector) vector0, vector0);
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.scale();
      Vector vector1 = identityTransform0.inverseTransform((IVector) vector0, vector0);
      assertEquals(1.0, vector1.x, 0.01);
      assertEquals(1.0, vector1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point(1.0, (-3542.8924828327577));
      Point point1 = identityTransform0.inverseTransform((IPoint) point0, point0);
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point();
      Point point1 = identityTransform0.inverseTransform((IPoint) point0, point0);
      assertEquals(0.0, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(0, 0.5, 0.5, 1312.2412, 1750.2, 0.5);
      Point point0 = new Point();
      Point point1 = affineTransform0.transform((IPoint) point0, point0);
      Point point2 = identityTransform0.inverseTransform((IPoint) point1, point1);
      assertSame(point2, point0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.scale();
      Point point0 = new Point(vector0);
      AffineTransform affineTransform0 = new AffineTransform(794.99037, (-1.0), 0.0, (-3542.8924828327577));
      Point point1 = affineTransform0.inverseTransform((IPoint) point0, point0);
      Point point2 = identityTransform0.inverseTransform((IPoint) point1, point1);
      assertEquals(2.409607491482084, point2.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Transform transform0 = identityTransform0.concatenate((Transform) null);
      assertNull(transform0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(0, 0, 0, (-193.6250437952), 0.0, 4233.35866702523);
      AffineTransform affineTransform1 = (AffineTransform)identityTransform0.concatenate(affineTransform0);
      assertEquals(4, AffineTransform.GENERALITY);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(2038.7476643909774, 1.0, 1.0, 0, 2038.7476643909774, 0);
      Transform transform0 = identityTransform0.concatenate(affineTransform0);
      assertEquals(1.0, transform0.scaleY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Transform transform0 = identityTransform0.concatenate(identityTransform0);
      assertEquals(0.0, transform0.rotation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.translation();
      // Undeclared exception!
      try { 
        identityTransform0.transformPoint((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.transform((IPoint[]) null, 3, (Point[]) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.transform((IVector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.transform((double[]) null, 4353, (double[]) null, 4353, 1807);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      double[] doubleArray0 = new double[4];
      identityTransform0.transform(doubleArray0, (-35), doubleArray0, 0, 0);
      assertEquals(0, identityTransform0.generality());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      identityTransform0.transform((IPoint[]) null, 0, (Point[]) null, 0, 0);
      assertEquals(1.0, identityTransform0.scaleX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(0.0, (-651.30069325), 10.0, 0.0);
      Transform transform0 = identityTransform0.preConcatenate(affineTransform0);
      assertEquals(0.0, transform0.scaleY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Transform transform0 = identityTransform0.invert();
      assertSame(transform0, identityTransform0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      double double0 = identityTransform0.uniformScale();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      IdentityTransform identityTransform1 = identityTransform0.copy();
      assertSame(identityTransform0, identityTransform1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        identityTransform0.inverseTransform((IPoint) null, point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      int int0 = identityTransform0.generality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      // Undeclared exception!
      try { 
        identityTransform0.lerp(identityTransform0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      double[] doubleArray0 = new double[12];
      identityTransform0.get(doubleArray0);
      assertEquals(1.0, identityTransform0.uniformScale(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      AffineTransform affineTransform0 = new AffineTransform(0, (-2056.3592115300353), (-58.7345596), (-58.7345596));
      AffineTransform affineTransform1 = (AffineTransform)identityTransform0.concatenate(affineTransform0);
      assertEquals(-0.0, affineTransform1.m01, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector(0, 0);
      Vector vector1 = identityTransform0.transformPoint(vector0, vector0);
      assertEquals(0.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      String string0 = identityTransform0.toString();
      assertEquals("ident", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        identityTransform0.transform((IPoint) point0, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.IdentityTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.scale();
      Vector vector1 = identityTransform0.transform((IVector) vector0, vector0);
      assertEquals(1.0, vector1.y, 0.01);
      assertEquals(1.0, vector1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = identityTransform0.translation();
      // Undeclared exception!
      try { 
        identityTransform0.inverseTransform((IVector) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IdentityTransform identityTransform0 = new IdentityTransform();
      double double0 = identityTransform0.rotation();
      assertEquals(0.0, double0, 0.01);
  }
}
