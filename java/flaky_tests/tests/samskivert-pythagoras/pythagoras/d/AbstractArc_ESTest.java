/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 03:49:30 GMT 2022
 */

package pythagoras.d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pythagoras.d.AbstractArc;
import pythagoras.d.AffineTransform;
import pythagoras.d.Arc;
import pythagoras.d.Dimension;
import pythagoras.d.IArc;
import pythagoras.d.IRectangle;
import pythagoras.d.IdentityTransform;
import pythagoras.d.Line;
import pythagoras.d.PathIterator;
import pythagoras.d.Point;
import pythagoras.d.Rectangle;
import pythagoras.d.Transform;
import pythagoras.d.Vector;
import pythagoras.d.XY;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractArc_ESTest extends AbstractArc_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Arc arc0 = new Arc((-2917.0), (-2917.0), 0.0, (-2917.0), (-2917.0), 0.0, 0);
      Point point0 = arc0.startPoint();
      IdentityTransform identityTransform0 = new IdentityTransform();
      Vector vector0 = new Vector((-3489.6877113464), (-2079.434));
      arc0.setArcByTangent(point0, vector0, point0, 849.21);
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      abstractArc_Iterator0.next();
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        abstractArc_Iterator0.currentSegment(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 2
         //
         verifyException("pythagoras.d.AbstractArc$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Arc arc0 = new Arc();
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = new Point(0, 0);
      Vector vector0 = new Vector(point0);
      arc0.setArcByTangent(point0, vector0, point0, 360.0);
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      double[] doubleArray0 = new double[7];
      int int0 = abstractArc_Iterator0.currentSegment(doubleArray0);
      assertEquals(90.0, arc0.start, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Arc arc0 = new Arc((-2917.0), (-2917.0), 0.0, (-2917.0), (-2917.0), 0.0, 0);
      IdentityTransform identityTransform0 = new IdentityTransform();
      Point point0 = arc0.endPoint();
      Vector vector0 = new Vector(0, (-2917.0));
      arc0.setArcByTangent(vector0, vector0, point0, 849.21);
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      // Undeclared exception!
      try { 
        abstractArc_Iterator0.currentSegment((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractArc$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Vector vector0 = new Vector(0.0, 0.0);
      Vector vector1 = new Vector(180.0, (-3.4028234663852886E38));
      arc0.setArcByTangent(vector0, vector1, vector1, 0.07638778675315294);
      Rectangle rectangle0 = arc0.bounds();
      boolean boolean0 = arc0.intersects((IRectangle) rectangle0);
      assertEquals(270.0, arc0.extent, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Arc arc1 = arc0.clone();
      Vector vector0 = new Vector(0.0, 0.0);
      arc1.setArcByTangent(vector0, vector0, vector0, 1.0);
      Rectangle rectangle0 = arc0.bounds();
      boolean boolean0 = arc1.intersects((IRectangle) rectangle0);
      assertEquals(180.0, arc1.extent, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter((-1928.0), 315.0, (-1928.0), (-4866.9342860064), 357.4915167205151, 2);
      Point point0 = arc0.endPoint();
      arc0.setAngles((XY) point0, (XY) point0);
      boolean boolean0 = arc0.contains((-304.55), 1328.9, 1.5707963267948966, (-1211.2716935033916));
      assertEquals(350.5572307141153, arc0.start, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Arc arc0 = new Arc();
      boolean boolean0 = arc0.contains(180.0, 180.0, 180.0, 180.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Arc arc0 = new Arc();
      Arc arc1 = new Arc(1.5707963267948966, 360.0, (-35.368), 360.0, (-3.141592653589793), (-12.313342175765), 1);
      arc0.setArc((IArc) arc1);
      boolean boolean0 = arc0.containsAngle((-12.313342175765));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngleStart(9.999999747378752E-6);
      arc0.setAngleExtent((-0.818872994));
      boolean boolean0 = arc0.containsAngle(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngleExtent((-2.451485236854981));
      boolean boolean0 = arc0.containsAngle((-2.451485236854981));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Arc arc0 = new Arc((-2917.0), (-2917.0), 0.0, (-2917.0), (-2917.0), 0.0, 0);
      Point point0 = arc0.startPoint();
      Point point1 = point0.mult((-2390.6555), point0);
      point1.y = (-2097.679);
      Vector vector0 = new Vector((-3489.6877113464), (-2079.4));
      arc0.setArcByTangent(vector0, vector0, point0, (-2917.0));
      boolean boolean0 = arc0.containsAngle(90.00015010818163);
      assertEquals(270.0, arc0.start, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles(0.0, 16.71100105018, 16.71100105018, 0.0);
      boolean boolean0 = arc0.contains(0.0, 0.0);
      assertEquals(90.0, arc0.extent, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Arc arc0 = new Arc();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      boolean boolean0 = abstractArc_Iterator0.isDone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Arc arc0 = new Arc(2);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      abstractArc_Iterator0.next();
      assertFalse(abstractArc_Iterator0.isDone());
      
      double[] doubleArray0 = new double[9];
      int int0 = abstractArc_Iterator0.currentSegment(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Arc arc0 = new Arc(rectangle0, 0.0, 0.0, 0);
      Point point0 = new Point();
      Point point1 = arc0.startPoint(point0);
      assertEquals(0.0, point1.y, 0.01);
      assertEquals(0.0, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Arc arc0 = new Arc((-2917.0), (-2917.0), 0.0, (-2917.0), (-2917.0), 0.0, 0);
      Point point0 = arc0.center();
      Arc arc1 = new Arc(0.0, 0.25, 0.0, (-2917.0), 0.0, (-2917.0), 2);
      arc1.startPoint(point0);
      assertEquals(0.0, point0.x, 0.01);
      assertEquals((-1458.25), point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Arc arc0 = new Arc();
      Point point0 = new Point();
      arc0.setFrame(206.56505117707798, 315.8, 880966.775248707, 0.0);
      arc0.startPoint(point0);
      assertEquals(881173.3402998841, point0.x, 0.01);
      assertEquals(315.8, point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Arc arc0 = new Arc((-2917.0), (-2917.0), 0.0, (-2917.0), (-2917.0), 0.0, 0);
      Point point0 = arc0.startPoint();
      Point point1 = arc0.startPoint(point0);
      assertEquals((-2917.0), point1.x, 0.01);
      assertEquals((-5253.2472112672585), point1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter((-1928.0), 315.0, (-1928.0), (-4866.9342860064), 357.4915167205151, 2);
      Point point0 = arc0.startPoint();
      assertEquals((-14.102792001293988), point0.x, 0.01);
      assertEquals(547.7691500494809, point0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Arc arc0 = new Arc((-95.0829999349), 1342.0, 270.0, (-1731.1), (-3.4028234663852886E38), 0.04123138141894414, 2);
      Point point0 = arc0.startPoint();
      assertEquals(72.23252142367947, point0.x, 0.01);
      assertEquals((-363.93619361811784), point0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Arc arc0 = new Arc();
      double double0 = arc0.normAngle(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Arc arc0 = new Arc();
      double double0 = arc0.normAngle(9.999999747378752E-6);
      assertEquals(9.999999747378752E-6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Arc arc0 = new Arc((-2917.0), (-2917.0), 0.0, (-2917.0), (-2917.0), 0.0, 0);
      Point point0 = arc0.startPoint();
      arc0.endPoint(point0);
      assertEquals((-5253.2472112672585), point0.y, 0.01);
      assertEquals((-2917.0), point0.x, 0.01);
      assertEquals((-5253.2472112672585), point0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Point point0 = arc0.min();
      Point point1 = arc0.endPoint(point0);
      assertEquals(0.0, point1.y, 0.01);
      assertEquals(0.0, point1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Point point0 = arc0.min();
      Vector vector0 = new Vector(0.0, 4444.526790699103);
      arc0.setArcByTangent(point0, vector0, vector0, 2039.853715);
      arc0.endPoint();
      assertEquals(180.0, arc0.start, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.5, 0.5, 714.2788254535789, 0.0);
      Arc arc0 = new Arc(rectangle0, 0.5, 0.0, 1);
      Arc arc1 = arc0.clone();
      assertNotSame(arc1, arc0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Arc arc0 = new Arc((-2917.0), (-2917.0), 0.0, (-2917.0), (-2917.0), 0.0, 0);
      Point point0 = arc0.startPoint();
      Vector vector0 = new Vector((-2917.0), 849.21);
      arc0.setArcByTangent(vector0, point0, point0, (-2917.0));
      arc0.clone();
      assertEquals(180.0, arc0.start, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Line line0 = new Line((-731.23375), 1492.2270276, 0.0, 1158.5);
      Point point0 = new Point((-1216.201223716), 180.0);
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle rectangle1 = line0.bounds(rectangle0);
      Arc arc0 = new Arc(rectangle1, 0.0, (-1216.201223716), 1);
      Arc arc1 = arc0.clone();
      assertEquals(731.23375, arc1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Arc arc0 = new Arc((-2917.0), (-2917.0), 0.0, (-2917.0), (-2917.0), 0.0, 0);
      Arc arc1 = arc0.clone();
      assertEquals((-2917.0), arc1.start, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Arc arc0 = new Arc(1);
      arc0.setArcByCenter(101.27995185573201, 0.0, (-3.4028234663852886E38), 0.0, 980.9398499, 1);
      Rectangle rectangle0 = arc0.frame();
      Rectangle rectangle1 = arc0.bounds(rectangle0);
      assertEquals(3.4028234663852886E38, rectangle1.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Arc arc0 = new Arc();
      Rectangle rectangle0 = new Rectangle(0.0, 0.0, 0.0, 0.0);
      Rectangle rectangle1 = arc0.bounds(rectangle0);
      assertEquals(0.0, rectangle1.width(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector vector0 = new Vector();
      Arc arc0 = new Arc((-1731.1), 3496.451, 2.0, 0.0, (-1731.1), 823.875016126, 2);
      Point point0 = new Point(vector0);
      arc0.setArcByTangent(vector0, vector0, point0, 3496.451);
      Rectangle rectangle0 = arc0.bounds();
      arc0.bounds(rectangle0);
      assertEquals(90.0, arc0.start, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Arc arc0 = new Arc((-2917.0), (-2917.0), 0.0, (-2917.0), (-2917.0), 0.0, 0);
      Rectangle rectangle0 = new Rectangle(0.0, 90.0, 0.0, 196.562502);
      arc0.bounds(rectangle0);
      assertEquals((-2917.0), rectangle0.height, 0.01);
      assertEquals((-2917.0), rectangle0.y(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Arc arc0 = new Arc();
      // Undeclared exception!
      try { 
        arc0.endPoint((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Line line0 = new Line(356.8584073464102, 0.0, 4445.940558807206, 2039.853715);
      Point point0 = arc0.min();
      Vector vector0 = new Vector(1461.0, 4445.940558807206);
      arc0.setArcByTangent(point0, vector0, vector0, 2039.853715);
      Rectangle rectangle0 = line0.bounds();
      boolean boolean0 = arc0.intersects((IRectangle) rectangle0);
      assertEquals(198.19126681127528, arc0.start, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Arc arc0 = new Arc(2);
      arc0.setArcByCenter(2, 2.0, 2, 2, 0.0, 2);
      boolean boolean0 = arc0.intersects(0.0, 0.0, (double) 2, 4.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Arc arc0 = new Arc(2);
      boolean boolean0 = arc0.contains((double) 2, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles(0.0, 0.0, 0.0, 0.0);
      boolean boolean0 = arc0.contains(0.0, 0.0);
      assertEquals(360.0, arc0.extent, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Arc arc0 = new Arc();
      boolean boolean0 = arc0.contains((-553.00824568945), (-553.00824568945));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Point point0 = arc0.startPoint();
      Vector vector0 = new Vector();
      arc0.setArcByTangent(vector0, vector0, point0, 1.0);
      boolean boolean0 = arc0.isEmpty();
      assertEquals(Double.NaN, arc0.y, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Arc arc0 = new Arc();
      boolean boolean0 = arc0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles(432.4937, 0.0, 0.0, 432.4937);
      boolean boolean0 = arc0.containsAngle(270.0);
      assertEquals(270.0, arc0.extent, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles(641.02588634, 0.0, 0.0, 641.02588634);
      boolean boolean0 = arc0.containsAngle(641.02588634);
      assertEquals(270.0, arc0.extent, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Arc arc0 = new Arc(1.5707963267948966, 360.0, (-35.368), 360.0, (-3.141592653589793), (-12.313342175765), 1);
      boolean boolean0 = arc0.containsAngle((-35.368));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Arc arc0 = new Arc();
      boolean boolean0 = arc0.containsAngle(6180.3758);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Arc arc0 = new Arc();
      Vector vector0 = new Vector(0.0, 719.9163);
      arc0.setArcByTangent(vector0, vector0, vector0, 0.0);
      boolean boolean0 = arc0.containsAngle(1.3333333730697632);
      assertEquals(90.0, arc0.start, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngleExtent((-1.0));
      boolean boolean0 = arc0.containsAngle(4761.06043555797);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngleExtent((-1.0));
      boolean boolean0 = arc0.containsAngle(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngleExtent((-1151.906));
      boolean boolean0 = arc0.containsAngle((-1151.906));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Arc arc0 = new Arc(0.0, 1304.7255, 180.0, 1325.3819702, (-3489.6877113464), 270.0, 1);
      boolean boolean0 = arc0.containsAngle(Double.NaN);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles(1.0, 1.0, 0.0, (double) 4);
      boolean boolean0 = arc0.containsAngle(315.0);
      assertEquals(315.0, arc0.start, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles(0.0, 0.0, 0.0, 0.0);
      boolean boolean0 = arc0.containsAngle(0.0);
      assertEquals(360.0, arc0.extent, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Arc arc0 = new Arc();
      boolean boolean0 = arc0.containsAngle(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Arc arc0 = new Arc();
      Point point0 = arc0.endPoint();
      assertEquals(0.0, point0.x, 0.01);
      assertEquals(0.0, point0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Arc arc0 = new Arc();
      // Undeclared exception!
      try { 
        arc0.startPoint((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Arc arc0 = new Arc();
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, (Transform) null);
      assertFalse(abstractArc_Iterator0.isDone());
      
      double[] doubleArray0 = new double[2];
      int int0 = abstractArc_Iterator0.currentSegment(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Arc arc0 = new Arc();
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0);
      arc0.setAngleExtent(0.2141373974503259);
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, affineTransform0);
      abstractArc_Iterator0.next();
      assertFalse(abstractArc_Iterator0.isDone());
      
      double[] doubleArray0 = new double[8];
      int int0 = abstractArc_Iterator0.currentSegment(doubleArray0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Arc arc0 = new Arc(2);
      AffineTransform affineTransform0 = new AffineTransform();
      PathIterator pathIterator0 = arc0.pathIterator((Transform) affineTransform0);
      assertFalse(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Arc arc0 = new Arc(1);
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      abstractArc_Iterator0.next();
      int int0 = abstractArc_Iterator0.currentSegment((double[]) null);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngleExtent(360.0);
      AffineTransform affineTransform0 = new AffineTransform(0.0, 360.0, 0.0, 0.0);
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, affineTransform0);
      assertFalse(abstractArc_Iterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngleExtent((-836.502595294782));
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, (-836.502595294782), 0.0, (-836.502595294782));
      PathIterator pathIterator0 = arc0.pathIterator((Transform) affineTransform0);
      assertFalse(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Arc arc0 = new Arc((-2917.0), (-2917.0), 0.0, (-2917.0), (-2917.0), 0.0, 0);
      AffineTransform affineTransform0 = new AffineTransform(1302.442310191452, 0.0, 0.3405453305228743, 2265.460319229);
      PathIterator pathIterator0 = arc0.pathIterator((Transform) affineTransform0);
      assertTrue(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.width = (-836.502595294782);
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, (-836.502595294782), 0.0, (-836.502595294782));
      PathIterator pathIterator0 = arc0.pathIterator((Transform) affineTransform0);
      assertTrue(pathIterator0.isDone());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Arc arc0 = new Arc();
      // Undeclared exception!
      try { 
        arc0.bounds((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Vector vector0 = new Vector(0.0, 1);
      arc0.setArcByTangent(vector0, vector0, vector0, 1);
      Rectangle rectangle0 = new Rectangle(90.0, 1.0, 2.0, 1);
      boolean boolean0 = arc0.intersects((IRectangle) rectangle0);
      assertEquals(90.0, arc0.start, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Arc arc0 = new Arc(2);
      arc0.setArcByCenter(2, 0.0, 2, 3473.6675, 0.0, 2);
      boolean boolean0 = arc0.intersects(3473.6675, (double) 2, (double) 2, 3473.6675);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Arc arc0 = new Arc(1);
      Point point0 = arc0.min();
      Point point1 = point0.add((-1458.5), 1.0);
      Vector vector0 = new Vector((-2064.00713579), 4445.940558807206);
      arc0.setArcByTangent(point0, vector0, vector0, 2039.853715);
      Point point2 = arc0.endPoint(point1);
      arc0.setArcByTangent(point0, vector0, point2, 4275.565234494871);
      Rectangle rectangle0 = arc0.bounds();
      Dimension dimension0 = rectangle0.size();
      Rectangle rectangle1 = new Rectangle(dimension0);
      boolean boolean0 = arc0.intersects((IRectangle) rectangle1);
      assertEquals(155.09713480918788, arc0.start, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Line line0 = new Line((-731.23375), 1492.2270276, 0.0, 1158.5);
      Point point0 = new Point((-1216.201223716), 180.0);
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle rectangle1 = line0.bounds(rectangle0);
      Arc arc0 = new Arc(rectangle1, 0.0, (-1216.201223716), 1);
      boolean boolean0 = arc0.intersects((-731.23375), 1.0, 333.72702759999993, 3185.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Arc arc0 = new Arc(2);
      arc0.setArcByCenter(2, 0.0, 2, 2, 0.0, 2);
      boolean boolean0 = arc0.intersects((double) 2, (-2.0), 2.0, 2.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector vector0 = new Vector();
      Vector vector1 = new Vector(2.0, (-1089.38));
      Arc arc0 = new Arc((-1731.1), 3496.451, 2.0, 0.0, (-1731.1), 823.875016126, 2);
      Point point0 = new Point(vector0);
      arc0.setArcByTangent(vector1, vector0, point0, 3496.451);
      Rectangle rectangle0 = arc0.bounds();
      boolean boolean0 = arc0.intersects((IRectangle) rectangle0);
      assertEquals(179.89481041484075, arc0.start, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter(270.0, 1440.4, 1266.407, 2, 1440.4, 2);
      boolean boolean0 = arc0.intersects(1440.4, 10.0, (double) 2, 1266.407);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Arc arc0 = new Arc(2);
      Vector vector0 = new Vector(0.0, 0.0);
      arc0.setArcByTangent(vector0, vector0, vector0, 2);
      arc0.setFrameFromDiagonal(3912.181275887623, (double) 2, (-838.3), 388.1294305);
      Rectangle rectangle0 = arc0.bounds();
      boolean boolean0 = arc0.intersects((IRectangle) rectangle0);
      assertEquals(180.0, arc0.extent, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Arc arc0 = new Arc(2);
      arc0.setArcByCenter(2, 2, 2743.660712995, 2743.660712995, 2743.660712995, 2);
      boolean boolean0 = arc0.intersects((double) 2, (double) 2, (double) 2, 2743.660712995);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter(2, (-3554.92), 2, 4.0, 0.0, 2);
      boolean boolean0 = arc0.intersects(0.0, 0.0, (double) 2, (-3554.92));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Arc arc0 = new Arc(1);
      arc0.setArcByCenter(1, 0.0, 1, 1, 0.0, 1);
      boolean boolean0 = arc0.intersects((double) 1, 1.0, (-1.0), 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter(195.49092684517825, 172.42904794107426, (-2354.41), 180.0, 273.99996899999996, 2);
      boolean boolean0 = arc0.contains(0.0, 180.0, 138.3713607630889, 180.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter((-964.0), 0.10906025876310667, 1824.293529477022, (-1129.1153820330994), 93.99996899999996, 2);
      boolean boolean0 = arc0.contains(366.0, 0.088139439412073, 195.49092684517825, (-162.18132));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles(1.0, 1.0, 0.0, (double) 4);
      boolean boolean0 = arc0.contains(0.0, 0.0, 0.0, 1.0);
      assertEquals(315.0, arc0.extent, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles(1.0, 1.0, 0.0, (double) 4);
      boolean boolean0 = arc0.contains(1.0, 0.0, 1.0, 1.0);
      assertEquals(315.0, arc0.extent, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter(2258.2896608398396, 0.0, 2258.2896608398396, 2258.2896608398396, 2258.2896608398396, 2);
      boolean boolean0 = arc0.contains(2258.2896608398396, 2258.2896608398396, (double) 2, (double) 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Vector vector0 = new Vector();
      Arc arc0 = new Arc((-95.0829999349), 1342.0, 270.0, (-1731.1), (-3.4028234663852886E38), 0.04123138141894414, 2);
      arc0.setArcByCenter(0, 0.0, (-435.89), 1342.0, 178.22117548501268, 1);
      boolean boolean0 = arc0.contains((XY) vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setFrameFromCenter(1.0, 0.0, (double) 4, 0.0);
      arc0.setAngles(1.0, 1.0, 0.0, (double) 4);
      boolean boolean0 = arc0.contains(0.0, 0.0);
      assertEquals(345.9637565320735, arc0.extent, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.width = 1.0;
      arc0.setAngles(1.0, 1.0, 0.0, (double) 4);
      boolean boolean0 = arc0.contains(0.0, 0.0);
      assertEquals(296.565051177078, arc0.start, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setFrame(1.0, 0.0, 0.0, (-491.3221306906801));
      arc0.setAngles(1.0, 1.0, 0.0, (double) 4);
      boolean boolean0 = arc0.contains(1.0, 0.0);
      assertEquals(359.77050697501016, arc0.extent, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter(2212.5439607916505, 0.0, 2212.5439607916505, 2212.5439607916505, 2212.5439607916505, 2);
      boolean boolean0 = arc0.contains(720.15346, 720.15346, (double) 2, (double) 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Arc arc0 = new Arc(1);
      boolean boolean0 = arc0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Arc arc0 = new Arc();
      boolean boolean0 = arc0.intersects(3.4028234663852886E38, 12.790504288988915, 3.4028234663852886E38, 3.4028234663852886E38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter(0.0, 0.0, 539.1198111328816, 0, 0.0, 0);
      boolean boolean0 = arc0.contains(0.0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter(2, 0.0, 2, 2, 0.0, 2);
      // Undeclared exception!
      try { 
        arc0.bounds((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pythagoras.d.AbstractArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter(12.790504288988915, 1.0, 3.4028234663852886E38, 0.0, 263.1996900382448, 2);
      boolean boolean0 = arc0.contains(1.0, 273.25173426392735, (-881.5510648412494), 1.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter((-1928.0), 315.0, (-1928.0), (-4866.9342860064), 357.4915167205151, 2);
      boolean boolean0 = arc0.contains((-304.55), 1328.9, 1.5707963267948966, (-1202.681895));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setAngles(1.0, 1.0, 0.0, (double) 4);
      boolean boolean0 = arc0.contains(1.0, 0.0, (-1.0), (double) 4);
      assertEquals(315.0, arc0.extent, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Arc arc0 = new Arc();
      arc0.setArcByCenter(2212.5439607916505, 0.0, 2212.5439607916505, 2212.5439607916505, 2212.5439607916505, 2);
      Rectangle rectangle0 = arc0.frame();
      assertEquals(4425.087921583301, rectangle0.height, 0.01);
      assertEquals(4425.087921583301, rectangle0.width, 0.01);
      assertEquals(0.0, rectangle0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Arc arc0 = new Arc();
      IdentityTransform identityTransform0 = new IdentityTransform();
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, identityTransform0);
      int int0 = abstractArc_Iterator0.windingRule();
      assertFalse(abstractArc_Iterator0.isDone());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Arc arc0 = new Arc();
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 0.0, 0.0, 0.0);
      AbstractArc.Iterator abstractArc_Iterator0 = new AbstractArc.Iterator(arc0, affineTransform0);
      abstractArc_Iterator0.next();
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        abstractArc_Iterator0.currentSegment(doubleArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator out of bounds
         //
         verifyException("pythagoras.d.AbstractArc$Iterator", e);
      }
  }
}
