/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:35:02 GMT 2022
 */

package com.github.tminglei.swagger.fake;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.tminglei.swagger.fake.ConstDataProvider;
import com.github.tminglei.swagger.fake.DataProvider;
import com.github.tminglei.swagger.fake.ObjectDataProvider;
import com.github.tminglei.swagger.fake.ParamDataProvider;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectDataProvider_ESTest extends ObjectDataProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Random.setNextRandom((-835));
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider((Map<String, DataProvider>) null);
      // Undeclared exception!
      try { 
        objectDataProvider0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tminglei.swagger.fake.ObjectDataProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ParamDataProvider paramDataProvider0 = new ParamDataProvider("&x(rjPcxu}&-j", "&x(rjPcxu}&-j");
      ConstDataProvider constDataProvider0 = new ConstDataProvider(paramDataProvider0);
      constDataProvider0.name = "&x(rjPcxu}&-j";
      paramDataProvider0.or(constDataProvider0);
      constDataProvider0.name = "&x(rjPcxu}&-j";
      hashMap0.put("&x(rjPcxu}&-j", constDataProvider0);
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0, "OY8nwarH!2=EsBvD");
      objectDataProvider0.create();
      Object object0 = objectDataProvider0.create();
      objectDataProvider0.create();
      objectDataProvider0.create();
      objectDataProvider0.create();
      Object object1 = objectDataProvider0.create();
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0, "");
      assertEquals("", objectDataProvider0.name());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0);
      assertEquals("root", objectDataProvider0.name());
      
      HashMap hashMap1 = (HashMap)objectDataProvider0.create();
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ParamDataProvider paramDataProvider0 = new ParamDataProvider("root", "root");
      hashMap0.put("root", paramDataProvider0);
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0);
      HashMap hashMap1 = (HashMap)objectDataProvider0.create();
      assertNotNull(hashMap1);
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0);
      objectDataProvider0.required = true;
      objectDataProvider0.get();
      hashMap0.put("UqUJ?v bf7W}", objectDataProvider0);
      // Undeclared exception!
      try { 
        objectDataProvider0.create();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }
}
