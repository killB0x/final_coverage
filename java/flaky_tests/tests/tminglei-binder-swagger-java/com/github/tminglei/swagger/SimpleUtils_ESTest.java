/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:27:25 GMT 2022
 */

package com.github.tminglei.swagger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.tminglei.swagger.SimpleUtils;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleUtils_ESTest extends SimpleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleUtils.newInstance("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVALID class: ''!!!
         //
         verifyException("com.github.tminglei.swagger.SimpleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleUtils.newInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleUtils simpleUtils0 = new SimpleUtils();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleUtils.notEmpty((Object) "", "(P5fHe Vq Pbd+H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (P5fHe Vq Pbd+H
         //
         verifyException("com.github.tminglei.swagger.SimpleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = SimpleUtils.notEmpty((Object) "Wf[C", "Wf[C");
      assertEquals("Wf[C", object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleUtils.notEmpty((String) null, "BP4U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BP4U
         //
         verifyException("com.github.tminglei.swagger.SimpleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = SimpleUtils.isEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put("b", "b");
      boolean boolean0 = SimpleUtils.isEmpty(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = SimpleUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = SimpleUtils.isEmpty("Wf[C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      boolean boolean0 = SimpleUtils.isEmpty(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleUtils.newInstance("[C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // FAILED to instantiate class: '[C'!!!
         //
         verifyException("com.github.tminglei.swagger.SimpleUtils", e);
      }
  }
}
