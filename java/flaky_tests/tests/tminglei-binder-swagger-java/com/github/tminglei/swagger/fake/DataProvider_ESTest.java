/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:37:59 GMT 2022
 */

package com.github.tminglei.swagger.fake;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.tminglei.swagger.fake.ConstDataProvider;
import com.github.tminglei.swagger.fake.DataProvider;
import com.github.tminglei.swagger.fake.ListDataProvider;
import com.github.tminglei.swagger.fake.MapDataProvider;
import com.github.tminglei.swagger.fake.ObjectDataProvider;
import com.github.tminglei.swagger.fake.OrDataProvider;
import com.github.tminglei.swagger.fake.ParamDataProvider;
import java.util.HashMap;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataProvider_ESTest extends DataProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ListDataProvider listDataProvider0 = new ListDataProvider((DataProvider) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapDataProvider mapDataProvider0 = new MapDataProvider(listDataProvider0);
      mapDataProvider0.setRequestParams(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParamDataProvider paramDataProvider0 = new ParamDataProvider("");
      ConstDataProvider constDataProvider0 = new ConstDataProvider(paramDataProvider0, "");
      constDataProvider0.name = null;
      OrDataProvider orDataProvider0 = new OrDataProvider(constDataProvider0, paramDataProvider0);
      String string0 = orDataProvider0.name();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ListDataProvider listDataProvider0 = new ListDataProvider((DataProvider) null);
      MapDataProvider mapDataProvider0 = new MapDataProvider(listDataProvider0);
      String string0 = mapDataProvider0.name();
      assertEquals("root", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParamDataProvider paramDataProvider0 = new ParamDataProvider("tIbee", "");
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0, "");
      DataProvider dataProvider0 = paramDataProvider0.or(objectDataProvider0);
      String string0 = dataProvider0.name();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0, "");
      Object object0 = objectDataProvider0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParamDataProvider paramDataProvider0 = new ParamDataProvider("E!d}!+2r", "E!d}!+2r");
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0, "E!d}!+2r");
      OrDataProvider orDataProvider0 = new OrDataProvider(objectDataProvider0, paramDataProvider0);
      orDataProvider0.setRequired(true);
      HashMap hashMap1 = (HashMap)objectDataProvider0.get();
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MapDataProvider mapDataProvider0 = new MapDataProvider((DataProvider) null);
      DataProvider dataProvider0 = mapDataProvider0.or((DataProvider) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        dataProvider0.setRequestParams(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tminglei.swagger.fake.OrDataProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ParamDataProvider paramDataProvider0 = new ParamDataProvider("", "");
      ListDataProvider listDataProvider0 = new ListDataProvider(paramDataProvider0);
      OrDataProvider orDataProvider0 = new OrDataProvider(listDataProvider0, listDataProvider0);
      hashMap0.put("T-\">", orDataProvider0);
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0);
      BiFunction<Object, Object, DataProvider> biFunction0 = (BiFunction<Object, Object, DataProvider>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ObjectDataProvider objectDataProvider1 = (ObjectDataProvider)hashMap0.merge("`{8hn*", objectDataProvider0, biFunction0);
      OrDataProvider orDataProvider1 = (OrDataProvider)objectDataProvider1.or(objectDataProvider0);
      orDataProvider1.setRequired(true);
      // Undeclared exception!
      try { 
        objectDataProvider0.get();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParamDataProvider paramDataProvider0 = new ParamDataProvider("E!d}!+2r", "E!d}!+2r");
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0, "E!d}!+2r");
      OrDataProvider orDataProvider0 = new OrDataProvider(objectDataProvider0, paramDataProvider0);
      orDataProvider0.setRequired(true);
      hashMap0.put("E!d}!+2r", orDataProvider0);
      // Undeclared exception!
      try { 
        objectDataProvider0.get();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ListDataProvider listDataProvider0 = new ListDataProvider((DataProvider) null);
      listDataProvider0.setRequired(true);
      // Undeclared exception!
      try { 
        listDataProvider0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tminglei.swagger.fake.ListDataProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListDataProvider listDataProvider0 = new ListDataProvider((DataProvider) null);
      DataProvider dataProvider0 = listDataProvider0.or((DataProvider) null);
      // Undeclared exception!
      try { 
        dataProvider0.setRequired(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tminglei.swagger.fake.OrDataProvider", e);
      }
  }
}
