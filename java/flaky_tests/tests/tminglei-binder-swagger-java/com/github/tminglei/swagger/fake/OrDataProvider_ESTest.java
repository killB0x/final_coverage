/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:37:08 GMT 2022
 */

package com.github.tminglei.swagger.fake;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.tminglei.swagger.fake.ConstDataProvider;
import com.github.tminglei.swagger.fake.DataProvider;
import com.github.tminglei.swagger.fake.ListDataProvider;
import com.github.tminglei.swagger.fake.MapDataProvider;
import com.github.tminglei.swagger.fake.ObjectDataProvider;
import com.github.tminglei.swagger.fake.OrDataProvider;
import com.github.tminglei.swagger.fake.ParamDataProvider;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OrDataProvider_ESTest extends OrDataProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      ConstDataProvider constDataProvider0 = new ConstDataProvider(object0, (String) null);
      OrDataProvider orDataProvider0 = new OrDataProvider(constDataProvider0, constDataProvider0);
      String string0 = orDataProvider0.name();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParamDataProvider paramDataProvider0 = new ParamDataProvider("g");
      OrDataProvider orDataProvider0 = new OrDataProvider(paramDataProvider0, paramDataProvider0);
      paramDataProvider0.name = "";
      String string0 = orDataProvider0.name();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      ConstDataProvider constDataProvider0 = new ConstDataProvider(object0);
      OrDataProvider orDataProvider0 = new OrDataProvider(constDataProvider0, constDataProvider0);
      orDataProvider0.setRequired(true);
      Object object1 = orDataProvider0.get();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstDataProvider constDataProvider0 = new ConstDataProvider("-`l");
      OrDataProvider orDataProvider0 = new OrDataProvider(constDataProvider0, (DataProvider) null);
      // Undeclared exception!
      try { 
        orDataProvider0.setRequired(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tminglei.swagger.fake.OrDataProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ListDataProvider listDataProvider0 = new ListDataProvider((DataProvider) null);
      OrDataProvider orDataProvider0 = new OrDataProvider(listDataProvider0, (DataProvider) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        orDataProvider0.setRequestParams(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tminglei.swagger.fake.OrDataProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0, "");
      hashMap0.put("root", objectDataProvider0);
      MapDataProvider mapDataProvider0 = new MapDataProvider(objectDataProvider0);
      OrDataProvider orDataProvider0 = new OrDataProvider(mapDataProvider0, objectDataProvider0);
      orDataProvider0.setRequired(true);
      // Undeclared exception!
      try { 
        orDataProvider0.get();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0, "com.github.tminglei.swagger.fake.AbstractDataProvider");
      ListDataProvider listDataProvider0 = new ListDataProvider(objectDataProvider0, "com.github.tminglei.swagger.fake.AbstractDataProvider");
      OrDataProvider orDataProvider0 = new OrDataProvider(listDataProvider0, (DataProvider) null);
      // Undeclared exception!
      try { 
        orDataProvider0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object object0 = new Object();
      ConstDataProvider constDataProvider0 = new ConstDataProvider(object0, (String) null);
      OrDataProvider orDataProvider0 = new OrDataProvider(constDataProvider0, constDataProvider0);
      orDataProvider0.setRequestParams((Map<String, String>) null);
      assertNull(orDataProvider0.name());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HashMap<String, DataProvider> hashMap0 = new HashMap<String, DataProvider>();
      ObjectDataProvider objectDataProvider0 = new ObjectDataProvider(hashMap0);
      OrDataProvider orDataProvider0 = new OrDataProvider(objectDataProvider0, objectDataProvider0);
      String string0 = orDataProvider0.name();
      assertEquals("root", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ParamDataProvider paramDataProvider0 = new ParamDataProvider("g");
      OrDataProvider orDataProvider0 = new OrDataProvider(paramDataProvider0, paramDataProvider0);
      Object object0 = orDataProvider0.get();
      assertNull(object0);
  }
}
