/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:22:43 GMT 2022
 */

package smartrics.rest.fitnesse.fixture.support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import smartrics.rest.fitnesse.fixture.support.Config;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Config_ESTest extends Config_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Config config0 = Config.getConfig("");
      String string0 = config0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Config config0 = Config.getConfig();
      Long long0 = new Long(0L);
      config0.getAsLong("smartrics.rest.fitnesse.fixture.support.Config", long0);
      assertEquals("default", config0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Config config0 = Config.getConfig();
      config0.getAsLong("Bz", (Long) null);
      assertEquals("default", config0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Config config0 = Config.getConfig();
      Long long0 = new Long((-1766L));
      config0.getAsLong("hC9,7(MJ_Shx&", long0);
      assertEquals("default", config0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Config config0 = Config.getConfig("gin");
      Integer integer0 = new Integer(0);
      config0.getAsInteger("gin", integer0);
      assertEquals("gin", config0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Config config0 = Config.getConfig("sC?K+yQk@ Y@fJf");
      Integer integer0 = config0.getAsInteger("0>m(NP%!=?Qc", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Config config0 = Config.getConfig();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = config0.getAsBoolean("Frws3~GgRDC%CNT", boolean0);
      assertTrue(boolean1);
      assertEquals("default", config0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Config config0 = Config.getConfig("sC?K+yQk@ Y@fJf");
      String string0 = config0.get("0>m(NP%!=?Qc", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Config config0 = Config.getConfig("v\"yup <%Z8}eD'8");
      String string0 = config0.get("7Zj.iE^)r6vR`,_M#u", "");
      assertEquals("v\"yup <%Z8}eD'8", config0.getName());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Config config0 = Config.getConfig("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("smartrics.rest.fitnesse.fixture.support.Config", "default");
      hashMap0.put("default", "default");
      config0.get("");
      Config config1 = Config.getConfig();
      Boolean boolean0 = Boolean.valueOf(false);
      config1.toString();
      Boolean boolean1 = config1.getAsBoolean("", boolean0);
      Boolean boolean2 = config0.getAsBoolean("[name=default] java.util.HashMap@0000000002", boolean1);
      config1.clear();
      Integer integer0 = new Integer(755);
      config1.getAsInteger("l,Qql", integer0);
      config1.getAsInteger("LTv}0$l=8", integer0);
      config0.getAsBoolean("media-type", boolean2);
      config0.get("QnG!i`u}&&i>F3");
      config1.get("\n");
      Long long0 = new Long(0L);
      Long long1 = new Long(976L);
      config0.getAsLong("b`%", long1);
      assertEquals("", config0.getName());
      
      Config config2 = Config.getConfig();
      assertSame(config2, config1);
      assertNotSame(config2, config0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Config config0 = Config.getConfig("");
      config0.get("");
      assertEquals("", config0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Config config0 = Config.getConfig("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        config0.getAsMap("", hashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/json/JSONException
         //
         verifyException("smartrics.rest.fitnesse.fixture.support.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Config config0 = Config.getConfig();
      String string0 = config0.get("default", "default");
      assertEquals("default", config0.getName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Config config0 = Config.getConfig("v\"yup <%Z8}eD'8");
      String string0 = config0.getName();
      assertEquals("v\"yup <%Z8}eD'8", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Config config0 = Config.getConfig("a/;|.");
      Boolean boolean0 = config0.getAsBoolean("default", (Boolean) null);
      assertEquals("a/;|.", config0.getName());
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Config config0 = Config.getConfig("gin");
      Boolean boolean0 = Boolean.valueOf("rIO~[%e_GtZL<@zV");
      config0.getAsBoolean("rIO~[%e_GtZL<@zV", boolean0);
      assertEquals("gin", config0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Config config0 = Config.getConfig((String) null);
      assertEquals("default", config0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Config config0 = Config.getConfig("");
      config0.add("smartrics.rest.fitnesse.fixture.support.Config", "");
      assertEquals("", config0.getName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Config config0 = Config.getConfig();
      // Undeclared exception!
      try { 
        config0.getAsMap("default", (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Config config0 = Config.getConfig();
      Integer integer0 = new Integer((-559));
      config0.getAsInteger("default", integer0);
      assertEquals("default", config0.getName());
  }
}
