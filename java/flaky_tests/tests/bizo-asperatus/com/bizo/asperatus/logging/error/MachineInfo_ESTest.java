/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 12:22:56 GMT 2022
 */

package com.bizo.asperatus.logging.error;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.bizo.asperatus.logging.error.MachineInfo;
import com.bizo.asperatus.model.Dimension;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MachineInfo_ESTest extends MachineInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MachineInfo.MachineInfoBuilder machineInfo_MachineInfoBuilder0 = MachineInfo.with((Collection<String>) linkedList0);
      assertNotNull(machineInfo_MachineInfoBuilder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        MachineInfo.without((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("");
      List<String> list0 = linkedList0.subList(1, 1);
      linkedList0.add("");
      // Undeclared exception!
      try { 
        MachineInfo.without((Collection<String>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        MachineInfo.without((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        MachineInfo.with((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MachineInfo.MachineInfoBuilder machineInfo_MachineInfoBuilder0 = MachineInfo.without((Collection<String>) linkedList0);
      MachineInfo.MachineInfoBuilder machineInfo_MachineInfoBuilder1 = machineInfo_MachineInfoBuilder0.without((Collection<String>) linkedList0);
      assertSame(machineInfo_MachineInfoBuilder1, machineInfo_MachineInfoBuilder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MachineInfo.MachineInfoBuilder machineInfo_MachineInfoBuilder0 = MachineInfo.without(stringArray0);
      MachineInfo.MachineInfoBuilder machineInfo_MachineInfoBuilder1 = machineInfo_MachineInfoBuilder0.without(stringArray0);
      assertSame(machineInfo_MachineInfoBuilder0, machineInfo_MachineInfoBuilder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MachineInfo.MachineInfoBuilder machineInfo_MachineInfoBuilder0 = MachineInfo.without(stringArray0);
      MachineInfo.MachineInfoBuilder machineInfo_MachineInfoBuilder1 = machineInfo_MachineInfoBuilder0.with(stringArray0);
      assertSame(machineInfo_MachineInfoBuilder0, machineInfo_MachineInfoBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MachineInfo.MachineInfoBuilder machineInfo_MachineInfoBuilder0 = new MachineInfo.MachineInfoBuilder();
      List<Dimension> list0 = machineInfo_MachineInfoBuilder0.toDimensions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MachineInfo.MachineInfoBuilder machineInfo_MachineInfoBuilder0 = MachineInfo.without((Collection<String>) linkedList0);
      MachineInfo.MachineInfoBuilder machineInfo_MachineInfoBuilder1 = machineInfo_MachineInfoBuilder0.with((Collection<String>) linkedList0);
      assertSame(machineInfo_MachineInfoBuilder0, machineInfo_MachineInfoBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MachineInfo.MachineInfoBuilder machineInfo_MachineInfoBuilder0 = MachineInfo.with(stringArray0);
      assertNotNull(machineInfo_MachineInfoBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MachineInfo.with((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }
}
