/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 12:28:06 GMT 2022
 */

package com.bizo.asperatus.tracker.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.bizo.asperatus.tracker.impl.RetryingScheduler;
import java.util.concurrent.Callable;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RetryingScheduler_ESTest extends RetryingScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RetryingScheduler retryingScheduler0 = new RetryingScheduler((ScheduledExecutorService) null);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        retryingScheduler0.schedule(callable0, 881, 1463);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.bizo.asperatus.tracker.impl.RetryingScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2246, threadFactory0);
      RetryingScheduler retryingScheduler0 = new RetryingScheduler(scheduledThreadPoolExecutor0);
      Callable<RetryingScheduler> callable0 = (Callable<RetryingScheduler>) mock(Callable.class, new ViolatedAssumptionAnswer());
      retryingScheduler0.schedule(callable0, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      RetryingScheduler retryingScheduler0 = new RetryingScheduler(scheduledThreadPoolExecutor0);
      retryingScheduler0.schedule((Callable<?>) null, (-1), 2570);
  }
}
