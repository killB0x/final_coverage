/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 12:20:30 GMT 2022
 */

package com.bizo.asperatus.rates;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.bizo.asperatus.model.CompoundDimension;
import com.bizo.asperatus.model.Dimension;
import com.bizo.asperatus.model.Unit;
import com.bizo.asperatus.rates.AsperatusRateTrackerScheduler;
import com.bizo.asperatus.rates.RateTracker;
import com.bizo.asperatus.tracker.MetricTracker;
import com.bizo.asperatus.tracker.impl.SystemOutTracker;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AsperatusRateTrackerScheduler_ESTest extends AsperatusRateTrackerScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Dimension> linkedList0 = new LinkedList<Dimension>();
      RateTracker rateTracker0 = mock(RateTracker.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      scheduledThreadPoolExecutor0.shutdown();
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler((MetricTracker) null, "D7", linkedList0, rateTracker0, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        asperatusRateTrackerScheduler0.start();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@670ba44b[Not completed, task = java.util.concurrent.Executors$RunnableAdapter@7be730c5[Wrapped task = com.bizo.asperatus.rates.AsperatusRateTrackerScheduler$1@1]] rejected from java.util.concurrent.ScheduledThreadPoolExecutor@55f6303a[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      RateTracker rateTracker0 = mock(RateTracker.class, new ViolatedAssumptionAnswer());
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "^m Q^S|gxaYhyM", (List<Dimension>) null, rateTracker0, (ScheduledExecutorService) null);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asperatusRateTrackerScheduler0.setFrequencyUnit(timeUnit0);
      asperatusRateTrackerScheduler0.setFrequency(27);
      asperatusRateTrackerScheduler0.isStarted();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(4);
      RateTracker rateTracker0 = mock(RateTracker.class, new ViolatedAssumptionAnswer());
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, ")v}f#e7@bUYXJy  &5", (List<Dimension>) null, rateTracker0, scheduledThreadPoolExecutor0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      asperatusRateTrackerScheduler0.setFrequencyUnit(timeUnit0);
      asperatusRateTrackerScheduler0.setFrequency(0);
      // Undeclared exception!
      try { 
        asperatusRateTrackerScheduler0.start();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "3pc7", (List<Dimension>) null, (RateTracker) null, scheduledThreadPoolExecutor0);
      Callable<Dimension> callable0 = (Callable<Dimension>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.schedule(callable0, 354L, timeUnit0);
      asperatusRateTrackerScheduler0.start();
      // Undeclared exception!
      try { 
        asperatusRateTrackerScheduler0.setFrequency(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The AsperatusRateTrackerScheduler must be stopped to adjust the frequency.
         //
         verifyException("com.bizo.asperatus.rates.AsperatusRateTrackerScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      LinkedList<Dimension> linkedList0 = new LinkedList<Dimension>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      RateTracker rateTracker0 = mock(RateTracker.class, new ViolatedAssumptionAnswer());
      Unit unit0 = Unit.GigabitsSecond;
      LinkedTransferQueue<CompoundDimension> linkedTransferQueue0 = new LinkedTransferQueue<CompoundDimension>();
      systemOutTracker0.track("t;LOW", (Number) null, unit0, (Collection<CompoundDimension>) linkedTransferQueue0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "t;LOW", linkedList0, rateTracker0, scheduledThreadPoolExecutor0);
      linkedList0.clear();
      Callable<Dimension> callable0 = (Callable<Dimension>) mock(Callable.class, new ViolatedAssumptionAnswer());
      scheduledThreadPoolExecutor0.submit(callable0);
      asperatusRateTrackerScheduler0.setFrequency(0);
      // Undeclared exception!
      try { 
        asperatusRateTrackerScheduler0.start();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "'aVX({b", (List<Dimension>) null, (RateTracker) null, (ScheduledExecutorService) null);
      asperatusRateTrackerScheduler0.setFrequency(2228);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      SystemOutTracker systemOutTracker1 = new SystemOutTracker();
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker1, "The AsperatusRateTrackerScheduler must be stopped to adjust the frequencyUnit.", (List<Dimension>) null, (RateTracker) null, (ScheduledExecutorService) null);
      asperatusRateTrackerScheduler0.getFrequency();
      asperatusRateTrackerScheduler0.isStarted();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      LinkedList<Dimension> linkedList0 = new LinkedList<Dimension>();
      RateTracker rateTracker0 = mock(RateTracker.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(344);
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "QD<Yi_7-3", linkedList0, rateTracker0, scheduledThreadPoolExecutor0);
      asperatusRateTrackerScheduler0.getFrequency();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(297);
      SystemOutTracker systemOutTracker1 = new SystemOutTracker();
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker1, "8Owj8doaYnG4s!OW", (List<Dimension>) null, (RateTracker) null, scheduledThreadPoolExecutor0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      asperatusRateTrackerScheduler0.setFrequencyUnit(timeUnit0);
      asperatusRateTrackerScheduler0.setFrequency(3151);
      asperatusRateTrackerScheduler0.isStarted();
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler1 = new AsperatusRateTrackerScheduler(systemOutTracker1, "", (List<Dimension>) null, (RateTracker) null, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        asperatusRateTrackerScheduler1.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This AsperatusRateTrackerScheduler has already been stopped.
         //
         verifyException("com.bizo.asperatus.rates.AsperatusRateTrackerScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "c.", (List<Dimension>) null, (RateTracker) null, (ScheduledExecutorService) null);
      asperatusRateTrackerScheduler0.getFrequencyUnit();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      LinkedList<Dimension> linkedList0 = new LinkedList<Dimension>();
      RateTracker rateTracker0 = mock(RateTracker.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "", linkedList0, rateTracker0, scheduledThreadPoolExecutor0);
      TimeUnit timeUnit0 = asperatusRateTrackerScheduler0.getFrequencyUnit();
      timeUnit0.toMillis(0L);
      asperatusRateTrackerScheduler0.setFrequencyUnit(timeUnit0);
      Dimension dimension0 = null;
      try {
        dimension0 = new Dimension("$VALUES", "=iff\"");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.bizo.asperatus.model.Dimension", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "3pc7", (List<Dimension>) null, (RateTracker) null, scheduledThreadPoolExecutor0);
      Callable<Dimension> callable0 = (Callable<Dimension>) mock(Callable.class, new ViolatedAssumptionAnswer());
      asperatusRateTrackerScheduler0.start();
      // Undeclared exception!
      try { 
        asperatusRateTrackerScheduler0.setFrequency(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The AsperatusRateTrackerScheduler must be stopped to adjust the frequency.
         //
         verifyException("com.bizo.asperatus.rates.AsperatusRateTrackerScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      LinkedList<Dimension> linkedList0 = new LinkedList<Dimension>();
      RateTracker rateTracker0 = mock(RateTracker.class, new ViolatedAssumptionAnswer());
      int int0 = 1573;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      linkedList0.add((Dimension) null);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      linkedList0.iterator();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1573, threadFactory0, threadPoolExecutor_AbortPolicy0);
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "b", linkedList0, rateTracker0, scheduledThreadPoolExecutor0);
      asperatusRateTrackerScheduler0.start();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      linkedList0.removeFirst();
      scheduledThreadPoolExecutor0.getMaximumPoolSize();
      // Undeclared exception!
      try { 
        asperatusRateTrackerScheduler0.setFrequencyUnit(timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The AsperatusRateTrackerScheduler must be stopped to adjust the frequencyUnit.
         //
         verifyException("com.bizo.asperatus.rates.AsperatusRateTrackerScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      LinkedList<Dimension> linkedList0 = new LinkedList<Dimension>();
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "", linkedList0, (RateTracker) null, (ScheduledExecutorService) null);
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler1 = new AsperatusRateTrackerScheduler(systemOutTracker0, "", linkedList0, (RateTracker) null, (ScheduledExecutorService) null);
      // Undeclared exception!
      try { 
        asperatusRateTrackerScheduler1.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.bizo.asperatus.rates.AsperatusRateTrackerScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      LinkedList<Dimension> linkedList0 = new LinkedList<Dimension>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_AbortPolicy0);
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "This AsperatusRateTrackerScheduler has already been started.", linkedList0, (RateTracker) null, scheduledThreadPoolExecutor0);
      asperatusRateTrackerScheduler0.start();
      // Undeclared exception!
      try { 
        asperatusRateTrackerScheduler0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This AsperatusRateTrackerScheduler has already been started.
         //
         verifyException("com.bizo.asperatus.rates.AsperatusRateTrackerScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(297);
      SystemOutTracker systemOutTracker1 = new SystemOutTracker();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(297, threadFactory0);
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker1, "q%;jN2ZXjkHC]/{kSb}", (List<Dimension>) null, (RateTracker) null, scheduledThreadPoolExecutor1);
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler1 = new AsperatusRateTrackerScheduler(systemOutTracker1, "|`37", (List<Dimension>) null, (RateTracker) null, scheduledThreadPoolExecutor0);
      asperatusRateTrackerScheduler0.start();
      asperatusRateTrackerScheduler1.setFrequency(297);
      asperatusRateTrackerScheduler1.isStarted();
      asperatusRateTrackerScheduler0.stop();
      TimeUnit timeUnit0 = asperatusRateTrackerScheduler0.getFrequencyUnit();
      assertEquals(TimeUnit.MINUTES, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "com.bizo.asperatus.rates.AsperatusRateTrackerScheduler", (List<Dimension>) null, (RateTracker) null, (ScheduledExecutorService) null);
      // Undeclared exception!
      try { 
        asperatusRateTrackerScheduler0.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This AsperatusRateTrackerScheduler has already been stopped.
         //
         verifyException("com.bizo.asperatus.rates.AsperatusRateTrackerScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      String string0 = "";
      LinkedList<Dimension> linkedList0 = new LinkedList<Dimension>();
      RateTracker rateTracker0 = mock(RateTracker.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, "", linkedList0, rateTracker0, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        asperatusRateTrackerScheduler0.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This AsperatusRateTrackerScheduler has already been stopped.
         //
         verifyException("com.bizo.asperatus.rates.AsperatusRateTrackerScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SystemOutTracker systemOutTracker0 = new SystemOutTracker();
      LinkedList<Dimension> linkedList0 = new LinkedList<Dimension>();
      AsperatusRateTrackerScheduler asperatusRateTrackerScheduler0 = new AsperatusRateTrackerScheduler(systemOutTracker0, (String) null, linkedList0, (RateTracker) null, (ScheduledExecutorService) null);
      boolean boolean0 = asperatusRateTrackerScheduler0.isStarted();
      assertFalse(boolean0);
      assertEquals(1, asperatusRateTrackerScheduler0.getFrequency());
  }
}
