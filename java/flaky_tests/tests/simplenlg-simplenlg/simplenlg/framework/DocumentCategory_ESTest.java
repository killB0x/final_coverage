/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 02:42:57 GMT 2022
 */

package simplenlg.framework;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import simplenlg.framework.DocumentCategory;
import simplenlg.framework.ElementCategory;
import simplenlg.framework.LexicalCategory;
import simplenlg.framework.PhraseCategory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DocumentCategory_ESTest extends DocumentCategory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DocumentCategory[] documentCategoryArray0 = DocumentCategory.values();
      assertEquals(7, documentCategoryArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.PARAGRAPH;
      LexicalCategory lexicalCategory0 = LexicalCategory.ADVERB;
      boolean boolean0 = documentCategory0.hasSubPart(lexicalCategory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.LIST_ITEM;
      PhraseCategory phraseCategory0 = PhraseCategory.CANNED_TEXT;
      boolean boolean0 = documentCategory0.hasSubPart(phraseCategory0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.PARAGRAPH;
      boolean boolean0 = documentCategory0.hasSubPart(documentCategory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.SENTENCE;
      DocumentCategory documentCategory1 = DocumentCategory.PARAGRAPH;
      boolean boolean0 = documentCategory1.hasSubPart(documentCategory0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.valueOf("SECTION");
      boolean boolean0 = documentCategory0.hasSubPart(documentCategory0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.PARAGRAPH;
      DocumentCategory documentCategory1 = DocumentCategory.SECTION;
      boolean boolean0 = documentCategory1.hasSubPart(documentCategory0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.DOCUMENT;
      DocumentCategory documentCategory1 = DocumentCategory.LIST_ITEM;
      boolean boolean0 = documentCategory0.hasSubPart(documentCategory1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.DOCUMENT;
      boolean boolean0 = documentCategory0.hasSubPart(documentCategory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.SENTENCE;
      boolean boolean0 = documentCategory0.hasSubPart(documentCategory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.valueOf("DOCUMENT");
      DocumentCategory documentCategory1 = DocumentCategory.ENUMERATED_LIST;
      boolean boolean0 = documentCategory1.hasSubPart(documentCategory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.LIST;
      DocumentCategory documentCategory1 = DocumentCategory.PARAGRAPH;
      boolean boolean0 = documentCategory1.hasSubPart(documentCategory0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.LIST;
      DocumentCategory documentCategory1 = DocumentCategory.SECTION;
      boolean boolean0 = documentCategory1.hasSubPart(documentCategory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.LIST;
      DocumentCategory documentCategory1 = DocumentCategory.DOCUMENT;
      boolean boolean0 = documentCategory1.hasSubPart(documentCategory0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.SENTENCE;
      LexicalCategory lexicalCategory0 = LexicalCategory.VERB;
      boolean boolean0 = documentCategory0.hasSubPart(lexicalCategory0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.LIST;
      boolean boolean0 = documentCategory0.hasSubPart(documentCategory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.SECTION;
      boolean boolean0 = documentCategory0.hasSubPart((ElementCategory) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.LIST;
      boolean boolean0 = documentCategory0.equalTo("DOCUMENT");
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.PARAGRAPH;
      boolean boolean0 = documentCategory0.equalTo(documentCategory0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DocumentCategory documentCategory0 = DocumentCategory.DOCUMENT;
      boolean boolean0 = documentCategory0.equalTo((Object) null);
      assertFalse(boolean0);
  }
}
