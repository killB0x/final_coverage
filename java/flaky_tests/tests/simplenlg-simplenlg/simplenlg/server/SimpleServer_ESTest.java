/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 02:57:47 GMT 2022
 */

package simplenlg.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import simplenlg.server.SimpleServer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleServer_ESTest extends SimpleServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemInUtil.addInputLine("Server is using the following lexicon: ");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SimpleServer.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleServer simpleServer0 = new SimpleServer(50007);
      String[] stringArray0 = new String[3];
      SimpleServer.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1";
      // Undeclared exception!
      try { 
        SimpleServer.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket();
      SimpleServer simpleServer0 = new SimpleServer(mockServerSocket0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket();
      mockServerSocket0.close();
      SimpleServer simpleServer0 = null;
      try {
        simpleServer0 = new SimpleServer(mockServerSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is closed
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockServerSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleServer simpleServer0 = null;
      try {
        simpleServer0 = new SimpleServer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port value out of range: -1
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockServerSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleServer simpleServer0 = new SimpleServer(196);
      SimpleServer simpleServer1 = null;
      try {
        simpleServer1 = new SimpleServer(196);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Failed to open TCP port
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoSuiteSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleServer simpleServer0 = new SimpleServer(50007);
      // Undeclared exception!
      try { 
        simpleServer0.exit(4018);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleServer simpleServer0 = new SimpleServer(50007);
      simpleServer0.shutdown();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleServer simpleServer0 = new SimpleServer(0);
      // Undeclared exception!
      try { 
        simpleServer0.exit();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemInUtil.addInputLine("");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SimpleServer.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleServer simpleServer0 = new SimpleServer(13);
      simpleServer0.handleClient((Socket) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 196);
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray0);
      SimpleServer simpleServer0 = new SimpleServer(196);
      simpleServer0.run();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleServer simpleServer0 = new SimpleServer(1000);
      SimpleServer.DEBUG = true;
      simpleServer0.run();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleServer simpleServer0 = new SimpleServer(196);
      simpleServer0.terminate();
      simpleServer0.run();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("./src/main/resources/lexicon.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "DB_FILENAME");
      // Undeclared exception!
      try { 
        SimpleServer.main((String[]) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("./src/main/resources/lexicon.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "7itYxJDM4$b+$}f");
      SimpleServer simpleServer0 = new SimpleServer(8);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleServer simpleServer0 = null;
      try {
        simpleServer0 = new SimpleServer((ServerSocket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.server.SimpleServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      SimpleServer.print(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemInUtil.addInputLine("exit");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        SimpleServer.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
