/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 02:53:31 GMT 2022
 */

package simplenlg.xmlrealiser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import javax.xml.transform.TransformerException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import simplenlg.xmlrealiser.Recording;
import simplenlg.xmlrealiser.wrapper.RecordSet;
import simplenlg.xmlrealiser.wrapper.RequestType;
import simplenlg.xmlrealiser.wrapper.XmlDocumentElement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Recording_ESTest extends Recording_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Recording recording0 = new Recording(">)XF");
      recording0.start();
      boolean boolean0 = recording0.RecordingOn();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        Recording.writeRecording((RecordSet) null, pipedOutputStream0);
        fail("Expecting exception: TransformerException");
      
      } catch(TransformerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      // Undeclared exception!
      try { 
        Recording.writeRecording(recordSet0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Recording recording0 = new Recording((String) null);
      // Undeclared exception!
      try { 
        recording0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Recording recording0 = new Recording("indent");
      recording0.start();
      recording0.recordingFile = null;
      // Undeclared exception!
      try { 
        recording0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Recording recording0 = new Recording("UTF-8");
      recording0.start();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("UTF-8/xmlrealiser0.xml");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      try { 
        recording0.finish();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Recording recording0 = new Recording("");
      RequestType requestType0 = new RequestType();
      XmlDocumentElement xmlDocumentElement0 = requestType0.getDocument();
      recording0.recordingOn = true;
      // Undeclared exception!
      try { 
        recording0.addRecord(xmlDocumentElement0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.xmlrealiser.Recording", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Recording recording0 = new Recording("Q");
      recording0.recordingOn = true;
      // Undeclared exception!
      try { 
        recording0.GetRecordingFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.xmlrealiser.Recording", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("and", true);
      Recording.writeRecording(recordSet0, mockFileOutputStream0);
      assertNull(recordSet0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Recording recording0 = new Recording("aHBy2ZWBE/bpS+:@J");
      recording0.finish();
      assertFalse(recording0.RecordingOn());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Recording recording0 = new Recording(">)XF");
      recording0.start();
      assertTrue(recording0.RecordingOn());
      
      recording0.finish();
      assertFalse(recording0.RecordingOn());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Recording recording0 = new Recording("and");
      XmlDocumentElement xmlDocumentElement0 = new XmlDocumentElement();
      recording0.addRecord(xmlDocumentElement0, "");
      assertNull(xmlDocumentElement0.getCat());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Recording recording0 = new Recording(">)XF");
      recording0.start();
      recording0.addRecord((XmlDocumentElement) null, "`?]ML>V{aj");
      assertTrue(recording0.RecordingOn());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Recording recording0 = new Recording("=D9~");
      recording0.start();
      assertFalse(recording0.RecordingOn());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Recording recording0 = new Recording("and");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("and", true);
      recording0.start();
      assertFalse(recording0.RecordingOn());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Recording recording0 = new Recording("Q");
      recording0.recordingOn = true;
      recording0.start();
      assertTrue(recording0.RecordingOn());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Recording recording0 = new Recording("");
      recording0.start();
      assertFalse(recording0.RecordingOn());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Recording recording0 = new Recording(">)XF");
      recording0.start();
      recording0.GetRecordingFile();
      assertTrue(recording0.RecordingOn());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Recording recording0 = new Recording(">)XF");
      String string0 = recording0.GetRecordingFile();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Recording recording0 = new Recording(">)XF");
      boolean boolean0 = recording0.RecordingOn();
      assertFalse(boolean0);
  }
}
