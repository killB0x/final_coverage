/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:13:58 GMT 2022
 */

package simplenlg.xmlrealiser.wrapper;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import simplenlg.xmlrealiser.wrapper.XmlForm;
import simplenlg.xmlrealiser.wrapper.XmlPerson;
import simplenlg.xmlrealiser.wrapper.XmlTense;
import simplenlg.xmlrealiser.wrapper.XmlVPPhraseSpec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlVPPhraseSpec_ESTest extends XmlVPPhraseSpec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.valueOf(true);
      xmlVPPhraseSpec0.setSUPRESSEDCOMPLEMENTISER(boolean0);
      Boolean boolean1 = xmlVPPhraseSpec0.isSUPRESSEDCOMPLEMENTISER();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.FALSE;
      xmlVPPhraseSpec0.setSUPRESSEDCOMPLEMENTISER(boolean0);
      Boolean boolean1 = xmlVPPhraseSpec0.isSUPRESSEDCOMPLEMENTISER();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.TRUE;
      xmlVPPhraseSpec0.setSUPPRESSGENITIVEINGERUND(boolean0);
      Boolean boolean1 = xmlVPPhraseSpec0.isSUPPRESSGENITIVEINGERUND();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.valueOf("");
      xmlVPPhraseSpec0.suppressgenitiveingerund = boolean0;
      Boolean boolean1 = xmlVPPhraseSpec0.isSUPPRESSGENITIVEINGERUND();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.valueOf(true);
      xmlVPPhraseSpec0.setPASSIVE(boolean0);
      xmlVPPhraseSpec0.setPROGRESSIVE(xmlVPPhraseSpec0.passive);
      Boolean boolean1 = xmlVPPhraseSpec0.isPROGRESSIVE();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.valueOf("\"");
      xmlVPPhraseSpec0.setPROGRESSIVE(boolean0);
      Boolean boolean1 = xmlVPPhraseSpec0.isPROGRESSIVE();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.TRUE;
      xmlVPPhraseSpec0.setPERFECT(boolean0);
      Boolean boolean1 = xmlVPPhraseSpec0.isPERFECT();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.valueOf("!V*o8Hix4");
      xmlVPPhraseSpec0.setPERFECT(boolean0);
      Boolean boolean1 = xmlVPPhraseSpec0.isPERFECT();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.valueOf(true);
      xmlVPPhraseSpec0.setPASSIVE(boolean0);
      Boolean boolean1 = xmlVPPhraseSpec0.isPASSIVE();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.FALSE;
      xmlVPPhraseSpec0.setPASSIVE(boolean0);
      Boolean boolean1 = xmlVPPhraseSpec0.isPASSIVE();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.valueOf(true);
      xmlVPPhraseSpec0.negated = boolean0;
      Boolean boolean1 = xmlVPPhraseSpec0.isNEGATED();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.valueOf("S=[qERE&xc+$gL(");
      xmlVPPhraseSpec0.negated = boolean0;
      Boolean boolean1 = xmlVPPhraseSpec0.isNEGATED();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.valueOf(true);
      xmlVPPhraseSpec0.setAGGREGATEAUXILIARY(boolean0);
      Boolean boolean1 = xmlVPPhraseSpec0.isAGGREGATEAUXILIARY();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.FALSE;
      xmlVPPhraseSpec0.setAGGREGATEAUXILIARY(boolean0);
      Boolean boolean1 = xmlVPPhraseSpec0.isAGGREGATEAUXILIARY();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      XmlTense xmlTense0 = XmlTense.FUTURE;
      xmlVPPhraseSpec0.setTENSE(xmlTense0);
      XmlTense xmlTense1 = xmlVPPhraseSpec0.getTENSE();
      assertSame(xmlTense1, xmlTense0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      xmlVPPhraseSpec0.setMODAL("G)");
      String string0 = xmlVPPhraseSpec0.getMODAL();
      assertEquals("G)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      xmlVPPhraseSpec0.setMODAL("");
      String string0 = xmlVPPhraseSpec0.getMODAL();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      XmlForm xmlForm0 = XmlForm.PRESENT_PARTICIPLE;
      xmlVPPhraseSpec0.form = xmlForm0;
      XmlForm xmlForm1 = xmlVPPhraseSpec0.getFORM();
      assertEquals(XmlForm.PRESENT_PARTICIPLE, xmlForm1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = xmlVPPhraseSpec0.isPASSIVE();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = Boolean.FALSE;
      xmlVPPhraseSpec0.setNEGATED(boolean0);
      assertNull(xmlVPPhraseSpec0.isAGGREGATEAUXILIARY());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = xmlVPPhraseSpec0.isSUPRESSEDCOMPLEMENTISER();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = xmlVPPhraseSpec0.isPROGRESSIVE();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = xmlVPPhraseSpec0.isSUPPRESSGENITIVEINGERUND();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      String string0 = xmlVPPhraseSpec0.getMODAL();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = xmlVPPhraseSpec0.isNEGATED();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      xmlVPPhraseSpec0.getFORM();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = xmlVPPhraseSpec0.isPERFECT();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      XmlForm xmlForm0 = XmlForm.PRESENT_PARTICIPLE;
      xmlVPPhraseSpec0.setFORM(xmlForm0);
      assertNull(xmlVPPhraseSpec0.isSUPRESSEDCOMPLEMENTISER());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      xmlVPPhraseSpec0.getTENSE();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      xmlVPPhraseSpec0.getPERSON();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      XmlPerson xmlPerson0 = XmlPerson.FIRST;
      xmlVPPhraseSpec0.setPERSON(xmlPerson0);
      XmlPerson xmlPerson1 = xmlVPPhraseSpec0.getPERSON();
      assertSame(xmlPerson1, xmlPerson0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlVPPhraseSpec xmlVPPhraseSpec0 = new XmlVPPhraseSpec();
      Boolean boolean0 = xmlVPPhraseSpec0.isAGGREGATEAUXILIARY();
      assertNull(boolean0);
  }
}
