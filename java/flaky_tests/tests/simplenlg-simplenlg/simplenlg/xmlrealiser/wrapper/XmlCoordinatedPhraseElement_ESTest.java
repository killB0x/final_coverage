/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:03:18 GMT 2022
 */

package simplenlg.xmlrealiser.wrapper;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import simplenlg.xmlrealiser.wrapper.XmlCoordinatedPhraseElement;
import simplenlg.xmlrealiser.wrapper.XmlNLGElement;
import simplenlg.xmlrealiser.wrapper.XmlNumberAgreement;
import simplenlg.xmlrealiser.wrapper.XmlPerson;
import simplenlg.xmlrealiser.wrapper.XmlPhraseCategory;
import simplenlg.xmlrealiser.wrapper.XmlTense;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlCoordinatedPhraseElement_ESTest extends XmlCoordinatedPhraseElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.TRUE;
      xmlCoordinatedPhraseElement0.supressedcomplementiser = boolean0;
      Boolean boolean1 = xmlCoordinatedPhraseElement0.isSUPRESSEDCOMPLEMENTISER();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.TRUE;
      xmlCoordinatedPhraseElement0.setRAISESPECIFIER(boolean0);
      Boolean boolean1 = xmlCoordinatedPhraseElement0.isRAISESPECIFIER();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.FALSE;
      xmlCoordinatedPhraseElement0.raisespecifier = boolean0;
      Boolean boolean1 = xmlCoordinatedPhraseElement0.isRAISESPECIFIER();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.TRUE;
      xmlCoordinatedPhraseElement0.raisespecifier = boolean0;
      xmlCoordinatedPhraseElement0.setPROGRESSIVE(xmlCoordinatedPhraseElement0.raisespecifier);
      Boolean boolean1 = xmlCoordinatedPhraseElement0.isPROGRESSIVE();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.FALSE;
      xmlCoordinatedPhraseElement0.appositive = boolean0;
      xmlCoordinatedPhraseElement0.setPROGRESSIVE(xmlCoordinatedPhraseElement0.appositive);
      Boolean boolean1 = xmlCoordinatedPhraseElement0.isPROGRESSIVE();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.valueOf(true);
      xmlCoordinatedPhraseElement0.setPOSSESSIVE(boolean0);
      Boolean boolean1 = xmlCoordinatedPhraseElement0.isPOSSESSIVE();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.FALSE;
      xmlCoordinatedPhraseElement0.possessive = boolean0;
      Boolean boolean1 = xmlCoordinatedPhraseElement0.isPOSSESSIVE();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.TRUE;
      xmlCoordinatedPhraseElement0.negated = boolean0;
      Boolean boolean1 = xmlCoordinatedPhraseElement0.isNEGATED();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.valueOf(false);
      xmlCoordinatedPhraseElement0.negated = boolean0;
      Boolean boolean1 = xmlCoordinatedPhraseElement0.isNEGATED();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.valueOf(true);
      xmlCoordinatedPhraseElement0.setAPPOSITIVE(boolean0);
      Boolean boolean1 = xmlCoordinatedPhraseElement0.isAPPOSITIVE();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.FALSE;
      xmlCoordinatedPhraseElement0.appositive = boolean0;
      Boolean boolean1 = xmlCoordinatedPhraseElement0.isAPPOSITIVE();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      XmlTense xmlTense0 = XmlTense.PAST;
      xmlCoordinatedPhraseElement0.setTENSE(xmlTense0);
      XmlTense xmlTense1 = xmlCoordinatedPhraseElement0.getTENSE();
      assertSame(xmlTense1, xmlTense0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      XmlNumberAgreement xmlNumberAgreement0 = XmlNumberAgreement.PLURAL;
      xmlCoordinatedPhraseElement0.setNUMBER(xmlNumberAgreement0);
      XmlNumberAgreement xmlNumberAgreement1 = xmlCoordinatedPhraseElement0.getNUMBER();
      assertEquals(XmlNumberAgreement.PLURAL, xmlNumberAgreement1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      xmlCoordinatedPhraseElement0.setMODAL(">p%;l");
      String string0 = xmlCoordinatedPhraseElement0.getMODAL();
      assertEquals(">p%;l", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      xmlCoordinatedPhraseElement0.setMODAL("");
      String string0 = xmlCoordinatedPhraseElement0.getMODAL();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      LinkedList<XmlNLGElement> linkedList0 = new LinkedList<XmlNLGElement>();
      xmlCoordinatedPhraseElement0.coord = (List<XmlNLGElement>) linkedList0;
      linkedList0.add((XmlNLGElement) xmlCoordinatedPhraseElement0);
      List<XmlNLGElement> list0 = xmlCoordinatedPhraseElement0.getCoord();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      xmlCoordinatedPhraseElement0.setConj("");
      xmlCoordinatedPhraseElement0.getConj();
      assertEquals("", xmlCoordinatedPhraseElement0.getConj());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      XmlPhraseCategory xmlPhraseCategory0 = XmlPhraseCategory.PREPOSITIONAL_PHRASE;
      xmlCoordinatedPhraseElement0.setCat(xmlPhraseCategory0);
      XmlPhraseCategory xmlPhraseCategory1 = xmlCoordinatedPhraseElement0.getCat();
      assertSame(xmlPhraseCategory1, xmlPhraseCategory0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      xmlCoordinatedPhraseElement0.setCONJUNCTIONTYPE("czG{5A");
      String string0 = xmlCoordinatedPhraseElement0.getCONJUNCTIONTYPE();
      assertEquals("czG{5A", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      String string0 = xmlCoordinatedPhraseElement0.getConj();
      assertEquals("and", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      List<XmlNLGElement> list0 = xmlCoordinatedPhraseElement0.getCoord();
      List<XmlNLGElement> list1 = xmlCoordinatedPhraseElement0.getCoord();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = xmlCoordinatedPhraseElement0.isPROGRESSIVE();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = xmlCoordinatedPhraseElement0.isSUPRESSEDCOMPLEMENTISER();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      xmlCoordinatedPhraseElement0.setCONJUNCTIONTYPE("");
      String string0 = xmlCoordinatedPhraseElement0.getCONJUNCTIONTYPE();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      String string0 = xmlCoordinatedPhraseElement0.getMODAL();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      xmlCoordinatedPhraseElement0.getCat();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      XmlPerson xmlPerson0 = XmlPerson.SECOND;
      xmlCoordinatedPhraseElement0.setPERSON(xmlPerson0);
      XmlPerson xmlPerson1 = xmlCoordinatedPhraseElement0.getPERSON();
      assertEquals(XmlPerson.SECOND, xmlPerson1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      xmlCoordinatedPhraseElement0.getPERSON();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = xmlCoordinatedPhraseElement0.isAPPOSITIVE();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = xmlCoordinatedPhraseElement0.isRAISESPECIFIER();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.TRUE;
      xmlCoordinatedPhraseElement0.setNEGATED(boolean0);
      assertNull(xmlCoordinatedPhraseElement0.isPOSSESSIVE());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      xmlCoordinatedPhraseElement0.getTENSE();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = xmlCoordinatedPhraseElement0.isNEGATED();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      String string0 = xmlCoordinatedPhraseElement0.getCONJUNCTIONTYPE();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = Boolean.valueOf(false);
      xmlCoordinatedPhraseElement0.setSUPRESSEDCOMPLEMENTISER(boolean0);
      Boolean boolean1 = xmlCoordinatedPhraseElement0.isSUPRESSEDCOMPLEMENTISER();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      Boolean boolean0 = xmlCoordinatedPhraseElement0.isPOSSESSIVE();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlCoordinatedPhraseElement xmlCoordinatedPhraseElement0 = new XmlCoordinatedPhraseElement();
      xmlCoordinatedPhraseElement0.getNUMBER();
  }
}
