/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 02:46:42 GMT 2022
 */

package simplenlg.lexicon;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import simplenlg.framework.LexicalCategory;
import simplenlg.lexicon.Lexicon;
import simplenlg.lexicon.MultipleLexicon;
import simplenlg.lexicon.NIHDBLexicon;
import simplenlg.lexicon.XMLLexicon;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultipleLexicon_ESTest extends MultipleLexicon_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
      
      String string0 = "N";
      Lexicon[] lexiconArray0 = new Lexicon[4];
      lexiconArray0[0] = (Lexicon) multipleLexicon0;
      lexiconArray0[1] = (Lexicon) multipleLexicon0;
      lexiconArray0[2] = (Lexicon) multipleLexicon0;
      lexiconArray0[3] = (Lexicon) multipleLexicon0;
      MultipleLexicon multipleLexicon1 = new MultipleLexicon(lexiconArray0);
      multipleLexicon0.addFinalLexicon(multipleLexicon1);
      LexicalCategory lexicalCategory0 = LexicalCategory.VERB;
      // Undeclared exception!
      try { 
        multipleLexicon0.getWordsFromVariant("N", lexicalCategory0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lexicon[] lexiconArray0 = new Lexicon[4];
      MultipleLexicon multipleLexicon0 = new MultipleLexicon(lexiconArray0);
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
      
      LexicalCategory lexicalCategory0 = LexicalCategory.ANY;
      // Undeclared exception!
      try { 
        multipleLexicon0.getWords("xgITD&jT", lexicalCategory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.lexicon.MultipleLexicon", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Lexicon[] lexiconArray0 = new Lexicon[2];
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      lexiconArray0[0] = (Lexicon) multipleLexicon0;
      LexicalCategory lexicalCategory0 = LexicalCategory.COMPLEMENTISER;
      multipleLexicon0.getWords("f}u;", lexicalCategory0);
      String string0 = "";
      LexicalCategory lexicalCategory1 = LexicalCategory.CONJUNCTION;
      multipleLexicon0.getWordsFromVariant("", lexicalCategory1);
      multipleLexicon0.getWords("");
      multipleLexicon0.getWordByID("$H+Ut8c;*]wLBQu");
      multipleLexicon0.createWord("", lexicalCategory0);
      multipleLexicon0.getWords("f}u;");
      multipleLexicon0.getWordsByID("f}u;");
      XMLLexicon xMLLexicon0 = new XMLLexicon();
      xMLLexicon0.hasWordFromVariant("", lexicalCategory0);
      xMLLexicon0.lookupWord("fBZ.{j( |0h*$toH/y.", lexicalCategory0);
      multipleLexicon0.addInitialLexicon(lexiconArray0[0]);
      multipleLexicon0.getWords(string0, lexicalCategory0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lexicon[] lexiconArray0 = new Lexicon[6];
      MultipleLexicon multipleLexicon0 = new MultipleLexicon(lexiconArray0);
      NIHDBLexicon nIHDBLexicon0 = new NIHDBLexicon("jS`tD!`", "g38N*", "g38N*", "g38N*");
      multipleLexicon0.addFinalLexicon(nIHDBLexicon0);
      // Undeclared exception!
      try { 
        multipleLexicon0.getWordsByID("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // gov/nih/nlm/nls/lexAccess/Api/LexAccessApi
         //
         verifyException("simplenlg.lexicon.NIHDBLexicon", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      String string0 = "&Hs4#U2KJi";
      multipleLexicon0.getWord("&Hs4#U2KJi");
      NIHDBLexicon nIHDBLexicon0 = new NIHDBLexicon("X03kf");
      multipleLexicon0.addFinalLexicon(nIHDBLexicon0);
      String string1 = null;
      LexicalCategory lexicalCategory0 = LexicalCategory.ANY;
      // Undeclared exception!
      try { 
        multipleLexicon0.getWordsFromVariant((String) null, lexicalCategory0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // gov/nih/nlm/nls/lexAccess/Api/LexAccessApi
         //
         verifyException("simplenlg.lexicon.NIHDBLexicon", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Lexicon[] lexiconArray0 = new Lexicon[2];
      MultipleLexicon multipleLexicon0 = new MultipleLexicon(lexiconArray0);
      LexicalCategory lexicalCategory0 = LexicalCategory.ADJECTIVE;
      // Undeclared exception!
      try { 
        multipleLexicon0.getWordsFromVariant("", lexicalCategory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.lexicon.MultipleLexicon", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lexicon[] lexiconArray0 = new Lexicon[1];
      NIHDBLexicon nIHDBLexicon0 = new NIHDBLexicon("\\h`Ru.O8)ALd");
      lexiconArray0[0] = (Lexicon) nIHDBLexicon0;
      MultipleLexicon multipleLexicon0 = new MultipleLexicon(lexiconArray0);
      LexicalCategory lexicalCategory0 = LexicalCategory.PRONOUN;
      // Undeclared exception!
      try { 
        multipleLexicon0.getWords("", lexicalCategory0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // gov/nih/nlm/nls/lexAccess/Api/LexAccessApi
         //
         verifyException("simplenlg.lexicon.NIHDBLexicon", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lexicon[] lexiconArray0 = new Lexicon[2];
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      lexiconArray0[0] = (Lexicon) multipleLexicon0;
      multipleLexicon0.createWord("");
      multipleLexicon0.addInitialLexicon(lexiconArray0[0]);
      String string0 = "zq";
      multipleLexicon0.getWordsByID(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      MultipleLexicon multipleLexicon1 = null;
      try {
        multipleLexicon1 = new MultipleLexicon((Lexicon[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.lexicon.MultipleLexicon", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      Lexicon lexicon0 = Lexicon.getDefaultLexicon();
      multipleLexicon0.addInitialLexicon(lexicon0);
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
      
      multipleLexicon0.getWords("e2M|aT=Uh\"&N,R@Y");
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lexicon[] lexiconArray0 = new Lexicon[4];
      MultipleLexicon multipleLexicon0 = new MultipleLexicon(lexiconArray0);
      // Undeclared exception!
      try { 
        multipleLexicon0.getWords("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      XMLLexicon xMLLexicon0 = new XMLLexicon();
      multipleLexicon0.addFinalLexicon(xMLLexicon0);
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
      
      multipleLexicon0.getWordsFromVariant("");
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lexicon[] lexiconArray0 = new Lexicon[4];
      MultipleLexicon multipleLexicon0 = new MultipleLexicon(lexiconArray0);
      // Undeclared exception!
      try { 
        multipleLexicon0.getWordsFromVariant("verb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.lexicon.MultipleLexicon", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      XMLLexicon xMLLexicon0 = new XMLLexicon();
      multipleLexicon0.addFinalLexicon(xMLLexicon0);
      multipleLexicon0.getWordsByID("simplenlg.lexicon.MultipleLexicon");
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Lexicon[] lexiconArray0 = new Lexicon[1];
      MultipleLexicon multipleLexicon0 = new MultipleLexicon(lexiconArray0);
      // Undeclared exception!
      try { 
        multipleLexicon0.getWordsByID("simplenlg.lexicon.MultipleLexicon");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      multipleLexicon0.getWordsByID("+/sz';stienA");
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      multipleLexicon0.setAlwaysSearchAll(false);
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      multipleLexicon0.getWordsFromVariant((String) null);
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      multipleLexicon0.close();
      multipleLexicon0.getWordsByID("simplenlg.lexicon.MultipleLexicon");
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lexicon[] lexiconArray0 = new Lexicon[4];
      MultipleLexicon multipleLexicon0 = new MultipleLexicon(lexiconArray0);
      // Undeclared exception!
      try { 
        multipleLexicon0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.lexicon.MultipleLexicon", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      multipleLexicon0.getWords("");
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      boolean boolean0 = multipleLexicon0.isAlwaysSearchAll();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lexicon[] lexiconArray0 = new Lexicon[2];
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      lexiconArray0[0] = (Lexicon) multipleLexicon0;
      XMLLexicon xMLLexicon0 = new XMLLexicon();
      lexiconArray0[1] = (Lexicon) xMLLexicon0;
      MultipleLexicon multipleLexicon1 = new MultipleLexicon(lexiconArray0);
      LexicalCategory lexicalCategory0 = LexicalCategory.PRONOUN;
      multipleLexicon1.getWordsFromVariant("8", lexicalCategory0);
      assertFalse(multipleLexicon1.isAlwaysSearchAll());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      LexicalCategory lexicalCategory0 = LexicalCategory.ADJECTIVE;
      multipleLexicon0.getWords("Nb>vc{[Y");
      multipleLexicon0.getWords("%");
      LexicalCategory lexicalCategory1 = LexicalCategory.PRONOUN;
      multipleLexicon0.getWords("%", lexicalCategory1);
      multipleLexicon0.getWordsFromVariant("", lexicalCategory1);
      multipleLexicon0.getWords("simplenlg.framework.PhraseCategory");
      multipleLexicon0.getWordByID("Nb>vc{[Y");
      multipleLexicon0.createWord("simplenlg.framework.PhraseCategory", lexicalCategory0);
      multipleLexicon0.getWords("%");
      multipleLexicon0.getWordsByID("");
      XMLLexicon xMLLexicon0 = new XMLLexicon();
      xMLLexicon0.hasWordFromVariant("Nb>vc{[Y", lexicalCategory1);
      xMLLexicon0.lookupWord("", lexicalCategory1);
      multipleLexicon0.addInitialLexicon(xMLLexicon0);
      multipleLexicon0.getWords("NLGElement: ", lexicalCategory0);
      multipleLexicon0.setAlwaysSearchAll(false);
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      multipleLexicon0.hasWordByID("p$a:d3u:_(hBqb'-$");
      LexicalCategory lexicalCategory0 = LexicalCategory.AUXILIARY;
      multipleLexicon0.getWord("?P8kU]d !>Liy8C_>hH");
      LexicalCategory lexicalCategory1 = LexicalCategory.VERB;
      multipleLexicon0.getWords("", lexicalCategory1);
      multipleLexicon0.getWordsFromVariant("G!-4/8{%N", lexicalCategory0);
      multipleLexicon0.getWordFromVariant("G!-4/8{%N");
      multipleLexicon0.isAlwaysSearchAll();
      XMLLexicon xMLLexicon0 = new XMLLexicon();
      xMLLexicon0.getWordsFromVariant("\"hR_aL= M>nVqBH", lexicalCategory1);
      multipleLexicon0.addInitialLexicon(xMLLexicon0);
      multipleLexicon0.close();
      multipleLexicon0.getWordsByID("*QUX2B_0dr Rt");
      xMLLexicon0.getWordsFromVariant("\"hR_aL= M>nVqBH");
      multipleLexicon0.close();
      multipleLexicon0.setAlwaysSearchAll(false);
      multipleLexicon0.addFinalLexicon(xMLLexicon0);
      multipleLexicon0.close();
      xMLLexicon0.createWord("G!-4/8{%N");
      multipleLexicon0.addInitialLexicon(xMLLexicon0);
      multipleLexicon0.setAlwaysSearchAll(true);
      Lexicon.getDefaultLexicon();
      xMLLexicon0.getWordsByID("simplenlg.lexicon.MultipleLexicon");
      multipleLexicon0.setAlwaysSearchAll(true);
      multipleLexicon0.close();
      multipleLexicon0.isAlwaysSearchAll();
      multipleLexicon0.addInitialLexicon(xMLLexicon0);
      multipleLexicon0.getWordsByID("");
      assertTrue(multipleLexicon0.isAlwaysSearchAll());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lexicon[] lexiconArray0 = new Lexicon[2];
      NIHDBLexicon nIHDBLexicon0 = new NIHDBLexicon("", "lotfTqMhl[", "", "}\n");
      lexiconArray0[0] = (Lexicon) nIHDBLexicon0;
      NIHDBLexicon nIHDBLexicon1 = new NIHDBLexicon("hR", "hR", "", "ib&q1");
      lexiconArray0[1] = (Lexicon) nIHDBLexicon1;
      MultipleLexicon multipleLexicon0 = new MultipleLexicon(lexiconArray0);
      MultipleLexicon multipleLexicon1 = new MultipleLexicon(lexiconArray0);
      multipleLexicon0.addFinalLexicon(multipleLexicon1);
      assertFalse(multipleLexicon1.isAlwaysSearchAll());
      assertFalse(multipleLexicon0.isAlwaysSearchAll());
  }
}
