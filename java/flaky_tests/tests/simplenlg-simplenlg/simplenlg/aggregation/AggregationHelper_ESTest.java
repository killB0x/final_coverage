/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 02:52:24 GMT 2022
 */

package simplenlg.aggregation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import simplenlg.aggregation.AggregationHelper;
import simplenlg.aggregation.FunctionalSet;
import simplenlg.framework.DocumentElement;
import simplenlg.framework.ListElement;
import simplenlg.framework.NLGElement;
import simplenlg.framework.NLGFactory;
import simplenlg.phrasespec.SPhraseSpec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AggregationHelper_ESTest extends AggregationHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NLGFactory nLGFactory0 = new NLGFactory();
      DocumentElement documentElement0 = nLGFactory0.createSentence("simplenlg.phrasespec.VPPhraseSpec");
      DocumentElement documentElement1 = nLGFactory0.createSentence("oXr^6asIxU/R");
      List<FunctionalSet> list0 = AggregationHelper.collectFunctionalPairs(documentElement1, documentElement0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NLGFactory nLGFactory0 = new NLGFactory();
      NLGElement nLGElement0 = nLGFactory0.createStringElement();
      DocumentElement documentElement0 = nLGFactory0.createSentence("simplenlg.framework.StringElement");
      List<FunctionalSet> list0 = AggregationHelper.collectFunctionalPairs(nLGElement0, documentElement0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NLGFactory nLGFactory0 = new NLGFactory();
      NLGElement nLGElement0 = nLGFactory0.createStringElement();
      // Undeclared exception!
      try { 
        AggregationHelper.collectFunctionalPairs(nLGElement0, (NLGElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.aggregation.AggregationHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ListElement listElement0 = new ListElement();
      List<FunctionalSet> list0 = AggregationHelper.collectFunctionalPairs(listElement0, listElement0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NLGFactory nLGFactory0 = new NLGFactory();
      DocumentElement documentElement0 = nLGFactory0.createSentence("simplenlg.framework.StringElement");
      SPhraseSpec sPhraseSpec0 = nLGFactory0.createClause();
      List<FunctionalSet> list0 = AggregationHelper.collectFunctionalPairs(documentElement0, sPhraseSpec0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NLGFactory nLGFactory0 = new NLGFactory();
      NLGElement nLGElement0 = nLGFactory0.createStringElement();
      DocumentElement documentElement0 = nLGFactory0.createSentence("simplenlg.framework.StringElement");
      List<FunctionalSet> list0 = AggregationHelper.collectFunctionalPairs(documentElement0, nLGElement0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AggregationHelper aggregationHelper0 = new AggregationHelper();
  }
}
