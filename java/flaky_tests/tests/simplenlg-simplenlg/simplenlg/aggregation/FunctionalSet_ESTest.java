/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 02:55:45 GMT 2022
 */

package simplenlg.aggregation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import simplenlg.aggregation.FunctionalSet;
import simplenlg.aggregation.Periphery;
import simplenlg.features.DiscourseFunction;
import simplenlg.framework.CoordinatedPhraseElement;
import simplenlg.framework.DocumentElement;
import simplenlg.framework.ElementCategory;
import simplenlg.framework.LexicalCategory;
import simplenlg.framework.ListElement;
import simplenlg.framework.NLGElement;
import simplenlg.framework.NLGFactory;
import simplenlg.framework.PhraseCategory;
import simplenlg.lexicon.XMLLexicon;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionalSet_ESTest extends FunctionalSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PhraseCategory phraseCategory0 = PhraseCategory.PREPOSITIONAL_PHRASE;
      Periphery periphery0 = Periphery.LEFT;
      NLGElement[] nLGElementArray0 = new NLGElement[0];
      DiscourseFunction discourseFunction0 = DiscourseFunction.CONJUNCTION;
      FunctionalSet functionalSet0 = new FunctionalSet(discourseFunction0, phraseCategory0, periphery0, nLGElementArray0);
      functionalSet0.elideRightMost();
      assertFalse(functionalSet0.lemmaIdentical());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.SUBJECT;
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[0];
      FunctionalSet functionalSet0 = new FunctionalSet(discourseFunction0, (ElementCategory) null, periphery0, nLGElementArray0);
      functionalSet0.elideLeftMost();
      assertEquals(DiscourseFunction.SUBJECT, functionalSet0.getFunction());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.SUBJECT;
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[0];
      FunctionalSet functionalSet0 = new FunctionalSet(discourseFunction0, (ElementCategory) null, periphery0, nLGElementArray0);
      String string0 = functionalSet0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.AUXILIARY;
      Periphery periphery0 = Periphery.LEFT;
      NLGElement[] nLGElementArray0 = new NLGElement[9];
      FunctionalSet functionalSet0 = FunctionalSet.newInstance(discourseFunction0, (ElementCategory) null, periphery0, nLGElementArray0);
      ElementCategory elementCategory0 = functionalSet0.getCategory();
      assertNull(elementCategory0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LexicalCategory lexicalCategory0 = LexicalCategory.CONJUNCTION;
      NLGElement[] nLGElementArray0 = new NLGElement[1];
      DiscourseFunction discourseFunction0 = DiscourseFunction.VERB_PHRASE;
      Periphery periphery0 = Periphery.LEFT;
      FunctionalSet functionalSet0 = new FunctionalSet(discourseFunction0, lexicalCategory0, periphery0, nLGElementArray0);
      // Undeclared exception!
      try { 
        functionalSet0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.aggregation.FunctionalSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LexicalCategory lexicalCategory0 = LexicalCategory.CONJUNCTION;
      DiscourseFunction discourseFunction0 = DiscourseFunction.CUE_PHRASE;
      Periphery periphery0 = Periphery.RIGHT;
      // Undeclared exception!
      try { 
        FunctionalSet.newInstance(discourseFunction0, lexicalCategory0, periphery0, (NLGElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.aggregation.FunctionalSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.SUBJECT;
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[0];
      FunctionalSet functionalSet0 = new FunctionalSet(discourseFunction0, (ElementCategory) null, periphery0, nLGElementArray0);
      // Undeclared exception!
      try { 
        functionalSet0.formIdentical();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.SUBJECT;
      LexicalCategory lexicalCategory0 = LexicalCategory.CONJUNCTION;
      Periphery periphery0 = Periphery.LEFT;
      NLGElement[] nLGElementArray0 = new NLGElement[2];
      FunctionalSet functionalSet0 = FunctionalSet.newInstance(discourseFunction0, lexicalCategory0, periphery0, nLGElementArray0);
      // Undeclared exception!
      try { 
        functionalSet0.elideRightMost();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.aggregation.FunctionalSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LexicalCategory lexicalCategory0 = LexicalCategory.CONJUNCTION;
      DiscourseFunction discourseFunction0 = DiscourseFunction.PRE_MODIFIER;
      Periphery periphery0 = Periphery.RIGHT;
      FunctionalSet functionalSet0 = null;
      try {
        functionalSet0 = new FunctionalSet(discourseFunction0, lexicalCategory0, periphery0, (NLGElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.CUE_PHRASE;
      PhraseCategory phraseCategory0 = PhraseCategory.VERB_PHRASE;
      NLGFactory nLGFactory0 = new NLGFactory();
      ListElement listElement0 = new ListElement();
      DocumentElement documentElement0 = nLGFactory0.createSentence((NLGElement) listElement0);
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[3];
      nLGElementArray0[0] = (NLGElement) documentElement0;
      nLGElementArray0[1] = (NLGElement) documentElement0;
      nLGElementArray0[2] = (NLGElement) documentElement0;
      FunctionalSet functionalSet0 = FunctionalSet.newInstance(discourseFunction0, phraseCategory0, periphery0, nLGElementArray0);
      String string0 = functionalSet0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.FRONT_MODIFIER;
      PhraseCategory phraseCategory0 = PhraseCategory.PREPOSITIONAL_PHRASE;
      XMLLexicon xMLLexicon0 = new XMLLexicon("JTe");
      NLGFactory nLGFactory0 = new NLGFactory(xMLLexicon0);
      NLGElement nLGElement0 = nLGFactory0.createNLGElement((Object) "JTe");
      CoordinatedPhraseElement coordinatedPhraseElement0 = new CoordinatedPhraseElement();
      List<NLGElement> list0 = coordinatedPhraseElement0.getComplements();
      ListElement listElement0 = new ListElement(list0);
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[9];
      nLGElementArray0[0] = nLGElement0;
      nLGElementArray0[1] = (NLGElement) listElement0;
      nLGElementArray0[2] = nLGElement0;
      nLGElementArray0[3] = (NLGElement) coordinatedPhraseElement0;
      nLGElementArray0[4] = (NLGElement) listElement0;
      FunctionalSet functionalSet0 = FunctionalSet.newInstance(discourseFunction0, phraseCategory0, periphery0, nLGElementArray0);
      List<NLGElement> list1 = functionalSet0.getComponents();
      ListElement listElement1 = new ListElement(list1);
      nLGElementArray0[5] = (NLGElement) listElement1;
      // Undeclared exception!
      try { 
        functionalSet0.elideLeftMost();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.aggregation.FunctionalSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.CUE_PHRASE;
      PhraseCategory phraseCategory0 = PhraseCategory.VERB_PHRASE;
      NLGFactory nLGFactory0 = new NLGFactory();
      ListElement listElement0 = new ListElement();
      DocumentElement documentElement0 = nLGFactory0.createSentence((NLGElement) listElement0);
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[3];
      nLGElementArray0[1] = (NLGElement) documentElement0;
      nLGElementArray0[2] = (NLGElement) documentElement0;
      FunctionalSet functionalSet0 = FunctionalSet.newInstance(discourseFunction0, phraseCategory0, periphery0, nLGElementArray0);
      functionalSet0.elideRightMost();
      assertFalse(functionalSet0.lemmaIdentical());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.FRONT_MODIFIER;
      PhraseCategory phraseCategory0 = PhraseCategory.PREPOSITIONAL_PHRASE;
      XMLLexicon xMLLexicon0 = new XMLLexicon("JTe");
      NLGFactory nLGFactory0 = new NLGFactory(xMLLexicon0);
      NLGElement nLGElement0 = nLGFactory0.createNLGElement((Object) "JTe");
      CoordinatedPhraseElement coordinatedPhraseElement0 = new CoordinatedPhraseElement();
      List<NLGElement> list0 = coordinatedPhraseElement0.getComplements();
      ListElement listElement0 = new ListElement(list0);
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[9];
      nLGElementArray0[0] = nLGElement0;
      nLGElementArray0[1] = (NLGElement) listElement0;
      nLGElementArray0[2] = nLGElement0;
      nLGElementArray0[3] = (NLGElement) coordinatedPhraseElement0;
      nLGElementArray0[4] = (NLGElement) listElement0;
      FunctionalSet functionalSet0 = FunctionalSet.newInstance(discourseFunction0, phraseCategory0, periphery0, nLGElementArray0);
      nLGElementArray0[5] = (NLGElement) listElement0;
      nLGElementArray0[6] = nLGElement0;
      nLGElementArray0[7] = (NLGElement) listElement0;
      functionalSet0.elideLeftMost();
      assertEquals(Periphery.RIGHT, functionalSet0.getPeriphery());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.FRONT_MODIFIER;
      PhraseCategory phraseCategory0 = PhraseCategory.PREPOSITIONAL_PHRASE;
      XMLLexicon xMLLexicon0 = new XMLLexicon("JTe");
      NLGFactory nLGFactory0 = new NLGFactory(xMLLexicon0);
      NLGElement nLGElement0 = nLGFactory0.createNLGElement((Object) "JTe");
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[9];
      nLGElementArray0[0] = nLGElement0;
      FunctionalSet functionalSet0 = FunctionalSet.newInstance(discourseFunction0, phraseCategory0, periphery0, nLGElementArray0);
      boolean boolean0 = functionalSet0.formIdentical();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.FRONT_MODIFIER;
      PhraseCategory phraseCategory0 = PhraseCategory.PREPOSITIONAL_PHRASE;
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[9];
      FunctionalSet functionalSet0 = FunctionalSet.newInstance(discourseFunction0, phraseCategory0, periphery0, nLGElementArray0);
      // Undeclared exception!
      try { 
        functionalSet0.formIdentical();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.aggregation.FunctionalSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.SUBJECT;
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[0];
      FunctionalSet functionalSet0 = FunctionalSet.newInstance(discourseFunction0, (ElementCategory) null, periphery0, nLGElementArray0);
      assertNull(functionalSet0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.FRONT_MODIFIER;
      PhraseCategory phraseCategory0 = PhraseCategory.PREPOSITIONAL_PHRASE;
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[9];
      FunctionalSet functionalSet0 = FunctionalSet.newInstance(discourseFunction0, phraseCategory0, periphery0, nLGElementArray0);
      Periphery periphery1 = functionalSet0.getPeriphery();
      assertSame(periphery0, periphery1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.FRONT_MODIFIER;
      PhraseCategory phraseCategory0 = PhraseCategory.PREPOSITIONAL_PHRASE;
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[9];
      FunctionalSet functionalSet0 = FunctionalSet.newInstance(discourseFunction0, phraseCategory0, periphery0, nLGElementArray0);
      DiscourseFunction discourseFunction1 = functionalSet0.getFunction();
      assertSame(discourseFunction1, discourseFunction0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PhraseCategory phraseCategory0 = PhraseCategory.ADJECTIVE_PHRASE;
      Periphery periphery0 = Periphery.RIGHT;
      DiscourseFunction discourseFunction0 = DiscourseFunction.FRONT_MODIFIER;
      NLGElement[] nLGElementArray0 = new NLGElement[18];
      FunctionalSet functionalSet0 = new FunctionalSet(discourseFunction0, phraseCategory0, periphery0, nLGElementArray0);
      ElementCategory elementCategory0 = functionalSet0.getCategory();
      assertEquals(PhraseCategory.ADJECTIVE_PHRASE, elementCategory0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscourseFunction discourseFunction0 = DiscourseFunction.FRONT_MODIFIER;
      PhraseCategory phraseCategory0 = PhraseCategory.PREPOSITIONAL_PHRASE;
      Periphery periphery0 = Periphery.RIGHT;
      NLGElement[] nLGElementArray0 = new NLGElement[9];
      FunctionalSet functionalSet0 = FunctionalSet.newInstance(discourseFunction0, phraseCategory0, periphery0, nLGElementArray0);
      assertNotNull(functionalSet0);
      
      boolean boolean0 = functionalSet0.lemmaIdentical();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PhraseCategory phraseCategory0 = PhraseCategory.ADJECTIVE_PHRASE;
      DiscourseFunction discourseFunction0 = DiscourseFunction.SPECIFIER;
      NLGElement[] nLGElementArray0 = new NLGElement[1];
      Periphery periphery0 = Periphery.LEFT;
      FunctionalSet functionalSet0 = new FunctionalSet(discourseFunction0, phraseCategory0, periphery0, nLGElementArray0);
      boolean boolean0 = functionalSet0.formIdentical();
      assertTrue(boolean0);
  }
}
