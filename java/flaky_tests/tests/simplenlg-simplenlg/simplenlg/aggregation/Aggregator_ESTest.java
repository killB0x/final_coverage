/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:00:39 GMT 2022
 */

package simplenlg.aggregation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import simplenlg.aggregation.AggregationRule;
import simplenlg.aggregation.Aggregator;
import simplenlg.aggregation.BackwardConjunctionReductionRule;
import simplenlg.aggregation.ClauseCoordinationRule;
import simplenlg.framework.CoordinatedPhraseElement;
import simplenlg.framework.DocumentElement;
import simplenlg.framework.LexicalCategory;
import simplenlg.framework.NLGElement;
import simplenlg.framework.NLGFactory;
import simplenlg.framework.WordElement;
import simplenlg.lexicon.Lexicon;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Aggregator_ESTest extends Aggregator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      aggregator0.initialise();
      CoordinatedPhraseElement coordinatedPhraseElement0 = new CoordinatedPhraseElement();
      ClauseCoordinationRule clauseCoordinationRule0 = new ClauseCoordinationRule();
      aggregator0.addRule(clauseCoordinationRule0);
      aggregator0.addRule(clauseCoordinationRule0);
      NLGElement nLGElement0 = aggregator0.realise((NLGElement) coordinatedPhraseElement0);
      assertNotSame(nLGElement0, coordinatedPhraseElement0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      aggregator0.initialise();
      NLGElement nLGElement0 = aggregator0.realise((NLGElement) null);
      assertNull(nLGElement0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      aggregator0.initialise();
      List<NLGElement> list0 = aggregator0.realise((List<NLGElement>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      aggregator0.initialise();
      CoordinatedPhraseElement coordinatedPhraseElement0 = new CoordinatedPhraseElement();
      Lexicon lexicon0 = Lexicon.getDefaultLexicon();
      NLGFactory nLGFactory0 = new NLGFactory(lexicon0);
      DocumentElement documentElement0 = nLGFactory0.createEnumeratedList((NLGElement) coordinatedPhraseElement0);
      List<NLGElement> list0 = documentElement0.getChildren();
      List<NLGElement> list1 = aggregator0.realise(list0);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      aggregator0.initialise();
      List<AggregationRule> list0 = aggregator0.getRules();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      aggregator0.initialise();
      BackwardConjunctionReductionRule backwardConjunctionReductionRule0 = new BackwardConjunctionReductionRule();
      aggregator0.addRule(backwardConjunctionReductionRule0);
      List<AggregationRule> list0 = aggregator0.getRules();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      // Undeclared exception!
      try { 
        aggregator0.setFactory((NLGFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.aggregation.Aggregator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      // Undeclared exception!
      try { 
        aggregator0.realise((NLGElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.aggregation.Aggregator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      LinkedList<NLGElement> linkedList0 = new LinkedList<NLGElement>();
      // Undeclared exception!
      try { 
        aggregator0.realise((List<NLGElement>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.aggregation.Aggregator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      LexicalCategory lexicalCategory0 = LexicalCategory.COMPLEMENTISER;
      aggregator0.initialise();
      WordElement wordElement0 = new WordElement("U.lA*", lexicalCategory0);
      List<NLGElement> list0 = wordElement0.getFeatureAsElementList("M7QskOE@");
      BackwardConjunctionReductionRule backwardConjunctionReductionRule0 = new BackwardConjunctionReductionRule();
      aggregator0.addRule(backwardConjunctionReductionRule0);
      List<NLGElement> list1 = aggregator0.realise(list0);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      LexicalCategory lexicalCategory0 = LexicalCategory.COMPLEMENTISER;
      aggregator0.initialise();
      WordElement wordElement0 = new WordElement("U.lA*", lexicalCategory0);
      BackwardConjunctionReductionRule backwardConjunctionReductionRule0 = new BackwardConjunctionReductionRule();
      aggregator0.addRule(backwardConjunctionReductionRule0);
      NLGElement nLGElement0 = aggregator0.realise((NLGElement) wordElement0);
      assertSame(nLGElement0, wordElement0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      ClauseCoordinationRule clauseCoordinationRule0 = new ClauseCoordinationRule();
      aggregator0.initialise();
      aggregator0.addRule(clauseCoordinationRule0);
      NLGFactory nLGFactory0 = new NLGFactory();
      aggregator0.setFactory(nLGFactory0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      ClauseCoordinationRule clauseCoordinationRule0 = new ClauseCoordinationRule();
      // Undeclared exception!
      try { 
        aggregator0.addRule(clauseCoordinationRule0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.aggregation.Aggregator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Aggregator aggregator0 = new Aggregator();
      List<AggregationRule> list0 = aggregator0.getRules();
      assertNull(list0);
  }
}
