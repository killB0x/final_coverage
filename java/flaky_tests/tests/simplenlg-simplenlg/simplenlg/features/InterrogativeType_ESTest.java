/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 02:51:12 GMT 2022
 */

package simplenlg.features;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import simplenlg.features.InterrogativeType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InterrogativeType_ESTest extends InterrogativeType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InterrogativeType[] interrogativeTypeArray0 = InterrogativeType.values();
      assertEquals(11, interrogativeTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.WHO_INDIRECT_OBJECT;
      boolean boolean0 = InterrogativeType.isIndirectObject(interrogativeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.YES_NO;
      String string0 = interrogativeType0.getString();
      assertEquals("yes/no", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.WHY;
      String string0 = interrogativeType0.getString();
      assertEquals("why", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.WHO_SUBJECT;
      String string0 = interrogativeType0.getString();
      assertEquals("who", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.WHO_OBJECT;
      String string0 = interrogativeType0.getString();
      assertEquals("who", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.WHO_INDIRECT_OBJECT;
      String string0 = interrogativeType0.getString();
      assertEquals("who", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.valueOf("WHERE");
      String string0 = interrogativeType0.getString();
      assertEquals("where", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.WHAT_SUBJECT;
      String string0 = interrogativeType0.getString();
      assertEquals("what", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.WHAT_OBJECT;
      String string0 = interrogativeType0.getString();
      assertEquals("what", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.HOW_PREDICATE;
      String string0 = interrogativeType0.getString();
      assertEquals("how", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.HOW_MANY;
      String string0 = interrogativeType0.getString();
      assertEquals("how many", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.HOW;
      String string0 = interrogativeType0.getString();
      assertEquals("how", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.WHAT_OBJECT;
      boolean boolean0 = InterrogativeType.isObject(interrogativeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = InterrogativeType.isObject(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.WHO_OBJECT;
      boolean boolean0 = InterrogativeType.isObject(interrogativeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InterrogativeType interrogativeType0 = InterrogativeType.HOW_MANY;
      boolean boolean0 = InterrogativeType.isIndirectObject(interrogativeType0);
      assertFalse(boolean0);
  }
}
