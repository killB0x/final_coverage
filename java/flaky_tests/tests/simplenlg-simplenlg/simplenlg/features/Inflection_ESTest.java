/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 02:54:37 GMT 2022
 */

package simplenlg.features;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import simplenlg.features.Inflection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Inflection_ESTest extends Inflection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Inflection[] inflectionArray0 = Inflection.values();
      assertEquals(6, inflectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Inflection inflection0 = Inflection.valueOf("UNCOUNT");
      assertEquals(Inflection.UNCOUNT, inflection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Inflection.getInflCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.features.Inflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Inflection.getInflCode("$VALUES");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Inflection inflection0 = Inflection.getInflCode("groupuncount");
      assertEquals(Inflection.UNCOUNT, inflection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Inflection inflection0 = Inflection.getInflCode("noncount");
      assertEquals(Inflection.UNCOUNT, inflection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Inflection inflection0 = Inflection.getInflCode("uncount");
      assertEquals(Inflection.UNCOUNT, inflection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Inflection inflection0 = Inflection.getInflCode("glreg");
      assertEquals(Inflection.GRECO_LATIN_REGULAR, inflection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Inflection inflection0 = Inflection.getInflCode("regd");
      assertEquals(Inflection.REGULAR_DOUBLE, inflection0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Inflection inflection0 = Inflection.getInflCode("irreg");
      assertEquals(Inflection.IRREGULAR, inflection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Inflection inflection0 = Inflection.getInflCode("reg");
      assertEquals(Inflection.REGULAR, inflection0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Inflection inflection0 = Inflection.getInflCode("inv");
      assertEquals(Inflection.INVARIANT, inflection0);
  }
}
