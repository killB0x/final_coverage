/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 02:15:58 GMT 2022
 */

package simplenlg.morphology.english;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import simplenlg.features.Inflection;
import simplenlg.features.Tense;
import simplenlg.framework.InflectedWordElement;
import simplenlg.framework.LexicalCategory;
import simplenlg.framework.NLGElement;
import simplenlg.framework.StringElement;
import simplenlg.framework.WordElement;
import simplenlg.lexicon.Lexicon;
import simplenlg.lexicon.MultipleLexicon;
import simplenlg.lexicon.XMLLexicon;
import simplenlg.morphology.english.MorphologyRules;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MorphologyRules_ESTest extends MorphologyRules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setFeature("discourse_function", true);
      NLGElement nLGElement0 = MorphologyRules.doPronounMorphology(inflectedWordElement0);
      assertEquals(Tense.PRESENT, nLGElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setFeature("gender", false);
      NLGElement nLGElement0 = MorphologyRules.doPronounMorphology(inflectedWordElement0);
      assertFalse(nLGElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setFeature("possessive", true);
      wordElement0.setBaseForm("simplenlg.framework.LexicalCategory");
      StringElement stringElement0 = MorphologyRules.doNounMorphology(inflectedWordElement0, wordElement0);
      assertEquals(Tense.PRESENT, stringElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LexicalCategory lexicalCategory0 = LexicalCategory.PRONOUN;
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement("there", lexicalCategory0);
      Object object0 = new Object();
      inflectedWordElement0.setFeature("form", object0);
      WordElement wordElement0 = new WordElement("him");
      NLGElement nLGElement0 = MorphologyRules.doVerbMorphology(inflectedWordElement0, wordElement0);
      assertEquals(Tense.PRESENT, nLGElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      // Undeclared exception!
      try { 
        MorphologyRules.doVerbMorphology((InflectedWordElement) null, wordElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.morphology.english.MorphologyRules", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MorphologyRules.doPronounMorphology((InflectedWordElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.morphology.english.MorphologyRules", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setFeature("possessive", true);
      wordElement0.setBaseForm("");
      // Undeclared exception!
      try { 
        MorphologyRules.doNounMorphology(inflectedWordElement0, wordElement0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      // Undeclared exception!
      try { 
        MorphologyRules.doNounMorphology((InflectedWordElement) null, wordElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.morphology.english.MorphologyRules", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        MorphologyRules.doDeterminerMorphology((NLGElement) null, "#3I<'5pJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.morphology.english.MorphologyRules", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      // Undeclared exception!
      try { 
        MorphologyRules.doAdverbMorphology((InflectedWordElement) null, wordElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.morphology.english.MorphologyRules", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      // Undeclared exception!
      try { 
        MorphologyRules.doAdjectiveMorphology((InflectedWordElement) null, wordElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("simplenlg.morphology.english.MorphologyRules", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringElement stringElement0 = new StringElement("a");
      MorphologyRules.doDeterminerMorphology(stringElement0, "a");
      assertEquals(Tense.PRESENT, stringElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringElement stringElement0 = new StringElement("a");
      stringElement0.setPlural(true);
      MorphologyRules.doDeterminerMorphology(stringElement0, "there");
      assertFalse(stringElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringElement stringElement0 = new StringElement("these");
      MorphologyRules.doDeterminerMorphology(stringElement0, "these");
      assertFalse(stringElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringElement stringElement0 = new StringElement("those");
      MorphologyRules.doDeterminerMorphology(stringElement0, "those");
      assertEquals(Tense.PRESENT, stringElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringElement stringElement0 = new StringElement("this");
      stringElement0.setPlural(true);
      MorphologyRules.doDeterminerMorphology(stringElement0, "this");
      assertEquals(Tense.PRESENT, stringElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringElement stringElement0 = new StringElement("that");
      stringElement0.setPlural(true);
      MorphologyRules.doDeterminerMorphology(stringElement0, "1_rvapP!nzrTML+cd ");
      assertEquals(Tense.PRESENT, stringElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      wordElement0.setPlural(true);
      MorphologyRules.doDeterminerMorphology(wordElement0, "java.lang.String@0000000002");
      assertFalse(wordElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringElement stringElement0 = new StringElement("a");
      MorphologyRules.doDeterminerMorphology(stringElement0, "there");
      assertEquals(Tense.PRESENT, stringElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      MorphologyRules.doDeterminerMorphology(wordElement0, (String) null);
      assertNull(wordElement0.getId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setFeature("possessive", true);
      NLGElement nLGElement0 = MorphologyRules.doPronounMorphology(inflectedWordElement0);
      assertFalse(nLGElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setPlural(true);
      NLGElement nLGElement0 = MorphologyRules.doPronounMorphology(inflectedWordElement0);
      assertFalse(nLGElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LexicalCategory lexicalCategory0 = LexicalCategory.PRONOUN;
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement("9?(<%5", lexicalCategory0);
      NLGElement nLGElement0 = MorphologyRules.doPronounMorphology(inflectedWordElement0);
      assertFalse(nLGElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setFeature("non_morph", true);
      NLGElement nLGElement0 = MorphologyRules.doPronounMorphology(inflectedWordElement0);
      assertFalse(nLGElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LexicalCategory lexicalCategory0 = LexicalCategory.PRONOUN;
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement("9?(<%5", lexicalCategory0);
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      WordElement wordElement0 = multipleLexicon0.getWord("9?(<%5");
      NLGElement nLGElement0 = MorphologyRules.doAdverbMorphology(inflectedWordElement0, wordElement0);
      MorphologyRules.doDeterminerMorphology(nLGElement0, "i");
      assertFalse(nLGElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LexicalCategory lexicalCategory0 = LexicalCategory.PRONOUN;
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement("9?(<%5", lexicalCategory0);
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      WordElement wordElement0 = multipleLexicon0.getWord("9?(<%5");
      NLGElement nLGElement0 = MorphologyRules.doAdjectiveMorphology(inflectedWordElement0, wordElement0);
      assertEquals(Tense.PRESENT, nLGElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LexicalCategory lexicalCategory0 = LexicalCategory.ADJECTIVE;
      WordElement wordElement0 = new WordElement("my", lexicalCategory0);
      LexicalCategory lexicalCategory1 = LexicalCategory.VERB;
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(" occurs more than once", lexicalCategory1);
      NLGElement nLGElement0 = MorphologyRules.doVerbMorphology(inflectedWordElement0, wordElement0);
      assertFalse(nLGElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      Lexicon[] lexiconArray0 = new Lexicon[0];
      MultipleLexicon multipleLexicon0 = new MultipleLexicon(lexiconArray0);
      WordElement wordElement1 = multipleLexicon0.getWord("java.lang.String@0000002227s");
      NLGElement nLGElement0 = MorphologyRules.doVerbMorphology(inflectedWordElement0, wordElement1);
      assertEquals(Tense.PRESENT, nLGElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setFeature("possessive", true);
      wordElement0.setBaseForm(":DL+V@}nZ~");
      inflectedWordElement0.setPlural(true);
      StringElement stringElement0 = MorphologyRules.doNounMorphology(inflectedWordElement0, wordElement0);
      assertEquals(Tense.PRESENT, stringElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setFeature("possessive", true);
      StringElement stringElement0 = MorphologyRules.doNounMorphology(inflectedWordElement0, wordElement0);
      assertFalse(stringElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LexicalCategory lexicalCategory0 = LexicalCategory.VERB;
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement("Iv", lexicalCategory0);
      WordElement wordElement0 = new WordElement();
      NLGElement nLGElement0 = MorphologyRules.doVerbMorphology(inflectedWordElement0, wordElement0);
      assertEquals(Tense.PRESENT, nLGElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LexicalCategory lexicalCategory0 = LexicalCategory.VERB;
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement("Iv", lexicalCategory0);
      NLGElement nLGElement0 = MorphologyRules.doVerbMorphology(inflectedWordElement0, (WordElement) null);
      assertEquals(Tense.PRESENT, nLGElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setPlural(true);
      wordElement0.setBaseForm("be");
      NLGElement nLGElement0 = MorphologyRules.doVerbMorphology(inflectedWordElement0, wordElement0);
      assertFalse(nLGElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      wordElement0.setBaseForm("be");
      NLGElement nLGElement0 = MorphologyRules.doVerbMorphology(inflectedWordElement0, wordElement0);
      assertFalse(nLGElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      NLGElement nLGElement0 = MorphologyRules.doVerbMorphology(inflectedWordElement0, (WordElement) null);
      assertEquals(Tense.PRESENT, nLGElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      WordElement wordElement0 = new WordElement("#@g$7NYN");
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      Object object0 = new Object();
      inflectedWordElement0.setFeature("present3s", object0);
      NLGElement nLGElement0 = MorphologyRules.doVerbMorphology(inflectedWordElement0, wordElement0);
      assertFalse(nLGElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLLexicon xMLLexicon0 = new XMLLexicon((URI) null);
      WordElement wordElement0 = xMLLexicon0.getWordFromVariant("person");
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setFeature("person", 2326.383);
      NLGElement nLGElement0 = MorphologyRules.doVerbMorphology(inflectedWordElement0, wordElement0);
      assertEquals(Tense.PRESENT, nLGElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setPlural(false);
      NLGElement nLGElement0 = MorphologyRules.doVerbMorphology(inflectedWordElement0, wordElement0);
      assertFalse(nLGElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LexicalCategory lexicalCategory0 = LexicalCategory.PRONOUN;
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement("9?(<%5", lexicalCategory0);
      MultipleLexicon multipleLexicon0 = new MultipleLexicon();
      WordElement wordElement0 = multipleLexicon0.getWord("9?(<%5");
      inflectedWordElement0.setFeature("negated", true);
      NLGElement nLGElement0 = MorphologyRules.doVerbMorphology(inflectedWordElement0, wordElement0);
      assertFalse(nLGElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LexicalCategory lexicalCategory0 = LexicalCategory.AUXILIARY;
      WordElement wordElement0 = new WordElement("this", lexicalCategory0);
      LexicalCategory lexicalCategory1 = LexicalCategory.VERB;
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement("this", lexicalCategory1);
      inflectedWordElement0.setPlural(true);
      StringElement stringElement0 = MorphologyRules.doNounMorphology(inflectedWordElement0, wordElement0);
      assertEquals(Tense.PRESENT, stringElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      wordElement0.setBaseForm("how many");
      inflectedWordElement0.setPlural(true);
      StringElement stringElement0 = MorphologyRules.doNounMorphology(inflectedWordElement0, wordElement0);
      assertEquals(Tense.PRESENT, stringElement0.getTense());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      Inflection inflection0 = Inflection.GRECO_LATIN_REGULAR;
      wordElement0.setDefaultInflectionalVariant(inflection0);
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setPlural(true);
      StringElement stringElement0 = MorphologyRules.doNounMorphology(inflectedWordElement0, wordElement0);
      assertFalse(stringElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setPlural(true);
      StringElement stringElement0 = MorphologyRules.doNounMorphology(inflectedWordElement0, (WordElement) null);
      assertFalse(stringElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      WordElement wordElement0 = new WordElement();
      LexicalCategory lexicalCategory0 = LexicalCategory.ADVERB;
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement("plural", lexicalCategory0);
      inflectedWordElement0.setFeature("plural", true);
      inflectedWordElement0.setPlural(true);
      StringElement stringElement0 = MorphologyRules.doNounMorphology(inflectedWordElement0, wordElement0);
      assertFalse(stringElement0.isNegated());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XMLLexicon xMLLexicon0 = new XMLLexicon();
      LexicalCategory lexicalCategory0 = LexicalCategory.SYMBOL;
      WordElement wordElement0 = xMLLexicon0.getWordFromVariant("these", lexicalCategory0);
      InflectedWordElement inflectedWordElement0 = new InflectedWordElement(wordElement0);
      inflectedWordElement0.setFeature("proper", true);
      inflectedWordElement0.setPlural(true);
      StringElement stringElement0 = MorphologyRules.doNounMorphology(inflectedWordElement0, wordElement0);
      assertEquals(Tense.PRESENT, stringElement0.getTense());
  }
}
