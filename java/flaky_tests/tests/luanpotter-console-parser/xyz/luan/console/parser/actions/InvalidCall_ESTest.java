/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 06:08:40 GMT 2022
 */

package xyz.luan.console.parser.actions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import xyz.luan.console.parser.actions.InvalidCall;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InvalidCall_ESTest extends InvalidCall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InvalidCall invalidCall0 = new InvalidCall("", "");
      InvalidCall invalidCall1 = new InvalidCall("", invalidCall0);
      assertFalse(invalidCall1.equals((Object)invalidCall0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InvalidCall invalidCall0 = new InvalidCall("");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InvalidCall invalidCall0 = null;
      try {
        invalidCall0 = new InvalidCall("xRdY;aPf[Fp", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("xyz.luan.console.parser.actions.InvalidCall", e);
      }
  }
}
