/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 06:10:00 GMT 2022
 */

package xyz.luan.console.parser.actions.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import xyz.luan.console.parser.actions.parser.DoubleParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleParser_ESTest extends DoubleParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleParser doubleParser0 = new DoubleParser();
      Double double0 = doubleParser0.parse("0f");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleParser doubleParser0 = new DoubleParser();
      Double double0 = doubleParser0.parse("3");
      assertEquals(3.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleParser doubleParser0 = new DoubleParser();
      try { 
        doubleParser0.parse("[So6[}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  expected a 'Double' but value found '[So6[}' can't be converted.
         //
         verifyException("xyz.luan.console.parser.actions.parser.DoubleParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleParser doubleParser0 = new DoubleParser();
      // Undeclared exception!
      try { 
        doubleParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleParser doubleParser0 = new DoubleParser();
      Double double0 = doubleParser0.parse("-2");
      assertEquals((-2.0), (double)double0, 0.01);
  }
}
