/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 05:54:23 GMT 2022
 */

package xyz.luan.console.parser.call;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import xyz.luan.console.parser.call.Call;
import xyz.luan.console.parser.call.CallResult;
import xyz.luan.console.parser.call.MultipleCalls;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultipleCalls_ESTest extends MultipleCalls_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultipleCalls.Operator multipleCalls_Operator0 = MultipleCalls.Operator.OR;
      CallResult callResult0 = CallResult.ERROR;
      boolean boolean0 = multipleCalls_Operator0.continueOn(callResult0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultipleCalls.Operator multipleCalls_Operator0 = MultipleCalls.Operator.OR;
      CallResult callResult0 = CallResult.SUCCESS;
      boolean boolean0 = multipleCalls_Operator0.continueOn(callResult0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultipleCalls.Operator multipleCalls_Operator0 = MultipleCalls.Operator.AND;
      CallResult callResult0 = CallResult.SUCCESS;
      boolean boolean0 = multipleCalls_Operator0.continueOn(callResult0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultipleCalls.Operator multipleCalls_Operator0 = MultipleCalls.Operator.AND;
      CallResult callResult0 = CallResult.QUIT;
      boolean boolean0 = multipleCalls_Operator0.continueOn(callResult0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultipleCalls.Operator multipleCalls_Operator0 = MultipleCalls.Operator.ALL;
      CallResult callResult0 = CallResult.INVALID_COMMAND;
      boolean boolean0 = multipleCalls_Operator0.continueOn(callResult0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultipleCalls.Operator multipleCalls_Operator0 = MultipleCalls.Operator.OR;
      MultipleCalls multipleCalls0 = new MultipleCalls((Call[]) null, multipleCalls_Operator0);
  }
}
