/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 05:44:27 GMT 2022
 */

package xyz.luan.console.parser.callable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import xyz.luan.console.parser.Aliases;
import xyz.luan.console.parser.callable.Pattern;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pattern_ESTest extends Pattern_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pattern pattern0 = new Pattern(":=1");
      Aliases aliases0 = Aliases.createAliasesWithDefaults();
      String[] stringArray0 = new String[0];
      Map<String, String> map0 = pattern0.parse(stringArray0, aliases0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pattern pattern0 = new Pattern("50w");
      Aliases aliases0 = Aliases.createAliasesWithDefaults();
      // Undeclared exception!
      try { 
        pattern0.parse((String[]) null, aliases0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("xyz.luan.console.parser.callable.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pattern pattern0 = null;
      try {
        pattern0 = new Pattern((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("xyz.luan.console.parser.callable.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pattern pattern0 = null;
      try {
        pattern0 = new Pattern((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("xyz.luan.console.parser.callable.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pattern pattern0 = new Pattern("$VALUES", true);
      pattern0.toString();
      String string0 = pattern0.toString();
      assertEquals("$VALUES...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pattern pattern0 = new Pattern("bl+0K#Y~x5YP+.$M6@r", false);
      String string0 = pattern0.toString();
      assertNotNull(string0);
      assertEquals("bl+0K#Y~x5YP+.$M6@r", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pattern pattern0 = new Pattern("7Ius*DgcG\bO QX?", true);
      String string0 = pattern0.toString();
      assertNotNull(string0);
      assertEquals("7Ius*DgcG\bO QX?...", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pattern pattern0 = new Pattern("!na}#oBg<UT!", true);
      String[] stringArray0 = new String[1];
      Aliases aliases0 = Aliases.createAliasesWithDefaults();
      Map<String, String> map0 = pattern0.parse(stringArray0, aliases0);
      assertNotNull(map0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[16];
      Pattern pattern0 = new Pattern("z ;*gub7OJA.", true);
      Map<String, String> map0 = pattern0.parse(stringArray0, (Aliases) null);
      assertEquals(2, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pattern pattern0 = new Pattern("bl+0K#Y~x5YP+.$M6@r", false);
      String[] stringArray0 = new String[1];
      Aliases aliases0 = Aliases.createAliasesWithDefaults();
      Map<String, String> map0 = pattern0.parse(stringArray0, aliases0);
      assertNotNull(map0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Aliases aliases0 = Aliases.createAliasesWithDefaults();
      Pattern pattern0 = new Pattern(":i");
      Map<String, String> map0 = pattern0.parse(stringArray0, aliases0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Pattern pattern0 = new Pattern(":null");
      Aliases aliases0 = Aliases.createAliasesWithDefaults();
      Map<String, String> map0 = pattern0.parse(stringArray0, aliases0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Aliases aliases0 = Aliases.createAliasesWithDefaults();
      Pattern pattern0 = new Pattern("xyz.luan.console.parser.callable.Pattern", false);
      Map<String, String> map0 = pattern0.parse(stringArray0, aliases0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pattern pattern0 = null;
      try {
        pattern0 = new Pattern(":", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // If continuous is set to true, the last argument must be a variable
         //
         verifyException("xyz.luan.console.parser.callable.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pattern pattern0 = null;
      try {
        pattern0 = new Pattern("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty argument in pattern
         //
         verifyException("xyz.luan.console.parser.callable.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pattern pattern0 = null;
      try {
        pattern0 = new Pattern(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty pattern
         //
         verifyException("xyz.luan.console.parser.callable.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Pattern pattern0 = new Pattern("a%fdWg]I", true);
      String[] stringArray0 = new String[0];
      HashMap<String, String> hashMap0 = new HashMap<String, String>(1287);
      Aliases aliases0 = new Aliases(hashMap0, true);
      Map<String, String> map0 = pattern0.parse(stringArray0, aliases0);
      assertNull(map0);
  }
}
