/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 11:17:46 GMT 2022
 */

package com.tomgibara.geo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tomgibara.geo.Cartesian;
import com.tomgibara.geo.Datum;
import com.tomgibara.geo.Ellipsoid;
import com.tomgibara.geo.LatLon;
import com.tomgibara.geo.LatLonHeight;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LatLonHeight_ESTest extends LatLonHeight_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377604.158744287, 6377604.158744287);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377604.158744287, 6377604.158744287, 6377604.158744287, 6377603.158744287, 6377604.158744287);
      LatLon latLon0 = new LatLon(datum0, 6377604.158744287, 6377604.158744287);
      LatLonHeight latLonHeight0 = new LatLonHeight(latLon0, 6377603.158744287);
      LatLonHeight latLonHeight1 = new LatLonHeight(latLon0, 3.1359736252234427E-7);
      boolean boolean0 = latLonHeight0.equals(latLonHeight1);
      assertFalse(boolean0);
      assertEquals(3.1359736252234427E-7, latLonHeight1.getHeight(), 0.01);
      assertFalse(latLonHeight1.equals((Object)latLonHeight0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377604.158744287, 6377604.158744287);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377604.158744287, 6377604.158744287, 6377604.158744287, 6377603.158744287, 6377604.158744287);
      LatLon latLon0 = datum0.createLatLonRadians(6377604.158744287, 6377603.158744287);
      LatLonHeight latLonHeight0 = new LatLonHeight(latLon0, 3.1359736252234427E-7);
      Cartesian cartesian0 = latLonHeight0.toCartesian();
      assertEquals(838269.2280455856, cartesian0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377563.396, 6377563.396);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377563.396, (-1236.0197022702837), (-6350444.46920966), 1424.8, 6377563.396);
      LatLon latLon0 = new LatLon(datum0, (-775.888190779), 6377563.396);
      LatLonHeight latLonHeight0 = new LatLonHeight(latLon0, (-1.0));
      Cartesian cartesian0 = latLonHeight0.toCartesian();
      assertEquals((-5280268.3035563985), cartesian0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377604.158744287, 6377604.158744287);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377604.158744287, 6377604.158744287, 6377604.158744287, 6377603.158744287, 6377604.158744287);
      Cartesian cartesian0 = Cartesian.inMeters(1.0, (-2255.13698146426), 0.0);
      LatLonHeight latLonHeight0 = datum0.cartesianToLatLonHeight(cartesian0);
      latLonHeight0.getLatLon();
      assertEquals((-6375349.0215411065), latLonHeight0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377604.158744287, 6377604.158744287);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377604.158744287, 6377604.158744287, 6377604.158744287, 6377603.158744287, 6377604.158744287);
      LatLon latLon0 = datum0.createLatLonRadians(6377604.158744287, 6377603.158744287);
      LatLonHeight latLonHeight0 = new LatLonHeight(latLon0, 6377604.158744287);
      latLonHeight0.getLatLon();
      assertEquals(6377604.158744287, latLonHeight0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377604.158744287, 6377604.158744287);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377604.158744287, 6377604.158744287, 6377604.158744287, 6377603.158744287, 6377604.158744287);
      LatLon latLon0 = new LatLon(datum0, 1793.650341891865, 1793.650341891865);
      LatLonHeight latLonHeight0 = latLon0.atHeight(300.8017);
      double double0 = latLonHeight0.getHeight();
      assertEquals(300.8017, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377604.158744287, 6377604.158744287);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377604.158744287, 6377604.158744287, 6377604.158744287, 6377603.158744287, 6377604.158744287);
      LatLon latLon0 = datum0.createLatLonRadians(6377604.158744287, 6377603.158744287);
      LatLonHeight latLonHeight0 = new LatLonHeight(latLon0, 3.1359736252234427E-7);
      latLonHeight0.hashCode();
      assertEquals(3.1359736252234427E-7, latLonHeight0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377604.158744287, 6377604.158744287);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377604.158744287, 6377604.158744287, 6377604.158744287, 6377603.158744287, 6377604.158744287);
      LatLon latLon0 = new LatLon(datum0, 1793.650341891865, 1793.650341891865);
      LatLonHeight latLonHeight0 = new LatLonHeight(latLon0, 298.26);
      LatLon latLon1 = new LatLon(datum0, 298.26, 300.8017);
      LatLonHeight latLonHeight1 = latLon1.atHeight(298.26);
      boolean boolean0 = latLonHeight0.equals(latLonHeight1);
      assertEquals(298.26, latLonHeight1.getHeight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377604.158744287, 6377604.158744287);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377604.158744287, 6377604.158744287, 6377604.158744287, 6377603.158744287, 6377604.158744287);
      LatLon latLon0 = new LatLon(datum0, 1793.650341891865, 1793.650341891865);
      LatLonHeight latLonHeight0 = new LatLonHeight(latLon0, 298.26);
      LatLonHeight latLonHeight1 = latLon0.atHeight(298.26);
      boolean boolean0 = latLonHeight0.equals(latLonHeight1);
      assertEquals(298.26, latLonHeight1.getHeight(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377604.158744287, 6377604.158744287);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377604.158744287, 6377604.158744287, 6377604.158744287, 6377603.158744287, 6377604.158744287);
      Object object0 = new Object();
      Cartesian cartesian0 = Cartesian.inMeters(1.0, (-2255.13698146426), 0.0);
      LatLonHeight latLonHeight0 = datum0.cartesianToLatLonHeight(cartesian0);
      boolean boolean0 = latLonHeight0.equals(object0);
      assertEquals((-6375349.0215411065), latLonHeight0.getHeight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377604.158744287, 6377604.158744287);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377604.158744287, 6377604.158744287, 6377604.158744287, 6377603.158744287, 6377604.158744287);
      LatLon latLon0 = datum0.createLatLonRadians(6377604.158744287, 6377603.158744287);
      LatLonHeight latLonHeight0 = new LatLonHeight(latLon0, 3.1359736252234427E-7);
      boolean boolean0 = latLonHeight0.equals(latLonHeight0);
      assertEquals(3.1359736252234427E-7, latLonHeight0.getHeight(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377604.158744287, 6377604.158744287);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377604.158744287, 6377604.158744287, 6377604.158744287, 6377603.158744287, 6377604.158744287);
      LatLon latLon0 = datum0.createLatLonRadians(6377604.158744287, 6377603.158744287);
      Cartesian cartesian0 = Cartesian.inMeters(1.0, (-2255.13698146426), 0.0);
      LatLonHeight latLonHeight0 = datum0.cartesianToLatLonHeight(cartesian0);
      LatLonHeight latLonHeight1 = new LatLonHeight(latLon0, 0.0);
      boolean boolean0 = latLonHeight0.equals(latLonHeight1);
      assertFalse(boolean0);
      assertEquals(0.0, latLonHeight1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LatLonHeight latLonHeight0 = null;
      try {
        latLonHeight0 = new LatLonHeight((LatLon) null, 6353.916860585);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null latLon
         //
         verifyException("com.tomgibara.geo.LatLonHeight", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ellipsoid ellipsoid0 = Ellipsoid.withAxisAndInvFlat(6377604.158744287, 6377604.158744287);
      Datum datum0 = Datum.withDegreesMeters(ellipsoid0, 6377604.158744287, 6377604.158744287, 6377604.158744287, 6377603.158744287, 6377604.158744287);
      LatLon latLon0 = new LatLon(datum0, 1793.650341891865, 1793.650341891865);
      LatLonHeight latLonHeight0 = latLon0.atHeight(300.8017);
      String string0 = latLonHeight0.toString();
      assertEquals("1793\u00B039'1\u00B7231\"N 1793\u00B039'1\u00B7231\"E \u2261 1793.650342\u00B0,1793.650342\u00B0 at 300.801700m", string0);
  }
}
