/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 11:09:31 GMT 2022
 */

package com.tomgibara.geo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tomgibara.geo.CartesianTransform;
import com.tomgibara.geo.Datum;
import com.tomgibara.geo.DatumTransforms;
import com.tomgibara.geo.Ellipsoid;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatumTransforms_ESTest extends DatumTransforms_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatumTransforms datumTransforms0 = new DatumTransforms();
      boolean boolean0 = datumTransforms0.isImmutable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatumTransforms datumTransforms0 = new DatumTransforms();
      // Undeclared exception!
      try { 
        Ellipsoid.withAxisAndInvFlat(1705.262, 1705.262);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.geo.GeoUtil$Canon", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatumTransforms datumTransforms0 = DatumTransforms.getDefaultTransforms();
      DatumTransforms datumTransforms1 = datumTransforms0.immutableCopy();
      assertSame(datumTransforms1, datumTransforms0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatumTransforms datumTransforms0 = new DatumTransforms();
      DatumTransforms datumTransforms1 = datumTransforms0.immutableCopy();
      assertTrue(datumTransforms1.isImmutable());
      assertFalse(datumTransforms0.isImmutable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatumTransforms datumTransforms0 = new DatumTransforms();
      // Undeclared exception!
      try { 
        Ellipsoid.withAxisAndInvFlat(1714.3630993977092, 1714.3630993977092);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.geo.GeoUtil$Canon", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatumTransforms datumTransforms0 = DatumTransforms.getDefaultTransforms();
      // Undeclared exception!
      try { 
        datumTransforms0.getTransform((Datum) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null target datum
         //
         verifyException("com.tomgibara.geo.DatumTransforms", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatumTransforms datumTransforms0 = new DatumTransforms();
      // Undeclared exception!
      try { 
        Ellipsoid.withAxisAndInvFlat(1714.961806, 1714.961806);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.geo.GeoUtil$Canon", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatumTransforms datumTransforms0 = new DatumTransforms();
      // Undeclared exception!
      try { 
        Ellipsoid.withAxisAndInvFlat(1715.0, 1715.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.geo.GeoUtil$Canon", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatumTransforms datumTransforms0 = new DatumTransforms();
      // Undeclared exception!
      try { 
        datumTransforms0.addTransform((Datum) null, (Datum) null, (CartesianTransform) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("com.tomgibara.geo.DatumTransforms", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatumTransforms datumTransforms0 = new DatumTransforms();
      // Undeclared exception!
      try { 
        Ellipsoid.withAxisAndInvFlat(5615.33541271734, 5615.33541271734);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.geo.GeoUtil$Canon", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatumTransforms datumTransforms0 = DatumTransforms.getDefaultTransforms();
      boolean boolean0 = datumTransforms0.isImmutable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatumTransforms.getDefaultTransforms();
      // Undeclared exception!
      try { 
        Ellipsoid.withAxisAndInvFlat(1714.3630993977092, 1714.3630993977092);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.geo.GeoUtil$Canon", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatumTransforms datumTransforms0 = DatumTransforms.getDefaultTransforms();
      DatumTransforms datumTransforms1 = datumTransforms0.mutableCopy();
      assertFalse(datumTransforms1.isImmutable());
  }
}
