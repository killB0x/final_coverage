/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 11:08:08 GMT 2022
 */

package com.tomgibara.geo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tomgibara.geo.Coordinate;
import com.tomgibara.geo.GeoUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GeoUtil_ESTest extends GeoUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(923);
      // Undeclared exception!
      try { 
        GeoUtil.canonical(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.geo.GeoUtil$Canon", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GeoUtil.hashCode((-242L));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordinate coordinate0 = Coordinate.LATITUDE;
      String string0 = GeoUtil.angleInMinutes(1.6666666666666667E-5, coordinate0);
      assertEquals("0\u00B00'0\u00B7060\"N", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordinate coordinate0 = Coordinate.LATITUDE;
      String string0 = GeoUtil.angleInMinutes(0.0, coordinate0);
      assertEquals("0\u00B0N", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoUtil.canonical((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.geo.GeoUtil$Canon", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = GeoUtil.arcSecsToRads(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = GeoUtil.arcSecsToRads((-859.684370035));
      assertEquals((-0.004167867440290008), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = GeoUtil.arcMinsToRads(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = GeoUtil.arcMinsToRads(3020.0943534271);
      assertEquals(0.8785098364698698, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = GeoUtil.isCoordinate((-0.7501426633154537));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordinate coordinate0 = Coordinate.LONGITUDE;
      String string0 = GeoUtil.angleInMinutes(930.2, coordinate0);
      assertEquals("930\u00B012'E", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordinate coordinate0 = Coordinate.LONGITUDE;
      String string0 = GeoUtil.angleInMinutes(52.8458004, coordinate0);
      assertEquals("52\u00B050'44\u00B7881\"E", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordinate coordinate0 = Coordinate.LATITUDE;
      String string0 = GeoUtil.angleInMinutes((-216.1), coordinate0);
      assertEquals("216\u00B05'59\u00B71000\"S", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordinate coordinate0 = Coordinate.LONGITUDE;
      String string0 = GeoUtil.angleInMinutes((-1910.14), coordinate0);
      assertEquals("1910\u00B08'24\"W", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coordinate coordinate0 = Coordinate.ELEVATION;
      // Undeclared exception!
      try { 
        GeoUtil.angleInMinutes(5.712970839775968, coordinate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elevation not angular
         //
         verifyException("com.tomgibara.geo.GeoUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoUtil.angleInMinutes((-0.7295038202405374), (Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.geo.GeoUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GeoUtil geoUtil0 = new GeoUtil();
      // Undeclared exception!
      try { 
        GeoUtil.canonical((Object) geoUtil0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.geo.GeoUtil$Canon", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = GeoUtil.arcSecsToRads(265.02079);
      assertEquals(0.0012848570477045729, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = GeoUtil.arcMinsToRads((-52L));
      assertEquals((-0.015126186850617522), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GeoUtil.hashCode(3600.0);
  }
}
