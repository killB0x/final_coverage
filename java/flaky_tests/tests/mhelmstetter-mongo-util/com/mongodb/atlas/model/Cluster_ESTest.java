/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 12:51:51 GMT 2022
 */

package com.mongodb.atlas.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.atlas.model.Cluster;
import com.mongodb.atlas.model.ProviderSettings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Cluster_ESTest extends Cluster_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setStateName("");
      String string0 = cluster0.getStateName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Integer integer0 = new Integer(1265);
      cluster0.setReplicationFactor(integer0);
      Integer integer1 = cluster0.getReplicationFactor();
      assertEquals(1265, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Integer integer0 = Integer.getInteger("t.(E7zbx_l)bm Zw", (-1));
      cluster0.setReplicationFactor(integer0);
      Integer integer1 = cluster0.getReplicationFactor();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      ProviderSettings providerSettings0 = new ProviderSettings();
      cluster0.setProviderSettings(providerSettings0);
      ProviderSettings providerSettings1 = cluster0.getProviderSettings();
      assertNull(providerSettings1.getInstanceSizeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Boolean boolean0 = Boolean.TRUE;
      cluster0.setPaused(boolean0);
      Boolean boolean1 = cluster0.getPaused();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Boolean boolean0 = Boolean.FALSE;
      cluster0.setPaused(boolean0);
      Boolean boolean1 = cluster0.getPaused();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Integer integer0 = Integer.getInteger((String) null, 0);
      cluster0.setNumShards(integer0);
      Integer integer1 = cluster0.getNumShards();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Integer integer0 = new Integer(1);
      cluster0.setNumShards(integer0);
      Integer integer1 = cluster0.getNumShards();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Integer integer0 = new Integer((-867));
      cluster0.setNumShards(integer0);
      Integer integer1 = cluster0.getNumShards();
      assertEquals((-867), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setName("2pey{e\"@={I");
      String string0 = cluster0.getName();
      assertEquals("2pey{e\"@={I", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setMongoURIWithOptions("v5kH");
      String string0 = cluster0.getMongoURIWithOptions();
      assertEquals("v5kH", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setMongoURIUpdated("AI_j=Y50hy[zbc");
      String string0 = cluster0.getMongoURIUpdated();
      assertEquals("AI_j=Y50hy[zbc", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setMongoURIUpdated("");
      String string0 = cluster0.getMongoURIUpdated();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setMongoURI("}h<#(f");
      String string0 = cluster0.getMongoURI();
      assertEquals("}h<#(f", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setMongoDBVersion("}h<#(f");
      String string0 = cluster0.getMongoDBVersion();
      assertEquals("}h<#(f", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setMongoDBVersion("");
      String string0 = cluster0.getMongoDBVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setGroupId("#W6Sa*y`B>W[{p");
      String string0 = cluster0.getGroupId();
      assertEquals("#W6Sa*y`B>W[{p", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setEncryptionAtRestProvider("]");
      String string0 = cluster0.getEncryptionAtRestProvider();
      assertEquals("]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Double double0 = new Double(0.0);
      cluster0.setDiskSizeGB(double0);
      Double double1 = cluster0.getDiskSizeGB();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Double double0 = new Double(769.0);
      cluster0.setDiskSizeGB(double0);
      Double double1 = cluster0.getDiskSizeGB();
      assertEquals(769.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setClusterType("edLCr6-w$Y{l+-qXLg");
      String string0 = cluster0.getClusterType();
      assertEquals("edLCr6-w$Y{l+-qXLg", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setClusterType("");
      String string0 = cluster0.getClusterType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Boolean boolean0 = Boolean.TRUE;
      cluster0.setBackupEnabled(boolean0);
      Boolean boolean1 = cluster0.getBackupEnabled();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Boolean boolean0 = Boolean.FALSE;
      cluster0.setBackupEnabled(boolean0);
      Boolean boolean1 = cluster0.getBackupEnabled();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Cluster cluster1 = new Cluster();
      // Undeclared exception!
      try { 
        cluster0.equals(cluster1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/builder/EqualsBuilder
         //
         verifyException("com.mongodb.atlas.model.Cluster", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      boolean boolean0 = cluster0.equals(cluster0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      boolean boolean0 = cluster0.equals("Cluster [, diskSizeGB=null, mongoDBVersion=null, name=null, null]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Integer integer0 = cluster0.getNumShards();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setMongoURIWithOptions("");
      String string0 = cluster0.getMongoURIWithOptions();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      String string0 = cluster0.getMongoURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      String string0 = cluster0.getGroupId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      String string0 = cluster0.getStateName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Integer integer0 = new Integer(0);
      cluster0.setReplicationFactor(integer0);
      Integer integer1 = cluster0.getReplicationFactor();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setName("");
      String string0 = cluster0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      String string0 = cluster0.getClusterType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      String string0 = cluster0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      String string0 = cluster0.toString();
      assertEquals("Cluster [, diskSizeGB=null, mongoDBVersion=null, name=null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Boolean boolean0 = cluster0.getBackupEnabled();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      String string0 = cluster0.getMongoDBVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setGroupId("");
      String string0 = cluster0.getGroupId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Boolean boolean0 = cluster0.getPaused();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setEncryptionAtRestProvider("");
      String string0 = cluster0.getEncryptionAtRestProvider();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      String string0 = cluster0.getMongoURIUpdated();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setStateName("Cluster [, diskSizeGB=null, mongoDBVersion=null, name=null, null]");
      String string0 = cluster0.getStateName();
      assertEquals("Cluster [, diskSizeGB=null, mongoDBVersion=null, name=null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      String string0 = cluster0.getEncryptionAtRestProvider();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Double double0 = new Double((-2401.366));
      cluster0.setDiskSizeGB(double0);
      Double double1 = cluster0.getDiskSizeGB();
      assertEquals((-2401.366), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      String string0 = cluster0.getMongoURIWithOptions();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Integer integer0 = cluster0.getReplicationFactor();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      Double double0 = cluster0.getDiskSizeGB();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      ProviderSettings providerSettings0 = cluster0.getProviderSettings();
      assertNull(providerSettings0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      // Undeclared exception!
      try { 
        cluster0.hashCode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/builder/HashCodeBuilder
         //
         verifyException("com.mongodb.atlas.model.Cluster", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setMongoURI("");
      String string0 = cluster0.getMongoURI();
      assertEquals("", string0);
  }
}
