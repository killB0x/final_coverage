/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 12:29:03 GMT 2022
 */

package com.mongodb.atlas.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mongodb.atlas.model.AWSInstanceSize;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AWSInstanceSize_ESTest extends AWSInstanceSize_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.R400;
      int int0 = aWSInstanceSize0.getScaledIOPS(32000, 32000, 0.0, false);
      assertEquals(30, aWSInstanceSize0.getMaxEBSIOPSPerGB());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.R400;
      int int0 = aWSInstanceSize0.getScaledIOPS(0, 617.032623402412, 2616.1884809, false);
      assertEquals(10000, aWSInstanceSize0.getMaxEBSStandardIOPS());
      assertEquals(30, aWSInstanceSize0.getMaxEBSIOPSPerGB());
      assertEquals(7848, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M100;
      int int0 = aWSInstanceSize0.getScaledIOPS(8000, 512.0, 512.0, true);
      assertEquals(10000, aWSInstanceSize0.getMaxEBSStandardIOPS());
      assertEquals(30, aWSInstanceSize0.getMaxEBSIOPSPerGB());
      assertEquals(3, aWSInstanceSize0.getMinEBSIOPSPerGB());
      assertEquals(8000, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M20;
      int int0 = aWSInstanceSize0.getScaledIOPS(2920, 2920, 0.0, false);
      assertEquals(100, int0);
      assertEquals(3000, aWSInstanceSize0.getMaxEBSStandardIOPS());
      assertEquals(3, aWSInstanceSize0.getMinEBSIOPSPerGB());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AWSInstanceSize[] aWSInstanceSizeArray0 = AWSInstanceSize.values();
      assertEquals(22, aWSInstanceSizeArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.valueOf("M400_NVME");
      assertEquals(8, aWSInstanceSize0.getNumDataDisks());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.valueOf("R40");
      assertEquals(0, aWSInstanceSize0.getDiskToRamRatio());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.valueOf("M10");
      assertEquals(AWSInstanceSize.M10, aWSInstanceSize0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M60;
      boolean boolean0 = aWSInstanceSize0.isNVMe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M400_NVME;
      boolean boolean0 = aWSInstanceSize0.isMetal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M60_NVME;
      boolean boolean0 = aWSInstanceSize0.isLowCPU();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M60_NVME;
      int[] intArray0 = aWSInstanceSize0.getStorageOptionsGB();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.R40;
      int int0 = aWSInstanceSize0.getScaledIOPS(700, 700, (-1.0), true);
      assertEquals(3, aWSInstanceSize0.getMinEBSIOPSPerGB());
      assertEquals(3000, aWSInstanceSize0.getMaxEBSStandardIOPS());
      assertEquals((-30), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M40;
      int int0 = aWSInstanceSize0.getMidIOPS((-1349.78603986972));
      assertEquals(3, aWSInstanceSize0.getMinEBSIOPSPerGB());
      assertEquals(6000, aWSInstanceSize0.getMaxEBSStandardIOPS());
      assertEquals((-20185), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.R80;
      int int0 = aWSInstanceSize0.getMaxIOPS(154.0);
      assertEquals(4620, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.R40;
      int int0 = aWSInstanceSize0.getMaxIOPS((-470.4836));
      assertEquals((-14100), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M10;
      int int0 = aWSInstanceSize0.getMaxEBSIOPS();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M140;
      String string0 = aWSInstanceSize0.getHighCPUEquivalent();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M10;
      int int0 = aWSInstanceSize0.getMaxIOPS(0.0);
      assertEquals(30, aWSInstanceSize0.getMaxEBSIOPSPerGB());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.R400;
      int int0 = aWSInstanceSize0.getMinEBSIOPSPerGB();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.R60;
      int int0 = aWSInstanceSize0.getMinEBSIOPS((-2269.125950621));
      assertEquals(100, int0);
      assertEquals(30, aWSInstanceSize0.getMaxEBSIOPSPerGB());
      assertEquals(3, aWSInstanceSize0.getMinEBSIOPSPerGB());
      assertEquals(10000, aWSInstanceSize0.getMaxEBSStandardIOPS());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M50;
      int int0 = aWSInstanceSize0.getMaxEBSStandardIOPS();
      assertEquals(8000, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M80_NVME;
      int int0 = aWSInstanceSize0.getMaxEBSIOPSPerGB();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.R40;
      int int0 = aWSInstanceSize0.getScaledIOPS(80, 2.0, 74.9579792746, false);
      assertEquals(3000, aWSInstanceSize0.getMaxEBSStandardIOPS());
      assertEquals(1221, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M30;
      int int0 = aWSInstanceSize0.getScaledIOPS(3600, 590.0522, 1256.1793434023, true);
      assertEquals(3600, int0);
      assertEquals(30, aWSInstanceSize0.getMaxEBSIOPSPerGB());
      assertEquals(3600, aWSInstanceSize0.getMaxEBSStandardIOPS());
      assertEquals(3, aWSInstanceSize0.getMinEBSIOPSPerGB());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M30;
      int int0 = aWSInstanceSize0.getScaledIOPS(1, 1, 0.0, true);
      assertEquals(100, int0);
      assertEquals(3600, aWSInstanceSize0.getMaxEBSStandardIOPS());
      assertEquals(3, aWSInstanceSize0.getMinEBSIOPSPerGB());
      assertEquals(30, aWSInstanceSize0.getMaxEBSIOPSPerGB());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M20;
      int int0 = aWSInstanceSize0.getScaledIOPS((-1087), (-1087), (-1087), false);
      assertEquals(3, aWSInstanceSize0.getMinEBSIOPSPerGB());
      assertEquals(100, int0);
      assertEquals(3000, aWSInstanceSize0.getMaxEBSStandardIOPS());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M10;
      int int0 = aWSInstanceSize0.getScaledIOPS(0, 0, 0, true);
      assertEquals(3000, aWSInstanceSize0.getMaxEBSStandardIOPS());
      assertEquals(100, int0);
      assertEquals(3, aWSInstanceSize0.getMinEBSIOPSPerGB());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M20;
      int int0 = aWSInstanceSize0.getMidIOPS(0.0);
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M10;
      boolean boolean0 = aWSInstanceSize0.isMetal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M400_NVME;
      Optional<Integer> optional0 = aWSInstanceSize0.getMaxSSDReadIOPS();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M400_NVME;
      String string0 = aWSInstanceSize0.getName();
      assertEquals("M400_NVME", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M400_NVME;
      Optional<String> optional0 = aWSInstanceSize0.getWiredTigerEngineConfigString();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M400_NVME;
      String string0 = aWSInstanceSize0.getPrintableName();
      assertEquals("M400_NVME", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M400_NVME;
      String string0 = aWSInstanceSize0.getHighCPUEquivalent();
      assertEquals("M400", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M400_NVME;
      Optional<Integer> optional0 = aWSInstanceSize0.getElectionTimeoutMillis();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M30;
      Optional<Integer> optional0 = aWSInstanceSize0.getBackupDiskSizeGB();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M30;
      Optional<Integer> optional0 = aWSInstanceSize0.getMaxSSDWriteIOPS();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M20;
      double double0 = aWSInstanceSize0.getRamSizeGB();
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M100;
      int int0 = aWSInstanceSize0.getDiskToRamRatio();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M30;
      int int0 = aWSInstanceSize0.getMidIOPS();
      assertEquals(1850, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M30;
      int[] intArray0 = aWSInstanceSize0.getStorageOptionsGB();
      assertArrayEquals(new int[] {10, 20, 40, 80, 160, 320, 1024, 4096}, intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Optional<AWSInstanceSize> optional0 = AWSInstanceSize.findByName("B=t:0ZvvP[){yX5S");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M400_NVME;
      Optional<Integer> optional0 = aWSInstanceSize0.getRaidEndMiB();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M30;
      int int0 = aWSInstanceSize0.getMinEBSIOPS();
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M10;
      int int0 = aWSInstanceSize0.getDefaultDiskSizeGB();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M400_NVME;
      Optional<Integer> optional0 = aWSInstanceSize0.getMaxIncomingConnections();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M30;
      Optional<Integer> optional0 = aWSInstanceSize0.getBackupDiskIOPS();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M400_NVME;
      int int0 = aWSInstanceSize0.getMaxCloudProviderDiskSizeGB();
      assertEquals(4096, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M60_NVME;
      boolean boolean0 = aWSInstanceSize0.isNVMe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M30;
      double double0 = aWSInstanceSize0.getNumCPUs();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M30;
      int int0 = aWSInstanceSize0.getNumDataDisks();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M400_NVME;
      int int0 = aWSInstanceSize0.getMaxEBSIOPS();
      assertEquals(18000, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.R40;
      boolean boolean0 = aWSInstanceSize0.isLowCPU();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AWSInstanceSize aWSInstanceSize0 = AWSInstanceSize.M400_NVME;
      int int0 = aWSInstanceSize0.getScaledIOPS(3234, 8.0, 256.0, false);
      assertEquals(30, aWSInstanceSize0.getMaxEBSIOPSPerGB());
      assertEquals(768, int0);
      assertEquals(18000, aWSInstanceSize0.getMaxEBSStandardIOPS());
  }
}
