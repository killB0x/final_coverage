/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 12:23:56 GMT 2022
 */

package com.mongodb.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.util.AtomicFileWriter;
import java.net.URI;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicFileWriter_ESTest extends AtomicFileWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      AtomicFileWriter atomicFileWriter0 = null;
      try {
        atomicFileWriter0 = new AtomicFileWriter((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.util.AtomicFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.aFileURI;
          MockFile mockFile0 = new MockFile(uRI0);
          AtomicFileWriter atomicFileWriter0 = null;
          try {
            atomicFileWriter0 = new AtomicFileWriter(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:752)
             // java.base/sun.nio.fs.UnixPath.checkWrite(UnixPath.java:824)
             // java.base/sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:381)
             // java.base/java.nio.file.Files.createDirectory(Files.java:690)
             // java.base/java.nio.file.Files.createAndCheckIsDirectory(Files.java:797)
             // java.base/java.nio.file.Files.createDirectories(Files.java:743)
             // com.mongodb.util.AtomicFileWriter.<init>(AtomicFileWriter.java:118)
             // com.mongodb.util.AtomicFileWriter.<init>(AtomicFileWriter.java:93)
             // com.mongodb.util.AtomicFileWriter.<init>(AtomicFileWriter.java:64)
             // jdk.internal.reflect.GeneratedConstructorAccessor51.newInstance(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("1-Uf", "1-Uf");
          AtomicFileWriter atomicFileWriter0 = null;
          try {
            atomicFileWriter0 = new AtomicFileWriter(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/user/1-Uf\" \"write\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:752)
             // java.base/sun.nio.fs.UnixPath.checkWrite(UnixPath.java:824)
             // java.base/sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:381)
             // java.base/java.nio.file.Files.createDirectory(Files.java:690)
             // java.base/java.nio.file.Files.createAndCheckIsDirectory(Files.java:797)
             // java.base/java.nio.file.Files.createDirectories(Files.java:743)
             // com.mongodb.util.AtomicFileWriter.<init>(AtomicFileWriter.java:118)
             // com.mongodb.util.AtomicFileWriter.<init>(AtomicFileWriter.java:93)
             // com.mongodb.util.AtomicFileWriter.<init>(AtomicFileWriter.java:64)
             // jdk.internal.reflect.GeneratedConstructorAccessor51.newInstance(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Failed to create a temporary file in ");
      AtomicFileWriter atomicFileWriter0 = null;
      try {
        atomicFileWriter0 = new AtomicFileWriter(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AtomicFileWriter atomicFileWriter0 = null;
      try {
        atomicFileWriter0 = new AtomicFileWriter((Path) null, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset is null
         //
         verifyException("com.mongodb.util.AtomicFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AtomicFileWriter atomicFileWriter0 = null;
      try {
        atomicFileWriter0 = new AtomicFileWriter((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.util.AtomicFileWriter", e);
      }
  }
}
