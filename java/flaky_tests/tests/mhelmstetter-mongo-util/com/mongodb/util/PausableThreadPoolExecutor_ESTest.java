/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 12:48:20 GMT 2022
 */

package com.mongodb.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.util.PausableThreadPoolExecutor;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PausableThreadPoolExecutor_ESTest extends PausableThreadPoolExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      PausableThreadPoolExecutor pausableThreadPoolExecutor0 = new PausableThreadPoolExecutor(163, 163, 4885L, timeUnit0, linkedBlockingDeque0, threadPoolExecutor_AbortPolicy0);
      pausableThreadPoolExecutor0.pause();
      boolean boolean0 = pausableThreadPoolExecutor0.isPaused();
      assertFalse(pausableThreadPoolExecutor0.isRunning());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      PausableThreadPoolExecutor pausableThreadPoolExecutor0 = null;
      try {
        pausableThreadPoolExecutor0 = new PausableThreadPoolExecutor(282, 2424, 233L, timeUnit0, (BlockingQueue<Runnable>) null, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      PausableThreadPoolExecutor pausableThreadPoolExecutor0 = null;
      try {
        pausableThreadPoolExecutor0 = new PausableThreadPoolExecutor(2631, (-2058), (-2058), timeUnit0, linkedBlockingQueue0, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      PausableThreadPoolExecutor pausableThreadPoolExecutor0 = null;
      try {
        pausableThreadPoolExecutor0 = new PausableThreadPoolExecutor(2925, (-2197), 952L, timeUnit0, linkedTransferQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      PausableThreadPoolExecutor pausableThreadPoolExecutor0 = new PausableThreadPoolExecutor(2930, 60000, 60000, timeUnit0, linkedTransferQueue0, threadPoolExecutor_AbortPolicy0);
      boolean boolean0 = pausableThreadPoolExecutor0.isRunning();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      PausableThreadPoolExecutor pausableThreadPoolExecutor0 = new PausableThreadPoolExecutor(2631, 2631, 0L, timeUnit0, linkedBlockingQueue0);
      MockThread mockThread0 = new MockThread("Z{q~|q:<");
      pausableThreadPoolExecutor0.beforeExecute(mockThread0, mockThread0);
      assertTrue(pausableThreadPoolExecutor0.isRunning());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      PausableThreadPoolExecutor pausableThreadPoolExecutor0 = new PausableThreadPoolExecutor(163, 163, 4885L, timeUnit0, linkedBlockingDeque0, threadPoolExecutor_AbortPolicy0);
      pausableThreadPoolExecutor0.pause();
      boolean boolean0 = pausableThreadPoolExecutor0.isRunning();
      assertTrue(pausableThreadPoolExecutor0.isPaused());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      PausableThreadPoolExecutor pausableThreadPoolExecutor0 = new PausableThreadPoolExecutor(2631, 2631, 0L, timeUnit0, linkedBlockingQueue0);
      boolean boolean0 = pausableThreadPoolExecutor0.isPaused();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      PausableThreadPoolExecutor pausableThreadPoolExecutor0 = new PausableThreadPoolExecutor(2631, 2631, 0L, timeUnit0, linkedBlockingQueue0);
      pausableThreadPoolExecutor0.resume();
      assertFalse(pausableThreadPoolExecutor0.isPaused());
  }
}
