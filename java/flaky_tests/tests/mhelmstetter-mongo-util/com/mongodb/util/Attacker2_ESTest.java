/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 13:00:59 GMT 2022
 */

package com.mongodb.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.util.Attacker2;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attacker2_ESTest extends Attacker2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attacker2.DdosThread attacker2_DdosThread0 = new Attacker2.DdosThread(3467);
      assertNotNull(attacker2_DdosThread0);
      
      MockThread.dumpStack();
      attacker2_DdosThread0.run();
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      
      Thread[] threadArray0 = new Thread[3];
      threadArray0[0] = (Thread) attacker2_DdosThread0;
      threadArray0[1] = (Thread) attacker2_DdosThread0;
      threadArray0[2] = (Thread) attacker2_DdosThread0;
      int int0 = MockThread.enumerate(threadArray0);
      assertEquals(1, int0);
      assertEquals(3, threadArray0.length);
      
      attacker2_DdosThread0.attack();
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      
      attacker2_DdosThread0.run();
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      
      StackTraceElement[] stackTraceElementArray0 = attacker2_DdosThread0.getStackTrace();
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      attacker2_DdosThread0.run();
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      
      String[] stringArray0 = null;
      try { 
        Attacker2.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.util.Attacker2", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attacker2.DdosThread attacker2_DdosThread0 = new Attacker2.DdosThread(902);
      assertNotNull(attacker2_DdosThread0);
      
      Thread[] threadArray0 = new Thread[2];
      attacker2_DdosThread0.attack();
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      
      threadArray0[0] = (Thread) attacker2_DdosThread0;
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertEquals(16, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      threadArray0[1] = (Thread) attacker2_DdosThread0;
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      attacker2_DdosThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      
      int int0 = MockThread.enumerate(threadArray0);
      assertEquals(1, int0);
      assertEquals(2, threadArray0.length);
      
      MockThread.dumpStack();
      attacker2_DdosThread0.attack();
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      
      attacker2_DdosThread0.attack();
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 27017);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      Attacker2.DdosThread attacker2_DdosThread1 = new Attacker2.DdosThread(0);
      assertNotNull(attacker2_DdosThread1);
      assertFalse(attacker2_DdosThread1.equals((Object)attacker2_DdosThread0));
      
      attacker2_DdosThread1.attack();
      assertNotSame(attacker2_DdosThread1, attacker2_DdosThread0);
      assertFalse(attacker2_DdosThread1.isInterrupted());
      assertEquals(0, attacker2_DdosThread1.countStackFrames());
      assertFalse(attacker2_DdosThread1.isDaemon());
      assertFalse(attacker2_DdosThread1.equals((Object)attacker2_DdosThread0));
      
      attacker2_DdosThread1.attack();
      assertNotSame(attacker2_DdosThread1, attacker2_DdosThread0);
      assertFalse(attacker2_DdosThread1.isInterrupted());
      assertEquals(0, attacker2_DdosThread1.countStackFrames());
      assertFalse(attacker2_DdosThread1.isDaemon());
      assertFalse(attacker2_DdosThread1.equals((Object)attacker2_DdosThread0));
      
      Attacker2.DdosThread attacker2_DdosThread2 = new Attacker2.DdosThread(0);
      assertNotNull(attacker2_DdosThread2);
      assertFalse(attacker2_DdosThread2.equals((Object)attacker2_DdosThread0));
      assertFalse(attacker2_DdosThread2.equals((Object)attacker2_DdosThread1));
      
      Attacker2.DdosThread attacker2_DdosThread3 = new Attacker2.DdosThread(0);
      assertNotNull(attacker2_DdosThread3);
      assertFalse(attacker2_DdosThread3.equals((Object)attacker2_DdosThread2));
      assertFalse(attacker2_DdosThread3.equals((Object)attacker2_DdosThread1));
      assertFalse(attacker2_DdosThread3.equals((Object)attacker2_DdosThread0));
      
      Attacker2.DdosThread attacker2_DdosThread4 = new Attacker2.DdosThread(0);
      assertNotNull(attacker2_DdosThread4);
      assertFalse(attacker2_DdosThread4.equals((Object)attacker2_DdosThread2));
      assertFalse(attacker2_DdosThread4.equals((Object)attacker2_DdosThread3));
      assertFalse(attacker2_DdosThread4.equals((Object)attacker2_DdosThread1));
      assertFalse(attacker2_DdosThread4.equals((Object)attacker2_DdosThread0));
      
      attacker2_DdosThread0.run();
      assertNotSame(attacker2_DdosThread0, attacker2_DdosThread3);
      assertNotSame(attacker2_DdosThread0, attacker2_DdosThread1);
      assertNotSame(attacker2_DdosThread0, attacker2_DdosThread2);
      assertNotSame(attacker2_DdosThread0, attacker2_DdosThread4);
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertFalse(attacker2_DdosThread0.equals((Object)attacker2_DdosThread3));
      assertFalse(attacker2_DdosThread0.equals((Object)attacker2_DdosThread1));
      assertFalse(attacker2_DdosThread0.equals((Object)attacker2_DdosThread2));
      assertFalse(attacker2_DdosThread0.equals((Object)attacker2_DdosThread4));
      
      Attacker2 attacker2_0 = new Attacker2();
      assertNotNull(attacker2_0);
      
      attacker2_DdosThread0.attack();
      assertNotSame(attacker2_DdosThread0, attacker2_DdosThread3);
      assertNotSame(attacker2_DdosThread0, attacker2_DdosThread1);
      assertNotSame(attacker2_DdosThread0, attacker2_DdosThread2);
      assertNotSame(attacker2_DdosThread0, attacker2_DdosThread4);
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertFalse(attacker2_DdosThread0.equals((Object)attacker2_DdosThread3));
      assertFalse(attacker2_DdosThread0.equals((Object)attacker2_DdosThread1));
      assertFalse(attacker2_DdosThread0.equals((Object)attacker2_DdosThread2));
      assertFalse(attacker2_DdosThread0.equals((Object)attacker2_DdosThread4));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "RJWn%;U;cg";
      stringArray0[3] = "";
      try { 
        Attacker2.main(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      try { 
        Attacker2.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("com.mongodb.util.Attacker2", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attacker2.DdosThread attacker2_DdosThread0 = new Attacker2.DdosThread(1442);
      assertNotNull(attacker2_DdosThread0);
      
      attacker2_DdosThread0.attack();
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "3";
      stringArray0[2] = "*ZLRw0OX*";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Attacker2.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "3";
      Attacker2.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attacker2 attacker2_0 = new Attacker2();
      assertNotNull(attacker2_0);
      
      Attacker2.DdosThread attacker2_DdosThread0 = new Attacker2.DdosThread(38);
      assertNotNull(attacker2_DdosThread0);
      
      attacker2_DdosThread0.run();
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertFalse(attacker2_DdosThread0.isInterrupted());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attacker2.DdosThread attacker2_DdosThread0 = new Attacker2.DdosThread(10);
      assertNotNull(attacker2_DdosThread0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      attacker2_DdosThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isInterrupted());
      
      Thread[] threadArray0 = new Thread[0];
      int int0 = MockThread.enumerate(threadArray0);
      assertEquals(0, int0);
      assertEquals(0, threadArray0.length);
      
      attacker2_DdosThread0.attack();
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isInterrupted());
      
      Attacker2 attacker2_0 = new Attacker2();
      assertNotNull(attacker2_0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "!~P;=0s-XB<Le'";
      stringArray0[5] = "51Wvj=11YC%`P";
      stringArray0[6] = "}";
      stringArray0[7] = "`2l,%";
      stringArray0[8] = "localhost";
      try { 
        Attacker2.main(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        Attacker2.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.util.Attacker2", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attacker2.DdosThread attacker2_DdosThread0 = new Attacker2.DdosThread(1);
      assertNotNull(attacker2_DdosThread0);
      
      StackTraceElement[] stackTraceElementArray0 = attacker2_DdosThread0.getStackTrace();
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      attacker2_DdosThread0.run();
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      
      Thread[] threadArray0 = new Thread[7];
      threadArray0[0] = (Thread) attacker2_DdosThread0;
      threadArray0[1] = (Thread) attacker2_DdosThread0;
      threadArray0[2] = (Thread) attacker2_DdosThread0;
      threadArray0[3] = (Thread) attacker2_DdosThread0;
      threadArray0[4] = (Thread) attacker2_DdosThread0;
      threadArray0[5] = (Thread) attacker2_DdosThread0;
      threadArray0[6] = (Thread) attacker2_DdosThread0;
      int int0 = MockThread.enumerate(threadArray0);
      assertEquals(1, int0);
      assertEquals(7, threadArray0.length);
      
      attacker2_DdosThread0.attack();
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      
      attacker2_DdosThread0.run();
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      
      StackTraceElement[] stackTraceElementArray1 = attacker2_DdosThread0.getStackTrace();
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      assertNotNull(stackTraceElementArray1);
      assertEquals(3, stackTraceElementArray1.length);
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      
      attacker2_DdosThread0.run();
      assertFalse(attacker2_DdosThread0.isInterrupted());
      assertEquals(0, attacker2_DdosThread0.countStackFrames());
      assertFalse(attacker2_DdosThread0.isDaemon());
      
      String[] stringArray0 = null;
      try { 
        Attacker2.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.util.Attacker2", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attacker2.DdosThread attacker2_DdosThread0 = new Attacker2.DdosThread(1439);
      attacker2_DdosThread0.attack();
      assertFalse(attacker2_DdosThread0.isDaemon());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attacker2.DdosThread attacker2_DdosThread0 = new Attacker2.DdosThread(10);
      attacker2_DdosThread0.attack();
      Attacker2.DdosThread attacker2_DdosThread1 = null;
      try {
        attacker2_DdosThread1 = new Attacker2.DdosThread((-883));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -883
         //
         verifyException("com.mongodb.util.Attacker2$DdosThread", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[5];
      try { 
        Attacker2.main(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      String string0 = "";
      stringArray0[1] = "";
      String string1 = "<fJ8l{1*qvPPWmf4K";
      stringArray0[2] = "<fJ8l{1*qvPPWmf4K";
      stringArray0[3] = "S>";
      stringArray0[4] = "^CI{epV";
      String string2 = "";
      stringArray0[5] = "";
      String string3 = "y";
      stringArray0[6] = "y";
      try { 
        Attacker2.main(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attacker2.DdosThread attacker2_DdosThread0 = null;
      try {
        attacker2_DdosThread0 = new Attacker2.DdosThread((-2145));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2145
         //
         verifyException("com.mongodb.util.Attacker2$DdosThread", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attacker2.DdosThread attacker2_DdosThread0 = new Attacker2.DdosThread(874);
  }
}
