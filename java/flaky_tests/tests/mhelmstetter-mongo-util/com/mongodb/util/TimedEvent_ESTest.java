/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 12:38:26 GMT 2022
 */

package com.mongodb.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.util.TimedEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimedEvent_ESTest extends TimedEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      timedEvent0.incrementError((-309L));
      boolean boolean0 = timedEvent0.isError();
      assertEquals((-309L), timedEvent0.getErrorCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      System.setCurrentTimeMillis((-867L));
      // Undeclared exception!
      try { 
        timedEvent0.stop();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      timedEvent0.increment(1392409281320000L);
      // Undeclared exception!
      try { 
        timedEvent0.stop();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      System.setCurrentTimeMillis(1392409281320000L);
      timedEvent0.stop(false);
      assertEquals(1391016872038680000L, timedEvent0.getDuration());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TimedEvent timedEvent0 = new TimedEvent();
      timedEvent0.getStart();
      assertEquals(0L, timedEvent0.getCount());
      assertEquals(0L, timedEvent0.getBytes());
      assertEquals(0L, timedEvent0.getErrorCount());
      assertEquals(0L, timedEvent0.getDuration());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-394L));
      TimedEvent timedEvent0 = new TimedEvent();
      long long0 = timedEvent0.getStart();
      assertEquals(0L, timedEvent0.getErrorCount());
      assertEquals(0L, timedEvent0.getDuration());
      assertEquals(0L, timedEvent0.getCount());
      assertEquals(0L, timedEvent0.getBytes());
      assertEquals((-394000L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      timedEvent0.incrementError(879L);
      long long0 = timedEvent0.getErrorCount();
      assertEquals(879L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      timedEvent0.incrementError((-1669L));
      long long0 = timedEvent0.getErrorCount();
      assertEquals((-1669L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      System.setCurrentTimeMillis(1084L);
      long long0 = timedEvent0.getDuration();
      assertEquals((-1392409280236000L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      timedEvent0.increment(305L);
      long long0 = timedEvent0.getBytes();
      assertEquals(305L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      System.setCurrentTimeMillis(1392409281320000L);
      long long0 = timedEvent0.stop((-41L), false);
      assertEquals(1391016872038680000L, timedEvent0.getDuration());
      assertEquals(1391016872038680000L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      System.setCurrentTimeMillis(1392409281320000L);
      long long0 = timedEvent0.stop(0L, false);
      assertEquals(1391016872038680000L, timedEvent0.getDuration());
      assertEquals(1391016872038680000L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      System.setCurrentTimeMillis(1392409281320000L);
      timedEvent0.stop();
      long long0 = timedEvent0.stop(990L, true);
      assertEquals(1391016872038680000L, timedEvent0.getDuration());
      assertEquals(1391016872038680000L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      // Undeclared exception!
      try { 
        timedEvent0.stop(0L, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      timedEvent0.incrementError(2396L);
      boolean boolean0 = timedEvent0.isError();
      assertEquals(2396L, timedEvent0.getErrorCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      boolean boolean0 = timedEvent0.isError();
      assertEquals(0L, timedEvent0.getDuration());
      assertEquals(0L, timedEvent0.getErrorCount());
      assertEquals(0L, timedEvent0.getBytes());
      assertEquals(0L, timedEvent0.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      long long0 = timedEvent0.getDuration();
      assertEquals(0L, timedEvent0.getErrorCount());
      assertEquals(0L, timedEvent0.getBytes());
      assertEquals(0L, long0);
      assertEquals(0L, timedEvent0.getCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      System.setCurrentTimeMillis(1392409281320000L);
      timedEvent0.stop();
      long long0 = timedEvent0.getDuration();
      assertEquals(1391016872038680000L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      System.setCurrentTimeMillis((-1393801688405320000L));
      long long0 = timedEvent0.stop((-1393801688405320000L));
      assertEquals(8149468787324602816L, timedEvent0.getDuration());
      assertEquals(8149468787324602816L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      timedEvent0.increment((-1426L));
      // Undeclared exception!
      try { 
        timedEvent0.stop();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      long long0 = timedEvent0.getStart();
      assertEquals(0L, timedEvent0.getErrorCount());
      assertEquals(0L, timedEvent0.getCount());
      assertEquals(0L, timedEvent0.getBytes());
      assertEquals(0L, timedEvent0.getDuration());
      assertEquals(1392409281320000L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      timedEvent0.increment((-309L));
      long long0 = timedEvent0.getBytes();
      assertEquals((-309L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      timedEvent0.setCount((-1669L));
      long long0 = timedEvent0.getCount();
      assertEquals((-1669L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      long long0 = timedEvent0.getCount();
      assertEquals(0L, timedEvent0.getErrorCount());
      assertEquals(0L, long0);
      assertEquals(0L, timedEvent0.getBytes());
      assertEquals(0L, timedEvent0.getDuration());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      timedEvent0.incrementCount();
      long long0 = timedEvent0.getCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      timedEvent0.incrementCount(1392409281320000L);
      assertEquals(1392409281320000L, timedEvent0.getCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      // Undeclared exception!
      try { 
        timedEvent0.stop((-1393801688405320000L));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      long long0 = timedEvent0.getBytes();
      assertEquals(0L, long0);
      assertEquals(0L, timedEvent0.getCount());
      assertEquals(0L, timedEvent0.getDuration());
      assertEquals(0L, timedEvent0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      // Undeclared exception!
      try { 
        timedEvent0.stop(false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimedEvent timedEvent0 = new TimedEvent();
      long long0 = timedEvent0.getErrorCount();
      assertEquals(0L, timedEvent0.getCount());
      assertEquals(0L, long0);
      assertEquals(0L, timedEvent0.getBytes());
      assertEquals(0L, timedEvent0.getDuration());
  }
}
