/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 12:57:14 GMT 2022
 */

package com.mongodb.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mongodb.util.Timer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Timer_ESTest extends Timer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Timer timer0 = new Timer();
      long long0 = timer0.stop();
      assertEquals(0L, long0);
      
      String string0 = timer0.getProgressMessage();
      assertEquals("0 tps", string0);
      assertEquals(0L, timer0.getErrorCount());
      assertEquals(0.0, timer0.getDurationSeconds(), 0.01);
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Timer timer0 = new Timer();
      long long0 = timer0.stop((-2784818562642577L));
      assertEquals((-4177227843962577L), long0);
      assertEquals(0L, timer0.getErrorCount());
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-4177227843960669L));
      Timer timer0 = new Timer();
      timer0.stop((-1790L));
      long long0 = timer0.stop();
      assertEquals(4177227843960667210L, timer0.getDuration());
      assertEquals(4177227843960667210L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Timer timer0 = new Timer();
      System.setCurrentTimeMillis(2990L);
      long long0 = timer0.stop();
      assertEquals((-1392409.27833), timer0.getDurationSeconds(), 0.01);
      assertEquals((-1392409278330000L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Timer timer0 = new Timer();
      timer0.getStart();
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
      assertEquals(0L, timer0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-4177227843960669L));
      Timer timer0 = new Timer();
      long long0 = timer0.getStart();
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
      assertEquals(0L, timer0.getErrorCount());
      assertEquals((-4177227843960669000L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Timer timer0 = new Timer();
      System.setCurrentTimeMillis((-1L));
      double double0 = timer0.getEventsPerSecond();
      assertEquals((-1.392409281321E9), timer0.getDurationMilliseconds(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Timer timer0 = new Timer();
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
      
      timer0.incrementEventCount();
      double double0 = timer0.getEventsPerSecond();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Timer timer0 = new Timer();
      timer0.incrementEventCount();
      System.setCurrentTimeMillis(1000);
      double double0 = timer0.getEventsPerSecond();
      assertEquals((-1.39240928032E9), timer0.getDurationMilliseconds(), 0.01);
      assertEquals((-7.18179643107652E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-4177227843960669L));
      Timer timer0 = new Timer();
      timer0.stop((-1790L));
      double double0 = timer0.getDurationSeconds();
      assertEquals(4.177227843960667E12, timer0.getDurationMilliseconds(), 0.01);
      assertEquals(4.177227843960667E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Timer timer0 = new Timer();
      System.setCurrentTimeMillis(1000);
      double double0 = timer0.getDurationSeconds();
      assertEquals((-1.39240928032E9), timer0.getDurationMilliseconds(), 0.01);
      assertEquals((-1392409.28032), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-4177227843960669L));
      Timer timer0 = new Timer();
      timer0.stop((-1790L));
      double double0 = timer0.getDurationMilliseconds();
      assertEquals(4177227843960667210L, timer0.getDuration());
      assertEquals(4.177227843960667E12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Timer timer0 = new Timer();
      System.setCurrentTimeMillis(1424L);
      double double0 = timer0.getDurationMilliseconds();
      assertEquals((-1.392409279896E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Timer timer0 = new Timer();
      System.setCurrentTimeMillis(1000);
      long long0 = timer0.getDuration();
      assertEquals((-1.39240928032E9), timer0.getDurationMilliseconds(), 0.01);
      assertEquals((-1392409280320000L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis((-4177227843960669L));
      Timer timer0 = new Timer();
      timer0.stop((-1790L));
      long long0 = timer0.getDuration();
      assertEquals(4177227843960667210L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Timer timer0 = new Timer();
      long long0 = timer0.getDuration();
      assertEquals(0L, timer0.getErrorCount());
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Timer timer0 = new Timer();
      double double0 = timer0.getDurationSeconds();
      assertEquals(0L, timer0.getErrorCount());
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis((-4177227843960669L));
      Timer timer0 = new Timer();
      timer0.stop((-1790L));
      long long0 = timer0.stop((-1392409281319799L));
      assertEquals(4.177227843960667E12, timer0.getDurationMilliseconds(), 0.01);
      assertEquals(4177227843960667210L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Timer timer0 = new Timer();
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
      
      timer0.incrementEventCount();
      timer0.getEventCount();
      assertEquals(0.0, timer0.getDurationSeconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Timer timer0 = new Timer();
      timer0.getEventCount();
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
      assertEquals(0L, timer0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Timer timer0 = new Timer();
      double double0 = timer0.getDurationMilliseconds();
      assertEquals(0L, timer0.getErrorCount());
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Timer timer0 = new Timer();
      timer0.incrementErrorCount();
      long long0 = timer0.getErrorCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Timer timer0 = new Timer();
      long long0 = timer0.getStart();
      assertEquals(0L, timer0.getErrorCount());
      assertEquals(1392409281320000L, long0);
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Timer timer0 = new Timer();
      long long0 = timer0.getErrorCount();
      assertEquals(0L, long0);
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Timer timer0 = new Timer();
      long long0 = timer0.stop();
      assertEquals(0L, long0);
      
      long long1 = timer0.stop(0L);
      assertEquals(Double.NaN, timer0.getEventsPerSecond(), 0.01);
      assertEquals(0L, long1);
      assertEquals(0L, timer0.getErrorCount());
  }
}
