/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 12:40:22 GMT 2022
 */

package com.mongodb.diffutil;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.diffutil.Monitor;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Monitor_ESTest extends Monitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Monitor monitor0 = new Monitor((Thread) null);
      // Undeclared exception!
      try { 
        monitor0.halt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.diffutil.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockThread mockThread0 = new MockThread(" (");
      Monitor monitor0 = new Monitor(mockThread0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(500, 500, 500, timeUnit0, linkedBlockingQueue0, threadPoolExecutor_DiscardPolicy0);
      monitor0.setPool(threadPoolExecutor0);
      monitor0.halt();
      monitor0.halt();
      assertEquals(500, Monitor.sleepMillis);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockThread mockThread0 = new MockThread("error");
      Monitor monitor0 = new Monitor(mockThread0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(500, 1653, 1653, timeUnit0, linkedBlockingQueue0);
      monitor0.setPool(threadPoolExecutor0);
      monitor0.halt((Throwable) mockThrowable0);
      monitor0.halt((Throwable) mockThrowable0);
      assertEquals(500, Monitor.sleepMillis);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Monitor monitor0 = new Monitor((Thread) null);
      // Undeclared exception!
      try { 
        monitor0.incrementErrorCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.diffutil.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Monitor monitor0 = new Monitor((Thread) null);
      // Undeclared exception!
      try { 
        monitor0.incrementEventCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.diffutil.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Monitor monitor0 = new Monitor((Thread) null);
      monitor0.incrementSkipped("");
      assertFalse(monitor0.isInterrupted());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Monitor monitor0 = new Monitor((Thread) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        monitor0.halt((Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.diffutil.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Monitor monitor0 = new Monitor((Thread) null);
      ThreadPoolExecutor threadPoolExecutor0 = monitor0.getPool();
      assertNull(threadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Monitor monitor0 = new Monitor((Thread) null);
      // Undeclared exception!
      try { 
        monitor0.getEventCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.diffutil.Monitor", e);
      }
  }
}
