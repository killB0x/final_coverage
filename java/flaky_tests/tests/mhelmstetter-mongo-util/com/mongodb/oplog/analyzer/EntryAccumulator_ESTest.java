/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 12:56:03 GMT 2022
 */

package com.mongodb.oplog.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.oplog.analyzer.EntryAccumulator;
import com.mongodb.oplog.analyzer.OplogEntryKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EntryAccumulator_ESTest extends EntryAccumulator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("gjYFCaL", "com.mongodb.oplog.analyzer.EntryAccumulator", "com.mongodb.oplog.analyzer.EntryAccumulator");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution(3811L);
      entryAccumulator0.toString();
      assertEquals(3811L, entryAccumulator0.getTotal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("%-80s %5s %10d %10d %10d %10d %20d", "com.mongodb.oplog.analyzer.OplogEntryKey", "%-80s %5s %10d %10d %10d %10d %20d");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution(0L);
      entryAccumulator0.addExecution(1L);
      assertEquals(2L, entryAccumulator0.getCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("%-80s %5s %10d %10d %10d %10d %20d", "com.mongodb.oplog.analyzer.OplogEntryKey", "%-80s %5s %10d %10d %10d %10d %20d");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution(1L);
      entryAccumulator0.addExecution(0L);
      assertEquals(1L, entryAccumulator0.getTotal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("", "com.mongodb.oplog.analyzer.OplogEntryKey", "com.mongodb.oplog.analyzer.OplogEntryKey");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution(361L);
      long long0 = entryAccumulator0.getTotal();
      assertEquals(1L, entryAccumulator0.getCount());
      assertEquals(361L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey((String) null, (String) null, "#Utp%x<l");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution((-32L));
      long long0 = entryAccumulator0.getTotal();
      assertEquals(1L, entryAccumulator0.getCount());
      assertEquals((-32L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey((String) null, (String) null, "i'");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.getOp();
      assertEquals((-9223372036854775808L), entryAccumulator0.getMax());
      assertEquals(9223372036854775807L, entryAccumulator0.getMin());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("", "", "");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.getOp();
      assertEquals(9223372036854775807L, entryAccumulator0.getMin());
      assertEquals((-9223372036854775808L), entryAccumulator0.getMax());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey((String) null, "=$!", (String) null);
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.getNamespace();
      assertEquals(9223372036854775807L, entryAccumulator0.getMin());
      assertEquals((-9223372036854775808L), entryAccumulator0.getMax());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("%-80s %5s %10d %10d %10d %10d %20d", "com.mongodb.oplog.analyzer.OplogEntryKey", "%-80s %5s %10d %10d %10d %10d %20d");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.getNamespace();
      assertEquals(9223372036854775807L, entryAccumulator0.getMin());
      assertEquals((-9223372036854775808L), entryAccumulator0.getMax());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey((String) null, (String) null, "#Utp%x<l");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      oplogEntryKey0.ns = "";
      entryAccumulator0.getNamespace();
      assertEquals((-9223372036854775808L), entryAccumulator0.getMax());
      assertEquals(9223372036854775807L, entryAccumulator0.getMin());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("%-80s %5s %10d %10d %10d %10d %20d", "com.mongodb.oplog.analyzer.OplogEntryKey", "%-80s %5s %10d %10d %10d %10d %20d");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution(0L);
      long long0 = entryAccumulator0.getMin();
      assertEquals(1L, entryAccumulator0.getCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey((String) null, (String) null, "#Utp%x<l");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution((-32L));
      long long0 = entryAccumulator0.getMin();
      assertEquals((-32L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("%-80s %5s %10d %10d %10d %10d %20d", "com.mongodb.oplog.analyzer.OplogEntryKey", "%-80s %5s %10d %10d %10d %10d %20d");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution(0L);
      long long0 = entryAccumulator0.getMax();
      assertEquals(1L, entryAccumulator0.getCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("gjYFCaL", "com.mongodb.oplog.analyzer.EntryAccumulator", "com.mongodb.oplog.analyzer.EntryAccumulator");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution(3811L);
      long long0 = entryAccumulator0.getMax();
      assertEquals(3811L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey((String) null, "=$!", (String) null);
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.getDate();
      assertEquals(9223372036854775807L, entryAccumulator0.getMin());
      assertEquals((-9223372036854775808L), entryAccumulator0.getMax());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey((String) null, (String) null, "i'");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      oplogEntryKey0.date = "";
      entryAccumulator0.getDate();
      assertEquals(9223372036854775807L, entryAccumulator0.getMin());
      assertEquals((-9223372036854775808L), entryAccumulator0.getMax());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("%-80s %5s %10d %10d %10d %10d %20d", "com.mongodb.oplog.analyzer.OplogEntryKey", "%-80s %5s %10d %10d %10d %10d %20d");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution(0L);
      long long0 = entryAccumulator0.getCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey((String) null, (String) null, "i'");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution(0L);
      long long0 = entryAccumulator0.getAvg();
      assertEquals(1L, entryAccumulator0.getCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("gjYFCaL", "com.mongodb.oplog.analyzer.EntryAccumulator", "com.mongodb.oplog.analyzer.EntryAccumulator");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution(3811L);
      long long0 = entryAccumulator0.getAvg();
      assertEquals(3811L, entryAccumulator0.getMax());
      assertEquals(3811L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("9B\"){", "9B\"){", "y9wuiQ>?&.bs");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution((-1007L));
      long long0 = entryAccumulator0.getAvg();
      assertEquals((-1007L), entryAccumulator0.getMin());
      assertEquals((-1007L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EntryAccumulator entryAccumulator0 = new EntryAccumulator((OplogEntryKey) null);
      // Undeclared exception!
      try { 
        entryAccumulator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.oplog.analyzer.EntryAccumulator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EntryAccumulator entryAccumulator0 = new EntryAccumulator((OplogEntryKey) null);
      // Undeclared exception!
      try { 
        entryAccumulator0.getOp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.oplog.analyzer.EntryAccumulator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EntryAccumulator entryAccumulator0 = new EntryAccumulator((OplogEntryKey) null);
      // Undeclared exception!
      try { 
        entryAccumulator0.getDate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.oplog.analyzer.EntryAccumulator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("%-80s %5s %10d %10d %10d %10d %20d", "com.mongodb.oplog.analyzer.OplogEntryKey", "%-80s %5s %10d %10d %10d %10d %20d");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.addExecution(0L);
      entryAccumulator0.addExecution(0L);
      assertEquals(2L, entryAccumulator0.getCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("%-80s %5s %10d %10d %10d %10d %20d", "com.mongodb.oplog.analyzer.OplogEntryKey", "%-80s %5s %10d %10d %10d %10d %20d");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      long long0 = entryAccumulator0.getMax();
      assertEquals((-9223372036854775808L), long0);
      assertEquals(9223372036854775807L, entryAccumulator0.getMin());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("%-80s %5s %10d %10d %10d %10d %20d", "com.mongodb.oplog.analyzer.OplogEntryKey", "%-80s %5s %10d %10d %10d %10d %20d");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      // Undeclared exception!
      try { 
        entryAccumulator0.toString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mongodb.oplog.analyzer.EntryAccumulator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("%-80s %5s %10d %10d %10d %10d %20d", "com.mongodb.oplog.analyzer.OplogEntryKey", "%-80s %5s %10d %10d %10d %10d %20d");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.getDate();
      assertEquals(9223372036854775807L, entryAccumulator0.getMin());
      assertEquals((-9223372036854775808L), entryAccumulator0.getMax());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EntryAccumulator entryAccumulator0 = new EntryAccumulator((OplogEntryKey) null);
      entryAccumulator0.getTotal();
      assertEquals(9223372036854775807L, entryAccumulator0.getMin());
      assertEquals((-9223372036854775808L), entryAccumulator0.getMax());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EntryAccumulator entryAccumulator0 = new EntryAccumulator((OplogEntryKey) null);
      // Undeclared exception!
      try { 
        entryAccumulator0.getAvg();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.mongodb.oplog.analyzer.EntryAccumulator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OplogEntryKey oplogEntryKey0 = new OplogEntryKey("%-80s %5s %10d %10d %10d %10d %20d", "com.mongodb.oplog.analyzer.OplogEntryKey", "%-80s %5s %10d %10d %10d %10d %20d");
      EntryAccumulator entryAccumulator0 = new EntryAccumulator(oplogEntryKey0);
      entryAccumulator0.getOp();
      assertEquals(9223372036854775807L, entryAccumulator0.getMin());
      assertEquals((-9223372036854775808L), entryAccumulator0.getMax());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EntryAccumulator entryAccumulator0 = new EntryAccumulator((OplogEntryKey) null);
      entryAccumulator0.getCount();
      assertEquals((-9223372036854775808L), entryAccumulator0.getMax());
      assertEquals(9223372036854775807L, entryAccumulator0.getMin());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EntryAccumulator entryAccumulator0 = new EntryAccumulator((OplogEntryKey) null);
      long long0 = entryAccumulator0.getMin();
      assertEquals(9223372036854775807L, long0);
      assertEquals((-9223372036854775808L), entryAccumulator0.getMax());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EntryAccumulator entryAccumulator0 = new EntryAccumulator((OplogEntryKey) null);
      // Undeclared exception!
      try { 
        entryAccumulator0.getNamespace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.oplog.analyzer.EntryAccumulator", e);
      }
  }
}
