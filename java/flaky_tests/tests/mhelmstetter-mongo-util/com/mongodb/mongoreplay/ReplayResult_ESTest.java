/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 12:26:26 GMT 2022
 */

package com.mongodb.mongoreplay;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.mongoreplay.Command;
import com.mongodb.mongoreplay.ReplayResult;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReplayResult_ESTest extends ReplayResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Command command0 = Command.FIND;
      ReplayResult replayResult0 = new ReplayResult((Set<String>) null, "", "-OjGt'", command0, 1202L, false);
      replayResult0.getQueryShape();
      assertEquals("", replayResult0.getDbName());
      assertEquals("-OjGt'", replayResult0.getCollectionName());
      assertEquals(1202.0, replayResult0.getDuration(), 0.01);
      assertFalse(replayResult0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Command command0 = Command.AGGREGATE;
      ReplayResult replayResult0 = new ReplayResult("", "", "", command0, 2621L, false);
      replayResult0.getQueryShape();
      assertFalse(replayResult0.isSuccess());
      assertEquals(2621.0, replayResult0.getDuration(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Command command0 = Command.DELETE;
      ReplayResult replayResult0 = new ReplayResult("AQ~", "~<B", "~<B", command0, 0L, true);
      double double0 = replayResult0.getDuration();
      assertEquals("~<B", replayResult0.getDbName());
      assertEquals("AQ~", replayResult0.getQueryShape());
      assertEquals("~<B", replayResult0.getCollectionName());
      assertTrue(replayResult0.isSuccess());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Command command0 = Command.AGGREGATE;
      ReplayResult replayResult0 = new ReplayResult((String) null, "", "W34", command0, (-1794L), true);
      double double0 = replayResult0.getDuration();
      assertEquals((-1794.0), double0, 0.01);
      assertEquals("", replayResult0.getDbName());
      assertTrue(replayResult0.isSuccess());
      assertEquals("W34", replayResult0.getCollectionName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Command command0 = Command.COUNT;
      ReplayResult replayResult0 = new ReplayResult("", "N#Z\"IPS", "Y7]!EN1G{T1", command0, 880L, true);
      String string0 = replayResult0.getDbName();
      assertEquals(880.0, replayResult0.getDuration(), 0.01);
      assertTrue(replayResult0.isSuccess());
      assertEquals("N#Z\"IPS", string0);
      assertEquals("Y7]!EN1G{T1", replayResult0.getCollectionName());
      assertEquals("", replayResult0.getQueryShape());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Command command0 = Command.UPDATE;
      ReplayResult replayResult0 = new ReplayResult("_qhbfN%~7I/n", "_qhbfN%~7I/n", "_qhbfN%~7I/n", command0, (-4093L), false);
      replayResult0.getCommand();
      assertFalse(replayResult0.isSuccess());
      assertEquals((-4093.0), replayResult0.getDuration(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Command command0 = Command.UPDATE;
      ReplayResult replayResult0 = new ReplayResult("_qhbfN%~7I/n", "_qhbfN%~7I/n", "_qhbfN%~7I/n", command0, (-4093L), false);
      replayResult0.getCollectionName();
      assertFalse(replayResult0.isSuccess());
      assertEquals((-4093.0), replayResult0.getDuration(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Command command0 = Command.UPDATE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ReplayResult replayResult0 = null;
      try {
        replayResult0 = new ReplayResult(linkedHashSet0, (String) null, (String) null, command0, (-1033L), true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Command command0 = Command.COUNT;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ReplayResult replayResult0 = null;
      try {
        replayResult0 = new ReplayResult(linkedHashSet0, "P`bv'Vo_oJPy{|<p", (String) null, command0, 880L, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReplayResult replayResult0 = new ReplayResult((Set<String>) null, "INSERT", "UPDATE", (Command) null, 0L, false);
      replayResult0.getCommand();
      assertEquals("INSERT", replayResult0.getDbName());
      assertFalse(replayResult0.isSuccess());
      assertEquals("UPDATE", replayResult0.getCollectionName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Command command0 = Command.UPDATE;
      ReplayResult replayResult0 = null;
      try {
        replayResult0 = new ReplayResult("lywh% )Xb[", "lywh% )Xb[", (String) null, command0, 8L, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Command command0 = Command.UPDATE;
      ReplayResult replayResult0 = null;
      try {
        replayResult0 = new ReplayResult((String) null, (String) null, (String) null, command0, 0L, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Command command0 = Command.COUNT;
      ReplayResult replayResult0 = new ReplayResult("Q7k~n", "", "", command0, 880L, false);
      double double0 = replayResult0.getDuration();
      assertEquals("Q7k~n", replayResult0.getQueryShape());
      assertEquals("", replayResult0.getCollectionName());
      assertEquals(880.0, double0, 0.01);
      assertFalse(replayResult0.isSuccess());
      assertEquals("", replayResult0.getDbName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Command command0 = Command.COUNT;
      ReplayResult replayResult0 = new ReplayResult("Q7k~n", "", "", command0, 880L, false);
      Command command1 = replayResult0.getCommand();
      ReplayResult replayResult1 = new ReplayResult("", "N#Z\"IPS", "Y7]!EN1G{T1", command1, 880L, true);
      boolean boolean0 = replayResult1.isSuccess();
      assertEquals("Y7]!EN1G{T1", replayResult1.getCollectionName());
      assertEquals("N#Z\"IPS", replayResult1.getDbName());
      assertEquals("", replayResult1.getQueryShape());
      assertEquals(880.0, replayResult1.getDuration(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Command command0 = Command.COUNT;
      ReplayResult replayResult0 = new ReplayResult("Q7k~n", "", "", command0, 880L, false);
      String string0 = replayResult0.getQueryShape();
      assertEquals(880.0, replayResult0.getDuration(), 0.01);
      assertFalse(replayResult0.isSuccess());
      assertEquals("", replayResult0.getCollectionName());
      assertEquals("Q7k~n", string0);
      assertEquals("", replayResult0.getDbName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Command command0 = Command.COUNT;
      ReplayResult replayResult0 = new ReplayResult("Q7k~n", "", "", command0, 880L, false);
      boolean boolean0 = replayResult0.isSuccess();
      assertFalse(boolean0);
      assertEquals("", replayResult0.getCollectionName());
      assertEquals("Q7k~n", replayResult0.getQueryShape());
      assertEquals("", replayResult0.getDbName());
      assertEquals(880.0, replayResult0.getDuration(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Command command0 = Command.COUNT;
      ReplayResult replayResult0 = new ReplayResult("Q7k~n", "", "", command0, 880L, false);
      String string0 = replayResult0.getCollectionName();
      assertEquals(880.0, replayResult0.getDuration(), 0.01);
      assertEquals("", replayResult0.getDbName());
      assertEquals("", string0);
      assertEquals("Q7k~n", replayResult0.getQueryShape());
      assertFalse(replayResult0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Command command0 = Command.COUNT;
      ReplayResult replayResult0 = new ReplayResult("Q7k~n", "", "", command0, 880L, false);
      String string0 = replayResult0.getDbName();
      assertEquals("", replayResult0.getCollectionName());
      assertFalse(replayResult0.isSuccess());
      assertEquals("Q7k~n", replayResult0.getQueryShape());
      assertEquals("", string0);
      assertEquals(880.0, replayResult0.getDuration(), 0.01);
  }
}
