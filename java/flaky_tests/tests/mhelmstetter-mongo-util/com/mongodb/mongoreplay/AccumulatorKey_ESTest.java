/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 12:17:23 GMT 2022
 */

package com.mongodb.mongoreplay;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mongodb.mongoreplay.AccumulatorKey;
import com.mongodb.mongoreplay.Command;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccumulatorKey_ESTest extends AccumulatorKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Command command0 = Command.FIND;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey(".", ".", command0, "");
      accumulatorKey0.hashCode();
      assertEquals("", accumulatorKey0.getShape());
      assertEquals(".", accumulatorKey0.getCollName());
      assertEquals(".", accumulatorKey0.getDbName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Command command0 = Command.DELETE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "_k", command0, (String) null);
      String string0 = accumulatorKey0.getShape();
      assertNull(string0);
      assertEquals("_k", accumulatorKey0.getCollName());
      assertEquals("", accumulatorKey0.getDbName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Command command0 = Command.COUNT;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("T2#c>Mf^Nq+<N%\"V", "T2#c>Mf^Nq+<N%\"V", command0, "C{DhLLOT");
      String string0 = accumulatorKey0.getShape();
      assertEquals("C{DhLLOT", string0);
      assertEquals("T2#c>Mf^Nq+<N%\"V", accumulatorKey0.getDbName());
      assertEquals("T2#c>Mf^Nq+<N%\"V", accumulatorKey0.getCollName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Command command0 = Command.INSERT;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey((String) null, (String) null, command0, "");
      String string0 = accumulatorKey0.getDbName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Command command0 = Command.COUNT;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "", command0, "7");
      String string0 = accumulatorKey0.getDbName();
      assertEquals("", accumulatorKey0.getCollName());
      assertEquals("", string0);
      assertEquals("7", accumulatorKey0.getShape());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccumulatorKey accumulatorKey0 = new AccumulatorKey(",", ",", (Command) null, ",");
      accumulatorKey0.getCommand();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Command command0 = Command.DELETE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "", command0, "");
      Command command1 = accumulatorKey0.getCommand();
      assertFalse(command1.isRead());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Command command0 = Command.INSERT;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey((String) null, (String) null, command0, "");
      String string0 = accumulatorKey0.getCollName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Command command0 = Command.DELETE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "_k", command0, (String) null);
      String string0 = accumulatorKey0.getCollName();
      assertNotNull(string0);
      assertEquals("", accumulatorKey0.getDbName());
      assertEquals("_k", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Command command0 = Command.GETMORE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "", command0, "");
      AccumulatorKey accumulatorKey1 = new AccumulatorKey("", "", command0, "");
      boolean boolean0 = accumulatorKey0.equals(accumulatorKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Command command0 = Command.AGGREGATE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey((String) null, (String) null, command0, (String) null);
      AccumulatorKey accumulatorKey1 = new AccumulatorKey((String) null, (String) null, command0, "GETMORE");
      boolean boolean0 = accumulatorKey0.equals(accumulatorKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Command command0 = Command.DELETE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("j", "j", command0, "j");
      AccumulatorKey accumulatorKey1 = new AccumulatorKey("Y", "j", command0, "j");
      boolean boolean0 = accumulatorKey0.equals(accumulatorKey1);
      assertEquals("j", accumulatorKey1.getCollName());
      assertFalse(boolean0);
      assertEquals("j", accumulatorKey1.getShape());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Command command0 = Command.AGGREGATE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey((String) null, "mP$-tP7^+SlZT^", command0, "mP$-tP7^+SlZT^");
      AccumulatorKey accumulatorKey1 = new AccumulatorKey("mP$-tP7^+SlZT^", "mP$-tP7^+SlZT^", command0, "V3$7}$>s|Dxa|7XC");
      boolean boolean0 = accumulatorKey0.equals(accumulatorKey1);
      assertEquals("mP$-tP7^+SlZT^", accumulatorKey1.getCollName());
      assertEquals("mP$-tP7^+SlZT^", accumulatorKey1.getDbName());
      assertFalse(boolean0);
      assertEquals("V3$7}$>s|Dxa|7XC", accumulatorKey1.getShape());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Command command0 = Command.DELETE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "", command0, "");
      Command command1 = Command.UPDATE;
      AccumulatorKey accumulatorKey1 = new AccumulatorKey(".", "", command1, "");
      boolean boolean0 = accumulatorKey0.equals(accumulatorKey1);
      assertFalse(boolean0);
      assertEquals("", accumulatorKey1.getCollName());
      assertEquals("", accumulatorKey1.getShape());
      assertEquals(".", accumulatorKey1.getDbName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Command command0 = Command.FIND;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey(".", ".", command0, "");
      AccumulatorKey accumulatorKey1 = new AccumulatorKey(".", ".", command0, ".");
      boolean boolean0 = accumulatorKey0.equals(accumulatorKey1);
      assertEquals(".", accumulatorKey0.getDbName());
      assertFalse(boolean0);
      assertEquals(".", accumulatorKey0.getCollName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Command command0 = Command.AGGREGATE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey((String) null, (String) null, command0, (String) null);
      AccumulatorKey accumulatorKey1 = new AccumulatorKey((String) null, "F80+", command0, "F80+");
      boolean boolean0 = accumulatorKey0.equals(accumulatorKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Command command0 = Command.AGGREGATE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey((String) null, (String) null, command0, (String) null);
      AccumulatorKey accumulatorKey1 = new AccumulatorKey((String) null, (String) null, command0, (String) null);
      boolean boolean0 = accumulatorKey0.equals(accumulatorKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Command command0 = Command.FIND;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "", command0, ".");
      AccumulatorKey accumulatorKey1 = new AccumulatorKey(".", ".", command0, "");
      boolean boolean0 = accumulatorKey1.equals(accumulatorKey0);
      assertEquals(".", accumulatorKey1.getDbName());
      assertEquals(".", accumulatorKey1.getCollName());
      assertFalse(boolean0);
      assertEquals("", accumulatorKey1.getShape());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Command command0 = Command.FIND;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "", command0, ".");
      boolean boolean0 = accumulatorKey0.equals((Object) null);
      assertEquals("", accumulatorKey0.getCollName());
      assertEquals("", accumulatorKey0.getDbName());
      assertEquals(".", accumulatorKey0.getShape());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Command command0 = Command.GETMORE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("j", "j", command0, "j");
      boolean boolean0 = accumulatorKey0.equals(accumulatorKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Command command0 = Command.FIND;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "", command0, ".");
      boolean boolean0 = accumulatorKey0.equals(".");
      assertEquals("", accumulatorKey0.getCollName());
      assertEquals("", accumulatorKey0.getDbName());
      assertFalse(boolean0);
      assertEquals(".", accumulatorKey0.getShape());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "", (Command) null, "Z1\"3 {");
      accumulatorKey0.hashCode();
      assertEquals("", accumulatorKey0.getCollName());
      assertEquals("Z1\"3 {", accumulatorKey0.getShape());
      assertEquals("", accumulatorKey0.getDbName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Command command0 = Command.AGGREGATE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey((String) null, (String) null, command0, (String) null);
      accumulatorKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Command command0 = Command.FIND;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "", command0, ".");
      String string0 = accumulatorKey0.getNamespace();
      assertEquals(".", string0);
      assertEquals(".", accumulatorKey0.getShape());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Command command0 = Command.COUNT;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("T2#c>Mf^Nq+<N%\"V", "T2#c>Mf^Nq+<N%\"V", command0, "C{DhLLOT");
      String string0 = accumulatorKey0.getDbName();
      assertEquals("T2#c>Mf^Nq+<N%\"V", accumulatorKey0.getCollName());
      assertEquals("T2#c>Mf^Nq+<N%\"V", string0);
      assertEquals("C{DhLLOT", accumulatorKey0.getShape());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Command command0 = Command.DELETE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "", command0, "");
      String string0 = accumulatorKey0.getCollName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Command command0 = Command.DELETE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey("", "", command0, "");
      String string0 = accumulatorKey0.getShape();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Command command0 = Command.AGGREGATE;
      AccumulatorKey accumulatorKey0 = new AccumulatorKey((String) null, "mP$-tP7^+SlZT^", command0, "mP$-tP7^+SlZT^");
      Command command1 = accumulatorKey0.getCommand();
      assertTrue(command1.isRead());
  }
}
