/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 12:20:52 GMT 2022
 */

package com.mongodb.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.model.Namespace;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Namespace_ESTest extends Namespace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Namespace namespace0 = new Namespace("Xdu&qNrbr^G", "");
      String string0 = namespace0.getDatabaseName();
      assertEquals("Xdu&qNrbr^G", string0);
      assertEquals("", namespace0.getCollectionName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Namespace namespace0 = new Namespace("", "");
      String string0 = namespace0.getDatabaseName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Namespace namespace0 = new Namespace(".", ".");
      String string0 = namespace0.getCollectionName();
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Namespace namespace0 = new Namespace((String) null, "");
      String string0 = namespace0.getCollectionName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Namespace namespace0 = new Namespace((String) null, (String) null);
      Namespace namespace1 = new Namespace((String) null, "");
      int int0 = namespace0.compareTo(namespace1);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Namespace namespace0 = new Namespace(" Bim;g.q");
      Namespace namespace1 = new Namespace((String) null, " Bim;g.q");
      int int0 = namespace0.compareTo(namespace1);
      assertEquals("q", namespace0.getCollectionName());
      assertEquals((-78), int0);
      assertEquals(" Bim;g", namespace0.getDatabaseName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Namespace namespace0 = new Namespace("c;u", "c;u");
      // Undeclared exception!
      try { 
        namespace0.compareTo((Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.model.Namespace", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Namespace namespace0 = null;
      try {
        namespace0 = new Namespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Namespace namespace0 = new Namespace("Xdu&qNrbr^G");
      String string0 = namespace0.getNamespace();
      assertEquals("null.null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Namespace namespace0 = new Namespace(".", ".");
      Namespace namespace1 = new Namespace(".", ".");
      boolean boolean0 = namespace0.equals(namespace1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Namespace namespace0 = new Namespace("{Xj^y");
      Namespace namespace1 = new Namespace(",::'OIz\"%9ol", (String) null);
      boolean boolean0 = namespace0.equals(namespace1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Namespace namespace0 = new Namespace("Xdu&qNrbr^G", "");
      Namespace namespace1 = new Namespace("6q+5D,", "");
      boolean boolean0 = namespace0.equals(namespace1);
      assertEquals("", namespace1.getCollectionName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Namespace namespace0 = new Namespace("Q6]");
      Namespace namespace1 = new Namespace("2`H");
      boolean boolean0 = namespace0.equals(namespace1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Namespace namespace0 = new Namespace("Xdu&qNrbr^G");
      Namespace namespace1 = new Namespace("Xdu&qNrbr^G", "");
      boolean boolean0 = namespace1.equals(namespace0);
      assertEquals("", namespace1.getCollectionName());
      assertFalse(boolean0);
      assertEquals("Xdu&qNrbr^G", namespace1.getDatabaseName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Namespace namespace0 = new Namespace(".", ".");
      boolean boolean0 = namespace0.equals(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Namespace namespace0 = new Namespace(" Bim;g.q");
      boolean boolean0 = namespace0.equals((Object) null);
      assertEquals("q", namespace0.getCollectionName());
      assertEquals(" Bim;g", namespace0.getDatabaseName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      boolean boolean0 = namespace0.equals(namespace0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Namespace namespace0 = new Namespace("Xdu&qNrbr^G");
      Namespace namespace1 = new Namespace("Xdu&qNrbr^G", "");
      boolean boolean0 = namespace0.equals(namespace1);
      assertEquals("", namespace1.getCollectionName());
      assertEquals("Xdu&qNrbr^G", namespace1.getDatabaseName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Namespace namespace0 = new Namespace("Xdu&qNrbr^G");
      namespace0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Namespace namespace0 = new Namespace(".", ".");
      namespace0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Namespace namespace0 = new Namespace("I&J9gpkA<'9@DV9_t", "I&J9gpkA<'9@DV9_t");
      boolean boolean0 = namespace0.hasDatabase("I&J9gpkA<'9@DV9_t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Namespace namespace0 = new Namespace(" Bim;g.q");
      boolean boolean0 = namespace0.hasDatabase(" Bim;g.q");
      assertEquals("q", namespace0.getCollectionName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Namespace namespace0 = new Namespace("Xdu&qNrbr^G");
      boolean boolean0 = namespace0.hasDatabase("null.null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Namespace namespace0 = new Namespace("Xdu&qNrbr^G");
      String string0 = namespace0.getCollectionName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Namespace namespace0 = new Namespace("Xdu&qNrbr^G");
      String string0 = namespace0.getDatabaseName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Namespace namespace0 = new Namespace("Xdu&qNrbr^G");
      String string0 = namespace0.toString();
      assertEquals("null.null", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Namespace namespace0 = new Namespace(".", ".");
      int int0 = namespace0.compareTo(namespace0);
      assertEquals(0, int0);
  }
}
