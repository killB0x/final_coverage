/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:48:25 GMT 2022
 */

package tel.schich.automata.match;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import tel.schich.automata.DFA;
import tel.schich.automata.NFA;
import tel.schich.automata.input.CharacterStream;
import tel.schich.automata.input.InputSource;
import tel.schich.automata.input.source.CharSequenceSource;
import tel.schich.automata.match.PatternParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PatternParser_ESTest extends PatternParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NFA nFA0 = PatternParser.toNFA("RE8r+s{9\"8#vTl");
      assertNotNull(nFA0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DFA dFA0 = PatternParser.toDFA("V:XB{0;nZMQh|='T");
      assertNotNull(dFA0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DFA dFA0 = PatternParser.toDFA("jzcjD{)2J1l.Fh{3(");
      assertNotNull(dFA0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(charBuffer0);
      CharacterStream characterStream0 = new CharacterStream(charSequenceSource0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      characterStream0.forEach(consumer0);
      DFA dFA0 = PatternParser.readCharacter(characterStream0, true);
      assertNotNull(dFA0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PatternParser.toNFA("tel.schich.automata.match.PatternParser$NumberSyntax");
      // Undeclared exception!
      PatternParser.toNFA("tel.schich.automata.match.PatternParser$NumberSyntax");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        PatternParser.toNFA((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PatternParser.toNFA("tel.schich.automata.match.PatternParser$NumberSyntax");
      // Undeclared exception!
      PatternParser.toDFA("tel.schich.automata.match.PatternParser$NumberSyntax");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        PatternParser.toDFA((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        PatternParser.readCharacter((CharacterStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.match.PatternParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharacterStream characterStream0 = new CharacterStream((InputSource) null);
      // Undeclared exception!
      try { 
        PatternParser.readCharacter(characterStream0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You can't call current() before invoking next() at least once!
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DFA dFA0 = PatternParser.toDFA("!h2-_\\@;2");
      assertNotNull(dFA0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NFA nFA0 = PatternParser.toNFA("PP8rY)l,[m[S 4Wdv");
      assertNotNull(nFA0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NFA nFA0 = PatternParser.toNFA("\"Uc6Y\b0w^Zj,\\xd|_");
      assertNotNull(nFA0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NFA nFA0 = PatternParser.toNFA("[^l_Af]&{(y4h5j\"iH");
      assertNotNull(nFA0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DFA dFA0 = PatternParser.toDFA("79[)k[@H]PxkGgr");
      assertNotNull(dFA0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DFA dFA0 = PatternParser.toDFA("d[]7GuIe>2");
      assertNotNull(dFA0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NFA nFA0 = PatternParser.toNFA("<[");
      assertNotNull(nFA0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NFA nFA0 = PatternParser.toNFA(":{6d#8YZs<@ZI@75");
      assertNotNull(nFA0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NFA nFA0 = PatternParser.toNFA("%CM{M{2D8Wj,");
      assertNotNull(nFA0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DFA dFA0 = PatternParser.toDFA("}XFgz]9{5\"L`,)}");
      assertNotNull(dFA0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DFA dFA0 = PatternParser.toDFA(")FJOh  JkU1zql7/'");
      assertNotNull(dFA0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DFA dFA0 = PatternParser.toDFA("MI{H0QC>`bn|u.Z(BQ%");
      assertNotNull(dFA0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DFA dFA0 = PatternParser.toDFA("@U~4?\".sa5XuF[vG+P");
      assertNotNull(dFA0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DFA dFA0 = PatternParser.toDFA("?v*L<}$");
      assertNotNull(dFA0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DFA dFA0 = PatternParser.toDFA("\"f(/B 7X9,L5o) z_mV");
      assertNotNull(dFA0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DFA dFA0 = PatternParser.toDFA("M&{");
      assertNotNull(dFA0);
  }
}
