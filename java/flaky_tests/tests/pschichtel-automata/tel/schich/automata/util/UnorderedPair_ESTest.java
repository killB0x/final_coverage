/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:59:26 GMT 2022
 */

package tel.schich.automata.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tel.schich.automata.util.UnorderedPair;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnorderedPair_ESTest extends UnorderedPair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(2181);
      UnorderedPair<Integer, Integer> unorderedPair0 = new UnorderedPair<Integer, Integer>(integer0, integer0);
      UnorderedPair.unorderedPair(unorderedPair0, integer0);
      unorderedPair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnorderedPair<Integer, Integer> unorderedPair0 = UnorderedPair.unorderedPair((Integer) null, (Integer) null);
      Integer integer0 = unorderedPair0.getRight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnorderedPair<Integer, Integer> unorderedPair0 = new UnorderedPair<Integer, Integer>((Integer) null, (Integer) null);
      Integer integer0 = unorderedPair0.getLeft();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-112));
      UnorderedPair<Integer, Integer> unorderedPair0 = UnorderedPair.unorderedPair((Integer) null, integer0);
      UnorderedPair<Integer, UnorderedPair<Integer, Integer>> unorderedPair1 = UnorderedPair.unorderedPair((Integer) null, unorderedPair0);
      // Undeclared exception!
      try { 
        unorderedPair1.equals(unorderedPair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.util.UnorderedPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1873));
      UnorderedPair<Integer, Integer> unorderedPair0 = new UnorderedPair<Integer, Integer>(integer0, integer0);
      boolean boolean0 = unorderedPair0.equals(unorderedPair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(2181);
      UnorderedPair<Integer, Integer> unorderedPair0 = new UnorderedPair<Integer, Integer>(integer0, integer0);
      UnorderedPair<Integer, UnorderedPair<Integer, Integer>> unorderedPair1 = UnorderedPair.unorderedPair(integer0, unorderedPair0);
      boolean boolean0 = unorderedPair0.equals(unorderedPair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1873));
      UnorderedPair<Integer, Integer> unorderedPair0 = new UnorderedPair<Integer, Integer>(integer0, integer0);
      UnorderedPair<Integer, Integer> unorderedPair1 = UnorderedPair.unorderedPair(integer0, integer0);
      boolean boolean0 = unorderedPair0.equals(unorderedPair1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      UnorderedPair<Integer, Integer> unorderedPair0 = UnorderedPair.unorderedPair(integer0, integer0);
      UnorderedPair<Integer, UnorderedPair<Integer, Integer>> unorderedPair1 = UnorderedPair.unorderedPair(integer0, unorderedPair0);
      UnorderedPair<UnorderedPair<Integer, Integer>, UnorderedPair<Integer, Integer>> unorderedPair2 = UnorderedPair.unorderedPair(unorderedPair0, unorderedPair0);
      Object object0 = unorderedPair2.getLeft();
      boolean boolean0 = unorderedPair1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1895));
      UnorderedPair<Integer, Integer> unorderedPair0 = new UnorderedPair<Integer, Integer>(integer0, integer0);
      UnorderedPair<Integer, UnorderedPair<Integer, Integer>> unorderedPair1 = UnorderedPair.unorderedPair(integer0, unorderedPair0);
      boolean boolean0 = unorderedPair1.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-1895));
      UnorderedPair<Integer, Integer> unorderedPair0 = new UnorderedPair<Integer, Integer>(integer0, integer0);
      UnorderedPair<Integer, UnorderedPair<Integer, Integer>> unorderedPair1 = UnorderedPair.unorderedPair(integer0, unorderedPair0);
      UnorderedPair<UnorderedPair<Integer, Integer>, Integer> unorderedPair2 = UnorderedPair.unorderedPair(unorderedPair0, integer0);
      boolean boolean0 = unorderedPair1.equals(unorderedPair2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1895));
      UnorderedPair<Integer, Integer> unorderedPair0 = new UnorderedPair<Integer, Integer>(integer0, integer0);
      String string0 = unorderedPair0.toString();
      assertEquals("<-1895, -1895>", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnorderedPair<Integer, Integer> unorderedPair0 = UnorderedPair.unorderedPair((Integer) null, (Integer) null);
      UnorderedPair<UnorderedPair<Integer, Integer>, UnorderedPair<Integer, Integer>> unorderedPair1 = new UnorderedPair<UnorderedPair<Integer, Integer>, UnorderedPair<Integer, Integer>>(unorderedPair0, unorderedPair0);
      UnorderedPair<Integer, Integer> unorderedPair2 = unorderedPair1.getRight();
      assertSame(unorderedPair0, unorderedPair2);
  }
}
