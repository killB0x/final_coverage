/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:58:11 GMT 2022
 */

package tel.schich.automata.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tel.schich.automata.util.OrderedPair;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OrderedPair_ESTest extends OrderedPair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-3560));
      OrderedPair<Integer, Integer> orderedPair0 = new OrderedPair<Integer, Integer>(integer0, integer0);
      OrderedPair<Integer, OrderedPair<Integer, Integer>> orderedPair1 = OrderedPair.pair(integer0, orderedPair0);
      Object object0 = orderedPair1.getRight();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1944);
      OrderedPair<Integer, Integer> orderedPair0 = OrderedPair.pair(integer0, integer0);
      OrderedPair<OrderedPair<Integer, Integer>, Integer> orderedPair1 = new OrderedPair<OrderedPair<Integer, Integer>, Integer>(orderedPair0, (Integer) null);
      OrderedPair<Integer, Integer> orderedPair2 = orderedPair1.getLeft();
      assertSame(orderedPair2, orderedPair0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OrderedPair<OrderedPair<Integer, Integer>, Integer> orderedPair0 = OrderedPair.pair((OrderedPair<Integer, Integer>) null, integer0);
      orderedPair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OrderedPair<Integer, OrderedPair<Integer, Integer>> orderedPair0 = OrderedPair.pair(integer0, (OrderedPair<Integer, Integer>) null);
      orderedPair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrderedPair<Integer, Integer> orderedPair0 = new OrderedPair<Integer, Integer>((Integer) null, (Integer) null);
      OrderedPair<Integer, Integer> orderedPair1 = new OrderedPair<Integer, Integer>((Integer) null, (Integer) null);
      boolean boolean0 = orderedPair0.equals(orderedPair1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OrderedPair<Integer, Integer> orderedPair0 = new OrderedPair<Integer, Integer>((Integer) null, (Integer) null);
      OrderedPair<OrderedPair<Integer, Integer>, Integer> orderedPair1 = OrderedPair.pair(orderedPair0, (Integer) null);
      boolean boolean0 = orderedPair1.equals(orderedPair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OrderedPair<Integer, Integer> orderedPair0 = new OrderedPair<Integer, Integer>((Integer) null, (Integer) null);
      OrderedPair<Integer, OrderedPair<Integer, Integer>> orderedPair1 = OrderedPair.pair((Integer) null, orderedPair0);
      boolean boolean0 = orderedPair0.equals(orderedPair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OrderedPair<Integer, Integer> orderedPair0 = new OrderedPair<Integer, Integer>((Integer) null, (Integer) null);
      boolean boolean0 = orderedPair0.equals(orderedPair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OrderedPair<OrderedPair<Integer, Integer>, Integer> orderedPair0 = OrderedPair.pair((OrderedPair<Integer, Integer>) null, (Integer) null);
      boolean boolean0 = orderedPair0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OrderedPair<OrderedPair<Integer, Integer>, OrderedPair<Integer, Integer>> orderedPair0 = new OrderedPair<OrderedPair<Integer, Integer>, OrderedPair<Integer, Integer>>((OrderedPair<Integer, Integer>) null, (OrderedPair<Integer, Integer>) null);
      OrderedPair<Integer, Integer> orderedPair1 = orderedPair0.getRight();
      assertNull(orderedPair1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrderedPair<OrderedPair<Integer, Integer>, Integer> orderedPair0 = OrderedPair.pair((OrderedPair<Integer, Integer>) null, (Integer) null);
      String string0 = orderedPair0.toString();
      assertEquals("(null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrderedPair<Integer, Integer> orderedPair0 = new OrderedPair<Integer, Integer>((Integer) null, (Integer) null);
      Integer integer0 = orderedPair0.getLeft();
      assertNull(integer0);
  }
}
