/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:55:42 GMT 2022
 */

package tel.schich.automata.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tel.schich.automata.util.OrderedPair;
import tel.schich.automata.util.UnorderedPair;
import tel.schich.automata.util.Util;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Util_ESTest extends Util_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Character character0 = Character.valueOf('C');
      UnorderedPair<Character, Character> unorderedPair0 = new UnorderedPair<Character, Character>(character0, character0);
      Set<UnorderedPair<Character, Character>> set0 = Util.asSet(unorderedPair0);
      Set<Character> set1 = Util.asSet(character0, character0);
      Set<UnorderedPair<UnorderedPair<Character, Character>, Character>> set2 = Util.unorderedMultiply(set0, set1);
      assertEquals(1, set2.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Character character0 = Character.valueOf('C');
      Set<Character> set0 = Util.asSet(character0, character0);
      Character character1 = Character.valueOf('x');
      Set<Character> set1 = Util.asSet(character0, character1);
      Set<OrderedPair<Character, Character>> set2 = Util.orderedMultiply(set0, set1);
      assertEquals(2, set2.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Character> linkedHashSet0 = new LinkedHashSet<Character>();
      Set<UnorderedPair<Character, Character>> set0 = Util.unorderedMultiply((Set<Character>) linkedHashSet0, (Set<Character>) linkedHashSet0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<Character> linkedHashSet0 = new LinkedHashSet<Character>();
      Set<OrderedPair<Character, Character>> set0 = Util.orderedMultiply((Set<Character>) linkedHashSet0, (Set<Character>) linkedHashSet0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Character> linkedHashSet0 = new LinkedHashSet<Character>();
      Set<Character> set0 = Util.fixPointIterate((Set<Character>) linkedHashSet0, (Function<Character, Set<Character>>) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Character character0 = Character.valueOf('z');
      Set<Character> set0 = Util.asSet(character0);
      char[] charArray0 = Util.convertCharCollectionToArray(set0);
      assertArrayEquals(new char[] {'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.unorderedMultiply((Set<UnorderedPair<Character, Character>>) null, (Set<UnorderedPair<Character, Character>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.unmodifiableCopy((Set<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.orderedMultiply((Set<Character>) null, (Set<LinkedHashSet<LinkedHashSet>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Character> linkedHashSet0 = new LinkedHashSet<Character>();
      Set<LinkedHashSet<Character>> set0 = Util.asSet(linkedHashSet0);
      // Undeclared exception!
      try { 
        Util.fixPointIterate(set0, (Function<LinkedHashSet<Character>, Set<LinkedHashSet<Character>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.asSet((Character[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnorderedPair<Character, Character> unorderedPair0 = new UnorderedPair<Character, Character>((Character) null, (Character) null);
      UnorderedPair<Character, Character> unorderedPair1 = UnorderedPair.unorderedPair((Character) null, (Character) null);
      // Undeclared exception!
      try { 
        Util.asSet(unorderedPair0, unorderedPair1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.util.UnorderedPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<Character> linkedHashSet0 = new LinkedHashSet<Character>();
      char[] charArray0 = Util.convertCharCollectionToArray(linkedHashSet0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnorderedPair<Character, Character>[] unorderedPairArray0 = (UnorderedPair<Character, Character>[]) Array.newInstance(UnorderedPair.class, 13);
      Set<UnorderedPair<Character, Character>> set0 = Util.asSet(unorderedPairArray0);
      Set<UnorderedPair<UnorderedPair<Character, Character>, UnorderedPair<Character, Character>>> set1 = Util.unorderedMultiply(set0, set0);
      assertFalse(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnorderedPair<Character, Character>[] unorderedPairArray0 = (UnorderedPair<Character, Character>[]) Array.newInstance(UnorderedPair.class, 0);
      Set<UnorderedPair<Character, Character>> set0 = Util.asSet(unorderedPairArray0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Set<Character> set0 = Util.asSet((Character) null);
      // Undeclared exception!
      try { 
        Util.convertCharCollectionToArray(set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Character> linkedHashSet0 = new LinkedHashSet<Character>();
      Set<Character> set0 = Util.unmodifiableCopy((Set<Character>) linkedHashSet0);
      assertEquals(0, set0.size());
  }
}
