/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:11:36 GMT 2022
 */

package tel.schich.automata.eval;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tel.schich.automata.DFA;
import tel.schich.automata.State;
import tel.schich.automata.eval.DFAEvaluator;
import tel.schich.automata.transition.PlannedTransition;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DFAEvaluator_ESTest extends DFAEvaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DFA dFA0 = DFA.EMPTY;
      DFA dFA1 = dFA0.complement();
      DFAEvaluator dFAEvaluator0 = new DFAEvaluator(dFA1);
      boolean boolean0 = dFAEvaluator0.transition('|');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DFA dFA0 = DFA.EMPTY;
      DFA dFA1 = dFA0.complement();
      DFAEvaluator dFAEvaluator0 = new DFAEvaluator(dFA1);
      boolean boolean0 = dFAEvaluator0.isCurrentAccepting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedHashSet<State> linkedHashSet0 = new LinkedHashSet<State>();
      LinkedHashSet<PlannedTransition> linkedHashSet1 = new LinkedHashSet<PlannedTransition>();
      State state0 = new State();
      DFA dFA0 = new DFA(linkedHashSet0, linkedHashSet1, state0, linkedHashSet0);
      DFA dFA1 = dFA0.intersectWith(dFA0);
      DFAEvaluator dFAEvaluator0 = new DFAEvaluator(dFA1);
      // Undeclared exception!
      try { 
        dFAEvaluator0.transition('E');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.eval.DFAEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedHashSet<State> linkedHashSet0 = new LinkedHashSet<State>();
      LinkedHashSet<PlannedTransition> linkedHashSet1 = new LinkedHashSet<PlannedTransition>();
      State state0 = new State();
      DFA dFA0 = new DFA(linkedHashSet0, linkedHashSet1, state0, linkedHashSet0);
      DFA dFA1 = dFA0.intersectWith(dFA0);
      DFAEvaluator dFAEvaluator0 = new DFAEvaluator(dFA1);
      // Undeclared exception!
      try { 
        dFAEvaluator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.eval.DFAEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DFA dFA0 = DFA.EMPTY;
      DFAEvaluator dFAEvaluator0 = new DFAEvaluator(dFA0);
      boolean boolean0 = dFAEvaluator0.isCurrentAccepting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DFA dFA0 = DFA.EMPTY;
      DFAEvaluator dFAEvaluator0 = new DFAEvaluator(dFA0);
      boolean boolean0 = dFAEvaluator0.transition('|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DFA dFA0 = DFA.EMPTY;
      DFAEvaluator dFAEvaluator0 = new DFAEvaluator(dFA0);
      String string0 = dFAEvaluator0.toString();
      assertEquals("State(0)", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DFAEvaluator dFAEvaluator0 = null;
      try {
        dFAEvaluator0 = new DFAEvaluator((DFA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.eval.DFAEvaluator", e);
      }
  }
}
