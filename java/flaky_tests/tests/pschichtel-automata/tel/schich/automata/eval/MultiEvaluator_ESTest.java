/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:03:19 GMT 2022
 */

package tel.schich.automata.eval;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tel.schich.automata.DFA;
import tel.schich.automata.eval.DFAEvaluator;
import tel.schich.automata.eval.MultiEvaluator;
import tel.schich.automata.eval.StateMachineEvaluator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiEvaluator_ESTest extends MultiEvaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedHashSet<StateMachineEvaluator> linkedHashSet0 = new LinkedHashSet<StateMachineEvaluator>();
      DFA dFA0 = DFA.EMPTY;
      DFAEvaluator dFAEvaluator0 = new DFAEvaluator(dFA0);
      linkedHashSet0.add(dFAEvaluator0);
      MultiEvaluator multiEvaluator0 = new MultiEvaluator(linkedHashSet0);
      boolean boolean0 = multiEvaluator0.isCurrentAccepting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiEvaluator multiEvaluator0 = null;
      try {
        multiEvaluator0 = new MultiEvaluator((Set<StateMachineEvaluator>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedHashSet<StateMachineEvaluator> linkedHashSet0 = new LinkedHashSet<StateMachineEvaluator>();
      DFA dFA0 = DFA.EMPTY;
      DFAEvaluator dFAEvaluator0 = new DFAEvaluator(dFA0);
      linkedHashSet0.add(dFAEvaluator0);
      MultiEvaluator multiEvaluator0 = new MultiEvaluator(linkedHashSet0);
      boolean boolean0 = multiEvaluator0.transition('D');
      assertFalse(multiEvaluator0.isCurrentAccepting());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedHashSet<StateMachineEvaluator> linkedHashSet0 = new LinkedHashSet<StateMachineEvaluator>();
      MultiEvaluator multiEvaluator0 = new MultiEvaluator(linkedHashSet0);
      boolean boolean0 = multiEvaluator0.transition('#');
      assertTrue(multiEvaluator0.isCurrentAccepting());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedHashSet<StateMachineEvaluator> linkedHashSet0 = new LinkedHashSet<StateMachineEvaluator>();
      MultiEvaluator multiEvaluator0 = new MultiEvaluator(linkedHashSet0);
      linkedHashSet0.add(multiEvaluator0);
      MultiEvaluator multiEvaluator1 = new MultiEvaluator(linkedHashSet0);
      boolean boolean0 = multiEvaluator1.transition('5');
      assertTrue(multiEvaluator1.isCurrentAccepting());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedHashSet<StateMachineEvaluator> linkedHashSet0 = new LinkedHashSet<StateMachineEvaluator>();
      MultiEvaluator multiEvaluator0 = new MultiEvaluator(linkedHashSet0);
      boolean boolean0 = multiEvaluator0.isCurrentAccepting();
      assertTrue(boolean0);
  }
}
