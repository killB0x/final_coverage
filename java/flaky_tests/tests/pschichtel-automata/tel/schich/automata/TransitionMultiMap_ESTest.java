/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:03:03 GMT 2022
 */

package tel.schich.automata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tel.schich.automata.DFA;
import tel.schich.automata.NFA;
import tel.schich.automata.State;
import tel.schich.automata.TransitionMultiMap;
import tel.schich.automata.transition.PlannedTransition;
import tel.schich.automata.transition.SpontaneousTransition;
import tel.schich.automata.transition.WildcardTransition;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransitionMultiMap_ESTest extends TransitionMultiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<WildcardTransition> linkedHashSet0 = new LinkedHashSet<WildcardTransition>(225);
      TransitionMultiMap transitionMultiMap0 = TransitionMultiMap.build((Set<WildcardTransition>) linkedHashSet0);
      Set<PlannedTransition> set0 = transitionMultiMap0.getTransitionsFor('b', (Set<? extends PlannedTransition>) linkedHashSet0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransitionMultiMap.build((Set<WildcardTransition>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.TransitionMultiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<WildcardTransition> linkedHashSet0 = new LinkedHashSet<WildcardTransition>();
      TransitionMultiMap transitionMultiMap0 = TransitionMultiMap.build((Set<WildcardTransition>) linkedHashSet0);
      Set<PlannedTransition> set0 = transitionMultiMap0.getTransitionsFor('Y', (Set<? extends PlannedTransition>) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<WildcardTransition> linkedHashSet0 = new LinkedHashSet<WildcardTransition>();
      TransitionMultiMap transitionMultiMap0 = TransitionMultiMap.build((Set<WildcardTransition>) linkedHashSet0);
      Set<SpontaneousTransition> set0 = transitionMultiMap0.getSpontaneousTransitions();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<WildcardTransition> linkedHashSet0 = new LinkedHashSet<WildcardTransition>();
      TransitionMultiMap transitionMultiMap0 = TransitionMultiMap.build((Set<WildcardTransition>) linkedHashSet0);
      Set<WildcardTransition> set0 = transitionMultiMap0.getWildcards();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<WildcardTransition> linkedHashSet0 = new LinkedHashSet<WildcardTransition>();
      TransitionMultiMap transitionMultiMap0 = TransitionMultiMap.build((Set<WildcardTransition>) linkedHashSet0);
      Set<Character> set0 = transitionMultiMap0.getAlphabet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<WildcardTransition> linkedHashSet0 = new LinkedHashSet<WildcardTransition>();
      linkedHashSet0.add((WildcardTransition) null);
      // Undeclared exception!
      try { 
        TransitionMultiMap.build((Set<WildcardTransition>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown transition type!
         //
         verifyException("tel.schich.automata.TransitionMultiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DFA dFA0 = DFA.EMPTY;
      NFA nFA0 = dFA0.repeatMin(1588);
      assertNotNull(nFA0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<WildcardTransition> linkedHashSet0 = new LinkedHashSet<WildcardTransition>();
      State state0 = new State();
      WildcardTransition wildcardTransition0 = new WildcardTransition(state0, state0);
      linkedHashSet0.add(wildcardTransition0);
      TransitionMultiMap transitionMultiMap0 = TransitionMultiMap.build((Set<WildcardTransition>) linkedHashSet0);
      Set<PlannedTransition> set0 = transitionMultiMap0.getTransitionsFor('2', (Set<? extends PlannedTransition>) linkedHashSet0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<WildcardTransition> linkedHashSet0 = new LinkedHashSet<WildcardTransition>();
      TransitionMultiMap transitionMultiMap0 = TransitionMultiMap.build((Set<WildcardTransition>) linkedHashSet0);
      Set<PlannedTransition> set0 = transitionMultiMap0.getTransitionsFor('Y');
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<WildcardTransition> linkedHashSet0 = new LinkedHashSet<WildcardTransition>();
      TransitionMultiMap transitionMultiMap0 = TransitionMultiMap.build((Set<WildcardTransition>) linkedHashSet0);
      String string0 = transitionMultiMap0.toString();
      assertEquals("\u03A3 = [], \u03B5-\u03B4 = [], \u03B4 = {}", string0);
  }
}
