/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:52:47 GMT 2022
 */

package tel.schich.automata.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import tel.schich.automata.input.CharBuffer;
import tel.schich.automata.input.CharacterStream;
import tel.schich.automata.input.InputSource;
import tel.schich.automata.input.source.CharSequenceSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterStream_ESTest extends CharacterStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource((CharSequence) null);
      CharacterStream characterStream0 = charSequenceSource0.stream();
      // Undeclared exception!
      try { 
        characterStream0.peekAhead((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.input.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      java.nio.CharBuffer charBuffer0 = java.nio.CharBuffer.allocate(0);
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(charBuffer0);
      CharacterStream characterStream0 = charSequenceSource0.stream();
      characterStream0.remove();
      assertFalse(characterStream0.hasNext());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      java.nio.CharBuffer charBuffer0 = java.nio.CharBuffer.allocate(3075);
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(charBuffer0);
      CharacterStream characterStream0 = charSequenceSource0.stream();
      char char0 = characterStream0.peekAhead(2029);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("4^w>KxsG#Hd9s8KyfCF");
      CharacterStream characterStream0 = new CharacterStream(charSequenceSource0);
      char char0 = characterStream0.peekAhead(0);
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("org.evosuite.runtime.mock.java.lang.MockThrowable: ,EJf1C\"3p");
      CharacterStream characterStream0 = new CharacterStream(charSequenceSource0);
      char char0 = characterStream0.peekAhead(0);
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      java.nio.CharBuffer charBuffer0 = java.nio.CharBuffer.allocate(3075);
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(charBuffer0);
      CharacterStream characterStream0 = charSequenceSource0.stream();
      char char0 = characterStream0.peekAhead();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(",EJf1C\"3p");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      CharacterStream characterStream1 = charSequenceSource0.stream();
      characterStream0.isDepleted();
      assertFalse(characterStream0.isUninitialized());
      
      characterStream0.next();
      char char0 = characterStream1.peekAhead();
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("org.evosuite.runtime.mock.java.lang.MockThrowable: 4^w>KxsG#Hd9s8KyfCF");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      characterStream0.isDepleted();
      boolean boolean0 = characterStream0.isUninitialized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      java.nio.CharBuffer charBuffer0 = java.nio.CharBuffer.allocate(3075);
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(charBuffer0);
      CharacterStream characterStream0 = charSequenceSource0.stream();
      characterStream0.next();
      char char0 = characterStream0.current();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("6.x>_t(O'SvfSE");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      characterStream0.next();
      char char0 = characterStream0.current();
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("6.x>_t(O'SvfSE");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      characterStream0.next();
      CharBuffer.Checkpoint charBuffer_Checkpoint0 = characterStream0.checkpoint();
      assertNotNull(charBuffer_Checkpoint0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("6.x>_t(O'SvfSE");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      characterStream0.canPeekAhead();
      assertFalse(characterStream0.isUninitialized());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      java.nio.CharBuffer charBuffer0 = java.nio.CharBuffer.allocate(42);
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(charBuffer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charSequenceSource0.forEach(consumer0);
      CharacterStream characterStream0 = new CharacterStream(charSequenceSource0);
      boolean boolean0 = characterStream0.canPeekAhead();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterStream characterStream0 = new CharacterStream((InputSource) null);
      // Undeclared exception!
      try { 
        characterStream0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("dE]CI4\"<p");
      CharacterStream characterStream0 = new CharacterStream(charSequenceSource0);
      characterStream0.next();
      // Undeclared exception!
      try { 
        characterStream0.remove();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Nothing to advance to!
         //
         verifyException("tel.schich.automata.input.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4236);
      java.nio.CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(charBuffer0);
      CharacterStream characterStream0 = charSequenceSource0.stream();
      // Undeclared exception!
      try { 
        characterStream0.peekAhead(4236);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Can't peek that far: 4236
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("");
      CharacterStream characterStream0 = new CharacterStream(charSequenceSource0);
      // Undeclared exception!
      try { 
        characterStream0.peekAhead();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Can't peek that far: 1
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharacterStream characterStream0 = new CharacterStream((InputSource) null);
      // Undeclared exception!
      try { 
        characterStream0.peekAhead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[6];
      java.nio.CharBuffer charBuffer0 = java.nio.CharBuffer.wrap(charArray0);
      java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((CharSequence) charBuffer0);
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(charBuffer1);
      CharacterStream characterStream0 = charSequenceSource0.stream();
      charBuffer0.flip();
      // Undeclared exception!
      try { 
        characterStream0.peekAhead();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharacterStream characterStream0 = new CharacterStream((InputSource) null);
      // Undeclared exception!
      try { 
        characterStream0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharacterStream characterStream0 = new CharacterStream((InputSource) null);
      // Undeclared exception!
      try { 
        characterStream0.isDepleted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharacterStream characterStream0 = new CharacterStream((InputSource) null);
      // Undeclared exception!
      try { 
        characterStream0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("m!JEk5UKK&2q");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      characterStream0.isDepleted();
      // Undeclared exception!
      try { 
        characterStream0.current();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.input.CharBuffer$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      java.nio.CharBuffer charBuffer0 = java.nio.CharBuffer.allocate(4358);
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(charBuffer0);
      CharacterStream characterStream0 = new CharacterStream(charSequenceSource0);
      boolean boolean0 = characterStream0.canPeekAhead(4358);
      assertFalse(characterStream0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharacterStream characterStream0 = new CharacterStream((InputSource) null);
      // Undeclared exception!
      try { 
        characterStream0.canPeekAhead(1962);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      java.nio.CharBuffer charBuffer0 = java.nio.CharBuffer.allocate(3);
      java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.get();
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(charBuffer1);
      CharacterStream characterStream0 = charSequenceSource0.stream();
      // Undeclared exception!
      try { 
        characterStream0.canPeekAhead(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharacterStream characterStream0 = new CharacterStream((InputSource) null);
      // Undeclared exception!
      try { 
        characterStream0.advance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(",EJf1C\"3p");
      CharacterStream characterStream0 = new CharacterStream(charSequenceSource0);
      characterStream0.next();
      // Undeclared exception!
      try { 
        characterStream0.advance();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Nothing to advance to!
         //
         verifyException("tel.schich.automata.input.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("G8h");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      // Undeclared exception!
      try { 
        characterStream0.advance();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The queue is empty!
         //
         verifyException("tel.schich.automata.input.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharacterStream characterStream0 = new CharacterStream((InputSource) null);
      // Undeclared exception!
      try { 
        characterStream0.peekAhead((-2502));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.input.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("org.evosuite.runtime.mock.java.lang.MockThrowable: ");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      characterStream0.canPeekAhead(1);
      assertFalse(characterStream0.isUninitialized());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("org.evosuite.runtime.mock.java.lang.MockThrowable: <[");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      boolean boolean0 = characterStream0.canPeekAhead(473);
      assertFalse(boolean0);
      
      boolean boolean1 = characterStream0.hasNext();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("6.x>_t(O'SvfSE");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      boolean boolean0 = characterStream0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharacterStream characterStream0 = new CharacterStream((InputSource) null);
      // Undeclared exception!
      try { 
        characterStream0.canPeekAhead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: ");
      CharacterStream characterStream0 = new CharacterStream(charSequenceSource0);
      boolean boolean0 = characterStream0.isUninitialized();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("");
      CharacterStream characterStream0 = new CharacterStream(charSequenceSource0);
      boolean boolean0 = characterStream0.isDepleted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      characterStream0.advance();
      assertTrue(characterStream0.isUninitialized());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("org.evosuite.runtime.mock.java.lang.MockThrowable: <[");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      characterStream0.next();
      char char0 = characterStream0.current();
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("6.x>_t(O'SvfSE");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      boolean boolean0 = characterStream0.canPeekAhead((-2439));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("org.evosuite.runtime.mock.java.lang.MockThrowable: <[");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      characterStream0.canPeekAhead(473);
      // Undeclared exception!
      try { 
        characterStream0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Source is depleted!
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("org.evosuite.runtime.mock.java.lang.MockThrowable: <[");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      assertTrue(characterStream0.hasNext());
      
      characterStream0.next();
      char char0 = characterStream0.peekAhead();
      assertEquals('r', char0);
      
      Character character0 = characterStream0.next();
      assertTrue(character0.equals((Object)char0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      java.nio.CharBuffer charBuffer0 = java.nio.CharBuffer.allocate(140);
      CharSequenceSource charSequenceSource0 = new CharSequenceSource(charBuffer0);
      CharacterStream characterStream0 = charSequenceSource0.stream();
      // Undeclared exception!
      try { 
        characterStream0.peekAhead(140);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Can't peek that far: 140
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharacterStream.SourceDepletedException characterStream_SourceDepletedException0 = new CharacterStream.SourceDepletedException("4^w>KxsG#Hd9s8KyfCF");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(",EJf1C\"3p");
      CharacterStream.SourceDepletedException characterStream_SourceDepletedException0 = new CharacterStream.SourceDepletedException(mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharacterStream.SourceDepletedException characterStream_SourceDepletedException0 = new CharacterStream.SourceDepletedException("<[", (Throwable) null);
      CharacterStream.SourceReadException characterStream_SourceReadException0 = new CharacterStream.SourceReadException(characterStream_SourceDepletedException0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("6.x>_t(O'SvfSE");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      // Undeclared exception!
      try { 
        characterStream0.checkpoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tel.schich.automata.input.CharBuffer$Checkpoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("dE]CI4\"<p");
      CharacterStream characterStream0 = new CharacterStream(charSequenceSource0);
      // Undeclared exception!
      try { 
        characterStream0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The queue is empty!
         //
         verifyException("tel.schich.automata.input.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("org.evosuite.runtime.mock.java.lang.MockThrowable: <[");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      Iterator<Character> iterator0 = characterStream0.iterator();
      assertSame(characterStream0, iterator0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharSequenceSource charSequenceSource0 = new CharSequenceSource("m!JEk5UKK&2q");
      CharacterStream characterStream0 = charSequenceSource0.stream();
      // Undeclared exception!
      try { 
        characterStream0.current();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You can't call current() before invoking next() at least once!
         //
         verifyException("tel.schich.automata.input.CharacterStream", e);
      }
  }
}
