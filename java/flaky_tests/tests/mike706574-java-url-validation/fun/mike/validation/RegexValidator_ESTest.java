/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 28 03:58:13 GMT 2022
 */

package fun.mike.validation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fun.mike.validation.RegexValidator;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RegexValidator_ESTest extends RegexValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A";
      stringArray0[1] = "A";
      stringArray0[2] = "o}hMcwii1B";
      stringArray0[3] = "o}hMcwii1B";
      stringArray0[4] = "o}hMcwii1B";
      stringArray0[5] = "o}hMcwii1B";
      stringArray0[6] = "A";
      stringArray0[7] = "o}hMcwii1B";
      stringArray0[8] = "o}hMcwii1B";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0);
      String string0 = regexValidator0.validate("o}hMcwii1B");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A";
      stringArray0[1] = "A";
      stringArray0[2] = "o}hMcwii1B";
      stringArray0[3] = "o}hMcwii1B";
      stringArray0[4] = "o}hMcwii1B";
      stringArray0[5] = "o}hMcwii1B";
      stringArray0[6] = "A";
      stringArray0[7] = "o}hMcwii1B";
      stringArray0[8] = "o}hMcwii1B";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0);
      String[] stringArray1 = regexValidator0.match("o}hMcwii1B");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "x+z<EU";
      stringArray0[1] = "x+z<EU";
      stringArray0[2] = "x+z<EU";
      stringArray0[3] = "x+z<EU";
      stringArray0[4] = "x+z<EU";
      stringArray0[5] = "x+z<EU";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[w1";
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 2
         // [w1
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expressions are missing
         //
         verifyException("fun.mike.validation.RegexValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "5{\" ZbO!zD[IBPIS6";
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // 5{\" ZbO!zD[IBPIS6
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("IaJWQ)1Z:JD3xVNp/O", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 4
         // IaJWQ)1Z:JD3xVNp/O
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("Qj}:>3FHbr{");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 9
         // Qj}:>3FHbr{
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         verifyException("fun.mike.validation.RegexValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Regular expressions are missing";
      stringArray0[1] = "Regular expressions are missing";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0);
      String string0 = regexValidator0.toString();
      assertEquals("RegexValidator{Regular expressions are missing,Regular expressions are missing}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("F}H", true);
      String string0 = regexValidator0.toString();
      assertEquals("RegexValidator{F}H}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("o}hMcwii1B");
      String string0 = regexValidator0.validate("o}hMcwii1B");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("x+z<EU");
      String string0 = regexValidator0.validate((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("o}hMcwii1B");
      String string0 = regexValidator0.validate("fun.mike.validation.RegexValidator");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("x+z<EU");
      String[] stringArray0 = regexValidator0.match("x+z<EU");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("o}hMcwii1B");
      String[] stringArray0 = regexValidator0.match((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("x+z<EU");
      boolean boolean0 = regexValidator0.isValid("x+z<EU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("x+z<EU");
      boolean boolean0 = regexValidator0.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         verifyException("fun.mike.validation.RegexValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expressions are missing
         //
         verifyException("fun.mike.validation.RegexValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expressions are missing
         //
         verifyException("fun.mike.validation.RegexValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[9];
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         verifyException("fun.mike.validation.RegexValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("o}hMcwii1B");
      boolean boolean0 = regexValidator0.isValid("o}hMcwii1B");
      assertTrue(boolean0);
  }
}
