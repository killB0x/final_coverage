/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 22:03:08 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.config.ScriptsLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScriptsLocation_ESTest extends ScriptsLocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = null;
      try {
        scriptsLocation0 = new ScriptsLocation(",x:mtsR{O`*J6sRS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown prefix for location. Must be classpath: or filesystem:.,x:mtsR{O`*J6sRS
         //
         verifyException("com.contrastsecurity.cassandra.migration.config.ScriptsLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation(" @t{*Na!<+c6mwG^");
      assertEquals("@t{*Na!<+c6mwG^", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      ScriptsLocation scriptsLocation1 = new ScriptsLocation("filesystem:");
      boolean boolean0 = scriptsLocation1.isParentOf(scriptsLocation0);
      assertFalse(scriptsLocation0.isFileSystem());
      assertFalse(boolean0);
      assertEquals("", scriptsLocation1.getPath());
      assertEquals("", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("filesystem:");
      scriptsLocation0.isFileSystem();
      assertEquals("", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("l}[&pe-");
      String string0 = scriptsLocation0.getPath();
      assertEquals("l}[&pe-", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      ScriptsLocation scriptsLocation1 = new ScriptsLocation("filesystem:");
      int int0 = scriptsLocation1.compareTo(scriptsLocation0);
      assertEquals(3, int0);
      assertEquals("", scriptsLocation1.getPath());
      assertFalse(scriptsLocation0.isFileSystem());
      assertEquals("", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      ScriptsLocation scriptsLocation1 = new ScriptsLocation("filesystem:");
      int int0 = scriptsLocation0.compareTo(scriptsLocation1);
      assertFalse(scriptsLocation0.isFileSystem());
      assertEquals((-3), int0);
      assertEquals("", scriptsLocation1.getPath());
      assertEquals("", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("}%yI4+?Y(>(Cw)YZ/");
      // Undeclared exception!
      try { 
        scriptsLocation0.isParentOf((ScriptsLocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.config.ScriptsLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("t");
      // Undeclared exception!
      try { 
        scriptsLocation0.compareTo((ScriptsLocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.config.ScriptsLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = null;
      try {
        scriptsLocation0 = new ScriptsLocation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.config.ScriptsLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      boolean boolean0 = scriptsLocation0.isClassPath();
      assertEquals("", scriptsLocation0.getPath());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      boolean boolean0 = scriptsLocation0.isFileSystem();
      assertFalse(boolean0);
      assertEquals("", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      String string0 = scriptsLocation0.getDescriptor();
      assertEquals("classpath:", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      boolean boolean0 = scriptsLocation0.equals("classpath:");
      assertEquals("", scriptsLocation0.getPath());
      assertFalse(boolean0);
      assertEquals("classpath:", scriptsLocation0.getPrefix());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("V\"");
      boolean boolean0 = scriptsLocation0.equals((Object) null);
      assertEquals("V\"", scriptsLocation0.getPath());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      boolean boolean0 = scriptsLocation0.equals(scriptsLocation0);
      assertTrue(boolean0);
      assertFalse(scriptsLocation0.isFileSystem());
      assertEquals("", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      ScriptsLocation scriptsLocation1 = new ScriptsLocation("filesystem:");
      boolean boolean0 = scriptsLocation0.equals(scriptsLocation1);
      assertFalse(boolean0);
      assertFalse(scriptsLocation0.isFileSystem());
      assertEquals("", scriptsLocation0.getPath());
      assertEquals("", scriptsLocation1.getPath());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation(".");
      assertEquals("", scriptsLocation0.getPath());
      assertTrue(scriptsLocation0.isClassPath());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("filesystem:");
      scriptsLocation0.isClassPath();
      assertEquals("", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      String string0 = scriptsLocation0.getPrefix();
      assertEquals("", scriptsLocation0.getPath());
      assertEquals("classpath:", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      scriptsLocation0.hashCode();
      assertEquals("", scriptsLocation0.getPath());
      assertFalse(scriptsLocation0.isFileSystem());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      scriptsLocation0.compareTo(scriptsLocation0);
      assertTrue(scriptsLocation0.isClassPath());
      assertEquals("", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      boolean boolean0 = scriptsLocation0.isParentOf(scriptsLocation0);
      assertEquals("", scriptsLocation0.getPath());
      assertTrue(boolean0);
      assertFalse(scriptsLocation0.isFileSystem());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      String string0 = scriptsLocation0.getPath();
      assertEquals("", string0);
      assertEquals("classpath:", scriptsLocation0.getPrefix());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("`!$xu]JvZ$`YOQP;/");
      String string0 = scriptsLocation0.toString();
      assertEquals("classpath:`!$xu]JvZ$`YOQP;", string0);
  }
}
