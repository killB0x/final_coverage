/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 22:10:16 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.utils.scanner.classpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.utils.scanner.classpath.FileSystemClassPathLocationScanner;
import java.io.File;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileSystemClassPathLocationScanner_ESTest extends FileSystemClassPathLocationScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/", "/");
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      MockFile.createTempFile("J!s)", "/", (File) mockFile0);
      // Undeclared exception!
      try { 
        fileSystemClassPathLocationScanner0.findResourceNamesFromFileSystem("9=f*~[P1>`", "/", mockFile0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      MockFile mockFile0 = new MockFile("Scanning for resources in path: ");
      // Undeclared exception!
      try { 
        fileSystemClassPathLocationScanner0.findResourceNamesFromFileSystem("Scanning for resources in path: ", "Scanning for resources in path: ", mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.utils.scanner.classpath.FileSystemClassPathLocationScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      // Undeclared exception!
      try { 
        fileSystemClassPathLocationScanner0.findResourceNames("/com.contrastsecurity.cassandra.migration.log/", uRL0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      // Undeclared exception!
      try { 
        fileSystemClassPathLocationScanner0.findResourceNames("UTF-8", (URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = MockURL.URL(uRL0, "O|$y%>65 Xa43]_");
      // Undeclared exception!
      try { 
        fileSystemClassPathLocationScanner0.findResourceNames("O|$y%>65 Xa43]_", uRL1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - Error at index 0 in: \">6\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      Set<String> set0 = fileSystemClassPathLocationScanner0.findResourceNames("/home/us/", uRL0);
      assertFalse(set0.contains("/home/us/"));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      URL uRL0 = MockURL.getFtpExample();
      Set<String> set0 = fileSystemClassPathLocationScanner0.findResourceNames("com.contrastsecurity.cassandra.migration.logging.LogFactory", uRL0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("o", "#", 2069, "", uRLStreamHandler0);
      Set<String> set0 = fileSystemClassPathLocationScanner0.findResourceNames("m", uRL0);
      assertFalse(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      MockFile mockFile0 = new MockFile("", "");
      MockFile.createTempFile("bLq=zLz7~&.I", "F9@i$|1D", (File) mockFile0);
      Set<String> set0 = fileSystemClassPathLocationScanner0.findResourceNamesFromFileSystem("", "", mockFile0);
      assertFalse(set0.contains(""));
      assertEquals(1, set0.size());
  }
}
