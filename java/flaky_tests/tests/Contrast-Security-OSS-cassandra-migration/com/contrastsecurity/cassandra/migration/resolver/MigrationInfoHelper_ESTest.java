/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 22:20:52 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.resolver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.resolver.MigrationInfoHelper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MigrationInfoHelper_ESTest extends MigrationInfoHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationInfoHelper.extractVersionAndDescription("Sua_T^ ;.%x\"]ZB", "", "", "Sua_T^ ;.%x\"]ZB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: 
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationInfoHelper.extractVersionAndDescription("Y.Q~m3>\"o}oK=>UIEn", "p:BpD+G", "_", "p:BpD+G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrong migration name format: Y.Q~m3>\"o}oK=>UIEn(It should look like this: p:BpD+G1_2_Descriptionp:BpD+G)
         //
         verifyException("com.contrastsecurity.cassandra.migration.resolver.MigrationInfoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationInfoHelper.extractVersionAndDescription("1_2", "1_2", "1_2", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrong migration name format: 1_2(It should look like this: 1_21_21_2Description)
         //
         verifyException("com.contrastsecurity.cassandra.migration.resolver.MigrationInfoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationInfoHelper.extractVersionAndDescription("Wrong migration name format: ", "Wrong migration name format: ", "Wrong migration name format: ", "Wrong migration name format: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationInfoHelper.extractVersionAndDescription((String) null, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.resolver.MigrationInfoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationInfoHelper.extractVersionAndDescription("IdCLmq", "", "m", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: IdCL
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationVersion", e);
      }
  }
}
