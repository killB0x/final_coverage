/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 21:40:12 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.script;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.script.CqlStatementBuilder;
import com.contrastsecurity.cassandra.migration.script.Delimiter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CqlStatementBuilder_ESTest extends CqlStatementBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.addLine("'j(<HOIC");
      assertEquals("'j(<HOIC", cqlStatementBuilder0.getCqlStatement());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Delimiter delimiter0 = new Delimiter("", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      CqlStatementBuilder.stripDelimiter(stringBuilder0, delimiter0);
      assertEquals("", delimiter0.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      String string0 = cqlStatementBuilder0.simplifyLine("`");
      assertEquals("`", string0);
      assertTrue(cqlStatementBuilder0.isEmpty());
      assertTrue(cqlStatementBuilder0.canDiscard());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      String string0 = cqlStatementBuilder0.simplifyLine("");
      assertEquals("", string0);
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertTrue(cqlStatementBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.removeEscapedQuotes(" ,[)L17J&y:,OJ");
      assertTrue(cqlStatementBuilder0.isEmpty());
      assertTrue(cqlStatementBuilder0.canDiscard());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.removeEscapedQuotes("");
      assertTrue(cqlStatementBuilder0.isEmpty());
      assertTrue(cqlStatementBuilder0.canDiscard());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.addLine("!a`J\")4+=Tkcd{+");
      boolean boolean0 = cqlStatementBuilder0.isTerminated();
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      boolean boolean0 = cqlStatementBuilder0.isSingleLineComment("--S");
      assertTrue(cqlStatementBuilder0.isEmpty());
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      boolean boolean0 = cqlStatementBuilder0.isSingleLineComment("v0hZi$#utY`1\"3QA/>");
      assertTrue(cqlStatementBuilder0.isEmpty());
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.addLine("m9K");
      boolean boolean0 = cqlStatementBuilder0.isEmpty();
      //  // Unstable assertion: assertTrue(cqlStatementBuilder0.isTerminated());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.addLine("E92ne%x|u");
      cqlStatementBuilder0.getCqlStatement();
      //  // Unstable assertion: assertTrue(cqlStatementBuilder0.isTerminated());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.extractAlternateOpenQuote("pq#.x[>i,]v6d");
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertTrue(cqlStatementBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      assertTrue(cqlStatementBuilder0.canDiscard());
      
      cqlStatementBuilder0.applyStateChanges("'+Dx");
      boolean boolean0 = cqlStatementBuilder0.endWithOpenMultilineStringLiteral();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      boolean boolean0 = cqlStatementBuilder0.endWithOpenMultilineStringLiteral();
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertTrue(cqlStatementBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.computeAlternateCloseQuote("'");
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertTrue(cqlStatementBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.computeAlternateCloseQuote("");
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertTrue(cqlStatementBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.cleanToken((String) null);
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertTrue(cqlStatementBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.cleanToken("B4!SOvj>^Y:mFY%;");
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertTrue(cqlStatementBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.cleanToken("");
      assertTrue(cqlStatementBuilder0.isEmpty());
      assertTrue(cqlStatementBuilder0.canDiscard());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.changeDelimiterIfNecessary("L[", (Delimiter) null);
      assertTrue(cqlStatementBuilder0.isEmpty());
      assertTrue(cqlStatementBuilder0.canDiscard());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      Delimiter delimiter0 = new Delimiter("/*", true);
      cqlStatementBuilder0.changeDelimiterIfNecessary("/*", delimiter0);
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertTrue(cqlStatementBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      Delimiter delimiter0 = cqlStatementBuilder0.getDefaultDelimiter();
      Delimiter delimiter1 = cqlStatementBuilder0.changeDelimiterIfNecessary(" ", delimiter0);
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertEquals(";", delimiter1.getDelimiter());
      assertFalse(delimiter1.isAloneOnLine());
      assertTrue(cqlStatementBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      StringBuilder stringBuilder0 = new StringBuilder();
      Delimiter delimiter0 = cqlStatementBuilder0.getDefaultDelimiter();
      // Undeclared exception!
      try { 
        CqlStatementBuilder.stripDelimiter(stringBuilder0, delimiter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start -1, end 0, length 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      // Undeclared exception!
      try { 
        cqlStatementBuilder0.simplifyLine((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      // Undeclared exception!
      try { 
        cqlStatementBuilder0.removeEscapedQuotes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      // Undeclared exception!
      try { 
        cqlStatementBuilder0.isSingleLineComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      // Undeclared exception!
      try { 
        cqlStatementBuilder0.applyStateChanges((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.script.CqlStatementBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      // Undeclared exception!
      try { 
        cqlStatementBuilder0.addLine((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      boolean boolean0 = cqlStatementBuilder0.isCommentDirective((String) null);
      assertFalse(boolean0);
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertTrue(cqlStatementBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      boolean boolean0 = cqlStatementBuilder0.isEmpty();
      assertTrue(boolean0);
      assertTrue(cqlStatementBuilder0.canDiscard());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.addLine("*/");
      assertEquals("*/", cqlStatementBuilder0.getCqlStatement());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.addLine("/*%5.&RL/'*/");
      //  // Unstable assertion: assertEquals("/*%5.&RL/'*", cqlStatementBuilder0.getCqlStatement());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.addLine("'F'");
      assertEquals("'F'", cqlStatementBuilder0.getCqlStatement());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.addLine("Y0MZRW/J^'");
      cqlStatementBuilder0.addLine("Y0MZRW/J^'");
      assertEquals("Y0MZRW/J^'\nY0MZRW/J^'", cqlStatementBuilder0.getCqlStatement());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.addLine(", ");
      //  // Unstable assertion: assertTrue(cqlStatementBuilder0.isTerminated());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        CqlStatementBuilder.stripDelimiter(stringBuilder0, (Delimiter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.script.CqlStatementBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      Delimiter delimiter0 = new Delimiter("L5loLvL.YOB^-8A", true);
      cqlStatementBuilder0.setDelimiter(delimiter0);
      cqlStatementBuilder0.addLine("L5loLvL.YOB^-8A");
      assertTrue(cqlStatementBuilder0.isTerminated());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      assertTrue(cqlStatementBuilder0.canDiscard());
      
      cqlStatementBuilder0.applyStateChanges("Elf_B)v?/txT");
      boolean boolean0 = cqlStatementBuilder0.canDiscard();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      assertTrue(cqlStatementBuilder0.canDiscard());
      
      cqlStatementBuilder0.applyStateChanges("/*com.contrastsecurity.cassandra.migration.script.Delimiter");
      boolean boolean0 = cqlStatementBuilder0.canDiscard();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      assertTrue(cqlStatementBuilder0.canDiscard());
      
      cqlStatementBuilder0.applyStateChanges("XSM'");
      boolean boolean0 = cqlStatementBuilder0.canDiscard();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      boolean boolean0 = cqlStatementBuilder0.canDiscard();
      assertTrue(cqlStatementBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.setDelimiter((Delimiter) null);
      cqlStatementBuilder0.addLine("T*,/!");
      assertEquals("T*,/!", cqlStatementBuilder0.getCqlStatement());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.addLine("--'FQ]");
      assertEquals("--'FQ]", cqlStatementBuilder0.getCqlStatement());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.addLine("/*");
      cqlStatementBuilder0.addLine("/*");
      //  // Unstable assertion: assertEquals("/*\n/", cqlStatementBuilder0.getCqlStatement());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      Delimiter delimiter0 = new Delimiter("_n']v'", false);
      cqlStatementBuilder0.setDelimiter(delimiter0);
      // Undeclared exception!
      try { 
        cqlStatementBuilder0.addLine("/");
       //  fail("Expecting exception: StringIndexOutOfBoundsException");
       // Unstable assertion
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start -5, end 1, length 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.getCqlStatement();
      assertTrue(cqlStatementBuilder0.isEmpty());
      assertTrue(cqlStatementBuilder0.canDiscard());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.extractNewDelimiterFromLine("p.j.:");
      assertTrue(cqlStatementBuilder0.isEmpty());
      assertTrue(cqlStatementBuilder0.canDiscard());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.setLineNumber((-613));
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertTrue(cqlStatementBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.isTerminated();
      assertTrue(cqlStatementBuilder0.canDiscard());
      assertTrue(cqlStatementBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CqlStatementBuilder cqlStatementBuilder0 = new CqlStatementBuilder();
      cqlStatementBuilder0.computeAlternateCloseQuote((String) null);
      assertTrue(cqlStatementBuilder0.isEmpty());
      assertTrue(cqlStatementBuilder0.canDiscard());
  }
}
