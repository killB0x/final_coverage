/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 21:44:19 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.info;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.config.MigrationType;
import com.contrastsecurity.cassandra.migration.info.AppliedMigration;
import com.contrastsecurity.cassandra.migration.info.MigrationInfo;
import com.contrastsecurity.cassandra.migration.info.MigrationInfoContext;
import com.contrastsecurity.cassandra.migration.info.MigrationState;
import com.contrastsecurity.cassandra.migration.info.MigrationVersion;
import com.contrastsecurity.cassandra.migration.info.ResolvedMigration;
import java.math.BigInteger;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MigrationInfo_ESTest extends MigrationInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      Integer integer0 = new Integer(3);
      MigrationType migrationType0 = MigrationType.BASELINE;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "Qxe17B~}{_lX<|5O", migrationType0, "|(3ydN7+AD2uOz", integer0, "|(3ydN7+AD2uOz", 3, false);
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      migrationInfoContext0.baseline = migrationVersion0;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      migrationInfoContext0.target = migrationVersion0;
      resolvedMigration0.setVersion(migrationVersion0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.PENDING, migrationState0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      migrationInfoContext0.baseline = migrationInfoContext0.lastResolved;
      resolvedMigration0.setVersion(migrationInfoContext0.lastApplied);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.ABOVE_TARGET, migrationState0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationVersion migrationVersion0 = migrationInfo0.getVersion();
      assertNull(migrationVersion0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      resolvedMigration0.setScript("Q");
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      String string0 = migrationInfo0.getScript();
      assertEquals("Q", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(1275);
      MockDate mockDate0 = new MockDate(1275);
      AppliedMigration appliedMigration0 = new AppliedMigration(1275, 1275, migrationInfoContext0.schema, "", migrationType0, "", integer0, mockDate0, "", 1275, true);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.getScript();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer((-3171));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "6i9y5MJA@;O_f", migrationType0, "=A<%t5s.SutbO6dU", integer0, "=A<%t5s.SutbO6dU", (-3171), true);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      ResolvedMigration resolvedMigration0 = migrationInfo0.getResolvedMigration();
      assertNull(resolvedMigration0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MigrationVersion migrationVersion0 = new MigrationVersion(bigInteger0, "ZOylChD");
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer((-1));
      MockDate mockDate0 = new MockDate();
      AppliedMigration appliedMigration0 = new AppliedMigration(0, 2370, migrationVersion0, (String) null, migrationType0, "IGNORED", integer0, mockDate0, "ZOylChD", 2221, false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Date date0 = migrationInfo0.getInstalledOn();
      assertSame(mockDate0, date0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(0);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "", migrationType0, "", integer0, "R!Y|bdPUQw", 0, false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Integer integer1 = migrationInfo0.getExecutionTime();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(1275);
      MockDate mockDate0 = new MockDate(1275);
      AppliedMigration appliedMigration0 = new AppliedMigration(1275, 1275, migrationInfoContext0.target, "", migrationType0, "", integer0, mockDate0, "", 1275, true);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Integer integer1 = migrationInfo0.getExecutionTime();
      assertEquals(1275, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      String string0 = migrationInfo0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(0);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      AppliedMigration appliedMigration0 = new AppliedMigration(0, 0, migrationVersion0, "", migrationType0, "", integer0, mockDate0, "#2s[WRZM|", 0, false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.fromVersion((String) null);
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(0);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, (String) null, migrationType0, "", integer0, (String) null, 0, false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Integer integer1 = migrationInfo0.getChecksum();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = Integer.valueOf((-2897));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "2R}]8Tifw ZES=Yyx", migrationType0, "2R}]8Tifw ZES=Yyx", integer0, "com.contrastsecurity.cassandra.migration.info.ResolvedMigration", (-2897), true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Integer integer1 = migrationInfo0.getChecksum();
      assertEquals((-2897), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      AppliedMigration appliedMigration0 = migrationInfo0.getAppliedMigration();
      assertNull(appliedMigration0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(11);
      MockDate mockDate0 = new MockDate((-39L));
      AppliedMigration appliedMigration0 = new AppliedMigration((-2521), 11, migrationInfoContext0.target, "", migrationType0, "Unable to location resource on disk: ", integer0, mockDate0, " mismatch for migration %s\n-> Applied to database : %s\n-> Resolved locally    : %s", 3, true);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      AppliedMigration appliedMigration1 = migrationInfo0.getAppliedMigration();
      assertTrue(appliedMigration1.isSuccess());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(0);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      AppliedMigration appliedMigration0 = new AppliedMigration(0, 0, migrationVersion0, "", migrationType0, "", integer0, mockDate0, "#2s[WRZM|", 0, false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      AppliedMigration appliedMigration1 = migrationInfo0.getAppliedMigration();
      assertSame(appliedMigration0, appliedMigration1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer((-43));
      MockDate mockDate0 = new MockDate((-1549), (-43), 842);
      AppliedMigration appliedMigration0 = new AppliedMigration((-43), (-1549), (MigrationVersion) null, "E", migrationType0, "E", integer0, mockDate0, "6", (-1549), false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      AppliedMigration appliedMigration1 = migrationInfo0.getAppliedMigration();
      assertEquals((-43), appliedMigration1.getVersionRank());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(0);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      AppliedMigration appliedMigration0 = new AppliedMigration(0, 0, migrationVersion0, "", migrationType0, "", integer0, mockDate0, "#2s[WRZM|", 0, false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      int int0 = migrationInfo0.compareTo(migrationInfo0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(0);
      MockDate mockDate0 = new MockDate(2, (-121), 0, (-1), (-2961));
      AppliedMigration appliedMigration0 = new AppliedMigration((-1298), 0, migrationVersion0, "'ih3g$WR':{6FXkr", migrationType0, "'ih3g$WR':{6FXkr", integer0, mockDate0, "'ih3g$WR':{6FXkr", (-2961), true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      AppliedMigration appliedMigration1 = new AppliedMigration((MigrationVersion) null, "pXokrl_57y)4C(2g!`", migrationType0, "", integer0, "", (-1), false);
      MigrationInfo migrationInfo1 = new MigrationInfo(resolvedMigration0, appliedMigration1, migrationInfoContext0);
      int int0 = migrationInfo0.compareTo(migrationInfo1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      resolvedMigration0.setVersion(migrationInfoContext0.lastApplied);
      MigrationType migrationType0 = MigrationType.SCHEMA;
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "y", migrationType0, "com.contrastsecurity.cassandra.migration.resolver.cql.CqlMigrationExecutor", (Integer) null, (String) null, 0, false);
      MigrationInfo migrationInfo1 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      int int0 = migrationInfo0.compareTo(migrationInfo1);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.getState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.getScript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.getChecksum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer(1);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.target, "Umu*${6B4\"%i9U4", migrationType0, "Umu*${6B4\"%i9U4", integer0, "y$t4X@RhU>Bj", 1322, false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.FAILED, migrationState0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.getVersion();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer(0);
      MockDate mockDate0 = new MockDate(1, 31, (-814));
      AppliedMigration appliedMigration0 = new AppliedMigration(0, 0, migrationInfoContext0.lastResolved, "+hE{^-5", migrationType0, (String) null, integer0, mockDate0, "+hE{^-5", 31, true);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationVersion migrationVersion0 = migrationInfo0.getVersion();
      migrationInfoContext0.target = migrationVersion0;
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationInfoContext0.lastResolved, "", migrationType0, "", (Integer) null, "", 577, true);
      MigrationInfo migrationInfo1 = new MigrationInfo((ResolvedMigration) null, appliedMigration1, migrationInfoContext0);
      migrationInfo1.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      resolvedMigration0.setVersion(migrationInfoContext0.lastApplied);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationType migrationType0 = MigrationType.CQL;
      resolvedMigration0.setType(migrationType0);
      // Undeclared exception!
      try { 
        migrationInfo0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfoContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo1 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      resolvedMigration0.setScript("v0xhyEPS :w");
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer((-80));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastApplied, "HROU@_$FX$", migrationType0, "", integer0, "", (-80), false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      ResolvedMigration resolvedMigration1 = new ResolvedMigration();
      MigrationInfo migrationInfo1 = new MigrationInfo(resolvedMigration1, appliedMigration0, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      MigrationInfo migrationInfo1 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      MigrationInfo migrationInfo1 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, (MigrationInfoContext) null);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(1964);
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, "$VALUES", migrationType0, "$VALUES", integer0, "$VALUES", (-1), false);
      MigrationInfo migrationInfo1 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertFalse(boolean0);
      assertFalse(migrationInfo1.equals((Object)migrationInfo0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer((-5));
      MockDate mockDate0 = new MockDate();
      AppliedMigration appliedMigration0 = new AppliedMigration((-5), (-5), migrationInfoContext0.lastApplied, "C4ecksm", migrationType0, "C4ecksm", integer0, mockDate0, "C4ecksm", (-5), false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationInfo migrationInfo1 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, (MigrationInfoContext) null);
      MigrationInfo migrationInfo1 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, (MigrationInfoContext) null);
      // Undeclared exception!
      try { 
        migrationInfo0.equals(migrationInfo1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer((-1258));
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, "Y]Xg<*1s'", migrationType0, "Y]Xg<*1s'", integer0, "com.contrastsecurity.cassandra.migration.CassandraMigrationException", (-602), true);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Object object0 = new Object();
      boolean boolean0 = migrationInfo0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(0);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "", migrationType0, "", integer0, "R!Y|bdPUQw", 0, false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer((-80));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.target, "HROU@_$FX$", migrationType0, "", integer0, "", (-80), false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      MigrationInfo migrationInfo1 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      Integer integer0 = new Integer(3);
      resolvedMigration0.setDescription("");
      resolvedMigration0.setChecksum(integer0);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "Description", (MigrationType) null, "", integer0, "", 3, false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNotNull(string0);
      assertEquals("Migration Description mismatch for migration << Empty Schema >>\n-> Applied to database : Description\n-> Resolved locally    : ", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      resolvedMigration0.setDescription("a");
      Integer integer0 = new Integer(3);
      resolvedMigration0.setChecksum(integer0);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastApplied, "a", (MigrationType) null, "DesFcription", integer0, "aSC'-GbP[4Yjh%", 31, false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      Integer integer0 = new Integer(3);
      resolvedMigration0.setChecksum(integer0);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastApplied, "a", (MigrationType) null, "DesFcription", integer0, "aSC'-GbP[4Yjh%", 31, false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      Integer integer0 = new Integer(3);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastApplied, "a", (MigrationType) null, "DesFcription", integer0, "aSC'-GbP[4Yjh%", 31, false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertEquals("Migration Checksum mismatch for migration << Empty Schema >>\n-> Applied to database : 3\n-> Resolved locally    : null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationVersion migrationVersion0 = migrationInfoContext0.lastApplied;
      migrationInfoContext0.baseline = migrationVersion0;
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer((-80));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "HROU@_$FX$", migrationType0, "", integer0, "", (-80), false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      resolvedMigration0.setVersion(migrationInfoContext0.lastApplied);
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      migrationInfoContext0.lastApplied = migrationVersion0;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      migrationInfoContext0.target = migrationVersion0;
      String string0 = migrationInfo0.validate();
      assertNotNull(string0);
      assertEquals("Detected resolved migration not applied to database: << Empty Schema >>", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      resolvedMigration0.setVersion(migrationInfoContext0.lastApplied);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      migrationInfoContext0.target = migrationInfoContext0.lastResolved;
      String string0 = migrationInfo0.validate();
      assertNotNull(string0);
      assertEquals("Detected resolved migration not applied to database: << Empty Schema >>", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(3759);
      MockDate mockDate0 = new MockDate(2, 3759, 9, 2, 3759, 9);
      AppliedMigration appliedMigration0 = new AppliedMigration(3759, 2, migrationInfoContext0.lastApplied, "Checksum", migrationType0, "IYg?g~2[<g", integer0, mockDate0, "Checksum", 1799, true);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNotNull(string0);
      assertEquals("Detected applied migration not resolved locally: << Empty Schema >>", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer(8);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastApplied, "O X:dYu>mmy9i`", migrationType0, "O X:dYu>mmy9i`", integer0, "O X:dYu>mmy9i`", 8, false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(178);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastApplied, "Descr+:_ption", migrationType0, "Descr+:_ption", integer0, "Descr+:_ption", 178, false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      migrationInfoContext0.pendingOrFuture = true;
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      Integer integer0 = new Integer((-796));
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, "y", migrationType0, "y", integer0, "y", (-796), false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Integer integer1 = migrationInfo0.getExecutionTime();
      assertEquals((-796), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      Integer integer0 = migrationInfo0.getExecutionTime();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(3759);
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, (String) null, migrationType0, (String) null, integer0, "", (-1666), false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      Date date0 = migrationInfo0.getInstalledOn();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      Date date0 = migrationInfo0.getInstalledOn();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer((-20));
      AppliedMigration appliedMigration0 = new AppliedMigration((-20), 200, migrationInfoContext0.lastApplied, "5.2W2Hztwb'Td^", migrationType0, "5.2W2Hztwb'Td^", integer0, (Date) null, "5.2W2Hztwb'Td^", 200, true);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.OUT_OF_ORDER, migrationState0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer(5);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastApplied, "C4ecksm", migrationType0, "C4ecksm", integer0, "C4ecksm", 5, true);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.SUCCESS, migrationState0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "k2iQO-=w-+R_k.&^r~9", migrationType0, "k2iQO-=w-+R_k.&^r~9", (Integer) null, "k2iQO-=w-+R_k.&^r~9", (-1612), true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.FUTURE_SUCCESS, migrationState0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer((-13));
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "Descr+:_ption", migrationType0, "Descr+:_ption", integer0, "Descr+:_ption", (-13), false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.FUTURE_FAILED, migrationState0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer(1529);
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "}", migrationType0, "}", integer0, "}", 1529, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.MISSING_SUCCESS, migrationState0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      Integer integer0 = new Integer(583);
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "C4ec2ksm", migrationType0, "C4ec2ksm", integer0, "C4ec2ksm", 583, false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.MISSING_FAILED, migrationState0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(20);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastApplied, "C4ecksm", migrationType0, "C4ecksm", integer0, "C4ecksm", 20, false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.BASELINE, migrationState0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer(13);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "-4eq", migrationType0, "-4eq", integer0, "-4eq", 13, false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.SUCCESS, migrationState0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      resolvedMigration0.setVersion(migrationInfoContext0.lastApplied);
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      migrationInfoContext0.lastApplied = migrationVersion0;
      migrationInfoContext0.outOfOrder = true;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      migrationInfoContext0.target = migrationVersion0;
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.PENDING, migrationState0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      resolvedMigration0.setVersion(migrationInfoContext0.lastApplied);
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      migrationInfoContext0.lastApplied = migrationVersion0;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      migrationInfoContext0.target = migrationVersion0;
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.IGNORED, migrationState0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      resolvedMigration0.setVersion(migrationInfoContext0.lastApplied);
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      migrationInfoContext0.baseline = migrationVersion0;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.BELOW_BASELINE, migrationState0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      resolvedMigration0.setVersion(migrationInfoContext0.lastApplied);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer((-1567));
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, (String) null, migrationType0, (String) null, integer0, (String) null, (-1567), false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.getScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      Integer integer0 = new Integer(3);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastApplied, "a", (MigrationType) null, "DesFcription", integer0, "aSC'-GbP[4Yjh%", 31, false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.getDescription();
      assertEquals("a", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.getDescription();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(6);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastApplied, "C4ecksm", migrationType0, "C4ecksm", integer0, "C4ecksm", 6, false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      Integer integer1 = migrationInfo0.getChecksum();
      assertEquals(6, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      Integer integer0 = migrationInfo0.getChecksum();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(0);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "", migrationType0, "", integer0, "R!Y|bdPUQw", 0, false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      MigrationType migrationType1 = migrationInfo0.getType();
      assertSame(migrationType1, migrationType0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      migrationInfo0.getType();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(6);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastApplied, "Descriptiod", migrationType0, "Descriptiod", integer0, "Descriptiod", 6, false);
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNotNull(string0);
      assertEquals("Migration Type mismatch for migration << Empty Schema >>\n-> Applied to database : JAVA_DRIVER\n-> Resolved locally    : null", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(1961);
      Instant instant0 = MockInstant.ofEpochMilli((-1994L));
      Date date0 = Date.from(instant0);
      AppliedMigration appliedMigration0 = new AppliedMigration(2480, 1961, migrationVersion0, "Migration ", migrationType0, "Migration ", integer0, date0, "Migration ", 1, false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      AppliedMigration appliedMigration1 = migrationInfo0.getAppliedMigration();
      assertEquals(1, appliedMigration1.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(1961);
      Instant instant0 = MockInstant.ofEpochMilli((-1994L));
      Date date0 = Date.from(instant0);
      AppliedMigration appliedMigration0 = new AppliedMigration(2480, 1961, migrationVersion0, "Migration ", migrationType0, "Migration ", integer0, date0, "Migration ", 1, false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      ResolvedMigration resolvedMigration1 = migrationInfo0.getResolvedMigration();
      assertNull(resolvedMigration1.getDescription());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.compareTo(migrationInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }
}
