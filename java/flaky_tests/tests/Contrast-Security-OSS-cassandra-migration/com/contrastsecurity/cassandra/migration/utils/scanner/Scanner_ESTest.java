/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 22:20:04 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.utils.scanner;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.config.ScriptsLocation;
import com.contrastsecurity.cassandra.migration.utils.scanner.Resource;
import com.contrastsecurity.cassandra.migration.utils.scanner.Scanner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Scanner_ESTest extends Scanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Scanner scanner0 = new Scanner(classLoader0);
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      Class<Object> class0 = Object.class;
      Class<?>[] classArray0 = scanner0.scanForClasses(scriptsLocation0, class0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Scanner scanner0 = new Scanner(classLoader1);
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("filesystem:");
      Class<Object> class0 = Object.class;
      try { 
        scanner0.scanForClasses(scriptsLocation0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to determine URL for classpath location:  (ClassLoader: jdk.internal.loader.ClassLoaders$PlatformClassLoader@65d6b83b)
         //
         verifyException("com.contrastsecurity.cassandra.migration.utils.scanner.classpath.ClassPathScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Scanner scanner0 = new Scanner(classLoader0);
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("filesystem:");
      Resource[] resourceArray0 = scanner0.scanForResources(scriptsLocation0, "filesystem:", "filesystem:");
      assertEquals(0, resourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Scanner scanner0 = new Scanner((ClassLoader) null);
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("com.contrastsecurity.cassandra.migration.utils.scanner.Scanner");
      // Undeclared exception!
      try { 
        scanner0.scanForResources(scriptsLocation0, "com.contrastsecurity.cassandra.migration.utils.scanner.Scanner", "filesystem:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to scan for CQL migrations in location: classpath:com/contrastsecurity/cassandra/migration/utils/scanner/Scanner
         //
         verifyException("com.contrastsecurity.cassandra.migration.utils.scanner.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Scanner scanner0 = new Scanner(classLoader0);
      Class<Integer> class0 = Integer.class;
      try { 
        scanner0.scanForClasses((ScriptsLocation) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.utils.scanner.Scanner", e);
      }
  }
}
