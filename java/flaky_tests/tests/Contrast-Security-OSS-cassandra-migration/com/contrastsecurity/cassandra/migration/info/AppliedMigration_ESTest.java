/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 21:50:35 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.info;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.config.MigrationType;
import com.contrastsecurity.cassandra.migration.info.AppliedMigration;
import com.contrastsecurity.cassandra.migration.info.MigrationVersion;
import java.math.BigInteger;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AppliedMigration_ESTest extends AppliedMigration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "\"VALUES", migrationType0, "\"VALUES", (Integer) null, "\"VALUES", 0, false);
      Integer integer0 = new Integer((-3366));
      MockDate mockDate0 = new MockDate((-3097));
      AppliedMigration appliedMigration1 = new AppliedMigration((-3097), 0, migrationVersion0, ":", migrationType0, ":", integer0, mockDate0, "\"VALUES", 0, false);
      boolean boolean0 = appliedMigration0.equals(appliedMigration1);
      assertEquals("\"VALUES", appliedMigration1.getInstalledBy());
      assertEquals(0, appliedMigration1.getInstalledRank());
      assertFalse(appliedMigration1.isSuccess());
      assertEquals((-3097), appliedMigration1.getVersionRank());
      assertFalse(appliedMigration0.isSuccess());
      assertFalse(boolean0);
      assertEquals(0, appliedMigration0.getExecutionTime());
      assertEquals(0, appliedMigration1.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(76);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "cassandra_migration_version", migrationType0, "!r", integer0, (String) null, 76, false);
      MockDate mockDate0 = new MockDate();
      AppliedMigration appliedMigration1 = new AppliedMigration((-2147483638), (-2147483638), migrationVersion0, (String) null, migrationType0, "cassandra_migration_version", integer0, mockDate0, "!r", 76, false);
      boolean boolean0 = appliedMigration0.equals(appliedMigration1);
      assertEquals("!r", appliedMigration1.getInstalledBy());
      assertEquals("!r", appliedMigration0.getScript());
      assertEquals((-2147483638), appliedMigration1.getInstalledRank());
      assertEquals(76, appliedMigration0.getExecutionTime());
      assertFalse(appliedMigration1.isSuccess());
      assertEquals("cassandra_migration_version", appliedMigration0.getDescription());
      assertFalse(boolean0);
      assertEquals(76, appliedMigration1.getExecutionTime());
      assertEquals((-2147483638), appliedMigration1.getVersionRank());
      assertFalse(appliedMigration0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "?{4z", migrationType0, (String) null, integer0, "Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", Integer.MIN_VALUE, true);
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, (String) null, migrationType0, "Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", integer0, "<< Latest Version >>", 3, true);
      boolean boolean0 = appliedMigration1.equals(appliedMigration0);
      assertEquals("Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", appliedMigration0.getInstalledBy());
      assertEquals(3, appliedMigration1.getExecutionTime());
      assertEquals("Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", appliedMigration1.getScript());
      assertFalse(boolean0);
      assertEquals("<< Latest Version >>", appliedMigration1.getInstalledBy());
      assertTrue(appliedMigration1.isSuccess());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "`6", migrationType0, "`6", (Integer) null, "`6", (-959), false);
      boolean boolean0 = appliedMigration0.isSuccess();
      assertEquals((-959), appliedMigration0.getExecutionTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MigrationVersion migrationVersion0 = new MigrationVersion((BigInteger) null, "0}");
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer((-2477));
      MockDate mockDate0 = new MockDate();
      AppliedMigration appliedMigration0 = new AppliedMigration(512, 0, migrationVersion0, "5", migrationType0, "", integer0, mockDate0, "R0cQ_zwW", 197, false);
      int int0 = appliedMigration0.getVersionRank();
      assertEquals("R0cQ_zwW", appliedMigration0.getInstalledBy());
      assertEquals(197, appliedMigration0.getExecutionTime());
      assertEquals(512, int0);
      assertEquals(0, appliedMigration0.getInstalledRank());
      assertFalse(appliedMigration0.isSuccess());
      assertEquals("5", appliedMigration0.getDescription());
      assertEquals("", appliedMigration0.getScript());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      MockDate mockDate0 = new MockDate();
      AppliedMigration appliedMigration0 = new AppliedMigration((-1), 200, migrationVersion0, "<< Current Version >>", migrationType0, "...", (Integer) null, mockDate0, "<< Current Version >>", (-1), true);
      int int0 = appliedMigration0.getVersionRank();
      assertTrue(appliedMigration0.isSuccess());
      assertEquals(200, appliedMigration0.getInstalledRank());
      assertEquals((-1), appliedMigration0.getExecutionTime());
      assertEquals("<< Current Version >>", appliedMigration0.getInstalledBy());
      assertEquals("...", appliedMigration0.getScript());
      assertEquals("<< Current Version >>", appliedMigration0.getDescription());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(2027);
      MigrationType migrationType0 = MigrationType.SCHEMA;
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, "", migrationType0, "com.contrastsecurity.cassandra.migration.info.AppliedMigration", integer0, (String) null, 19, false);
      appliedMigration0.getVersion();
      assertEquals("com.contrastsecurity.cassandra.migration.info.AppliedMigration", appliedMigration0.getScript());
      assertEquals("", appliedMigration0.getDescription());
      assertFalse(appliedMigration0.isSuccess());
      assertEquals(19, appliedMigration0.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer((-4290));
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, "-s.", migrationType0, (String) null, integer0, "8MYR7", 8, false);
      String string0 = appliedMigration0.getScript();
      assertNull(string0);
      assertFalse(appliedMigration0.isSuccess());
      assertEquals(8, appliedMigration0.getExecutionTime());
      assertEquals("8MYR7", appliedMigration0.getInstalledBy());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "$VALUIS", migrationType0, "$VALUIS", (Integer) null, "$VALUIS", 0, false);
      appliedMigration0.getScript();
      assertFalse(appliedMigration0.isSuccess());
      assertEquals(0, appliedMigration0.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer(584);
      AppliedMigration appliedMigration0 = new AppliedMigration(2027, 2027, migrationVersion0, "...", migrationType0, " \"1 x)Bk", integer0, (Date) null, " \"1 x)Bk", 4, false);
      int int0 = appliedMigration0.getInstalledRank();
      assertEquals(" \"1 x)Bk", appliedMigration0.getScript());
      assertEquals("...", appliedMigration0.getDescription());
      assertFalse(appliedMigration0.isSuccess());
      assertEquals(" \"1 x)Bk", appliedMigration0.getInstalledBy());
      assertEquals(2027, int0);
      assertEquals(4, appliedMigration0.getExecutionTime());
      assertEquals(2027, appliedMigration0.getVersionRank());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer(2731);
      MockDate mockDate0 = new MockDate(31, 753, 13);
      AppliedMigration appliedMigration0 = new AppliedMigration(31, (-563), migrationVersion0, "JAVA_DRIVER", migrationType0, "...", integer0, mockDate0, "lbG5Z`GFn!zW00{v0,", (-1554), true);
      int int0 = appliedMigration0.getInstalledRank();
      assertEquals("JAVA_DRIVER", appliedMigration0.getDescription());
      assertEquals("...", appliedMigration0.getScript());
      assertEquals(31, appliedMigration0.getVersionRank());
      assertTrue(appliedMigration0.isSuccess());
      assertEquals((-563), int0);
      assertEquals((-1554), appliedMigration0.getExecutionTime());
      assertEquals("lbG5Z`GFn!zW00{v0,", appliedMigration0.getInstalledBy());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MigrationVersion migrationVersion0 = new MigrationVersion(bigInteger0, "?Uli?QL");
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer((-748));
      MockDate mockDate0 = new MockDate((-2016L));
      AppliedMigration appliedMigration0 = new AppliedMigration(0, 31, migrationVersion0, "?Uli?QL", migrationType0, "", integer0, mockDate0, "?Uli?QL", (-748), false);
      appliedMigration0.getInstalledOn();
      assertEquals("?Uli?QL", appliedMigration0.getDescription());
      assertEquals("", appliedMigration0.getScript());
      assertFalse(appliedMigration0.isSuccess());
      assertEquals("?Uli?QL", appliedMigration0.getInstalledBy());
      assertEquals(31, appliedMigration0.getInstalledRank());
      assertEquals(0, appliedMigration0.getVersionRank());
      assertEquals((-748), appliedMigration0.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      Integer integer0 = new Integer(210);
      MigrationType migrationType0 = MigrationType.BASELINE;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", migrationType0, "Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", integer0, (String) null, 210, false);
      String string0 = appliedMigration0.getInstalledBy();
      assertEquals(210, appliedMigration0.getExecutionTime());
      assertFalse(appliedMigration0.isSuccess());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "$VALUES", migrationType0, "$VALUES", (Integer) null, "$VALUES", 197, false);
      appliedMigration0.getInstalledBy();
      assertFalse(appliedMigration0.isSuccess());
      assertEquals(197, appliedMigration0.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "$VALUIS", migrationType0, "$VALUIS", (Integer) null, "$VALUIS", 0, false);
      int int0 = appliedMigration0.getExecutionTime();
      assertFalse(appliedMigration0.isSuccess());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "?{4z", migrationType0, (String) null, integer0, "Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", Integer.MIN_VALUE, true);
      int int0 = appliedMigration0.getExecutionTime();
      assertEquals(Integer.MIN_VALUE, int0);
      assertTrue(appliedMigration0.isSuccess());
      assertEquals("Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", appliedMigration0.getInstalledBy());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer((-548));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, (String) null, migrationType0, "", integer0, (String) null, (-1275), false);
      String string0 = appliedMigration0.getDescription();
      assertFalse(appliedMigration0.isSuccess());
      assertEquals((-1275), appliedMigration0.getExecutionTime());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer((-687));
      MockDate mockDate0 = new MockDate();
      AppliedMigration appliedMigration0 = new AppliedMigration((-704), (-1647), migrationVersion0, "", migrationType0, "...", integer0, mockDate0, "", (-634), true);
      String string0 = appliedMigration0.getDescription();
      assertEquals((-1647), appliedMigration0.getInstalledRank());
      assertEquals((-634), appliedMigration0.getExecutionTime());
      assertEquals((-704), appliedMigration0.getVersionRank());
      assertTrue(appliedMigration0.isSuccess());
      assertEquals("", string0);
      assertEquals("", appliedMigration0.getInstalledBy());
      assertEquals("...", appliedMigration0.getScript());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MigrationType migrationType0 = MigrationType.CQL;
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      Integer integer0 = new Integer(0);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "beB,?Q[l;)hf1 ", integer0, "QI4A+__!Ys}8(2:", (-959), false);
      appliedMigration0.getChecksum();
      assertFalse(appliedMigration0.isSuccess());
      assertEquals((-959), appliedMigration0.getExecutionTime());
      assertEquals("beB,?Q[l;)hf1 ", appliedMigration0.getScript());
      assertEquals("", appliedMigration0.getDescription());
      assertEquals("QI4A+__!Ys}8(2:", appliedMigration0.getInstalledBy());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MigrationVersion migrationVersion0 = new MigrationVersion(bigInteger0, "ge6*h8dgB>9");
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer(1242);
      MockDate mockDate0 = new MockDate(0, 0, 1243);
      AppliedMigration appliedMigration0 = new AppliedMigration(0, 1242, migrationVersion0, "ge6*h8dgB>9", migrationType0, "5.qpKw8Xi/j1", integer0, mockDate0, "...", 1243, false);
      appliedMigration0.getChecksum();
      assertEquals("5.qpKw8Xi/j1", appliedMigration0.getScript());
      assertEquals("ge6*h8dgB>9", appliedMigration0.getDescription());
      assertEquals(0, appliedMigration0.getVersionRank());
      assertEquals("...", appliedMigration0.getInstalledBy());
      assertEquals(1242, appliedMigration0.getInstalledRank());
      assertFalse(appliedMigration0.isSuccess());
      assertEquals(1243, appliedMigration0.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(453);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "iDAf_Ka 8x7E", migrationType0, "2rDTP*+Os*&SL8", integer0, " \"1 x)Bk", 584, true);
      MigrationVersion migrationVersion1 = MigrationVersion.CURRENT;
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion1, " \"1 x)Bk", migrationType0, "cUr[R", integer0, "iDAf_Ka 8x7E", 1, false);
      int int0 = appliedMigration0.compareTo(appliedMigration1);
      assertEquals(1, appliedMigration1.getExecutionTime());
      assertEquals(" \"1 x)Bk", appliedMigration1.getDescription());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals("cUr[R", appliedMigration1.getScript());
      assertFalse(appliedMigration1.isSuccess());
      assertEquals("iDAf_Ka 8x7E", appliedMigration1.getInstalledBy());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(197);
      MockDate mockDate0 = new MockDate((-1103L));
      AppliedMigration appliedMigration0 = new AppliedMigration(0, 0, migrationVersion0, "...", migrationType0, "", integer0, mockDate0, "'", 0, true);
      MigrationVersion migrationVersion1 = MigrationVersion.LATEST;
      AppliedMigration appliedMigration1 = new AppliedMigration(1, 200, migrationVersion1, "", migrationType0, "e1qgAq(9k_H>OB~WM$O", (Integer) null, mockDate0, "'", 0, true);
      int int0 = appliedMigration0.compareTo(appliedMigration1);
      assertEquals(200, appliedMigration1.getInstalledRank());
      assertEquals(0, appliedMigration1.getExecutionTime());
      assertEquals(Integer.MIN_VALUE, int0);
      assertEquals("e1qgAq(9k_H>OB~WM$O", appliedMigration1.getScript());
      assertTrue(appliedMigration1.isSuccess());
      assertEquals("", appliedMigration1.getDescription());
      assertEquals("'", appliedMigration1.getInstalledBy());
      assertEquals(1, appliedMigration1.getVersionRank());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, "Invalid version <ontaining non-numeric characters. Only 0..9 and . ale allowed. Invalid version: ", migrationType0, "Invalid version <ontaining non-numeric characters. Only 0..9 and . ale allowed. Invalid version: ", (Integer) null, "Invalid version <ontaining non-numeric characters. Only 0..9 and . ale allowed. Invalid version: ", 1, false);
      // Undeclared exception!
      try { 
        appliedMigration0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.AppliedMigration", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      Integer integer0 = new Integer((-23));
      MigrationType migrationType0 = MigrationType.SCHEMA;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "q4~=/IB*!Mho/", migrationType0, "q4~=/IB*!Mho/", integer0, "q4~=/IB*!Mho/", (-23), true);
      // Undeclared exception!
      try { 
        appliedMigration0.compareTo((AppliedMigration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.AppliedMigration", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      MockDate mockDate0 = new MockDate();
      AppliedMigration appliedMigration0 = new AppliedMigration((-1), Integer.MAX_VALUE, migrationVersion0, "$VALUES", migrationType0, "$VALUES", (Integer) null, mockDate0, (String) null, (-153), true);
      appliedMigration0.hashCode();
      assertEquals(Integer.MAX_VALUE, appliedMigration0.getInstalledRank());
      assertEquals((-1), appliedMigration0.getVersionRank());
      assertEquals((-153), appliedMigration0.getExecutionTime());
      assertTrue(appliedMigration0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      Integer integer0 = new Integer(200);
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "\"5mu?~PuT~2yY?@s q|;", migrationType0, "\"5mu?~PuT~2yY?@s q|;", integer0, "\"5mu?~PuT~2yY?@s q|;", (-1), false);
      appliedMigration0.hashCode();
      assertEquals((-1), appliedMigration0.getExecutionTime());
      assertFalse(appliedMigration0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.BASELINE;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "r1QoA0MjYMT]4L", migrationType0, "r1QoA0MjYMT]4L", (Integer) null, "r1QoA0MjYMT]4L", (-41), true);
      MigrationType migrationType1 = MigrationType.CQL;
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, "r1QoA0MjYMT]4L", migrationType1, "r1QoA0MjYMT]4L", (Integer) null, "r1QoA0MjYMT]4L", (-41), true);
      boolean boolean0 = appliedMigration1.equals(appliedMigration0);
      assertEquals((-41), appliedMigration1.getExecutionTime());
      assertTrue(appliedMigration1.isSuccess());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.BASELINE;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "r1QoA0MjYMT]4L", migrationType0, "r1QoA0MjYMT]4L", (Integer) null, "r1QoA0MjYMT]4L", (-41), true);
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, "r1QoA0MjYMT]4L", migrationType0, "r1QoA0MjYMT]4L", (Integer) null, "r1QoA0MjYMT]4L", (-41), true);
      boolean boolean0 = appliedMigration1.equals(appliedMigration0);
      assertTrue(appliedMigration1.isSuccess());
      assertTrue(boolean0);
      assertEquals((-41), appliedMigration1.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, " VALUES", migrationType0, " VALUES", (Integer) null, " VALUES", 200, false);
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, " VALUES", migrationType0, " VALUES", (Integer) null, "$VALUES", 200, false);
      boolean boolean0 = appliedMigration0.equals(appliedMigration1);
      assertEquals(" VALUES", appliedMigration1.getScript());
      assertFalse(boolean0);
      assertEquals(200, appliedMigration1.getExecutionTime());
      assertFalse(appliedMigration1.isSuccess());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.BASELINE;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "\"VALUES", migrationType0, "\"VALUES", (Integer) null, "\"VALUES", 32, true);
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, "\"VALUES", migrationType0, "\"VALUES", (Integer) null, (String) null, 32, true);
      boolean boolean0 = appliedMigration1.equals(appliedMigration0);
      assertTrue(appliedMigration1.isSuccess());
      assertEquals(32, appliedMigration1.getExecutionTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "$VALUES", migrationType0, "$VALUES", (Integer) null, "$VALUES", 200, false);
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, "...", migrationType0, "...", (Integer) null, "com.contrastsecurity.cassandra.migration.info.AppliedMigration", 200, false);
      boolean boolean0 = appliedMigration0.equals(appliedMigration1);
      assertFalse(appliedMigration1.isSuccess());
      assertEquals(200, appliedMigration1.getExecutionTime());
      assertEquals("...", appliedMigration1.getScript());
      assertEquals("...", appliedMigration1.getDescription());
      assertEquals("com.contrastsecurity.cassandra.migration.info.AppliedMigration", appliedMigration1.getInstalledBy());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, ".(?=d)", migrationType0, ".(?=d)", (Integer) null, ".(?=d)", (-1267), false);
      Integer integer0 = new Integer((-1267));
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, "$VALUES", migrationType0, ".(?=d)", integer0, "$VALUES", (-1267), false);
      boolean boolean0 = appliedMigration0.equals(appliedMigration1);
      assertFalse(boolean0);
      assertEquals("$VALUES", appliedMigration1.getInstalledBy());
      assertEquals(".(?=d)", appliedMigration1.getScript());
      assertFalse(appliedMigration1.isSuccess());
      assertEquals("$VALUES", appliedMigration1.getDescription());
      assertEquals((-1267), appliedMigration1.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "\"VALUES", migrationType0, "\"G+{b8*$[/%@hf", (Integer) null, "\"VALUES", 2097, true);
      Integer integer0 = new Integer(2097);
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, "\"G+{b8*$[/%@hf", migrationType0, "\"VALUES", integer0, "\"G+{b8*$[/%@hf", 2097, true);
      boolean boolean0 = appliedMigration1.equals(appliedMigration0);
      assertEquals("\"G+{b8*$[/%@hf", appliedMigration1.getDescription());
      assertTrue(appliedMigration1.isSuccess());
      assertFalse(boolean0);
      assertEquals("\"G+{b8*$[/%@hf", appliedMigration1.getInstalledBy());
      assertEquals("\"VALUES", appliedMigration1.getScript());
      assertEquals(2097, appliedMigration1.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      Integer integer0 = new Integer(209);
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", migrationType0, "Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", integer0, "Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", 209, false);
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, "Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", migrationType0, "com.contrastsecurity.cassandra.migration.info.AppliedMigration", integer0, "Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", 209, false);
      boolean boolean0 = appliedMigration0.equals(appliedMigration1);
      assertFalse(appliedMigration1.isSuccess());
      assertEquals("Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", appliedMigration1.getInstalledBy());
      assertEquals("Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ", appliedMigration1.getDescription());
      assertFalse(boolean0);
      assertEquals(209, appliedMigration1.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = Integer.valueOf((-55));
      MockDate mockDate0 = new MockDate(957, (-1815), 2);
      AppliedMigration appliedMigration0 = new AppliedMigration((-1), 0, migrationVersion0, "#gpR]KkS[QTdZ(Mp", migrationType0, "r1QoA0MjYMT]4L", integer0, mockDate0, "2Z9UmD26]7RMX=fK", (-55), false);
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, "#gpR]KkS[QTdZ(Mp", migrationType0, "'U6Bd;*wwgV35:_L", integer0, "g/7X ", (-55), false);
      boolean boolean0 = appliedMigration0.equals(appliedMigration1);
      assertEquals((-1), appliedMigration0.getVersionRank());
      assertEquals("r1QoA0MjYMT]4L", appliedMigration0.getScript());
      assertFalse(appliedMigration0.isSuccess());
      assertEquals("g/7X ", appliedMigration1.getInstalledBy());
      assertEquals("'U6Bd;*wwgV35:_L", appliedMigration1.getScript());
      assertEquals(0, appliedMigration0.getInstalledRank());
      assertEquals("#gpR]KkS[QTdZ(Mp", appliedMigration0.getDescription());
      assertEquals("#gpR]KkS[QTdZ(Mp", appliedMigration1.getDescription());
      assertEquals((-55), appliedMigration1.getExecutionTime());
      assertEquals((-55), appliedMigration0.getExecutionTime());
      assertEquals("2Z9UmD26]7RMX=fK", appliedMigration0.getInstalledBy());
      assertFalse(appliedMigration1.isSuccess());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      Integer integer0 = new Integer((-7461));
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "\"5mu?~PuT~2yY?@s q|;", migrationType0, "OKzh", integer0, "<< Current Version >>", (-7461), false);
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, (String) null, migrationType0, "OKzh", integer0, "\"5mu?~PuT~2yY?@s q|;", (-7461), true);
      boolean boolean0 = appliedMigration0.equals(appliedMigration1);
      assertEquals((-7461), appliedMigration1.getExecutionTime());
      assertFalse(boolean0);
      assertEquals("OKzh", appliedMigration0.getScript());
      assertEquals("<< Current Version >>", appliedMigration0.getInstalledBy());
      assertTrue(appliedMigration1.isSuccess());
      assertEquals("\"5mu?~PuT~2yY?@s q|;", appliedMigration0.getDescription());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      Integer integer0 = new Integer(200);
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "\"5mu?~PuT~2yY?@s q|;", migrationType0, "\"5mu?~PuT~2yY?@s q|;", integer0, "\"5mu?~PuT~2yY?@s q|;", (-1), false);
      MockDate mockDate0 = new MockDate((-1), Integer.MIN_VALUE, (-1), 8, 2, 1763);
      AppliedMigration appliedMigration1 = new AppliedMigration((-1008), 1763, migrationVersion0, "", migrationType0, "<< Current Version >>", integer0, mockDate0, "", (-1), false);
      boolean boolean0 = appliedMigration0.equals(appliedMigration1);
      assertFalse(appliedMigration1.isSuccess());
      assertEquals("", appliedMigration1.getDescription());
      assertEquals((-1), appliedMigration0.getExecutionTime());
      assertEquals(1763, appliedMigration1.getInstalledRank());
      assertFalse(boolean0);
      assertFalse(appliedMigration0.isSuccess());
      assertEquals("", appliedMigration1.getInstalledBy());
      assertEquals((-1), appliedMigration1.getExecutionTime());
      assertEquals("<< Current Version >>", appliedMigration1.getScript());
      assertEquals((-1008), appliedMigration1.getVersionRank());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "`6", migrationType0, "`6", (Integer) null, "`6", (-959), false);
      Integer integer0 = appliedMigration0.getChecksum();
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, "", migrationType0, "", integer0, (String) null, 0, true);
      boolean boolean0 = appliedMigration0.equals(appliedMigration1);
      assertEquals((-959), appliedMigration0.getExecutionTime());
      assertTrue(appliedMigration1.isSuccess());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer((-959));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "", integer0, "", (-959), false);
      boolean boolean0 = appliedMigration0.equals("");
      assertFalse(appliedMigration0.isSuccess());
      assertEquals((-959), appliedMigration0.getExecutionTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer((-2261));
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, "QI4A+__!Ys}8(2:", migrationType0, "QI4A+__!Ys}8(2:", integer0, "QI4A+__!Ys}8(2:", (-2261), false);
      boolean boolean0 = appliedMigration0.equals((Object) null);
      assertEquals((-2261), appliedMigration0.getExecutionTime());
      assertFalse(appliedMigration0.isSuccess());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      Integer integer0 = new Integer(200);
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "\"5mu?~PuT~2yY@s q|;", migrationType0, "<< Current Version >>", integer0, "OKzh", 200, false);
      boolean boolean0 = appliedMigration0.equals(appliedMigration0);
      assertTrue(boolean0);
      assertEquals("<< Current Version >>", appliedMigration0.getScript());
      assertFalse(appliedMigration0.isSuccess());
      assertEquals("OKzh", appliedMigration0.getInstalledBy());
      assertEquals("\"5mu?~PuT~2yY@s q|;", appliedMigration0.getDescription());
      assertEquals(200, appliedMigration0.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "r1QoA0MjYMT]4L", migrationType0, (String) null, (Integer) null, "r1QoA0MjYMT]4L", (-41), true);
      AppliedMigration appliedMigration1 = new AppliedMigration(migrationVersion0, "r1QoA0MjYMT]4L", migrationType0, "r1QoA0MjYMT]4L", (Integer) null, "r1QoA0MjYMT]4L", (-41), true);
      // Undeclared exception!
      try { 
        appliedMigration0.equals(appliedMigration1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer((-1853));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "", integer0, "", (-1853), false);
      appliedMigration0.getVersion();
      assertEquals((-1853), appliedMigration0.getExecutionTime());
      assertFalse(appliedMigration0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "`T1EI&h-7CAFD'{x :", migrationType0, "", (Integer) null, "...", 0, true);
      int int0 = appliedMigration0.getVersionRank();
      assertEquals(0, int0);
      assertEquals("", appliedMigration0.getScript());
      assertEquals("`T1EI&h-7CAFD'{x :", appliedMigration0.getDescription());
      assertTrue(appliedMigration0.isSuccess());
      assertEquals("...", appliedMigration0.getInstalledBy());
      assertEquals(0, appliedMigration0.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer((-959));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "", integer0, "", (-959), false);
      appliedMigration0.getChecksum();
      assertFalse(appliedMigration0.isSuccess());
      assertEquals((-959), appliedMigration0.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "$VALUES", migrationType0, "$VALUES", (Integer) null, "$VALUES", 200, false);
      appliedMigration0.compareTo(appliedMigration0);
      assertEquals(200, appliedMigration0.getExecutionTime());
      assertFalse(appliedMigration0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer((-1853));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "", integer0, "", (-1853), false);
      appliedMigration0.getInstalledBy();
      assertEquals((-1853), appliedMigration0.getExecutionTime());
      assertFalse(appliedMigration0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(197);
      MockDate mockDate0 = new MockDate((-1103L));
      AppliedMigration appliedMigration0 = new AppliedMigration(0, 0, migrationVersion0, "...", migrationType0, "", integer0, mockDate0, "'", 0, true);
      String string0 = appliedMigration0.getScript();
      assertEquals("...", appliedMigration0.getDescription());
      assertEquals(0, appliedMigration0.getExecutionTime());
      assertEquals("'", appliedMigration0.getInstalledBy());
      assertEquals(0, appliedMigration0.getVersionRank());
      assertEquals(0, appliedMigration0.getInstalledRank());
      assertEquals("", string0);
      assertTrue(appliedMigration0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "`T1EI&h-7CAFD'{x :", migrationType0, "", (Integer) null, "...", 0, true);
      String string0 = appliedMigration0.getDescription();
      assertEquals("...", appliedMigration0.getInstalledBy());
      assertNotNull(string0);
      assertTrue(appliedMigration0.isSuccess());
      assertEquals(0, appliedMigration0.getExecutionTime());
      assertEquals("", appliedMigration0.getScript());
      assertEquals("`T1EI&h-7CAFD'{x :", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(197);
      MockDate mockDate0 = new MockDate((-1103L));
      AppliedMigration appliedMigration0 = new AppliedMigration(0, 0, migrationVersion0, "...", migrationType0, "", integer0, mockDate0, "'", 0, true);
      boolean boolean0 = appliedMigration0.isSuccess();
      assertEquals(0, appliedMigration0.getVersionRank());
      assertEquals(0, appliedMigration0.getInstalledRank());
      assertEquals(0, appliedMigration0.getExecutionTime());
      assertEquals("...", appliedMigration0.getDescription());
      assertTrue(boolean0);
      assertEquals("'", appliedMigration0.getInstalledBy());
      assertEquals("", appliedMigration0.getScript());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(2027);
      MigrationType migrationType0 = MigrationType.SCHEMA;
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, "", migrationType0, "com.contrastsecurity.cassandra.migration.info.AppliedMigration", integer0, (String) null, 19, false);
      appliedMigration0.getInstalledOn();
      assertFalse(appliedMigration0.isSuccess());
      assertEquals(19, appliedMigration0.getExecutionTime());
      assertEquals("com.contrastsecurity.cassandra.migration.info.AppliedMigration", appliedMigration0.getScript());
      assertEquals("", appliedMigration0.getDescription());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer((-548));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "", integer0, "", (-548), false);
      int int0 = appliedMigration0.getInstalledRank();
      assertEquals(0, int0);
      assertEquals((-548), appliedMigration0.getExecutionTime());
      assertFalse(appliedMigration0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "$VALUES", migrationType0, "$VALUES", (Integer) null, "$VALUES", 200, false);
      appliedMigration0.getType();
      assertEquals(200, appliedMigration0.getExecutionTime());
      assertFalse(appliedMigration0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(453);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "iDAf_Ka 8x7E", migrationType0, "2rDTP*+Os*&SL8", integer0, " \"1 x)Bk", 584, true);
      int int0 = appliedMigration0.getExecutionTime();
      assertTrue(appliedMigration0.isSuccess());
      assertEquals("2rDTP*+Os*&SL8", appliedMigration0.getScript());
      assertEquals(584, int0);
      assertEquals(" \"1 x)Bk", appliedMigration0.getInstalledBy());
      assertEquals("iDAf_Ka 8x7E", appliedMigration0.getDescription());
  }
}
