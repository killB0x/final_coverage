/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 19:41:47 GMT 2022
 */

package com.maxleap.las.sdk.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.maxleap.las.sdk.types.MLGeoPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MLGeoPoint_ESTest extends MLGeoPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, 0.0);
      MLGeoPoint mLGeoPoint1 = new MLGeoPoint(0.0, 1.0);
      double double0 = mLGeoPoint0.distanceInRadiansTo(mLGeoPoint1);
      assertEquals(0.0174532925199433, double0, 0.01);
      assertEquals(1.0, mLGeoPoint1.getLongitude(), 0.01);
      assertEquals(0.0, mLGeoPoint1.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, (-180.0));
      assertEquals((-180.0), mLGeoPoint0.getLongitude(), 0.01);
      assertEquals(0.0, mLGeoPoint0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, 180.0);
      assertEquals(180.0, mLGeoPoint0.getLongitude(), 0.01);
      assertEquals(0.0, mLGeoPoint0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, 0.0);
      double double0 = mLGeoPoint0.getLongitude();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, mLGeoPoint0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint((-1.0), (-1.0));
      double double0 = mLGeoPoint0.getLongitude();
      assertEquals((-1.0), mLGeoPoint0.getLatitude(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, 0.0);
      double double0 = mLGeoPoint0.getLatitude();
      assertEquals(0.0, mLGeoPoint0.getLongitude(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, 0.0);
      mLGeoPoint0.setLatitude((-1.0));
      double double0 = mLGeoPoint0.getLatitude();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.881225792679992, 0.881225792679992);
      double double0 = mLGeoPoint0.distanceInRadiansTo(mLGeoPoint0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.881225792679992, mLGeoPoint0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, 0.0);
      mLGeoPoint0.setLatitude(1.0);
      MLGeoPoint mLGeoPoint1 = new MLGeoPoint(0.0, 0.0);
      double double0 = mLGeoPoint0.distanceInRadiansTo(mLGeoPoint1);
      assertEquals(1.0, mLGeoPoint0.getLatitude(), 0.01);
      assertEquals(0.0174532925199433, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, (-1.0));
      MLGeoPoint mLGeoPoint1 = new MLGeoPoint(0.0, 0.0);
      double double0 = mLGeoPoint0.distanceInMilesTo(mLGeoPoint1);
      assertEquals(69.09409442795153, double0, 0.01);
      assertEquals(0.0, mLGeoPoint1.getLongitude(), 0.01);
      assertEquals(0.0, mLGeoPoint1.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, 0.0);
      MLGeoPoint mLGeoPoint1 = new MLGeoPoint(0.0, 0.0);
      mLGeoPoint1.setLatitude((-1.0));
      double double0 = mLGeoPoint1.distanceInKilometersTo(mLGeoPoint0);
      assertEquals((-1.0), mLGeoPoint1.getLatitude(), 0.01);
      assertEquals(111.19492664455876, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(29.244252606003887, 29.244252606003887);
      // Undeclared exception!
      try { 
        mLGeoPoint0.distanceInMilesTo((MLGeoPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.types.MLGeoPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint((-90.0), (-90.0));
      // Undeclared exception!
      try { 
        mLGeoPoint0.distanceInKilometersTo((MLGeoPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.types.MLGeoPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(1.0, 1.0);
      mLGeoPoint0.setLongitude(1.0);
      assertEquals(1.0, mLGeoPoint0.getLongitude(), 0.01);
      assertEquals(1.0, mLGeoPoint0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, (-1.0));
      // Undeclared exception!
      try { 
        mLGeoPoint0.setLongitude(1444.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Longitude must be within the range (-180.0, 180.0).
         //
         verifyException("com.maxleap.las.sdk.types.MLGeoPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint((-1.0), (-1.0));
      // Undeclared exception!
      try { 
        mLGeoPoint0.setLatitude(1365.2916104401);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Latitude must be within the range (-90.0, 90.0).
         //
         verifyException("com.maxleap.las.sdk.types.MLGeoPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(1.0, 1.0);
      double double0 = mLGeoPoint0.getLatitude();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, mLGeoPoint0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(1.0, 1.0);
      // Undeclared exception!
      try { 
        mLGeoPoint0.distanceInRadiansTo((MLGeoPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.types.MLGeoPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(1.0, 1.0);
      double double0 = mLGeoPoint0.getLongitude();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, mLGeoPoint0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, (-1.0));
      // Undeclared exception!
      try { 
        mLGeoPoint0.setLongitude((-962.19503968072));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Longitude must be within the range (-180.0, 180.0).
         //
         verifyException("com.maxleap.las.sdk.types.MLGeoPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = null;
      try {
        mLGeoPoint0 = new MLGeoPoint(1.0, 1368.3157);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Longitude must be within the range (-180.0, 180.0).
         //
         verifyException("com.maxleap.las.sdk.types.MLGeoPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, 0.0);
      // Undeclared exception!
      try { 
        mLGeoPoint0.setLatitude((-783.615164513926));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Latitude must be within the range (-90.0, 90.0).
         //
         verifyException("com.maxleap.las.sdk.types.MLGeoPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, (-1.0));
      mLGeoPoint0.toMap();
      assertEquals((-1.0), mLGeoPoint0.getLongitude(), 0.01);
      assertEquals(0.0, mLGeoPoint0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(0.0, 0.0);
      mLGeoPoint0.get__type();
      assertEquals(0.0, mLGeoPoint0.getLatitude(), 0.01);
      assertEquals(0.0, mLGeoPoint0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(90.0, 90.0);
      double double0 = mLGeoPoint0.distanceInMilesTo(mLGeoPoint0);
      assertEquals(90.0, mLGeoPoint0.getLongitude(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MLGeoPoint mLGeoPoint0 = new MLGeoPoint(1.0, 1.0);
      double double0 = mLGeoPoint0.distanceInKilometersTo(mLGeoPoint0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, mLGeoPoint0.getLongitude(), 0.01);
      assertEquals(1.0, mLGeoPoint0.getLatitude(), 0.01);
  }
}
