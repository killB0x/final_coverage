/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 19:39:23 GMT 2022
 */

package com.maxleap.las.sdk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.maxleap.las.sdk.MLObject;
import com.maxleap.las.sdk.ObjectId;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MLObject_ESTest extends MLObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(8);
      MLObject mLObject0 = new MLObject();
      mLObject0.updatedAtString();
      mLObject0.toString();
      mLObject0.setCreatedAt((String) null);
      mLObject0.createdAtString();
      MockDate mockDate0 = new MockDate(8, 8, 8, 8, 8);
      mockDate0.clone();
      mockDate0.toInstant();
      ObjectId objectId0 = new ObjectId(mockDate0, (-1), 8);
      ObjectId.createFromLegacyFormat((-1), 0, 0);
      mLObject0.setObjectId(objectId0);
      mLObject0.objectId();
      mLObject0.objectIdString();
      mLObject0.updatedAtString();
      mLObject0.updatedAtString();
      mLObject0.toString();
      mLObject0.createdAtString();
      mLObject0.objectId();
      mLObject0.objectId();
      mLObject0.createdAtString();
      mLObject0.getACL();
      System.setCurrentTimeMillis(8);
      String string0 = mLObject0.createdAtString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      ObjectId objectId0 = ObjectId.createFromLegacyFormat(0, 0, 0);
      mLObject0.setObjectId(objectId0);
      ObjectId objectId1 = mLObject0.objectId();
      assertEquals((-1605086651), objectId1.getGenMachineId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      String string0 = mLObject0.updatedAtString();
      assertNull(string0);
      
      mLObject0.createdAtString();
      int int0 = 1356;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>(1356);
      hashMap0.clear();
      Integer integer0 = new Integer(1356);
      hashMap0.put(mLObject0, integer0);
      mLObject0.setACL(hashMap0);
      mLObject0.setUpdatedAt((String) null);
      ObjectId objectId0 = ObjectId.createFromLegacyFormat(125, 925, 925);
      mLObject0.setObjectId(objectId0);
      Random.setNextRandom(1356);
      // Undeclared exception!
      mLObject0.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Long long0 = new Long((-1L));
      mLObject0.setCreatedAt(long0);
      ObjectId objectId0 = ObjectId.get();
      mLObject0.setObjectId(objectId0);
      objectId0._new = true;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ObjectId.createFromLegacyFormat((-1), 0, (-920));
      Object object0 = new Object();
      Object object1 = new Object();
      hashMap0.entrySet();
      hashMap0.put(object0, object1);
      Object object2 = new Object();
      hashMap0.put(mLObject0, object2);
      objectId0.getDate();
      mLObject0.setACL(hashMap0);
      mLObject0.setObjectId(objectId0);
      mLObject0.updatedAtString();
      mLObject0.setUpdatedAt((String) null);
      Random.setNextRandom(0);
      mLObject0.getACL();
      Random.setNextRandom(1514);
      Random.setNextRandom(2692);
      // Undeclared exception!
      mLObject0.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.updatedAtString();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      hashMap0.replace((Object) null, integer1);
      mLObject0.setACL(hashMap0);
      mLObject0.getACL();
      mLObject0.objectIdString();
      mLObject0.updatedAtString();
      Long long0 = new Long((-164L));
      MLObject mLObject1 = new MLObject();
      Long long1 = new Long(0);
      mLObject1.setUpdatedAt(long1);
      ObjectId objectId0 = new ObjectId();
      mLObject0.setObjectId(objectId0);
      mLObject0.getACL();
      mLObject1.objectId();
      mLObject0.setUpdatedAt((String) null);
      String string0 = mLObject1.objectIdString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.updatedAtString();
      mLObject0.setUpdatedAt((String) null);
      mLObject0.updatedAtString();
      mLObject0.setObjectId((String) null);
      Long long0 = new Long(4098L);
      Long long1 = new Long(4067L);
      mLObject0.setCreatedAt(long1);
      long long2 = mLObject0.createdAt();
      assertEquals(4067L, long2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      ObjectId objectId0 = new ObjectId();
      mLObject0.setObjectId(objectId0);
      ObjectId.get();
      ObjectId.get();
      objectId0.getDate();
      mLObject0.objectIdString();
      mLObject0.objectId();
      long long0 = (-1535L);
      // Undeclared exception!
      try { 
        ObjectId.validate("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  invalid ObjectId []
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      String string0 = mLObject0.objectIdString();
      assertNull(string0);
      
      Long long0 = new Long(2773L);
      mLObject0.setUpdatedAt(long0);
      mLObject0.createdAtString();
      long long1 = mLObject0.updateAt();
      assertEquals(2773L, long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.updatedAtString();
      Integer integer0 = new Integer((-959));
      Long long0 = new Long(0);
      Long long1 = new Long((-959));
      Long long2 = Long.getLong("r|W!RBA|qw6Ju6B|zIm", long1);
      mLObject0.setCreatedAt(long2);
      long long3 = mLObject0.createdAt();
      assertEquals((-959L), long3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Long long0 = new Long((-3872L));
      mLObject0.setUpdatedAt(long0);
      String string0 = mLObject0.updatedAtString();
      assertEquals("1969-12-31T23:59:56.128Z", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.updatedAtString();
      mLObject0.toString();
      Long long0 = new Long((-2147483648L));
      mLObject0.setUpdatedAt((String) null);
      Long long1 = new Long(0L);
      mLObject0.setCreatedAt(long1);
      Long long2 = new Long((-2147483648L));
      mLObject0.setUpdatedAt(long2);
      mLObject0.toString();
      Long long3 = new Long(0L);
      MLObject mLObject1 = new MLObject();
      Long long4 = new Long((-1L));
      mLObject1.setCreatedAt(long4);
      Long long5 = new Long((-2672L));
      mLObject1.setUpdatedAt(long5);
      mLObject0.objectIdString();
      Long long6 = new Long((-2147483648L));
      mLObject1.setUpdatedAt(long1);
      mLObject1.setCreatedAt((Long) null);
      mLObject0.updateAt();
      mLObject0.updateAt();
      mLObject1.toString();
      MLObject mLObject2 = new MLObject();
      String string0 = mLObject2.createdAtString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.updatedAtString();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      Long long0 = new Long(0);
      mLObject0.setCreatedAt(long0);
      long long1 = mLObject0.createdAt();
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.setUpdatedAt((String) null);
      ObjectId objectId0 = mLObject0.objectId();
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.updatedAtString();
      mLObject0.setUpdatedAt((String) null);
      mLObject0.updatedAtString();
      Long long0 = new Long(1907L);
      mLObject0.setCreatedAt(long0);
      mLObject0.setObjectId((String) null);
      mLObject0.setUpdatedAt((String) null);
      mLObject0.setCreatedAt((String) null);
      Long.getLong((String) null);
      mLObject0.setCreatedAt((Long) null);
      mLObject0.setObjectId((String) null);
      mLObject0.objectId();
      HashMap<ChronoLocalDate, Object> hashMap0 = new HashMap<ChronoLocalDate, Object>();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      hashMap0.put(hijrahDate0, (Object) null);
      mLObject0.setACL(hashMap0);
      mLObject0.setACL(hashMap0);
      String string0 = "";
      // Undeclared exception!
      try { 
        mLObject0.setObjectId("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId []
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Map map0 = mLObject0.getACL();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.setObjectId((String) null);
      mLObject0.getACL();
      mLObject0.setACL((Map) null);
      mLObject0.setObjectId((String) null);
      // Undeclared exception!
      try { 
        mLObject0.setUpdatedAt("561#XT0Mkx nl%4\" ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      Integer integer0 = new Integer(1244);
      hashMap0.put(mLObject0, integer0);
      Integer integer1 = new Integer(1244);
      Integer integer2 = new Integer(1244);
      hashMap0.put(integer1, integer2);
      hashMap0.put(object0, object0);
      mLObject0.setACL(hashMap0);
      String string0 = mLObject0.toString();
      String string1 = ", ACL=";
      mLObject0.setObjectId(string1);
      long long0 = 2147483647L;
      mLObject0.updatedAtString();
      mLObject0.toString();
      Long long1 = new Long(long0);
      mLObject0.setCreatedAt(long1);
      mLObject0.setObjectId(string1);
      mLObject0.createdAtString();
      mLObject0.setCreatedAt(long1);
      mLObject0.setObjectId(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      ObjectId objectId0 = mLObject0.objectId();
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = new Integer(3602);
      hashMap0.put(object0, integer0);
      mLObject0.setObjectId((ObjectId) null);
      mLObject0.setACL(hashMap0);
      mLObject0.toString();
      mLObject0.objectId();
      Long long0 = new Long((-913L));
      mLObject0.setCreatedAt(long0);
      mLObject0.setCreatedAt(long0);
      assertEquals((-913L), mLObject0.createdAt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      // Undeclared exception!
      try { 
        mLObject0.updateAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      MockDate mockDate0 = new MockDate();
      Instant instant0 = mockDate0.toInstant();
      mockDate0.clone();
      ObjectId objectId0 = new ObjectId(mockDate0, 0);
      MockDate mockDate1 = new MockDate();
      Date.from(instant0);
      mockDate0.after(mockDate1);
      mLObject0.setObjectId(objectId0);
      mLObject0.setObjectId((String) null);
      ObjectId.get();
      objectId0.toByteArray();
      objectId0.getDate();
      objectId0._new = true;
      mLObject0.setObjectId(objectId0);
      mLObject0.createdAtString();
      // Undeclared exception!
      try { 
        mLObject0.updateAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.objectIdString();
      mLObject0.updatedAtString();
      mLObject0.setCreatedAt((String) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Map<Integer, Object> map0 = null;
      mLObject0.setCreatedAt((String) null);
      mLObject0.setCreatedAt((String) null);
      mLObject0.setACL((Map) null);
      mLObject0.updatedAtString();
      String string0 = "Wao@K7;nC9CGHj";
      // Undeclared exception!
      try { 
        mLObject0.setObjectId("Wao@K7;nC9CGHj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId [Wao@K7;nC9CGHj]
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      // Undeclared exception!
      try { 
        mLObject0.setUpdatedAt("machine piece post: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      String string0 = mLObject0.toString();
      assertEquals("MLObject{objectId=null, createdAt=null, updatedAt=null, ACL=null}", string0);
      
      mLObject0.toString();
      mLObject0.toString();
      Long long0 = new Long((-1120L));
      // Undeclared exception!
      try { 
        mLObject0.setUpdatedAt("MLObject{objectId=null, createdAt=null, updatedAt=null, ACL=null}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.updatedAtString();
      mLObject0.createdAtString();
      // Undeclared exception!
      try { 
        mLObject0.setObjectId("k4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId [k4]
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      // Undeclared exception!
      try { 
        mLObject0.setObjectId("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId []
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.objectIdString();
      // Undeclared exception!
      try { 
        mLObject0.createdAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.setUpdatedAt((Long) null);
      ObjectId objectId0 = mLObject0.objectId();
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      // Undeclared exception!
      try { 
        mLObject0.setCreatedAt("%02x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      ObjectId objectId0 = new ObjectId();
      mLObject0.setObjectId(objectId0);
      String string0 = mLObject0.objectIdString();
      assertEquals("52fe7ac1a05452450000000e", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      String string0 = mLObject0.createdAtString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.setObjectId((String) null);
      String string0 = mLObject0.updatedAtString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      // Undeclared exception!
      try { 
        mLObject0.createdAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      ObjectId objectId0 = ObjectId.get();
      mLObject0.setObjectId(objectId0);
      String string0 = mLObject0.updatedAtString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.setObjectId((String) null);
      MockDate mockDate0 = new MockDate(0, 255, 0, 1165, 1165);
      ObjectId objectId0 = new ObjectId(mockDate0, 125);
      mLObject0.setObjectId(objectId0);
      mLObject0.updatedAtString();
      // Undeclared exception!
      try { 
        mLObject0.createdAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      ObjectId objectId0 = new ObjectId();
      mLObject0.setObjectId(objectId0);
      mLObject0.createdAtString();
      Long long0 = new Long(0L);
      objectId0._new = false;
      mLObject0.setObjectId(objectId0);
      mLObject0.setUpdatedAt(long0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer((-1751));
      hashMap0.put(integer0, (Object) null);
      hashMap0.put(object0, object1);
      hashMap0.put(mLObject0, objectId0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.putAll(hashMap1);
      mLObject0.setUpdatedAt(long0);
      mLObject0.setACL(hashMap0);
      mLObject0.createdAtString();
      mLObject0.objectIdString();
      mLObject0.setObjectId(objectId0);
      mLObject0.setUpdatedAt(long0);
      // Undeclared exception!
      try { 
        mLObject0.setCreatedAt("YkO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.updatedAtString();
      mLObject0.toString();
      Long long0 = new Long((-2147483648L));
      mLObject0.setUpdatedAt((String) null);
      Long long1 = new Long(0L);
      mLObject0.setCreatedAt(long1);
      Long long2 = new Long((-2147483648L));
      mLObject0.setUpdatedAt(long2);
      mLObject0.toString();
      Long long3 = new Long(0L);
      MLObject mLObject1 = new MLObject();
      Long long4 = new Long((-1L));
      mLObject1.setCreatedAt(long4);
      Long long5 = new Long((-2672L));
      mLObject1.setUpdatedAt(long5);
      mLObject0.objectIdString();
      mLObject1.updatedAtString();
      Long long6 = new Long((-2147483648L));
      mLObject1.setUpdatedAt(long1);
      MLObject mLObject2 = new MLObject();
      mLObject2.updatedAtString();
      mLObject2.updatedAtString();
      MLObject mLObject3 = new MLObject();
      mLObject3.createdAtString();
      long long7 = mLObject1.updateAt();
      assertEquals(0L, long7);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.setACL((Map) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Long long0 = new Long((-6041L));
      mLObject0.setCreatedAt(long0);
      assertEquals((-6041L), mLObject0.createdAt());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Long long0 = new Long((-2414L));
      mLObject0.setCreatedAt(long0);
      String string0 = mLObject0.createdAtString();
      assertEquals("1969-12-31T23:59:57.586Z", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.updatedAtString();
      Long long0 = new Long((-1454L));
      mLObject0.setCreatedAt(long0);
      mLObject0.toString();
      mLObject0.createdAtString();
      Long long1 = Long.getLong("%02x", (-3387L));
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      mLObject0.setACL(hashMap0);
      mLObject0.setCreatedAt(long1);
      mLObject0.createdAtString();
      ObjectId.get();
      String string0 = "";
      // Undeclared exception!
      try { 
        ObjectId.validate("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  invalid ObjectId []
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }
}
