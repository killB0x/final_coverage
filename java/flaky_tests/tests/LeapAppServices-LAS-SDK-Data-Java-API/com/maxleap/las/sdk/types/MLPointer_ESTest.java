/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 19:40:39 GMT 2022
 */

package com.maxleap.las.sdk.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.maxleap.las.sdk.ObjectId;
import com.maxleap.las.sdk.types.MLPointer;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MLPointer_ESTest extends MLPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MLPointer mLPointer0 = new MLPointer("0000033c0000033c0000033c", "className");
      assertEquals("className", mLPointer0.getClassName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectId objectId0 = ObjectId.createFromLegacyFormat(0, 0, 0);
      MLPointer mLPointer0 = new MLPointer(objectId0, "com.maxleap.las.sdk.types.MLPointer");
      Map map0 = mLPointer0.toMap();
      assertEquals(3, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MLPointer mLPointer0 = new MLPointer();
      ObjectId objectId0 = mLPointer0.getObjectId();
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MLPointer mLPointer0 = new MLPointer();
      ObjectId objectId0 = ObjectId.get();
      mLPointer0.setObjectId(objectId0);
      ObjectId objectId1 = mLPointer0.getObjectId();
      assertEquals(24, objectId1.getCurrentInc());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MLPointer mLPointer0 = new MLPointer();
      ObjectId objectId0 = ObjectId.createFromLegacyFormat((-2770), (-2770), (-1653));
      mLPointer0.setObjectId(objectId0);
      ObjectId objectId1 = mLPointer0.getObjectId();
      assertEquals(23, objectId1.getCurrentInc());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectId objectId0 = ObjectId.createFromLegacyFormat(0, 0, 0);
      MLPointer mLPointer0 = new MLPointer(objectId0, "com.maxleap.las.sdk.types.MLPointer");
      mLPointer0.setClassName((String) null);
      String string0 = mLPointer0.getClassName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ObjectId objectId0 = new ObjectId(mockDate0, (-77));
      MLPointer mLPointer0 = new MLPointer(objectId0, "");
      mLPointer0.setClassName("className");
      String string0 = mLPointer0.getClassName();
      assertEquals("className", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MLPointer mLPointer0 = new MLPointer();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        mLPointer0.equals(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class com.maxleap.las.sdk.types.MLPointer (java.lang.Object is in module java.base of loader 'bootstrap'; com.maxleap.las.sdk.types.MLPointer is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5da4d3d5)
         //
         verifyException("com.maxleap.las.sdk.types.MLPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectId objectId0 = ObjectId.createFromLegacyFormat(0, 0, 0);
      MLPointer mLPointer0 = new MLPointer(objectId0, "com.maxleap.las.sdk.types.MLPointer");
      ObjectId objectId1 = mLPointer0.getObjectId();
      assertSame(objectId1, objectId0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ObjectId objectId0 = new ObjectId(mockDate0, 1, 1467);
      MLPointer mLPointer0 = new MLPointer(objectId0, "");
      String string0 = mLPointer0.getClassName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MLPointer mLPointer0 = new MLPointer();
      mLPointer0.setClassName("j/7psp.WwGD");
      MockDate mockDate0 = new MockDate();
      ObjectId objectId0 = new ObjectId(mockDate0, (-2770), (-2770));
      MLPointer mLPointer1 = new MLPointer(objectId0, "File");
      assertFalse(mLPointer1.equals((Object)mLPointer0));
      
      mLPointer1.setClassName("j/7psp.WwGD");
      boolean boolean0 = mLPointer0.equals(mLPointer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MLPointer mLPointer0 = new MLPointer();
      ObjectId objectId0 = ObjectId.get();
      mLPointer0.setObjectId(objectId0);
      MLPointer mLPointer1 = new MLPointer();
      // Undeclared exception!
      try { 
        mLPointer0.equals(mLPointer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.types.MLPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MLPointer mLPointer0 = new MLPointer();
      ObjectId objectId0 = new ObjectId();
      MLPointer mLPointer1 = new MLPointer(objectId0, "T^x8");
      boolean boolean0 = mLPointer0.equals(mLPointer1);
      //  // Unstable assertion: assertEquals(13, objectId0.getCurrentInc());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MLPointer mLPointer0 = new MLPointer();
      mLPointer0.setClassName(")~&`UuJXa$7F6]");
      MLPointer mLPointer1 = new MLPointer();
      // Undeclared exception!
      try { 
        mLPointer0.equals(mLPointer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MLPointer mLPointer0 = new MLPointer();
      boolean boolean0 = mLPointer0.equals(mLPointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MLPointer mLPointer0 = new MLPointer();
      String string0 = mLPointer0.get__type();
      assertEquals("Pointer", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MLPointer mLPointer0 = null;
      try {
        mLPointer0 = new MLPointer((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId [null]
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MLPointer mLPointer0 = new MLPointer();
      // Undeclared exception!
      try { 
        mLPointer0.toMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.types.MLPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      MLPointer mLPointer0 = new MLPointer(objectId0, "DAT");
      boolean boolean0 = mLPointer0.equals(mLPointer0);
      assertEquals(1, objectId0.getCurrentCounter());
      assertTrue(boolean0);
  }
}
