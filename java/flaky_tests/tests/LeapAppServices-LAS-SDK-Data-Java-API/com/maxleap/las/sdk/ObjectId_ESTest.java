/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 19:30:07 GMT 2022
 */

package com.maxleap.las.sdk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.maxleap.las.sdk.ObjectId;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectId_ESTest extends ObjectId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectId.validate("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  invalid ObjectId []
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      byte[] byteArray0 = objectId0.toByteArray();
      ObjectId objectId1 = new ObjectId(byteArray0);
      int int0 = objectId0.compareTo(objectId1);
      //  // Unstable assertion: assertEquals(1375, objectId1.getCurrentCounter());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectId objectId0 = ObjectId.createFromLegacyFormat((-1), (-1), (-1));
      ObjectId objectId1 = ObjectId.createFromLegacyFormat((-1), 59, 59);
      int int0 = objectId1.compareTo(objectId0);
      assertEquals(Integer.MIN_VALUE, int0);
      assertEquals((-1), objectId1.getTimestamp());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      ObjectId objectId1 = ObjectId.createFromLegacyFormat(3098, (-992), (-992));
      int int0 = objectId1.compareTo(objectId0);
      //  // Unstable assertion: assertEquals(1276, objectId1.getCurrentCounter());
      //  // Unstable assertion: assertEquals((-1392406183), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      int int0 = objectId0._compareUnsigned(Integer.MAX_VALUE, 0);
      //  // Unstable assertion: assertEquals(1196, objectId0.getCurrentInc());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      int int0 = objectId0._compareUnsigned(Integer.MAX_VALUE, (-1));
      //  // Unstable assertion: assertEquals(1116, objectId0.getCurrentInc());
      //  // Unstable assertion: assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      ObjectId objectId1 = ObjectId.get();
      boolean boolean0 = objectId0.equals(objectId1);
      //  // Unstable assertion: assertEquals(995, objectId1.getCurrentCounter());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      MockDate mockDate0 = new MockDate();
      ObjectId objectId1 = new ObjectId(mockDate0, 102, 102);
      boolean boolean0 = objectId0.equals(objectId1);
      //  // Unstable assertion: assertEquals(924, objectId1.getCurrentInc());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      ObjectId objectId1 = ObjectId.createFromLegacyFormat((-1261), (-1759), (-312));
      boolean boolean0 = objectId0.equals(objectId1);
      //  // Unstable assertion: assertEquals(851, objectId1.getCurrentCounter());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // need 12 bytes
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectId objectId0 = new ObjectId("fffffabbfffffabb00000000", true);
      assertEquals((-1349), objectId0.getTimestamp());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectId objectId0 = new ObjectId(0, 0, 0);
      ObjectId objectId1 = ObjectId.massageToObjectId(objectId0);
      assertNotNull(objectId1);
      assertEquals(0, objectId1.getTimestamp());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectId objectId0 = new ObjectId((-1717), (-2351), 2651);
      ObjectId objectId1 = ObjectId.massageToObjectId(objectId0);
      assertEquals((-1717), objectId1.getTimestamp());
      assertNotNull(objectId1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectId objectId0 = new ObjectId((-1349), (-1349), 0);
      int int0 = objectId0.getTimestamp();
      assertEquals((-1349), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      ObjectId objectId0 = ObjectId.get();
      //  // Unstable assertion: assertEquals(835, objectId0.getCurrentInc());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-1793L));
      ObjectId objectId0 = ObjectId.get();
      //  // Unstable assertion: assertEquals(819, objectId0.getCurrentCounter());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = ObjectId._pos("TfFWkc>`pRes29Tv:}m", 0);
      assertEquals("Tf", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      int int0 = objectId0._compareUnsigned(14, 14);
      //  // Unstable assertion: assertEquals(739, objectId0.getCurrentInc());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectId._pos("machine piece post: ", (-3166));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId((Date) null, 111, 111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId("<&2_Y4uA4E=xGc*", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId [<&2_Y4uA4E=xGc*]
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      String string0 = objectId0.toStringMongod();
      //  // Unstable assertion: assertEquals("52fe7ac1a054f3d4000002a6", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      ObjectId objectId0 = ObjectId.massageToObjectId(object0);
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      ObjectId.massageToObjectId(objectId0);
      //  // Unstable assertion: assertEquals(662, objectId0.getCurrentCounter());
      //  // Unstable assertion: assertEquals(662, objectId0.getCurrentInc());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectId objectId0 = ObjectId.massageToObjectId("");
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectId objectId0 = ObjectId.massageToObjectId((Object) null);
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = ObjectId.isValid("fffff94bfffff6d100000a5b");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = ObjectId.isValid("KgVBW {QBf9hx~9= 8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = ObjectId.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ObjectId objectId0 = new ObjectId(mockDate0, (-3947));
      assertEquals(1392409281, objectId0.getTimestamp());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectId.validate((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId []
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectId.validate("52fe7ac1a054f3d400021cbc", "52fe7ac1a054f3d400021cbc");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectId objectId0 = ObjectId.createFromLegacyFormat((-1), (-1), (-1));
      ObjectId objectId1 = ObjectId.createFromLegacyFormat((-1), 59, 59);
      int int0 = objectId0.compareTo(objectId1);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals((-1), objectId1.getTimestamp());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      ObjectId objectId1 = ObjectId.createFromLegacyFormat(0, 0, 0);
      int int0 = objectId0.compareTo(objectId1);
      //  // Unstable assertion: assertEquals(563, objectId1.getCurrentCounter());
      //  // Unstable assertion: assertEquals(1392409281, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      int int0 = objectId0.compareTo((ObjectId) null);
      //  // Unstable assertion: assertEquals(542, objectId0.getCurrentCounter());
      //  // Unstable assertion: assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-10);
      ObjectId objectId0 = ObjectId.get();
      objectId0.toHexString();
      ObjectId objectId1 = new ObjectId("52fe7ac1a054f3d400021cd0");
      boolean boolean0 = objectId0.equals(objectId1);
      //  // Unstable assertion: assertEquals(443, objectId0.getCurrentInc());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-3726), (-1), 2996, 1412, 683);
      ObjectId objectId0 = new ObjectId(mockDate0, (-1744), 995);
      ObjectId objectId1 = new ObjectId(mockDate0);
      boolean boolean0 = objectId0.equals(objectId1);
      //  // Unstable assertion: assertEquals(388, objectId1.getCurrentInc());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      ObjectId objectId1 = new ObjectId((-494), (-494), (-494));
      boolean boolean0 = objectId1.equals(objectId0);
      //  // Unstable assertion: assertEquals(330, objectId1.getCurrentCounter());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      boolean boolean0 = objectId0.equals(objectId0);
      //  // Unstable assertion: assertEquals(312, objectId0.getCurrentInc());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // need 12 bytes
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      Object object0 = new Object();
      boolean boolean0 = objectId0.equals(object0);
      //  // Unstable assertion: assertEquals(289, objectId0.getCurrentCounter());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId [null]
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = ObjectId.getCurrentCounter();
      //  // Unstable assertion: assertEquals(288, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectId._pos((String) null, (-3012));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      int int0 = objectId0.getTimestamp();
      //  // Unstable assertion: assertEquals(268, objectId0.getCurrentCounter());
      //  // Unstable assertion: assertEquals(1392409281, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      objectId0.toString();
      //  // Unstable assertion: assertEquals(199, objectId0.getCurrentCounter());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId((Date) null, 470);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = ObjectId.getGenMachineId();
      assertEquals((-1605045292), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      objectId0.hashCode();
      //  // Unstable assertion: assertEquals(124, objectId0.getCurrentCounter());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      objectId0.getDate();
      //  // Unstable assertion: assertEquals(94, objectId0.getCurrentInc());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = ObjectId.getCurrentInc();
      //  // Unstable assertion: assertEquals(93, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      byte[] byteArray0 = objectId0.toByteArray();
      ObjectId objectId1 = new ObjectId(byteArray0);
      boolean boolean0 = objectId0.equals(objectId1);
      assertEquals(1, objectId0.getCurrentCounter());
      assertTrue(boolean0);
  }
}
