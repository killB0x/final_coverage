/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 04:48:39 GMT 2022
 */

package org.coode.mdock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Point;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.coode.mdock.ComponentNode;
import org.coode.mdock.HorizontalSplitter;
import org.coode.mdock.HorizontalSplitterNode;
import org.coode.mdock.Node;
import org.coode.mdock.SplitterNode;
import org.coode.mdock.VerticalSplitter;
import org.coode.mdock.VerticalSplitterNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Splitter_ESTest extends Splitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VerticalSplitter verticalSplitter0 = new VerticalSplitter((SplitterNode) null, (Node) null, (Node) null);
      verticalSplitter0.setBounds((-1746), 10, 10, 10);
      verticalSplitter0.startDragging((Point) null);
      // Undeclared exception!
      try { 
        verticalSplitter0.endDragging((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<VerticalSplitterNode> arrayList0 = new ArrayList<VerticalSplitterNode>();
      Vector<Double> vector0 = new Vector<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      SplitterNode splitterNode0 = horizontalSplitterNode0.createPerpendicularSplitterNode(linkedList0, vector0);
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter((SplitterNode) null, splitterNode0, horizontalSplitterNode0);
      SplitterNode splitterNode1 = horizontalSplitter0.getNode();
      assertNull(splitterNode1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter((SplitterNode) null, (Node) null, (Node) null);
      Node node0 = horizontalSplitter0.getChild1();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<ComponentNode> stack0 = new Stack<ComponentNode>();
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(stack0, arrayList0);
      ComponentNode componentNode0 = new ComponentNode();
      VerticalSplitter verticalSplitter0 = new VerticalSplitter(verticalSplitterNode0, verticalSplitterNode0, componentNode0);
      ComponentNode componentNode1 = (ComponentNode)verticalSplitter0.getChild1();
      assertEquals(0, componentNode1.getComponentCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter((SplitterNode) null, (Node) null, (Node) null);
      Node node0 = horizontalSplitter0.getChild0();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter((SplitterNode) null, componentNode0, (Node) null);
      Node node0 = horizontalSplitter0.getChild0();
      assertFalse(node0.isVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VerticalSplitter verticalSplitter0 = new VerticalSplitter((SplitterNode) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        verticalSplitter0.resetBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VerticalSplitter verticalSplitter0 = new VerticalSplitter((SplitterNode) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        verticalSplitter0.getMinLocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VerticalSplitter verticalSplitter0 = new VerticalSplitter((SplitterNode) null, (Node) null, (Node) null);
      verticalSplitter0.restoreDefaultCursor();
      assertTrue(verticalSplitter0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter((SplitterNode) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        horizontalSplitter0.getMaxLocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VerticalSplitter verticalSplitter0 = new VerticalSplitter((SplitterNode) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        verticalSplitter0.setLocation(6, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<ComponentNode> vector0 = new Vector<ComponentNode>();
      TreeSet<Double> treeSet0 = new TreeSet<Double>();
      Vector<Double> vector1 = new Vector<Double>(treeSet0);
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(vector0, vector1);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      SplitterNode splitterNode0 = verticalSplitterNode0.createPerpendicularSplitterNode(linkedList0, vector1);
      VerticalSplitter verticalSplitter0 = new VerticalSplitter(splitterNode0, splitterNode0, verticalSplitterNode0);
      SplitterNode splitterNode1 = verticalSplitter0.getNode();
      assertEquals(1, SplitterNode.VERTICAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VerticalSplitter verticalSplitter0 = new VerticalSplitter((SplitterNode) null, (Node) null, (Node) null);
      verticalSplitter0.startDragging((Point) null);
      // Undeclared exception!
      try { 
        verticalSplitter0.endDragging((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }
}
