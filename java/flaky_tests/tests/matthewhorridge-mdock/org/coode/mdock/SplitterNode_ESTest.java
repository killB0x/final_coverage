/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 04:37:01 GMT 2022
 */

package org.coode.mdock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.coode.mdock.ComponentNode;
import org.coode.mdock.HorizontalSplitterNode;
import org.coode.mdock.Node;
import org.coode.mdock.Splitter;
import org.coode.mdock.SplitterNode;
import org.coode.mdock.VerticalSplitterNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SplitterNode_ESTest extends SplitterNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      horizontalSplitterNode0.insertNodeAt(verticalSplitterNode0, 0, 0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, 622.37765464);
      assertEquals(1, SplitterNode.VERTICAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<ComponentNode> stack0 = new Stack<ComponentNode>();
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(stack0, arrayList0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(stack0, arrayList0);
      List<Node> list0 = verticalSplitterNode0.getVisibleChildren();
      SplitterNode splitterNode0 = horizontalSplitterNode0.createPerpendicularSplitterNode(list0, arrayList0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) splitterNode0, (double) 0);
      assertNotSame(verticalSplitterNode0, splitterNode0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, 622.37765464);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      SplitterNode splitterNode0 = horizontalSplitterNode0.createPerpendicularSplitterNode(linkedList0, vector0);
      horizontalSplitterNode0.insertNodeAfter((Node) splitterNode0, (Node) verticalSplitterNode0, 0);
      assertEquals(1, SplitterNode.VERTICAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, linkedList0);
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      SplitterNode splitterNode0 = verticalSplitterNode0.createPerpendicularSplitterNode(linkedList1, linkedList0);
      VerticalSplitterNode verticalSplitterNode1 = new VerticalSplitterNode(linkedList1, linkedList0);
      // Undeclared exception!
      try { 
        splitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.SplitterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      LinkedList<ComponentNode> linkedList0 = new LinkedList<ComponentNode>();
      HorizontalSplitterNode horizontalSplitterNode1 = new HorizontalSplitterNode(linkedList0, vector0);
      horizontalSplitterNode1.insertNodeAfter((Node) horizontalSplitterNode0, (Node) horizontalSplitterNode0, (double) 0);
      horizontalSplitterNode1.insertNodeBefore(verticalSplitterNode0, horizontalSplitterNode0, 0);
      assertEquals(1, SplitterNode.VERTICAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<ComponentNode> vector0 = new Vector<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(vector0, stack0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(vector0, stack0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      // Undeclared exception!
      try { 
        horizontalSplitterNode0.pushDown(verticalSplitterNode0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of splits must correspond to the number of children
         //
         verifyException("org.coode.mdock.SplitterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      horizontalSplitterNode0.addChild((Node) verticalSplitterNode0, 0, 4199.875744384);
      assertEquals(0, SplitterNode.HORIZONTAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      verticalSplitterNode0.stateChanged();
      assertEquals(1, SplitterNode.VERTICAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, 622.37765464);
      horizontalSplitterNode0.insertNodeBefore(verticalSplitterNode0, verticalSplitterNode0, 0);
      assertEquals(0, SplitterNode.HORIZONTAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, linkedList0);
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      SplitterNode splitterNode0 = verticalSplitterNode0.createPerpendicularSplitterNode(linkedList1, linkedList0);
      boolean boolean0 = splitterNode0.isSplitterDirection(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      boolean boolean0 = verticalSplitterNode0.isSplitterDirection(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<ComponentNode> stack0 = new Stack<ComponentNode>();
      Stack<Double> stack1 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(stack0, stack1);
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(stack0, stack1);
      horizontalSplitterNode0.addChild(verticalSplitterNode0, 0);
      double double0 = horizontalSplitterNode0.getSplit(verticalSplitterNode0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, 622.37765464);
      double double0 = horizontalSplitterNode0.getSplit(verticalSplitterNode0);
      assertEquals(622.37765464, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, 622.37765464);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      SplitterNode splitterNode0 = verticalSplitterNode0.createPerpendicularSplitterNode(linkedList0, vector0);
      horizontalSplitterNode0.replaceChild(verticalSplitterNode0, splitterNode0);
      double double0 = horizontalSplitterNode0.getNormalisedSplit(splitterNode0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      Splitter splitter0 = verticalSplitterNode0.createSplitter(horizontalSplitterNode0, horizontalSplitterNode0);
      assertFalse(splitter0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, 622.37765464);
      // Undeclared exception!
      horizontalSplitterNode0.replaceChild(verticalSplitterNode0, horizontalSplitterNode0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, 622.37765464);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      SplitterNode splitterNode0 = verticalSplitterNode0.createPerpendicularSplitterNode(linkedList0, vector0);
      horizontalSplitterNode0.replaceChild(verticalSplitterNode0, splitterNode0);
      // Undeclared exception!
      try { 
        horizontalSplitterNode0.replaceChild(verticalSplitterNode0, verticalSplitterNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stack<ComponentNode> stack0 = new Stack<ComponentNode>();
      Stack<Double> stack1 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(stack0, stack1);
      // Undeclared exception!
      try { 
        horizontalSplitterNode0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.SplitterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, (double) 0);
      // Undeclared exception!
      horizontalSplitterNode0.insertNodeBefore(horizontalSplitterNode0, verticalSplitterNode0, 1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      // Undeclared exception!
      horizontalSplitterNode0.insertNodeAt(horizontalSplitterNode0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Stack<ComponentNode> stack0 = new Stack<ComponentNode>();
      Stack<Double> stack1 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(stack0, stack1);
      // Undeclared exception!
      try { 
        horizontalSplitterNode0.insertNodeAt((Node) null, 0, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.SplitterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stack<ComponentNode> stack0 = new Stack<ComponentNode>();
      Stack<Double> stack1 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(stack0, stack1);
      // Undeclared exception!
      try { 
        horizontalSplitterNode0.insertNodeAt(horizontalSplitterNode0, 1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, 622.37765464);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      SplitterNode splitterNode0 = verticalSplitterNode0.createPerpendicularSplitterNode(linkedList0, vector0);
      horizontalSplitterNode0.replaceChild(verticalSplitterNode0, splitterNode0);
      // Undeclared exception!
      try { 
        horizontalSplitterNode0.insertNodeAfter((Node) splitterNode0, (Node) verticalSplitterNode0, 2864);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, stack0);
      // Undeclared exception!
      try { 
        horizontalSplitterNode0.insertNodeAfter((Node) null, (Node) null, (double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.SplitterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      // Undeclared exception!
      try { 
        horizontalSplitterNode0.addChild((Node) verticalSplitterNode0, 1, (double) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Stack<ComponentNode> stack0 = new Stack<ComponentNode>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(stack0, linkedList0);
      // Undeclared exception!
      try { 
        verticalSplitterNode0.addChild((Node) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.SplitterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      verticalSplitterNode0.insertNodeAt(horizontalSplitterNode0, 0, (-1.0));
      double double0 = verticalSplitterNode0.getGloballyNormalisedXLocation((Node) horizontalSplitterNode0);
      assertFalse(vector0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Stack<ComponentNode> stack0 = new Stack<ComponentNode>();
      Stack<Double> stack1 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(stack0, stack1);
      double double0 = horizontalSplitterNode0.getChildSpan();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      linkedList0.add((Node) horizontalSplitterNode0);
      Double double0 = Double.valueOf((double) 0);
      vector0.add(double0);
      SplitterNode splitterNode0 = horizontalSplitterNode0.createPerpendicularSplitterNode(linkedList0, vector0);
      assertEquals(0, SplitterNode.HORIZONTAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, stack0);
      // Undeclared exception!
      try { 
        verticalSplitterNode0.addChild((Node) null, 0, (double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.SplitterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Vector<Double> vector0 = new Vector<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, vector0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, vector0);
      // Undeclared exception!
      try { 
        horizontalSplitterNode0.insertNodeBefore(verticalSplitterNode0, horizontalSplitterNode0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.SplitterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, stack0);
      horizontalSplitterNode0.removeChild(horizontalSplitterNode0);
      assertEquals(1, SplitterNode.VERTICAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, stack0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, stack0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, (-1.0));
      horizontalSplitterNode0.setParent(horizontalSplitterNode0);
      horizontalSplitterNode0.remove();
      assertEquals(0, SplitterNode.HORIZONTAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, stack0);
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, stack0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, (double) 1);
      List<Splitter> list0 = horizontalSplitterNode0.getSplitters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, stack0);
      List<Splitter> list0 = horizontalSplitterNode0.getSplitters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, stack0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, stack0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, (-1.0));
      boolean boolean0 = horizontalSplitterNode0.isVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, stack0);
      List<Double> list0 = horizontalSplitterNode0.getSplits();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, stack0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, stack0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, (double) 1);
      horizontalSplitterNode0.insertNodeBefore(verticalSplitterNode0, verticalSplitterNode0, 1);
      assertEquals(0, SplitterNode.HORIZONTAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, stack0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, stack0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      linkedList0.add((Node) horizontalSplitterNode0);
      // Undeclared exception!
      try { 
        verticalSplitterNode0.createPerpendicularSplitterNode(linkedList0, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of splits must correspond to the number of children
         //
         verifyException("org.coode.mdock.SplitterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Stack<ComponentNode> stack0 = new Stack<ComponentNode>();
      Stack<Double> stack1 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(stack0, stack1);
      horizontalSplitterNode0.setSplit(horizontalSplitterNode0, 0);
      assertEquals(0, SplitterNode.HORIZONTAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, stack0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, stack0);
      // Undeclared exception!
      try { 
        horizontalSplitterNode0.replaceChild(verticalSplitterNode0, horizontalSplitterNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.SplitterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, stack0);
      // Undeclared exception!
      try { 
        horizontalSplitterNode0.getNormalisedSplit(horizontalSplitterNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.SplitterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Stack<ComponentNode> stack0 = new Stack<ComponentNode>();
      Stack<Double> stack1 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(stack0, stack1);
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(stack0, stack1);
      // Undeclared exception!
      try { 
        horizontalSplitterNode0.getSplit(verticalSplitterNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.SplitterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Stack<ComponentNode> stack0 = new Stack<ComponentNode>();
      Stack<Double> stack1 = new Stack<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(stack0, stack1);
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(stack0, stack1);
      horizontalSplitterNode0.addChild(verticalSplitterNode0, (-213.691822));
      double double0 = horizontalSplitterNode0.getSplit(verticalSplitterNode0);
      assertEquals((-213.691822), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<ComponentNode> arrayList0 = new ArrayList<ComponentNode>();
      Stack<Double> stack0 = new Stack<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, stack0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, stack0);
      horizontalSplitterNode0.insertNodeAfter((Node) verticalSplitterNode0, (Node) verticalSplitterNode0, (-1.0));
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      SplitterNode splitterNode0 = verticalSplitterNode0.createPerpendicularSplitterNode(linkedList0, stack0);
      horizontalSplitterNode0.replaceChild(verticalSplitterNode0, splitterNode0);
      double double0 = horizontalSplitterNode0.getNormalisedSplit(splitterNode0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }
}
