/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 04:39:19 GMT 2022
 */

package org.coode.mdock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.table.DefaultTableCellRenderer;
import org.coode.mdock.ComponentNode;
import org.coode.mdock.HorizontalSplitterNode;
import org.coode.mdock.Node;
import org.coode.mdock.SplitterNode;
import org.coode.mdock.Util;
import org.coode.mdock.VerticalSplitterNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Util_ESTest extends Util_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      JOptionPane jOptionPane0 = new JOptionPane(object0);
      ComponentNode componentNode0 = new ComponentNode();
      int int0 = Util.getWidth(componentNode0, jOptionPane0, true);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<VerticalSplitterNode> vector0 = new Vector<VerticalSplitterNode>();
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(vector0, arrayList0);
      Stack<Node> stack0 = new Stack<Node>();
      SplitterNode splitterNode0 = verticalSplitterNode0.createPerpendicularSplitterNode(stack0, arrayList0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("@ Sk!Pa3]ys");
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      int int0 = Util.getHeight(splitterNode0, jInternalFrame_JDesktopIcon0, false);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<VerticalSplitterNode> arrayList0 = new ArrayList<VerticalSplitterNode>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(arrayList0, linkedList0);
      byte[] byteArray0 = new byte[3];
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "1+V^UUMb_/f+%$r");
      JMenuItem jMenuItem0 = new JMenuItem(imageIcon0);
      JScrollPane jScrollPane0 = new JScrollPane(jMenuItem0);
      Rectangle rectangle0 = Util.getBounds(verticalSplitterNode0, jScrollPane0, false);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      Rectangle rectangle0 = Util.getBounds(componentNode0, jInternalFrame_JDesktopIcon0, true);
      assertEquals(28.0, rectangle0.getMaxY(), 0.01);
      assertEquals(80.0, rectangle0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.getY((Node) null, (Component) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JEditorPane jEditorPane0 = new JEditorPane();
      // Undeclared exception!
      try { 
        Util.getX((Node) null, jEditorPane0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.getWidth((Node) null, (Component) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JLabel jLabel0 = new JLabel((Icon) null);
      // Undeclared exception!
      try { 
        Util.getHeight((Node) null, jLabel0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point point0 = new Point();
      JTextPane jTextPane0 = new JTextPane();
      // Undeclared exception!
      try { 
        Util.getDeepestSplitterNode((SplitterNode) null, jTextPane0, point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point point0 = new Point();
      JTextPane jTextPane0 = new JTextPane();
      // Undeclared exception!
      try { 
        Util.getDeepestNode((Node) null, jTextPane0, point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      // Undeclared exception!
      try { 
        Util.getBounds((Node) null, defaultTableCellRenderer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.bringToFront((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JInternalFrame jInternalFrame0 = new JInternalFrame("lJ0X[hTsg");
      int int0 = Util.getHeight(componentNode0, jInternalFrame0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      JOptionPane jOptionPane0 = new JOptionPane(object0);
      ComponentNode componentNode0 = new ComponentNode();
      int int0 = Util.getHeight(componentNode0, jOptionPane0, true);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JProgressBar jProgressBar0 = new JProgressBar(0, 0);
      int int0 = Util.getWidth(componentNode0, jProgressBar0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JInternalFrame jInternalFrame0 = new JInternalFrame("lJ0X[hTsg");
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      int int0 = Util.getWidth(componentNode0, jInternalFrame_JDesktopIcon0, true);
      assertEquals(154, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultListModel<VerticalSplitterNode> defaultListModel0 = new DefaultListModel<VerticalSplitterNode>();
      JList<VerticalSplitterNode> jList0 = new JList<VerticalSplitterNode>(defaultListModel0);
      List<VerticalSplitterNode> list0 = jList0.getSelectedValuesList();
      Stack<Double> stack0 = new Stack<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(list0, stack0);
      Stack<Node> stack1 = new Stack<Node>();
      SplitterNode splitterNode0 = verticalSplitterNode0.createPerpendicularSplitterNode(stack1, stack0);
      int int0 = Util.getY(splitterNode0, jList0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JMenu jMenu0 = new JMenu();
      ComponentNode componentNode0 = new ComponentNode();
      int int0 = Util.getY(componentNode0, jMenu0, true);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JTextPane jTextPane0 = new JTextPane();
      int int0 = Util.getX(componentNode0, jTextPane0, true);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<VerticalSplitterNode> arrayList0 = new ArrayList<VerticalSplitterNode>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      byte[] byteArray0 = new byte[3];
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "1+V^UUMb_/f+%$r");
      JMenuItem jMenuItem0 = new JMenuItem(imageIcon0);
      JScrollPane jScrollPane0 = new JScrollPane(jMenuItem0);
      JScrollBar jScrollBar0 = jScrollPane0.createHorizontalScrollBar();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, linkedList0);
      int int0 = Util.getX(horizontalSplitterNode0, jScrollBar0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JMenu jMenu0 = new JMenu();
      JMenuItem jMenuItem0 = jMenu0.add((String) null);
      Util.bringToFront(jMenuItem0);
      assertTrue(jMenuItem0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      Point point0 = new Point();
      JTextPane jTextPane0 = new JTextPane();
      Node node0 = Util.getDeepestNode(componentNode0, jTextPane0, point0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JCheckBox jCheckBox0 = new JCheckBox();
      Rectangle rectangle0 = Util.getBounds(componentNode0, jCheckBox0, true);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Util util0 = new Util();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Stack<Node> stack1 = new Stack<Node>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(stack1, stack0);
      Point point0 = new Point();
      JTextPane jTextPane0 = new JTextPane();
      SplitterNode splitterNode0 = Util.getDeepestSplitterNode(verticalSplitterNode0, jTextPane0, point0);
      assertNull(splitterNode0);
  }
}
