/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 04:58:27 GMT 2022
 */

package org.coode.mdock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.util.LinkedList;
import javax.swing.JCheckBox;
import javax.swing.JTextArea;
import javax.swing.JViewport;
import org.coode.mdock.HorizontalSplitter;
import org.coode.mdock.HorizontalSplitterNode;
import org.coode.mdock.Node;
import org.coode.mdock.SplitterNode;
import org.coode.mdock.VerticalSplitterNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HorizontalSplitter_ESTest extends HorizontalSplitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(linkedList0, linkedList1);
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter(horizontalSplitterNode0, horizontalSplitterNode0, horizontalSplitterNode0);
      JTextArea jTextArea0 = new JTextArea("`&j9'1zV+]}VbhPOz");
      int int0 = horizontalSplitter0.getSpan(horizontalSplitterNode0, jTextArea0, true);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<HorizontalSplitterNode> linkedList0 = new LinkedList<HorizontalSplitterNode>();
      LinkedList<VerticalSplitterNode> linkedList1 = new LinkedList<VerticalSplitterNode>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(linkedList1, linkedList2);
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(linkedList0, linkedList2);
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter(verticalSplitterNode0, horizontalSplitterNode0, horizontalSplitterNode0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(horizontalSplitter0, 3849, 363L, 1, 0, 6, 6, 502, 6, false, 0, 0, 6);
      Point point0 = mouseWheelEvent0.getLocationOnScreen();
      int int0 = horizontalSplitter0.convertToLocation(point0);
      assertEquals(502, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(linkedList0, linkedList1);
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter(verticalSplitterNode0, verticalSplitterNode0, verticalSplitterNode0);
      JCheckBox jCheckBox0 = new JCheckBox("");
      MouseEvent mouseEvent0 = new MouseEvent(jCheckBox0, (-326), 2113L, 0, 1, (-326), 0, 6, 1074, false, 0);
      Point point0 = mouseEvent0.getPoint();
      int int0 = horizontalSplitter0.convertToLocation(point0);
      assertEquals((-326), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter((SplitterNode) null, (Node) null, (Node) null);
      JViewport jViewport0 = new JViewport();
      // Undeclared exception!
      try { 
        horizontalSplitter0.getSpan((Node) null, jViewport0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<VerticalSplitterNode> linkedList0 = new LinkedList<VerticalSplitterNode>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(linkedList0, linkedList1);
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter(horizontalSplitterNode0, horizontalSplitterNode0, horizontalSplitterNode0);
      // Undeclared exception!
      try { 
        horizontalSplitter0.convertToLocation((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.HorizontalSplitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter((SplitterNode) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        horizontalSplitter0.getMinLocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter((SplitterNode) null, (Node) null, (Node) null);
      horizontalSplitter0.setSplitterCursor();
      assertTrue(horizontalSplitter0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(linkedList0, linkedList1);
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter(horizontalSplitterNode0, horizontalSplitterNode0, horizontalSplitterNode0);
      JTextArea jTextArea0 = new JTextArea("`&j9'1zV+]}VbhPOz");
      int int0 = horizontalSplitter0.getSpan(horizontalSplitterNode0, jTextArea0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter((SplitterNode) null, (Node) null, (Node) null);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      int int0 = horizontalSplitter0.convertToLocation(point0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter((SplitterNode) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        horizontalSplitter0.getMaxLocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HorizontalSplitter horizontalSplitter0 = new HorizontalSplitter((SplitterNode) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        horizontalSplitter0.resetBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.Util", e);
      }
  }
}
