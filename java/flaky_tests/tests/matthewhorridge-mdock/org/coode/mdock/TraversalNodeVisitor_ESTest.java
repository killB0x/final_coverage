/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 04:54:57 GMT 2022
 */

package org.coode.mdock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import javax.swing.JList;
import javax.swing.JRadioButtonMenuItem;
import org.coode.mdock.ComponentNode;
import org.coode.mdock.ComponentPropertiesFactory;
import org.coode.mdock.HorizontalSplitterNode;
import org.coode.mdock.SerialisationNodeVisitor;
import org.coode.mdock.SplitterNode;
import org.coode.mdock.TraversalNodeVisitor;
import org.coode.mdock.VerticalSplitterNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TraversalNodeVisitor_ESTest extends TraversalNodeVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TraversalNodeVisitor traversalNodeVisitor0 = new TraversalNodeVisitor();
      // Undeclared exception!
      try { 
        traversalNodeVisitor0.visit((VerticalSplitterNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.TraversalNodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TraversalNodeVisitor traversalNodeVisitor0 = new TraversalNodeVisitor();
      // Undeclared exception!
      try { 
        traversalNodeVisitor0.visit((HorizontalSplitterNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.TraversalNodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null, (Element) null).when(document0).createElement(anyString());
      doReturn((org.w3c.dom.Node) null).when(document0).appendChild(any(org.w3c.dom.Node.class));
      ComponentPropertiesFactory componentPropertiesFactory0 = mock(ComponentPropertiesFactory.class, new ViolatedAssumptionAnswer());
      SerialisationNodeVisitor serialisationNodeVisitor0 = new SerialisationNodeVisitor(document0, componentPropertiesFactory0);
      ComponentNode componentNode0 = new ComponentNode();
      // Undeclared exception!
      try { 
        serialisationNodeVisitor0.visit(componentNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.SerialisationNodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TraversalNodeVisitor traversalNodeVisitor0 = new TraversalNodeVisitor();
      ComponentNode[] componentNodeArray0 = new ComponentNode[1];
      ComponentNode componentNode0 = new ComponentNode();
      JList<ComponentNode> jList0 = new JList<ComponentNode>(componentNodeArray0);
      componentNode0.add(jList0, "org.coode.mdock.ComponentNode$1");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<ComponentNode> linkedList1 = new LinkedList<ComponentNode>();
      linkedList1.offerFirst(componentNode0);
      Double double0 = new Double(0);
      linkedList0.add(double0);
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(linkedList1, linkedList0);
      traversalNodeVisitor0.visit(horizontalSplitterNode0);
      assertEquals(0, SplitterNode.HORIZONTAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TraversalNodeVisitor traversalNodeVisitor0 = new TraversalNodeVisitor();
      LinkedList<ComponentNode> linkedList0 = new LinkedList<ComponentNode>();
      ComponentNode componentNode0 = new ComponentNode();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("org.coode.mdock.ComponentNode$1");
      componentNode0.add(jRadioButtonMenuItem0, "org.coode.mdock.TraversalNodeVisitor");
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList0.offerFirst(componentNode0);
      Double double0 = new Double(1);
      linkedList1.add(double0);
      VerticalSplitterNode verticalSplitterNode0 = new VerticalSplitterNode(linkedList0, linkedList1);
      traversalNodeVisitor0.visit(verticalSplitterNode0);
      assertEquals(0, SplitterNode.HORIZONTAL_SPLITTER);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TraversalNodeVisitor traversalNodeVisitor0 = new TraversalNodeVisitor();
      ComponentNode componentNode0 = new ComponentNode();
      traversalNodeVisitor0.visit(componentNode0);
      assertFalse(componentNode0.isVisible());
  }
}
