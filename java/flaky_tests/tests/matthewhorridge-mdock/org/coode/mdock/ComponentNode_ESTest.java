/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 04:43:34 GMT 2022
 */

package org.coode.mdock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JRadioButton;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.coode.mdock.ComponentNode;
import org.coode.mdock.ComponentPropertiesFactory;
import org.coode.mdock.HorizontalSplitterNode;
import org.coode.mdock.Node;
import org.coode.mdock.SerialisationNodeVisitor;
import org.coode.mdock.TraversalNodeVisitor;
import org.coode.mdock.VerticalSplitterNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComponentNode_ESTest extends ComponentNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      componentNode0.stateChanged();
      assertEquals(0, componentNode0.getComponentCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JCheckBox jCheckBox0 = new JCheckBox("^<?xZ}cx='RyQ))s");
      componentNode0.add(jCheckBox0, "^<?xZ}cx='RyQ))s");
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      componentNode0.add(defaultListCellRenderer_UIResource0, "T#cb]3,g2J5");
      componentNode0.add(jCheckBox0, "^<?xZ}cx='RyQ))s");
      assertEquals(2, componentNode0.getComponentCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JComponent jComponent0 = componentNode0.getComponent();
      JScrollPane jScrollPane0 = new JScrollPane(jComponent0);
      componentNode0.remove((JComponent) null);
      assertFalse(componentNode0.isVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JTree jTree0 = new JTree();
      componentNode0.add(jTree0, "org.coode.mdock.ComponentNode$2");
      String string0 = componentNode0.getLabel(jTree0);
      assertEquals("org.coode.mdock.ComponentNode$2", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem();
      componentNode0.add(jRadioButtonMenuItem0, (String) null);
      int int0 = componentNode0.getComponentCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      ComponentNode componentNode0 = new ComponentNode();
      componentNode0.add(defaultListCellRenderer_UIResource0, "");
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("");
      componentNode0.add(jCheckBoxMenuItem0, "");
      // Undeclared exception!
      try { 
        componentNode0.add(jCheckBoxMenuItem0, "");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null, (Element) null).when(document0).createElement(anyString());
      doReturn((org.w3c.dom.Node) null).when(document0).appendChild(any(org.w3c.dom.Node.class));
      ComponentPropertiesFactory componentPropertiesFactory0 = mock(ComponentPropertiesFactory.class, new ViolatedAssumptionAnswer());
      SerialisationNodeVisitor serialisationNodeVisitor0 = new SerialisationNodeVisitor(document0, componentPropertiesFactory0);
      // Undeclared exception!
      try { 
        componentNode0.accept(serialisationNodeVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.SerialisationNodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      ComponentNode componentNode0 = new ComponentNode();
      componentNode0.add(defaultListCellRenderer_UIResource0, "");
      componentNode0.remove((JComponent) null);
      assertEquals(1, componentNode0.getComponentCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      int int0 = componentNode0.getComponentCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      double double0 = componentNode0.getGloballyNormalisedXLocation((Node) null);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      ArrayList<VerticalSplitterNode> arrayList0 = new ArrayList<VerticalSplitterNode>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      HorizontalSplitterNode horizontalSplitterNode0 = new HorizontalSplitterNode(arrayList0, linkedList0);
      componentNode0.setParent(horizontalSplitterNode0);
      double double0 = componentNode0.getGloballyNormalisedXLocation((Node) horizontalSplitterNode0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      assertFalse(componentNode0.isVisible());
      
      JMenu jMenu0 = new JMenu();
      componentNode0.add(jMenu0, "{D3qmw~5");
      boolean boolean0 = componentNode0.isVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      boolean boolean0 = componentNode0.isVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JMenu jMenu0 = new JMenu();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      componentNode0.add(jMenu0, "{D3qmw~5");
      componentNode0.add(jMenu0, "org.coode.mdock.ComponentNode");
      componentNode0.remove((JComponent) defaultTreeCellRenderer0);
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JMenu jMenu0 = new JMenu("3uRU(<rf^yH ");
      componentNode0.add(jMenu0, "");
      String string0 = componentNode0.getLabel(jMenu0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JRadioButton jRadioButton0 = new JRadioButton();
      String string0 = componentNode0.getLabel(jRadioButton0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      ComponentNode componentNode0 = new ComponentNode();
      componentNode0.add(defaultListCellRenderer_UIResource0, ")");
      ComponentNode componentNode1 = new ComponentNode();
      // Undeclared exception!
      try { 
        componentNode1.add(defaultListCellRenderer_UIResource0, ")");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.ComponentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JMenu jMenu0 = new JMenu();
      // Undeclared exception!
      try { 
        componentNode0.remove((JComponent) jMenu0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.coode.mdock.ComponentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      List<JComponent> list0 = componentNode0.getComponents();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      TraversalNodeVisitor traversalNodeVisitor0 = new TraversalNodeVisitor();
      componentNode0.accept(traversalNodeVisitor0);
      assertFalse(componentNode0.isVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      double double0 = componentNode0.getGloballyNormalisedYLocation((Node) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComponentNode componentNode0 = new ComponentNode();
      JComponent jComponent0 = componentNode0.getComponent();
      // Undeclared exception!
      try { 
        componentNode0.add(jComponent0, "org.coode.mdock.VerticalSplitter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // adding container's parent to itself
         //
         verifyException("java.awt.Container", e);
      }
  }
}
