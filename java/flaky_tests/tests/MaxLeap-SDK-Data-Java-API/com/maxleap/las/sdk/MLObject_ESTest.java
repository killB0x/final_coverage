/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 21:20:34 GMT 2022
 */

package com.maxleap.las.sdk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.maxleap.las.sdk.MLObject;
import com.maxleap.las.sdk.ObjectId;
import java.time.Clock;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoDate;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MLObject_ESTest extends MLObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MLObject mLObject0 = new MLObject();
      Long long0 = new Long(0L);
      mLObject0.setUpdatedAt(long0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.clear();
      ObjectId objectId0 = ObjectId.createFromLegacyFormat((-1654), (-1654), (-1654));
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      MinguoDate minguoDate0 = MockMinguoDate.from(localDate0);
      Object object0 = new Object();
      objectId0.equals(object0);
      objectId0.toByteArray();
      Object object1 = new Object();
      hashMap0.put(object1, clock0);
      objectId0.equals(minguoDate0);
      mLObject0.setObjectId(objectId0);
      mLObject0.setACL(hashMap0);
      mLObject0.updatedAtString();
      mLObject0.updateAt();
      Long long1 = new Long((-1654));
      mLObject0.setCreatedAt(long1);
      mLObject0.createdAtString();
      mLObject0.objectIdString();
      mLObject0.updateAt();
      mLObject0.updateAt();
      mLObject0.updatedAtString();
      mLObject0.objectId();
      Random.setNextRandom(503);
      mLObject0.updateAt();
      mLObject0.createdAt();
      mLObject0.updateAt();
      mLObject0.createdAt();
      mLObject0.createdAtString();
      System.setCurrentTimeMillis(4294967295L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      String string0 = mLObject0.createdAtString();
      assertNull(string0);
      
      mLObject0.toString();
      mLObject0.objectIdString();
      mLObject0.toString();
      Long long0 = new Long(2674L);
      mLObject0.setUpdatedAt(long0);
      Long long1 = new Long(0L);
      mLObject0.setUpdatedAt(long1);
      mLObject0.toString();
      System.setCurrentTimeMillis(0L);
      mLObject0.setCreatedAt((String) null);
      mLObject0.updateAt();
      mLObject0.toString();
      Random.setNextRandom((-820));
      mLObject0.updateAt();
      mLObject0.updateAt();
      String string1 = mLObject0.toString();
      assertEquals("MLObject{objectId=null, createdAt=null, updatedAt=0, ACL=null}", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      HashMap<ChronoLocalDate, Object> hashMap0 = new HashMap<ChronoLocalDate, Object>();
      mLObject0.setACL(hashMap0);
      assertTrue(hashMap0.isEmpty());
      
      Map map0 = mLObject0.getACL();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.createdAtString();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.entrySet();
      mLObject0.setACL(hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap1.put(integer0, (Integer) null);
      mLObject0.setACL(hashMap1);
      mLObject0.updatedAtString();
      Long long0 = new Long(2147483647L);
      mLObject0.setUpdatedAt(long0);
      mLObject0.toString();
      mLObject0.updateAt();
      mLObject0.updatedAtString();
      mLObject0.objectId();
      String string0 = mLObject0.toString();
      assertEquals("MLObject{objectId=null, createdAt=null, updatedAt=2147483647, ACL={0=null}}", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Long long0 = new Long((-1613L));
      mLObject0.setCreatedAt(long0);
      mLObject0.updatedAtString();
      long long1 = mLObject0.createdAt();
      assertEquals((-1613L), long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      String string0 = mLObject0.objectIdString();
      assertNull(string0);
      
      mLObject0.updatedAtString();
      Long long0 = new Long(0L);
      mLObject0.setCreatedAt(long0);
      mLObject0.createdAt();
      mLObject0.createdAt();
      MLObject mLObject1 = new MLObject();
      mLObject1.getACL();
      mLObject0.createdAt();
      MLObject mLObject2 = new MLObject();
      mLObject2.getACL();
      Long long1 = new Long(0L);
      mLObject1.setCreatedAt(long1);
      MLObject mLObject3 = new MLObject();
      mLObject3.updatedAtString();
      mLObject0.setCreatedAt((String) null);
      assertFalse(mLObject0.equals((Object)mLObject2));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      String string0 = mLObject0.toString();
      assertEquals("MLObject{objectId=null, createdAt=null, updatedAt=null, ACL=null}", string0);
      
      Long long0 = new Long((-1L));
      mLObject0.setUpdatedAt(long0);
      Long long1 = new Long((-1L));
      mLObject0.setCreatedAt(long1);
      mLObject0.toString();
      mLObject0.objectIdString();
      long long2 = mLObject0.updateAt();
      assertEquals((-1L), long2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      ObjectId objectId0 = ObjectId.get();
      mLObject0.setObjectId(objectId0);
      String string0 = mLObject0.objectIdString();
      assertEquals("52fe7ac1a054d3c900000016", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Long long0 = new Long(1203L);
      mLObject0.setUpdatedAt(long0);
      ObjectId objectId0 = new ObjectId();
      mLObject0.setObjectId(objectId0);
      ObjectId objectId1 = mLObject0.objectId();
      assertEquals((-1605053495), objectId1.getGenMachineId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.setUpdatedAt((String) null);
      String string0 = mLObject0.createdAtString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2415));
      Integer integer1 = new Integer(57);
      hashMap0.put(integer0, integer1);
      mLObject0.setACL(hashMap0);
      Long long0 = new Long(863L);
      mLObject0.setCreatedAt(long0);
      mLObject0.createdAtString();
      mLObject0.setUpdatedAt("1970-01-01T00:00:00.863Z");
      assertEquals(863L, mLObject0.createdAt());
      
      mLObject0.getACL();
      Map map0 = mLObject0.getACL();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Long long0 = new Long(1759L);
      mLObject0.setCreatedAt(long0);
      mLObject0.objectId();
      mLObject0.updatedAtString();
      long long1 = mLObject0.createdAt();
      Long long2 = new Long(1759L);
      mLObject0.setCreatedAt(long2);
      assertTrue(long2.equals((Object)long1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      String string0 = mLObject0.updatedAtString();
      assertNull(string0);
      
      Long long0 = new Long(0L);
      mLObject0.createdAtString();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(70);
      Integer integer1 = new Integer(70);
      hashMap0.replace(integer1, (Object) mLObject0, (Object) integer1);
      hashMap0.put((Integer) null, mLObject0);
      mLObject0.setACL(hashMap0);
      mLObject0.setCreatedAt(long0);
      mLObject0.setObjectId((String) null);
      mLObject0.objectIdString();
      mLObject0.setObjectId((ObjectId) null);
      mLObject0.updatedAtString();
      // Undeclared exception!
      try { 
        mLObject0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.createdAtString();
      mLObject0.objectIdString();
      ObjectId objectId0 = ObjectId.get();
      objectId0.equals((Object) null);
      mLObject0.setObjectId(objectId0);
      ObjectId objectId1 = ObjectId.createFromLegacyFormat(0, 0, 501);
      ObjectId.createFromLegacyFormat(673, 5067, (-879));
      objectId1._new = false;
      objectId1.getDate();
      mLObject0.setObjectId(objectId1);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      mLObject0.setACL(hashMap0);
      mLObject0.objectId();
      // Undeclared exception!
      try { 
        mLObject0.setUpdatedAt(", updatedAt=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Map map0 = mLObject0.getACL();
      assertNull(map0);
      
      Long long0 = new Long(0L);
      mLObject0.setCreatedAt(long0);
      mLObject0.createdAtString();
      // Undeclared exception!
      try { 
        mLObject0.updateAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Long long0 = new Long(1L);
      mLObject0.setCreatedAt(long0);
      String string0 = mLObject0.createdAtString();
      assertEquals("1970-01-01T00:00:00.001Z", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.toString();
      // Undeclared exception!
      try { 
        mLObject0.setCreatedAt("8-D`B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      // Undeclared exception!
      try { 
        mLObject0.setCreatedAt("machine : ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      // Undeclared exception!
      try { 
        mLObject0.updateAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      ObjectId objectId0 = mLObject0.objectId();
      assertNull(objectId0);
      
      mLObject0.setObjectId((ObjectId) null);
      // Undeclared exception!
      try { 
        mLObject0.createdAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.createdAtString();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      hashMap0.replace(integer0, object0);
      hashMap0.put(integer0, integer0);
      hashMap0.entrySet();
      mLObject0.setACL(hashMap0);
      mLObject0.createdAtString();
      mLObject0.objectId();
      mLObject0.createdAtString();
      // Undeclared exception!
      try { 
        mLObject0.updateAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      // Undeclared exception!
      try { 
        mLObject0.createdAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Long long0 = new Long(0L);
      mLObject0.setUpdatedAt(long0);
      assertEquals(0L, mLObject0.updateAt());
      
      String string0 = mLObject0.updatedAtString();
      assertEquals("1970-01-01T00:00:00.000Z", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      ObjectId objectId0 = ObjectId.get();
      mLObject0.toString();
      mLObject0.toString();
      ObjectId.createFromLegacyFormat(0, 0, 0);
      mLObject0.setObjectId(objectId0);
      objectId0.toString();
      int int0 = 0;
      ObjectId.createFromLegacyFormat(97, 0, 0);
      objectId0.toHexString();
      objectId0.toString();
      Long long0 = new Long((-3238L));
      mLObject0.setUpdatedAt(long0);
      objectId0.toByteArray();
      mLObject0.updatedAtString();
      mLObject0.setObjectId(objectId0);
      ObjectId.createFromLegacyFormat(0, 0, 0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        hashMap0.merge(object1, (Object) null, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      Integer integer0 = new Integer(1184);
      Integer integer1 = new Integer(57);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>(hashMap0);
      Integer integer2 = new Integer(57);
      hashMap1.put((Integer) null, integer2);
      mLObject0.setACL((Map) null);
      Long long0 = new Long(630L);
      mLObject0.setCreatedAt(long0);
      mLObject0.setUpdatedAt(long0);
      mLObject0.createdAtString();
      mLObject0.setUpdatedAt((String) null);
      assertEquals(630L, mLObject0.updateAt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      // Undeclared exception!
      try { 
        mLObject0.setUpdatedAt("ap!K]u%[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.setObjectId((String) null);
      // Undeclared exception!
      try { 
        mLObject0.updateAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.objectIdString();
      mLObject0.objectIdString();
      Long long0 = new Long(4727L);
      mLObject0.setUpdatedAt(long0);
      mLObject0.setObjectId((String) null);
      String string0 = ",fQ";
      // Undeclared exception!
      try { 
        mLObject0.setUpdatedAt("B&G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.toString();
      MockDate mockDate0 = new MockDate(0, 0, 4077);
      ObjectId objectId0 = new ObjectId(mockDate0);
      mLObject0.setObjectId(objectId0);
      mLObject0.objectIdString();
      // Undeclared exception!
      try { 
        mLObject0.createdAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.MLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      // Undeclared exception!
      try { 
        mLObject0.setObjectId("machineY ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId [machineY ]
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.setCreatedAt((String) null);
      Map map0 = mLObject0.getACL();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.setCreatedAt((Long) null);
      Map map0 = mLObject0.getACL();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MLObject mLObject0 = new MLObject();
      mLObject0.objectIdString();
      mLObject0.updatedAtString();
      mLObject0.setCreatedAt((String) null);
      Long long0 = new Long(0L);
      mLObject0.setCreatedAt(long0);
      Long long1 = new Long(0L);
      mLObject0.setUpdatedAt(long1);
      Long long2 = new Long((-331L));
      // Undeclared exception!
      try { 
        mLObject0.setObjectId("J=0X!ZB6*m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId [J=0X!ZB6*m]
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }
}
