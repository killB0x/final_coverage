/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 21:10:41 GMT 2022
 */

package com.maxleap.las.sdk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.maxleap.las.sdk.ObjectId;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectId_ESTest extends ObjectId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectId.validate("", "|c{PG{%X`oaUk+w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  invalid ObjectId [|c{PG{%X`oaUk+w]
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectId.validate((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId []
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      ObjectId objectId1 = ObjectId.get();
      int int0 = objectId0.compareTo(objectId1);
      //  // Unstable assertion: assertEquals(1485, objectId1.getCurrentCounter());
      //  // Unstable assertion: assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-12), (-2168), 0, (-2168));
      ObjectId objectId0 = new ObjectId(mockDate0, (-12), 1765);
      ObjectId objectId1 = new ObjectId((-1605087505), (-1605087505), (-1605087505));
      int int0 = objectId0.compareTo(objectId1);
      assertEquals((-612831463), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      int int0 = objectId0._compareUnsigned(Integer.MIN_VALUE, 1);
      //  // Unstable assertion: assertEquals(1406, objectId0.getCurrentInc());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      int int0 = objectId0._compareUnsigned(1, (-2147483647));
      //  // Unstable assertion: assertEquals(1328, objectId0.getCurrentInc());
      //  // Unstable assertion: assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      ObjectId objectId1 = ObjectId.get();
      boolean boolean0 = objectId0.equals(objectId1);
      //  // Unstable assertion: assertEquals(1207, objectId1.getCurrentCounter());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      ObjectId objectId1 = new ObjectId("52fe7ac1a0544eef00027b00");
      boolean boolean0 = objectId0.equals(objectId1);
      //  // Unstable assertion: assertEquals(1148, objectId0.getCurrentInc());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      MockDate mockDate0 = new MockDate();
      ObjectId objectId1 = new ObjectId(mockDate0, (-2509), (-2509));
      boolean boolean0 = objectId0.equals(objectId1);
      //  // Unstable assertion: assertEquals(1078, objectId1.getCurrentCounter());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      ObjectId objectId1 = new ObjectId(1834, 70, (-5));
      boolean boolean0 = objectId0.equals(objectId1);
      //  // Unstable assertion: assertEquals(1020, objectId1.getCurrentInc());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      objectId0.hashCode();
      //  // Unstable assertion: assertEquals(945, objectId0.getCurrentInc());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // need 12 bytes
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = ObjectId.isValid("9[D&eJe}plaANsR;.-yBy2Wd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectId objectId0 = ObjectId.createFromLegacyFormat(0, (-1306), 1660);
      assertEquals(0, objectId0.getTimestamp());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectId objectId0 = new ObjectId("7bdd100800000000000006e5", false);
      assertEquals(2078085128, objectId0.getTimestamp());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectId objectId0 = new ObjectId(0, 0, (-1605087505));
      ObjectId objectId1 = ObjectId.massageToObjectId(objectId0);
      assertEquals(0, objectId1.getTimestamp());
      assertNotNull(objectId1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectId objectId0 = ObjectId.createFromLegacyFormat((-988), (-988), (-988));
      ObjectId objectId1 = ObjectId.massageToObjectId(objectId0);
      assertEquals((-988), objectId1.getTimestamp());
      assertNotNull(objectId1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectId objectId0 = new ObjectId(0, 0, (-1605087505));
      int int0 = objectId0.getTimestamp();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 0);
      ObjectId objectId0 = new ObjectId(mockDate0, 3616);
      int int0 = objectId0.getTimestamp();
      assertEquals((-2140905600), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(25L);
      ObjectId objectId0 = ObjectId.get();
      //  // Unstable assertion: assertEquals(929, objectId0.getCurrentInc());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis((-3114L));
      ObjectId objectId0 = ObjectId.get();
      //  // Unstable assertion: assertEquals(913, objectId0.getCurrentCounter());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectId objectId0 = ObjectId.createFromLegacyFormat((-2066), (-2066), (-2066));
      ObjectId objectId1 = ObjectId.createFromLegacyFormat((-2066), 1348, 3578);
      int int0 = objectId0.compareTo(objectId1);
      assertEquals((-2066), objectId1.getTimestamp());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = ObjectId._pos("V}", 0);
      assertEquals("V}", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, (-2168), 0, (-2168));
      ObjectId objectId0 = new ObjectId(mockDate0, 0, 1765);
      int int0 = objectId0._compareUnsigned(0, 0);
      assertEquals(0, int0);
      assertEquals(2078085128, objectId0.getTimestamp());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectId._pos("", 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId((Date) null, 27, 27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId("u", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId [u]
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      String string0 = objectId0.toStringMongod();
      //  // Unstable assertion: assertEquals("52fe7ac1a0544eef00000353", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      ObjectId.massageToObjectId(objectId0);
      //  // Unstable assertion: assertEquals(835, objectId0.getCurrentCounter());
      //  // Unstable assertion: assertEquals(835, objectId0.getCurrentInc());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = ObjectId.isValid("7bdd100800000000000006e5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = ObjectId.isValid("06c;Uof?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = ObjectId.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      objectId0.toByteArray();
      //  // Unstable assertion: assertEquals(803, objectId0.getCurrentInc());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ObjectId.validate("Wom.8xeapRl'.s{k.KbZyhtd", "52fe7ac1a0544eef00027b45");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      MockDate mockDate0 = new MockDate();
      ObjectId objectId1 = new ObjectId(mockDate0, (-1052), (-1052));
      int int0 = objectId0.compareTo(objectId1);
      //  // Unstable assertion: assertEquals(704, objectId1.getCurrentInc());
      //  // Unstable assertion: assertEquals((-1605086453), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      int int0 = objectId0.compareTo(objectId0);
      //  // Unstable assertion: assertEquals(605, objectId0.getCurrentCounter());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      int int0 = objectId0.compareTo((ObjectId) null);
      //  // Unstable assertion: assertEquals(584, objectId0.getCurrentInc());
      //  // Unstable assertion: assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      ObjectId objectId1 = new ObjectId((-2442), (-2442), (-2442));
      int int0 = objectId1.compareTo(objectId0);
      //  // Unstable assertion: assertEquals(484, objectId1.getCurrentCounter());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      int int0 = objectId0._compareUnsigned(12, (-1606));
      //  // Unstable assertion: assertEquals(413, objectId0.getCurrentCounter());
      //  // Unstable assertion: assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      String string0 = objectId0.toHexString();
      //  // Unstable assertion: assertEquals("52fe7ac1a0544eef0000014e", string0);
      
      ObjectId objectId1 = new ObjectId("52fe7ac1a0544eef00027b36");
      boolean boolean0 = objectId0.equals(objectId1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate(65535, 48, 0, 3324, 808, (-1));
      ObjectId objectId0 = new ObjectId(mockDate0, 1, 3037);
      ObjectId objectId1 = new ObjectId(mockDate0);
      boolean boolean0 = objectId0.equals(objectId1);
      //  // Unstable assertion: assertEquals(280, objectId1.getCurrentCounter());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      ObjectId objectId1 = new ObjectId(18, 18, 18);
      boolean boolean0 = objectId1.equals(objectId0);
      //  // Unstable assertion: assertEquals(222, objectId1.getCurrentCounter());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      boolean boolean0 = objectId0.equals("");
      //  // Unstable assertion: assertEquals(193, objectId0.getCurrentCounter());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      boolean boolean0 = objectId0.equals(objectId0);
      //  // Unstable assertion: assertEquals(175, objectId0.getCurrentCounter());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // need 12 bytes
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ObjectId objectId0 = new ObjectId(byteArray0);
      assertEquals((-1605087505), objectId0.getGenMachineId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId("@[D.eveapRhAdL{;.IbBydWd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid ObjectId [@[D.eveapRhAdL{;.IbBydWd]
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = new Object();
      ObjectId objectId0 = ObjectId.massageToObjectId(object0);
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ObjectId objectId0 = ObjectId.massageToObjectId((Object) null);
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = ObjectId.isValid("com.8xeap.la.sdk.ObjUNtd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = ObjectId.isValid("/>n.ebeapx*ydI^7.9bOc+?d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ObjectId objectId0 = ObjectId.massageToObjectId("@[D.eveapRhAdL{;.IbBydWd");
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = ObjectId.getCurrentCounter();
      //  // Unstable assertion: assertEquals(174, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ObjectId objectId0 = ObjectId.createFromLegacyFormat(12, 2595, 2595);
      assertEquals(12, objectId0.getTimestamp());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectId._pos((String) null, 162585);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, (-2168), 0, (-2168));
      ObjectId objectId0 = new ObjectId(mockDate0, 0, 1765);
      int int0 = objectId0.getTimestamp();
      assertEquals(2078085128, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ObjectId objectId0 = null;
      try {
        objectId0 = new ObjectId((Date) null, (-139));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.maxleap.las.sdk.ObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = ObjectId.getGenMachineId();
      assertEquals((-1605087505), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      objectId0.getDate();
      objectId0.toHexString();
      ObjectId objectId1 = new ObjectId("52fe7ac1a0544eef00027b00");
      boolean boolean0 = objectId0.equals(objectId1);
      //  // Unstable assertion: assertEquals(75, objectId0.getCurrentInc());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = ObjectId.getCurrentInc();
      //  // Unstable assertion: assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      objectId0.toString();
      assertEquals(1, objectId0.getCurrentCounter());
  }
}
