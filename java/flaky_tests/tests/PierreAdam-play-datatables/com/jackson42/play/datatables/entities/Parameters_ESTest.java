/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 10:55:03 GMT 2022
 */

package com.jackson42.play.datatables.entities;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jackson42.play.datatables.entities.Column;
import com.jackson42.play.datatables.entities.Order;
import com.jackson42.play.datatables.entities.Parameters;
import com.jackson42.play.datatables.entities.Search;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parameters_ESTest extends Parameters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      parameters0.setStart(1667);
      int int0 = parameters0.getStart();
      assertEquals(1667, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      parameters0.setStart((-2351));
      int int0 = parameters0.getStart();
      assertEquals((-2351), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      Search search0 = new Search();
      parameters0.setSearch(search0);
      search0.setRegex(true);
      Search search1 = parameters0.getSearch();
      assertSame(search1, search0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      Search search0 = new Search();
      parameters0.setSearch(search0);
      Search search1 = parameters0.getSearch();
      assertFalse(search1.isRegex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      LinkedList<Order> linkedList0 = new LinkedList<Order>();
      linkedList0.add((Order) null);
      parameters0.setOrder(linkedList0);
      List<Order> list0 = parameters0.getSafeOrder();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      LinkedList<Column> linkedList0 = new LinkedList<Column>();
      Column column0 = new Column();
      linkedList0.addLast(column0);
      parameters0.setColumns(linkedList0);
      List<Column> list0 = parameters0.getOrderedColumns();
      parameters0.setColumns(list0);
      List<Column> list1 = parameters0.getSafeColumns();
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      LinkedList<Order> linkedList0 = new LinkedList<Order>();
      linkedList0.add((Order) null);
      parameters0.setOrder(linkedList0);
      List<Order> list0 = parameters0.getOrder();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      List<Order> list0 = parameters0.getSafeOrder();
      parameters0.setOrder(list0);
      List<Order> list1 = parameters0.getOrder();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      parameters0.setLength(2088);
      int int0 = parameters0.getLength();
      assertEquals(2088, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      parameters0.setLength((-1183));
      int int0 = parameters0.getLength();
      assertEquals((-1183), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      parameters0.setDraw(97);
      int int0 = parameters0.getDraw();
      assertEquals(97, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      parameters0.setDraw((-651));
      int int0 = parameters0.getDraw();
      assertEquals((-651), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      LinkedList<Column> linkedList0 = new LinkedList<Column>();
      Column column0 = new Column();
      linkedList0.addLast(column0);
      parameters0.setColumns(linkedList0);
      List<Column> list0 = parameters0.getOrderedColumns();
      parameters0.setColumns(list0);
      List<Column> list1 = parameters0.getColumns();
      assertTrue(list1.contains(column0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      LinkedList<Column> linkedList0 = new LinkedList<Column>();
      linkedList0.add((Column) null);
      parameters0.setColumns(linkedList0);
      // Undeclared exception!
      try { 
        parameters0.getOrderedColumns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jackson42.play.datatables.entities.Parameters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      LinkedList<Column> linkedList0 = new LinkedList<Column>();
      linkedList0.add((Column) null);
      parameters0.setColumns(linkedList0);
      // Undeclared exception!
      try { 
        parameters0.getIndexedColumns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jackson42.play.datatables.entities.Parameters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      LinkedList<Column> linkedList0 = new LinkedList<Column>();
      parameters0.setColumns(linkedList0);
      List<Column> list0 = parameters0.getSafeColumns();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      List<Column> list0 = parameters0.getSafeColumns();
      parameters0.setColumns(list0);
      List<Column> list1 = parameters0.getColumns();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      Search search0 = parameters0.getSearch();
      assertNull(search0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      Map<Integer, Column> map0 = parameters0.getIndexedColumns();
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      Search search0 = new Search();
      search0.setValue("");
      parameters0.setSearch(search0);
      boolean boolean0 = parameters0.hasGlobalSearch();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      Search search0 = new Search();
      search0.setValue("com.jackson42.play.datatables.entities.Parameters");
      parameters0.setSearch(search0);
      boolean boolean0 = parameters0.hasGlobalSearch();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      Search search0 = new Search();
      parameters0.setSearch(search0);
      boolean boolean0 = parameters0.hasGlobalSearch();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      int int0 = parameters0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      boolean boolean0 = parameters0.hasGlobalSearch();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      List<Order> list0 = parameters0.getOrder();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      int int0 = parameters0.getDraw();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      LinkedList<Column> linkedList0 = new LinkedList<Column>();
      parameters0.setColumns(linkedList0);
      List<Column> list0 = parameters0.getOrderedColumns();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      List<Column> list0 = parameters0.getColumns();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      int int0 = parameters0.getStart();
      assertEquals(0, int0);
  }
}
