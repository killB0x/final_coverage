/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 14:02:19 GMT 2022
 */

package com.github.swiftech.swifttime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.swiftech.swifttime.TimeFormatBuilder;
import java.util.Calendar;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeFormatBuilder_ESTest extends TimeFormatBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = TimeFormatBuilder.TIME_FORMAT_BUILDER_TIME_STAMP;
      MockDate mockDate0 = new MockDate(1, 1, 1, 1, (-5792), (-5792));
      String string0 = timeFormatBuilder0.TIME_FORMAT_BUILDER_DATE_TIME_MINUS.format((Date) mockDate0);
      assertEquals("1901-01-27 22:51", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = TimeFormatBuilder.TIME_FORMAT_BUILDER_DATE_TIME_MINUS;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1966, 1153, (-36), 0, 0);
      String string0 = timeFormatBuilder0.format((Calendar) mockGregorianCalendar0);
      assertEquals("1970-01-01 00:00", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = TimeFormatBuilder.TIME_FORMAT_BUILDER_DATE_SECOND_MINUS.TIME_FORMAT_BUILDER_DATE_TIME_MINUS.format((long) (-5792));
      assertEquals("1969-12-31 23:59", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = new TimeFormatBuilder();
      // Undeclared exception!
      try { 
        timeFormatBuilder0.format((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.swiftech.swifttime.TimeFormatBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = TimeFormatBuilder.TIME_FORMAT_BUILDER_DATE_MINUS;
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.separator("ND[ZO%x!s;K");
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        timeFormatBuilder1.format((Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = TimeFormatBuilder.TIME_FORMAT_BUILDER_TIME_STAMP;
      // Undeclared exception!
      try { 
        timeFormatBuilder0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.swiftech.swifttime.TimeFormatBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = TimeFormatBuilder.TIME_FORMAT_BUILDER_DATE_SECOND_MINUS;
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.separator("aMp[:K(C:70<}p1i");
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        timeFormatBuilder1.format(calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'p'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = new TimeFormatBuilder();
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.separator("=x~l");
      // Undeclared exception!
      try { 
        timeFormatBuilder1.format((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'x'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = new TimeFormatBuilder();
      String string0 = timeFormatBuilder0.format(0L);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = TimeFormatBuilder.TIME_FORMAT_BUILDER_TIME_STAMP;
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.TIME_FORMAT_BUILDER_DATE_MINUS.colon();
      assertNotSame(timeFormatBuilder0, timeFormatBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = TimeFormatBuilder.TIME_FORMAT_BUILDER_TIME_STAMP;
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.underscore();
      assertSame(timeFormatBuilder1, timeFormatBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = new TimeFormatBuilder();
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.hour();
      assertSame(timeFormatBuilder0, timeFormatBuilder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = new TimeFormatBuilder();
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.second();
      assertSame(timeFormatBuilder0, timeFormatBuilder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = TimeFormatBuilder.TIME_FORMAT_BUILDER_TIME_STAMP;
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.TIME_FORMAT_BUILDER_DATE_SECOND_MINUS.minute();
      assertNotSame(timeFormatBuilder0, timeFormatBuilder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = new TimeFormatBuilder();
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.year();
      assertSame(timeFormatBuilder0, timeFormatBuilder1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = new TimeFormatBuilder();
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.day();
      assertSame(timeFormatBuilder1, timeFormatBuilder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = new TimeFormatBuilder();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = timeFormatBuilder0.format((Calendar) mockGregorianCalendar0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = new TimeFormatBuilder();
      MockDate mockDate0 = new MockDate();
      String string0 = timeFormatBuilder0.format((Date) mockDate0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = new TimeFormatBuilder();
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.blank();
      assertSame(timeFormatBuilder1, timeFormatBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = new TimeFormatBuilder();
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.month();
      assertSame(timeFormatBuilder0, timeFormatBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeFormatBuilder timeFormatBuilder0 = new TimeFormatBuilder();
      TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.minus();
      assertSame(timeFormatBuilder1, timeFormatBuilder0);
  }
}
