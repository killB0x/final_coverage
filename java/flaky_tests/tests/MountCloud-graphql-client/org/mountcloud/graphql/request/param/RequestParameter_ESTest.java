/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 21:23:43 GMT 2022
 */

package org.mountcloud.graphql.request.param;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mountcloud.graphql.request.param.RequestParameter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RequestParameter_ESTest extends RequestParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.putIfAbsent(object0, object0);
      RequestParameter requestParameter0 = RequestParameter.buildByMap(hashMap0);
      // Undeclared exception!
      try { 
        requestParameter0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.String (java.lang.Object and java.lang.String are in module java.base of loader 'bootstrap')
         //
         verifyException("org.mountcloud.graphql.request.param.RequestParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<RequestParameter, Object> hashMap0 = new HashMap<RequestParameter, Object>();
      RequestParameter requestParameter0 = RequestParameter.build();
      RequestParameter requestParameter1 = requestParameter0.addParameter("", hashMap0);
      hashMap0.put(requestParameter1, requestParameter0);
      // Undeclared exception!
      try { 
        RequestParameter.buildByMap(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        RequestParameter.buildByMap((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RequestParameter requestParameter0 = RequestParameter.build();
      String string0 = requestParameter0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RequestParameter requestParameter0 = RequestParameter.build();
      requestParameter0.put((String) null, (Object) null);
      String string0 = requestParameter0.toString();
      assertEquals("(null:null)", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RequestParameter requestParameter0 = RequestParameter.build();
      // Undeclared exception!
      try { 
        requestParameter0.addObjectParameter("stz)^:y;]BN$", "stz)^:y;]BN$");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/Module
         //
         verifyException("org.mountcloud.graphql.request.param.RequestParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RequestParameter requestParameter0 = RequestParameter.build();
      RequestParameter requestParameter1 = requestParameter0.addParameter(".8|", ".8|");
      String string0 = requestParameter1.toString();
      assertEquals("(.8|:\\\".8|\\\")", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RequestParameter requestParameter0 = RequestParameter.build();
      RequestParameter requestParameter1 = RequestParameter.buildByMap(requestParameter0);
      assertNotSame(requestParameter1, requestParameter0);
  }
}
