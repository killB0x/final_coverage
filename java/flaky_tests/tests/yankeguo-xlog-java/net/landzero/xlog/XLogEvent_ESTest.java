/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 19:01:46 GMT 2022
 */

package net.landzero.xlog;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import net.landzero.xlog.http.AccessEvent;
import net.landzero.xlog.mybatis.TrackEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XLogEvent_ESTest extends XLogEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrackEvent trackEvent0 = new TrackEvent();
      String string0 = trackEvent0.topic();
      assertEquals("x-mybatis-track", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrackEvent trackEvent0 = new TrackEvent();
      MockDate mockDate0 = new MockDate();
      trackEvent0.setTimestamp(mockDate0);
      Date date0 = trackEvent0.getTimestamp();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      accessEvent0.setProject("7JY44%xg");
      String string0 = accessEvent0.getProject();
      assertEquals("7JY44%xg", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrackEvent trackEvent0 = new TrackEvent();
      trackEvent0.setPath("5Q9");
      String string0 = trackEvent0.getPathDigest();
      assertEquals("8ec3cbd6f29ae2d3a31ff323aea66c1a", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrackEvent trackEvent0 = new TrackEvent();
      trackEvent0.setCrid("Bv");
      String string0 = trackEvent0.getCrid();
      assertEquals("Bv", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      // Undeclared exception!
      try { 
        accessEvent0.setTopic("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // event must have a 'topic'
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      accessEvent0.setTopic("qf#Y9\"7'}RU^m~f_");
      assertNull(accessEvent0.getMethod());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      String string0 = accessEvent0.getTopic();
      assertEquals("x-access", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrackEvent trackEvent0 = new TrackEvent();
      String string0 = trackEvent0.getPathDigest();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      accessEvent0.setPath("qDeve");
      String string0 = accessEvent0.getPath();
      assertEquals("qDeve", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      String string0 = accessEvent0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      accessEvent0.setPathDigest("*Xp.W]");
      assertEquals(0, accessEvent0.getStatus());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      String string0 = accessEvent0.getProject();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      String string0 = accessEvent0.getCrid();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      Date date0 = accessEvent0.getTimestamp();
      assertNull(date0);
  }
}
