/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 18:52:42 GMT 2022
 */

package net.landzero.xlog.logback;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.spi.ILoggingEvent;
import net.landzero.xlog.logback.XLogFileAppender;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XLogBaseAppender_ESTest extends XLogBaseAppender_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      xLogFileAppender0.stop();
      assertEquals("plain", xLogFileAppender0.getMode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      xLogFileAppender0.start();
      assertEquals("plain", xLogFileAppender0.getMode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      xLogFileAppender0.closeLayout();
      assertEquals("plain", xLogFileAppender0.getMode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      xLogFileAppender0.setMode("json");
      boolean boolean0 = xLogFileAppender0.isJsonMode();
      assertEquals("json", xLogFileAppender0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      xLogFileAppender0.setProject("ry;5-|t_*oxt|c}t");
      String string0 = xLogFileAppender0.getProject();
      assertEquals("ry;5-|t_*oxt|c}t", string0);
      assertEquals("plain", xLogFileAppender0.getMode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      xLogFileAppender0.setMode((String) null);
      String string0 = xLogFileAppender0.getMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      assertEquals("plain", xLogFileAppender0.getMode());
      
      xLogFileAppender0.setMode("");
      xLogFileAppender0.getMode();
      assertEquals("", xLogFileAppender0.getMode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      xLogFileAppender0.setEnv("I]dE-a\"1Yw].");
      String string0 = xLogFileAppender0.getEnv();
      assertEquals("plain", xLogFileAppender0.getMode());
      assertEquals("I]dE-a\"1Yw].", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      xLogFileAppender0.setMode((String) null);
      xLogFileAppender0.start();
      assertNull(xLogFileAppender0.getMode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      boolean boolean0 = xLogFileAppender0.isJsonMode();
      assertFalse(boolean0);
      assertEquals("plain", xLogFileAppender0.getMode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      xLogFileAppender0.setMode("json");
      // Undeclared exception!
      try { 
        xLogFileAppender0.initLayout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      xLogFileAppender0.setMode((String) null);
      String string0 = xLogFileAppender0.getTopic();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      // Undeclared exception!
      try { 
        xLogFileAppender0.initLayout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      xLogFileAppender0.setTopic("A");
      assertEquals("plain", xLogFileAppender0.getMode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      String string0 = xLogFileAppender0.getMode();
      assertEquals("plain", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      // Undeclared exception!
      try { 
        xLogFileAppender0.append((ILoggingEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.landzero.xlog.logback.XLogBaseAppender", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      String string0 = xLogFileAppender0.getEnv();
      assertNull(string0);
      assertEquals("plain", xLogFileAppender0.getMode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      String string0 = xLogFileAppender0.getProject();
      assertEquals("plain", xLogFileAppender0.getMode());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XLogFileAppender xLogFileAppender0 = new XLogFileAppender();
      xLogFileAppender0.setMode("json");
      xLogFileAppender0.getTopic();
      assertEquals("json", xLogFileAppender0.getMode());
  }
}
