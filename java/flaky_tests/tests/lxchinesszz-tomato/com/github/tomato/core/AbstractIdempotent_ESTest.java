/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 14:02:55 GMT 2022
 */

package com.github.tomato.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.tomato.core.LocalCacheIdempotentTemplate;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIdempotent_ESTest extends AbstractIdempotent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      Long long0 = new Long(1166L);
      boolean boolean0 = localCacheIdempotentTemplate0.fixedIdempotent("rxrJ:8O*~o-Q5KN?m>p", long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      Long long0 = new Long(0L);
      boolean boolean0 = localCacheIdempotentTemplate0.doIdempotent("", long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      boolean boolean0 = localCacheIdempotentTemplate0.delKey(":ao~AoDO|j");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      Long long0 = new Long(0L);
      MockThrowable mockThrowable0 = new MockThrowable();
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      try { 
        localCacheIdempotentTemplate0.idempotent("", long0, (Supplier<? extends Throwable>) supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tomato.core.AbstractIdempotent", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      Long long0 = new Long(1127L);
      // Undeclared exception!
      try { 
        localCacheIdempotentTemplate0.idempotent((String) null, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tomato.core.AbstractIdempotent", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      Long long0 = new Long((-747L));
      MockThrowable mockThrowable0 = new MockThrowable();
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      try { 
        localCacheIdempotentTemplate0.fixedIdempotent(":ao~AoDO|j", long0, (Supplier<? extends Throwable>) supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tomato.core.AbstractIdempotent", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      // Undeclared exception!
      try { 
        localCacheIdempotentTemplate0.fixedIdempotent("", (Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tomato.core.LocalCacheIdempotentTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      // Undeclared exception!
      try { 
        localCacheIdempotentTemplate0.expire("", (Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tomato.core.LocalCacheIdempotentTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      // Undeclared exception!
      try { 
        localCacheIdempotentTemplate0.doIdempotent((String) null, (Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tomato.core.LocalCacheIdempotentTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      // Undeclared exception!
      try { 
        localCacheIdempotentTemplate0.delKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      // Undeclared exception!
      try { 
        localCacheIdempotentTemplate0.delIdempotent((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tomato.core.AbstractIdempotent", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      Long long0 = new Long(1127L);
      boolean boolean0 = localCacheIdempotentTemplate0.idempotent("S|H7Pja", long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      Long long0 = new Long(0L);
      localCacheIdempotentTemplate0.expire("", long0);
      localCacheIdempotentTemplate0.idempotent("", long0);
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      try { 
        localCacheIdempotentTemplate0.fixedIdempotent("8K=]`qhTf", long0, (Supplier<? extends Throwable>) supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tomato.core.AbstractIdempotent", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      Long long0 = new Long(1L);
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      try { 
        localCacheIdempotentTemplate0.idempotent("", long0, (Supplier<? extends Throwable>) supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tomato.core.AbstractIdempotent", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      Long long0 = new Long(1L);
      localCacheIdempotentTemplate0.doIdempotent("#VPQ", long0);
      localCacheIdempotentTemplate0.expire("#VPQ", long0);
      localCacheIdempotentTemplate0.expire("", long0);
      localCacheIdempotentTemplate0.doIdempotent("Del Idempotent: key[", long0);
      Long long1 = new Long((-1L));
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      try { 
        localCacheIdempotentTemplate0.idempotent("", long1, (Supplier<? extends Throwable>) supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.tomato.core.AbstractIdempotent", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      boolean boolean0 = localCacheIdempotentTemplate0.delIdempotent("rxrJ:8O*~o-Q5KN?m>p");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalCacheIdempotentTemplate localCacheIdempotentTemplate0 = new LocalCacheIdempotentTemplate();
      localCacheIdempotentTemplate0.setPrefix("BVVL|)8s]'&uQ`AEE");
  }
}
