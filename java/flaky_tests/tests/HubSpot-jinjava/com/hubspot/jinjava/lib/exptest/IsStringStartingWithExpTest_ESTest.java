/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 22:28:27 GMT 2022
 */

package com.hubspot.jinjava.lib.exptest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.interpret.JinjavaInterpreter;
import com.hubspot.jinjava.lib.exptest.IsStringStartingWithExpTest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IsStringStartingWithExpTest_ESTest extends IsStringStartingWithExpTest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IsStringStartingWithExpTest isStringStartingWithExpTest0 = new IsStringStartingWithExpTest();
      Object object0 = new Object();
      IsStringStartingWithExpTest isStringStartingWithExpTest1 = new IsStringStartingWithExpTest();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      boolean boolean0 = isStringStartingWithExpTest0.evaluate("java.lang.Object@0000000003", (JinjavaInterpreter) null, objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IsStringStartingWithExpTest isStringStartingWithExpTest0 = new IsStringStartingWithExpTest();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      boolean boolean0 = isStringStartingWithExpTest0.evaluate("java.lang.Object@0000000003", (JinjavaInterpreter) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IsStringStartingWithExpTest isStringStartingWithExpTest0 = new IsStringStartingWithExpTest();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        isStringStartingWithExpTest0.evaluate("-:?SLE", (JinjavaInterpreter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateSyntaxException", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IsStringStartingWithExpTest isStringStartingWithExpTest0 = new IsStringStartingWithExpTest();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = isStringStartingWithExpTest0.evaluate(object0, (JinjavaInterpreter) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IsStringStartingWithExpTest isStringStartingWithExpTest0 = new IsStringStartingWithExpTest();
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = isStringStartingWithExpTest0.evaluate("java.lang.Object@0000000003", (JinjavaInterpreter) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IsStringStartingWithExpTest isStringStartingWithExpTest0 = new IsStringStartingWithExpTest();
      String string0 = isStringStartingWithExpTest0.getName();
      assertEquals("string_startingwith", string0);
  }
}
