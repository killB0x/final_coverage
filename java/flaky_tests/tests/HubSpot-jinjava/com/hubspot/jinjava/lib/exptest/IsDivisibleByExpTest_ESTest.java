/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 21:07:13 GMT 2022
 */

package com.hubspot.jinjava.lib.exptest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.interpret.JinjavaInterpreter;
import com.hubspot.jinjava.lib.exptest.IsDivisibleByExpTest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IsDivisibleByExpTest_ESTest extends IsDivisibleByExpTest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IsDivisibleByExpTest isDivisibleByExpTest0 = new IsDivisibleByExpTest();
      String string0 = isDivisibleByExpTest0.getName();
      assertEquals("divisibleby", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IsDivisibleByExpTest isDivisibleByExpTest0 = new IsDivisibleByExpTest();
      Integer integer0 = Integer.getInteger((String) null, 100);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      Integer integer1 = new Integer(751);
      boolean boolean0 = isDivisibleByExpTest0.evaluate(integer1, (JinjavaInterpreter) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IsDivisibleByExpTest isDivisibleByExpTest0 = new IsDivisibleByExpTest();
      Integer integer0 = Integer.getInteger((String) null, 100);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      boolean boolean0 = isDivisibleByExpTest0.evaluate(integer0, (JinjavaInterpreter) null, objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IsDivisibleByExpTest isDivisibleByExpTest0 = new IsDivisibleByExpTest();
      Integer integer0 = new Integer(1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) isDivisibleByExpTest0;
      // Undeclared exception!
      try { 
        isDivisibleByExpTest0.evaluate(integer0, (JinjavaInterpreter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.interpret.InvalidArgumentException", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IsDivisibleByExpTest isDivisibleByExpTest0 = new IsDivisibleByExpTest();
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = isDivisibleByExpTest0.evaluate(integer0, (JinjavaInterpreter) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IsDivisibleByExpTest isDivisibleByExpTest0 = new IsDivisibleByExpTest();
      Integer integer0 = new Integer((-1706));
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        isDivisibleByExpTest0.evaluate(integer0, (JinjavaInterpreter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateSyntaxException", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IsDivisibleByExpTest isDivisibleByExpTest0 = new IsDivisibleByExpTest();
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = isDivisibleByExpTest0.evaluate("divisibleby", (JinjavaInterpreter) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      IsDivisibleByExpTest isDivisibleByExpTest0 = new IsDivisibleByExpTest();
      boolean boolean0 = isDivisibleByExpTest0.evaluate((Object) null, (JinjavaInterpreter) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      IsDivisibleByExpTest isDivisibleByExpTest0 = new IsDivisibleByExpTest();
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer0;
      // Undeclared exception!
      try { 
        isDivisibleByExpTest0.evaluate(integer0, (JinjavaInterpreter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.interpret.InvalidArgumentException", e);
      }
  }
}
