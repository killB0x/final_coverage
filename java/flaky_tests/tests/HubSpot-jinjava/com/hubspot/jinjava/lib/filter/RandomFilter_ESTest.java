/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 21:01:23 GMT 2022
 */

package com.hubspot.jinjava.lib.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.interpret.JinjavaInterpreter;
import com.hubspot.jinjava.lib.filter.RandomFilter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomFilter_ESTest extends RandomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RandomFilter randomFilter0 = new RandomFilter();
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      Object object1 = randomFilter0.filter(object0, (JinjavaInterpreter) null, stringArray0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RandomFilter randomFilter0 = new RandomFilter();
      String[] stringArray0 = new String[1];
      Object object0 = randomFilter0.filter((Object) "random", (JinjavaInterpreter) null, stringArray0);
      // Undeclared exception!
      try { 
        randomFilter0.filter(object0, (JinjavaInterpreter) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.lib.filter.RandomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", (Object) null);
      RandomFilter randomFilter0 = new RandomFilter();
      // Undeclared exception!
      try { 
        randomFilter0.filter((Object) hashMap0, (JinjavaInterpreter) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.lib.filter.RandomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      RandomFilter randomFilter0 = new RandomFilter();
      Object object0 = randomFilter0.filter((Object) hashMap0, (JinjavaInterpreter) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      RandomFilter randomFilter0 = new RandomFilter();
      linkedList0.add((Object) randomFilter0);
      // Undeclared exception!
      try { 
        randomFilter0.filter((Object) linkedList0, (JinjavaInterpreter) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.lib.filter.RandomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Collection<Object> collection0 = hashMap0.values();
      RandomFilter randomFilter0 = new RandomFilter();
      Object object0 = randomFilter0.filter((Object) collection0, (JinjavaInterpreter) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RandomFilter randomFilter0 = new RandomFilter();
      Object object0 = randomFilter0.filter((Object) null, (JinjavaInterpreter) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RandomFilter randomFilter0 = new RandomFilter();
      String string0 = randomFilter0.getName();
      assertEquals("random", string0);
  }
}
