/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 23:56:00 GMT 2022
 */

package com.hubspot.jinjava.lib.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.interpret.JinjavaInterpreter;
import com.hubspot.jinjava.lib.filter.IntersectFilter;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntersectFilter_ESTest extends IntersectFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntersectFilter intersectFilter0 = new IntersectFilter();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        intersectFilter0.filter((Object) null, (JinjavaInterpreter) null, (Object[]) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.lib.filter.AbstractSetFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IntersectFilter intersectFilter0 = new IntersectFilter();
      // Undeclared exception!
      try { 
        intersectFilter0.filter((Object) "intersect", (JinjavaInterpreter) null, (Object[]) null, (Map<String, Object>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Iterators
         //
         verifyException("com.hubspot.jinjava.util.ObjectIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IntersectFilter intersectFilter0 = new IntersectFilter();
      String string0 = intersectFilter0.getName();
      assertEquals("intersect", string0);
  }
}
