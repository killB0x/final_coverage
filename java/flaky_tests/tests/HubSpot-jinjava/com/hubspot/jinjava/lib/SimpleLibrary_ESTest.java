/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 21:05:16 GMT 2022
 */

package com.hubspot.jinjava.lib;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.lib.exptest.ExpTest;
import com.hubspot.jinjava.lib.exptest.ExpTestLibrary;
import com.hubspot.jinjava.lib.exptest.IsMappingExpTest;
import com.hubspot.jinjava.lib.filter.Filter;
import com.hubspot.jinjava.lib.filter.FilterLibrary;
import com.hubspot.jinjava.lib.filter.FirstFilter;
import com.hubspot.jinjava.lib.filter.TrimFilter;
import com.hubspot.jinjava.lib.filter.UpperFilter;
import com.hubspot.jinjava.lib.fn.ELFunctionDefinition;
import com.hubspot.jinjava.lib.fn.FunctionLibrary;
import com.hubspot.jinjava.lib.tag.Tag;
import com.hubspot.jinjava.lib.tag.TagLibrary;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleLibrary_ESTest extends SimpleLibrary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExpTestLibrary expTestLibrary0 = new ExpTestLibrary(false, (Set<String>) null);
      IsMappingExpTest isMappingExpTest0 = new IsMappingExpTest();
      expTestLibrary0.register((ExpTest) isMappingExpTest0);
      assertEquals("mapping", isMappingExpTest0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FilterLibrary filterLibrary0 = new FilterLibrary(false, (Set<String>) null);
      Class<TrimFilter>[] classArray0 = (Class<TrimFilter>[]) Array.newInstance(Class.class, 5);
      Class<TrimFilter> class0 = TrimFilter.class;
      classArray0[0] = class0;
      classArray0[1] = classArray0[0];
      classArray0[2] = classArray0[1];
      classArray0[3] = class0;
      classArray0[4] = class0;
      List<Filter> list0 = filterLibrary0.registerClasses(classArray0);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TagLibrary tagLibrary0 = new TagLibrary(false, (Set<String>) null);
      Tag tag0 = tagLibrary0.fetch("Veel");
      assertNull(tag0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FilterLibrary filterLibrary0 = new FilterLibrary(false, (Set<String>) null);
      FirstFilter firstFilter0 = new FirstFilter();
      filterLibrary0.register("", (Filter) firstFilter0);
      Filter filter0 = filterLibrary0.fetch("");
      assertEquals("first", filter0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FunctionLibrary functionLibrary0 = new FunctionLibrary(false, (Set<String>) null);
      // Undeclared exception!
      try { 
        functionLibrary0.register("", (ELFunctionDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.lib.SimpleLibrary", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExpTestLibrary expTestLibrary0 = new ExpTestLibrary(false, (Set<String>) null);
      // Undeclared exception!
      try { 
        expTestLibrary0.register((ExpTest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.lib.SimpleLibrary", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FilterLibrary filterLibrary0 = new FilterLibrary(false, (Set<String>) null);
      Class<TrimFilter>[] classArray0 = (Class<TrimFilter>[]) Array.newInstance(Class.class, 5);
      // Undeclared exception!
      try { 
        filterLibrary0.registerClasses(classArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Throwables
         //
         verifyException("com.hubspot.jinjava.lib.SimpleLibrary", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FilterLibrary filterLibrary0 = new FilterLibrary(false, (Set<String>) null);
      FirstFilter firstFilter0 = new FirstFilter();
      filterLibrary0.register("", (Filter) firstFilter0);
      Collection<Filter> collection0 = filterLibrary0.entries();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FilterLibrary filterLibrary0 = new FilterLibrary(false, (Set<String>) null);
      Class<UpperFilter>[] classArray0 = (Class<UpperFilter>[]) Array.newInstance(Class.class, 0);
      List<Filter> list0 = filterLibrary0.registerClasses(classArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      TagLibrary tagLibrary0 = null;
      try {
        tagLibrary0 = new TagLibrary(false, linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/ImmutableSet
         //
         verifyException("com.hubspot.jinjava.lib.SimpleLibrary", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExpTestLibrary expTestLibrary0 = null;
      try {
        expTestLibrary0 = new ExpTestLibrary(true, (Set<String>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }
}
