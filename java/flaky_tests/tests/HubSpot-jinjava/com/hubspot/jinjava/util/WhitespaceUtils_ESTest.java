/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 20:16:10 GMT 2022
 */

package com.hubspot.jinjava.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.util.WhitespaceUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WhitespaceUtils_ESTest extends WhitespaceUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.startsWith("$", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.endsWith("tm,tYQKcY$,r9dM", "tm,tYQKcY$,r9dM");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        WhitespaceUtils.unwrap((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.util.WhitespaceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        WhitespaceUtils.unquoteAndUnescape("{Kq[#~:+4ExZ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Strings
         //
         verifyException("com.hubspot.jinjava.util.WhitespaceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        WhitespaceUtils.startsWith("rxYuw$YB<kQ!?&1C:", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.util.WhitespaceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        WhitespaceUtils.isWrappedWith("\"M<!tU6", "\"M<!tU6", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.util.WhitespaceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        WhitespaceUtils.isExpressionQuoted((String) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Strings
         //
         verifyException("com.hubspot.jinjava.util.WhitespaceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        WhitespaceUtils.endsWith("HY2@+[Je#gU{\"BUM", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.util.WhitespaceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.startsWith("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = WhitespaceUtils.unwrap("Unbalanced quotes: ", "", "");
      assertEquals("Unbalanced quotes:", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        WhitespaceUtils.unwrap(" 84bqx1;%^)<Vk^Dq>`", " 84bqx1;%^)<Vk^Dq>`", " 84bqx1;%^)<Vk^Dq>`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = WhitespaceUtils.unwrap("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        WhitespaceUtils.unquote("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = WhitespaceUtils.unquote((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.isQuoted("\"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        WhitespaceUtils.isQuoted("\"M<!tU6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unbalanced quotes: \"M<!tU6
         //
         verifyException("com.hubspot.jinjava.util.WhitespaceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        WhitespaceUtils.isQuoted("'v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unbalanced quotes: 'v
         //
         verifyException("com.hubspot.jinjava.util.WhitespaceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.isQuoted("'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.isQuoted("sEnr8G^pSM*mN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.isWrappedWith("\"M<!tU6", "\"M<!tU6", "\"M<!tU6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.isWrappedWith("com.hubspot.jinjava.interpret.InterpretException", "", "-Zc");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.isWrappedWith("Y_E`IT", "$+P'moM1bVB", "nQBA|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.endsWith("2(7=nhW3%.UkO2e5'k ", "2(7=nhW3%.UkO2e5'k ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.endsWith("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.endsWith((String) null, "$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.startsWith(" C;\"e'aFKIt+S5te", "\"~li(EOZ-=p!VyLA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = WhitespaceUtils.unquote("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = WhitespaceUtils.startsWith((String) null, "[2ZXV=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = WhitespaceUtils.unquote("'\"vR");
      assertEquals("\"v", string0);
  }
}
