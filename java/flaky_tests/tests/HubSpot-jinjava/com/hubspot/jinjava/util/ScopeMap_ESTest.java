/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 20:31:41 GMT 2022
 */

package com.hubspot.jinjava.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.util.ScopeMap;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScopeMap_ESTest extends ScopeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScopeMap<ScopeMap<Integer, Integer>, ScopeMap<Integer, Integer>> scopeMap0 = new ScopeMap<ScopeMap<Integer, Integer>, ScopeMap<Integer, Integer>>();
      ScopeMap<Integer, Integer> scopeMap1 = new ScopeMap<Integer, Integer>();
      scopeMap0.put((ScopeMap<Integer, Integer>) null, scopeMap1);
      ScopeMap<ScopeMap<Integer, Integer>, ScopeMap<Integer, Integer>> scopeMap2 = new ScopeMap<ScopeMap<Integer, Integer>, ScopeMap<Integer, Integer>>(scopeMap0, scopeMap0);
      assertFalse(scopeMap2.equals((Object)scopeMap0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> scopeMap0 = new ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> scopeMap1 = new ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(scopeMap0, scopeMap0);
      Integer integer0 = new Integer(2142);
      Integer integer1 = scopeMap1.replace((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScopeMap<ScopeMap<Integer, Integer>, ScopeMap<Integer, Integer>> scopeMap0 = new ScopeMap<ScopeMap<Integer, Integer>, ScopeMap<Integer, Integer>>();
      ScopeMap<Integer, Integer> scopeMap1 = new ScopeMap<Integer, Integer>();
      ScopeMap<Integer, Integer> scopeMap2 = new ScopeMap<Integer, Integer>(scopeMap1, scopeMap1);
      ScopeMap<Integer, Integer> scopeMap3 = scopeMap1.getParent();
      scopeMap0.put(scopeMap3, scopeMap2);
      ScopeMap<Integer, Integer> scopeMap4 = scopeMap0.replace(scopeMap3, scopeMap1);
      assertSame(scopeMap4, scopeMap2);
      assertNotNull(scopeMap4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> scopeMap0 = new ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      Integer integer0 = new Integer(2142);
      Integer integer1 = scopeMap0.replace((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      ScopeMap<Integer, Integer> scopeMap1 = new ScopeMap<Integer, Integer>(scopeMap0);
      Object object0 = new Object();
      Integer integer0 = scopeMap1.remove(object0);
      Integer integer1 = new Integer(0);
      boolean boolean0 = scopeMap1.replace(integer1, integer1, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      boolean boolean0 = scopeMap0.replace(integer0, integer0, (Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer1 = hashMap0.put(integer0, integer0);
      scopeMap0.putAll(hashMap0);
      Integer integer2 = new Integer(0);
      Integer integer3 = scopeMap0.get((Object) integer2, integer1);
      assertTrue(integer3.equals((Object)integer2));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      ScopeMap.ScopeMapEntry<Integer, Integer> scopeMap_ScopeMapEntry0 = new ScopeMap.ScopeMapEntry<Integer, Integer>(integer0, integer0, scopeMap0);
      Integer integer1 = scopeMap_ScopeMapEntry0.getValue();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, (Integer) null);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry1);
      ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> scopeMap0 = new ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      ScopeMap.ScopeMapEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> scopeMap_ScopeMapEntry0 = new ScopeMap.ScopeMapEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0, scopeMap0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = scopeMap_ScopeMapEntry0.getKey();
      assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> scopeMap0 = new ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      scopeMap0.putIfAbsent((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      int int0 = scopeMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> scopeMap0 = new ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      scopeMap0.put(integer0, abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = scopeMap0.remove((Object) integer0);
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScopeMap<ArrayList<Object>, ScopeMap<Object, Object>> scopeMap0 = new ScopeMap<ArrayList<Object>, ScopeMap<Object, Object>>();
      ScopeMap<Object, Object> scopeMap1 = new ScopeMap<Object, Object>();
      BiFunction<Object, Object, ScopeMap<Object, Object>> biFunction0 = (BiFunction<Object, Object, ScopeMap<Object, Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      scopeMap0.merge((ArrayList<Object>) null, scopeMap1, biFunction0);
      ScopeMap<Object, Object> scopeMap2 = scopeMap0.put((ArrayList<Object>) null, scopeMap1);
      assertSame(scopeMap1, scopeMap2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> scopeMap0 = new ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      scopeMap0.putIfAbsent((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, (Integer) null);
      Set<AbstractMap.SimpleImmutableEntry<Integer, Integer>> set0 = scopeMap0.keySet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(5708);
      hashMap0.putIfAbsent(integer0, integer0);
      scopeMap0.putAll(hashMap0);
      Map<Integer, Integer> map0 = scopeMap0.getScope();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScopeMap<Comparable<Object>, Object> scopeMap0 = new ScopeMap<Comparable<Object>, Object>();
      ScopeMap<Comparable<Object>, Object> scopeMap1 = new ScopeMap<Comparable<Object>, Object>(scopeMap0);
      ScopeMap<Comparable<Object>, Object> scopeMap2 = scopeMap1.getParent();
      assertNotSame(scopeMap1, scopeMap2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> scopeMap0 = new ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = scopeMap0.get((Object) abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScopeMap<Integer, Comparable<Integer>> scopeMap0 = new ScopeMap<Integer, Comparable<Integer>>();
      Comparable<Integer> comparable0 = scopeMap0.get((Object) scopeMap0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)scopeMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        scopeMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.util.ScopeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScopeMap<ArrayList<Object>, Object> scopeMap0 = null;
      try {
        scopeMap0 = new ScopeMap<ArrayList<Object>, Object>((ScopeMap<ArrayList<Object>, Object>) null, (Map<ArrayList<Object>, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(4220);
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      scopeMap0.merge(integer0, integer0, biFunction0);
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)scopeMap0.entrySet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> scopeMap0 = new ScopeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Set<AbstractMap.SimpleImmutableEntry<Integer, Integer>> set0 = scopeMap0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> scopeMap0 = new ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> scopeMap1 = new ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(scopeMap0, scopeMap0);
      Set<Integer> set0 = scopeMap1.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ScopeMap<ScopeMap<Object, Object>, ScopeMap<Object, Object>> scopeMap0 = new ScopeMap<ScopeMap<Object, Object>, ScopeMap<Object, Object>>();
      ScopeMap<Object, Object> scopeMap1 = new ScopeMap<Object, Object>();
      Function<Object, Object> function0 = Function.identity();
      Object object0 = scopeMap1.computeIfAbsent(scopeMap0, function0);
      Object object1 = scopeMap1.get((Object) scopeMap0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ScopeMap<HashSet<Object>, Object> scopeMap0 = new ScopeMap<HashSet<Object>, Object>();
      int int0 = scopeMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ScopeMap<ScopeMap<Integer, Integer>, Object> scopeMap0 = new ScopeMap<ScopeMap<Integer, Integer>, Object>();
      ScopeMap<Object, Object> scopeMap1 = new ScopeMap<Object, Object>();
      scopeMap1.put(scopeMap0, scopeMap0);
      Collection<Object> collection0 = scopeMap1.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ScopeMap<ScopeMap<Integer, Integer>, ScopeMap<Integer, Integer>> scopeMap0 = new ScopeMap<ScopeMap<Integer, Integer>, ScopeMap<Integer, Integer>>();
      ScopeMap<Integer, Integer> scopeMap1 = new ScopeMap<Integer, Integer>();
      ScopeMap<ScopeMap<Integer, Integer>, ScopeMap<Integer, Integer>> scopeMap2 = new ScopeMap<ScopeMap<Integer, Integer>, ScopeMap<Integer, Integer>>(scopeMap0);
      ScopeMap<Integer, Integer> scopeMap3 = scopeMap2.replace(scopeMap1, scopeMap1);
      assertNull(scopeMap3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> scopeMap0 = new ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> scopeMap1 = new ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(scopeMap0, scopeMap0);
      boolean boolean0 = scopeMap1.replace(integer0, abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> scopeMap0 = new ScopeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      scopeMap0.put(integer0, abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = scopeMap0.replace(integer0, abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ScopeMap<Comparable<Integer>, Object> scopeMap0 = new ScopeMap<Comparable<Integer>, Object>();
      // Undeclared exception!
      try { 
        scopeMap0.put(0, scopeMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // attempt to put on map with key '0' and value of itself
         //
         verifyException("com.hubspot.jinjava.util.ScopeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ScopeMap<Object, Object> scopeMap0 = new ScopeMap<Object, Object>();
      ScopeMap<ScopeMap<Object, Object>, Object> scopeMap1 = new ScopeMap<ScopeMap<Object, Object>, Object>();
      ScopeMap<ScopeMap<Object, Object>, Object> scopeMap2 = new ScopeMap<ScopeMap<Object, Object>, Object>(scopeMap1);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = scopeMap2.merge(scopeMap0, scopeMap0, biFunction0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.putIfAbsent((Integer) null, (Integer) null);
      scopeMap0.putAll(hashMap0);
      boolean boolean0 = scopeMap0.containsValue((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ScopeMap<Object, ArrayList<Object>> scopeMap0 = new ScopeMap<Object, ArrayList<Object>>();
      boolean boolean0 = scopeMap0.containsValue(scopeMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(5708);
      hashMap0.putIfAbsent(integer0, integer0);
      scopeMap0.putAll(hashMap0);
      boolean boolean0 = scopeMap0.containsKey(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ScopeMap<ScopeMap<Integer, Integer>, Object> scopeMap0 = new ScopeMap<ScopeMap<Integer, Integer>, Object>();
      boolean boolean0 = scopeMap0.containsKey(scopeMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      boolean boolean0 = scopeMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      scopeMap0.putIfAbsent((Integer) null, (Integer) null);
      boolean boolean0 = scopeMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(3);
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      ScopeMap.ScopeMapEntry<Integer, Integer> scopeMap_ScopeMapEntry0 = new ScopeMap.ScopeMapEntry<Integer, Integer>(integer0, integer0, scopeMap0);
      Integer integer1 = scopeMap_ScopeMapEntry0.setValue(integer0);
      assertEquals(3, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ScopeMap<Object, Object> scopeMap0 = new ScopeMap<Object, Object>();
      ScopeMap<Object, Object> scopeMap1 = new ScopeMap<Object, Object>(scopeMap0, scopeMap0);
      ScopeMap<Object, Object> scopeMap2 = new ScopeMap<Object, Object>(scopeMap1);
      assertFalse(scopeMap2.equals((Object)scopeMap0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ScopeMap<Object, ArrayList<Object>> scopeMap0 = new ScopeMap<Object, ArrayList<Object>>();
      ScopeMap<Object, ArrayList<Object>> scopeMap1 = new ScopeMap<Object, ArrayList<Object>>(scopeMap0);
      boolean boolean0 = scopeMap1.containsValue(scopeMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ScopeMap<Object, Comparable<Object>> scopeMap0 = new ScopeMap<Object, Comparable<Object>>();
      scopeMap0.clear();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ScopeMap<Integer, Integer> scopeMap0 = new ScopeMap<Integer, Integer>();
      Map<Integer, Integer> map0 = scopeMap0.getScope();
      assertEquals(0, map0.size());
  }
}
