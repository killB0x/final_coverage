/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 22:21:39 GMT 2022
 */

package com.hubspot.jinjava.interpret;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.interpret.LazyExpression;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LazyExpression_ESTest extends LazyExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      LazyExpression.Memoization lazyExpression_Memoization0 = LazyExpression.Memoization.ON;
      LazyExpression lazyExpression0 = new LazyExpression(supplier0, "", lazyExpression_Memoization0);
      LazyExpression lazyExpression1 = LazyExpression.of((Supplier) lazyExpression0, (String) null, lazyExpression_Memoization0);
      String string0 = lazyExpression1.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      LazyExpression lazyExpression0 = LazyExpression.of(supplier0, "',3A7RRKZMl");
      LazyExpression.Memoization lazyExpression_Memoization0 = LazyExpression.Memoization.OFF;
      LazyExpression lazyExpression1 = LazyExpression.of((Supplier) lazyExpression0, "", lazyExpression_Memoization0);
      String string0 = lazyExpression1.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LazyExpression lazyExpression0 = LazyExpression.of((Supplier) null, (String) null);
      // Undeclared exception!
      try { 
        lazyExpression0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.interpret.LazyExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      LazyExpression lazyExpression0 = LazyExpression.of(supplier0, "',3A7RRKZMl");
      Object object0 = lazyExpression0.getJsonValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, "").when(supplier0).get();
      LazyExpression.Memoization lazyExpression_Memoization0 = LazyExpression.Memoization.OFF;
      LazyExpression lazyExpression0 = LazyExpression.of(supplier0, "", lazyExpression_Memoization0);
      lazyExpression0.get();
      lazyExpression0.get();
      Object object0 = lazyExpression0.getJsonValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(12);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier0).get();
      LazyExpression lazyExpression0 = LazyExpression.of(supplier0, "");
      LazyExpression.Memoization lazyExpression_Memoization0 = LazyExpression.Memoization.OFF;
      LazyExpression lazyExpression1 = LazyExpression.of((Supplier) lazyExpression0, "", lazyExpression_Memoization0);
      LazyExpression lazyExpression2 = new LazyExpression(lazyExpression1, "", lazyExpression_Memoization0);
      lazyExpression2.get();
      Object object0 = lazyExpression1.get();
      assertEquals(12, object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(12);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier0).get();
      LazyExpression lazyExpression0 = LazyExpression.of(supplier0, "");
      lazyExpression0.get();
      Object object0 = lazyExpression0.get();
      assertEquals(12, object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LazyExpression lazyExpression0 = LazyExpression.of((Supplier) null, "]T");
      String string0 = lazyExpression0.toString();
      assertEquals("]T", string0);
  }
}
