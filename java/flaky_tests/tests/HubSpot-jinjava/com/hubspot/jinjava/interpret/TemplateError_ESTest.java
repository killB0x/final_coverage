/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 20:46:23 GMT 2022
 */

package com.hubspot.jinjava.interpret;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.interpret.InterpretException;
import com.hubspot.jinjava.interpret.InvalidArgumentException;
import com.hubspot.jinjava.interpret.InvalidInputException;
import com.hubspot.jinjava.interpret.TemplateError;
import com.hubspot.jinjava.interpret.TemplateSyntaxException;
import com.hubspot.jinjava.interpret.UnknownTagException;
import com.hubspot.jinjava.interpret.errorcategory.BasicTemplateErrorCategory;
import com.hubspot.jinjava.interpret.errorcategory.TemplateErrorCategory;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TemplateError_ESTest extends TemplateError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("OUTPUT_TOO_BIG", "OUTPUT_TOO_BIG", 82, 82);
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      templateError0.setStartPosition(0);
      templateError0.withScopeDepth(0);
      assertEquals(0, templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("OUTPUT_TOO_BIG", "OUTPUT_TOO_BIG", 82, 82);
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      TemplateError templateError1 = templateError0.withScopeDepth(0);
      assertEquals(82, templateError0.getStartPosition());
      assertEquals(82, templateError1.getStartPosition());
      assertEquals("OUTPUT_TOO_BIG", templateError1.getFieldName());
      assertEquals(82, templateError1.getLineno());
      assertEquals(0, templateError1.getScopeDepth());
      assertEquals("Syntax error in 'OUTPUT_TOO_BIG': Unknown tag: OUTPUT_TOO_BIG", templateError1.getMessage());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals(82, templateError0.getLineno());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.BAD_URL;
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.TEMPLATE;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "EXCEPTION", (String) null, 0, 11, (Exception) null, (TemplateErrorCategory) null, hashMap0, 6);
      TemplateError templateError1 = templateError0.withScopeDepth(6);
      assertEquals(11, templateError1.getStartPosition());
      assertEquals(0, templateError1.getLineno());
      assertTrue(templateError1.equals((Object)templateError0));
      assertNotSame(templateError1, templateError0);
      assertEquals(6, templateError0.getScopeDepth());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.IMPORT_CYCLE_DETECTED;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.OUTPUT_TOO_BIG;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.FILTER;
      InterpretException interpretException0 = new InterpretException("");
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "com.hubspot.jinjava.lib.filter.DAliasedDefaultFilter", ">'F;C[", 1843173897, (-822), interpretException0, basicTemplateErrorCategory0, hashMap0, (-822));
      TemplateError templateError1 = templateError0.serializable();
      assertEquals(1843173897, templateError0.getLineno());
      assertEquals((-822), templateError0.getStartPosition());
      assertEquals("com.hubspot.jinjava.lib.filter.DAliasedDefaultFilter", templateError1.getMessage());
      assertEquals((-822), templateError1.getScopeDepth());
      assertEquals(">'F;C[", templateError1.getFieldName());
      assertTrue(templateError1.equals((Object)templateError0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("INVALID_INPUT", "INVALID_INPUT", 0, 0);
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.TAG;
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.FROM_CYCLE_DETECTED;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.UNKNOWN;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "3[S", "3[S", 0, 0, unknownTagException0, basicTemplateErrorCategory0, hashMap0, 0);
      TemplateError templateError1 = templateError0.serializable();
      assertTrue(templateError1.equals((Object)templateError0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.IMPORT_CYCLE_DETECTED;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.OTHER;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.FUNCTION;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "UlTJ.80Ml/", "UlTJ.80Ml/", 0, 0, (Exception) null, basicTemplateErrorCategory0, hashMap0, 1);
      TemplateError templateError1 = templateError0.serializable();
      assertEquals(0, templateError1.getLineno());
      assertTrue(templateError1.equals((Object)templateError0));
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals(0, templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("IR>fJrB$Hbii", (String) null, (-815), 123);
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      TemplateError templateError1 = templateError0.serializable();
      assertEquals("Syntax error in 'null': Unknown tag: IR>fJrB$Hbii", templateError1.getMessage());
      assertTrue(templateError1.equals((Object)templateError0));
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals("IR>fJrB$Hbii", templateError1.getFieldName());
      assertEquals((-815), templateError1.getLineno());
      assertEquals(123, templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.DISABLED;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.EXPRESSION_TEST;
      UnknownTagException unknownTagException0 = new UnknownTagException(" um)%[", "O8CJq-?Z wBB}W~@", (-2738), 66);
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.UNKNOWN;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "/yIMh`)5UE +2", "com.hubspot.jinjava.lib.filter.DivisibleFilter", 0, 0, unknownTagException0, basicTemplateErrorCategory0, hashMap0, 5);
      int int0 = templateError0.getStartPosition();
      assertEquals(5, templateError0.getScopeDepth());
      assertEquals("/yIMh`)5UE +2", templateError0.getMessage());
      assertEquals(0, int0);
      assertEquals("com.hubspot.jinjava.lib.filter.DivisibleFilter", templateError0.getFieldName());
      assertEquals(0, templateError0.getLineno());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("com.hubsp@t.jinjava.interpre.TemplateError", "com.hubsp@t.jinjava.interpre.TemplateError", 68, 68);
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.DISABLED;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.PROPERTY;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "", "", 125, 125, unknownTagException0, (TemplateErrorCategory) null, linkedHashMap0, (-408));
      int int0 = templateError0.getStartPosition();
      assertEquals((-408), templateError0.getScopeDepth());
      assertEquals(125, int0);
      assertEquals(125, templateError0.getLineno());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.SYNTAX_ERROR;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.TOKEN;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "j47", "j47", (-542), (Exception) null);
      int int0 = templateError0.getScopeDepth();
      assertEquals((-542), templateError0.getLineno());
      assertEquals((-1), templateError0.getStartPosition());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.CYCLE_DETECTED;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.DISABLED;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.PROPERTY;
      MockException mockException0 = new MockException("%RG6^NXtK");
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "4", "ao$DP+2psM~Sa}Y?S-6", (-132), 7, mockException0, basicTemplateErrorCategory0, hashMap0, (-132));
      int int0 = templateError0.getScopeDepth();
      assertEquals("4", templateError0.getMessage());
      assertEquals((-132), int0);
      assertEquals("ao$DP+2psM~Sa}Y?S-6", templateError0.getFieldName());
      assertEquals((-132), templateError0.getLineno());
      assertEquals(7, templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.MISSING;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.FUNCTION;
      InterpretException interpretException0 = new InterpretException("mLWgZE>c$`\u0005\"");
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "TzuW\"=kJ", "TzuW\"=kJ", (-41), interpretException0);
      templateError0.getMessage();
      assertEquals((-41), templateError0.getLineno());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals((-1), templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("com.hubsp@t.jinjava.intrpre.TemplateError", "com.hubsp@t.jinjava.intrpre.TemplateError", 68, 68);
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.OTHER;
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.IMPORT_CYCLE_DETECTED;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.BAD_URL;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "", "", 68, 68, unknownTagException0, basicTemplateErrorCategory0, hashMap0, 68);
      templateError0.getMessage();
      assertEquals(68, templateError0.getStartPosition());
      assertEquals(68, templateError0.getLineno());
      assertEquals(68, templateError0.getScopeDepth());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.INVALID_ARGUMENT;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.PROPERTY;
      InterpretException interpretException0 = new InterpretException("");
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "com.hubspot.jinjava.interpret.TemplateError", "com.hubspot.jinjava.interpret.TemplateError", 1606, interpretException0);
      int int0 = templateError0.getLineno();
      assertEquals(1606, int0);
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals((-1), templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.INVALID_ARGUMENT;
      MockThrowable mockThrowable0 = new MockThrowable();
      MockException mockException0 = new MockException(mockThrowable0);
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, "GiB", "GiB", (-80), (-80), mockException0);
      int int0 = templateError0.getLineno();
      assertEquals((-80), templateError0.getStartPosition());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals((-80), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.UNKNOWN;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.PROPERTY;
      MockException mockException0 = new MockException();
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.IMPORT_CYCLE_DETECTED;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "com.hubspot.jinjava.interpret.TemplateError", "com.hubspot.jinjava.interpret.TemplateError", 1024, 44, mockException0, basicTemplateErrorCategory0, (Map<String, String>) null);
      templateError0.getFieldName();
      assertEquals(1024, templateError0.getLineno());
      assertEquals(44, templateError0.getStartPosition());
      assertEquals(1, templateError0.getScopeDepth());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.UNKNOWN;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.TAG;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "XXTV3:q84Hoite", "", 16, (Exception) null);
      String string0 = templateError0.getFieldName();
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals(16, templateError0.getLineno());
      assertEquals((-1), templateError0.getStartPosition());
      assertEquals("XXTV3:q84Hoite", templateError0.getMessage());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.UNKNOWN;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.FUNCTION;
      MockException mockException0 = new MockException("com.hubspot.jinjava.interpret.TemplateError");
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.IMPORT_CYCLE_DETECTED;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "com.hubspot.jinjava.interpret.TemplateError", "com.hubspot.jinjava.interpret.TemplateError", 1024, 44, mockException0, basicTemplateErrorCategory0, (Map<String, String>) null);
      TemplateError templateError1 = templateError0.serializable();
      templateError1.getException();
      assertEquals(1024, templateError1.getLineno());
      assertTrue(templateError1.equals((Object)templateError0));
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals(44, templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.CYCLE_DETECTED;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.OTHER;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.TEMPLATE;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "[nd`.~fdv", "", 1024, (Exception) null, basicTemplateErrorCategory0, hashMap0);
      templateError0.getCategoryErrors();
      assertEquals("[nd`.~fdv", templateError0.getMessage());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals("", templateError0.getFieldName());
      assertEquals(1024, templateError0.getLineno());
      assertEquals((-1), templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.CYCLE_DETECTED;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.OTHER;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.TEMPLATE;
      hashMap0.put("e*RqB47\"45MuN)[%", "e*RqB47\"45MuN)[%");
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "[nd`.~fdv", "", 1024, (Exception) null, basicTemplateErrorCategory0, hashMap0);
      templateError0.getCategoryErrors();
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals("[nd`.~fdv", templateError0.getMessage());
      assertEquals((-1), templateError0.getStartPosition());
      assertEquals("", templateError0.getFieldName());
      assertEquals(1024, templateError0.getLineno());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.MISSING;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.FUNCTION;
      InterpretException interpretException0 = new InterpretException("", (Throwable) null, 32);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "com.hubspot.jinjava.lib.exptest.IsUndefinedExpTest", "", 32, 32, interpretException0, (TemplateErrorCategory) null, linkedHashMap0);
      templateError0.getCategory();
      assertEquals("com.hubspot.jinjava.lib.exptest.IsUndefinedExpTest", templateError0.getMessage());
      assertEquals(32, templateError0.getStartPosition());
      assertEquals("", templateError0.getFieldName());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals(32, templateError0.getLineno());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("null", "A$Rl!q>7e|~", 0, 0);
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals(0, templateError0.getStartPosition());
      assertEquals(0, templateError0.getLineno());
      assertEquals("null", templateError0.getFieldName());
      assertEquals("Syntax error in 'A$Rl!q>7e|~': Unknown tag: null", templateError0.getMessage());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("OUTPUT_TOO_BIG", "OUTPUT_TOO_BIG", 82, 82);
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      templateError0.getCategory();
      assertEquals(82, templateError0.getLineno());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals("Syntax error in 'OUTPUT_TOO_BIG': Unknown tag: OUTPUT_TOO_BIG", templateError0.getMessage());
      assertEquals(82, templateError0.getStartPosition());
      assertEquals("OUTPUT_TOO_BIG", templateError0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("gateway", "gateway", 66, 66);
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      templateError0.getReason();
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals("Syntax error in 'gateway': Unknown tag: gateway", templateError0.getMessage());
      assertEquals(66, templateError0.getStartPosition());
      assertEquals("gateway", templateError0.getFieldName());
      assertEquals(66, templateError0.getLineno());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.FUNCTION;
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.IMPORT_CYCLE_DETECTED;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.EXCEPTION;
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, (String) null, (String) null, 1024, 1024, (Exception) null, basicTemplateErrorCategory0, linkedHashMap0, 1024);
      templateError0.getMessage();
      assertEquals(1024, templateError0.getLineno());
      assertEquals(1024, templateError0.getStartPosition());
      assertEquals(1024, templateError0.getScopeDepth());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.UNKNOWN;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.FUNCTION;
      MockException mockException0 = new MockException("com.hubspot.jinjava.interpret.TemplateError");
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.IMPORT_CYCLE_DETECTED;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "com.hubspot.jinjava.interpret.TemplateError", "com.hubspot.jinjava.interpret.TemplateError", 1024, 44, mockException0, basicTemplateErrorCategory0, (Map<String, String>) null);
      templateError0.getException();
      assertEquals(1024, templateError0.getLineno());
      assertEquals(44, templateError0.getStartPosition());
      assertEquals(1, templateError0.getScopeDepth());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.OVER_LIMIT;
      MockException mockException0 = new MockException();
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, "", "com.hubsp@t.jinjava.interpre.TemplateError", 1024, 2459, mockException0);
      templateError0.getCategoryErrors();
      assertEquals("com.hubsp@t.jinjava.interpre.TemplateError", templateError0.getFieldName());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals("", templateError0.getMessage());
      assertEquals(1024, templateError0.getLineno());
      assertEquals(2459, templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("kDLQ7Bsc;K2", "kDLQ7Bsc;K2", 163, 163);
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      templateError0.getSourceTemplate();
      assertEquals(163, templateError0.getLineno());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals("kDLQ7Bsc;K2", templateError0.getFieldName());
      assertEquals("Syntax error in 'kDLQ7Bsc;K2': Unknown tag: kDLQ7Bsc;K2", templateError0.getMessage());
      assertEquals(163, templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("kDLQ7Bsc;K2", "kDLQ7Bsc;K2", 163, 163);
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      templateError0.getItem();
      assertEquals(163, templateError0.getStartPosition());
      assertEquals("Syntax error in 'kDLQ7Bsc;K2': Unknown tag: kDLQ7Bsc;K2", templateError0.getMessage());
      assertEquals("kDLQ7Bsc;K2", templateError0.getFieldName());
      assertEquals(163, templateError0.getLineno());
      assertEquals(1, templateError0.getScopeDepth());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("VxkA3bo#BzN0Q8}'", "VxkA3bo#BzN0Q8}'", 37, 37);
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      templateError0.getSeverity();
      assertEquals(37, templateError0.getStartPosition());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals(37, templateError0.getLineno());
      assertEquals("Syntax error in 'VxkA3bo#BzN0Q8}'': Unknown tag: VxkA3bo#BzN0Q8}'", templateError0.getMessage());
      assertEquals("VxkA3bo#BzN0Q8}'", templateError0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.BAD_URL;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, "<zcA", "<zcA", 0, 0, (Exception) null);
      int int0 = templateError0.getLineno();
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals(0, int0);
      assertEquals(0, templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException((String) null, "FI4K", 255, 255);
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      String string0 = templateError0.getFieldName();
      assertEquals(255, templateError0.getLineno());
      assertEquals(255, templateError0.getStartPosition());
      assertNull(string0);
      assertEquals(1, templateError0.getScopeDepth());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("", "", (-301), (-301));
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      int int0 = templateError0.getStartPosition();
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals("Syntax error in '': Unknown tag: ", templateError0.getMessage());
      assertEquals("", templateError0.getFieldName());
      assertEquals((-301), templateError0.getLineno());
      assertEquals((-301), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.SYNTAX_ERROR;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.FUNCTION;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, ",", ",", (-143), (Exception) null);
      TemplateError templateError1 = templateError0.withScopeDepth((-143));
      boolean boolean0 = templateError0.equals(templateError1);
      assertEquals((-1), templateError0.getStartPosition());
      assertFalse(boolean0);
      assertEquals((-143), templateError0.getLineno());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals((-1), templateError1.getStartPosition());
      assertEquals((-143), templateError1.getLineno());
      assertEquals((-143), templateError1.getScopeDepth());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.UNKNOWN_LOCALE;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.BAD_URL;
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.EXPRESSION_TEST;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "", "", 54, 54, (Exception) null, basicTemplateErrorCategory0, linkedHashMap0, 2261);
      TemplateError templateError1 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "", "", 54, (Exception) null, basicTemplateErrorCategory0, linkedHashMap0);
      boolean boolean0 = templateError0.equals(templateError1);
      assertEquals((-1), templateError1.getStartPosition());
      assertEquals(2261, templateError0.getScopeDepth());
      assertEquals(54, templateError0.getLineno());
      assertEquals(54, templateError1.getLineno());
      assertEquals(1, templateError1.getScopeDepth());
      assertEquals(54, templateError0.getStartPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.PROPERTY;
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.IMPORT_CYCLE_DETECTED;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.BAD_URL;
      MockException mockException0 = new MockException();
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, (String) null, "ZJgE[,Ht8$/m`Chonx", 54, 54, mockException0, basicTemplateErrorCategory0, linkedHashMap0, 54);
      TemplateError templateError1 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, (String) null, "com.hubspot.jinjavaKlib.exptest.IsContainingAllExpTest", 54, 59, mockException0);
      boolean boolean0 = templateError0.equals(templateError1);
      assertFalse(boolean0);
      assertEquals(54, templateError0.getStartPosition());
      assertEquals(54, templateError0.getScopeDepth());
      assertEquals(1, templateError1.getScopeDepth());
      assertEquals(59, templateError1.getStartPosition());
      assertEquals(54, templateError0.getLineno());
      assertEquals(54, templateError1.getLineno());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.UNKNOWN;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.PROPERTY;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, (String) null, (String) null, (-98), (Exception) null);
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.UNKNOWN;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TemplateError templateError1 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "X24;Ui?", "", (-98), (-98), (Exception) null, basicTemplateErrorCategory0, linkedHashMap0, (-98));
      boolean boolean0 = templateError0.equals(templateError1);
      assertEquals((-1), templateError0.getStartPosition());
      assertEquals((-98), templateError1.getStartPosition());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals("X24;Ui?", templateError1.getMessage());
      assertEquals((-98), templateError1.getScopeDepth());
      assertFalse(boolean0);
      assertEquals("", templateError1.getFieldName());
      assertEquals((-98), templateError0.getLineno());
      assertEquals((-98), templateError1.getLineno());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.UNKNOWN_LOCALE;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.BAD_URL;
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.EXPRESSION_TEST;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "", "", 54, 54, (Exception) null, basicTemplateErrorCategory0, linkedHashMap0, 2261);
      TemplateError.ErrorItem templateError_ErrorItem1 = TemplateError.ErrorItem.OTHER;
      TemplateError templateError1 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem1, "", "", 54, (Exception) null, basicTemplateErrorCategory0, linkedHashMap0);
      boolean boolean0 = templateError0.equals(templateError1);
      assertEquals(54, templateError0.getStartPosition());
      assertEquals((-1), templateError1.getStartPosition());
      assertEquals(2261, templateError0.getScopeDepth());
      assertEquals(54, templateError0.getLineno());
      assertFalse(boolean0);
      assertEquals(1, templateError1.getScopeDepth());
      assertEquals(54, templateError1.getLineno());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.EXPRESSION_TEST;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.COLLECTION_TOO_BIG;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "mz%^/'|G)^(I\"5,", "mz%^/'|G)^(I\"5,", 1517, (Exception) null);
      UnknownTagException unknownTagException0 = new UnknownTagException("mz%^/'|G)^(I\"5,", "mz%^/'|G)^(I\"5,", (-876), (-119));
      TemplateError templateError1 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      boolean boolean0 = templateError0.equals(templateError1);
      assertEquals((-119), templateError1.getStartPosition());
      assertEquals("Syntax error in 'mz%^/'|G)^(I\"5,': Unknown tag: mz%^/'|G)^(I\"5,", templateError1.getMessage());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals((-876), templateError1.getLineno());
      assertEquals(1, templateError1.getScopeDepth());
      assertEquals("mz%^/'|G)^(I\"5,", templateError1.getFieldName());
      assertFalse(boolean0);
      assertEquals(1517, templateError0.getLineno());
      assertEquals((-1), templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.INVALID_ARGUMENT;
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.OTHER;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "'Tl<9<?l|j0", "z%^/'|G)^(\"5,", 81, (Exception) null);
      TemplateError.ErrorType templateError_ErrorType1 = TemplateError.ErrorType.FATAL;
      TemplateError templateError1 = new TemplateError(templateError_ErrorType1, templateError_ErrorReason0, "'Tl<9<?l|j0", "'Tl<9<?l|j0", 81, 15, (Exception) null);
      boolean boolean0 = templateError1.equals(templateError0);
      assertEquals("'Tl<9<?l|j0", templateError0.getMessage());
      assertEquals((-1), templateError0.getStartPosition());
      assertEquals(81, templateError1.getLineno());
      assertEquals("z%^/'|G)^(\"5,", templateError0.getFieldName());
      assertEquals(81, templateError0.getLineno());
      assertFalse(boolean0);
      assertEquals(1, templateError1.getScopeDepth());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals(15, templateError1.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("INVALID_INPUT", "INVALID_INPUT", 0, 0);
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.TAG;
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.FROM_CYCLE_DETECTED;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.UNKNOWN;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "3[S", "3[S", 0, 0, unknownTagException0, basicTemplateErrorCategory0, hashMap0, 0);
      Object object0 = new Object();
      boolean boolean0 = templateError0.equals(object0);
      assertEquals(0, templateError0.getLineno());
      assertEquals(0, templateError0.getScopeDepth());
      assertEquals(0, templateError0.getStartPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.SYNTAX_ERROR;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.FUNCTION;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, ",", ",", (-143), (Exception) null);
      boolean boolean0 = templateError0.equals(templateError0);
      assertEquals((-1), templateError0.getStartPosition());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals((-143), templateError0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemplateError.fromUnknownProperty((Object) null, (String) null, 5);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/ImmutableMap
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateError", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      InterpretException interpretException0 = new InterpretException("[Pxt@f");
      // Undeclared exception!
      try { 
        TemplateError.fromException((Exception) interpretException0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/exception/ExceptionUtils
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateError", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemplateError.fromException((Exception) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/exception/ExceptionUtils
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateError", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemplateError.fromException((TemplateSyntaxException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateError", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemplateError.fromException((Exception) null, (-1354814997));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/exception/ExceptionUtils
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateError", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.BAD_URL;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, "<zcA", "<zcA", 0, 0, (Exception) null);
      templateError0.setMessage("<zcA");
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals(0, templateError0.getStartPosition());
      assertEquals(0, templateError0.getLineno());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.SYNTAX_ERROR;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.FUNCTION;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, ",", ",", (-143), (Exception) null);
      templateError0.setLineno(59);
      assertEquals(59, templateError0.getLineno());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("com.hubsp@t.jinjava.intrpre.TemplateError", "com.hubsp@t.jinjava.intrpre.TemplateError", 68, 68);
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.OTHER;
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.IMPORT_CYCLE_DETECTED;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.BAD_URL;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "", "", 68, 68, unknownTagException0, basicTemplateErrorCategory0, hashMap0, 68);
      String string0 = templateError0.toString();
      assertEquals("TemplateError{severity=FATAL, reason=BAD_URL, item=OTHER, message='', fieldName='', lineno=68, startPosition=68, scopeDepth=68, category=IMPORT_CYCLE_DETECTED, categoryErrors={}}", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemplateError.fromInvalidInputException((InvalidInputException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateError", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("+Af)[645r", "'gSFOMnc,|7t", (-623), (-2285));
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      templateError0.setSourceTemplate("");
      assertEquals("Syntax error in ''gSFOMnc,|7t': Unknown tag: +Af)[645r", templateError0.getMessage());
      assertEquals("+Af)[645r", templateError0.getFieldName());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals((-623), templateError0.getLineno());
      assertEquals((-2285), templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TemplateError.fromUnknownProperty(object0, "ayI?wd$11q^U}L;j", (-80));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/ImmutableMap
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateError", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemplateError.fromInvalidArgumentException((InvalidArgumentException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateError", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemplateError.fromUnknownProperty((Object) "com.hubspot.jinjava.lib.filter.SymmetricDifferenceFilter", "com.hubspot.jinjava.lib.filter.SymmetricDifferenceFilter", 66, 66);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/ImmutableMap
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateError", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemplateError.fromException((Exception) null, 0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/exception/ExceptionUtils
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateError", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException("INVALID_INPUT", "INVALID_INPUT", 0, 0);
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.WARNING;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.TAG;
      BasicTemplateErrorCategory basicTemplateErrorCategory0 = BasicTemplateErrorCategory.FROM_CYCLE_DETECTED;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.BAD_URL;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, "INVALID_INPUT", "INVALID_INPUT", 0, 0, unknownTagException0, basicTemplateErrorCategory0, hashMap0, 0);
      int int0 = templateError0.getScopeDepth();
      assertEquals(0, templateError0.getStartPosition());
      assertEquals(0, int0);
      assertEquals(0, templateError0.getLineno());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      InterpretException interpretException0 = new InterpretException("", (Throwable) null, 32);
      // Undeclared exception!
      try { 
        TemplateError.fromOutputTooBigException(interpretException0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/exception/ExceptionUtils
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateError", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UnknownTagException unknownTagException0 = new UnknownTagException(", message='", ", message='", (-2017), (-2017));
      TemplateError templateError0 = TemplateError.fromException((TemplateSyntaxException) unknownTagException0);
      templateError0.hashCode();
      assertEquals((-2017), templateError0.getLineno());
      assertEquals("Syntax error in ', message='': Unknown tag: , message='", templateError0.getMessage());
      assertEquals(1, templateError0.getScopeDepth());
      assertEquals(", message='", templateError0.getFieldName());
      assertEquals((-2017), templateError0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TemplateError.ErrorType templateError_ErrorType0 = TemplateError.ErrorType.FATAL;
      TemplateError.ErrorReason templateError_ErrorReason0 = TemplateError.ErrorReason.SYNTAX_ERROR;
      TemplateError.ErrorItem templateError_ErrorItem0 = TemplateError.ErrorItem.FUNCTION;
      TemplateError templateError0 = new TemplateError(templateError_ErrorType0, templateError_ErrorReason0, templateError_ErrorItem0, ",", ",", (-143), (Exception) null);
      TemplateError templateError1 = templateError0.withScopeDepth((-143));
      templateError1.setLineno(59);
      boolean boolean0 = templateError0.equals(templateError1);
      assertEquals(59, templateError1.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemplateError.fromSyntaxError((InterpretException) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/exception/ExceptionUtils
         //
         verifyException("com.hubspot.jinjava.interpret.TemplateError", e);
      }
  }
}
