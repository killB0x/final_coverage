/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 21:44:49 GMT 2022
 */

package com.hubspot.jinjava.interpret;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.interpret.ImportTagCycleException;
import com.hubspot.jinjava.interpret.TagCycleException;
import java.util.NoSuchElementException;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TagCycleException_ESTest extends TagCycleException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Optional<Integer> optional0 = Optional.empty();
      Class<ImportTagCycleException> class0 = ImportTagCycleException.class;
      Integer integer0 = new Integer(1);
      Optional<Integer> optional1 = Optional.of(integer0);
      TagCycleException tagCycleException0 = TagCycleException.create(class0, "Import", optional0, optional1);
      assertEquals(1, tagCycleException0.getStartPosition());
      assertEquals((-1), tagCycleException0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Optional<Integer> optional0 = Optional.empty();
      Integer integer0 = new Integer((-3957));
      Optional<Integer> optional1 = Optional.ofNullable(integer0);
      TagCycleException tagCycleException0 = TagCycleException.create((Class<? extends TagCycleException>) null, "AjP.[x`,", optional1, optional0);
      assertEquals("AjP.[x`,", tagCycleException0.getPath());
      assertEquals("", tagCycleException0.getTagName());
      assertEquals((-3957), tagCycleException0.getLineNumber());
      assertEquals((-1), tagCycleException0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TagCycleException tagCycleException0 = new TagCycleException((String) null, (String) null, (-1440), (-1440));
      String string0 = tagCycleException0.getTagName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TagCycleException tagCycleException0 = new TagCycleException("", "", 34, 34);
      String string0 = tagCycleException0.getTagName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImportTagCycleException importTagCycleException0 = new ImportTagCycleException((String) null, (-1), (-1));
      String string0 = importTagCycleException0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<ImportTagCycleException> class0 = ImportTagCycleException.class;
      Optional<Integer> optional0 = Optional.empty();
      TagCycleException tagCycleException0 = TagCycleException.create(class0, "9;`G", optional0, optional0);
      String string0 = tagCycleException0.getPath();
      assertEquals("Import", tagCycleException0.getTagName());
      assertEquals((-1), tagCycleException0.getLineNumber());
      assertEquals("9;`G", string0);
      assertEquals((-1), tagCycleException0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<ImportTagCycleException> class0 = ImportTagCycleException.class;
      Integer integer0 = new Integer(0);
      Optional<Integer> optional0 = Optional.ofNullable(integer0);
      TagCycleException tagCycleException0 = TagCycleException.create(class0, "", optional0, optional0);
      assertEquals("Import", tagCycleException0.getTagName());
      assertEquals("", tagCycleException0.getPath());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(2051);
      Optional<Integer> optional0 = Optional.ofNullable(integer0);
      Class<ImportTagCycleException> class0 = ImportTagCycleException.class;
      TagCycleException tagCycleException0 = TagCycleException.create(class0, "", optional0, optional0);
      assertEquals("Import", tagCycleException0.getTagName());
      assertEquals("", tagCycleException0.getPath());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<ImportTagCycleException> class0 = ImportTagCycleException.class;
      // Undeclared exception!
      try { 
        TagCycleException.create(class0, (String) null, (Optional<Integer>) null, (Optional<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.interpret.TagCycleException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Optional<Integer> optional0 = Optional.empty();
      Class<ImportTagCycleException> class0 = ImportTagCycleException.class;
      TagCycleException.create(class0, "']", optional0, optional0);
      // Undeclared exception!
      try { 
        TagCycleException.create(class0, "']", optional0, optional0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TagCycleException tagCycleException0 = new TagCycleException("", "", 34, 34);
      String string0 = tagCycleException0.getPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImportTagCycleException importTagCycleException0 = new ImportTagCycleException((String) null, 1, 3712);
      String string0 = importTagCycleException0.getTagName();
      assertEquals("Import", string0);
  }
}
