/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 23:19:23 GMT 2022
 */

package com.hubspot.jinjava.interpret;

import org.junit.Test;
import static org.junit.Assert.*;
import com.hubspot.jinjava.interpret.DeferredValue;
import com.hubspot.jinjava.interpret.DeferredValueImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeferredValueImpl_ESTest extends DeferredValueImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      DeferredValue deferredValue0 = DeferredValueImpl.instance(object0);
      Object object1 = deferredValue0.getOriginalValue();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DeferredValue deferredValue0 = DeferredValueImpl.instance();
      Object object0 = deferredValue0.getOriginalValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DeferredValueImpl deferredValueImpl0 = (DeferredValueImpl)DeferredValueImpl.instance();
      String string0 = deferredValueImpl0.toString();
      assertEquals("null", string0);
  }
}
