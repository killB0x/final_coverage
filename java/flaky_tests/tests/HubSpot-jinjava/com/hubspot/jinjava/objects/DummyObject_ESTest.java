/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 23:39:57 GMT 2022
 */

package com.hubspot.jinjava.objects;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.objects.DummyObject;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DummyObject_ESTest extends DummyObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DummyObject dummyObject0 = new DummyObject();
      Function<Object, Object> function0 = Function.identity();
      DummyObject dummyObject1 = (DummyObject)dummyObject0.remove((Object) function0);
      assertEquals(1, dummyObject1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DummyObject dummyObject0 = new DummyObject();
      DummyObject dummyObject1 = (DummyObject)dummyObject0.get("");
      assertEquals(1, dummyObject1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DummyObject dummyObject0 = new DummyObject();
      // Undeclared exception!
      try { 
        dummyObject0.values();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/ImmutableList
         //
         verifyException("com.hubspot.jinjava.objects.DummyObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DummyObject dummyObject0 = new DummyObject();
      dummyObject0.clear();
      assertFalse(dummyObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DummyObject dummyObject0 = new DummyObject();
      boolean boolean0 = dummyObject0.containsValue(dummyObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DummyObject dummyObject0 = new DummyObject();
      Set<String> set0 = dummyObject0.keySet();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DummyObject dummyObject0 = new DummyObject();
      boolean boolean0 = dummyObject0.containsKey("#|GhGS~=5c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DummyObject dummyObject0 = new DummyObject();
      int int0 = dummyObject0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DummyObject dummyObject0 = new DummyObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      dummyObject0.putAll(hashMap0);
      assertFalse(dummyObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DummyObject dummyObject0 = new DummyObject();
      DummyObject dummyObject1 = (DummyObject)dummyObject0.put("", (Object) null);
      assertFalse(dummyObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DummyObject dummyObject0 = new DummyObject();
      boolean boolean0 = dummyObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DummyObject dummyObject0 = new DummyObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)dummyObject0.entrySet();
      assertNull(set0);
  }
}
