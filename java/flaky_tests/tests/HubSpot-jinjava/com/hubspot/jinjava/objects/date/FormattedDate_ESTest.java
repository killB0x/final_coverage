/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 23:38:37 GMT 2022
 */

package com.hubspot.jinjava.objects.date;

import org.junit.Test;
import static org.junit.Assert.*;
import com.hubspot.jinjava.objects.date.FormattedDate;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormattedDate_ESTest extends FormattedDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FormattedDate formattedDate0 = new FormattedDate("com.hubspot.jinjava.objects.date.FormattedDate", "com.hubspot.jinjava.objects.date.FormattedDate", (ZonedDateTime) null);
      String string0 = formattedDate0.getLanguage();
      assertEquals("com.hubspot.jinjava.objects.date.FormattedDate", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Period period0 = Period.ofDays(1000);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(305L);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.of(localDate0, localTime0, (ZoneId) zoneOffset0);
      FormattedDate formattedDate0 = new FormattedDate((String) null, "", zonedDateTime0);
      String string0 = formattedDate0.getLanguage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Period period0 = Period.ofDays(1000);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(305L);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.of(localDate0, localTime0, (ZoneId) zoneOffset0);
      FormattedDate formattedDate0 = new FormattedDate((String) null, "", zonedDateTime0);
      String string0 = formattedDate0.getFormat();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FormattedDate formattedDate0 = new FormattedDate("", "", (ZonedDateTime) null);
      String string0 = formattedDate0.getFormat();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FormattedDate formattedDate0 = new FormattedDate("com.hubspot.jinjava.objects.date.FormattedDate", "com.hubspot.jinjava.objects.date.FormattedDate", (ZonedDateTime) null);
      ZonedDateTime zonedDateTime0 = formattedDate0.getDate();
      assertNull(zonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Period period0 = Period.ofDays(1000);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(305L);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.of(localDate0, localTime0, (ZoneId) zoneOffset0);
      FormattedDate formattedDate0 = new FormattedDate("*f?qu@|d", (String) null, zonedDateTime0);
      String string0 = formattedDate0.getLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      FormattedDate formattedDate0 = new FormattedDate("E[J@", "", zonedDateTime0);
      formattedDate0.getDate();
      assertEquals("", formattedDate0.getLanguage());
      assertEquals("E[J@", formattedDate0.getFormat());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      FormattedDate formattedDate0 = new FormattedDate("E[J@", "", zonedDateTime0);
      String string0 = formattedDate0.getFormat();
      assertEquals("E[J@", string0);
      assertEquals("", formattedDate0.getLanguage());
  }
}
