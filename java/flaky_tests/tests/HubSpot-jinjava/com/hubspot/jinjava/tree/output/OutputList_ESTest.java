/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 21:40:06 GMT 2022
 */

package com.hubspot.jinjava.tree.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.tree.output.BlockPlaceholderOutputNode;
import com.hubspot.jinjava.tree.output.OutputList;
import com.hubspot.jinjava.tree.output.OutputNode;
import com.hubspot.jinjava.tree.output.RenderedOutputNode;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OutputList_ESTest extends OutputList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputList outputList0 = new OutputList(742L);
      BlockPlaceholderOutputNode blockPlaceholderOutputNode0 = new BlockPlaceholderOutputNode("");
      outputList0.addNode(blockPlaceholderOutputNode0);
      blockPlaceholderOutputNode0.resolve("G9");
      String string0 = outputList0.toString();
      assertEquals("G9", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputList outputList0 = new OutputList(742L);
      BlockPlaceholderOutputNode blockPlaceholderOutputNode0 = new BlockPlaceholderOutputNode("");
      outputList0.addNode(blockPlaceholderOutputNode0);
      blockPlaceholderOutputNode0.resolve("G9");
      String string0 = outputList0.getValue();
      assertEquals("G9", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputList outputList0 = new OutputList((-1L));
      RenderedOutputNode renderedOutputNode0 = new RenderedOutputNode((String) null);
      outputList0.addNode(renderedOutputNode0);
      List<OutputNode> list0 = outputList0.getNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputList outputList0 = new OutputList((-416L));
      BlockPlaceholderOutputNode blockPlaceholderOutputNode0 = new BlockPlaceholderOutputNode("com.hubspot.jinjava.tree.output.OutputList");
      outputList0.addNode(blockPlaceholderOutputNode0);
      List<BlockPlaceholderOutputNode> list0 = outputList0.getBlocks();
      assertTrue(list0.contains(blockPlaceholderOutputNode0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputList outputList0 = new OutputList(1L);
      BlockPlaceholderOutputNode blockPlaceholderOutputNode0 = new BlockPlaceholderOutputNode("&");
      outputList0.addNode(blockPlaceholderOutputNode0);
      blockPlaceholderOutputNode0.resolve("{wjXxo]WN|(XqzSB");
      // Undeclared exception!
      try { 
        outputList0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/core/PrettyPrinter
         //
         verifyException("com.hubspot.jinjava.tree.output.OutputList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputList outputList0 = new OutputList(1L);
      BlockPlaceholderOutputNode blockPlaceholderOutputNode0 = new BlockPlaceholderOutputNode("");
      outputList0.addNode(blockPlaceholderOutputNode0);
      blockPlaceholderOutputNode0.resolve("n:#jufnY![Tn+o(vrg");
      // Undeclared exception!
      try { 
        outputList0.getValue();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/core/PrettyPrinter
         //
         verifyException("com.hubspot.jinjava.tree.output.OutputList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputList outputList0 = new OutputList((-43L));
      // Undeclared exception!
      try { 
        outputList0.addNode((OutputNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.tree.output.OutputList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputList outputList0 = new OutputList(742L);
      BlockPlaceholderOutputNode blockPlaceholderOutputNode0 = new BlockPlaceholderOutputNode("");
      blockPlaceholderOutputNode0.resolve("G9");
      // Undeclared exception!
      try { 
        outputList0.addNode(blockPlaceholderOutputNode0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Charsets
         //
         verifyException("com.hubspot.jinjava.tree.output.BlockPlaceholderOutputNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputList outputList0 = new OutputList(742L);
      String string0 = outputList0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputList outputList0 = new OutputList(1L);
      BlockPlaceholderOutputNode blockPlaceholderOutputNode0 = new BlockPlaceholderOutputNode("");
      outputList0.addNode(blockPlaceholderOutputNode0);
      // Undeclared exception!
      try { 
        outputList0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Block placeholder not resolved: 
         //
         verifyException("com.hubspot.jinjava.tree.output.BlockPlaceholderOutputNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputList outputList0 = new OutputList(1L);
      BlockPlaceholderOutputNode blockPlaceholderOutputNode0 = new BlockPlaceholderOutputNode("&");
      outputList0.addNode(blockPlaceholderOutputNode0);
      // Undeclared exception!
      try { 
        outputList0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Block placeholder not resolved: &
         //
         verifyException("com.hubspot.jinjava.tree.output.BlockPlaceholderOutputNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputList outputList0 = new OutputList(0L);
      BlockPlaceholderOutputNode blockPlaceholderOutputNode0 = new BlockPlaceholderOutputNode("DeS22P'\"ZW7P57");
      outputList0.addNode(blockPlaceholderOutputNode0);
      assertEquals("DeS22P'\"ZW7P57", blockPlaceholderOutputNode0.getBlockName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputList outputList0 = new OutputList(1L);
      String string0 = outputList0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputList outputList0 = new OutputList((-1L));
      List<OutputNode> list0 = outputList0.getNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputList outputList0 = new OutputList(0L);
      List<BlockPlaceholderOutputNode> list0 = outputList0.getBlocks();
      assertEquals(0, list0.size());
  }
}
