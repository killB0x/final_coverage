/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 23:36:09 GMT 2022
 */

package com.hubspot.jinjava.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.interpret.JinjavaInterpreter;
import com.hubspot.jinjava.tree.RootNode;
import com.hubspot.jinjava.tree.parse.DefaultTokenScannerSymbols;
import com.hubspot.jinjava.tree.parse.TokenScannerSymbols;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RootNode_ESTest extends RootNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RootNode rootNode0 = new RootNode((TokenScannerSymbols) null);
      TokenScannerSymbols tokenScannerSymbols0 = rootNode0.getSymbols();
      assertNull(tokenScannerSymbols0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      RootNode rootNode0 = new RootNode(defaultTokenScannerSymbols0);
      String string0 = rootNode0.getName();
      assertEquals("RootNode", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      RootNode rootNode0 = new RootNode(defaultTokenScannerSymbols0);
      // Undeclared exception!
      try { 
        rootNode0.render((JinjavaInterpreter) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Please render RootNode by interpreter
         //
         verifyException("com.hubspot.jinjava.tree.RootNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      RootNode rootNode0 = new RootNode(defaultTokenScannerSymbols0);
      TokenScannerSymbols tokenScannerSymbols0 = rootNode0.getSymbols();
      assertEquals('\u0000', tokenScannerSymbols0.getFixedChar());
  }
}
