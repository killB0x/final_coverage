/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 22:33:50 GMT 2022
 */

package com.hubspot.jinjava.tree.parse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.tree.parse.LenientWhitespaceControlParser;
import com.hubspot.jinjava.tree.parse.StrictWhitespaceControlParser;
import com.hubspot.jinjava.tree.parse.WhitespaceControlParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StrictWhitespaceControlParser_ESTest extends StrictWhitespaceControlParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      boolean boolean0 = strictWhitespaceControlParser0.hasRightTrim("2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      boolean boolean0 = strictWhitespaceControlParser0.hasLeftTrim("%Gw>)!|Jkt{!:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      String string0 = strictWhitespaceControlParser0.stripRight("-");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      String string0 = strictWhitespaceControlParser0.stripLeft("-");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = new StrictWhitespaceControlParser();
      // Undeclared exception!
      try { 
        strictWhitespaceControlParser0.stripRight("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = new StrictWhitespaceControlParser();
      // Undeclared exception!
      try { 
        strictWhitespaceControlParser0.stripRight((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.tree.parse.StrictWhitespaceControlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      // Undeclared exception!
      try { 
        strictWhitespaceControlParser0.stripLeft("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = new StrictWhitespaceControlParser();
      // Undeclared exception!
      try { 
        strictWhitespaceControlParser0.stripLeft((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.tree.parse.StrictWhitespaceControlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = new StrictWhitespaceControlParser();
      // Undeclared exception!
      try { 
        strictWhitespaceControlParser0.hasRightTrim("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      // Undeclared exception!
      try { 
        strictWhitespaceControlParser0.hasRightTrim((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.tree.parse.StrictWhitespaceControlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      // Undeclared exception!
      try { 
        strictWhitespaceControlParser0.hasLeftTrim("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LenientWhitespaceControlParser lenientWhitespaceControlParser0 = new LenientWhitespaceControlParser();
      // Undeclared exception!
      try { 
        lenientWhitespaceControlParser0.hasLeftTrim("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      boolean boolean0 = strictWhitespaceControlParser0.hasRightTrim("-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      boolean boolean0 = strictWhitespaceControlParser0.hasRightTrim("_k|wSG)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      boolean boolean0 = strictWhitespaceControlParser0.hasLeftTrim("-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      boolean boolean0 = strictWhitespaceControlParser0.hasLeftTrim("com.hubspot.jinjava.tree.parse.StrictWhitespaceControlParser");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      String string0 = strictWhitespaceControlParser0.stripRight("_k|wSG)");
      assertEquals("_k|wSG", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = new StrictWhitespaceControlParser();
      // Undeclared exception!
      try { 
        strictWhitespaceControlParser0.hasLeftTrim((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.tree.parse.StrictWhitespaceControlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrictWhitespaceControlParser strictWhitespaceControlParser0 = (StrictWhitespaceControlParser)WhitespaceControlParser.STRICT;
      String string0 = strictWhitespaceControlParser0.stripLeft("_k|wSG");
      assertEquals("k|wSG", string0);
  }
}
