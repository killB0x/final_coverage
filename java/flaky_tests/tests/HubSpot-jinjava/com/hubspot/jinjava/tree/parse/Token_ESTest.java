/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 21:26:09 GMT 2022
 */

package com.hubspot.jinjava.tree.parse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.tree.parse.DefaultTokenScannerSymbols;
import com.hubspot.jinjava.tree.parse.NoteToken;
import com.hubspot.jinjava.tree.parse.TextToken;
import com.hubspot.jinjava.tree.parse.Token;
import com.hubspot.jinjava.tree.parse.TokenScannerSymbols;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      // Undeclared exception!
      try { 
        Token.newToken(37, defaultTokenScannerSymbols0, (String) null, 3229, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.tree.parse.TagToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      // Undeclared exception!
      try { 
        Token.newToken(123, defaultTokenScannerSymbols0, "UX<X)", (-1), 18);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/core/PrettyPrinter
         //
         verifyException("com.hubspot.jinjava.tree.parse.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      // Undeclared exception!
      try { 
        Token.newToken(2978, defaultTokenScannerSymbols0, "{~ ", 1, 2978);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error in '\u0BA2': Unexpected token: \u0BA2
         //
         verifyException("com.hubspot.jinjava.tree.parse.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      Token token0 = Token.newToken(0, defaultTokenScannerSymbols0, "com.hubspot.jinjava.tree.parse.Token", 1, 2);
      assertEquals(1, token0.getLineNumber());
      assertEquals(2, token0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      // Undeclared exception!
      try { 
        Token.newToken((-2796), defaultTokenScannerSymbols0, "com.hubspot.jinjava.tree.parse.Token", (-1381), 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error in '\uF514': Unexpected token: \uF514
         //
         verifyException("com.hubspot.jinjava.tree.parse.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      NoteToken noteToken0 = new NoteToken("O)", (-1620), (-1620), defaultTokenScannerSymbols0);
      noteToken0.toString();
      assertEquals((-1620), noteToken0.getLineNumber());
      assertEquals((-1620), noteToken0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      Token token0 = Token.newToken(35, defaultTokenScannerSymbols0, ">4S@\"Uro09-WpE'J]", 35, 35);
      assertEquals(35, token0.getLineNumber());
      assertEquals(35, token0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      NoteToken noteToken0 = new NoteToken("", (-858), 911, defaultTokenScannerSymbols0);
      noteToken0.setRightTrim(true);
      boolean boolean0 = noteToken0.isRightTrim();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      TextToken textToken0 = new TextToken("z;u@\"", 123, 123, defaultTokenScannerSymbols0);
      textToken0.setLeftTrim(true);
      boolean boolean0 = textToken0.isLeftTrim();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      TextToken textToken0 = new TextToken("z;u@\"", 123, 123, defaultTokenScannerSymbols0);
      textToken0.isLeftTrim();
      assertEquals(123, textToken0.getLineNumber());
      assertEquals(123, textToken0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      Token token0 = Token.newToken(0, defaultTokenScannerSymbols0, "", 123, 0);
      token0.getType();
      assertEquals(0, token0.getStartPosition());
      assertEquals(123, token0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_FIXED_CHAR = '\"';
      TextToken textToken0 = new TextToken("h7on/rLBy;", 1928, 1, defaultTokenScannerSymbols0);
      textToken0.getType();
      assertEquals(1928, textToken0.getLineNumber());
      assertEquals(1, textToken0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NoteToken noteToken0 = new NoteToken("&M.Zu[", (-3074), 2494, (TokenScannerSymbols) null);
      noteToken0.getSymbols();
      assertEquals(2494, noteToken0.getStartPosition());
      assertEquals((-3074), noteToken0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      TextToken textToken0 = new TextToken("", 2978, 2978, defaultTokenScannerSymbols0);
      textToken0.getSymbols();
      assertEquals(2978, textToken0.getStartPosition());
      assertEquals(2978, textToken0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      Token token0 = Token.newToken(0, defaultTokenScannerSymbols0, "", 123, 0);
      int int0 = token0.getStartPosition();
      assertEquals(0, int0);
      assertEquals(123, token0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      TextToken textToken0 = new TextToken((String) null, 1, (-2796), defaultTokenScannerSymbols0);
      int int0 = textToken0.getStartPosition();
      assertEquals((-2796), int0);
      assertEquals(1, textToken0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      NoteToken noteToken0 = new NoteToken("", 0, (-401), defaultTokenScannerSymbols0);
      int int0 = noteToken0.getLineNumber();
      assertEquals((-401), noteToken0.getStartPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      NoteToken noteToken0 = new NoteToken("/F:J{/YOiFp7&o", 37, 0, defaultTokenScannerSymbols0);
      int int0 = noteToken0.getLineNumber();
      assertEquals(0, noteToken0.getStartPosition());
      assertEquals(37, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      NoteToken noteToken0 = new NoteToken((String) null, 0, 0, defaultTokenScannerSymbols0);
      String string0 = noteToken0.getImage();
      assertEquals(0, noteToken0.getLineNumber());
      assertNull(string0);
      assertEquals(0, noteToken0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      NoteToken noteToken0 = new NoteToken("L", 0, 0, defaultTokenScannerSymbols0);
      String string0 = noteToken0.getImage();
      assertNotNull(string0);
      assertEquals(0, noteToken0.getStartPosition());
      assertEquals(0, noteToken0.getLineNumber());
      assertEquals("L", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      Token token0 = Token.newToken(0, defaultTokenScannerSymbols0, "vJvT]AG;_o59aTFb", 0, 0);
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("com.hubspot.jinjava.tree.parse.TextToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      // Undeclared exception!
      try { 
        Token.newToken(123, defaultTokenScannerSymbols0, ";w_", 123, 123);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      NoteToken noteToken0 = new NoteToken("buYdE/\"qVg,)02zXGi\"", 123, 144, defaultTokenScannerSymbols0);
      // Undeclared exception!
      try { 
        noteToken0.mergeImageAndContent((Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.tree.parse.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NoteToken noteToken0 = new NoteToken("com.hubspot.jinjava.tree.parse.ExpressionToken", (-890), (-890), (TokenScannerSymbols) null);
      // Undeclared exception!
      try { 
        noteToken0.handleTrim("com.hubspot.jinjava.tree.parse.ExpressionToken");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/core/PrettyPrinter
         //
         verifyException("com.hubspot.jinjava.tree.parse.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextToken textToken0 = new TextToken("eS?zB1o", (-1), (-1), (TokenScannerSymbols) null);
      // Undeclared exception!
      try { 
        textToken0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.tree.parse.TextToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      TextToken textToken0 = new TextToken("fX<>)", (-428), 0, defaultTokenScannerSymbols0);
      int int0 = textToken0.getLineNumber();
      assertEquals((-428), int0);
      assertEquals(0, textToken0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      TextToken textToken0 = new TextToken("T},4ndaV4)nf4S", 2978, 2978, defaultTokenScannerSymbols0);
      int int0 = textToken0.getStartPosition();
      assertEquals(2978, textToken0.getLineNumber());
      assertEquals(2978, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      Token token0 = Token.newToken(35, defaultTokenScannerSymbols0, "", (-1), (-454));
      assertEquals((-1), token0.getLineNumber());
      assertEquals((-454), token0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      NoteToken noteToken0 = new NoteToken("", 0, (-61), defaultTokenScannerSymbols0);
      String string0 = noteToken0.getImage();
      assertEquals((-61), noteToken0.getStartPosition());
      assertEquals(0, noteToken0.getLineNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      TextToken textToken0 = new TextToken("sCW2=d}HY/Z^l/d", (-858), (-858), defaultTokenScannerSymbols0);
      NoteToken noteToken0 = new NoteToken("", (-858), 911, defaultTokenScannerSymbols0);
      textToken0.mergeImageAndContent(noteToken0);
      assertEquals(911, noteToken0.getStartPosition());
      assertEquals((-858), noteToken0.getLineNumber());
      assertEquals("sCW2=d}HY/Z^l/d", textToken0.getImage());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      TextToken textToken0 = new TextToken("", 1411, (-714), defaultTokenScannerSymbols0);
      textToken0.isRightTrimAfterEnd();
      assertEquals((-714), textToken0.getStartPosition());
      assertEquals(1411, textToken0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      TextToken textToken0 = new TextToken("", 1411, (-714), defaultTokenScannerSymbols0);
      textToken0.setRightTrimAfterEnd(true);
      boolean boolean0 = textToken0.isRightTrimAfterEnd();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      // Undeclared exception!
      try { 
        Token.newToken(37, defaultTokenScannerSymbols0, "f<!", 37, 37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error in 'f<!': Malformed tag token
         //
         verifyException("com.hubspot.jinjava.tree.parse.TagToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      NoteToken noteToken0 = new NoteToken("", (-858), 911, defaultTokenScannerSymbols0);
      noteToken0.isRightTrim();
      assertEquals(911, noteToken0.getStartPosition());
      assertEquals((-858), noteToken0.getLineNumber());
  }
}
