/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 23:27:38 GMT 2022
 */

package com.hubspot.jinjava.tree.parse;

import org.junit.Test;
import static org.junit.Assert.*;
import com.hubspot.jinjava.tree.parse.DefaultTokenScannerSymbols;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultTokenScannerSymbols_ESTest extends DefaultTokenScannerSymbols_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      char char0 = defaultTokenScannerSymbols0.getTrimChar();
      assertEquals('}', defaultTokenScannerSymbols0.getExprEndChar());
      assertEquals('%', defaultTokenScannerSymbols0.getTagChar());
      assertEquals('}', defaultTokenScannerSymbols0.getPostfixChar());
      assertEquals('\n', defaultTokenScannerSymbols0.getNewlineChar());
      assertEquals('-', char0);
      assertEquals('{', defaultTokenScannerSymbols0.getExprStartChar());
      assertEquals('#', defaultTokenScannerSymbols0.getNoteChar());
      assertEquals('\u0000', defaultTokenScannerSymbols0.getFixedChar());
      assertEquals('{', defaultTokenScannerSymbols0.getPrefixChar());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_TRIM_CHAR = '>';
      defaultTokenScannerSymbols0.TOKEN_TRIM_CHAR = '5';
      char char0 = defaultTokenScannerSymbols0.getTrimChar();
      assertEquals('5', char0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_TRIM_CHAR = 'v';
      char char0 = defaultTokenScannerSymbols0.getTrimChar();
      assertEquals('v', char0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      char char0 = defaultTokenScannerSymbols0.getTagChar();
      assertEquals('\u0000', defaultTokenScannerSymbols0.getFixedChar());
      assertEquals('\n', defaultTokenScannerSymbols0.getNewlineChar());
      assertEquals('}', defaultTokenScannerSymbols0.getPostfixChar());
      assertEquals('#', defaultTokenScannerSymbols0.getNoteChar());
      assertEquals('{', defaultTokenScannerSymbols0.getExprStartChar());
      assertEquals('%', char0);
      assertEquals('{', defaultTokenScannerSymbols0.getPrefixChar());
      assertEquals('}', defaultTokenScannerSymbols0.getExprEndChar());
      assertEquals('-', defaultTokenScannerSymbols0.getTrimChar());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_TAG_CHAR = '_';
      defaultTokenScannerSymbols0.TOKEN_TAG_CHAR = '6';
      char char0 = defaultTokenScannerSymbols0.getTagChar();
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_TAG_CHAR = 'W';
      char char0 = defaultTokenScannerSymbols0.getTagChar();
      assertEquals('W', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_PREFIX_CHAR = '/';
      defaultTokenScannerSymbols0.TOKEN_PREFIX_CHAR = '7';
      char char0 = defaultTokenScannerSymbols0.getPrefixChar();
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_PREFIX_CHAR = 'j';
      char char0 = defaultTokenScannerSymbols0.getPrefixChar();
      assertEquals('j', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_POSTFIX_CHAR = 'L';
      defaultTokenScannerSymbols0.TOKEN_POSTFIX_CHAR = '5';
      char char0 = defaultTokenScannerSymbols0.getPostfixChar();
      assertEquals('5', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_POSTFIX_CHAR = 'W';
      char char0 = defaultTokenScannerSymbols0.getPostfixChar();
      assertEquals('W', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      char char0 = defaultTokenScannerSymbols0.getNoteChar();
      assertEquals('}', defaultTokenScannerSymbols0.getPostfixChar());
      assertEquals('#', char0);
      assertEquals('}', defaultTokenScannerSymbols0.getExprEndChar());
      assertEquals('\u0000', defaultTokenScannerSymbols0.getFixedChar());
      assertEquals('%', defaultTokenScannerSymbols0.getTagChar());
      assertEquals('{', defaultTokenScannerSymbols0.getExprStartChar());
      assertEquals('\n', defaultTokenScannerSymbols0.getNewlineChar());
      assertEquals('{', defaultTokenScannerSymbols0.getPrefixChar());
      assertEquals('-', defaultTokenScannerSymbols0.getTrimChar());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_NOTE_CHAR = '4';
      char char0 = defaultTokenScannerSymbols0.getNoteChar();
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_NOTE_CHAR = 'v';
      char char0 = defaultTokenScannerSymbols0.getNoteChar();
      assertEquals('v', char0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      char char0 = defaultTokenScannerSymbols0.getNewlineChar();
      assertEquals('%', defaultTokenScannerSymbols0.getTagChar());
      assertEquals('-', defaultTokenScannerSymbols0.getTrimChar());
      assertEquals('{', defaultTokenScannerSymbols0.getExprStartChar());
      assertEquals('{', defaultTokenScannerSymbols0.getPrefixChar());
      assertEquals('}', defaultTokenScannerSymbols0.getPostfixChar());
      assertEquals('\n', char0);
      assertEquals('}', defaultTokenScannerSymbols0.getExprEndChar());
      assertEquals('#', defaultTokenScannerSymbols0.getNoteChar());
      assertEquals('\u0000', defaultTokenScannerSymbols0.getFixedChar());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_NEWLINE_CHAR = '6';
      char char0 = defaultTokenScannerSymbols0.getNewlineChar();
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_NEWLINE_CHAR = 'a';
      char char0 = defaultTokenScannerSymbols0.getNewlineChar();
      assertEquals('a', char0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_FIXED_CHAR = '4';
      char char0 = defaultTokenScannerSymbols0.getFixedChar();
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_FIXED_CHAR = 'p';
      char char0 = defaultTokenScannerSymbols0.getFixedChar();
      assertEquals('p', char0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      char char0 = defaultTokenScannerSymbols0.getExprStartChar();
      assertEquals('{', char0);
      assertEquals('\u0000', defaultTokenScannerSymbols0.getFixedChar());
      assertEquals('}', defaultTokenScannerSymbols0.getPostfixChar());
      assertEquals('}', defaultTokenScannerSymbols0.getExprEndChar());
      assertEquals('\n', defaultTokenScannerSymbols0.getNewlineChar());
      assertEquals('-', defaultTokenScannerSymbols0.getTrimChar());
      assertEquals('{', defaultTokenScannerSymbols0.getPrefixChar());
      assertEquals('#', defaultTokenScannerSymbols0.getNoteChar());
      assertEquals('%', defaultTokenScannerSymbols0.getTagChar());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_EXPR_START_CHAR = '\u0000';
      defaultTokenScannerSymbols0.TOKEN_EXPR_START_CHAR = '8';
      char char0 = defaultTokenScannerSymbols0.getExprStartChar();
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_EXPR_START_CHAR = 'W';
      char char0 = defaultTokenScannerSymbols0.getExprStartChar();
      assertEquals('W', char0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      char char0 = defaultTokenScannerSymbols0.getExprEndChar();
      assertEquals('{', defaultTokenScannerSymbols0.getPrefixChar());
      assertEquals('}', char0);
      assertEquals('#', defaultTokenScannerSymbols0.getNoteChar());
      assertEquals('{', defaultTokenScannerSymbols0.getExprStartChar());
      assertEquals('%', defaultTokenScannerSymbols0.getTagChar());
      assertEquals('\u0000', defaultTokenScannerSymbols0.getFixedChar());
      assertEquals('}', defaultTokenScannerSymbols0.getPostfixChar());
      assertEquals('\n', defaultTokenScannerSymbols0.getNewlineChar());
      assertEquals('-', defaultTokenScannerSymbols0.getTrimChar());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_EXPR_END_CHAR = '6';
      char char0 = defaultTokenScannerSymbols0.getExprEndChar();
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      defaultTokenScannerSymbols0.TOKEN_EXPR_END_CHAR = 'w';
      char char0 = defaultTokenScannerSymbols0.getExprEndChar();
      assertEquals('w', char0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      char char0 = defaultTokenScannerSymbols0.getPrefixChar();
      assertEquals('{', defaultTokenScannerSymbols0.getExprStartChar());
      assertEquals('-', defaultTokenScannerSymbols0.getTrimChar());
      assertEquals('%', defaultTokenScannerSymbols0.getTagChar());
      assertEquals('\n', defaultTokenScannerSymbols0.getNewlineChar());
      assertEquals('#', defaultTokenScannerSymbols0.getNoteChar());
      assertEquals('}', defaultTokenScannerSymbols0.getExprEndChar());
      assertEquals('{', char0);
      assertEquals('}', defaultTokenScannerSymbols0.getPostfixChar());
      assertEquals('\u0000', defaultTokenScannerSymbols0.getFixedChar());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      char char0 = defaultTokenScannerSymbols0.getFixedChar();
      assertEquals('\n', defaultTokenScannerSymbols0.getNewlineChar());
      assertEquals('}', defaultTokenScannerSymbols0.getPostfixChar());
      assertEquals('}', defaultTokenScannerSymbols0.getExprEndChar());
      assertEquals('{', defaultTokenScannerSymbols0.getPrefixChar());
      assertEquals('-', defaultTokenScannerSymbols0.getTrimChar());
      assertEquals('%', defaultTokenScannerSymbols0.getTagChar());
      assertEquals('{', defaultTokenScannerSymbols0.getExprStartChar());
      assertEquals('#', defaultTokenScannerSymbols0.getNoteChar());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultTokenScannerSymbols defaultTokenScannerSymbols0 = new DefaultTokenScannerSymbols();
      char char0 = defaultTokenScannerSymbols0.getPostfixChar();
      assertEquals('}', char0);
      assertEquals('{', defaultTokenScannerSymbols0.getPrefixChar());
      assertEquals('%', defaultTokenScannerSymbols0.getTagChar());
      assertEquals('}', defaultTokenScannerSymbols0.getExprEndChar());
      assertEquals('\n', defaultTokenScannerSymbols0.getNewlineChar());
      assertEquals('#', defaultTokenScannerSymbols0.getNoteChar());
      assertEquals('{', defaultTokenScannerSymbols0.getExprStartChar());
      assertEquals('\u0000', defaultTokenScannerSymbols0.getFixedChar());
      assertEquals('-', defaultTokenScannerSymbols0.getTrimChar());
  }
}
