/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 23:24:39 GMT 2022
 */

package com.hubspot.jinjava.doc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hubspot.jinjava.doc.JinjavaDoc;
import com.hubspot.jinjava.doc.JinjavaDocExpTest;
import com.hubspot.jinjava.doc.JinjavaDocFilter;
import com.hubspot.jinjava.doc.JinjavaDocFunction;
import com.hubspot.jinjava.doc.JinjavaDocParam;
import com.hubspot.jinjava.doc.JinjavaDocSnippet;
import com.hubspot.jinjava.doc.JinjavaDocTag;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JinjavaDoc_ESTest extends JinjavaDoc_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      jinjavaDoc0.addCodeSnippet("", "bO:1p%x");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      JinjavaDocParam[] jinjavaDocParamArray0 = new JinjavaDocParam[2];
      JinjavaDocSnippet[] jinjavaDocSnippetArray0 = new JinjavaDocSnippet[2];
      Map<String, String> map0 = jinjavaDoc0.getCodeSnippets();
      JinjavaDocTag jinjavaDocTag0 = new JinjavaDocTag("bV;BJS(!/%", true, "", "A30jJz*", true, jinjavaDocParamArray0, jinjavaDocParamArray0, jinjavaDocSnippetArray0, map0);
      jinjavaDoc0.addTag(jinjavaDocTag0);
      Map<String, JinjavaDocTag> map1 = jinjavaDoc0.getTags();
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      JinjavaDocParam[] jinjavaDocParamArray0 = new JinjavaDocParam[0];
      JinjavaDocSnippet[] jinjavaDocSnippetArray0 = new JinjavaDocSnippet[7];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JinjavaDocFunction jinjavaDocFunction0 = new JinjavaDocFunction("", "", "com.hubspot.jinjava.doc.JinjavaDocFunction", false, jinjavaDocParamArray0, jinjavaDocParamArray0, jinjavaDocSnippetArray0, hashMap0);
      jinjavaDoc0.addFunction(jinjavaDocFunction0);
      Map<String, JinjavaDocFunction> map0 = jinjavaDoc0.getFunctions();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      JinjavaDocParam[] jinjavaDocParamArray0 = new JinjavaDocParam[8];
      JinjavaDocSnippet[] jinjavaDocSnippetArray0 = new JinjavaDocSnippet[0];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JinjavaDocExpTest jinjavaDocExpTest0 = new JinjavaDocExpTest("i}4j%d", (String) null, "", false, jinjavaDocParamArray0, jinjavaDocParamArray0, jinjavaDocSnippetArray0, hashMap0);
      jinjavaDoc0.addExpTest(jinjavaDocExpTest0);
      Map<String, JinjavaDocExpTest> map0 = jinjavaDoc0.getExpTests();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      // Undeclared exception!
      try { 
        jinjavaDoc0.addFilter((JinjavaDocFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.doc.JinjavaDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      // Undeclared exception!
      try { 
        jinjavaDoc0.addCodeSnippet((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      Map<String, JinjavaDocFilter> map0 = jinjavaDoc0.getFilters();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      Map<String, JinjavaDocFunction> map0 = jinjavaDoc0.getFunctions();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      Map<String, JinjavaDocExpTest> map0 = jinjavaDoc0.getExpTests();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      // Undeclared exception!
      try { 
        jinjavaDoc0.addTag((JinjavaDocTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.doc.JinjavaDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      JinjavaDocParam[] jinjavaDocParamArray0 = new JinjavaDocParam[0];
      JinjavaDocSnippet[] jinjavaDocSnippetArray0 = new JinjavaDocSnippet[5];
      Map<String, String> map0 = jinjavaDoc0.getCodeSnippets();
      JinjavaDocFilter jinjavaDocFilter0 = new JinjavaDocFilter("", (String) null, "FcTM<l", false, jinjavaDocParamArray0, jinjavaDocParamArray0, jinjavaDocSnippetArray0, map0);
      jinjavaDoc0.addFilter(jinjavaDocFilter0);
      Map<String, JinjavaDocFilter> map1 = jinjavaDoc0.getFilters();
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      // Undeclared exception!
      try { 
        jinjavaDoc0.addExpTest((JinjavaDocExpTest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.doc.JinjavaDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      jinjavaDoc0.addCodeSnippet("", "");
      Map<String, String> map0 = jinjavaDoc0.getCodeSnippets();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      Map<String, JinjavaDocTag> map0 = jinjavaDoc0.getTags();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JinjavaDoc jinjavaDoc0 = new JinjavaDoc();
      // Undeclared exception!
      try { 
        jinjavaDoc0.addFunction((JinjavaDocFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hubspot.jinjava.doc.JinjavaDoc", e);
      }
  }
}
