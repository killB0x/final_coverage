/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 07:03:28 GMT 2022
 */

package io.github.hengyunabc.metrics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.hengyunabc.metrics.ThreadFactoryBuilder;
import java.util.DuplicateFormatFlagsException;
import java.util.FormatFlagsConversionMismatchException;
import java.util.IllegalFormatConversionException;
import java.util.MissingFormatArgumentException;
import java.util.MissingFormatWidthException;
import java.util.UnknownFormatConversionException;
import java.util.concurrent.ThreadFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThreadFactoryBuilder_ESTest extends ThreadFactoryBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String string0 = ThreadFactoryBuilder.format("Thread priority (%s) must be >= %s", objectArray0);
      assertEquals("Thread priority (null) must be >= null [null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      ThreadFactoryBuilder threadFactoryBuilder1 = threadFactoryBuilder0.setPriority(4);
      assertSame(threadFactoryBuilder1, threadFactoryBuilder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mock(Thread.UncaughtExceptionHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(thread_UncaughtExceptionHandler0).toString();
      ThreadFactoryBuilder threadFactoryBuilder1 = threadFactoryBuilder0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      assertSame(threadFactoryBuilder0, threadFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = ThreadFactoryBuilder.format("", objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((ThreadFactoryBuilder) object0).setThreadFactory(threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      // Undeclared exception!
      try { 
        threadFactoryBuilder0.setNameFormat("fcQI5n,om8L[p%+#T");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'T'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      // Undeclared exception!
      try { 
        threadFactoryBuilder0.setNameFormat("I(u8WB)mbO%-G!+fEpU");
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-G
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      // Undeclared exception!
      try { 
        threadFactoryBuilder0.setNameFormat("^]J3j.=t_]UHs%ahn&");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != java.lang.Integer
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      // Undeclared exception!
      try { 
        threadFactoryBuilder0.setNameFormat("fcQI5n,om8L#p%+tT");
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = T, Flags = +
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      // Undeclared exception!
      try { 
        threadFactoryBuilder0.setNameFormat("^M_v%--m%");
        fail("Expecting exception: DuplicateFormatFlagsException");
      
      } catch(DuplicateFormatFlagsException e) {
         //
         // Flags = '-'
         //
         verifyException("java.util.Formatter$Flags", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      // Undeclared exception!
      try { 
        threadFactoryBuilder0.setNameFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadFactoryBuilder.format("", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.hengyunabc.metrics.ThreadFactoryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadFactoryBuilder.checkNotNull((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.hengyunabc.metrics.ThreadFactoryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = ThreadFactoryBuilder.checkNotNull((Object) "8");
      assertEquals("8", object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      ThreadFactoryBuilder threadFactoryBuilder1 = threadFactoryBuilder0.setNameFormat("\"]9KCo`iNV@xS`q");
      ThreadFactory threadFactory0 = threadFactoryBuilder1.build();
      assertNotNull(threadFactory0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      // Undeclared exception!
      try { 
        threadFactoryBuilder0.setPriority(2049);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Thread priority (2049) must be <= 10
         //
         verifyException("io.github.hengyunabc.metrics.ThreadFactoryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      ThreadFactoryBuilder threadFactoryBuilder1 = threadFactoryBuilder0.setPriority(10);
      assertSame(threadFactoryBuilder1, threadFactoryBuilder0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      // Undeclared exception!
      try { 
        threadFactoryBuilder0.setPriority((-260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Thread priority (-260) must be >= 1
         //
         verifyException("io.github.hengyunabc.metrics.ThreadFactoryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      // Undeclared exception!
      try { 
        threadFactoryBuilder0.setThreadFactory((ThreadFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.hengyunabc.metrics.ThreadFactoryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      // Undeclared exception!
      try { 
        threadFactoryBuilder0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.hengyunabc.metrics.ThreadFactoryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      // Undeclared exception!
      try { 
        threadFactoryBuilder0.setNameFormat("Thread priority (%s) must be <= %s");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      ThreadFactoryBuilder threadFactoryBuilder1 = threadFactoryBuilder0.setDaemon(true);
      assertSame(threadFactoryBuilder1, threadFactoryBuilder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThreadFactoryBuilder threadFactoryBuilder0 = new ThreadFactoryBuilder();
      ThreadFactory threadFactory0 = threadFactoryBuilder0.build();
      ThreadFactoryBuilder threadFactoryBuilder1 = threadFactoryBuilder0.setThreadFactory(threadFactory0);
      ThreadFactory threadFactory1 = threadFactoryBuilder1.build();
      assertNotSame(threadFactory0, threadFactory1);
  }
}
