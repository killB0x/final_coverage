/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 11:23:35 GMT 2022
 */

package com.axiastudio.zoefx.core.validators;

import org.junit.Test;
import static org.junit.Assert.*;
import com.axiastudio.zoefx.core.validators.Validator;
import com.axiastudio.zoefx.core.validators.ValidatorBuilder;
import com.axiastudio.zoefx.core.validators.ValidatorType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValidatorBuilder_ESTest extends ValidatorBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ValidatorBuilder validatorBuilder0 = new ValidatorBuilder();
      Validator validator0 = validatorBuilder0.build();
      assertNotNull(validator0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ValidatorBuilder validatorBuilder0 = ValidatorBuilder.create();
      ValidatorType validatorType0 = ValidatorType.DATE;
      validatorBuilder0.type(validatorType0);
      Validator validator0 = validatorBuilder0.build();
      assertNull(validator0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ValidatorBuilder validatorBuilder0 = ValidatorBuilder.create();
      Integer integer0 = new Integer((-1408));
      ValidatorBuilder validatorBuilder1 = validatorBuilder0.maxLength(integer0);
      assertSame(validatorBuilder0, validatorBuilder1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ValidatorBuilder validatorBuilder0 = new ValidatorBuilder();
      ValidatorBuilder validatorBuilder1 = validatorBuilder0.code("3i'W9-n*");
      assertSame(validatorBuilder1, validatorBuilder0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ValidatorBuilder validatorBuilder0 = new ValidatorBuilder();
      ValidatorBuilder validatorBuilder1 = validatorBuilder0.minLength((Integer) null);
      assertSame(validatorBuilder1, validatorBuilder0);
  }
}
