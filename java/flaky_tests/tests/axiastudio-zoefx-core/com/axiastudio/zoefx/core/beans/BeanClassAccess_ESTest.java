/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 11:16:18 GMT 2022
 */

package com.axiastudio.zoefx.core.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axiastudio.zoefx.core.beans.AccessType;
import com.axiastudio.zoefx.core.beans.BeanClassAccess;
import java.lang.annotation.Annotation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanClassAccess_ESTest extends BeanClassAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanClassAccess beanClassAccess0 = new BeanClassAccess(class0, "com.axiastudio.zoefx.core.beans.BeanClassAccess");
      beanClassAccess0.inspectBeanField();
      assertEquals("com.axiastudio.zoefx.core.beans.BeanClassAccess", beanClassAccess0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanClassAccess beanClassAccess0 = new BeanClassAccess(class0, "com.axiastudio.zoefx.core.beans.BeanClassAccess");
      beanClassAccess0.name = "METHOD";
      beanClassAccess0.name = "com.axiastudio.zoefx.core.beans.BeanClassAccess";
      beanClassAccess0.name = "e6p$/QMl)*Y";
      beanClassAccess0.name = null;
      String string0 = beanClassAccess0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanClassAccess beanClassAccess0 = new BeanClassAccess(class0, "<n[{L1");
      beanClassAccess0.name = "";
      String string0 = beanClassAccess0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      BeanClassAccess beanClassAccess0 = new BeanClassAccess(class0, "com.axiastudio.zoefx.core.beans.AccessType");
      Class<?> class1 = beanClassAccess0.getBeanClass();
      assertEquals(1537, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanClassAccess beanClassAccess0 = new BeanClassAccess(class0, "w=R^Sw3cr");
      AccessType accessType0 = AccessType.FIELD;
      beanClassAccess0.accessType = accessType0;
      AccessType accessType1 = beanClassAccess0.getAccessType();
      assertSame(accessType1, accessType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanClassAccess beanClassAccess0 = new BeanClassAccess(class0, "get");
      beanClassAccess0.name = "";
      // Undeclared exception!
      try { 
        beanClassAccess0.inspectBeanField();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanClassAccess beanClassAccess0 = new BeanClassAccess(class0, "$VALUES");
      beanClassAccess0.name = null;
      // Undeclared exception!
      try { 
        beanClassAccess0.inspectBeanField();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axiastudio.zoefx.core.beans.BeanClassAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanClassAccess beanClassAccess0 = new BeanClassAccess(class0, "w=R^Sw3cr");
      // Undeclared exception!
      try { 
        beanClassAccess0.getGenericReturnType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanClassAccess beanClassAccess0 = null;
      try {
        beanClassAccess0 = new BeanClassAccess(class0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanClassAccess beanClassAccess0 = null;
      try {
        beanClassAccess0 = new BeanClassAccess(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axiastudio.zoefx.core.beans.BeanClassAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanClassAccess beanClassAccess0 = new BeanClassAccess(class0, "set");
      String string0 = beanClassAccess0.getName();
      assertEquals("set", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanClassAccess beanClassAccess0 = new BeanClassAccess(class0, "di9<mvF?e,e/%");
      Class<?> class1 = beanClassAccess0.getReturnType();
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      BeanClassAccess beanClassAccess0 = new BeanClassAccess(class0, "@Tf`y%l`,Qp3wg ");
      beanClassAccess0.getAccessType();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanClassAccess beanClassAccess0 = new BeanClassAccess(class0, "H7OqBo}?h");
      Class<?> class1 = beanClassAccess0.getBeanClass();
      assertFalse(class1.isAnnotation());
  }
}
