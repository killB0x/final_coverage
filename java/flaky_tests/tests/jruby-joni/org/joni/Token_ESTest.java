/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 15:17:39 GMT 2022
 */

package org.joni;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joni.Token;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallNameEnd((-1));
      boolean boolean0 = token0.getPropNot();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallGNum((-1));
      boolean boolean0 = token0.getRepeatGreedy();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallNameEnd((-28));
      int int0 = token0.getRepeatUpper();
      assertEquals((-28), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefNum(1040);
      int int0 = token0.getRepeatLower();
      assertEquals(1040, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Token token0 = new Token();
      token0.setCode((-1193));
      int int0 = token0.getRepeatLower();
      assertEquals((-1193), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Token token0 = new Token();
      token0.setRepeatLower(5070);
      int int0 = token0.getPropCType();
      assertEquals(5070, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefNum((-1706));
      int int0 = token0.getPropCType();
      assertEquals((-1706), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefNum(1040);
      int int0 = token0.getCode();
      assertEquals(1040, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefNum((-1706));
      int int0 = token0.getCode();
      assertEquals((-1706), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Token token0 = new Token();
      token0.setAnchorSubtype(1778);
      int int0 = token0.getCallNameP();
      assertEquals(1778, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefNum((-1706));
      int int0 = token0.getCallNameP();
      assertEquals((-1706), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefRef1(7);
      int int0 = token0.getCallNameEnd();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallNameEnd((-28));
      int int0 = token0.getCallNameEnd();
      assertEquals((-28), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallGNum((-1185));
      int int0 = token0.getCallGNum();
      assertEquals((-1185), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefNum(1040);
      int int0 = token0.getC();
      assertEquals(1040, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Token token0 = new Token();
      token0.setPropCType((-118));
      int int0 = token0.getC();
      assertEquals((-118), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Token token0 = new Token();
      int[] intArray0 = new int[1];
      token0.setBackrefRefs(intArray0);
      int[] intArray1 = token0.getBackrefRefs();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallNameEnd(1529);
      int int0 = token0.getBackrefRef1();
      assertEquals(1529, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallNameEnd((-28));
      int int0 = token0.getBackrefRef1();
      assertEquals((-28), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Token token0 = new Token();
      token0.setAnchorSubtype(13);
      int int0 = token0.getBackrefNum();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefNum((-1706));
      int int0 = token0.getBackrefNum();
      assertEquals((-1706), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefLevel((-811));
      int int0 = token0.getBackrefLevel();
      assertEquals((-811), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Token token0 = new Token();
      token0.setPropCType(7);
      int int0 = token0.getAnchorSubtype();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Token token0 = new Token();
      token0.setC((-481));
      int int0 = token0.getAnchorSubtype();
      assertEquals((-481), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Token token0 = new Token();
      token0.setPropNot(true);
      int int0 = token0.getRepeatUpper();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Token token0 = new Token();
      token0.setPropNot(false);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefRef1(2073);
      boolean boolean0 = token0.getPropNot();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Token token0 = new Token();
      boolean boolean0 = token0.getPropNot();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallRel(true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallRel(false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefExistLevel(true);
      boolean boolean0 = token0.getCallRel();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Token token0 = new Token();
      boolean boolean0 = token0.getCallRel();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefExistLevel(false);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefExistLevel(true);
      boolean boolean0 = token0.getBackrefExistLevel();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Token token0 = new Token();
      boolean boolean0 = token0.getBackrefExistLevel();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefByName(true);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefByName(false);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallGNum(881);
      boolean boolean0 = token0.getBackrefByName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Token token0 = new Token();
      boolean boolean0 = token0.getBackrefByName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Token token0 = new Token();
      token0.setRepeatPossessive(false);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Token token0 = new Token();
      token0.setRepeatPossessive(true);
      boolean boolean0 = token0.getRepeatPossessive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Token token0 = new Token();
      boolean boolean0 = token0.getRepeatPossessive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Token token0 = new Token();
      token0.setRepeatGreedy(true);
      int int0 = token0.getCallGNum();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Token token0 = new Token();
      token0.setRepeatGreedy(false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallGNum(881);
      boolean boolean0 = token0.getRepeatGreedy();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Token token0 = new Token();
      boolean boolean0 = token0.getRepeatGreedy();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Token token0 = new Token();
      token0.setAnchorASCIIRange(false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Token token0 = new Token();
      token0.setAnchorASCIIRange(true);
      boolean boolean0 = token0.getAnchorASCIIRange();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Token token0 = new Token();
      boolean boolean0 = token0.getAnchorASCIIRange();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getRepeatUpper();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallGNum((-481));
      boolean boolean0 = token0.getBackrefByName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Token token0 = new Token();
      token0.setCallNameP((-19));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getC();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Token token0 = new Token();
      token0.setBackrefLevel(11);
      int int0 = token0.getBackrefLevel();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getCallNameEnd();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Token token0 = new Token();
      token0.setRepeatUpper(1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getRepeatLower();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getAnchorSubtype();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getBackrefNum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getCallGNum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Token token0 = new Token();
      int[] intArray0 = new int[0];
      token0.setBackrefRefs(intArray0);
      int[] intArray1 = token0.getBackrefRefs();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Token token0 = new Token();
      int[] intArray0 = token0.getBackrefRefs();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getPropCType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getBackrefRef1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getCallNameP();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getBackrefLevel();
      assertEquals(0, int0);
  }
}
