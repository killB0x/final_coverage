/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 15:22:14 GMT 2022
 */

package org.joni.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joni.ScanEnvironment;
import org.joni.ast.BackRefNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BackRefNode_ESTest extends BackRefNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = new BackRefNode(1, intArray0, true, true, 48, scanEnvironment0);
      int[] intArray1 = new int[9];
      intArray1[1] = 32767;
      backRefNode0.renumber(intArray1);
      assertArrayEquals(new int[] {32767, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = new BackRefNode(1, intArray0, true, true, (-150), scanEnvironment0);
      backRefNode0.backNum = 12;
      // Undeclared exception!
      try { 
        backRefNode0.renumber(backRefNode0.back);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("org.joni.ast.BackRefNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = (-474);
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = new BackRefNode(4, intArray0, true, true, 8, scanEnvironment0);
      backRefNode0.renumber(intArray0);
      assertEquals(0, backRefNode0.backNum);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      BackRefNode backRefNode0 = new BackRefNode((-677), intArray0, true, true, 1034, (ScanEnvironment) null);
      assertEquals((-677), backRefNode0.backNum);
      
      backRefNode0.renumber(intArray0);
      assertEquals(0, backRefNode0.backNum);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 879;
      intArray0[1] = 879;
      intArray0[2] = 879;
      intArray0[3] = 879;
      intArray0[4] = (-1);
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = null;
      try {
        backRefNode0 = new BackRefNode(879, intArray0, false, false, 0, scanEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.BackRefNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[15];
      BackRefNode backRefNode0 = new BackRefNode((-2218), intArray0, true, false, (-2218), (ScanEnvironment) null);
      String string0 = backRefNode0.toString((-2218));
      assertEquals("\n  state: NAME_REF \n  backNum: -2218\n  back: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n  nextLevel: 0", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[1];
      BackRefNode backRefNode0 = new BackRefNode((-677), intArray0, true, true, (-677), (ScanEnvironment) null);
      String string0 = backRefNode0.getName();
      assertEquals((-677), backRefNode0.nestLevel);
      assertEquals("Back Ref", string0);
      assertEquals((-677), backRefNode0.backNum);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = new BackRefNode((-2126), (int[]) null, false, false, (-66), scanEnvironment0);
      // Undeclared exception!
      try { 
        backRefNode0.toString(594);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.BackRefNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = new BackRefNode(1, intArray0, true, true, 1, scanEnvironment0);
      // Undeclared exception!
      try { 
        backRefNode0.renumber((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.BackRefNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 384;
      intArray0[1] = 384;
      intArray0[2] = 384;
      intArray0[3] = 384;
      intArray0[4] = 384;
      intArray0[5] = 384;
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = null;
      try {
        backRefNode0 = new BackRefNode(384, intArray0, true, true, 0, scanEnvironment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("org.joni.ast.BackRefNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[13];
      BackRefNode backRefNode0 = new BackRefNode((-3536), intArray0, false, true, (-3536), (ScanEnvironment) null);
      // Undeclared exception!
      try { 
        backRefNode0.renumber(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // numbered backref/call is not allowed. (use name)
         //
         verifyException("org.joni.ast.BackRefNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[7];
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = null;
      try {
        backRefNode0 = new BackRefNode(1, intArray0, false, true, 0, scanEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.BackRefNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = new BackRefNode(1, intArray0, true, true, (-150), scanEnvironment0);
      String string0 = backRefNode0.toString();
      assertEquals("<Back Ref:0x1 (NULL)>\n  state: NAME_REF NEST_LEVEL \n  backNum: 1\n  back: 1, 0, 0, 0, 0, 0, 0, \n  nextLevel: -150", string0);
  }
}
