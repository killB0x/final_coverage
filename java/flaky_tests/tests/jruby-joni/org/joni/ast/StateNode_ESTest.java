/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 15:07:31 GMT 2022
 */

package org.joni.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joni.ScanEnvironment;
import org.joni.ast.BackRefNode;
import org.joni.ast.CallNode;
import org.joni.ast.EncloseNode;
import org.joni.ast.QuantifierNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StateNode_ESTest extends StateNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory((-1413), true);
      encloseNode0.setEncloseStatus((-3004));
      encloseNode0.setByNumber();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(0, 2801, false);
      quantifierNode0.state = (-375);
      quantifierNode0.setNestLevel();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(0, 2801, false);
      quantifierNode0.state = (-375);
      quantifierNode0.setInRepeat();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption((-27));
      encloseNode0.setNameRef();
      encloseNode0.setNameRef();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(798, true);
      encloseNode0.setEncloseStatus(798);
      encloseNode0.setAddrFixed();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(16384, true);
      encloseNode0.setEncloseStatus(1432);
      encloseNode0.setCalled();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(0, 2801, false);
      quantifierNode0.state = (-375);
      quantifierNode0.setRecursion();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(1024, true);
      encloseNode0.setStopBtSimpleRepeat();
      encloseNode0.setStopBtSimpleRepeat();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(0, 0, true);
      quantifierNode0.state = (-2178);
      quantifierNode0.setMemBackrefed();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(1975);
      encloseNode0.state = 1975;
      encloseNode0.setMark2();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode((-1413));
      encloseNode0.setEncloseStatus((-2993));
      encloseNode0.setMark1();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(946);
      encloseNode0.setCLenFixed();
      encloseNode0.setCLenFixed();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode((-1413));
      encloseNode0.setEncloseStatus((-2993));
      encloseNode0.setMaxFixed();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory((-1413), true);
      encloseNode0.setEncloseStatus((-1413));
      encloseNode0.setMinFixed();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(2992, true);
      encloseNode0.setNamedGroup();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CallNode callNode0 = new CallNode(byteArray0, 4, (-1616), (-1616));
      // Undeclared exception!
      try { 
        callNode0.toString(1815);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(2992, true);
      encloseNode0.setChild(encloseNode0);
      // Undeclared exception!
      encloseNode0.toString(2992);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(694);
      String string0 = encloseNode0.stateToString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode((-2049), (-4824), true);
      boolean boolean0 = quantifierNode0.isByNumber();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory((-1624), true);
      boolean boolean0 = encloseNode0.isByNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory((-1624), true);
      encloseNode0.setEncloseStatus((-1321));
      boolean boolean0 = encloseNode0.isNestLevel();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(699);
      boolean boolean0 = encloseNode0.isNestLevel();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[1];
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = new BackRefNode((-1717), intArray0, false, false, 0, scanEnvironment0);
      boolean boolean0 = backRefNode0.isInRepeat();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[1];
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = new BackRefNode((-1717), intArray0, false, false, 0, scanEnvironment0);
      backRefNode0.state = (-2423);
      boolean boolean0 = backRefNode0.isInRepeat();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      CallNode callNode0 = new CallNode(byteArray0, (byte) (-57), (byte)32, (byte)46);
      boolean boolean0 = callNode0.isNameRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption((-27));
      encloseNode0.setNameRef();
      boolean boolean0 = encloseNode0.isNameRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(1, true);
      boolean boolean0 = encloseNode0.isNamedGroup();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(714);
      boolean boolean0 = encloseNode0.isNamedGroup();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption((-88));
      encloseNode0.state = (-88);
      boolean boolean0 = encloseNode0.isAddrFixed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode((-129), (-129), false);
      boolean boolean0 = quantifierNode0.isAddrFixed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(7);
      boolean boolean0 = encloseNode0.isCalled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(0);
      encloseNode0.state = 256;
      boolean boolean0 = encloseNode0.isCalled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption((-27));
      boolean boolean0 = encloseNode0.isRecursion();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(18);
      encloseNode0.state = Integer.MAX_VALUE;
      boolean boolean0 = encloseNode0.isRecursion();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(32);
      boolean boolean0 = encloseNode0.isStopBtSimpleRepeat();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(1024);
      encloseNode0.state = 806;
      boolean boolean0 = encloseNode0.isMemBackrefed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[1];
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = new BackRefNode((-1717), intArray0, false, false, 0, scanEnvironment0);
      boolean boolean0 = backRefNode0.isMemBackrefed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(2146948438, false);
      boolean boolean0 = encloseNode0.isMark2();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(16);
      encloseNode0.state = 16;
      boolean boolean0 = encloseNode0.isMark2();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption((-3));
      encloseNode0.setEncloseStatus((-3));
      boolean boolean0 = encloseNode0.isMark1();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption((-3));
      boolean boolean0 = encloseNode0.isMark1();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(2146948438, false);
      encloseNode0.setEncloseStatus(2146948438);
      boolean boolean0 = encloseNode0.isMaxFixed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(2146948438, false);
      boolean boolean0 = encloseNode0.isMaxFixed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(2);
      boolean boolean0 = encloseNode0.isMinFixed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(32);
      encloseNode0.state = 815;
      boolean boolean0 = encloseNode0.isMinFixed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode((-88));
      encloseNode0.setEncloseStatus((-88));
      String string0 = encloseNode0.stateToString();
      assertEquals("MARK1 MEM_BACKREFED RECURSION CALLED ADDR_FIXED NAMED_GROUP NAME_REF IN_REPEAT NEST_LEVEL BY_NUMBER ", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode((-388));
      encloseNode0.setEncloseStatus((-388));
      String string0 = encloseNode0.stateToString();
      assertEquals("MARK1 MARK2 MEM_BACKREFED STOP_BT_SIMPLE_REPEAT ADDR_FIXED NAMED_GROUP NAME_REF IN_REPEAT NEST_LEVEL BY_NUMBER ", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(4);
      encloseNode0.setEncloseStatus(4);
      boolean boolean0 = encloseNode0.isCLenFixed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(4);
      boolean boolean0 = encloseNode0.isCLenFixed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(221191);
      encloseNode0.state = 221191;
      String string0 = encloseNode0.stateToString();
      assertEquals("MIN_FIXED MAX_FIXED NEST_LEVEL BY_NUMBER ", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode((-200));
      encloseNode0.clearByNumber();
      assertFalse(encloseNode0.isStopBacktrack());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode((-16385), (-16385), false);
      quantifierNode0.clearNamedGroup();
      assertFalse(quantifierNode0.isRefered);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory((-1413), true);
      encloseNode0.clearAddrFixed();
      assertEquals(0, encloseNode0.regNum);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(2280);
      encloseNode0.clearInRepeat();
      assertEquals(2280, encloseNode0.option);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(2992, true);
      encloseNode0.clearCAlled();
      assertFalse(encloseNode0.isAbsent());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(18);
      encloseNode0.clearMark2();
      assertTrue(encloseNode0.isOption());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(0, 0, true);
      quantifierNode0.clearNameRef();
      assertEquals(5, quantifierNode0.getType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(370);
      encloseNode0.clearMemBackrefed();
      assertFalse(encloseNode0.isSimple());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(1024, true);
      encloseNode0.setStopBtSimpleRepeat();
      boolean boolean0 = encloseNode0.isStopBtSimpleRepeat();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory((-1639), true);
      encloseNode0.clearMinFixed();
      assertEquals(6, encloseNode0.getType());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(0);
      encloseNode0.clearStopBtSimpleRepeat();
      assertEquals(0, encloseNode0.maxLength);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory((-1413), true);
      encloseNode0.clearRecursion();
      assertEquals(6, encloseNode0.getType());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode((-16385), (-16385), false);
      quantifierNode0.clearMaxFixed();
      assertFalse(quantifierNode0.isRefered);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption((-88));
      String string0 = encloseNode0.toString((-88));
      assertEquals("\n  state: \n  type: OPTION \n  regNum: 0, option: SINGLELINEFIND_NOT_EMPTYDONT_CAPTURE_GROUPCAPTURE_GROUPNOTBOLNOTEOLPOSIX_REGIONCR_7_BIT, callAddr: -1, minLength: 0, maxLength: 0, charLength: 0, optCount: 0\n  target: NULL", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(0, 0, false);
      quantifierNode0.clearMark1();
      assertEquals(0, quantifierNode0.lower);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(16);
      encloseNode0.clearNestLevel();
      assertEquals((-1), encloseNode0.callAddr);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(2146948438, false);
      encloseNode0.clearCLenFixed();
      assertEquals((-1), encloseNode0.callAddr);
  }
}
