/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 15:23:58 GMT 2022
 */

package org.joni.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joni.ScanEnvironment;
import org.joni.ast.AnchorNode;
import org.joni.ast.AnyCharNode;
import org.joni.ast.BackRefNode;
import org.joni.ast.CClassNode;
import org.joni.ast.CallNode;
import org.joni.ast.EncloseNode;
import org.joni.ast.ListNode;
import org.joni.ast.Node;
import org.joni.ast.QuantifierNode;
import org.joni.ast.StringNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ListNode_ESTest extends ListNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(33543510);
      ListNode listNode0 = ListNode.listAdd((ListNode) null, encloseNode0);
      ListNode listNode1 = ListNode.newList(encloseNode0, listNode0);
      listNode1.tail.setChild(listNode0);
      ListNode listNode2 = listNode1.tail;
      listNode2.setValue(listNode1);
      listNode1.parent = (Node) listNode0;
      ListNode listNode3 = ListNode.listAdd(listNode2, (Node) null);
      ListNode listNode4 = ListNode.newList(encloseNode0, listNode2);
      ListNode.newAlt((Node) null, listNode1);
      listNode3.toString(0);
      listNode1.tail.parent = (Node) listNode4;
      AnyCharNode anyCharNode0 = new AnyCharNode();
      listNode2.value = (Node) anyCharNode0;
      listNode4.value = (Node) listNode1;
      ListNode listNode5 = ListNode.listAdd(listNode2, listNode4);
      Node node0 = listNode2.getChild();
      listNode2.setValue(listNode3);
      CClassNode cClassNode0 = new CClassNode();
      ListNode listNode6 = ListNode.listAdd((ListNode) null, cClassNode0);
      listNode6.getAddressName();
      listNode2.getName();
      listNode5.getName();
      ListNode.listAdd(listNode0, node0);
      listNode4.getChild();
      listNode6.setValue(node0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListNode listNode0 = ListNode.newList((Node) null, (ListNode) null);
      assertEquals(256, listNode0.getType2Bit());
      
      ListNode listNode1 = ListNode.newList(listNode0, listNode0);
      assertEquals(8, listNode1.getType());
      
      listNode1.tail.tail = listNode0;
      // Undeclared exception!
      ListNode.listAdd(listNode0, listNode0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringNode stringNode0 = StringNode.EMPTY;
      ListNode listNode0 = ListNode.newList(stringNode0, (ListNode) null);
      ListNode listNode1 = listNode0.tail;
      ListNode listNode2 = ListNode.listAdd((ListNode) null, listNode0);
      ListNode listNode3 = ListNode.newAlt(stringNode0, listNode2);
      ListNode listNode4 = ListNode.newList((Node) null, (ListNode) null);
      listNode3.setChild((Node) null);
      listNode4.setValue(listNode3);
      listNode4.getChild();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ListNode listNode0 = ListNode.newAlt((Node) null, (ListNode) null);
      assertEquals(9, listNode0.getType());
      
      ListNode listNode1 = ListNode.newAlt((Node) null, listNode0);
      ListNode.listAdd(listNode1, listNode0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ListNode listNode0 = ListNode.listAdd((ListNode) null, (Node) null);
      assertNotNull(listNode0);
      assertEquals(256, listNode0.getType2Bit());
      
      listNode0.toListNode();
      ListNode.newList(listNode0, listNode0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringNode stringNode0 = StringNode.EMPTY;
      byte[] byteArray0 = new byte[0];
      stringNode0.bytes = byteArray0;
      ListNode listNode0 = ListNode.newAlt(stringNode0, (ListNode) null);
      AnchorNode anchorNode0 = new AnchorNode(8);
      Node node0 = anchorNode0.target;
      ListNode listNode1 = listNode0.tail;
      ListNode.newList((Node) null, (ListNode) null);
      ListNode listNode2 = ListNode.listAdd(listNode0, (Node) null);
      listNode0.toString();
      AnchorNode anchorNode1 = new AnchorNode(0, false);
      anchorNode1.getChild();
      ListNode listNode3 = ListNode.newAlt((Node) null, listNode2);
      ListNode listNode4 = ListNode.newList(listNode2, listNode0);
      listNode2.setChild(stringNode0);
      listNode4.getName();
      listNode0.setValue(listNode3);
      listNode4.toListNode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      AnchorNode anchorNode0 = new AnchorNode((-257));
      Node node0 = anchorNode0.target;
      anchorNode0.toString();
      ListNode listNode0 = ListNode.newAlt((Node) null, (ListNode) null);
      ListNode listNode1 = ListNode.newAlt(listNode0, (ListNode) null);
      ListNode listNode2 = ListNode.newList(listNode1, listNode1);
      ListNode listNode3 = ListNode.newAlt((Node) null, listNode0);
      ListNode listNode4 = listNode3.tail;
      listNode1.setValue(anchorNode0);
      StringNode stringNode0 = StringNode.EMPTY;
      ListNode listNode5 = ListNode.newAlt(stringNode0, listNode4);
      listNode5.getAddressName();
      listNode3.toString(0);
      ListNode listNode6 = ListNode.newList(anchorNode0, (ListNode) null);
      listNode0.setTail(listNode2);
      listNode2.toString(1);
      listNode6.setChild(anchorNode0);
      StringNode stringNode1 = new StringNode(byteArray0, 0, 9);
      ListNode listNode7 = ListNode.newList(stringNode1, listNode1);
      ListNode.newList(listNode3, listNode7);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ListNode listNode0 = ListNode.listAdd((ListNode) null, (Node) null);
      ListNode listNode1 = ListNode.listAdd((ListNode) null, listNode0);
      // Undeclared exception!
      listNode1.toString(2846);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ListNode listNode0 = ListNode.newAlt((Node) null, (ListNode) null);
      // Undeclared exception!
      try { 
        listNode0.setValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.ListNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringNode stringNode0 = StringNode.EMPTY;
      byte[] byteArray0 = new byte[0];
      stringNode0.bytes = byteArray0;
      ListNode listNode0 = ListNode.newAlt(stringNode0, (ListNode) null);
      ListNode listNode1 = ListNode.listAdd(listNode0, (Node) null);
      listNode0.toString();
      AnchorNode anchorNode0 = new AnchorNode(0, false);
      anchorNode0.getChild();
      ListNode.newAlt((Node) null, listNode1);
      ListNode listNode2 = ListNode.newList(listNode1, listNode0);
      listNode0.setValue(stringNode0);
      listNode2.tail.toString((-1040));
      listNode2.setChild((Node) null);
      listNode0.getChild();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListNode listNode0 = null;
      ListNode listNode1 = ListNode.listAdd((ListNode) null, (Node) null);
      listNode1.getAddressName();
      int int0 = (-298);
      AnyCharNode anyCharNode0 = new AnyCharNode();
      anyCharNode0.setChild((Node) null);
      // Undeclared exception!
      try { 
        anyCharNode0.replaceWith((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(677, 677, false);
      quantifierNode0.getChild();
      ListNode listNode0 = ListNode.listAdd((ListNode) null, (Node) null);
      listNode0.getChild();
      BackRefNode backRefNode0 = new BackRefNode(0, (int[]) null, true, false, 446, (ScanEnvironment) null);
      ListNode listNode1 = ListNode.listAdd((ListNode) null, backRefNode0);
      assertEquals(256, listNode1.getType2Bit());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListNode listNode0 = ListNode.listAdd((ListNode) null, (Node) null);
      listNode0.getChild();
      assertEquals(256, listNode0.getType2Bit());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringNode stringNode0 = StringNode.EMPTY;
      Node.TopNode node_TopNode0 = new Node.TopNode(stringNode0);
      ListNode listNode0 = ListNode.listAdd((ListNode) null, stringNode0);
      ListNode listNode1 = listNode0.tail;
      ListNode listNode2 = ListNode.newList(node_TopNode0, (ListNode) null);
      listNode2.getChild();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(0);
      StringNode stringNode0 = StringNode.EMPTY;
      ListNode listNode0 = null;
      ListNode listNode1 = ListNode.newAlt(stringNode0, (ListNode) null);
      QuantifierNode quantifierNode0 = new QuantifierNode(0, 0, true);
      ListNode listNode2 = ListNode.listAdd(listNode1, quantifierNode0);
      listNode2.setTail(listNode1);
      ListNode listNode3 = ListNode.newList(encloseNode0, listNode2);
      ListNode listNode4 = listNode3.tail;
      // Undeclared exception!
      try { 
        listNode4.toString(encloseNode0.maxLength);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ListNode listNode0 = ListNode.listAdd((ListNode) null, (Node) null);
      ListNode listNode1 = ListNode.newAlt((Node) null, listNode0);
      String string0 = listNode1.toString(0);
      assertEquals("\n  value: NULL\n  tail: <List:0x1 (Alt:0x2)>\n  value: NULL\n  tail: NULL", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringNode stringNode0 = StringNode.EMPTY;
      ListNode listNode0 = ListNode.newAlt(stringNode0, (ListNode) null);
      listNode0.getAddressName();
      listNode0.toString(8);
      ListNode.newList(stringNode0, (ListNode) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListNode listNode0 = ListNode.listAdd((ListNode) null, (Node) null);
      String string0 = listNode0.toString();
      assertEquals("<List:0x1 (NULL)>\n  value: NULL\n  tail: NULL", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ListNode listNode0 = ListNode.listAdd((ListNode) null, (Node) null);
      assertNotNull(listNode0);
      
      String string0 = listNode0.getName();
      assertEquals("List", string0);
      assertEquals(256, listNode0.getType2Bit());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ListNode listNode0 = ListNode.newAlt((Node) null, (ListNode) null);
      String string0 = listNode0.getAddressName();
      assertEquals("Alt:0x1", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode((-257), (-257), true);
      quantifierNode0.getChild();
      ListNode listNode0 = ListNode.newAlt((Node) null, (ListNode) null);
      ListNode listNode1 = ListNode.listAdd(listNode0, listNode0);
      listNode1.setChild(listNode0);
      assertEquals("List", listNode1.getName());
      assertEquals(256, listNode1.getType2Bit());
      
      String string0 = listNode0.getName();
      assertEquals("Alt", string0);
      assertEquals(512, listNode0.getType2Bit());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)0;
      CallNode callNode0 = new CallNode(byteArray0, (byte)127, 0, (byte) (-60));
      callNode0.getChild();
      EncloseNode encloseNode0 = EncloseNode.newMemory((byte) (-1), false);
      ListNode listNode0 = ListNode.newList((Node) null, (ListNode) null);
      ListNode listNode1 = ListNode.listAdd(listNode0, (Node) null);
      ListNode listNode2 = ListNode.newAlt(encloseNode0, listNode1);
      ListNode listNode3 = listNode2.tail;
      assertNotNull(listNode3);
      
      ListNode listNode4 = ListNode.newAlt((Node) null, listNode3);
      assertEquals(9, listNode2.getType());
      assertEquals(256, listNode3.getType2Bit());
      assertNotSame(listNode3, listNode0);
      assertEquals(512, listNode4.getType2Bit());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringNode stringNode0 = StringNode.EMPTY;
      byte[] byteArray0 = new byte[0];
      stringNode0.bytes = byteArray0;
      ListNode listNode0 = ListNode.newAlt(stringNode0, (ListNode) null);
      ListNode listNode1 = ListNode.newAlt((Node) null, listNode0);
      ListNode listNode2 = ListNode.listAdd(listNode1, listNode1);
      listNode2.getAddressName();
      Node.pad(listNode1, 8);
      ListNode listNode3 = ListNode.newAlt(stringNode0, listNode1);
      listNode3.toString((-1040));
      ListNode listNode4 = ListNode.newList(listNode2, listNode3);
      listNode4.toString(8);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnchorNode anchorNode0 = new AnchorNode(1266);
      int[] intArray0 = new int[0];
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = new BackRefNode((-1), intArray0, false, false, 2048, scanEnvironment0);
      ListNode listNode0 = ListNode.newList(backRefNode0, (ListNode) null);
      ListNode listNode1 = ListNode.newAlt(anchorNode0, listNode0);
      ListNode listNode2 = listNode1.tail;
      assertNotNull(listNode2);
      
      ListNode listNode3 = ListNode.listAdd(listNode2, listNode0);
      listNode3.setChild(listNode1);
      assertNotSame(listNode3, listNode0);
      assertEquals(9, listNode1.getType());
      assertEquals(8, listNode3.getType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ListNode listNode0 = ListNode.newList((Node) null, (ListNode) null);
      ListNode listNode1 = ListNode.listAdd(listNode0, (Node) null);
      assertEquals(8, listNode1.getType());
      assertNotSame(listNode1, listNode0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 0;
      BackRefNode backRefNode0 = new BackRefNode(0, intArray0, true, true, 1044, (ScanEnvironment) null);
      ListNode listNode0 = ListNode.newList(backRefNode0, (ListNode) null);
      listNode0.setTail((ListNode) null);
      assertEquals(8, listNode0.getType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringNode stringNode0 = new StringNode();
      EncloseNode encloseNode0 = new EncloseNode(0);
      ListNode listNode0 = null;
      stringNode0.parent = (Node) encloseNode0;
      ListNode listNode1 = ListNode.listAdd((ListNode) null, encloseNode0);
      ListNode.newAlt(listNode1, (ListNode) null);
      ListNode.newAlt(encloseNode0, listNode1);
      Node.newTop(encloseNode0);
      encloseNode0.clearEncloseStatus((-1893));
      // Undeclared exception!
      Node.pad(encloseNode0, 1074);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ListNode listNode0 = ListNode.newList((Node) null, (ListNode) null);
      listNode0.setChild((Node) null);
      listNode0.getChild();
      assertEquals(256, listNode0.getType2Bit());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringNode stringNode0 = StringNode.EMPTY;
      ListNode listNode0 = ListNode.newList(stringNode0, (ListNode) null);
      ListNode listNode1 = listNode0.tail;
      ListNode listNode2 = ListNode.listAdd((ListNode) null, listNode0);
      ListNode listNode3 = ListNode.newAlt(stringNode0, listNode2);
      listNode3.setChild((Node) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringNode stringNode0 = StringNode.EMPTY;
      ListNode.listAdd((ListNode) null, stringNode0);
  }
}
