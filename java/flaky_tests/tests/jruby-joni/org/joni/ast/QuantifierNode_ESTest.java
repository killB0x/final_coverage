/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 15:01:42 GMT 2022
 */

package org.joni.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joni.ScanEnvironment;
import org.joni.ast.CTypeNode;
import org.joni.ast.EncloseNode;
import org.joni.ast.ListNode;
import org.joni.ast.Node;
import org.joni.ast.QuantifierNode;
import org.joni.ast.StringNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuantifierNode_ESTest extends QuantifierNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode((-4), (-4), false);
      StringNode stringNode0 = new StringNode();
      QuantifierNode quantifierNode1 = new QuantifierNode(0, (-1), false);
      quantifierNode1.setTarget(quantifierNode0);
      quantifierNode0.copy(quantifierNode1);
      QuantifierNode quantifierNode2 = new QuantifierNode(0, 1, true);
      // Undeclared exception!
      try { 
        quantifierNode0.setQuantifier(quantifierNode2, true, (ScanEnvironment) null, stringNode0.bytes, (-2049), (-1544));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.QuantifierNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(2, (-919), false);
      StringNode stringNode0 = new StringNode();
      QuantifierNode quantifierNode1 = new QuantifierNode(0, 1, false);
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      quantifierNode1.setQuantifier(quantifierNode0, true, scanEnvironment0, stringNode0.bytes, 2, (-394));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(1, 1, true);
      QuantifierNode quantifierNode1 = new QuantifierNode(0, 1, true);
      quantifierNode1.reduceNestedQuantifier(quantifierNode0);
      assertEquals(1, quantifierNode1.upper);
      assertEquals(1, quantifierNode0.lower);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode((-1635), 0, true);
      quantifierNode0.greedy = false;
      quantifierNode0.reduceNestedQuantifier(quantifierNode0);
      assertEquals((-1635), quantifierNode0.lower);
      assertEquals(0, quantifierNode0.upper);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringNode stringNode0 = new StringNode();
      QuantifierNode quantifierNode0 = new QuantifierNode(0, (-1), false);
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      quantifierNode0.setQuantifier(stringNode0, false, scanEnvironment0, stringNode0.bytes, 21, 21);
      quantifierNode0.isAnyCharStar();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(21, 21, false);
      String string0 = quantifierNode0.toString(21);
      assertEquals("\n  state: \n  lower: 21, upper: 21, greedy: true, isRefered: false, targetEmptyInfo: 0, combExpCheckNum: 0\n  headExact: NULL\n  nextHeadExact: NULL\n  target: NULL", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(0, 1, false);
      int int0 = quantifierNode0.popularNum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(0, (-1), true);
      int int0 = quantifierNode0.popularNum();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode((-4550), (-4550), true);
      String string0 = quantifierNode0.getName();
      assertEquals((-4550), quantifierNode0.upper);
      assertEquals(0, quantifierNode0.targetEmptyInfo);
      assertTrue(quantifierNode0.greedy);
      assertEquals((-4550), quantifierNode0.lower);
      assertEquals("Quantifier", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(2192, (-1414), true);
      CTypeNode cTypeNode0 = new CTypeNode((-738), false, false);
      quantifierNode0.setChild(cTypeNode0);
      Node node0 = quantifierNode0.getChild();
      assertEquals(2192, quantifierNode0.lower);
      assertEquals(0, quantifierNode0.targetEmptyInfo);
      assertEquals((-1414), quantifierNode0.upper);
      assertNotNull(node0);
      assertTrue(quantifierNode0.greedy);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(1, 479, false);
      Node.TopNode node_TopNode0 = Node.newTop(quantifierNode0);
      quantifierNode0.setTarget(node_TopNode0);
      Node node0 = quantifierNode0.getChild();
      assertEquals(479, quantifierNode0.upper);
      assertEquals(0, quantifierNode0.targetEmptyInfo);
      assertNotNull(node0);
      assertTrue(quantifierNode0.greedy);
      assertEquals(1, quantifierNode0.lower);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode((-522), (-522), false);
      // Undeclared exception!
      try { 
        quantifierNode0.setTarget((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.QuantifierNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringNode stringNode0 = StringNode.EMPTY;
      QuantifierNode quantifierNode0 = new QuantifierNode(2382, 2382, false);
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      quantifierNode0.setQuantifier(stringNode0, false, scanEnvironment0, stringNode0.bytes, 3, 2382);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(62, 62, false);
      StringNode stringNode0 = new StringNode(62);
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      ListNode listNode0 = mock(ListNode.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(listNode0).getType();
      ListNode listNode1 = ListNode.newAlt(quantifierNode0, listNode0);
      ListNode listNode2 = listNode1.tail;
      // Undeclared exception!
      try { 
        quantifierNode0.setQuantifier(listNode2, false, scanEnvironment0, stringNode0.bytes, (byte)48, (byte) (-19));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joni.ast.ListNode$MockitoMock$1246615580 cannot be cast to class org.joni.ast.StringNode (org.joni.ast.ListNode$MockitoMock$1246615580 and org.joni.ast.StringNode are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @fa3dd46)
         //
         verifyException("org.joni.ast.QuantifierNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode((-230), (-1), false);
      // Undeclared exception!
      try { 
        quantifierNode0.isAnyCharStar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.QuantifierNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = QuantifierNode.isRepeatInfinite((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = QuantifierNode.isRepeatInfinite((-1661));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(17, 17, false);
      StringNode stringNode0 = new StringNode();
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      QuantifierNode quantifierNode1 = new QuantifierNode(0, (-1), false);
      quantifierNode0.setQuantifier(quantifierNode1, false, scanEnvironment0, stringNode0.bytes, 0, 0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringNode stringNode0 = new StringNode();
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      QuantifierNode quantifierNode0 = new QuantifierNode(0, (-1), false);
      QuantifierNode quantifierNode1 = new QuantifierNode(0, (-3131), false);
      quantifierNode1.setQuantifier(quantifierNode0, false, scanEnvironment0, stringNode0.bytes, 2192, (-229));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringNode stringNode0 = new StringNode();
      QuantifierNode quantifierNode0 = new QuantifierNode(0, (-1), false);
      QuantifierNode quantifierNode1 = new QuantifierNode((-1505), (-1), false);
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      quantifierNode1.setQuantifier(quantifierNode0, true, scanEnvironment0, stringNode0.bytes, 0, 2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(21, 2192, false);
      StringNode stringNode0 = new StringNode();
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      QuantifierNode quantifierNode1 = new QuantifierNode(0, (-1), false);
      quantifierNode1.setTarget(quantifierNode0);
      quantifierNode0.copy(quantifierNode1);
      // Undeclared exception!
      try { 
        quantifierNode0.setQuantifier(quantifierNode1, true, scanEnvironment0, stringNode0.bytes, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.QuantifierNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(16392, 16392, true);
      StringNode stringNode0 = StringNode.EMPTY;
      quantifierNode0.setQuantifier(stringNode0, true, (ScanEnvironment) null, stringNode0.bytes, 2382, 16392);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption((-4547));
      ListNode listNode0 = mock(ListNode.class, new ViolatedAssumptionAnswer());
      ListNode listNode1 = ListNode.newAlt(encloseNode0, listNode0);
      QuantifierNode quantifierNode0 = new QuantifierNode(0, 1, false);
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      quantifierNode0.setQuantifier(listNode1, true, scanEnvironment0, (byte[]) null, 4105, (-2033));
      assertTrue(quantifierNode0.greedy);
      assertEquals(0, quantifierNode0.targetEmptyInfo);
      assertEquals(1, quantifierNode0.upper);
      assertEquals(0, quantifierNode0.lower);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(1, 1, false);
      StringNode stringNode0 = new StringNode(1);
      // Undeclared exception!
      try { 
        quantifierNode0.setQuantifier(stringNode0, false, (ScanEnvironment) null, stringNode0.bytes, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.QuantifierNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(0, 1, false);
      quantifierNode0.greedy = false;
      QuantifierNode quantifierNode1 = new QuantifierNode(0, (-1), false);
      quantifierNode0.reduceNestedQuantifier(quantifierNode1);
      quantifierNode0.reduceNestedQuantifier(quantifierNode1);
      assertEquals(0, quantifierNode0.lower);
      assertEquals(1, quantifierNode1.lower);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode((-4), (-4), false);
      QuantifierNode quantifierNode1 = new QuantifierNode(0, (-1), false);
      quantifierNode1.setTarget(quantifierNode0);
      quantifierNode0.copy(quantifierNode1);
      QuantifierNode quantifierNode2 = new QuantifierNode(0, 1, true);
      quantifierNode2.greedy = false;
      // Undeclared exception!
      try { 
        quantifierNode0.reduceNestedQuantifier(quantifierNode2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.QuantifierNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(21, 2192, false);
      QuantifierNode quantifierNode1 = new QuantifierNode(0, (-1), false);
      quantifierNode1.setTarget(quantifierNode0);
      quantifierNode0.copy(quantifierNode1);
      quantifierNode1.reduceNestedQuantifier(quantifierNode0);
      assertEquals(0, quantifierNode0.lower);
      assertEquals((-1), quantifierNode0.upper);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(21, 2192, false);
      StringNode stringNode0 = new StringNode();
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      QuantifierNode quantifierNode1 = new QuantifierNode(0, (-1), false);
      quantifierNode1.setTarget(quantifierNode0);
      quantifierNode0.copy(quantifierNode1);
      QuantifierNode quantifierNode2 = new QuantifierNode(0, 92, true);
      quantifierNode2.setQuantifier(quantifierNode1, true, scanEnvironment0, stringNode0.bytes, 0, 2739);
      quantifierNode0.reduceNestedQuantifier(quantifierNode2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(7, 7, false);
      quantifierNode0.greedy = false;
      quantifierNode0.reduceNestedQuantifier(quantifierNode0);
      assertEquals(7, quantifierNode0.upper);
      assertEquals(7, quantifierNode0.lower);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(0, 0, true);
      quantifierNode0.greedy = false;
      int int0 = quantifierNode0.popularNum();
      assertEquals(0, quantifierNode0.targetEmptyInfo);
      assertEquals(0, quantifierNode0.upper);
      assertEquals((-1), int0);
      assertEquals(0, quantifierNode0.lower);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringNode stringNode0 = new StringNode();
      QuantifierNode quantifierNode0 = new QuantifierNode(0, 0, false);
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      QuantifierNode quantifierNode1 = new QuantifierNode(0, 1, false);
      quantifierNode1.greedy = false;
      quantifierNode0.setQuantifier(quantifierNode1, false, scanEnvironment0, stringNode0.bytes, 1, (-1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(1, 1, false);
      assertTrue(quantifierNode0.greedy);
      
      quantifierNode0.greedy = false;
      int int0 = quantifierNode0.popularNum();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(1, 2192, false);
      StringNode stringNode0 = new StringNode();
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      quantifierNode0.setQuantifier(quantifierNode0, false, scanEnvironment0, stringNode0.bytes, 2167, 1624);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(21, 2192, false);
      QuantifierNode quantifierNode1 = new QuantifierNode(0, (-1), false);
      quantifierNode1.greedy = false;
      quantifierNode1.reduceNestedQuantifier(quantifierNode0);
      assertEquals((-1), quantifierNode1.upper);
      assertEquals(21, quantifierNode0.lower);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(21, 2192, false);
      QuantifierNode quantifierNode1 = new QuantifierNode(0, (-1), false);
      quantifierNode1.setTarget(quantifierNode0);
      quantifierNode0.copy(quantifierNode1);
      boolean boolean0 = quantifierNode0.isAnyCharStar();
      assertEquals((-1), quantifierNode0.upper);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(21, 2192, false);
      boolean boolean0 = quantifierNode0.isAnyCharStar();
      assertFalse(boolean0);
      assertEquals(21, quantifierNode0.lower);
      assertEquals(2192, quantifierNode0.upper);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(1, 1, false);
      quantifierNode0.greedy = false;
      boolean boolean0 = quantifierNode0.isAnyCharStar();
      assertFalse(boolean0);
      assertEquals(1, quantifierNode0.upper);
      assertEquals(0, quantifierNode0.targetEmptyInfo);
      assertEquals(1, quantifierNode0.lower);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(21, 2192, false);
      quantifierNode0.getChild();
      assertEquals(2192, quantifierNode0.upper);
      assertTrue(quantifierNode0.greedy);
      assertEquals(0, quantifierNode0.targetEmptyInfo);
      assertEquals(21, quantifierNode0.lower);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      QuantifierNode quantifierNode0 = new QuantifierNode(21, 2192, false);
      // Undeclared exception!
      try { 
        quantifierNode0.copy(quantifierNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.QuantifierNode", e);
      }
  }
}
