/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 15:19:24 GMT 2022
 */

package org.joni.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joni.ScanEnvironment;
import org.joni.ast.BackRefNode;
import org.joni.ast.EncloseNode;
import org.joni.ast.Node;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EncloseNode_ESTest extends EncloseNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(645);
      encloseNode0.clearEncloseStatus(645);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(3984, true);
      encloseNode0.setEncloseStatus(3984);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode((-128));
      encloseNode0.typeToString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption((-392));
      encloseNode0.toString((-379));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(645);
      encloseNode0.getName();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(2);
      int[] intArray0 = new int[0];
      ScanEnvironment scanEnvironment0 = mock(ScanEnvironment.class, new ViolatedAssumptionAnswer());
      BackRefNode backRefNode0 = new BackRefNode(0, intArray0, true, true, 0, scanEnvironment0);
      encloseNode0.setChild(backRefNode0);
      encloseNode0.getChild();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(0, true);
      EncloseNode encloseNode1 = EncloseNode.newMemory(0, true);
      encloseNode1.target = (Node) encloseNode0;
      encloseNode1.getChild();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption((-446));
      // Undeclared exception!
      try { 
        encloseNode0.setTarget((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.ast.EncloseNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(2);
      encloseNode0.isAbsent();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode((-139));
      encloseNode0.isAbsent();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode((-139));
      encloseNode0.isStopBacktrack();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(1535);
      encloseNode0.isStopBacktrack();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(428);
      encloseNode0.isCondition();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(1497);
      encloseNode0.isCondition();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(1497);
      encloseNode0.isOption();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory(1255, true);
      encloseNode0.isOption();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory((-1133), true);
      encloseNode0.isMemory();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(1497);
      encloseNode0.isMemory();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newOption(2534);
      encloseNode0.typeToString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory((-1133), true);
      encloseNode0.typeToString();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EncloseNode encloseNode0 = new EncloseNode(1535);
      encloseNode0.typeToString();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EncloseNode.newMemory(6, false);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory((-1133), true);
      Node.TopNode node_TopNode0 = new Node.TopNode(encloseNode0);
      encloseNode0.setChild(node_TopNode0);
      Node node0 = encloseNode0.getChild();
      assertEquals(1, encloseNode0.type);
      assertNotNull(node0);
      assertEquals((-1), encloseNode0.callAddr);
      assertEquals((-1133), encloseNode0.option);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EncloseNode encloseNode0 = EncloseNode.newMemory((-1133), true);
      encloseNode0.getChild();
      assertEquals(1, encloseNode0.type);
      assertEquals((-1133), encloseNode0.option);
      assertEquals((-1), encloseNode0.callAddr);
  }
}
