/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 15:34:26 GMT 2022
 */

package org.joni;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joni.StackEntry;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StackEntry_ESTest extends StackEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.type = 1;
      stackEntry0.setCallFrameRetAddr(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setNullCheckNum((-1200));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setSi((-1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setRepeatNum((-3393));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.type = 1;
      stackEntry0.increaseRepeatCount();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setRepeatCount((-3786));
      stackEntry0.decreaseRepeatCount();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setStatePStrPrev((-337));
      int int0 = stackEntry0.getStatePStrPrev();
      assertEquals((-337), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setNullCheckPStr(150);
      int int0 = stackEntry0.getStatePStr();
      assertEquals(150, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setAbsentEndStr((-1));
      int int0 = stackEntry0.getStatePStr();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setStatePCode(1464);
      int int0 = stackEntry0.getStatePCode();
      assertEquals(1464, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setRepeatCount((-3786));
      int int0 = stackEntry0.getStatePCode();
      assertEquals((-3786), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setAbsentStr(483);
      int int0 = stackEntry0.getSi();
      assertEquals(483, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setAbsentStr((-1));
      int int0 = stackEntry0.getSi();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setStatePStr(994);
      int int0 = stackEntry0.getRepeatPCode();
      assertEquals(994, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setRepeatPCode((-1016));
      int int0 = stackEntry0.getRepeatPCode();
      assertEquals((-1016), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setMemStart(1523);
      int int0 = stackEntry0.getRepeatNum();
      assertEquals(1523, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.increaseRepeatCount();
      int int0 = stackEntry0.getRepeatCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setMemNum((-1914));
      int int0 = stackEntry0.getRepeatCount();
      assertEquals((-1914), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setMemEnd(994);
      int int0 = stackEntry0.getPKeep();
      assertEquals(994, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setPKeep((-1));
      int int0 = stackEntry0.getPKeep();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setCallFrameNum(4440);
      int int0 = stackEntry0.getNullCheckPStr();
      assertEquals(4440, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setCallFrameNum((-1));
      int int0 = stackEntry0.getNullCheckPStr();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setStatePCode(1464);
      int int0 = stackEntry0.getNullCheckNum();
      assertEquals(1464, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setMemNum((-1));
      int int0 = stackEntry0.getNullCheckNum();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setMemStart(1667);
      int int0 = stackEntry0.getMemStart();
      assertEquals(1667, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setStatePStrPrev((-542));
      int int0 = stackEntry0.getMemStart();
      assertEquals((-542), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setAbsentEndStr(520);
      int int0 = stackEntry0.getMemPStr();
      assertEquals(520, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setCallFrameNum((-108));
      int int0 = stackEntry0.getMemPStr();
      assertEquals((-108), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setAbsentStr(2324);
      int int0 = stackEntry0.getMemNum();
      assertEquals(2324, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setAbsentStr((-1));
      int int0 = stackEntry0.getMemNum();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setPKeep(2132);
      int int0 = stackEntry0.getMemEnd();
      assertEquals(2132, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setPKeep((-1408));
      int int0 = stackEntry0.getMemEnd();
      assertEquals((-1408), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setAbsentStr(2324);
      int int0 = stackEntry0.getCallFrameRetAddr();
      assertEquals(2324, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setCallFramePStr(1);
      int int0 = stackEntry0.getCallFramePStr();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setStatePStrPrev((-3438));
      int int0 = stackEntry0.getCallFramePStr();
      assertEquals((-3438), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setRepeatPCode(2289);
      int int0 = stackEntry0.getCallFrameNum();
      assertEquals(2289, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setNullCheckPStr((-162));
      int int0 = stackEntry0.getCallFrameNum();
      assertEquals((-162), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setMemNum((-1));
      int int0 = stackEntry0.getAbsentStr();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setStatePStr(994);
      int int0 = stackEntry0.getAbsentEndStr();
      assertEquals(994, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setMemPstr((-3438));
      int int0 = stackEntry0.getAbsentEndStr();
      assertEquals((-3438), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setStatePStrPrev((-337));
      int int0 = stackEntry0.getRepeatNum();
      assertEquals((-337), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getCallFramePStr();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getCallFrameRetAddr();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setAbsentStr((-1));
      int int0 = stackEntry0.getCallFrameRetAddr();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getMemNum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getMemEnd();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getRepeatPCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.increaseRepeatCount();
      int int0 = stackEntry0.getAbsentStr();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getMemStart();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getRepeatCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      stackEntry0.setMemStart(595);
      int int0 = stackEntry0.getStatePStrPrev();
      assertEquals(595, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getNullCheckPStr();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getPKeep();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getSi();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getNullCheckNum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getStatePStr();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getRepeatNum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getStatePStrPrev();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getMemPStr();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getStatePCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getCallFrameNum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getAbsentEndStr();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StackEntry stackEntry0 = new StackEntry();
      int int0 = stackEntry0.getAbsentStr();
      assertEquals(0, int0);
  }
}
