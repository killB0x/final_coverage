/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 15:13:42 GMT 2022
 */

package org.joni;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joni.MinMaxLen;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MinMaxLen_ESTest extends MinMaxLen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = MinMaxLen.distanceMultiply(1, 2147388647);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = MinMaxLen.distanceAdd(1, 2147483646);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      MinMaxLen minMaxLen1 = new MinMaxLen();
      minMaxLen1.set((-1969), (-1969));
      minMaxLen1.altMerge(minMaxLen0);
      assertFalse(minMaxLen1.equals((Object)minMaxLen0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      MinMaxLen minMaxLen1 = new MinMaxLen();
      minMaxLen1.set(3329, 3329);
      minMaxLen1.altMerge(minMaxLen0);
      minMaxLen1.altMerge(minMaxLen0);
      assertFalse(minMaxLen1.equals((Object)minMaxLen0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      minMaxLen0.max = 0;
      minMaxLen0.max = (-1966);
      minMaxLen0.addLength(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      minMaxLen0.set((-1), 0);
      minMaxLen0.add(minMaxLen0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      minMaxLen0.set(0, (-2199));
      minMaxLen0.copy(minMaxLen0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      MinMaxLen minMaxLen1 = new MinMaxLen();
      minMaxLen1.set(3329, 3329);
      minMaxLen0.copy(minMaxLen1);
      assertFalse(minMaxLen1.equals((Object)minMaxLen0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      MinMaxLen minMaxLen1 = new MinMaxLen();
      minMaxLen1.set(0, 366);
      boolean boolean0 = minMaxLen1.equal(minMaxLen0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      MinMaxLen minMaxLen1 = new MinMaxLen();
      minMaxLen0.set((-3292), (-202));
      boolean boolean0 = minMaxLen0.equal(minMaxLen1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      minMaxLen0.set(Integer.MAX_VALUE, (-2057));
      boolean boolean0 = minMaxLen0.equal(minMaxLen0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      MinMaxLen minMaxLen1 = new MinMaxLen();
      int int0 = minMaxLen0.compareDistanceValue(minMaxLen1, 2806, 2806);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      int int0 = minMaxLen0.compareDistanceValue(minMaxLen0, 0, 527);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      int int0 = minMaxLen0.compareDistanceValue(minMaxLen0, 1756, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      minMaxLen0.max = 2358;
      int int0 = minMaxLen0.distanceValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      minMaxLen0.addLength((-3748));
      int int0 = minMaxLen0.distanceValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = MinMaxLen.distanceMultiply((-1), 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = MinMaxLen.distanceAdd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = MinMaxLen.distanceAdd((-1378), 0);
      assertEquals((-1378), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      // Undeclared exception!
      try { 
        minMaxLen0.equal((MinMaxLen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.MinMaxLen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      minMaxLen0.set(0, (-1));
      // Undeclared exception!
      try { 
        minMaxLen0.distanceValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 100
         //
         verifyException("org.joni.MinMaxLen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      // Undeclared exception!
      try { 
        minMaxLen0.copy((MinMaxLen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.MinMaxLen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      // Undeclared exception!
      try { 
        minMaxLen0.compareDistanceValue((MinMaxLen) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.MinMaxLen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      minMaxLen0.min = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        minMaxLen0.compareDistanceValue(minMaxLen0, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2147483647 out of bounds for length 100
         //
         verifyException("org.joni.MinMaxLen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      // Undeclared exception!
      try { 
        minMaxLen0.altMerge((MinMaxLen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.MinMaxLen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      // Undeclared exception!
      try { 
        minMaxLen0.add((MinMaxLen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joni.MinMaxLen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = MinMaxLen.distanceRangeToString(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals("inf-inf", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = MinMaxLen.distanceRangeToString((-979), 0);
      assertEquals("(-979)-(0)", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = MinMaxLen.distanceMultiply((-2147482612), 1746000);
      assertEquals(1808856000, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = MinMaxLen.distanceMultiply(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = MinMaxLen.distanceMultiply((-365), (-365));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      MinMaxLen minMaxLen1 = new MinMaxLen();
      minMaxLen1.max = 0;
      minMaxLen1.max = (-1966);
      minMaxLen0.add(minMaxLen1);
      assertFalse(minMaxLen0.equals((Object)minMaxLen1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = MinMaxLen.distanceAdd(Integer.MAX_VALUE, (-5042));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      MinMaxLen minMaxLen1 = new MinMaxLen();
      minMaxLen0.addLength(Integer.MAX_VALUE);
      minMaxLen1.altMerge(minMaxLen0);
      assertFalse(minMaxLen0.equals((Object)minMaxLen1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      minMaxLen0.altMerge(minMaxLen0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      MinMaxLen minMaxLen1 = new MinMaxLen();
      minMaxLen0.set(0, 1610);
      boolean boolean0 = minMaxLen1.equal(minMaxLen0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      MinMaxLen minMaxLen1 = new MinMaxLen();
      minMaxLen1.min = Integer.MAX_VALUE;
      boolean boolean0 = minMaxLen1.equal(minMaxLen0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      int int0 = minMaxLen0.compareDistanceValue(minMaxLen0, 737, 2806);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      int int0 = minMaxLen0.compareDistanceValue(minMaxLen0, (-1), 863);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      int int0 = minMaxLen0.compareDistanceValue(minMaxLen0, 0, (-1318));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      minMaxLen0.max = 100;
      int int0 = minMaxLen0.compareDistanceValue(minMaxLen0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      int int0 = minMaxLen0.compareDistanceValue(minMaxLen0, 85, Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MinMaxLen minMaxLen0 = new MinMaxLen();
      minMaxLen0.clear();
  }
}
