/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 08:22:45 GMT 2022
 */

package com.easyinnova.tiff.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.easyinnova.tiff.model.Tile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tile_ESTest extends Tile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tile tile0 = new Tile();
      tile0.setWidth(1);
      int int0 = tile0.getWidth();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tile tile0 = new Tile();
      tile0.setWidth((-1));
      int int0 = tile0.getWidth();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tile tile0 = new Tile();
      tile0.setPadding(1749, 1578);
      int int0 = tile0.getPaddingY();
      assertEquals(1578, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tile tile0 = new Tile();
      tile0.setPadding(1, (-3207));
      int int0 = tile0.getPaddingY();
      assertEquals((-3207), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tile tile0 = new Tile();
      tile0.setPadding((-1855), (-1380));
      int int0 = tile0.getPaddingX();
      assertEquals((-1380), tile0.getPaddingY());
      assertEquals((-1855), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tile tile0 = new Tile();
      tile0.setOffset(2034);
      int int0 = tile0.getOffset();
      assertEquals(2034, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tile tile0 = new Tile();
      tile0.setOffset((-4021));
      int int0 = tile0.getOffset();
      assertEquals((-4021), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tile tile0 = new Tile();
      tile0.setHeight(1);
      int int0 = tile0.getHeight();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tile tile0 = new Tile();
      tile0.setHeight((-4021));
      int int0 = tile0.getHeight();
      assertEquals((-4021), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tile tile0 = new Tile();
      int int0 = tile0.getPaddingY();
      assertEquals(0, tile0.getPaddingX());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tile tile0 = new Tile();
      tile0.setPadding(1749, 1578);
      int int0 = tile0.getPaddingX();
      assertEquals(1578, tile0.getPaddingY());
      assertEquals(1749, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tile tile0 = new Tile();
      int int0 = tile0.getPaddingX();
      assertEquals(0, tile0.getPaddingY());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tile tile0 = new Tile();
      int int0 = tile0.getHeight();
      assertEquals(0, tile0.getPaddingY());
      assertEquals(0, tile0.getPaddingX());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tile tile0 = new Tile();
      int int0 = tile0.getOffset();
      assertEquals(0, tile0.getPaddingX());
      assertEquals(0, int0);
      assertEquals(0, tile0.getPaddingY());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tile tile0 = new Tile();
      int int0 = tile0.getWidth();
      assertEquals(0, tile0.getPaddingX());
      assertEquals(0, int0);
      assertEquals(0, tile0.getPaddingY());
  }
}
