/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 08:15:35 GMT 2022
 */

package com.easyinnova.tiff.model.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.easyinnova.tiff.model.TagValue;
import com.easyinnova.tiff.model.types.abstractTiffType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class abstractTiffType_ESTest extends abstractTiffType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      abstractTiffType abstractTiffType0 = new abstractTiffType();
      abstractTiffType0.setTypeSize(1973);
      int int0 = abstractTiffType0.getTypeSize();
      assertEquals(1973, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      abstractTiffType abstractTiffType0 = new abstractTiffType();
      abstractTiffType0.setTypeSize((-2281));
      int int0 = abstractTiffType0.getTypeSize();
      assertEquals((-2281), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      abstractTiffType abstractTiffType0 = new abstractTiffType();
      try { 
        abstractTiffType0.toInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.easyinnova.tiff.model.types.abstractTiffType@0000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      abstractTiffType abstractTiffType0 = new abstractTiffType();
      TagValue tagValue0 = new TagValue((-1023), 0);
      abstractTiffType0.read(tagValue0);
      assertEquals(0, abstractTiffType0.getTypeSize());
      assertFalse(abstractTiffType0.isIFD());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      abstractTiffType abstractTiffType0 = new abstractTiffType();
      int int0 = abstractTiffType0.getTypeSize();
      assertEquals(0, int0);
      assertFalse(abstractTiffType0.isIFD());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      abstractTiffType abstractTiffType0 = new abstractTiffType();
      boolean boolean0 = abstractTiffType0.containsMetadata();
      assertFalse(boolean0);
      assertFalse(abstractTiffType0.isIFD());
      assertEquals(0, abstractTiffType0.getTypeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      abstractTiffType abstractTiffType0 = new abstractTiffType();
      abstractTiffType0.createMetadata();
      assertEquals(0, abstractTiffType0.getTypeSize());
      assertFalse(abstractTiffType0.isIFD());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      abstractTiffType abstractTiffType0 = new abstractTiffType();
      TagValue tagValue0 = new TagValue(0, 0);
      abstractTiffType0.read(tagValue0, "");
      assertEquals(0, abstractTiffType0.getTypeSize());
      assertFalse(abstractTiffType0.isIFD());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      abstractTiffType abstractTiffType0 = new abstractTiffType();
      assertFalse(abstractTiffType0.isIFD());
      
      abstractTiffType0.setIsIFD(true);
      boolean boolean0 = abstractTiffType0.isIFD();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      abstractTiffType abstractTiffType0 = new abstractTiffType();
      boolean boolean0 = abstractTiffType0.isIFD();
      assertFalse(boolean0);
      assertEquals(0, abstractTiffType0.getTypeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      abstractTiffType abstractTiffType0 = new abstractTiffType();
      byte byte0 = abstractTiffType0.toByte();
      assertFalse(abstractTiffType0.isIFD());
      assertEquals(0, abstractTiffType0.getTypeSize());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      abstractTiffType abstractTiffType0 = new abstractTiffType();
      // Undeclared exception!
      try { 
        abstractTiffType0.toUint();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.easyinnova.tiff.model.types.abstractTiffType@0000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
