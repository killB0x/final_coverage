/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 05:41:12 GMT 2022
 */

package com.ivanceras.keyword.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ivanceras.keyword.sql.KeywordsStatics;
import com.ivanceras.keyword.sql.SQL;
import com.ivanceras.keyword.sql.SQLStatics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLStatics_ESTest extends SQLStatics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQL sQL0 = SQLStatics.COUNT("I}^H3hy[<3");
      SQL sQL1 = SQLStatics.WITH_RECURSIVE("4!)[n");
      SQL sQL2 = SQLStatics.WITH((String) null, sQL1, "", sQL0, "M@", sQL1);
      assertNotSame(sQL1, sQL2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.NESTING();
      SQL sQL1 = KeywordsStatics.STORAGE();
      SQL sQL2 = SQLStatics.WITH("tOn,O 3yjs*", sQL0, "tOn,O 3yjs*", sQL1, "Rdo7W9r", sQL1);
      assertFalse(sQL2.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.NESTING();
      SQL sQL1 = SQLStatics.WITH("`5O{tX>uNJg,/oZ", sQL0, "", sQL0);
      assertFalse(sQL1.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLStatics.SELECT((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ivanceras.keyword.sql.SQL", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQL sQL0 = SQLStatics.SUM("qYFPN(.oIN");
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.WITH();
      SQL sQL1 = SQLStatics.COUNT(sQL0);
      assertFalse(sQL1.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLStatics sQLStatics0 = new SQLStatics();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      SQL sQL0 = SQLStatics.VALUE(object0);
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQL sQL0 = SQLStatics.ALTER_TABLE((String) null);
      SQL sQL1 = SQLStatics.SUM(sQL0);
      assertNotSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.GREATEST();
      SQL sQL1 = SQLStatics.DEGREES(sQL0);
      assertFalse(sQL1.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQL sQL0 = SQLStatics.TRUNCATE_TABLE((String) null);
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.SNAPSHOT();
      SQL sQL1 = SQLStatics.MIN(sQL0);
      assertFalse(sQL1.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQL sQL0 = SQLStatics.ALTER_TABLE((String) null);
      SQL sQL1 = SQLStatics.WITH_RECURSIVE("ZJG{<:[16QR", sQL0);
      assertFalse(sQL1.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQL sQL0 = SQLStatics.SELECT(stringArray0);
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.AS();
      SQL sQL1 = SQLStatics.UPPER(sQL0);
      assertNotSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQL sQL0 = SQLStatics.DROP_TABLE();
      SQL sQL1 = SQLStatics.ATAN(sQL0);
      assertFalse(sQL1.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.GREATEST();
      SQL sQL1 = SQLStatics.MAX(sQL0);
      assertNotSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQL sQL0 = SQLStatics.ALTER_TABLE((String) null);
      SQL sQL1 = SQLStatics.WITH("", sQL0);
      assertNotSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQL sQL0 = SQLStatics.DROP_TABLE("com.ivanceras.keyword.sql.SQLStatics");
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.WINDOW();
      SQL sQL1 = SQLStatics.ASIN(sQL0);
      assertFalse(sQL1.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.ISOLATION();
      SQL sQL1 = SQLStatics.RADIANS(sQL0);
      assertFalse(sQL1.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQL sQL0 = SQLStatics.FIELD((String) null);
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.TRANSLATION();
      SQL sQL1 = SQLStatics.TAN(sQL0);
      assertNotSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQL sQL0 = SQLStatics.UPPER("com.ivanceras.keyword.sql.SQLStatics");
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQL sQL0 = SQLStatics.DELETE_FROM("S=ogT_e-S^l:9g");
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQL sQL0 = SQLStatics.MAX("5fdq");
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.UNSIGNED();
      SQL sQL1 = SQLStatics.AVG(sQL0);
      assertFalse(sQL1.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQL sQL0 = SQLStatics.LOWER("com.ivanceras.keyword.sql.SQLStatics");
      SQL sQL1 = SQLStatics.DEGREES(sQL0);
      SQL sQL2 = SQLStatics.WITH("com.ivanceras.keyword.sql.SQLStatics", sQL1, "com.ivanceras.keyword.sql.SQLStatics", sQL0);
      assertFalse(sQL2.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.CHARACTER_SET_NAME();
      SQL sQL1 = SQLStatics.SIN(sQL0);
      assertFalse(sQL1.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQL sQL0 = SQLStatics.UPDATE((String) null);
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.DYNAMIC_FUNCTION_CODE();
      SQL sQL1 = SQLStatics.ACOS(sQL0);
      assertFalse(sQL1.equals((Object)sQL0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.DAY_HOUR();
      SQL sQL1 = SQLStatics.SELECT(sQL0);
      assertNotSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQL sQL0 = SQLStatics.LOWER((SQL) null);
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQL sQL0 = SQLStatics.AVG("");
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQL sQL0 = SQLStatics.MIN("com.ivanceras.keyword.sql.SQLStatics");
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQL sQL0 = SQLStatics.CREATE_TABLE("");
      assertNotNull(sQL0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQL sQL0 = KeywordsStatics.UPPER();
      SQL sQL1 = SQLStatics.COS(sQL0);
      assertNotSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQL sQL0 = SQLStatics.WITH("R=\\oJP&@~2s_g&");
      assertNotNull(sQL0);
  }
}
