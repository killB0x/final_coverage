/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 05:35:38 GMT 2022
 */

package com.ivanceras.keyword.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ivanceras.keyword.sql.Breakdown;
import com.ivanceras.keyword.sql.SQL;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSQL_ESTest extends BaseSQL_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      assertNotNull(sQL0);
      
      SQL sQL1 = new SQL();
      SQL sQL2 = sQL1.field(sQL0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      sQL0.build();
      sQL0.build((Breakdown) null, sQL2);
      sQL2.build();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = sQL0.field((SQL) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Breakdown breakdown0 = new Breakdown("kL]O>6,k<m#TtapAK", linkedList0);
      Breakdown breakdown1 = sQL0.build(breakdown0, sQL1);
      sQL0.build(breakdown1, sQL1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQL sQL0 = new SQL();
      sQL0.OVER();
      sQL0.REGR_INTERCEPT();
      SQL sQL1 = sQL0.STDOUT();
      sQL0.LOCK();
      Object object0 = new Object();
      sQL0.SET("", object0);
      SQL sQL2 = sQL0.SET("");
      SQL sQL3 = sQL0.chars("");
      SQL sQL4 = SQL.instance();
      sQL4.field(sQL3);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Breakdown breakdown0 = new Breakdown("", linkedList0);
      sQL2.build(breakdown0, sQL1);
      sQL0.build(breakdown0, sQL4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      Object object0 = new Object();
      SQL sQL1 = new SQL();
      Object object1 = new Object();
      SQL sQL2 = sQL0.GREATER_THAN_OR_EQUAL(object1);
      Breakdown breakdown0 = new Breakdown();
      sQL0.build(breakdown0, sQL1);
      sQL1.build(breakdown0, sQL2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      SQL sQL1 = SQL.instance();
      SQL sQL2 = sQL0.field(sQL1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Breakdown breakdown0 = new Breakdown("kL]O>6,k<m#TtapAK", linkedList0);
      Breakdown breakdown1 = sQL0.build(breakdown0, sQL1);
      sQL0.build(breakdown1, sQL2);
      sQL1.FIELD(sQL2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      SQL sQL1 = sQL0.SEQUENCES();
      sQL0.EXEC();
      SQL sQL2 = sQL0.ABS();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ao=}rFf";
      stringArray0[1] = "ao=}rFf";
      sQL1.FROM("ao=}rFf", stringArray0);
      SQL sQL3 = sQL0.table("ao=}rFf");
      SQL sQL4 = sQL1.OVERLAPS();
      sQL1.RIGHT_JOIN("ao=}rFf");
      sQL1.WRAPPER();
      sQL2.CROSS_JOIN("(~U");
      sQL0.INDEX("", "");
      sQL3.closeParen();
      sQL1.field(sQL4);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Breakdown breakdown0 = new Breakdown("", linkedList0);
      // Undeclared exception!
      sQL4.build(breakdown0, sQL1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = sQL0.tab();
      assertSame(sQL1, sQL0);
      
      SQL sQL2 = sQL1.table((String) null);
      sQL2.CASCADE();
      sQL2.OVERLAPS();
      Breakdown breakdown0 = sQL1.build();
      assertEquals("\t CASCADE OVERLAPS ", breakdown0.getSql());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = sQL0.UPPER("&KD`");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&KD`";
      stringArray0[1] = "&KD`";
      stringArray0[2] = "&KD`";
      stringArray0[3] = "&KD`";
      stringArray0[4] = "&KD`";
      SQL sQL2 = sQL0.GROUP_BY(stringArray0);
      SQL sQL3 = sQL2.INTO("FIELD");
      SQL sQL4 = sQL3.TABLESAMPLE();
      sQL1.ROUTINE_SCHEMA();
      SQL sQL5 = sQL2.WITH_RECURSIVE("OR");
      SQL sQL6 = sQL3.HIGH_PRIORITY();
      SQL sQL7 = sQL3.FROM(stringArray0);
      sQL7.PERCENTILE_DISC();
      SQL sQL8 = sQL2.COUNT(sQL1);
      sQL7.FILTER();
      SQL sQL9 = sQL0.INHERITS("&KD`");
      SQL sQL10 = sQL7.SET("D46yb^2!_0", (Object) "&KD`");
      sQL2.SET();
      sQL10.SET("");
      SQL sQL11 = sQL1.MULTIPLY();
      SQL sQL12 = sQL1.keyword("&KD`");
      sQL10.TO("D46yb^2!_0");
      sQL6.append(sQL5);
      sQL11.FROM("", stringArray0);
      sQL8.ON("&KD`");
      Object object0 = new Object();
      sQL9.EQUAL(object0);
      SQL sQL13 = SQL.instance();
      sQL11.LESS_THAN(sQL13);
      SQL sQL14 = sQL4.smartCommaFnField();
      assertSame(sQL14, sQL12);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQL sQL0 = new SQL();
      sQL0.OVER();
      SQL sQL1 = sQL0.REGR_INTERCEPT();
      SQL sQL2 = sQL0.STDOUT();
      SQL sQL3 = sQL0.LOCK();
      Object object0 = new Object();
      SQL sQL4 = sQL0.SET("", object0);
      sQL0.SET("");
      SQL sQL5 = sQL0.chars("");
      sQL4.SPECIFIC_NAME();
      SQL sQL6 = sQL0.tab();
      SQL sQL7 = sQL4.FIELD(sQL6);
      SQL sQL8 = sQL2.IF_NOT_EXISTS();
      sQL6.OR();
      SQL sQL9 = sQL2.UNION_ALL(sQL3);
      sQL7.FAMILY();
      sQL3.CREATE_TABLE("");
      sQL3.NATURAL();
      sQL0.COS(sQL7);
      sQL6.MAX(sQL7);
      sQL4.INTEGER();
      sQL2.RENAME_TO("");
      SQL sQL10 = sQL6.SEQUENCE();
      SQL sQL11 = sQL9.MIN(sQL4);
      String[] stringArray0 = new String[0];
      sQL0.TABLE("", stringArray0);
      sQL9.FULL_OUTER_JOIN("4T|@c?-q,wu");
      SQL sQL12 = sQL1.AND(sQL6);
      sQL10.SUM("");
      sQL5.ASIN(sQL11);
      sQL12.NOT_EQUAL();
      SQL sQL13 = sQL2.LESS_THAN_OR_EQUAL();
      sQL0.append(sQL8);
      SQL sQL14 = sQL6.TRUNCATE_TABLE("$VALUES");
      assertSame(sQL14, sQL13);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = SQL.instance();
      sQL0.UNION(sQL1);
      SQL sQL2 = SQL.instance();
      SQL sQL3 = sQL0.COLUMN_NAME();
      SQL sQL4 = sQL0.WITH_RECURSIVE("K", sQL2);
      SQL sQL5 = sQL3.ROLE();
      SQL sQL6 = sQL0.MIN(sQL4);
      SQL sQL7 = sQL3.MUMPS();
      sQL3.CRASH();
      sQL0.STRAIGHT_JOIN();
      sQL5.HAVING();
      SQL sQL8 = sQL4.UPPER("ROW");
      sQL8.LINK();
      sQL3.FROM(sQL8);
      sQL5.field(sQL0);
      SQL sQL9 = sQL6.TO("K");
      sQL2.MINUS();
      sQL9.ORDER_BY();
      sQL9.openParen();
      sQL7.openParen();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "K";
      stringArray0[1] = "ROW";
      stringArray0[2] = "q=h6";
      stringArray0[3] = "ROW";
      stringArray0[4] = "ROW";
      stringArray0[5] = "K";
      stringArray0[6] = "ROW";
      SQL sQL10 = sQL0.PRIMARY_KEY(stringArray0);
      assertSame(sQL10, sQL3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = sQL0.EQUAL_TO("DISTINCT");
      sQL0.ACCESSIBLE();
      SQL sQL2 = sQL0.FS();
      sQL0.AND("DISTINCT");
      sQL1.RETURNING("DISTINCT");
      SQL sQL3 = sQL1.SEQUENCES();
      SQL sQL4 = sQL1.COLLATION();
      SQL sQL5 = sQL1.LABEL();
      sQL5.MEMBER();
      sQL1.AVG(sQL2);
      sQL1.INHERITS("CLOSE_PAREN");
      sQL1.XMLFOREST();
      sQL5.DROP_TABLE("DISTINCT");
      sQL0.MEDIUMINT();
      SQL sQL6 = sQL4.FREEZE();
      sQL3.UNION_ALL(sQL1);
      sQL4.GREATER_THAN();
      sQL4.ln();
      SQL sQL7 = SQL.instance();
      sQL4.FN(sQL7);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "DISTINCT";
      stringArray0[1] = "";
      stringArray0[2] = "CLOSE_PAREN";
      stringArray0[3] = "CLOSE_PAREN";
      stringArray0[4] = "CLOSE_PAREN";
      stringArray0[5] = "CLOSE_PAREN";
      stringArray0[6] = "DISTINCT";
      stringArray0[7] = "DISTINCT";
      SQL sQL8 = sQL7.DISTINCT(stringArray0);
      assertNotSame(sQL8, sQL6);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Breakdown breakdown0 = sQL0.build();
      Breakdown breakdown1 = sQL0.build(breakdown0, sQL0);
      // Undeclared exception!
      try { 
        sQL0.build(breakdown1, (SQL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ivanceras.keyword.sql.BaseSQL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = sQL0.AVG("");
      SQL sQL2 = sQL1.FIELD("TINYTEXT");
      assertSame(sQL2, sQL1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = new SQL();
      SQL sQL2 = sQL1.field(sQL0);
      Breakdown breakdown0 = sQL2.build();
      assertEquals("", breakdown0.getSql());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQL sQL0 = new SQL();
      sQL0.tab();
      Breakdown breakdown0 = sQL0.build();
      assertEquals("\t ", breakdown0.getSql());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      SQL sQL1 = new SQL();
      sQL1.RECURSIVE();
      SQL sQL2 = sQL0.LESS_THAN(sQL1);
      sQL0.RETURNING();
      SQL sQL3 = SQL.instance();
      sQL3.XMLFOREST();
      sQL0.COBOL();
      sQL3.MATCH_SIMPLE();
      sQL0.field(sQL3);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Breakdown breakdown0 = new Breakdown("kL]O>6,k<m#TtapAK", linkedList0);
      sQL0.build(breakdown0, sQL2);
      assertEquals("kL]O>6,k<m#TtapAK< ( RECURSIVE ) RETURNING COBOL XMLFOREST MATCH SIMPLE ", breakdown0.getSql());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = sQL0.AT();
      SQL sQL2 = sQL0.SERVER();
      SQL sQL3 = sQL0.NOT_EQUAL_TO_FIELD("");
      SQL sQL4 = sQL1.LOCATION();
      sQL3.LOWER(sQL0);
      sQL3.LEFT_OUTER_JOIN("");
      SQL sQL5 = sQL2.LOCALTIME();
      SQL sQL6 = sQL2.ALTER_TABLE("");
      sQL3.SUBTYPE();
      SQL sQL7 = sQL5.LISTEN();
      sQL5.OLD();
      sQL2.DENSE_RANK();
      SQL sQL8 = sQL6.IS_NOT_NULL();
      sQL5.UNION_ALL(sQL1);
      sQL5.AUTHORIZATION();
      sQL3.HAVING("");
      sQL5.comma();
      SQL sQL9 = sQL7.SET("");
      Object object0 = new Object();
      sQL8.EQUAL_TO(object0);
      SQL sQL10 = sQL4.EQUAL_TO(sQL2);
      sQL10.WHERE("");
      SQL sQL11 = sQL9.SUM(")");
      assertSame(sQL11, sQL3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      SQL sQL1 = sQL0.SEQUENCES();
      sQL0.EXEC();
      SQL sQL2 = sQL0.ABS();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ao=}rFf";
      stringArray0[1] = "ao=}rFf";
      sQL1.FROM("ao=}rFf", stringArray0);
      SQL sQL3 = sQL0.table("ao=}rFf");
      SQL sQL4 = sQL1.OVERLAPS();
      sQL1.RIGHT_JOIN("ao=}rFf");
      sQL1.WRAPPER();
      sQL2.CROSS_JOIN("(~U");
      SQL sQL5 = sQL0.INDEX("", "");
      SQL sQL6 = sQL3.closeParen();
      sQL1.COUNT("\n");
      sQL2.NOT_EQUAL_TO_FIELD("ao=}rFf");
      sQL5.CREATE_TABLE((String) null);
      sQL5.ALTER_TABLE((String) null);
      sQL3.WITH("");
      sQL1.IN(sQL0);
      SQL sQL7 = sQL5.field(sQL6);
      assertSame(sQL7, sQL4);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      SQL sQL1 = SQL.instance();
      SQL sQL2 = sQL0.field(sQL1);
      String[] stringArray0 = new String[0];
      SQL sQL3 = sQL2.table((String) null);
      sQL2.OVERLAPS();
      SQL sQL4 = new SQL();
      sQL4.RIGHT_JOIN((String) null);
      SQL.instance();
      SQL sQL5 = sQL0.USING(stringArray0);
      assertSame(sQL5, sQL3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQL sQL0 = new SQL();
      sQL0.INCLUDING();
      SQL sQL1 = sQL0.DELAYED();
      sQL0.RETURNING("DATETIME_INTERVAL_PRECISION");
      sQL0.ln();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SQL sQL2 = sQL1.FROM("", stringArray0);
      assertSame(sQL0, sQL2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      SQL sQL1 = sQL0.EQUAL_TO_FIELD("TABLE");
      SQL sQL2 = sQL0.table("TABLE");
      assertSame(sQL2, sQL1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      SQL sQL1 = sQL0.table("[=");
      assertSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = sQL0.UPPER("&KD`");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&KD`";
      stringArray0[1] = "&KD`";
      stringArray0[2] = "&KD`";
      stringArray0[3] = "&KD`";
      stringArray0[4] = "&KD`";
      SQL sQL2 = sQL0.GROUP_BY(stringArray0);
      SQL sQL3 = sQL2.INTO("FIELD");
      sQL3.TABLESAMPLE();
      sQL1.ROUTINE_SCHEMA();
      SQL sQL4 = sQL2.WITH_RECURSIVE("OR");
      SQL sQL5 = sQL3.HIGH_PRIORITY();
      SQL sQL6 = sQL3.FROM(stringArray0);
      sQL6.PERCENTILE_DISC();
      SQL sQL7 = sQL2.COUNT(sQL1);
      SQL sQL8 = sQL0.INHERITS("&KD`");
      SQL sQL9 = sQL6.SET("D46yb^2!_0", (Object) "&KD`");
      sQL2.SET();
      sQL9.SET("");
      SQL sQL10 = sQL1.MULTIPLY();
      sQL1.keyword("&KD`");
      sQL9.TO("D46yb^2!_0");
      sQL5.append(sQL4);
      sQL10.FROM("", stringArray0);
      sQL7.ON("&KD`");
      Object object0 = new Object();
      SQL sQL11 = sQL8.EQUAL(object0);
      assertSame(sQL11, sQL5);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = new SQL();
      sQL0.append(sQL1);
      SQL sQL2 = sQL0.SCHEMA("SCHEMA_NAME");
      assertNotSame(sQL2, sQL1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      SQL sQL1 = sQL0.closeParen();
      SQL sQL2 = sQL1.FREE();
      SQL sQL3 = sQL1.EXISTS(sQL0);
      SQL sQL4 = sQL1.GREATER_THAN((Object) null);
      sQL4.CONFLICT();
      sQL3.XMLPI();
      sQL1.FRAME_ROW();
      SQL sQL5 = sQL3.COUNT("");
      SQL sQL6 = sQL1.ASEC(sQL4);
      sQL1.closeParen();
      sQL6.OFFSET(764);
      SQL sQL7 = sQL5.FN(sQL2);
      SQL sQL8 = sQL2.tab();
      SQL sQL9 = sQL8.RENAME_TO("QUOTE");
      assertNotSame(sQL9, sQL7);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      sQL0.RENAME_TO("ek");
      SQL sQL1 = sQL0.smartCommaFnField();
      assertSame(sQL1, sQL0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      SQL sQL1 = sQL0.INTO("");
      assertSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      SQL sQL1 = sQL0.DROP_TABLE();
      assertSame(sQL1, sQL0);
      
      SQL sQL2 = sQL0.NOT_IN(sQL1);
      assertSame(sQL1, sQL2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = sQL0.closeParen();
      assertSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = sQL0.ln();
      assertSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      SQL sQL1 = sQL0.comma();
      assertSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = sQL0.field(sQL0);
      assertSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQL sQL0 = SQL.instance();
      SQL sQL1 = sQL0.smartCommaFnField();
      assertSame(sQL0, sQL1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQL sQL0 = new SQL();
      SQL sQL1 = new SQL();
      SQL sQL2 = sQL0.LEAVE();
      sQL1.RESTART();
      sQL2.REGR_AVGX();
      SQL sQL3 = sQL0.MIN(sQL1);
      SQL sQL4 = sQL1.UNNEST();
      SQL sQL5 = sQL0.UNION(sQL1);
      SQL sQL6 = sQL5.OVER();
      sQL6.PROCEDURE();
      SQL sQL7 = sQL0.PERMISSION();
      SQL sQL8 = sQL2.TO(",");
      SQL sQL9 = sQL1.field(sQL4);
      sQL8.ATAN(sQL2);
      SQL sQL10 = sQL3.ATAN(sQL5);
      sQL3.NO();
      SQL sQL11 = sQL5.LEFT_JOIN(",");
      SQL sQL12 = sQL9.TRUNCATE_TABLE("CLOSE_PAREN");
      sQL1.SEC(sQL8);
      sQL10.FUNCTION("", sQL6);
      sQL12.INNER_JOIN("CLOSE_PAREN");
      sQL7.NOT_IN(sQL11);
      SQL sQL13 = sQL3.OFFSET(5);
      sQL2.EXCEPT_ALL(sQL12);
      sQL13.field(sQL4);
      sQL2.LEFT_JOIN("]$2bDf");
      sQL3.NOT_EQUAL();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]$2bDf";
      stringArray0[1] = "";
      stringArray0[2] = "]$2bDf";
      stringArray0[3] = ",";
      stringArray0[4] = "";
      SQL sQL14 = sQL12.ORDER_BY(stringArray0);
      assertSame(sQL14, sQL9);
  }
}
