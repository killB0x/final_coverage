/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:38:34 GMT 2022
 */

package me.marcosassuncao.servsim.profile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import me.marcosassuncao.servsim.profile.PartProfileEntry;
import me.marcosassuncao.servsim.profile.Profile;
import me.marcosassuncao.servsim.profile.ProfileEntry;
import me.marcosassuncao.servsim.profile.RangeList;
import me.marcosassuncao.servsim.profile.SingleProfile;
import me.marcosassuncao.servsim.profile.SingleProfileEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProfileEntry_ESTest extends ProfileEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(0L);
      boolean boolean0 = singleProfileEntry0.setTime(0L);
      assertEquals(1, singleProfileEntry0.getNumJobs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(0L);
      singleProfileEntry0.getTime();
      assertEquals(1, singleProfileEntry0.getNumJobs());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PartProfileEntry partProfileEntry0 = new PartProfileEntry(3479L, 0);
      long long0 = partProfileEntry0.getTime();
      assertEquals(3479L, long0);
      assertEquals(1, partProfileEntry0.getNumJobs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RangeList rangeList0 = new RangeList((-1), 1);
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry((-454), rangeList0);
      long long0 = singleProfileEntry0.getTime();
      assertEquals((-454L), long0);
      assertEquals(1, singleProfileEntry0.getNumJobs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(0L);
      singleProfileEntry0.getNumResources();
      assertEquals(1, singleProfileEntry0.getNumJobs());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RangeList rangeList0 = new RangeList(2146113205, 2146113205);
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(7978L, rangeList0);
      singleProfileEntry0.getNumResources();
      assertEquals(1, singleProfileEntry0.getNumJobs());
      assertEquals(7978L, singleProfileEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RangeList rangeList0 = new RangeList(867, 0);
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry((-2921L), rangeList0);
      singleProfileEntry0.getNumResources();
      assertEquals(1, singleProfileEntry0.getNumJobs());
      assertEquals((-2921L), singleProfileEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(0L);
      singleProfileEntry0.decreaseJob();
      int int0 = singleProfileEntry0.getNumJobs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry((-1258L));
      singleProfileEntry0.getAvailRanges();
      assertEquals((-1258L), singleProfileEntry0.getTime());
      assertEquals(1, singleProfileEntry0.getNumJobs());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(2529L);
      SingleProfile singleProfile0 = new SingleProfile();
      Profile.Entry profile_Entry0 = singleProfile0.new Entry(600L);
      RangeList rangeList0 = profile_Entry0.getAvailRanges();
      singleProfileEntry0.setAvailRanges(rangeList0);
      singleProfileEntry0.getAvailRanges();
      assertEquals(1, singleProfileEntry0.getNumJobs());
      assertEquals(2529L, singleProfileEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RangeList rangeList0 = new RangeList((-1073741823), (-1073741823));
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(0L, rangeList0);
      singleProfileEntry0.getAvailRanges();
      assertEquals(1, singleProfileEntry0.getNumJobs());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PartProfileEntry partProfileEntry0 = new PartProfileEntry((-1L), 0);
      partProfileEntry0.increaseJob();
      int int0 = partProfileEntry0.decreaseJob();
      assertEquals(1, partProfileEntry0.getNumJobs());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry((-1L));
      SingleProfileEntry singleProfileEntry1 = singleProfileEntry0.clone(2);
      int int0 = singleProfileEntry1.compareTo((ProfileEntry) singleProfileEntry0);
      assertEquals(1, int0);
      assertEquals(1, singleProfileEntry1.getNumJobs());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(564L);
      PartProfileEntry partProfileEntry0 = new PartProfileEntry(1601, 804);
      int int0 = singleProfileEntry0.compareTo((ProfileEntry) partProfileEntry0);
      assertEquals(1, partProfileEntry0.getNumJobs());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(0L);
      ProfileEntry profileEntry0 = singleProfileEntry0.clone(0);
      assertEquals(1, profileEntry0.getNumJobs());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PartProfileEntry partProfileEntry0 = new PartProfileEntry((-9223372036854775807L), 1388);
      ProfileEntry profileEntry0 = partProfileEntry0.clone((-9223372036854775807L));
      assertEquals((-9223372036854775807L), profileEntry0.getTime());
      assertEquals(1, profileEntry0.getNumJobs());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RangeList rangeList0 = new RangeList(867, 0);
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry((-2921L), rangeList0);
      ProfileEntry profileEntry0 = singleProfileEntry0.clone(229L);
      assertEquals(1, profileEntry0.getNumJobs());
      assertEquals(229L, profileEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PartProfileEntry partProfileEntry0 = new PartProfileEntry(119L, 67);
      // Undeclared exception!
      try { 
        partProfileEntry0.getAvailRanges();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.marcosassuncao.servsim.profile.PartProfileEntry$PrivResourceRangeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(0L);
      // Undeclared exception!
      try { 
        singleProfileEntry0.compareTo((ProfileEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.marcosassuncao.servsim.profile.ProfileEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry((-1258L));
      boolean boolean0 = singleProfileEntry0.setTime((-1258L));
      assertFalse(boolean0);
      assertEquals(1, singleProfileEntry0.getNumJobs());
      assertEquals((-1258L), singleProfileEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RangeList rangeList0 = new RangeList((-1), 1);
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry((-454), rangeList0);
      boolean boolean0 = singleProfileEntry0.setTime(600L);
      assertEquals(600L, singleProfileEntry0.getTime());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(0L);
      singleProfileEntry0.decreaseJob();
      int int0 = singleProfileEntry0.decreaseJob();
      assertEquals((-1), singleProfileEntry0.getNumJobs());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(0L);
      singleProfileEntry0.compareTo((ProfileEntry) singleProfileEntry0);
      assertEquals(1, singleProfileEntry0.getNumJobs());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SingleProfileEntry singleProfileEntry0 = new SingleProfileEntry(2092L);
      int int0 = singleProfileEntry0.getNumJobs();
      assertEquals(2092L, singleProfileEntry0.getTime());
      assertEquals(1, int0);
  }
}
