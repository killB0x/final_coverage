/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:17:17 GMT 2022
 */

package me.marcosassuncao.servsim.profile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import me.marcosassuncao.servsim.profile.Range;
import me.marcosassuncao.servsim.profile.RangeList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RangeList_ESTest extends RangeList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-3734), (-3734));
      RangeList rangeList0 = new RangeList((-3734), 3245);
      rangeList0.add(range0);
      rangeList0.selectResources(182);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(45, 123);
      RangeList rangeList0 = new RangeList(range0);
      rangeList0.add(range0);
      RangeList rangeList1 = rangeList0.clone();
      rangeList0.equals(rangeList1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RangeList rangeList0 = new RangeList(3236, 3244);
      Range range0 = new Range(45, 123);
      RangeList rangeList1 = new RangeList(range0);
      rangeList1.add(range0);
      rangeList0.addAll(rangeList1);
      rangeList0.remove(rangeList0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0, 0);
      RangeList rangeList0 = new RangeList(range0);
      RangeList rangeList1 = new RangeList();
      rangeList1.add(range0);
      rangeList1.remove(rangeList0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RangeList rangeList0 = new RangeList((-1258), 0);
      rangeList0.intersection(rangeList0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RangeList rangeList0 = new RangeList(3236, (-1184));
      rangeList0.addAll(rangeList0);
      rangeList0.sortRanges();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RangeList rangeList0 = new RangeList("{[45..123],[45..123],[3236..3244]}");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      rangeList0.size();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RangeList rangeList0 = new RangeList(1964, 1964);
      rangeList0.size();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RangeList rangeList0 = new RangeList((-1258), 0);
      RangeList rangeList1 = rangeList0.selectResources((-1258));
      rangeList1.getNumItems();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(0, 0);
      RangeList rangeList0 = new RangeList();
      rangeList0.add(range0);
      rangeList0.getLowestItem();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RangeList rangeList0 = new RangeList(817, 817);
      rangeList0.getLowestItem();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RangeList rangeList0 = new RangeList((-1258), 0);
      rangeList0.getHighestItem();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RangeList rangeList0 = new RangeList(949, 949);
      RangeList rangeList1 = rangeList0.clone();
      rangeList0.remove(rangeList1);
      rangeList0.equals(rangeList1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      // Undeclared exception!
      try { 
        rangeList0.remove((RangeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.marcosassuncao.servsim.profile.RangeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RangeList rangeList0 = new RangeList(8, 8);
      // Undeclared exception!
      try { 
        rangeList0.intersection((RangeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.marcosassuncao.servsim.profile.RangeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      // Undeclared exception!
      try { 
        rangeList0.equals((RangeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.marcosassuncao.servsim.profile.RangeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      // Undeclared exception!
      try { 
        rangeList0.addAll((RangeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.marcosassuncao.servsim.profile.RangeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      // Undeclared exception!
      try { 
        rangeList0.add((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.marcosassuncao.servsim.profile.RangeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RangeList rangeList0 = null;
      try {
        rangeList0 = new RangeList((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.marcosassuncao.servsim.profile.RangeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RangeList rangeList0 = null;
      try {
        rangeList0 = new RangeList((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range((-3734), (-3734));
      range0.setBegin(10210);
      Range range1 = new Range((-3734), 10210);
      RangeList rangeList0 = range1.difference(range0);
      rangeList0.add(range1);
      RangeList rangeList1 = new RangeList(range0);
      rangeList0.remove(rangeList1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-3734), (-3734));
      Range range1 = new Range((-3734), 10210);
      RangeList rangeList0 = range1.difference(range0);
      rangeList0.add(range1);
      RangeList rangeList1 = new RangeList(range0);
      rangeList0.remove(rangeList1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range((-3734), (-3734));
      range0.setBegin(10210);
      Range range1 = new Range((-3734), 10210);
      RangeList rangeList0 = range1.difference(range0);
      RangeList rangeList1 = new RangeList(range0);
      rangeList0.remove(rangeList1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range(396, 0);
      RangeList rangeList0 = new RangeList(range0);
      rangeList0.intersection(rangeList0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RangeList rangeList0 = new RangeList(3236, 3244);
      Range range0 = new Range(45, 123);
      RangeList rangeList1 = new RangeList(range0);
      rangeList0.addAll(rangeList1);
      rangeList0.sortRanges();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RangeList rangeList0 = new RangeList(3236, 3244);
      Range range0 = new Range(45, 123);
      RangeList rangeList1 = new RangeList(range0);
      rangeList0.remove(rangeList1);
      rangeList0.sortRanges();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RangeList rangeList0 = new RangeList(949, 949);
      rangeList0.remove(rangeList0);
      rangeList0.sortRanges();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0, 0);
      RangeList rangeList0 = new RangeList(range0);
      rangeList0.sortRanges();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      Range range0 = new Range(0, 0);
      rangeList0.add(range0);
      rangeList0.mergeRanges();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RangeList rangeList0 = new RangeList((-1258), 0);
      rangeList0.mergeRanges();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      rangeList0.getNumItems();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RangeList rangeList0 = new RangeList(949, 949);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      rangeList0.forEach(consumer0);
      rangeList0.getNumItems();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-3734), (-3734));
      range0.setBegin((-331));
      Range range1 = new Range((-3734), (-331));
      RangeList rangeList0 = range1.difference(range0);
      rangeList0.add(range1);
      rangeList0.getHighestItem();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      rangeList0.selectResources((-1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      rangeList0.selectResources(1123);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RangeList rangeList0 = new RangeList(1, 1);
      rangeList0.selectResources(1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      RangeList rangeList1 = new RangeList();
      rangeList0.equals(rangeList1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RangeList rangeList0 = new RangeList(496, 496);
      RangeList rangeList1 = new RangeList();
      rangeList0.equals(rangeList1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      rangeList0.equals(rangeList0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RangeList rangeList0 = new RangeList(902, 902);
      RangeList rangeList1 = new RangeList((-1199), (-1199));
      rangeList0.intersection(rangeList1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RangeList rangeList0 = new RangeList(915, 915);
      RangeList rangeList1 = new RangeList(4084, 4084);
      rangeList0.equals(rangeList1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RangeList rangeList0 = new RangeList((-3970), (-3970));
      RangeList rangeList1 = new RangeList();
      rangeList0.intersection(rangeList1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      rangeList0.intersection(rangeList0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range((-799), (-799));
      RangeList rangeList0 = new RangeList(range0);
      rangeList0.add(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      rangeList0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      Consumer<Range> consumer0 = (Consumer<Range>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      rangeList0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RangeList rangeList0 = new RangeList(0, 0);
      rangeList0.iterator();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(2255, 2255);
      RangeList rangeList0 = new RangeList(range0);
      rangeList0.add(range0);
      String string0 = rangeList0.toString();
      assertEquals("{[2255..2255],[2255..2255]}", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      String string0 = rangeList0.toString();
      assertEquals("{[]}", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RangeList rangeList0 = new RangeList(949, 949);
      int int0 = rangeList0.getHighestItem();
      assertEquals(949, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      int int0 = rangeList0.getHighestItem();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RangeList rangeList0 = new RangeList((-1089), (-1089));
      int int0 = rangeList0.getLowestItem();
      assertEquals((-1089), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      int int0 = rangeList0.getLowestItem();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = new Range(1, 0);
      RangeList rangeList0 = new RangeList(range0);
      rangeList0.add(range0);
      rangeList0.mergeRanges();
      assertEquals(1, rangeList0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RangeList rangeList0 = new RangeList(915, 915);
      RangeList rangeList1 = new RangeList("{[915..915]}");
      RangeList rangeList2 = rangeList0.intersection(rangeList1);
      assertEquals(1, rangeList2.size());
      assertNotSame(rangeList2, rangeList1);
      assertNotSame(rangeList2, rangeList0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RangeList rangeList0 = null;
      try {
        rangeList0 = new RangeList("Invalid list of resource ranges.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid list of resource ranges.
         //
         verifyException("me.marcosassuncao.servsim.profile.RangeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RangeList rangeList0 = null;
      try {
        rangeList0 = new RangeList("{[0\u0000\u00000]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      // Undeclared exception!
      try { 
        rangeList0.compareTo(rangeList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/ComparisonChain
         //
         verifyException("me.marcosassuncao.servsim.profile.RangeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      rangeList0.clear();
      assertEquals(0, rangeList0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RangeList rangeList0 = new RangeList();
      RangeList rangeList1 = rangeList0.clone();
      assertNotSame(rangeList1, rangeList0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RangeList rangeList0 = new RangeList((-2878), 946);
      boolean boolean0 = rangeList0.addAll(rangeList0);
      assertEquals(0, rangeList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = new Range((-799), (-799));
      RangeList rangeList0 = new RangeList(range0);
      rangeList0.add(range0);
      rangeList0.add(range0);
      rangeList0.mergeRanges();
      assertEquals(3, rangeList0.size());
  }
}
