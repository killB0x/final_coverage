/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:26:53 GMT 2022
 */

package me.marcosassuncao.servsim.profile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import me.marcosassuncao.servsim.profile.Range;
import me.marcosassuncao.servsim.profile.RangeList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range(4058, 4058);
      Range range1 = new Range(0, 4058);
      range1.setEnd(2719);
      range0.difference(range1);
      assertEquals(2719, range1.getEnd());
      assertEquals(1, range0.getNumItems());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(0, 2885);
      Range range1 = new Range(2885, 0);
      RangeList rangeList0 = range1.difference(range0);
      assertEquals(2886, range0.getNumItems());
      assertNull(rangeList0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(93, 93);
      range0.setBegin(1);
      range0.difference(range0);
      assertEquals(1, range0.getBegin());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0, 2885);
      Range range1 = new Range(2885, 0);
      RangeList rangeList0 = range0.difference(range1);
      assertEquals((-2884), range1.getNumItems());
      assertEquals(2, rangeList0.size());
      assertEquals(2886, range0.getNumItems());
      assertNotNull(rangeList0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range(93, 93);
      Range range1 = new Range(93, 93);
      range1.setBegin(1);
      boolean boolean0 = range0.intersect(range1);
      assertEquals(1, range1.getBegin());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-1645), (-1645));
      Range.PrivateIterator range_PrivateIterator0 = range0.new PrivateIterator();
      boolean boolean0 = range_PrivateIterator0.hasNext();
      assertTrue(boolean0);
      assertEquals(1, range0.getNumItems());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(0, 2885);
      range0.iterator();
      assertEquals(2886, range0.getNumItems());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(0, 0);
      Range range1 = range0.intersection(range0);
      assertNotNull(range1);
      assertEquals(0, range0.getEnd());
      assertEquals(1, range1.getNumItems());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0, 2885);
      Range range1 = range0.intersection(range0);
      assertEquals(2886, range1.getNumItems());
      assertNotNull(range1);
      assertEquals(2885, range1.getEnd());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-1), 93);
      Range range1 = new Range(93, 603);
      Range range2 = range0.intersection(range1);
      assertEquals(603, range1.getEnd());
      assertNotNull(range2);
      assertEquals(1, range2.getNumItems());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-2422), (-2422));
      Range range1 = range0.intersection(range0);
      assertEquals(1, range1.getNumItems());
      assertEquals((-2422), range0.getEnd());
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0, 0);
      assertEquals(0, range0.getBegin());
      
      range0.setBegin(1);
      int int0 = range0.getNumItems();
      assertEquals(1, range0.getBegin());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-2422), (-2422));
      range0.setBegin(2097);
      int int0 = range0.getNumItems();
      assertEquals(2097, range0.getBegin());
      assertEquals((-4518), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(4058, 4058);
      int int0 = range0.getEnd();
      assertEquals(1, range0.getNumItems());
      assertEquals(4058, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range((-1645), (-1645));
      int int0 = range0.getEnd();
      assertEquals((-1645), int0);
      assertEquals((-1645), range0.getBegin());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(93, 93);
      int int0 = range0.getBegin();
      assertEquals(93, int0);
      assertEquals(93, range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-2288), 0);
      int int0 = range0.getBegin();
      assertEquals(0, range0.getEnd());
      assertEquals((-2288), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(0, 0);
      Range range1 = new Range((-559), 1168);
      int int0 = range0.compareTo(range1);
      assertEquals(1, int0);
      assertEquals(1728, range1.getNumItems());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-1645), (-1645));
      Range range1 = new Range(0, (-3525));
      int int0 = range0.compareTo(range1);
      assertEquals((-1), int0);
      assertEquals((-3524), range1.getNumItems());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0, (-3525));
      Range range1 = range0.clone();
      assertEquals((-3525), range0.getEnd());
      assertEquals((-3524), range1.getNumItems());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(0, 0);
      Range range1 = range0.clone();
      assertEquals(1, range1.getNumItems());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range((-1645), (-1645));
      Range range1 = range0.clone();
      assertEquals(1, range1.getNumItems());
      assertEquals(1, range0.getNumItems());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range(0, 2885);
      Range range1 = range0.clone();
      assertEquals(2886, range1.getNumItems());
      assertEquals(2885, range0.getEnd());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(4058, 4058);
      // Undeclared exception!
      try { 
        range0.difference((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.marcosassuncao.servsim.profile.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range(1, 2304);
      // Undeclared exception!
      try { 
        range0.compareTo((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.marcosassuncao.servsim.profile.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(4058, 4058);
      int int0 = range0.getNumItems();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range(0, 0);
      int int0 = range0.getEnd();
      assertEquals(1, range0.getNumItems());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(0, 2885);
      Range.PrivateIterator range_PrivateIterator0 = range0.new PrivateIterator();
      range_PrivateIterator0.next();
      range0.setEnd(0);
      // Undeclared exception!
      try { 
        range_PrivateIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.marcosassuncao.servsim.profile.Range$PrivateIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0, 0);
      range0.setBegin(838);
      range0.difference(range0);
      assertEquals(838, range0.getBegin());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range((-2422), (-2422));
      Range range1 = new Range((-2011), (-2011));
      range0.setBegin(2097);
      range1.intersection(range0);
      assertEquals(2097, range0.getBegin());
      assertEquals((-4518), range0.getNumItems());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-1468), 1360);
      boolean boolean0 = range0.intersect((Range) null);
      assertFalse(boolean0);
      assertEquals(2829, range0.getNumItems());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-2422), (-2422));
      Range.PrivateIterator range_PrivateIterator0 = range0.new PrivateIterator();
      // Undeclared exception!
      try { 
        range_PrivateIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.marcosassuncao.servsim.profile.Range$PrivateIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(0, 0);
      int int0 = range0.getBegin();
      assertEquals(0, range0.getEnd());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(0, 0);
      String string0 = range0.toString();
      assertEquals("[0..0]", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(864, 863);
      Range range1 = range0.clone();
      assertEquals(864, range0.getBegin());
      
      range0.setBegin(863);
      range0.difference(range1);
      assertEquals(863, range0.getBegin());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(864, 863);
      int int0 = range0.compareTo(range0);
      assertEquals(0, range0.getNumItems());
      assertEquals(0, int0);
  }
}
