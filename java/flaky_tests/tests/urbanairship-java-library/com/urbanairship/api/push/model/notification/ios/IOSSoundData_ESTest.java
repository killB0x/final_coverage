/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 17:59:19 GMT 2022
 */

package com.urbanairship.api.push.model.notification.ios;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.urbanairship.api.push.model.notification.ios.IOSSoundData;
import java.util.Optional;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IOSSoundData_ESTest extends IOSSoundData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Optional<Boolean> optional0 = Optional.empty();
      Optional<String> optional1 = Optional.ofNullable("");
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional0, (Optional<Double>) null, optional1);
      Optional<Double> optional2 = iOSSoundData0.getVolume();
      assertNull(optional2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(558.0);
      Optional<Boolean> optional0 = Optional.empty();
      Optional<Double> optional1 = Optional.ofNullable(double0);
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional0, optional1, (Optional<String>) null);
      Optional<String> optional2 = iOSSoundData0.getName();
      assertNull(optional2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Optional<String> optional0 = Optional.of("");
      IOSSoundData iOSSoundData0 = new IOSSoundData((Optional<Boolean>) null, (Optional<Double>) null, optional0);
      Optional<Boolean> optional1 = iOSSoundData0.getCritical();
      assertNull(optional1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOSSoundData iOSSoundData0 = new IOSSoundData((Optional<Boolean>) null, (Optional<Double>) null, (Optional<String>) null);
      // Undeclared exception!
      try { 
        iOSSoundData0.shouldBeDict();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.urbanairship.api.push.model.notification.ios.IOSSoundData", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOSSoundData.Builder iOSSoundData_Builder0 = new IOSSoundData.Builder();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double((-3158.5));
      Optional<Double> optional0 = Optional.ofNullable(double0);
      Boolean boolean0 = Boolean.TRUE;
      Optional<Boolean> optional1 = Optional.ofNullable(boolean0);
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional1, optional0, (Optional<String>) null);
      boolean boolean1 = iOSSoundData0.shouldBeDict();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(0.0);
      Optional<Double> optional0 = Optional.ofNullable(double0);
      Boolean boolean0 = Boolean.FALSE;
      Optional<Boolean> optional1 = Optional.of(boolean0);
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional1, optional0, (Optional<String>) null);
      boolean boolean1 = iOSSoundData0.shouldBeDict();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Optional<Boolean> optional0 = Optional.empty();
      Double double0 = new Double(1658.778771229);
      Optional<Double> optional1 = Optional.ofNullable(double0);
      Optional<String> optional2 = Optional.of("0");
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional0, optional1, optional2);
      boolean boolean0 = iOSSoundData0.shouldBeDict();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Optional<Boolean> optional0 = Optional.empty();
      Double double0 = new Double(1658.778771229);
      Optional<Double> optional1 = Optional.ofNullable(double0);
      Optional<String> optional2 = Optional.of("0");
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional0, optional1, optional2);
      IOSSoundData iOSSoundData1 = new IOSSoundData(optional0, optional1, optional2);
      boolean boolean0 = iOSSoundData0.equals(iOSSoundData1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Optional<Boolean> optional0 = Optional.empty();
      Double double0 = new Double(1656.588472888406);
      Optional<Double> optional1 = Optional.ofNullable(double0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) optional0);
      Optional<Double> optional2 = optional1.filter(predicate0);
      Optional<String> optional3 = Optional.of("0");
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional0, optional2, optional3);
      IOSSoundData iOSSoundData1 = new IOSSoundData(optional0, optional1, optional3);
      boolean boolean0 = iOSSoundData0.equals(iOSSoundData1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Optional<Boolean> optional0 = Optional.ofNullable(boolean0);
      Optional<Double> optional1 = Optional.empty();
      IOSSoundData iOSSoundData0 = new IOSSoundData((Optional<Boolean>) null, (Optional<Double>) null, (Optional<String>) null);
      IOSSoundData iOSSoundData1 = new IOSSoundData(optional0, optional1, (Optional<String>) null);
      boolean boolean1 = iOSSoundData0.equals(iOSSoundData1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(0.0);
      Optional<Double> optional0 = Optional.ofNullable(double0);
      Boolean boolean0 = Boolean.FALSE;
      Optional<Boolean> optional1 = Optional.of(boolean0);
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional1, optional0, (Optional<String>) null);
      boolean boolean1 = iOSSoundData0.equals(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Optional<Boolean> optional0 = Optional.empty();
      Double double0 = new Double(1658.778771229);
      Optional<Double> optional1 = Optional.ofNullable(double0);
      Optional<String> optional2 = Optional.of("0");
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional0, optional1, optional2);
      boolean boolean0 = iOSSoundData0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Optional<Boolean> optional0 = Optional.ofNullable(boolean0);
      Optional<Double> optional1 = Optional.empty();
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional0, optional1, (Optional<String>) null);
      boolean boolean1 = iOSSoundData0.equals(iOSSoundData0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double(559.529092584843);
      Optional<Boolean> optional0 = Optional.empty();
      Optional<Double> optional1 = Optional.ofNullable(double0);
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional0, optional1, (Optional<String>) null);
      Optional<String> optional2 = Optional.ofNullable("BefXGQn&g K|&bw");
      IOSSoundData iOSSoundData1 = new IOSSoundData(optional0, optional1, optional2);
      boolean boolean0 = iOSSoundData0.equals(iOSSoundData1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOSSoundData.Builder iOSSoundData_Builder0 = IOSSoundData.newBuilder();
      // Undeclared exception!
      try { 
        iOSSoundData_Builder0.build();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.urbanairship.api.push.model.notification.ios.IOSSoundData$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOSSoundData.Builder iOSSoundData_Builder0 = IOSSoundData.newBuilder();
      Boolean boolean0 = Boolean.FALSE;
      IOSSoundData.Builder iOSSoundData_Builder1 = iOSSoundData_Builder0.setCritical(boolean0);
      assertSame(iOSSoundData_Builder0, iOSSoundData_Builder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOSSoundData.Builder iOSSoundData_Builder0 = IOSSoundData.newBuilder();
      IOSSoundData.Builder iOSSoundData_Builder1 = iOSSoundData_Builder0.setName("");
      assertSame(iOSSoundData_Builder0, iOSSoundData_Builder1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Optional<Boolean> optional0 = Optional.empty();
      Double double0 = new Double(1658.778771229);
      Optional<Double> optional1 = Optional.ofNullable(double0);
      Optional<String> optional2 = Optional.of("0");
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional0, optional1, optional2);
      Optional<Double> optional3 = iOSSoundData0.getVolume();
      assertSame(optional3, optional1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOSSoundData.Builder iOSSoundData_Builder0 = IOSSoundData.newBuilder();
      Double double0 = new Double(558.0);
      IOSSoundData.Builder iOSSoundData_Builder1 = iOSSoundData_Builder0.setVolume(double0);
      assertSame(iOSSoundData_Builder1, iOSSoundData_Builder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Optional<String> optional0 = Optional.ofNullable("Q<XHbxI}C2z{.wLw");
      IOSSoundData iOSSoundData0 = new IOSSoundData((Optional<Boolean>) null, (Optional<Double>) null, optional0);
      String string0 = iOSSoundData0.toString();
      assertEquals("IOSSoundData{critical=null, volume=null, name='Optional[Q<XHbxI}C2z{.wLw]'}", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double double0 = new Double(559.529092584843);
      Optional<Boolean> optional0 = Optional.empty();
      Optional<Double> optional1 = Optional.ofNullable(double0);
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional0, optional1, (Optional<String>) null);
      iOSSoundData0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Optional<Boolean> optional0 = Optional.empty();
      Double double0 = new Double(1658.778771229);
      Optional<Double> optional1 = Optional.ofNullable(double0);
      Optional<String> optional2 = Optional.of("0");
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional0, optional1, optional2);
      Optional<String> optional3 = iOSSoundData0.getName();
      assertSame(optional3, optional2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Optional<Boolean> optional0 = Optional.empty();
      Double double0 = new Double(1658.778771229);
      Optional<Double> optional1 = Optional.ofNullable(double0);
      Optional<String> optional2 = Optional.of("0");
      IOSSoundData iOSSoundData0 = new IOSSoundData(optional0, optional1, optional2);
      Optional<Boolean> optional3 = iOSSoundData0.getCritical();
      assertSame(optional3, optional0);
  }
}
