/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 18:07:08 GMT 2022
 */

package com.urbanairship.api.push.model.audience;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.urbanairship.api.push.model.audience.BasicSelector;
import com.urbanairship.api.push.model.audience.SelectorType;
import com.urbanairship.api.push.model.audience.SelectorVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicSelector_ESTest extends BasicSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicSelector.Builder basicSelector_Builder0 = BasicSelector.newBuilder();
      // Undeclared exception!
      try { 
        basicSelector_Builder0.build();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.urbanairship.api.push.model.audience.SelectorType
         //
         verifyException("com.urbanairship.api.push.model.audience.BasicSelector$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicSelector basicSelector0 = new BasicSelector((SelectorType) null);
      // Undeclared exception!
      try { 
        basicSelector0.accept((SelectorVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.urbanairship.api.push.model.audience.BasicSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicSelector basicSelector0 = new BasicSelector((SelectorType) null);
      basicSelector0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicSelector basicSelector0 = new BasicSelector((SelectorType) null);
      Object object0 = new Object();
      boolean boolean0 = basicSelector0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicSelector basicSelector0 = new BasicSelector((SelectorType) null);
      boolean boolean0 = basicSelector0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicSelector basicSelector0 = new BasicSelector((SelectorType) null);
      boolean boolean0 = basicSelector0.equals(basicSelector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicSelector basicSelector0 = new BasicSelector((SelectorType) null);
      BasicSelector basicSelector1 = new BasicSelector((SelectorType) null);
      boolean boolean0 = basicSelector0.equals(basicSelector1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SelectorVisitor selectorVisitor0 = mock(SelectorVisitor.class, new ViolatedAssumptionAnswer());
      BasicSelector basicSelector0 = new BasicSelector((SelectorType) null);
      basicSelector0.accept(selectorVisitor0);
      assertNull(basicSelector0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicSelector basicSelector0 = new BasicSelector((SelectorType) null);
      basicSelector0.getType();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicSelector basicSelector0 = new BasicSelector((SelectorType) null);
      // Undeclared exception!
      try { 
        basicSelector0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.urbanairship.api.push.model.audience.BasicSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicSelector basicSelector0 = new BasicSelector((SelectorType) null);
      // Undeclared exception!
      try { 
        basicSelector0.getApplicableDeviceTypes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.urbanairship.api.push.model.audience.BasicSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicSelector.Builder basicSelector_Builder0 = BasicSelector.newBuilder();
      BasicSelector.Builder basicSelector_Builder1 = basicSelector_Builder0.setType((SelectorType) null);
      assertSame(basicSelector_Builder0, basicSelector_Builder1);
  }
}
