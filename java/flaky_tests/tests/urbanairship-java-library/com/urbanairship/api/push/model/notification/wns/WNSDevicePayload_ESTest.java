/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 17:28:15 GMT 2022
 */

package com.urbanairship.api.push.model.notification.wns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.urbanairship.api.push.model.notification.wns.WNSDevicePayload;
import com.urbanairship.api.push.model.notification.wns.WNSPush;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WNSDevicePayload_ESTest extends WNSDevicePayload_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      WNSPush wNSPush0 = mock(WNSPush.class, new ViolatedAssumptionAnswer());
      WNSDevicePayload.Builder wNSDevicePayload_Builder1 = wNSDevicePayload_Builder0.setBody(wNSPush0);
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder1.build();
      wNSDevicePayload0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder0.build();
      wNSDevicePayload_Builder0.setAlert(" vOp$;");
      WNSDevicePayload wNSDevicePayload1 = wNSDevicePayload_Builder0.build();
      boolean boolean0 = wNSDevicePayload1.equals(wNSDevicePayload0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      WNSDevicePayload.Builder wNSDevicePayload_Builder1 = WNSDevicePayload.newBuilder();
      WNSPush wNSPush0 = mock(WNSPush.class, new ViolatedAssumptionAnswer());
      WNSDevicePayload.Builder wNSDevicePayload_Builder2 = wNSDevicePayload_Builder0.setBody(wNSPush0);
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder2.build();
      WNSDevicePayload wNSDevicePayload1 = wNSDevicePayload_Builder1.build();
      boolean boolean0 = wNSDevicePayload1.equals(wNSDevicePayload0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = wNSDevicePayload0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder0.build();
      boolean boolean0 = wNSDevicePayload0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder0.build();
      boolean boolean0 = wNSDevicePayload0.equals(wNSDevicePayload0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder0.build();
      WNSDevicePayload wNSDevicePayload1 = wNSDevicePayload_Builder0.build();
      boolean boolean0 = wNSDevicePayload0.equals(wNSDevicePayload1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      WNSPush wNSPush0 = mock(WNSPush.class, new ViolatedAssumptionAnswer());
      doReturn((WNSPush.Type) null).when(wNSPush0).getType();
      WNSDevicePayload.Builder wNSDevicePayload_Builder1 = wNSDevicePayload_Builder0.setBody(wNSPush0);
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder1.build();
      wNSDevicePayload0.getType();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder0.build();
      WNSPush.Type wNSPush_Type0 = wNSDevicePayload0.getType();
      assertEquals(WNSPush.Type.TOAST, wNSPush_Type0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      wNSDevicePayload_Builder0.setAlert("C:n#64rL");
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder0.build();
      wNSDevicePayload0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder0.build();
      Optional<WNSPush> optional0 = wNSDevicePayload0.getBody();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder0.build();
      // Undeclared exception!
      try { 
        wNSDevicePayload0.getDeviceType();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.urbanairship.api.push.model.DeviceType
         //
         verifyException("com.urbanairship.api.push.model.notification.wns.WNSDevicePayload", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WNSDevicePayload.Builder wNSDevicePayload_Builder0 = WNSDevicePayload.newBuilder();
      WNSDevicePayload wNSDevicePayload0 = wNSDevicePayload_Builder0.build();
      Optional<String> optional0 = wNSDevicePayload0.getAlert();
      assertNotNull(optional0);
  }
}
