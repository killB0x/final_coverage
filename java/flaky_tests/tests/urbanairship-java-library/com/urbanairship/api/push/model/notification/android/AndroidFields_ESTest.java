/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 17:53:36 GMT 2022
 */

package com.urbanairship.api.push.model.notification.android;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.urbanairship.api.push.model.notification.android.AndroidFields;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AndroidFields_ESTest extends AndroidFields_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = new AndroidFields.Builder();
      AndroidFields androidFields0 = androidFields_Builder0.build();
      AndroidFields androidFields1 = androidFields_Builder0.build();
      // Undeclared exception!
      try { 
        androidFields0.equals(androidFields1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Objects
         //
         verifyException("com.urbanairship.api.push.model.notification.android.AndroidFields", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = AndroidFields.newBuilder();
      AndroidFields androidFields0 = androidFields_Builder0.build();
      boolean boolean0 = androidFields0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = AndroidFields.newBuilder();
      AndroidFields androidFields0 = androidFields_Builder0.build();
      boolean boolean0 = androidFields0.equals(androidFields0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = AndroidFields.newBuilder();
      AndroidFields androidFields0 = androidFields_Builder0.build();
      boolean boolean0 = androidFields0.equals(androidFields_Builder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = new AndroidFields.Builder();
      AndroidFields.Builder androidFields_Builder1 = androidFields_Builder0.setAlert("");
      assertSame(androidFields_Builder0, androidFields_Builder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = AndroidFields.newBuilder();
      AndroidFields.Builder androidFields_Builder1 = androidFields_Builder0.setTitle("");
      assertSame(androidFields_Builder1, androidFields_Builder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = AndroidFields.newBuilder();
      AndroidFields.Builder androidFields_Builder1 = androidFields_Builder0.setIcon("Ih");
      assertSame(androidFields_Builder0, androidFields_Builder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = new AndroidFields.Builder();
      AndroidFields.Builder androidFields_Builder1 = androidFields_Builder0.setIconColor("");
      assertSame(androidFields_Builder1, androidFields_Builder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = new AndroidFields.Builder();
      AndroidFields.Builder androidFields_Builder1 = androidFields_Builder0.setSummary("");
      assertSame(androidFields_Builder0, androidFields_Builder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = AndroidFields.newBuilder();
      AndroidFields androidFields0 = androidFields_Builder0.build();
      // Undeclared exception!
      try { 
        androidFields0.hashCode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Objects
         //
         verifyException("com.urbanairship.api.push.model.notification.android.AndroidFields", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = new AndroidFields.Builder();
      AndroidFields androidFields0 = androidFields_Builder0.build();
      Optional<String> optional0 = androidFields0.getIcon();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = AndroidFields.newBuilder();
      AndroidFields androidFields0 = androidFields_Builder0.build();
      String string0 = androidFields0.toString();
      assertEquals("AndroidFields{alert=Optional.empty, icon=Optional.empty, iconColor=Optional.empty, summary=Optional.empty, title=Optional.empty}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = new AndroidFields.Builder();
      AndroidFields androidFields0 = androidFields_Builder0.build();
      Optional<String> optional0 = androidFields0.getIconColor();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = new AndroidFields.Builder();
      AndroidFields androidFields0 = androidFields_Builder0.build();
      Optional<String> optional0 = androidFields0.getSummary();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = AndroidFields.newBuilder();
      AndroidFields androidFields0 = androidFields_Builder0.build();
      Optional<String> optional0 = androidFields0.getTitle();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AndroidFields.Builder androidFields_Builder0 = AndroidFields.newBuilder();
      AndroidFields androidFields0 = androidFields_Builder0.build();
      Optional<String> optional0 = androidFields0.getAlert();
      assertNotNull(optional0);
  }
}
