/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 17:12:17 GMT 2022
 */

package com.urbanairship.api.push.model.notification.ios;

import org.junit.Test;
import static org.junit.Assert.*;
import com.urbanairship.api.push.model.notification.ios.Crop;
import java.math.BigDecimal;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Crop_ESTest extends Crop_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      crop_Builder0.setWidth(bigDecimal0);
      Crop crop0 = crop_Builder0.build();
      crop0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      crop_Builder0.setHeight(bigDecimal0);
      Crop crop0 = crop_Builder0.build();
      crop0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      BigDecimal bigDecimal0 = BigDecimal.valueOf(1L);
      crop_Builder0.setY(bigDecimal0);
      Crop crop0 = crop_Builder0.build();
      crop0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      crop_Builder0.setX(bigDecimal0);
      Crop crop0 = crop_Builder0.build();
      crop0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      Crop crop0 = crop_Builder0.build();
      crop_Builder0.setWidth(bigDecimal0);
      Crop crop1 = crop_Builder0.build();
      boolean boolean0 = crop1.equals(crop0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      Crop crop0 = crop_Builder0.build();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      crop_Builder0.setHeight(bigDecimal0);
      Crop crop1 = crop_Builder0.build();
      boolean boolean0 = crop0.equals(crop1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      BigDecimal bigDecimal0 = BigDecimal.valueOf(1L);
      Crop crop0 = crop_Builder0.build();
      Crop.Builder crop_Builder1 = crop_Builder0.setY(bigDecimal0);
      Crop crop1 = crop_Builder1.build();
      boolean boolean0 = crop0.equals(crop1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      Crop crop0 = crop_Builder0.build();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      crop_Builder0.setX(bigDecimal0);
      Crop crop1 = crop_Builder0.build();
      boolean boolean0 = crop1.equals(crop0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      Crop crop0 = crop_Builder0.build();
      boolean boolean0 = crop0.equals(crop_Builder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      Crop crop0 = crop_Builder0.build();
      boolean boolean0 = crop0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      Crop crop0 = crop_Builder0.build();
      boolean boolean0 = crop0.equals(crop0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      Crop crop0 = crop_Builder0.build();
      Crop crop1 = crop_Builder0.build();
      boolean boolean0 = crop1.equals(crop0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      Crop crop0 = crop_Builder0.build();
      String string0 = crop0.toString();
      assertEquals("Crop{x=Optional.empty, y=Optional.empty, height=Optional.empty, width=Optional.empty}", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      Crop crop0 = crop_Builder0.build();
      Optional<BigDecimal> optional0 = crop0.getHeight();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      Crop crop0 = crop_Builder0.build();
      Optional<BigDecimal> optional0 = crop0.getY();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      Crop crop0 = crop_Builder0.build();
      Optional<BigDecimal> optional0 = crop0.getX();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Crop.Builder crop_Builder0 = Crop.newBuilder();
      Crop crop0 = crop_Builder0.build();
      Optional<BigDecimal> optional0 = crop0.getWidth();
      assertNotNull(optional0);
  }
}
