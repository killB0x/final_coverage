/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 17:14:24 GMT 2022
 */

package com.urbanairship.api.push.model.audience;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.urbanairship.api.push.model.audience.BasicValueSelector;
import com.urbanairship.api.push.model.audience.SelectorType;
import com.urbanairship.api.push.model.audience.SelectorVisitor;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicValueSelector_ESTest extends BasicValueSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Optional<Map<String, String>> optional0 = Optional.ofNullable((Map<String, String>) hashMap0);
      hashMap0.put((String) null, "+du+5/H0zG&s}");
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "qBI?db)F^@yV2I!8k%", optional0);
      basicValueSelector0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicValueSelector.Builder basicValueSelector_Builder0 = BasicValueSelector.newBuilder();
      // Undeclared exception!
      try { 
        basicValueSelector_Builder0.build();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.urbanairship.api.push.model.audience.SelectorType
         //
         verifyException("com.urbanairship.api.push.model.audience.BasicValueSelector$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, (String) null, (Optional<Map<String, String>>) null);
      String string0 = basicValueSelector0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Optional<Map<String, String>> optional0 = Optional.empty();
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "M", optional0);
      String string0 = basicValueSelector0.getValue();
      assertEquals("M", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "sS7hwi6hR j_%ke=", (Optional<Map<String, String>>) null);
      Optional<Map<String, String>> optional0 = basicValueSelector0.getAttributes();
      assertNull(optional0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BasicValueSelector.Builder basicValueSelector_Builder0 = BasicValueSelector.newBuilder();
      // Undeclared exception!
      try { 
        basicValueSelector_Builder0.addAllAttributes(hashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/ImmutableMap
         //
         verifyException("com.urbanairship.api.push.model.audience.BasicValueSelector$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicValueSelector.Builder basicValueSelector_Builder0 = BasicValueSelector.newBuilder();
      // Undeclared exception!
      try { 
        basicValueSelector_Builder0.addAttribute("com.urbanairship.api.push.model.audience.BasicValueSelector", "");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/ImmutableMap
         //
         verifyException("com.urbanairship.api.push.model.audience.BasicValueSelector$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, (String) null, (Optional<Map<String, String>>) null);
      basicValueSelector0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "^]l`8Qx@^k<YRdF#", (Optional<Map<String, String>>) null);
      BasicValueSelector basicValueSelector1 = new BasicValueSelector((SelectorType) null, "^]l`8Qx@^k<YRdF#", (Optional<Map<String, String>>) null);
      boolean boolean0 = basicValueSelector1.equals(basicValueSelector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Optional<Map<String, String>> optional0 = Optional.empty();
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "", optional0);
      BasicValueSelector basicValueSelector1 = new BasicValueSelector((SelectorType) null, "", (Optional<Map<String, String>>) null);
      boolean boolean0 = basicValueSelector1.equals(basicValueSelector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Optional<Map<String, String>> optional0 = Optional.empty();
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "ntKg@][X'*3J5!", optional0);
      BasicValueSelector basicValueSelector1 = new BasicValueSelector((SelectorType) null, (String) null, optional0);
      boolean boolean0 = basicValueSelector1.equals(basicValueSelector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Optional<Map<String, String>> optional0 = Optional.of((Map<String, String>) hashMap0);
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "SEGMENT", optional0);
      BasicValueSelector basicValueSelector1 = new BasicValueSelector((SelectorType) null, "SEGMENT", optional0);
      boolean boolean0 = basicValueSelector0.equals(basicValueSelector1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Optional<Map<String, String>> optional0 = Optional.empty();
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, (String) null, optional0);
      BasicValueSelector basicValueSelector1 = new BasicValueSelector((SelectorType) null, (String) null, (Optional<Map<String, String>>) null);
      boolean boolean0 = basicValueSelector0.equals(basicValueSelector1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "com.urbanairship.api.push.model.audience.BasicValueSelector", (Optional<Map<String, String>>) null);
      BasicValueSelector basicValueSelector1 = new BasicValueSelector((SelectorType) null, "", (Optional<Map<String, String>>) null);
      boolean boolean0 = basicValueSelector0.equals(basicValueSelector1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Optional<Map<String, String>> optional0 = Optional.empty();
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "Zq*.<G{+ek5FGm", optional0);
      boolean boolean0 = basicValueSelector0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "^]l`8Qx@^k<YRdF#", (Optional<Map<String, String>>) null);
      boolean boolean0 = basicValueSelector0.equals(basicValueSelector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Optional<Map<String, String>> optional0 = Optional.ofNullable((Map<String, String>) hashMap0);
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "XvbRZWJ", optional0);
      Object object0 = new Object();
      boolean boolean0 = basicValueSelector0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicValueSelector.Builder basicValueSelector_Builder0 = BasicValueSelector.newBuilder();
      BasicValueSelector.Builder basicValueSelector_Builder1 = basicValueSelector_Builder0.setValue("^]l`8Qx@^k<YRdF#");
      assertSame(basicValueSelector_Builder0, basicValueSelector_Builder1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Optional<Map<String, String>> optional0 = Optional.empty();
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "{ \"exception\" : \"", optional0);
      // Undeclared exception!
      try { 
        basicValueSelector0.getApplicableDeviceTypes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.urbanairship.api.push.model.audience.BasicValueSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Optional<Map<String, String>> optional0 = Optional.empty();
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "", optional0);
      // Undeclared exception!
      try { 
        basicValueSelector0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.urbanairship.api.push.model.audience.BasicValueSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Optional<Map<String, String>> optional0 = Optional.ofNullable((Map<String, String>) hashMap0);
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "Logical operators must have an array of one or more children.", optional0);
      SelectorVisitor selectorVisitor0 = mock(SelectorVisitor.class, new ViolatedAssumptionAnswer());
      basicValueSelector0.accept(selectorVisitor0);
      assertNull(basicValueSelector0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicValueSelector.Builder basicValueSelector_Builder0 = BasicValueSelector.newBuilder();
      BasicValueSelector.Builder basicValueSelector_Builder1 = basicValueSelector_Builder0.setType((SelectorType) null);
      assertSame(basicValueSelector_Builder1, basicValueSelector_Builder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Optional<Map<String, String>> optional0 = Optional.empty();
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "", optional0);
      basicValueSelector0.getType();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Optional<Map<String, String>> optional0 = Optional.empty();
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "", optional0);
      String string0 = basicValueSelector0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Optional<Map<String, String>> optional0 = Optional.empty();
      BasicValueSelector basicValueSelector0 = new BasicValueSelector((SelectorType) null, "uzuQ%Q!", optional0);
      Optional<Map<String, String>> optional1 = basicValueSelector0.getAttributes();
      assertSame(optional1, optional0);
  }
}
