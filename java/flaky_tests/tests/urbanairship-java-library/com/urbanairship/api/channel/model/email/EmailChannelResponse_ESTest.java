/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 18:05:52 GMT 2022
 */

package com.urbanairship.api.channel.model.email;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.urbanairship.api.channel.model.email.EmailChannelResponse;
import com.urbanairship.api.common.model.ErrorDetails;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EmailChannelResponse_ESTest extends EmailChannelResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      EmailChannelResponse emailChannelResponse0 = emailChannelResponse_Builder0.build();
      EmailChannelResponse emailChannelResponse1 = emailChannelResponse_Builder0.build();
      // Undeclared exception!
      try { 
        emailChannelResponse0.equals(emailChannelResponse1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Objects
         //
         verifyException("com.urbanairship.api.channel.model.email.EmailChannelResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      EmailChannelResponse emailChannelResponse0 = emailChannelResponse_Builder0.build();
      boolean boolean0 = emailChannelResponse0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      EmailChannelResponse emailChannelResponse0 = emailChannelResponse_Builder0.build();
      boolean boolean0 = emailChannelResponse0.equals(emailChannelResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      EmailChannelResponse emailChannelResponse0 = emailChannelResponse_Builder0.build();
      boolean boolean0 = emailChannelResponse0.equals(emailChannelResponse_Builder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      ErrorDetails errorDetails0 = new ErrorDetails("O9!ZX", "O9!ZX");
      EmailChannelResponse.Builder emailChannelResponse_Builder1 = emailChannelResponse_Builder0.setErrorDetails(errorDetails0);
      assertSame(emailChannelResponse_Builder0, emailChannelResponse_Builder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      EmailChannelResponse.Builder emailChannelResponse_Builder1 = emailChannelResponse_Builder0.setError("x");
      assertSame(emailChannelResponse_Builder1, emailChannelResponse_Builder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      emailChannelResponse_Builder0.setOk(true);
      EmailChannelResponse emailChannelResponse0 = emailChannelResponse_Builder0.build();
      boolean boolean0 = emailChannelResponse0.getOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      EmailChannelResponse.Builder emailChannelResponse_Builder1 = emailChannelResponse_Builder0.setChannelId("{ \"exception\" : \"");
      assertSame(emailChannelResponse_Builder1, emailChannelResponse_Builder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      EmailChannelResponse emailChannelResponse0 = emailChannelResponse_Builder0.build();
      // Undeclared exception!
      try { 
        emailChannelResponse0.hashCode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Objects
         //
         verifyException("com.urbanairship.api.channel.model.email.EmailChannelResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      EmailChannelResponse emailChannelResponse0 = emailChannelResponse_Builder0.build();
      Optional<ErrorDetails> optional0 = emailChannelResponse0.getErrorDetails();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      EmailChannelResponse emailChannelResponse0 = emailChannelResponse_Builder0.build();
      String string0 = emailChannelResponse0.toString();
      assertEquals("EmailChannelResponse{ok=false, channelId=Optional.empty, error=Optional.empty, errorDetails=Optional.empty}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      EmailChannelResponse emailChannelResponse0 = emailChannelResponse_Builder0.build();
      Optional<String> optional0 = emailChannelResponse0.getError();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      EmailChannelResponse emailChannelResponse0 = emailChannelResponse_Builder0.build();
      boolean boolean0 = emailChannelResponse0.getOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmailChannelResponse.Builder emailChannelResponse_Builder0 = EmailChannelResponse.newBuilder();
      EmailChannelResponse emailChannelResponse0 = emailChannelResponse_Builder0.build();
      Optional<String> optional0 = emailChannelResponse0.getChannelId();
      assertNotNull(optional0);
  }
}
