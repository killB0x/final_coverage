/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 18:08:25 GMT 2022
 */

package com.urbanairship.api.channel.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.urbanairship.api.channel.model.OpenChannelResponse;
import com.urbanairship.api.common.model.ErrorDetails;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenChannelResponse_ESTest extends OpenChannelResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = OpenChannelResponse.newBuilder();
      openChannelResponse_Builder0.setOk(true);
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder0.build();
      boolean boolean0 = openChannelResponse0.getOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = OpenChannelResponse.newBuilder();
      OpenChannelResponse.Builder openChannelResponse_Builder1 = openChannelResponse_Builder0.setChannelId("P!Rm}.");
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder1.build();
      String string0 = openChannelResponse0.getChannelId();
      assertEquals("P!Rm}.", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = OpenChannelResponse.newBuilder();
      OpenChannelResponse.Builder openChannelResponse_Builder1 = openChannelResponse_Builder0.setChannelId("");
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder1.build();
      String string0 = openChannelResponse0.getChannelId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = new OpenChannelResponse.Builder();
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = openChannelResponse0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = OpenChannelResponse.newBuilder();
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder0.build();
      boolean boolean0 = openChannelResponse0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = OpenChannelResponse.newBuilder();
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder0.build();
      boolean boolean0 = openChannelResponse0.equals(openChannelResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = new OpenChannelResponse.Builder();
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder0.build();
      OpenChannelResponse openChannelResponse1 = openChannelResponse_Builder0.build();
      // Undeclared exception!
      try { 
        openChannelResponse0.equals(openChannelResponse1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Objects
         //
         verifyException("com.urbanairship.api.channel.model.OpenChannelResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = new OpenChannelResponse.Builder();
      OpenChannelResponse.Builder openChannelResponse_Builder1 = openChannelResponse_Builder0.setOk(true);
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder1.build();
      assertTrue(openChannelResponse0.getOk());
      
      OpenChannelResponse.Builder openChannelResponse_Builder2 = OpenChannelResponse.newBuilder();
      OpenChannelResponse openChannelResponse1 = openChannelResponse_Builder2.build();
      boolean boolean0 = openChannelResponse1.equals(openChannelResponse0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = new OpenChannelResponse.Builder();
      ErrorDetails errorDetails0 = new ErrorDetails("e6H:;", "0S");
      OpenChannelResponse.Builder openChannelResponse_Builder1 = openChannelResponse_Builder0.setErrorDetails(errorDetails0);
      assertSame(openChannelResponse_Builder0, openChannelResponse_Builder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = OpenChannelResponse.newBuilder();
      OpenChannelResponse.Builder openChannelResponse_Builder1 = openChannelResponse_Builder0.setError((String) null);
      assertSame(openChannelResponse_Builder1, openChannelResponse_Builder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = new OpenChannelResponse.Builder();
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder0.build();
      String string0 = openChannelResponse0.toString();
      assertEquals("OpenChannelResponse{ok=false, channelId='null, error=Optional.empty, errorDetails=Optional.empty}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = new OpenChannelResponse.Builder();
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder0.build();
      Optional<String> optional0 = openChannelResponse0.getError();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = new OpenChannelResponse.Builder();
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder0.build();
      boolean boolean0 = openChannelResponse0.getOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = OpenChannelResponse.newBuilder();
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder0.build();
      Optional<ErrorDetails> optional0 = openChannelResponse0.getErrorDetails();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = OpenChannelResponse.newBuilder();
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder0.build();
      // Undeclared exception!
      try { 
        openChannelResponse0.hashCode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Objects
         //
         verifyException("com.urbanairship.api.channel.model.OpenChannelResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OpenChannelResponse.Builder openChannelResponse_Builder0 = new OpenChannelResponse.Builder();
      OpenChannelResponse openChannelResponse0 = openChannelResponse_Builder0.build();
      String string0 = openChannelResponse0.getChannelId();
      assertNull(string0);
  }
}
