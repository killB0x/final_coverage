/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 19:33:44 GMT 2022
 */

package com.urbanairship.api.channel.model.subscriptionlist;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.urbanairship.api.channel.model.subscriptionlist.SubscriptionList;
import com.urbanairship.api.channel.model.subscriptionlist.SubscriptionListAction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubscriptionList_ESTest extends SubscriptionList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SubscriptionList.Builder subscriptionList_Builder0 = new SubscriptionList.Builder();
      // Undeclared exception!
      try { 
        subscriptionList_Builder0.build();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.urbanairship.api.channel.model.subscriptionlist.SubscriptionList$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SubscriptionList.Builder subscriptionList_Builder0 = new SubscriptionList.Builder();
      SubscriptionList.Builder subscriptionList_Builder1 = subscriptionList_Builder0.setListId("Action must be set.");
      assertSame(subscriptionList_Builder1, subscriptionList_Builder0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SubscriptionList.Builder subscriptionList_Builder0 = new SubscriptionList.Builder();
      SubscriptionListAction subscriptionListAction0 = SubscriptionListAction.UNSUBSCRIBE;
      SubscriptionList.Builder subscriptionList_Builder1 = subscriptionList_Builder0.setAction(subscriptionListAction0);
      assertSame(subscriptionList_Builder1, subscriptionList_Builder0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SubscriptionList.Builder subscriptionList_Builder0 = SubscriptionList.newBuilder();
      assertNotNull(subscriptionList_Builder0);
  }
}
