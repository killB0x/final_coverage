/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 18:46:44 GMT 2022
 */

package com.urbanairship.api.channel.model.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.urbanairship.api.channel.model.web.Subscription;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subscription_ESTest extends Subscription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Subscription.Builder subscription_Builder0 = Subscription.newBuilder();
      subscription_Builder0.setP256dh("ABU&r!5w>21;}79");
      Subscription subscription0 = subscription_Builder0.build();
      assertNotNull(subscription0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Subscription.Builder subscription_Builder0 = Subscription.newBuilder();
      Subscription subscription0 = subscription_Builder0.build();
      Subscription subscription1 = subscription_Builder0.build();
      // Undeclared exception!
      try { 
        subscription0.equals(subscription1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Objects
         //
         verifyException("com.urbanairship.api.channel.model.web.Subscription", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Subscription.Builder subscription_Builder0 = Subscription.newBuilder();
      Subscription subscription0 = subscription_Builder0.build();
      boolean boolean0 = subscription0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Subscription.Builder subscription_Builder0 = Subscription.newBuilder();
      Subscription subscription0 = subscription_Builder0.build();
      boolean boolean0 = subscription0.equals(subscription0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Subscription.Builder subscription_Builder0 = Subscription.newBuilder();
      Subscription.Builder subscription_Builder1 = subscription_Builder0.setAuth("o");
      assertSame(subscription_Builder0, subscription_Builder1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Subscription.Builder subscription_Builder0 = Subscription.newBuilder();
      Subscription subscription0 = subscription_Builder0.build();
      Optional<String> optional0 = subscription0.getP256dh();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Subscription.Builder subscription_Builder0 = Subscription.newBuilder();
      Subscription subscription0 = subscription_Builder0.build();
      // Undeclared exception!
      try { 
        subscription0.hashCode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Objects
         //
         verifyException("com.urbanairship.api.channel.model.web.Subscription", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Subscription.Builder subscription_Builder0 = Subscription.newBuilder();
      Subscription subscription0 = subscription_Builder0.build();
      Optional<String> optional0 = subscription0.getAuth();
      boolean boolean0 = subscription0.equals(optional0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Subscription.Builder subscription_Builder0 = Subscription.newBuilder();
      Subscription subscription0 = subscription_Builder0.build();
      String string0 = subscription0.toString();
      assertEquals("Subscription{p256dh=Optional.empty, auth=Optional.empty}", string0);
  }
}
