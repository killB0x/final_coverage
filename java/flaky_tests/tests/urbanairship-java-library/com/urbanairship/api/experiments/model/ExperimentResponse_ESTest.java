/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 17:40:09 GMT 2022
 */

package com.urbanairship.api.experiments.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.urbanairship.api.common.model.ErrorDetails;
import com.urbanairship.api.experiments.model.ExperimentResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExperimentResponse_ESTest extends ExperimentResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      experimentResponse_Builder0.setError("com.urbanairship.api.common.model.ErrorDetails");
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      assertFalse(experimentResponse0.getOk());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      experimentResponse_Builder0.setExperimentId("}|%|WEsbY|_");
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      assertFalse(experimentResponse0.getOk());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      experimentResponse_Builder0.setOperationId("B;5!yk!+\\");
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      assertFalse(experimentResponse0.getOk());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      ExperimentResponse experimentResponse1 = experimentResponse_Builder0.build();
      // Undeclared exception!
      try { 
        experimentResponse0.equals(experimentResponse1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Objects
         //
         verifyException("com.urbanairship.api.experiments.model.ExperimentResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      boolean boolean0 = experimentResponse0.equals((Object) null);
      assertFalse(experimentResponse0.getOk());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      boolean boolean0 = experimentResponse0.equals(experimentResponse0);
      assertFalse(experimentResponse0.getOk());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      boolean boolean0 = experimentResponse0.equals(experimentResponse_Builder0);
      assertFalse(experimentResponse0.getOk());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ErrorDetails errorDetails0 = new ErrorDetails(", error=", "'s]2!1,_A@c;xT|Ai");
      ExperimentResponse.Builder experimentResponse_Builder1 = experimentResponse_Builder0.setErrorDetails(errorDetails0);
      assertSame(experimentResponse_Builder0, experimentResponse_Builder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse.Builder experimentResponse_Builder1 = experimentResponse_Builder0.setPushId("");
      assertSame(experimentResponse_Builder1, experimentResponse_Builder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      experimentResponse_Builder0.setOk(true);
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      boolean boolean0 = experimentResponse0.getOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      experimentResponse0.getErrorDetails();
      assertFalse(experimentResponse0.getOk());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      boolean boolean0 = experimentResponse0.getOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      experimentResponse0.getError();
      assertFalse(experimentResponse0.getOk());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      experimentResponse0.getPushId();
      assertFalse(experimentResponse0.getOk());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      // Undeclared exception!
      try { 
        experimentResponse0.hashCode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Objects
         //
         verifyException("com.urbanairship.api.experiments.model.ExperimentResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      experimentResponse0.getOperationId();
      assertFalse(experimentResponse0.getOk());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      experimentResponse0.getExperimentId();
      assertFalse(experimentResponse0.getOk());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExperimentResponse.Builder experimentResponse_Builder0 = ExperimentResponse.newBuilder();
      ExperimentResponse experimentResponse0 = experimentResponse_Builder0.build();
      String string0 = experimentResponse0.toString();
      assertEquals("ExperimentResponse{ok=false, operationId=Optional.empty, experimentId=Optional.empty, pushId=Optional.empty, error=Optional.empty, errorDetails=Optional.empty}", string0);
  }
}
