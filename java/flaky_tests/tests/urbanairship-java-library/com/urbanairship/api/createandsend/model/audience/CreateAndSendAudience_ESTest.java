/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 19:03:42 GMT 2022
 */

package com.urbanairship.api.createandsend.model.audience;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.urbanairship.api.createandsend.model.audience.CreateAndSendAudience;
import com.urbanairship.api.createandsend.model.audience.email.EmailChannels;
import com.urbanairship.api.createandsend.model.audience.sms.SmsChannels;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreateAndSendAudience_ESTest extends CreateAndSendAudience_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EmailChannels emailChannels0 = mock(EmailChannels.class, new ViolatedAssumptionAnswer());
      CreateAndSendAudience createAndSendAudience0 = new CreateAndSendAudience(emailChannels0);
      Optional<SmsChannels> optional0 = createAndSendAudience0.getSmsChannels();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EmailChannels emailChannels0 = mock(EmailChannels.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(emailChannels0).toString();
      CreateAndSendAudience createAndSendAudience0 = new CreateAndSendAudience(emailChannels0);
      Optional<EmailChannels> optional0 = createAndSendAudience0.getEmailChannels();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EmailChannels emailChannels0 = mock(EmailChannels.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(emailChannels0).toString();
      CreateAndSendAudience createAndSendAudience0 = new CreateAndSendAudience(emailChannels0);
      EmailChannels emailChannels1 = mock(EmailChannels.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(emailChannels1).toString();
      CreateAndSendAudience createAndSendAudience1 = new CreateAndSendAudience(emailChannels1);
      boolean boolean0 = createAndSendAudience1.equals(createAndSendAudience0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EmailChannels emailChannels0 = mock(EmailChannels.class, new ViolatedAssumptionAnswer());
      CreateAndSendAudience createAndSendAudience0 = new CreateAndSendAudience(emailChannels0);
      Object object0 = new Object();
      boolean boolean0 = createAndSendAudience0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CreateAndSendAudience createAndSendAudience0 = new CreateAndSendAudience((EmailChannels) null);
      boolean boolean0 = createAndSendAudience0.equals(createAndSendAudience0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EmailChannels emailChannels0 = mock(EmailChannels.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(emailChannels0).toString();
      CreateAndSendAudience createAndSendAudience0 = new CreateAndSendAudience(emailChannels0);
      createAndSendAudience0.hashCode();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EmailChannels emailChannels0 = mock(EmailChannels.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(emailChannels0).toString();
      CreateAndSendAudience createAndSendAudience0 = new CreateAndSendAudience(emailChannels0);
      String string0 = createAndSendAudience0.toString();
      assertEquals("CreateAndSendAudience{emailChannels=Optional[null], smsChannels=Optional.empty}", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CreateAndSendAudience createAndSendAudience0 = new CreateAndSendAudience((EmailChannels) null);
      CreateAndSendAudience createAndSendAudience1 = new CreateAndSendAudience((EmailChannels) null);
      boolean boolean0 = createAndSendAudience0.equals(createAndSendAudience1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CreateAndSendAudience createAndSendAudience0 = new CreateAndSendAudience((SmsChannels) null);
  }
}
