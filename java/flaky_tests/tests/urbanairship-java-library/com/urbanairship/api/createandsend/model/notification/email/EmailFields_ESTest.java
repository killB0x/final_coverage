/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 18:52:28 GMT 2022
 */

package com.urbanairship.api.createandsend.model.notification.email;

import org.junit.Test;
import static org.junit.Assert.*;
import com.urbanairship.api.createandsend.model.notification.email.EmailFields;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EmailFields_ESTest extends EmailFields_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      emailFields_Builder0.setSubject(", htmlBody=");
      EmailFields emailFields0 = emailFields_Builder0.build();
      String string0 = emailFields0.getSubject();
      assertEquals(", htmlBody=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      emailFields_Builder0.setPlainTextBody("com.urbanairship.api.createandsend.model.notification.email.EmailFields");
      EmailFields emailFields0 = emailFields_Builder0.build();
      String string0 = emailFields0.getPlainTextBody();
      assertEquals("com.urbanairship.api.createandsend.model.notification.email.EmailFields", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      EmailFields.Builder emailFields_Builder1 = emailFields_Builder0.setPlainTextBody("");
      EmailFields emailFields0 = emailFields_Builder1.build();
      String string0 = emailFields0.getPlainTextBody();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      EmailFields emailFields0 = emailFields_Builder0.build();
      String string0 = emailFields0.getPlainTextBody();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      EmailFields emailFields0 = emailFields_Builder0.build();
      String string0 = emailFields0.getSubject();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      EmailFields emailFields0 = emailFields_Builder0.build();
      Optional<String> optional0 = emailFields0.getHtmlBody();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      EmailFields emailFields0 = emailFields_Builder0.build();
      emailFields_Builder0.setPlainTextBody("");
      EmailFields emailFields1 = emailFields_Builder0.build();
      boolean boolean0 = emailFields0.equals(emailFields1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      EmailFields emailFields0 = emailFields_Builder0.build();
      EmailFields.Builder emailFields_Builder1 = emailFields_Builder0.setHtmlBody("N*d[g>B");
      EmailFields emailFields1 = emailFields_Builder1.build();
      boolean boolean0 = emailFields0.equals(emailFields1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      EmailFields emailFields0 = emailFields_Builder0.build();
      emailFields_Builder0.setSubject("n~bE5M+tZ*u^H");
      EmailFields emailFields1 = emailFields_Builder0.build();
      boolean boolean0 = emailFields0.equals(emailFields1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      EmailFields emailFields0 = emailFields_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = emailFields0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      EmailFields emailFields0 = emailFields_Builder0.build();
      boolean boolean0 = emailFields0.equals(emailFields0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      emailFields_Builder0.setSubject("");
      EmailFields emailFields0 = emailFields_Builder0.build();
      String string0 = emailFields0.getSubject();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      EmailFields emailFields0 = emailFields_Builder0.build();
      String string0 = emailFields0.toString();
      assertEquals("EmailFields{subject=null, htmlBody=Optional.empty, plainTextBody=null}", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      EmailFields emailFields0 = emailFields_Builder0.build();
      emailFields0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmailFields.Builder emailFields_Builder0 = EmailFields.newBuilder();
      EmailFields emailFields0 = emailFields_Builder0.build();
      EmailFields emailFields1 = emailFields_Builder0.build();
      boolean boolean0 = emailFields0.equals(emailFields1);
      assertTrue(boolean0);
  }
}
