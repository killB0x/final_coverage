/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 18:39:48 GMT 2022
 */

package com.urbanairship.api.createandsend.model.notification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.urbanairship.api.createandsend.model.audience.CreateAndSendAudience;
import com.urbanairship.api.createandsend.model.audience.email.EmailChannels;
import com.urbanairship.api.createandsend.model.notification.CreateAndSendPayload;
import com.urbanairship.api.push.model.Campaigns;
import com.urbanairship.api.push.model.notification.Notification;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreateAndSendPayload_ESTest extends CreateAndSendPayload_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CreateAndSendPayload.Builder createAndSendPayload_Builder0 = CreateAndSendPayload.newBuilder();
      // Undeclared exception!
      try { 
        createAndSendPayload_Builder0.build();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.urbanairship.api.createandsend.model.notification.CreateAndSendPayload$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CreateAndSendPayload.Builder createAndSendPayload_Builder0 = CreateAndSendPayload.newBuilder();
      CreateAndSendPayload.Builder createAndSendPayload_Builder1 = createAndSendPayload_Builder0.setCampaigns((Campaigns) null);
      assertSame(createAndSendPayload_Builder0, createAndSendPayload_Builder1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CreateAndSendPayload.Builder createAndSendPayload_Builder0 = CreateAndSendPayload.newBuilder();
      CreateAndSendAudience createAndSendAudience0 = new CreateAndSendAudience((EmailChannels) null);
      CreateAndSendPayload.Builder createAndSendPayload_Builder1 = createAndSendPayload_Builder0.setAudience(createAndSendAudience0);
      assertSame(createAndSendPayload_Builder0, createAndSendPayload_Builder1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CreateAndSendPayload.Builder createAndSendPayload_Builder0 = CreateAndSendPayload.newBuilder();
      CreateAndSendPayload.Builder createAndSendPayload_Builder1 = createAndSendPayload_Builder0.setNotification((Notification) null);
      assertSame(createAndSendPayload_Builder0, createAndSendPayload_Builder1);
  }
}
