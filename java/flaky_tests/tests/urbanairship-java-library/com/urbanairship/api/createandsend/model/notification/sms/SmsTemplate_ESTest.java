/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 18:44:27 GMT 2022
 */

package com.urbanairship.api.createandsend.model.notification.sms;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.urbanairship.api.createandsend.model.notification.sms.SmsFields;
import com.urbanairship.api.createandsend.model.notification.sms.SmsTemplate;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SmsTemplate_ESTest extends SmsTemplate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SmsTemplate.Builder smsTemplate_Builder0 = SmsTemplate.newBuilder();
      SmsTemplate smsTemplate0 = smsTemplate_Builder0.build();
      SmsTemplate smsTemplate1 = smsTemplate_Builder0.build();
      // Undeclared exception!
      try { 
        smsTemplate0.equals(smsTemplate1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Objects
         //
         verifyException("com.urbanairship.api.createandsend.model.notification.sms.SmsTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SmsTemplate.Builder smsTemplate_Builder0 = new SmsTemplate.Builder();
      SmsTemplate smsTemplate0 = smsTemplate_Builder0.build();
      boolean boolean0 = smsTemplate0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SmsTemplate.Builder smsTemplate_Builder0 = SmsTemplate.newBuilder();
      SmsTemplate smsTemplate0 = smsTemplate_Builder0.build();
      boolean boolean0 = smsTemplate0.equals(smsTemplate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SmsTemplate.Builder smsTemplate_Builder0 = SmsTemplate.newBuilder();
      SmsTemplate smsTemplate0 = smsTemplate_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = smsTemplate0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SmsTemplate.Builder smsTemplate_Builder0 = SmsTemplate.newBuilder();
      SmsTemplate.Builder smsTemplate_Builder1 = smsTemplate_Builder0.setTemplateId("QCd");
      assertSame(smsTemplate_Builder1, smsTemplate_Builder0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SmsTemplate.Builder smsTemplate_Builder0 = SmsTemplate.newBuilder();
      SmsFields smsFields0 = mock(SmsFields.class, new ViolatedAssumptionAnswer());
      SmsTemplate.Builder smsTemplate_Builder1 = smsTemplate_Builder0.setSmsFields(smsFields0);
      assertSame(smsTemplate_Builder0, smsTemplate_Builder1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SmsTemplate.Builder smsTemplate_Builder0 = SmsTemplate.newBuilder();
      SmsTemplate smsTemplate0 = smsTemplate_Builder0.build();
      Optional<SmsFields> optional0 = smsTemplate0.getSmsFields();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SmsTemplate.Builder smsTemplate_Builder0 = SmsTemplate.newBuilder();
      SmsTemplate smsTemplate0 = smsTemplate_Builder0.build();
      // Undeclared exception!
      try { 
        smsTemplate0.hashCode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Objects
         //
         verifyException("com.urbanairship.api.createandsend.model.notification.sms.SmsTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SmsTemplate.Builder smsTemplate_Builder0 = SmsTemplate.newBuilder();
      SmsTemplate smsTemplate0 = smsTemplate_Builder0.build();
      String string0 = smsTemplate0.toString();
      assertEquals("SmsTemplate{smsFields=Optional.empty, templateId=Optional.empty}", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SmsTemplate.Builder smsTemplate_Builder0 = SmsTemplate.newBuilder();
      SmsTemplate smsTemplate0 = smsTemplate_Builder0.build();
      Optional<String> optional0 = smsTemplate0.getTemplateId();
      assertNotNull(optional0);
  }
}
