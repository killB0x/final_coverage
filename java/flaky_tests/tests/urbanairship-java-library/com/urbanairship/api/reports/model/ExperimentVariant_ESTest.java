/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 17:35:19 GMT 2022
 */

package com.urbanairship.api.reports.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.urbanairship.api.reports.model.ExperimentVariant;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExperimentVariant_ESTest extends ExperimentVariant_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Float float0 = new Float((double) 0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "", float0, integer0, integer0, float0, integer0, float0);
      Integer integer1 = experimentVariant0.getSends();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(4);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "", (Float) null, integer0, (Integer) null, (Float) null, integer0, (Float) null);
      Integer integer1 = experimentVariant0.getSends();
      assertEquals(4, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-3012));
      Float float0 = new Float((-630.442F));
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "Ng;!8yg*Um", float0, integer0, integer0, float0, integer0, float0);
      Integer integer1 = experimentVariant0.getSends();
      assertEquals((-3012), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Integer integer0 = new Integer(3651);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, (String) null, float0, integer0, integer0, float0, integer0, float0);
      String string0 = experimentVariant0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(4);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "", (Float) null, integer0, (Integer) null, (Float) null, integer0, (Float) null);
      String string0 = experimentVariant0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      Float float0 = new Float(0.0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "", float0, integer0, integer0, float0, integer0, float0);
      Float float1 = experimentVariant0.getIndirectResponsesPct();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(310);
      Float float0 = new Float((double) 310);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "zBx.T#}@|ze", (Float) null, integer0, integer0, float0, integer0, (Float) null);
      Float float1 = experimentVariant0.getIndirectResponsesPct();
      assertNull(float1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Float float0 = new Float(3079.875408028);
      Float float1 = new Float((-2975.9304F));
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "O7e}DX8Ny98saE\"G5", float0, (Integer) null, (Integer) null, float0, (Integer) null, float1);
      Float float2 = experimentVariant0.getIndirectResponsesPct();
      assertEquals(3079.8755F, experimentVariant0.getDirectResponsesPct(), 0.01F);
      assertEquals((-2975.9304F), (float)float2, 0.01F);
      assertEquals(3079.8755F, experimentVariant0.getAudiencePct(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Float float0 = new Float((double) 0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "", float0, integer0, integer0, float0, integer0, float0);
      Integer integer1 = experimentVariant0.getIndirectResponses();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(4);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "", (Float) null, integer0, (Integer) null, (Float) null, integer0, (Float) null);
      Integer integer1 = experimentVariant0.getIndirectResponses();
      assertEquals(4, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Float float0 = new Float(1.0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "", float0, integer0, integer0, float0, integer0, float0);
      Integer integer1 = experimentVariant0.getIndirectResponses();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Float float0 = new Float((double) 0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "#=&", float0, integer0, integer0, float0, integer0, float0);
      Integer integer1 = experimentVariant0.getId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Integer integer0 = new Integer(3651);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, (String) null, float0, integer0, integer0, float0, integer0, float0);
      Integer integer1 = experimentVariant0.getId();
      assertEquals(3651, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-3012));
      Float float0 = new Float((-630.442F));
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "Ng;!8yg*Um", float0, integer0, integer0, float0, integer0, float0);
      Integer integer1 = experimentVariant0.getId();
      assertEquals((-3012), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(0);
      Float float1 = new Float(0.0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, ", indirectResponses=", float0, (Integer) null, integer0, float1, integer0, float0);
      Float float2 = experimentVariant0.getDirectResponsesPct();
      assertEquals(0.0F, (float)float2, 0.01F);
      assertEquals(1.0F, experimentVariant0.getIndirectResponsesPct(), 0.01F);
      assertEquals(1.0F, experimentVariant0.getAudiencePct(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(4);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "", (Float) null, integer0, (Integer) null, (Float) null, integer0, (Float) null);
      Float float0 = experimentVariant0.getDirectResponsesPct();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Float float0 = new Float((double) 0);
      Float float1 = new Float((-511.13379802941375));
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "#=&", float0, integer0, integer0, float1, integer0, float0);
      Float float2 = experimentVariant0.getDirectResponsesPct();
      assertEquals((-511.1338F), (float)float2, 0.01F);
      assertEquals(0.0F, experimentVariant0.getAudiencePct(), 0.01F);
      assertEquals(0.0F, experimentVariant0.getIndirectResponsesPct(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(310);
      Float float0 = new Float((double) 310);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "zBx.T#}@|ze", (Float) null, integer0, integer0, float0, integer0, (Float) null);
      Integer integer1 = experimentVariant0.getDirectResponses();
      assertEquals(310, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(4);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "", (Float) null, integer0, (Integer) null, (Float) null, integer0, (Float) null);
      Integer integer1 = experimentVariant0.getDirectResponses();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-3012));
      Float float0 = new Float((-630.442F));
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "Ng;!8yg*Um", float0, integer0, integer0, float0, integer0, float0);
      Integer integer1 = experimentVariant0.getDirectResponses();
      assertEquals((-3012), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Float float0 = new Float((double) 0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "", float0, integer0, integer0, float0, integer0, float0);
      Float float1 = experimentVariant0.getAudiencePct();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-3402));
      Float float0 = new Float((double) (-3402));
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "O", (Float) null, integer0, (Integer) null, float0, (Integer) null, float0);
      Float float1 = experimentVariant0.getAudiencePct();
      assertNull(float1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-3012));
      Float float0 = new Float((-630.442F));
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "Ng;!8yg*Um", float0, integer0, integer0, float0, integer0, float0);
      Float float1 = experimentVariant0.getAudiencePct();
      assertEquals((-630.442F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(429);
      Float float0 = new Float((double) 429);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "x{4wyJtM`rn>", float0, integer0, integer0, float0, integer0, float0);
      Float float1 = new Float(3142.1372F);
      ExperimentVariant experimentVariant1 = new ExperimentVariant(integer0, "x{4wyJtM`rn>", float0, integer0, integer0, float0, integer0, float1);
      boolean boolean0 = experimentVariant0.equals(experimentVariant1);
      assertEquals(429.0F, experimentVariant1.getAudiencePct(), 0.01F);
      assertEquals(429.0F, experimentVariant1.getDirectResponsesPct(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(443);
      Float float0 = new Float((double) 443);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "(IGPyV/s", float0, integer0, integer0, float0, integer0, float0);
      Integer integer1 = new Integer(892);
      ExperimentVariant experimentVariant1 = new ExperimentVariant(integer0, "(IGPyV/s", float0, integer0, integer0, float0, integer1, float0);
      boolean boolean0 = experimentVariant0.equals(experimentVariant1);
      assertEquals(443, (int)experimentVariant1.getSends());
      assertEquals(443, (int)experimentVariant1.getDirectResponses());
      assertEquals(443, (int)experimentVariant1.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-4261));
      Float float0 = new Float((double) (-4261));
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, " D@:\"<>ALM2p%y", float0, integer0, integer0, float0, integer0, float0);
      Float float1 = new Float((-1007.6904F));
      ExperimentVariant experimentVariant1 = new ExperimentVariant(integer0, " D@:\"<>ALM2p%y", float0, integer0, integer0, float1, integer0, float1);
      boolean boolean0 = experimentVariant0.equals(experimentVariant1);
      assertEquals((-1007.6904F), experimentVariant1.getDirectResponsesPct(), 0.01F);
      assertEquals((-1007.6904F), experimentVariant1.getIndirectResponsesPct(), 0.01F);
      assertEquals((-4261.0F), experimentVariant1.getAudiencePct(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Float float0 = new Float((double) 0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "IGVy/", float0, integer0, integer0, float0, integer0, float0);
      ExperimentVariant experimentVariant1 = new ExperimentVariant(integer0, "IGVy/", float0, integer0, (Integer) null, float0, (Integer) null, float0);
      boolean boolean0 = experimentVariant0.equals(experimentVariant1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Integer integer0 = new Integer(3651);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "bC/0t(n}", float0, integer0, integer0, (Float) null, integer0, float0);
      ExperimentVariant experimentVariant1 = new ExperimentVariant((Integer) null, "bC/0t(n}", float0, (Integer) null, (Integer) null, float0, integer0, float0);
      boolean boolean0 = experimentVariant0.equals(experimentVariant1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(408);
      Float float0 = new Float((double) 408);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "", float0, integer0, integer0, float0, integer0, float0);
      Float float1 = new Float(0.0);
      ExperimentVariant experimentVariant1 = new ExperimentVariant(integer0, "", float1, integer0, (Integer) null, float0, (Integer) null, float0);
      boolean boolean0 = experimentVariant0.equals(experimentVariant1);
      assertFalse(boolean0);
      assertEquals(408.0F, experimentVariant1.getIndirectResponsesPct(), 0.01F);
      assertEquals(408.0F, experimentVariant1.getDirectResponsesPct(), 0.01F);
      assertEquals(0.0F, experimentVariant1.getAudiencePct(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(390);
      Float float0 = new Float((double) 390);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "(IGPyV/s", float0, integer0, integer0, float0, integer0, float0);
      ExperimentVariant experimentVariant1 = new ExperimentVariant(integer0, "", float0, integer0, (Integer) null, float0, (Integer) null, (Float) null);
      boolean boolean0 = experimentVariant0.equals(experimentVariant1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(333);
      Float float0 = new Float((double) 333);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "F@N", float0, integer0, integer0, float0, integer0, float0);
      Integer integer1 = new Integer(4601);
      ExperimentVariant experimentVariant1 = new ExperimentVariant(integer1, ", directResponses=", float0, integer1, integer1, float0, integer0, float0);
      boolean boolean0 = experimentVariant0.equals(experimentVariant1);
      assertEquals(4601, (int)experimentVariant1.getDirectResponses());
      assertEquals(4601, (int)experimentVariant1.getSends());
      assertEquals(333, (int)experimentVariant1.getIndirectResponses());
      assertEquals(4601, (int)experimentVariant1.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Integer integer0 = new Integer(3651);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "bC/0t(n}", float0, integer0, integer0, (Float) null, integer0, float0);
      Object object0 = new Object();
      boolean boolean0 = experimentVariant0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "'{LleHyQGsWqo<", (Float) null, integer0, integer0, (Float) null, integer0, (Float) null);
      boolean boolean0 = experimentVariant0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(443);
      Float float0 = new Float((double) 443);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "(EpIGPyV/s", float0, integer0, integer0, float0, integer0, float0);
      boolean boolean0 = experimentVariant0.equals(experimentVariant0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(429);
      Float float0 = new Float((double) 429);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "x{4wyJtM`rn>", float0, integer0, integer0, float0, integer0, float0);
      ExperimentVariant experimentVariant1 = new ExperimentVariant(integer0, "x{4wyJtM`rn>", float0, integer0, integer0, float0, integer0, float0);
      boolean boolean0 = experimentVariant0.equals(experimentVariant1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Integer integer0 = new Integer(3651);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "bC/0t(n}", float0, integer0, integer0, (Float) null, integer0, float0);
      String string0 = experimentVariant0.getName();
      assertEquals("bC/0t(n}", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, ", indirectResponses=", float0, (Integer) null, integer0, float0, integer0, float0);
      Integer integer1 = experimentVariant0.getDirectResponses();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(429);
      Float float0 = new Float((double) 429);
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "x{4wyJtM`rn>", float0, integer0, integer0, float0, integer0, float0);
      experimentVariant0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Integer integer0 = new Integer(3651);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "bC/0t(n}", float0, integer0, integer0, (Float) null, integer0, float0);
      Integer integer1 = experimentVariant0.getId();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer((-41));
      Float float0 = new Float((double) (-41));
      ExperimentVariant experimentVariant0 = new ExperimentVariant(integer0, "(IGP=7yV/s", float0, integer0, integer0, float0, integer0, float0);
      String string0 = experimentVariant0.toString();
      assertEquals("ExperimentVariant{id=-41, name='(IGP=7yV/s', audiencePct=-41.0, sends=-41, directResponses=-41, directResponsesPct=-41.0, indirectResponses=-41, indirectResponsesPct=-41.0}", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, ", indirectResponses=", float0, (Integer) null, integer0, float0, integer0, float0);
      Float float1 = experimentVariant0.getDirectResponsesPct();
      assertEquals(1.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Float float0 = new Float(3079.875408028);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "O7e}DX8Ny98saE\"G5", float0, (Integer) null, (Integer) null, float0, (Integer) null, float0);
      Integer integer0 = experimentVariant0.getIndirectResponses();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, ", indirectResponses=", float0, (Integer) null, integer0, float0, integer0, float0);
      Integer integer1 = experimentVariant0.getSends();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(0);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, ", indirectResponses=", float0, (Integer) null, integer0, float0, integer0, float0);
      Float float1 = experimentVariant0.getAudiencePct();
      assertEquals(1.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Float float0 = new Float(3079.875408028);
      ExperimentVariant experimentVariant0 = new ExperimentVariant((Integer) null, "O7e}DX8Ny98saE\"G5", float0, (Integer) null, (Integer) null, float0, (Integer) null, float0);
      Float float1 = experimentVariant0.getIndirectResponsesPct();
      assertEquals(3079.8755F, (float)float1, 0.01F);
  }
}
