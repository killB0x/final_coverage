/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 19:15:06 GMT 2022
 */

package com.urbanairship.api.client;

import org.junit.Test;
import static org.junit.Assert.*;
import com.urbanairship.api.client.RequestError;
import com.urbanairship.api.client.ServerException;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ServerException_ESTest extends ServerException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ServerException.Builder serverException_Builder0 = ServerException.newBuilder();
      ServerException.Builder serverException_Builder1 = serverException_Builder0.setStatusText(" ");
      ServerException serverException0 = serverException_Builder1.build();
      String string0 = serverException0.getStatusText();
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ServerException.Builder serverException_Builder0 = ServerException.newBuilder();
      Integer integer0 = new Integer(0);
      serverException_Builder0.setStatusCode(integer0);
      ServerException serverException0 = serverException_Builder0.build();
      Integer integer1 = serverException0.getStatusCode();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ServerException.Builder serverException_Builder0 = ServerException.newBuilder();
      Integer integer0 = new Integer(4);
      serverException_Builder0.setStatusCode(integer0);
      ServerException serverException0 = serverException_Builder0.build();
      Integer integer1 = serverException0.getStatusCode();
      assertEquals(4, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServerException.Builder serverException_Builder0 = new ServerException.Builder();
      ServerException.Builder serverException_Builder1 = serverException_Builder0.setStatusText("");
      ServerException serverException0 = serverException_Builder1.build();
      String string0 = serverException0.getStatusText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServerException.Builder serverException_Builder0 = ServerException.newBuilder();
      ServerException serverException0 = serverException_Builder0.build();
      MockThrowable mockThrowable0 = new MockThrowable(";.a-s<k,#uDa");
      serverException0.initCause(mockThrowable0);
      String string0 = serverException0.toString();
      assertEquals("\nServerException:\nMessage:null\nStatusCode:null\nStatusText:null\nCause:;.a-s<k,#uDa", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ServerException.Builder serverException_Builder0 = ServerException.newBuilder();
      ServerException serverException0 = serverException_Builder0.build();
      String string0 = serverException0.toString();
      assertEquals("\nServerException:\nMessage:null\nStatusCode:null\nStatusText:null", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ServerException.Builder serverException_Builder0 = ServerException.newBuilder();
      ServerException.Builder serverException_Builder1 = serverException_Builder0.setRequestError((RequestError) null);
      assertSame(serverException_Builder0, serverException_Builder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ServerException.Builder serverException_Builder0 = ServerException.newBuilder();
      Integer integer0 = new Integer((-1695));
      serverException_Builder0.setStatusCode(integer0);
      ServerException serverException0 = serverException_Builder0.build();
      Integer integer1 = serverException0.getStatusCode();
      assertEquals((-1695), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServerException.Builder serverException_Builder0 = ServerException.newBuilder();
      ServerException serverException0 = serverException_Builder0.build();
      Integer integer0 = serverException0.getStatusCode();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServerException.Builder serverException_Builder0 = ServerException.newBuilder();
      ServerException serverException0 = serverException_Builder0.build();
      String string0 = serverException0.getStatusText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServerException.Builder serverException_Builder0 = ServerException.newBuilder();
      ServerException serverException0 = serverException_Builder0.build();
      Optional<RequestError> optional0 = serverException0.getError();
      assertNotNull(optional0);
  }
}
