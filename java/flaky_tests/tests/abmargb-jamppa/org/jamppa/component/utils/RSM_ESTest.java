/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 22:26:06 GMT 2022
 */

package org.jamppa.component.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jamppa.component.utils.RSM;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RSM_ESTest extends RSM_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RSM rSM0 = new RSM();
      Integer integer0 = new Integer(0);
      rSM0.setMax(integer0);
      rSM0.getMax();
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RSM rSM0 = new RSM();
      Integer integer0 = new Integer(1);
      rSM0.setMax(integer0);
      rSM0.getMax();
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RSM rSM0 = new RSM();
      rSM0.setLast("04jY}->p");
      String string0 = rSM0.getLast();
      assertEquals(0, (int)rSM0.getIndex());
      assertEquals("04jY}->p", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RSM rSM0 = new RSM();
      rSM0.setLast("");
      String string0 = rSM0.getLast();
      assertEquals("", string0);
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RSM rSM0 = new RSM();
      Integer integer0 = new Integer(1);
      rSM0.setIndex(integer0);
      Integer integer1 = rSM0.getIndex();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RSM rSM0 = new RSM();
      rSM0.setIndex((Integer) null);
      Integer integer0 = rSM0.getIndex();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RSM rSM0 = new RSM();
      Integer integer0 = new Integer((-3088));
      rSM0.setIndex(integer0);
      Integer integer1 = rSM0.getIndex();
      assertEquals((-3088), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RSM rSM0 = new RSM();
      rSM0.setFirst("04jY}->p");
      String string0 = rSM0.getFirst();
      assertEquals("04jY}->p", string0);
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RSM rSM0 = new RSM();
      rSM0.setFirst("");
      String string0 = rSM0.getFirst();
      assertEquals(0, (int)rSM0.getIndex());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RSM rSM0 = new RSM();
      Integer integer0 = new Integer(0);
      rSM0.setCount(integer0);
      rSM0.getCount();
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RSM rSM0 = new RSM();
      Integer integer0 = new Integer(1);
      rSM0.setCount(integer0);
      rSM0.getCount();
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RSM rSM0 = new RSM();
      rSM0.setBefore("");
      String string0 = rSM0.getBefore();
      assertEquals(0, (int)rSM0.getIndex());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RSM rSM0 = new RSM();
      rSM0.setAfter("47jm7A5PNbaK8nqn");
      String string0 = rSM0.getAfter();
      assertEquals("47jm7A5PNbaK8nqn", string0);
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RSM rSM0 = new RSM();
      String string0 = rSM0.getAfter();
      assertNull(string0);
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RSM rSM0 = new RSM();
      Integer integer0 = new Integer((-2193));
      rSM0.setCount(integer0);
      rSM0.getCount();
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RSM rSM0 = new RSM();
      rSM0.getMax();
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RSM rSM0 = new RSM();
      String string0 = rSM0.getFirst();
      assertEquals(0, (int)rSM0.getIndex());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RSM rSM0 = new RSM();
      rSM0.setBefore(":`|.arV%,`yt#}^2jg");
      String string0 = rSM0.getBefore();
      assertEquals(":`|.arV%,`yt#}^2jg", string0);
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RSM rSM0 = new RSM();
      rSM0.getCount();
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RSM rSM0 = new RSM();
      Integer integer0 = new Integer((-2193));
      rSM0.setMax(integer0);
      rSM0.getMax();
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RSM rSM0 = new RSM();
      Integer integer0 = rSM0.getIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RSM rSM0 = new RSM();
      rSM0.setAfter("");
      String string0 = rSM0.getAfter();
      assertEquals(0, (int)rSM0.getIndex());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RSM rSM0 = new RSM();
      String string0 = rSM0.getBefore();
      assertNull(string0);
      assertEquals(0, (int)rSM0.getIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RSM rSM0 = new RSM();
      String string0 = rSM0.getLast();
      assertNull(string0);
      assertEquals(0, (int)rSM0.getIndex());
  }
}
