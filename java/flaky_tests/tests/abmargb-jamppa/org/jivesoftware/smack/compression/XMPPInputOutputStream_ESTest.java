/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 22:18:40 GMT 2022
 */

package org.jivesoftware.smack.compression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jivesoftware.smack.compression.Java7ZlibInputOutputStream;
import org.jivesoftware.smack.compression.JzlibInputOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XMPPInputOutputStream_ESTest extends XMPPInputOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Java7ZlibInputOutputStream java7ZlibInputOutputStream0 = new Java7ZlibInputOutputStream();
      boolean boolean0 = java7ZlibInputOutputStream0.isSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JzlibInputOutputStream jzlibInputOutputStream0 = new JzlibInputOutputStream();
      boolean boolean0 = jzlibInputOutputStream0.isSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Java7ZlibInputOutputStream java7ZlibInputOutputStream0 = new Java7ZlibInputOutputStream();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStream inputStream0 = java7ZlibInputOutputStream0.getInputStream(sequenceInputStream0);
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Java7ZlibInputOutputStream java7ZlibInputOutputStream0 = new Java7ZlibInputOutputStream();
      java7ZlibInputOutputStream0.compressionMethod = null;
      String string0 = java7ZlibInputOutputStream0.getCompressionMethod();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Java7ZlibInputOutputStream java7ZlibInputOutputStream0 = new Java7ZlibInputOutputStream();
      java7ZlibInputOutputStream0.compressionMethod = "";
      String string0 = java7ZlibInputOutputStream0.getCompressionMethod();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JzlibInputOutputStream jzlibInputOutputStream0 = new JzlibInputOutputStream();
      try { 
        jzlibInputOutputStream0.getOutputStream(byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jivesoftware.smack.compression.JzlibInputOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Java7ZlibInputOutputStream java7ZlibInputOutputStream0 = new Java7ZlibInputOutputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        java7ZlibInputOutputStream0.getOutputStream(byteArrayOutputStream0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("org.jivesoftware.smack.compression.Java7ZlibInputOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Java7ZlibInputOutputStream java7ZlibInputOutputStream0 = new Java7ZlibInputOutputStream();
      try { 
        java7ZlibInputOutputStream0.getInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Java7ZlibInputOutputStream java7ZlibInputOutputStream0 = new Java7ZlibInputOutputStream();
      String string0 = java7ZlibInputOutputStream0.getCompressionMethod();
      assertEquals("zlib", string0);
  }
}
