/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 22:01:07 GMT 2022
 */

package org.jivesoftware.smack.util.dns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.jivesoftware.smack.util.dns.HostAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HostAddress_ESTest extends HostAddress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress(" Exception: ", 1910);
      HostAddress hostAddress1 = new HostAddress(" Exception: ");
      boolean boolean0 = hostAddress1.equals(hostAddress0);
      assertFalse(boolean0);
      assertEquals(5222, hostAddress1.getPort());
      assertFalse(hostAddress0.equals((Object)hostAddress1));
      assertEquals(1910, hostAddress0.getPort());
      assertEquals(" Exception: ", hostAddress1.getFQDN());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress("%i6tumJw.");
      assertEquals(5222, hostAddress0.getPort());
      assertEquals("%i6tumJw", hostAddress0.getFQDN());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress("Us\"mm<{|1zBfz@", 0);
      int int0 = hostAddress0.getPort();
      assertEquals(0, int0);
      assertEquals("Us\"mm<{|1zBfz@", hostAddress0.getFQDN());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HostAddress hostAddress0 = null;
      try {
        hostAddress0 = new HostAddress("", 88);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HostAddress hostAddress0 = null;
      try {
        hostAddress0 = new HostAddress("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress(" Exception: ", 1910);
      String string0 = hostAddress0.getErrorMessage();
      assertEquals(" Exception: :1910 Exception: No error logged", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress("8|aA:3'%;");
      MockException mockException0 = new MockException();
      hostAddress0.setException(mockException0);
      String string0 = hostAddress0.getErrorMessage();
      assertEquals("8|aA:3'%;:5222 Exception: null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress(" Exception: ", 1910);
      HostAddress hostAddress1 = new HostAddress(" Exception: ");
      boolean boolean0 = hostAddress0.equals(hostAddress1);
      assertEquals(5222, hostAddress1.getPort());
      assertEquals(1910, hostAddress0.getPort());
      assertEquals(" Exception: ", hostAddress1.getFQDN());
      assertFalse(boolean0);
      assertFalse(hostAddress1.equals((Object)hostAddress0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress("Us\"mm<{|1zBfz@", 0);
      HostAddress hostAddress1 = new HostAddress("Us\"mm<{|1zBfz@", 0);
      boolean boolean0 = hostAddress1.equals(hostAddress0);
      assertEquals("Us\"mm<{|1zBfz@", hostAddress1.getFQDN());
      assertTrue(boolean0);
      assertEquals(0, hostAddress1.getPort());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress("FQDN is null", 65535);
      HostAddress hostAddress1 = new HostAddress("s|(5Yi[1t@AP~$)Q");
      boolean boolean0 = hostAddress0.equals(hostAddress1);
      assertEquals("s|(5Yi[1t@AP~$)Q", hostAddress1.getFQDN());
      assertEquals(5222, hostAddress1.getPort());
      assertEquals(65535, hostAddress0.getPort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress(" Exception: ", 1910);
      boolean boolean0 = hostAddress0.equals(hostAddress0);
      assertEquals(1910, hostAddress0.getPort());
      assertEquals(" Exception: ", hostAddress0.getFQDN());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress("FQDN is null", 65535);
      boolean boolean0 = hostAddress0.equals("FQDN is null");
      assertEquals("FQDN is null", hostAddress0.getFQDN());
      assertFalse(boolean0);
      assertEquals(65535, hostAddress0.getPort());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HostAddress hostAddress0 = null;
      try {
        hostAddress0 = new HostAddress("CR=D", 2147483645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DNS SRV records weight must be a 16-bit unsiged integer (i.e. between 0-65535. Port was: 2147483645
         //
         verifyException("org.jivesoftware.smack.util.dns.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HostAddress hostAddress0 = null;
      try {
        hostAddress0 = new HostAddress("b.nA2250~wlY", (-2238));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DNS SRV records weight must be a 16-bit unsiged integer (i.e. between 0-65535. Port was: -2238
         //
         verifyException("org.jivesoftware.smack.util.dns.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress(".");
      String string0 = hostAddress0.getFQDN();
      assertEquals("", string0);
      assertEquals(5222, hostAddress0.getPort());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HostAddress hostAddress0 = null;
      try {
        hostAddress0 = new HostAddress((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FQDN is null
         //
         verifyException("org.jivesoftware.smack.util.dns.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress("FQDN is null", 65535);
      hostAddress0.hashCode();
      assertEquals("FQDN is null", hostAddress0.getFQDN());
      assertEquals(65535, hostAddress0.getPort());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress("FQDN is null", 65535);
      int int0 = hostAddress0.getPort();
      assertEquals(65535, int0);
      assertEquals("FQDN is null", hostAddress0.getFQDN());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress("FQDN is null", 65535);
      String string0 = hostAddress0.getFQDN();
      assertEquals(65535, hostAddress0.getPort());
      assertEquals("FQDN is null", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress("FQDN is null", 65535);
      String string0 = hostAddress0.toString();
      assertEquals("FQDN is null:65535", string0);
  }
}
