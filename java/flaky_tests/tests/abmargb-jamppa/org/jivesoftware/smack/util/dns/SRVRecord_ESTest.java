/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 22:07:55 GMT 2022
 */

package org.jivesoftware.smack.util.dns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jivesoftware.smack.util.dns.SRVRecord;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SRVRecord_ESTest extends SRVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SRVRecord sRVRecord0 = new SRVRecord(" Exception: ", 729, 2016, 251);
      SRVRecord sRVRecord1 = new SRVRecord(" Exception: :729 prio:2016:w:251 Exception: No error logged", 2016, 2016, 251);
      int int0 = sRVRecord0.compareTo(sRVRecord1);
      assertEquals(0, int0);
      assertEquals(2016, sRVRecord1.getPriority());
      assertEquals(251, sRVRecord1.getWeight());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SRVRecord sRVRecord0 = null;
      try {
        sRVRecord0 = new SRVRecord("mzS_t6#@}v2w6G=", 2808, 732, 65557);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DNS SRV records weight must be a 16-bit unsiged integer (i.e. between 0-65535. Weight was: 65557
         //
         verifyException("org.jivesoftware.smack.util.dns.SRVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SRVRecord sRVRecord0 = new SRVRecord("D$G3e(woRlcBD", 65535, 65535, 0);
      int int0 = sRVRecord0.getWeight();
      assertEquals(0, int0);
      assertEquals(65535, sRVRecord0.getPriority());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SRVRecord sRVRecord0 = new SRVRecord("D$G3e(woRlcBD", 65535, 65535, 0);
      int int0 = sRVRecord0.getPriority();
      assertEquals(0, sRVRecord0.getWeight());
      assertEquals(65535, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SRVRecord sRVRecord0 = new SRVRecord("D:Wh}bn)Z':[<af", 0, 0, 0);
      SRVRecord sRVRecord1 = new SRVRecord(":w:", 0, 4904, 5222);
      int int0 = sRVRecord0.compareTo(sRVRecord1);
      assertEquals(4904, sRVRecord1.getPriority());
      assertEquals(4904, int0);
      assertEquals(5222, sRVRecord1.getWeight());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SRVRecord sRVRecord0 = new SRVRecord("+G", 511, 511, 511);
      // Undeclared exception!
      try { 
        sRVRecord0.compareTo((SRVRecord) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jivesoftware.smack.util.dns.SRVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SRVRecord sRVRecord0 = null;
      try {
        sRVRecord0 = new SRVRecord("", 65535, 65535, 65535);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SRVRecord sRVRecord0 = new SRVRecord(" Excepton: ", 0, 0, 0);
      int int0 = sRVRecord0.compareTo(sRVRecord0);
      assertEquals(0, sRVRecord0.getWeight());
      assertEquals(0, int0);
      assertEquals(0, sRVRecord0.getPriority());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SRVRecord sRVRecord0 = new SRVRecord("K!R", 1538, 5222, 1538);
      SRVRecord sRVRecord1 = new SRVRecord("No error logged", 5222, 511, 1538);
      int int0 = sRVRecord0.compareTo(sRVRecord1);
      assertEquals(1538, sRVRecord1.getWeight());
      assertEquals((-4711), int0);
      assertEquals(511, sRVRecord1.getPriority());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SRVRecord sRVRecord0 = null;
      try {
        sRVRecord0 = new SRVRecord(":w", 46, 65566, 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DNS SRV records priority must be a 16-bit unsiged integer (i.e. between 0-65535. Priority was: 65566
         //
         verifyException("org.jivesoftware.smack.util.dns.SRVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SRVRecord sRVRecord0 = null;
      try {
        sRVRecord0 = new SRVRecord(":w:", 65535, (-1), 65535);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DNS SRV records priority must be a 16-bit unsiged integer (i.e. between 0-65535. Priority was: -1
         //
         verifyException("org.jivesoftware.smack.util.dns.SRVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SRVRecord sRVRecord0 = null;
      try {
        sRVRecord0 = new SRVRecord("ck&`(", 65535, (-581), (-581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DNS SRV records weight must be a 16-bit unsiged integer (i.e. between 0-65535. Weight was: -581
         //
         verifyException("org.jivesoftware.smack.util.dns.SRVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SRVRecord sRVRecord0 = new SRVRecord("ck&`(", 65535, 65535, 65535);
      String string0 = sRVRecord0.toString();
      assertEquals("ck&`(:65535 prio:65535:w:65535", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SRVRecord sRVRecord0 = new SRVRecord("ck&`(", 65535, 65535, 65535);
      int int0 = sRVRecord0.getWeight();
      assertEquals(65535, sRVRecord0.getPriority());
      assertEquals(65535, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SRVRecord sRVRecord0 = new SRVRecord(" Excepton: ", 0, 0, 0);
      int int0 = sRVRecord0.getPriority();
      assertEquals(0, int0);
      assertEquals(0, sRVRecord0.getWeight());
  }
}
