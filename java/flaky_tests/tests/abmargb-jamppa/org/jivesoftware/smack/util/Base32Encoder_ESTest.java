/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 21:52:43 GMT 2022
 */

package org.jivesoftware.smack.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jivesoftware.smack.util.Base32Encoder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32Encoder_ESTest extends Base32Encoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      // Undeclared exception!
      try { 
        base32Encoder0.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jivesoftware.smack.util.Base32Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      // Undeclared exception!
      try { 
        base32Encoder0.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jivesoftware.smack.util.Base32Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.decode("58mW_\"rxq@^i>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.decode("P4");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.decode("vHfLL");
      assertNotNull(string0);
      assertEquals("\uFFFD\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.decode("ABCDEFGHIJKLMNOPQRSTVWXYZ234578");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.decode("EJPCYYBAPZGDITI");
      assertNotNull(string0);
      assertEquals("\"^,` ~L4M", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.encode("\"^,` ~L4M");
      assertEquals("EJPCYYBAPZGDITI", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.encode("v`&ki%mFh=%/-:/*|");
      assertEquals("OZQCM23JEVWUM2B5EUXS2ORPFJ6A", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.encode("org.jivesoftware.smack.util.Base32Encoder");
      assertEquals("N5ZGOLTKNF3GK43PMZ2HOYLSMUXHG3LBMNVS45LUNFWC4QTBONSTGMSFNZRW6ZDFOI", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.encode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.decode("JE2TORKJKBGFMSSWJRIQ");
      assertEquals("I57EIPLVJVLQ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.decode("oEcz :F>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.decode("VWS");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32Encoder base32Encoder0 = Base32Encoder.getInstance();
      String string0 = base32Encoder0.decode("");
      assertEquals("", string0);
  }
}
