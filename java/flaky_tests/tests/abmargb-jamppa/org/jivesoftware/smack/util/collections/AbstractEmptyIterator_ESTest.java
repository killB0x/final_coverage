/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 22:20:16 GMT 2022
 */

package org.jivesoftware.smack.util.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jivesoftware.smack.util.collections.AbstractEmptyIterator;
import org.jivesoftware.smack.util.collections.EmptyIterator;
import org.jivesoftware.smack.util.collections.EmptyMapIterator;
import org.jivesoftware.smack.util.collections.MapIterator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractEmptyIterator_ESTest extends AbstractEmptyIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmptyMapIterator emptyMapIterator0 = new EmptyMapIterator();
      boolean boolean0 = emptyMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmptyMapIterator emptyMapIterator0 = new EmptyMapIterator();
      // Undeclared exception!
      try { 
        emptyMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.jivesoftware.smack.util.collections.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmptyMapIterator emptyMapIterator0 = new EmptyMapIterator();
      // Undeclared exception!
      try { 
        emptyMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.jivesoftware.smack.util.collections.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmptyIterator<Object> emptyIterator0 = new EmptyIterator<Object>();
      // Undeclared exception!
      try { 
        emptyIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.jivesoftware.smack.util.collections.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmptyMapIterator emptyMapIterator0 = new EmptyMapIterator();
      // Undeclared exception!
      try { 
        emptyMapIterator0.add((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() not supported for empty Iterator
         //
         verifyException("org.jivesoftware.smack.util.collections.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MapIterator mapIterator0 = EmptyMapIterator.INSTANCE;
      int int0 = ((AbstractEmptyIterator) mapIterator0).nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmptyMapIterator emptyMapIterator0 = new EmptyMapIterator();
      boolean boolean0 = emptyMapIterator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MapIterator mapIterator0 = EmptyMapIterator.INSTANCE;
      ((AbstractEmptyIterator) mapIterator0).reset();
      assertFalse(mapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmptyMapIterator emptyMapIterator0 = new EmptyMapIterator();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        emptyMapIterator0.setValue(object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.jivesoftware.smack.util.collections.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmptyMapIterator emptyMapIterator0 = new EmptyMapIterator();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        emptyMapIterator0.set(object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.jivesoftware.smack.util.collections.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmptyMapIterator emptyMapIterator0 = new EmptyMapIterator();
      int int0 = emptyMapIterator0.previousIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmptyMapIterator emptyMapIterator0 = new EmptyMapIterator();
      // Undeclared exception!
      try { 
        emptyMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.jivesoftware.smack.util.collections.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmptyMapIterator emptyMapIterator0 = new EmptyMapIterator();
      // Undeclared exception!
      try { 
        emptyMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.jivesoftware.smack.util.collections.AbstractEmptyIterator", e);
      }
  }
}
