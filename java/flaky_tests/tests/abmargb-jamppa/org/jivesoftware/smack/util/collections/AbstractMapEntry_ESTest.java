/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 21:59:34 GMT 2022
 */

package org.jivesoftware.smack.util.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.AbstractMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jivesoftware.smack.util.collections.DefaultMapEntry;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractMapEntry_ESTest extends AbstractMapEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-4009));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      DefaultMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> defaultMapEntry0 = new DefaultMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(integer0, abstractMap_SimpleImmutableEntry0);
      defaultMapEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DefaultMapEntry<Integer, Integer> defaultMapEntry0 = new DefaultMapEntry<Integer, Integer>(integer0, (Integer) null);
      Integer integer1 = defaultMapEntry0.setValue(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-4009));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      DefaultMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> defaultMapEntry0 = new DefaultMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(integer0, abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = defaultMapEntry0.setValue(abstractMap_SimpleImmutableEntry0);
      assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      DefaultMapEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> defaultMapEntry0 = new DefaultMapEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, integer0);
      defaultMapEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(integer0, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      DefaultMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> defaultMapEntry0 = new DefaultMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(abstractMap_SimpleImmutableEntry0);
      defaultMapEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DefaultMapEntry<Integer, Integer> defaultMapEntry0 = new DefaultMapEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(integer0, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      boolean boolean0 = defaultMapEntry0.equals(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DefaultMapEntry<Integer, Integer> defaultMapEntry0 = new DefaultMapEntry<Integer, Integer>(integer0, (Integer) null);
      DefaultMapEntry<Object, Comparable<Integer>> defaultMapEntry1 = new DefaultMapEntry<Object, Comparable<Integer>>(integer0, integer0);
      boolean boolean0 = defaultMapEntry0.equals(defaultMapEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-47));
      DefaultMapEntry<Object, Comparable<Integer>> defaultMapEntry0 = new DefaultMapEntry<Object, Comparable<Integer>>(integer0, integer0);
      DefaultMapEntry<Object, Integer> defaultMapEntry1 = new DefaultMapEntry<Object, Integer>(defaultMapEntry0, integer0);
      boolean boolean0 = defaultMapEntry1.equals(defaultMapEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DefaultMapEntry<Integer, Integer> defaultMapEntry0 = new DefaultMapEntry<Integer, Integer>((Integer) null, integer0);
      AbstractMap.SimpleEntry<Integer, Comparable<Integer>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Comparable<Integer>>(defaultMapEntry0);
      DefaultMapEntry<Integer, Comparable<Integer>> defaultMapEntry1 = new DefaultMapEntry<Integer, Comparable<Integer>>(abstractMap_SimpleEntry0);
      defaultMapEntry1.key = integer0;
      boolean boolean0 = defaultMapEntry0.equals(defaultMapEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DefaultMapEntry<Integer, Integer> defaultMapEntry0 = new DefaultMapEntry<Integer, Integer>((Integer) null, integer0);
      AbstractMap.SimpleEntry<Integer, Comparable<Integer>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Comparable<Integer>>(defaultMapEntry0);
      DefaultMapEntry<Integer, Comparable<Integer>> defaultMapEntry1 = new DefaultMapEntry<Integer, Comparable<Integer>>(abstractMap_SimpleEntry0);
      boolean boolean0 = defaultMapEntry0.equals(defaultMapEntry1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-47));
      DefaultMapEntry<Object, Comparable<Integer>> defaultMapEntry0 = new DefaultMapEntry<Object, Comparable<Integer>>(integer0, integer0);
      boolean boolean0 = defaultMapEntry0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-3385));
      DefaultMapEntry<Integer, Integer> defaultMapEntry0 = new DefaultMapEntry<Integer, Integer>((Integer) null, integer0);
      boolean boolean0 = defaultMapEntry0.equals(defaultMapEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-39));
      DefaultMapEntry<Integer, Integer> defaultMapEntry0 = new DefaultMapEntry<Integer, Integer>(integer0, (Integer) null);
      AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(integer0, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      boolean boolean0 = defaultMapEntry0.equals(abstractMap_SimpleImmutableEntry0);
      assertTrue(boolean0);
  }
}
