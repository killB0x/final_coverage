/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 22:10:26 GMT 2022
 */

package org.jivesoftware.smack.packet;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jivesoftware.smack.packet.DefaultPacketExtension;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultPacketExtension_ESTest extends DefaultPacketExtension_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension("<$~D-|Y", "");
      defaultPacketExtension0.setValue((String) null, "<$~D-|Y");
      String string0 = defaultPacketExtension0.getValue((String) null);
      assertNotNull(string0);
      assertEquals("<$~D-|Y", defaultPacketExtension0.getElementName());
      assertEquals("", defaultPacketExtension0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension("", "");
      defaultPacketExtension0.setValue("", "");
      String string0 = defaultPacketExtension0.getValue("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension((String) null, (String) null);
      String string0 = defaultPacketExtension0.getNamespace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension("", "j+\"HT ");
      String string0 = defaultPacketExtension0.getNamespace();
      assertEquals("", defaultPacketExtension0.getElementName());
      assertEquals("j+\"HT ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension((String) null, (String) null);
      String string0 = defaultPacketExtension0.getElementName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension("", "");
      String string0 = defaultPacketExtension0.getElementName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension("<$~D-|Y", "");
      defaultPacketExtension0.setValue("", "<$~D-|Y");
      String string0 = defaultPacketExtension0.getValue("<$~D-|Y");
      assertNull(string0);
      assertEquals("", defaultPacketExtension0.getNamespace());
      assertEquals("<$~D-|Y", defaultPacketExtension0.getElementName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension("<$~D-|Y", "");
      defaultPacketExtension0.setValue("", "<$~D-|Y");
      Collection<String> collection0 = defaultPacketExtension0.getNames();
      assertEquals("", defaultPacketExtension0.getNamespace());
      assertEquals("<$~D-|Y", defaultPacketExtension0.getElementName());
      assertFalse(collection0.contains("<$~D-|Y"));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension("<$~D-|Y", "");
      defaultPacketExtension0.getNames();
      assertEquals("<$~D-|Y", defaultPacketExtension0.getElementName());
      assertEquals("", defaultPacketExtension0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension("<$~D-|Y", "");
      defaultPacketExtension0.setValue("", "<$~D-|Y");
      defaultPacketExtension0.setValue((String) null, "<$~D-|Y");
      assertEquals("", defaultPacketExtension0.getNamespace());
      assertEquals("<$~D-|Y", defaultPacketExtension0.getElementName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension("", "");
      String string0 = defaultPacketExtension0.getValue("org.jivesoftware.smack.packet.DefaultPacketExtension");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension("<$~D-|Y", "");
      defaultPacketExtension0.setValue("", "<$~D-|Y");
      String string0 = defaultPacketExtension0.toXML();
      assertEquals("<<$~D-|Y xmlns=\"\"><><$~D-|Y</></<$~D-|Y>", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension("<$~D-|Y", "");
      String string0 = defaultPacketExtension0.getNamespace();
      assertEquals("<$~D-|Y", defaultPacketExtension0.getElementName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultPacketExtension defaultPacketExtension0 = new DefaultPacketExtension("</", "</");
      String string0 = defaultPacketExtension0.getElementName();
      assertEquals("</", string0);
  }
}
