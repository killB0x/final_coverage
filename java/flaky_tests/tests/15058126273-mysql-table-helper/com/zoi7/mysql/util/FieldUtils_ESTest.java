/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 19:33:31 GMT 2022
 */

package com.zoi7.mysql.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zoi7.mysql.comment.FieldType;
import com.zoi7.mysql.util.FieldUtils;
import java.lang.reflect.Field;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FieldUtils_ESTest extends FieldUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = FieldUtils.getColumnByField("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = FieldUtils.getColumnByField("<{{A}ZWtaTQy^c");
      assertEquals("<{{_a}_z_wta_t_qy^c", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.isNumber((FieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zoi7.mysql.util.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.isAutoIncrease((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zoi7.mysql.util.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getType((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zoi7.mysql.util.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getColumnByField((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zoi7.mysql.util.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getColumnByField((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zoi7.mysql.util.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getColumn((Field) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zoi7.mysql.util.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = FieldUtils.getColumnByField("com.zoi7.mysql.util.FieldUtils", false);
      assertEquals("com.zoi7.mysql.util._field_utils", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldType fieldType0 = FieldType.DECIMAL;
      boolean boolean0 = FieldUtils.isNumber(fieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldType fieldType0 = FieldType.TIME;
      boolean boolean0 = FieldUtils.isNumber(fieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldType fieldType0 = FieldType.FLOAT;
      boolean boolean0 = FieldUtils.isNumber(fieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldType fieldType0 = FieldType.TINYINT;
      boolean boolean0 = FieldUtils.isNumber(fieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldType fieldType0 = FieldType.SMALLINT;
      boolean boolean0 = FieldUtils.isNumber(fieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldType fieldType0 = FieldType.BIGINT;
      boolean boolean0 = FieldUtils.isNumber(fieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldType fieldType0 = FieldType.DOUBLE;
      boolean boolean0 = FieldUtils.isNumber(fieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldType fieldType0 = FieldType.INTEGER;
      boolean boolean0 = FieldUtils.isNumber(fieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = FieldUtils.getColumnByField("a$V`a!gI=?TXA^6Kz", true);
      assertEquals("A$_V`A!G_I=?_T_X_A^6_KZ", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldUtils fieldUtils0 = new FieldUtils();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getColumn((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zoi7.mysql.util.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = FieldUtils.getColumnByField("");
      assertEquals("", string0);
  }
}
