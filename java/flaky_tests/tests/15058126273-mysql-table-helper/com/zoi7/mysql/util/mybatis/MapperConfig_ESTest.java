/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 19:42:00 GMT 2022
 */

package com.zoi7.mysql.util.mybatis;

import org.junit.Test;
import static org.junit.Assert.*;
import com.zoi7.mysql.util.mybatis.MapperConfig;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapperConfig_ESTest extends MapperConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("", "", "", "");
      assertTrue(mapperConfig0.isUseCache());
      
      mapperConfig0.setUseCache(false);
      boolean boolean0 = mapperConfig0.isUseCache();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("", "", "", "");
      boolean boolean0 = mapperConfig0.isUppercase();
      assertFalse(boolean0);
      assertEquals((-1), mapperConfig0.getMaxLimit());
      assertTrue(mapperConfig0.isUseCache());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapperConfig mapperConfig0 = new MapperConfig("H|fU_]", "H|fU_]", "H|fU_]", true, 0L, "H|fU_]", 0, true, hashMap0);
      mapperConfig0.setXmlOutPut((String) null);
      mapperConfig0.getXmlOutPut();
      assertTrue(mapperConfig0.isUppercase());
      assertTrue(mapperConfig0.isUseCache());
      assertEquals(0, mapperConfig0.getMaxLimit());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("", (String) null, (String) null, true);
      mapperConfig0.setXmlOutPut("");
      mapperConfig0.getXmlOutPut();
      assertFalse(mapperConfig0.isUppercase());
      assertEquals((-1), mapperConfig0.getMaxLimit());
      assertTrue(mapperConfig0.isUseCache());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapperConfig mapperConfig0 = new MapperConfig("Q\"u.", "{>s3$fwx(", "YE*gDp", true, (-1664L), "Q\"u.", (-1355), hashMap0);
      mapperConfig0.setMaxLimit(4232);
      int int0 = mapperConfig0.getMaxLimit();
      assertEquals(4232, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig((String) null, (String) null, (String) null);
      int int0 = mapperConfig0.getMaxLimit();
      assertTrue(mapperConfig0.isUseCache());
      assertEquals((-1), int0);
      assertFalse(mapperConfig0.isUppercase());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapperConfig mapperConfig0 = new MapperConfig("H|fU_]", "H|fU_]", "H|fU_]", true, 0L, "H|fU_]", 0, true, hashMap0);
      mapperConfig0.getMapperPackage();
      assertTrue(mapperConfig0.isUppercase());
      assertEquals(0, mapperConfig0.getMaxLimit());
      assertTrue(mapperConfig0.isUseCache());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("", "", "", true, 2450L, "", 0, false, (Map<String, String>) null);
      mapperConfig0.getMapperPackage();
      assertEquals(2450L, mapperConfig0.getCacheTime());
      assertTrue(mapperConfig0.isUseCache());
      assertEquals(0, mapperConfig0.getMaxLimit());
      assertFalse(mapperConfig0.isUppercase());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapperConfig mapperConfig0 = new MapperConfig("H|fU_]", "H|fU_]", "H|fU_]", true, 0L, "H|fU_]", 0, true, hashMap0);
      mapperConfig0.getEntityPackage();
      assertEquals(0, mapperConfig0.getMaxLimit());
      assertTrue(mapperConfig0.isUseCache());
      assertTrue(mapperConfig0.isUppercase());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("", (String) null, (String) null, true);
      String string0 = mapperConfig0.getEntityPackage();
      assertFalse(mapperConfig0.isUppercase());
      assertNotNull(string0);
      assertTrue(mapperConfig0.isUseCache());
      assertEquals((-1), mapperConfig0.getMaxLimit());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("'fk};hog", (String) null, "'fk};hog", 2228L);
      mapperConfig0.getCustomCachePros();
      assertFalse(mapperConfig0.isUppercase());
      assertEquals(2228L, mapperConfig0.getCacheTime());
      assertEquals((-1), mapperConfig0.getMaxLimit());
      assertTrue(mapperConfig0.isUseCache());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("M=^et2A@ef0^<`N^\"0", "$[#H", "", "$[#H");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("M=^et2A@ef0^<`N^\"0", "");
      mapperConfig0.setCustomCachePros(hashMap0);
      mapperConfig0.getCustomCachePros();
      assertEquals("", mapperConfig0.getXmlOutPut());
      assertEquals("$[#H", mapperConfig0.getCacheClass());
      assertFalse(mapperConfig0.isUppercase());
      assertEquals((-1), mapperConfig0.getMaxLimit());
      assertTrue(mapperConfig0.isUseCache());
      assertEquals("$[#H", mapperConfig0.getMapperPackage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("", "", "", "");
      mapperConfig0.setCacheTime(497L);
      long long0 = mapperConfig0.getCacheTime();
      assertEquals(497L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("r[1e<vi", "", "", false, 1L, "", (-1));
      mapperConfig0.setCacheTime((-435L));
      long long0 = mapperConfig0.getCacheTime();
      assertEquals((-435L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("j+4'ffSRR>e)", "j+4'ffSRR>e)", "j+4'ffSRR>e)", "-LPTEbIh#+6^");
      String string0 = mapperConfig0.getCacheClass();
      assertEquals("j+4'ffSRR>e)", mapperConfig0.getMapperPackage());
      assertEquals("-LPTEbIh#+6^", string0);
      assertFalse(mapperConfig0.isUppercase());
      assertEquals("j+4'ffSRR>e)", mapperConfig0.getXmlOutPut());
      assertEquals("j+4'ffSRR>e)", mapperConfig0.getEntityPackage());
      assertTrue(mapperConfig0.isUseCache());
      assertEquals((-1), mapperConfig0.getMaxLimit());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("", "", "", true, 2450L, "", 0, false, (Map<String, String>) null);
      mapperConfig0.getCacheClass();
      assertFalse(mapperConfig0.isUppercase());
      assertTrue(mapperConfig0.isUseCache());
      assertEquals(0, mapperConfig0.getMaxLimit());
      assertEquals(2450L, mapperConfig0.getCacheTime());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("t;F}R-9;NM V&-", "t;F}R-9;NM V&-", "t;F}R-9;NM V&-", "t;F}R-9;NM V&-");
      mapperConfig0.setMapperPackage("t;F}R-9;NM V&-");
      assertTrue(mapperConfig0.isUseCache());
      assertEquals((-1), mapperConfig0.getMaxLimit());
      assertFalse(mapperConfig0.isUppercase());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("'fk};hog", (String) null, "'fk};hog", 2228L);
      String string0 = mapperConfig0.getMapperPackage();
      assertEquals((-1), mapperConfig0.getMaxLimit());
      assertTrue(mapperConfig0.isUseCache());
      assertEquals(2228L, mapperConfig0.getCacheTime());
      assertFalse(mapperConfig0.isUppercase());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapperConfig mapperConfig0 = new MapperConfig("H|fU_]", "H|fU_]", "H|fU_]", true, 0L, "H|fU_]", 0, true, hashMap0);
      boolean boolean0 = mapperConfig0.isUppercase();
      assertTrue(mapperConfig0.isUseCache());
      assertEquals(0, mapperConfig0.getMaxLimit());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("", "", "");
      mapperConfig0.getCacheTime();
      assertTrue(mapperConfig0.isUseCache());
      assertEquals((-1), mapperConfig0.getMaxLimit());
      assertFalse(mapperConfig0.isUppercase());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("'fk};hog", (String) null, "'fk};hog", 2228L);
      mapperConfig0.setCacheClass((String) null);
      assertTrue(mapperConfig0.isUseCache());
      assertEquals((-1), mapperConfig0.getMaxLimit());
      assertFalse(mapperConfig0.isUppercase());
      assertEquals(2228L, mapperConfig0.getCacheTime());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("B0", "com.zoi7.mysql.util.mybatis.MapperConfig", "com.zoi7.mysql.util.mybatis.MapperConfig", false, 1L);
      assertEquals("B0", mapperConfig0.getEntityPackage());
      assertEquals("com.zoi7.mysql.util.mybatis.MapperConfig", mapperConfig0.getXmlOutPut());
      assertEquals((-1), mapperConfig0.getMaxLimit());
      assertEquals("com.zoi7.mysql.util.mybatis.MapperConfig", mapperConfig0.getMapperPackage());
      assertFalse(mapperConfig0.isUppercase());
      assertEquals(1L, mapperConfig0.getCacheTime());
      assertFalse(mapperConfig0.isUseCache());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("", "", "", true, 2450L, "", 0, false, (Map<String, String>) null);
      mapperConfig0.setEntityPackage("");
      assertFalse(mapperConfig0.isUppercase());
      assertEquals(2450L, mapperConfig0.getCacheTime());
      assertTrue(mapperConfig0.isUseCache());
      assertEquals(0, mapperConfig0.getMaxLimit());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapperConfig mapperConfig0 = new MapperConfig("H|fU_]", "H|fU_]", "H|fU_]", true, 0L, "H|fU_]", 0, true, hashMap0);
      mapperConfig0.getCustomCachePros();
      assertTrue(mapperConfig0.isUppercase());
      assertTrue(mapperConfig0.isUseCache());
      assertEquals(0, mapperConfig0.getMaxLimit());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapperConfig mapperConfig0 = new MapperConfig("H|fU_]", "H|fU_]", "H|fU_]", true, 0L, "H|fU_]", 0, true, hashMap0);
      mapperConfig0.getXmlOutPut();
      assertTrue(mapperConfig0.isUppercase());
      assertEquals(0, mapperConfig0.getMaxLimit());
      assertTrue(mapperConfig0.isUseCache());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("F_}^]AL", "", "");
      boolean boolean0 = mapperConfig0.isUseCache();
      assertEquals("", mapperConfig0.getXmlOutPut());
      assertTrue(boolean0);
      assertEquals("F_}^]AL", mapperConfig0.getEntityPackage());
      assertFalse(mapperConfig0.isUppercase());
      assertEquals((-1), mapperConfig0.getMaxLimit());
      assertEquals("", mapperConfig0.getMapperPackage());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig((String) null, (String) null, (String) null);
      mapperConfig0.getEntityPackage();
      assertFalse(mapperConfig0.isUppercase());
      assertTrue(mapperConfig0.isUseCache());
      assertEquals((-1), mapperConfig0.getMaxLimit());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig("", "", "", true, 2450L, "", 0, false, (Map<String, String>) null);
      int int0 = mapperConfig0.getMaxLimit();
      assertEquals(2450L, mapperConfig0.getCacheTime());
      assertEquals(0, int0);
      assertFalse(mapperConfig0.isUppercase());
      assertTrue(mapperConfig0.isUseCache());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapperConfig mapperConfig0 = new MapperConfig("com.zoi7.mysql.util.mybatis.MapperConfig", "com.zoi7.mysql.util.mybatis.MapperConfig", "com.zoi7.mysql.util.mybatis.MapperConfig", "com.zoi7.mysql.util.mybatis.MapperConfig", hashMap0);
      assertTrue(mapperConfig0.isUseCache());
      assertEquals((-1), mapperConfig0.getMaxLimit());
      assertFalse(mapperConfig0.isUppercase());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig((String) null, (String) null, (String) null, (String) null);
      assertFalse(mapperConfig0.isUppercase());
      
      mapperConfig0.setUppercase(true);
      assertTrue(mapperConfig0.isUppercase());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MapperConfig mapperConfig0 = new MapperConfig((String) null, (String) null, (String) null, (String) null);
      mapperConfig0.getCacheClass();
      assertFalse(mapperConfig0.isUppercase());
      assertEquals((-1), mapperConfig0.getMaxLimit());
      assertTrue(mapperConfig0.isUseCache());
  }
}
