/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 13:13:06 GMT 2022
 */

package com.insightml.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.data.AnonymousFeaturesConfig;
import com.insightml.data.FeaturesConfig;
import com.insightml.data.SimpleDataset;
import com.insightml.data.features.FeaturesConsumer;
import com.insightml.data.features.FeaturesMapBuilder;
import com.insightml.data.features.IFeatureProvider;
import com.insightml.data.features.SimpleFeaturesProvider;
import com.insightml.data.features.selection.FeatureFilterFactory;
import com.insightml.data.features.selection.FeatureStatisticFilterFactory;
import com.insightml.data.features.selection.IgnoreFeatureFilter;
import com.insightml.data.features.stats.SplitGain;
import com.insightml.data.samples.SelectionSample;
import com.insightml.data.samples.SimpleSample;
import com.insightml.utils.Arguments;
import java.io.Serializable;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleDataset_ESTest extends SimpleDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashSet<SelectionSample<Object, SimpleSample>> hashSet0 = new HashSet<SelectionSample<Object, SimpleSample>>(0);
      SimpleDataset<SelectionSample<Object, SimpleSample>, SimpleSample> simpleDataset0 = new SimpleDataset<SelectionSample<Object, SimpleSample>, SimpleSample>("v[PXep=", hashSet0, (FeaturesConfig<SelectionSample<Object, SimpleSample>, SimpleSample>) null);
      Integer integer0 = new Integer((-1851));
      // Undeclared exception!
      try { 
        simpleDataset0.loadTraining(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String@0000000002                        (null:-1 : SimpleDataset.java:65)
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample> simpleDataset_SimpleSamplesFeatureProvider0 = new SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample>();
      String string0 = simpleDataset_SimpleSamplesFeatureProvider0.getName();
      assertEquals("SimpleSamplesFeatureProvider", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample> simpleDataset_SimpleSamplesFeatureProvider0 = new SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample>();
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      // Undeclared exception!
      try { 
        simpleDataset_SimpleSamplesFeatureProvider0.apply((SimpleSample) null, (FeaturesConsumer) featuresMapBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.data.SimpleDataset$SimpleSamplesFeatureProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashSet<SimpleSample> hashSet0 = new HashSet<SimpleSample>();
      Object[] objectArray0 = new Object[9];
      float[] floatArray0 = new float[3];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SimpleSamplesFeatureProvider";
      stringArray0[1] = "SimpleSamplesFeatureProvider";
      stringArray0[2] = "SimpleSamplesFeatureProvider";
      SimpleSample simpleSample0 = new SimpleSample(14, objectArray0, floatArray0, stringArray0);
      hashSet0.add(simpleSample0);
      // Undeclared exception!
      try { 
        SimpleDataset.create((Collection<SimpleSample>) hashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.insightml.data.AnonymousFeaturesConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample> simpleDataset_SimpleSamplesFeatureProvider0 = new SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample>();
      String[] stringArray0 = new String[7];
      AnonymousFeaturesConfig<SimpleSample, SelectionSample<Object, Object>> anonymousFeaturesConfig0 = new AnonymousFeaturesConfig<SimpleSample, SelectionSample<Object, Object>>(stringArray0, simpleDataset_SimpleSamplesFeatureProvider0, 1938.259F, false);
      SimpleDataset<SimpleSample, SelectionSample<Object, Object>> simpleDataset0 = new SimpleDataset<SimpleSample, SelectionSample<Object, Object>>("F?ZNM?'OemD", (Collection<SimpleSample>) null, anonymousFeaturesConfig0);
      simpleDataset0.loadAll();
      assertEquals("SimpleSamplesFeatureProvider", simpleDataset_SimpleSamplesFeatureProvider0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample> simpleDataset_SimpleSamplesFeatureProvider0 = new SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample>();
      ArrayDeque<SimpleSample> arrayDeque0 = new ArrayDeque<SimpleSample>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IFeatureProvider<SimpleSample> iFeatureProvider0 = AnonymousFeaturesConfig.createFromFrequencies((SimpleFeaturesProvider<SimpleSample>) simpleDataset_SimpleSamplesFeatureProvider0, 2424, 105.12392F, true, (Map<String, Integer>) hashMap0);
      SplitGain splitGain0 = new SplitGain(1020, 1020, (-1.0));
      FeatureStatisticFilterFactory featureStatisticFilterFactory0 = new FeatureStatisticFilterFactory(splitGain0, 105.12392F, true, 4147);
      AnonymousFeaturesConfig<SimpleSample, SimpleSample> anonymousFeaturesConfig0 = new AnonymousFeaturesConfig<SimpleSample, SimpleSample>(iFeatureProvider0, featureStatisticFilterFactory0);
      SimpleDataset<SimpleSample, SimpleSample> simpleDataset0 = new SimpleDataset<SimpleSample, SimpleSample>(")@FL+C", arrayDeque0, anonymousFeaturesConfig0);
      String[] stringArray0 = new String[4];
      Arguments arguments0 = new Arguments(stringArray0);
      simpleDataset0.getFeaturesConfig(arguments0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample> simpleDataset_SimpleSamplesFeatureProvider0 = new SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample>();
      LinkedList<SimpleSample> linkedList0 = new LinkedList<SimpleSample>();
      IgnoreFeatureFilter ignoreFeatureFilter0 = new IgnoreFeatureFilter();
      // Undeclared exception!
      try { 
        SimpleDataset.create((Collection<SimpleSample>) linkedList0, (SimpleFeaturesProvider<SimpleSample>) simpleDataset_SimpleSamplesFeatureProvider0, (FeatureFilterFactory) ignoreFeatureFilter0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.insightml.data.AnonymousFeaturesConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleDataset.create((Collection<SimpleSample>) null, (SimpleFeaturesProvider<SimpleSample>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.data.SimpleDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayDeque<SimpleSample> arrayDeque0 = new ArrayDeque<SimpleSample>();
      SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample> simpleDataset_SimpleSamplesFeatureProvider0 = new SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample>();
      // Undeclared exception!
      try { 
        SimpleDataset.create((Collection<SimpleSample>) arrayDeque0, (SimpleFeaturesProvider<SimpleSample>) simpleDataset_SimpleSamplesFeatureProvider0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.insightml.data.AnonymousFeaturesConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleDataset<SimpleSample, Stream<Object>> simpleDataset0 = null;
      try {
        simpleDataset0 = new SimpleDataset<SimpleSample, Stream<Object>>((String) null, (Collection<SimpleSample>) null, (FeaturesConfig<SimpleSample, Stream<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<SelectionSample<SimpleSample, Object>> vector0 = new Vector<SelectionSample<SimpleSample, Object>>();
      SimpleDataset<SelectionSample<SimpleSample, Object>, Object> simpleDataset0 = null;
      try {
        simpleDataset0 = new SimpleDataset<SelectionSample<SimpleSample, Object>, Object>("", vector0, (FeaturesConfig<SelectionSample<SimpleSample, Object>, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String@0000000002                        (AbstractDataset.java:32 : AbstractModule.java:28)
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample> simpleDataset_SimpleSamplesFeatureProvider0 = new SimpleDataset.SimpleSamplesFeatureProvider<SimpleSample>();
      IgnoreFeatureFilter ignoreFeatureFilter0 = new IgnoreFeatureFilter();
      // Undeclared exception!
      try { 
        SimpleDataset.create((Collection<SimpleSample>) null, (SimpleFeaturesProvider<SimpleSample>) simpleDataset_SimpleSamplesFeatureProvider0, (FeatureFilterFactory) ignoreFeatureFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.data.SimpleDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashSet<SelectionSample<Object, SimpleSample>> hashSet0 = new HashSet<SelectionSample<Object, SimpleSample>>(29);
      SimpleDataset<SelectionSample<Object, SimpleSample>, SimpleSample> simpleDataset0 = new SimpleDataset<SelectionSample<Object, SimpleSample>, SimpleSample>("_DR4WL{c73", hashSet0, (FeaturesConfig<SelectionSample<Object, SimpleSample>, SimpleSample>) null);
      Integer integer0 = new Integer(29);
      // Undeclared exception!
      try { 
        simpleDataset0.loadTraining(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String@0000000002                        (null:-1 : SimpleDataset.java:65)
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<SelectionSample<Object, Object>> vector0 = new Vector<SelectionSample<Object, Object>>(0);
      SimpleDataset<SelectionSample<Object, Object>, SimpleSample> simpleDataset0 = new SimpleDataset<SelectionSample<Object, Object>, SimpleSample>("SE iuQVjy", vector0, (FeaturesConfig<SelectionSample<Object, Object>, SimpleSample>) null);
      Integer integer0 = new Integer(0);
      Iterable<SelectionSample<Object, Object>> iterable0 = simpleDataset0.loadTraining(integer0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PriorityQueue<SelectionSample<SimpleSample, SimpleSample>> priorityQueue0 = new PriorityQueue<SelectionSample<SimpleSample, SimpleSample>>();
      SimpleDataset<SelectionSample<SimpleSample, SimpleSample>, SimpleSample> simpleDataset0 = new SimpleDataset<SelectionSample<SimpleSample, SimpleSample>, SimpleSample>("com.insightml.data.features.selection.IgnoreFeatureFilter", priorityQueue0, (FeaturesConfig<SelectionSample<SimpleSample, SimpleSample>, SimpleSample>) null);
      // Undeclared exception!
      try { 
        simpleDataset0.pipeline();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.data.PreprocessingPipelineSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<SimpleSample> stack0 = new Stack<SimpleSample>();
      stack0.add((SimpleSample) null);
      // Undeclared exception!
      try { 
        SimpleDataset.create((Collection<SimpleSample>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.data.SimpleDataset$SimpleSamplesFeatureProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<SimpleSample> stack0 = new Stack<SimpleSample>();
      SimpleDataset<SimpleSample, SimpleSample> simpleDataset0 = new SimpleDataset<SimpleSample, SimpleSample>("gOLVdiJ_", stack0, (FeaturesConfig<SimpleSample, SimpleSample>) null);
      Collection<SimpleSample> collection0 = simpleDataset0.loadAll();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stack<SelectionSample<Object, Object>> stack0 = new Stack<SelectionSample<Object, Object>>();
      SimpleDataset<SelectionSample<Object, Object>, Object> simpleDataset0 = new SimpleDataset<SelectionSample<Object, Object>, Object>("tH8; 2rv}g.Qo.5J_8K", stack0, (FeaturesConfig<SelectionSample<Object, Object>, Object>) null);
      Serializable[] serializableArray0 = new Serializable[0];
      Arguments arguments0 = new Arguments(serializableArray0);
      FeaturesConfig<SelectionSample<Object, Object>, Object> featuresConfig0 = simpleDataset0.getFeaturesConfig(arguments0);
      assertNull(featuresConfig0);
  }
}
