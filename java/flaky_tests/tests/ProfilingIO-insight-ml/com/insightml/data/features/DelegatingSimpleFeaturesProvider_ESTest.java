/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 13:28:10 GMT 2022
 */

package com.insightml.data.features;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.data.features.DelegatingSimpleFeaturesProvider;
import com.insightml.data.features.FeaturesMapBuilder;
import com.insightml.data.features.SimpleFeaturesProvider;
import com.insightml.data.samples.SimpleSample;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DelegatingSimpleFeaturesProvider_ESTest extends DelegatingSimpleFeaturesProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleFeaturesProvider<SimpleSample>[] simpleFeaturesProviderArray0 = (SimpleFeaturesProvider<SimpleSample>[]) Array.newInstance(SimpleFeaturesProvider.class, 4);
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider0 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      // Undeclared exception!
      try { 
        delegatingSimpleFeaturesProvider0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.data.features.DelegatingSimpleFeaturesProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleFeaturesProvider<SimpleSample>[] simpleFeaturesProviderArray0 = (SimpleFeaturesProvider<SimpleSample>[]) Array.newInstance(SimpleFeaturesProvider.class, 4);
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider0 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      simpleFeaturesProviderArray0[0] = (SimpleFeaturesProvider<SimpleSample>) delegatingSimpleFeaturesProvider0;
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider1 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      simpleFeaturesProviderArray0[1] = (SimpleFeaturesProvider<SimpleSample>) delegatingSimpleFeaturesProvider1;
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider2 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      simpleFeaturesProviderArray0[2] = (SimpleFeaturesProvider<SimpleSample>) delegatingSimpleFeaturesProvider2;
      // Undeclared exception!
      try { 
        delegatingSimpleFeaturesProvider1.getName();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleFeaturesProvider<SimpleSample>[] simpleFeaturesProviderArray0 = (SimpleFeaturesProvider<SimpleSample>[]) Array.newInstance(SimpleFeaturesProvider.class, 0);
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider0 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      delegatingSimpleFeaturesProvider0.apply((SimpleSample) null, featuresMapBuilder0);
      assertEquals(0, featuresMapBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleFeaturesProvider<SimpleSample>[] simpleFeaturesProviderArray0 = (SimpleFeaturesProvider<SimpleSample>[]) Array.newInstance(SimpleFeaturesProvider.class, 1);
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider0 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      // Undeclared exception!
      try { 
        delegatingSimpleFeaturesProvider0.apply((SimpleSample) null, featuresMapBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.data.features.DelegatingSimpleFeaturesProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleFeaturesProvider<SimpleSample>[] simpleFeaturesProviderArray0 = (SimpleFeaturesProvider<SimpleSample>[]) Array.newInstance(SimpleFeaturesProvider.class, 0);
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider0 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      String string0 = delegatingSimpleFeaturesProvider0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleFeaturesProvider<SimpleSample>[] simpleFeaturesProviderArray0 = (SimpleFeaturesProvider<SimpleSample>[]) Array.newInstance(SimpleFeaturesProvider.class, 2);
      SimpleFeaturesProvider<SimpleSample> simpleFeaturesProvider0 = (SimpleFeaturesProvider<SimpleSample>) mock(SimpleFeaturesProvider.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(simpleFeaturesProvider0).getName();
      simpleFeaturesProviderArray0[0] = simpleFeaturesProvider0;
      simpleFeaturesProviderArray0[1] = simpleFeaturesProvider0;
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider0 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      delegatingSimpleFeaturesProvider0.getName();
      featuresMapBuilder0.add(".?cq0?`", 0.0);
      delegatingSimpleFeaturesProvider0.getName();
      featuresMapBuilder0.add("UbEKd%[[", 0.0);
      delegatingSimpleFeaturesProvider0.apply((SimpleSample) null, featuresMapBuilder0);
      delegatingSimpleFeaturesProvider0.apply((SimpleSample) null, featuresMapBuilder0);
      String string0 = delegatingSimpleFeaturesProvider0.getName();
      assertEquals("null+null", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleFeaturesProvider<SimpleSample>[] simpleFeaturesProviderArray0 = (SimpleFeaturesProvider<SimpleSample>[]) Array.newInstance(SimpleFeaturesProvider.class, 4);
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider0 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      simpleFeaturesProviderArray0[0] = (SimpleFeaturesProvider<SimpleSample>) delegatingSimpleFeaturesProvider0;
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider1 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      simpleFeaturesProviderArray0[1] = (SimpleFeaturesProvider<SimpleSample>) delegatingSimpleFeaturesProvider1;
      SimpleFeaturesProvider<SimpleSample>[] simpleFeaturesProviderArray1 = (SimpleFeaturesProvider<SimpleSample>[]) Array.newInstance(SimpleFeaturesProvider.class, 1);
      simpleFeaturesProviderArray1[0] = simpleFeaturesProviderArray0[1];
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider2 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray1);
      simpleFeaturesProviderArray0[2] = (SimpleFeaturesProvider<SimpleSample>) delegatingSimpleFeaturesProvider2;
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider3 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      simpleFeaturesProviderArray0[3] = (SimpleFeaturesProvider<SimpleSample>) delegatingSimpleFeaturesProvider3;
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider4 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      assertFalse(delegatingSimpleFeaturesProvider4.equals((Object)delegatingSimpleFeaturesProvider1));
  }
}
