/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 13:43:10 GMT 2022
 */

package com.insightml.data.features;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.data.features.FeaturesMapBuilder;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FeaturesMapBuilder_ESTest extends FeaturesMapBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      featuresMapBuilder0.add((String) null, 865.94538783698);
      int int0 = featuresMapBuilder0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      featuresMapBuilder0.add("com.insightml.data.features.FeaturesMapBuilder", 0);
      Double double0 = featuresMapBuilder0.get((CharSequence) "com.insightml.data.features.FeaturesMapBuilder");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      featuresMapBuilder0.add((String) null, 865.94538783698);
      Double double0 = featuresMapBuilder0.get((CharSequence) null);
      assertEquals(865.94538783698, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      featuresMapBuilder0.add("'f5<>Gu&DoC.~IwIV", (-3202.754134702158));
      Double double0 = featuresMapBuilder0.get((CharSequence) "'f5<>Gu&DoC.~IwIV");
      assertEquals((-3202.754134702158), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      featuresMapBuilder0.add((String) null, 865.94538783698);
      Map<String, Double> map0 = featuresMapBuilder0.get();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      featuresMapBuilder0.add("com.insightml.data.features.FeaturesMapBuilder", 0);
      // Undeclared exception!
      try { 
        featuresMapBuilder0.add("com.insightml.data.features.FeaturesMapBuilder", 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // com.insightml.data.features.FeaturesMapBuilder
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      int int0 = featuresMapBuilder0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      Double double0 = featuresMapBuilder0.get((CharSequence) "com.insightml.data.features.FeaturesMapBuilder");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FeaturesMapBuilder featuresMapBuilder0 = new FeaturesMapBuilder();
      Map<String, Double> map0 = featuresMapBuilder0.get();
      assertTrue(map0.isEmpty());
  }
}
