/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 13:37:44 GMT 2022
 */

package com.insightml.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.data.AnonymousFeaturesConfig;
import com.insightml.data.FeaturesConfig;
import com.insightml.data.SimpleDataset;
import com.insightml.data.features.DelegatingSimpleFeaturesProvider;
import com.insightml.data.features.SimpleFeaturesProvider;
import com.insightml.data.samples.SimpleSample;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractDataset_ESTest extends AbstractDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedHashSet<SimpleSample> linkedHashSet0 = new LinkedHashSet<SimpleSample>();
      String[] stringArray0 = new String[4];
      SimpleFeaturesProvider<SimpleSample>[] simpleFeaturesProviderArray0 = (SimpleFeaturesProvider<SimpleSample>[]) Array.newInstance(SimpleFeaturesProvider.class, 8);
      SimpleFeaturesProvider<SimpleSample> simpleFeaturesProvider0 = (SimpleFeaturesProvider<SimpleSample>) mock(SimpleFeaturesProvider.class, new ViolatedAssumptionAnswer());
      doReturn("", ";1^UfO6 nU%v3FGZ:d]", "", (String) null, "").when(simpleFeaturesProvider0).getName();
      simpleFeaturesProviderArray0[0] = simpleFeaturesProvider0;
      simpleFeaturesProviderArray0[1] = simpleFeaturesProvider0;
      simpleFeaturesProviderArray0[2] = simpleFeaturesProvider0;
      simpleFeaturesProviderArray0[3] = simpleFeaturesProvider0;
      simpleFeaturesProviderArray0[4] = simpleFeaturesProvider0;
      simpleFeaturesProviderArray0[5] = simpleFeaturesProvider0;
      simpleFeaturesProviderArray0[6] = simpleFeaturesProvider0;
      simpleFeaturesProviderArray0[7] = simpleFeaturesProvider0;
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider0 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      AnonymousFeaturesConfig<SimpleSample, Object> anonymousFeaturesConfig0 = new AnonymousFeaturesConfig<SimpleSample, Object>(stringArray0, delegatingSimpleFeaturesProvider0, 0.0F, true);
      SimpleDataset<SimpleSample, Object> simpleDataset0 = new SimpleDataset<SimpleSample, Object>(";1^UfO6 nU%v3FGZ:d]", linkedHashSet0, anonymousFeaturesConfig0);
      Iterable<SimpleSample> iterable0 = simpleDataset0.loadAll();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ArrayList<SimpleSample> arrayList0 = new ArrayList<SimpleSample>();
      SimpleDataset<SimpleSample, SimpleSample> simpleDataset0 = new SimpleDataset<SimpleSample, SimpleSample>(":{&\"e:5ui-@R~ca", arrayList0, (FeaturesConfig<SimpleSample, SimpleSample>) null);
      // Undeclared exception!
      try { 
        simpleDataset0.getReport();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/math3/util/Pair
         //
         verifyException("com.insightml.data.AbstractDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayList<SimpleSample> arrayList0 = new ArrayList<SimpleSample>();
      String string0 = ":{&\"5:\\ui-@R~.a";
      SimpleDataset<SimpleSample, SimpleSample> simpleDataset0 = new SimpleDataset<SimpleSample, SimpleSample>(string0, arrayList0, (FeaturesConfig<SimpleSample, SimpleSample>) null);
      // Undeclared exception!
      try { 
        simpleDataset0.loadValidation();
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.data.AbstractDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ArrayList<SimpleSample> arrayList0 = new ArrayList<SimpleSample>();
      SimpleDataset<SimpleSample, SimpleSample> simpleDataset0 = new SimpleDataset<SimpleSample, SimpleSample>("r!DJ", arrayList0, (FeaturesConfig<SimpleSample, SimpleSample>) null);
      // Undeclared exception!
      try { 
        simpleDataset0.pipeline();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.data.PreprocessingPipelineSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayList<SimpleSample> arrayList0 = new ArrayList<SimpleSample>();
      SimpleDataset<SimpleSample, SimpleSample> simpleDataset0 = new SimpleDataset<SimpleSample, SimpleSample>("cSu:4]w", arrayList0, (FeaturesConfig<SimpleSample, SimpleSample>) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        simpleDataset0.loadTest(integer0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.data.AbstractDataset", e);
      }
  }
}
