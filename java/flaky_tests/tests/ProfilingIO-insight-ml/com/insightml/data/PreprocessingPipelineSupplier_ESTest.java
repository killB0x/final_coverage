/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 13:20:13 GMT 2022
 */

package com.insightml.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.data.AnonymousFeaturesConfig;
import com.insightml.data.FeaturesConfig;
import com.insightml.data.PreprocessingPipelineSupplier;
import com.insightml.data.features.DelegatingSimpleFeaturesProvider;
import com.insightml.data.features.SimpleFeaturesProvider;
import com.insightml.data.samples.SimpleSample;
import com.insightml.utils.Arguments;
import com.insightml.utils.io.serialization.ISerializer;
import java.io.Serializable;
import java.lang.reflect.Array;
import java.nio.file.LinkOption;
import java.util.LinkedList;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PreprocessingPipelineSupplier_ESTest extends PreprocessingPipelineSupplier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<SimpleSample> linkedList0 = new LinkedList<SimpleSample>();
      TreeSet<SimpleSample> treeSet0 = new TreeSet<SimpleSample>(linkedList0);
      String[] stringArray0 = new String[7];
      SimpleFeaturesProvider<SimpleSample>[] simpleFeaturesProviderArray0 = (SimpleFeaturesProvider<SimpleSample>[]) Array.newInstance(SimpleFeaturesProvider.class, 2);
      SimpleFeaturesProvider<SimpleSample> simpleFeaturesProvider0 = (SimpleFeaturesProvider<SimpleSample>) mock(SimpleFeaturesProvider.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(simpleFeaturesProvider0).getName();
      simpleFeaturesProviderArray0[0] = simpleFeaturesProvider0;
      simpleFeaturesProviderArray0[1] = simpleFeaturesProvider0;
      DelegatingSimpleFeaturesProvider<SimpleSample> delegatingSimpleFeaturesProvider0 = new DelegatingSimpleFeaturesProvider<SimpleSample>(simpleFeaturesProviderArray0);
      AnonymousFeaturesConfig<SimpleSample, LinkOption> anonymousFeaturesConfig0 = new AnonymousFeaturesConfig<SimpleSample, LinkOption>(stringArray0, delegatingSimpleFeaturesProvider0, 1.0F, false);
      ISerializer iSerializer0 = mock(ISerializer.class, new ViolatedAssumptionAnswer());
      String[] stringArray1 = new String[2];
      Arguments arguments0 = new Arguments(stringArray1);
      PreprocessingPipelineSupplier<SimpleSample> preprocessingPipelineSupplier0 = null;
      try {
        preprocessingPipelineSupplier0 = new PreprocessingPipelineSupplier<SimpleSample>(treeSet0, anonymousFeaturesConfig0, iSerializer0, arguments0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/math3/util/Pair
         //
         verifyException("com.insightml.data.AnonymousFeaturesConfig$SimpleFeatureProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ISerializer iSerializer0 = mock(ISerializer.class, new ViolatedAssumptionAnswer());
      Serializable[] serializableArray0 = new Serializable[4];
      Arguments arguments0 = new Arguments(serializableArray0);
      PreprocessingPipelineSupplier<SimpleSample> preprocessingPipelineSupplier0 = null;
      try {
        preprocessingPipelineSupplier0 = new PreprocessingPipelineSupplier<SimpleSample>((Iterable<SimpleSample>) null, (FeaturesConfig<SimpleSample, ?>) null, iSerializer0, arguments0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.data.PreprocessingPipelineSupplier", e);
      }
  }
}
