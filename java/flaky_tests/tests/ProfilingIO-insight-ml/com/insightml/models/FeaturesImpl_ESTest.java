/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 12:58:17 GMT 2022
 */

package com.insightml.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.models.FeaturesImpl;
import com.insightml.utils.types.DoublePair;
import java.util.Iterator;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FeaturesImpl_ESTest extends FeaturesImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FeaturesImpl featuresImpl0 = new FeaturesImpl();
      Iterator<DoublePair<String>> iterator0 = featuresImpl0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FeaturesImpl featuresImpl0 = new FeaturesImpl();
      featuresImpl0.add("(", (-548.54836));
      featuresImpl0.add("(", (-548.54836));
      // Undeclared exception!
      try { 
        featuresImpl0.asMap();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // (
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FeaturesImpl featuresImpl0 = new FeaturesImpl();
      featuresImpl0.add("", 249.49);
      Map<String, Double> map0 = featuresImpl0.asMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FeaturesImpl featuresImpl0 = new FeaturesImpl();
      featuresImpl0.add("(", (-548.54836));
      double[] doubleArray0 = featuresImpl0.toDoubleArray();
      assertArrayEquals(new double[] {(-548.54836)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FeaturesImpl featuresImpl0 = new FeaturesImpl();
      double[] doubleArray0 = featuresImpl0.toDoubleArray();
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FeaturesImpl featuresImpl0 = new FeaturesImpl();
      featuresImpl0.add("", 249.49);
      String[] stringArray0 = featuresImpl0.featureNames();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FeaturesImpl featuresImpl0 = new FeaturesImpl();
      String[] stringArray0 = featuresImpl0.featureNames();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FeaturesImpl featuresImpl0 = new FeaturesImpl();
      FeaturesImpl featuresImpl1 = featuresImpl0.copy();
      assertNotSame(featuresImpl1, featuresImpl0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FeaturesImpl featuresImpl0 = new FeaturesImpl();
      Map<String, Double> map0 = featuresImpl0.asMap();
      assertTrue(map0.isEmpty());
  }
}
