/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 12:11:09 GMT 2022
 */

package com.insightml.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.math.Matrices;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matrices_ESTest extends Matrices_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 536.71696907;
      doubleArray0[0] = doubleArray1;
      double[][] doubleArray2 = Matrices.minus(doubleArray0, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[6];
      doubleArray0[1] = doubleArray1;
      double[][] doubleArray2 = new double[5][5];
      // Undeclared exception!
      try { 
        Matrices.minus(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[][] doubleArray2 = Matrices.transpose(doubleArray0);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = Matrices.fill(0, 0, (double) 0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      double[][] doubleArray1 = Matrices.copy(doubleArray0);
      // Undeclared exception!
      try { 
        Matrices.minus(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = Matrices.column(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.transpose((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      // Undeclared exception!
      try { 
        Matrices.transpose(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      // Undeclared exception!
      try { 
        Matrices.mult(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.math.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        Matrices.mult(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String@0000000001                        (Matrices.java:84 : Vectors.java:88)
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = Matrices.fill(30, 324, 1211.986673);
      Matrices.mult(doubleArray0, (-2519.629));
      // Undeclared exception!
      Matrices.mult(doubleArray0, (double) 324);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.mult((double[][]) null, 1426.839548571708);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.minus((double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      Matrices.fill(1560, 820, (Random) mockRandom0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.fill(754, 754, (Random) null, (double) 754, (double) 754);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrices.fill((-15), (-15), (Random) mockRandom0, (double) (-15), (double) (-15));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -15
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      Matrices.fill(2052, 2052, (double) 2052);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.fill((-490), (-490), (double) (-490));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -490
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.copy((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.column((float[][]) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArray0 = new float[5][4];
      // Undeclared exception!
      try { 
        Matrices.column(floatArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 4
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.column((double[][]) null, 328);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      double[][] doubleArray1 = Matrices.mult(doubleArray0, 0.0);
      Matrices.column(doubleArray1, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = Matrices.fill(36, 36, (double) 36);
      // Undeclared exception!
      try { 
        Matrices.column(doubleArray0, 36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 36 out of bounds for length 36
         //
         verifyException("com.insightml.math.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      double[][] doubleArray1 = Matrices.copy(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = Matrices.mult(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = Matrices.fill(0, 0, (Random) mockRandom0, (double) 0, (double) 0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      double[] doubleArray2 = Matrices.mult(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[][] floatArray0 = new float[9][4];
      float[] floatArray1 = Matrices.column(floatArray0, 0);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[][] floatArray0 = new float[0][6];
      float[] floatArray1 = Matrices.column(floatArray0, 4003);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[][] doubleArray1 = Matrices.transpose(doubleArray0);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = Matrices.fill(1, 1, (Random) mockRandom0, (double) 1, 1426.839548571708);
      assertEquals(1, doubleArray0.length);
  }
}
