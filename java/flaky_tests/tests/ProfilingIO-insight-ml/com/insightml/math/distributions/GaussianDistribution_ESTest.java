/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 12:41:49 GMT 2022
 */

package com.insightml.math.distributions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.math.distributions.GaussianDistribution;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GaussianDistribution_ESTest extends GaussianDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0);
      double double0 = gaussianDistribution0.sample(mockRandom0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, gaussianDistribution0.expectedValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0, true);
      // Undeclared exception!
      try { 
        gaussianDistribution0.logLikelihood(4323.212546);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/math3/util/FastMath
         //
         verifyException("com.insightml.math.distributions.GaussianDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0);
      double double0 = gaussianDistribution0.standardDeviation();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, gaussianDistribution0.maxLikelihood(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 740.3047;
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0);
      double double0 = gaussianDistribution0.standardDeviation();
      assertEquals(523.4744735142727, double0, 0.01);
      assertEquals(370.15235, gaussianDistribution0.maxLikelihood(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution();
      double double0 = gaussianDistribution0.sample(mockRandom0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3192.402838042;
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0, false);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = gaussianDistribution0.sample(mockRandom0);
      assertEquals(532.0671396736667, double0, 0.01);
      assertEquals(1303.293001102631, gaussianDistribution0.standardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-2575.345793667);
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0, true);
      MockRandom mockRandom0 = new MockRandom(0L);
      double double0 = gaussianDistribution0.sample(mockRandom0);
      assertEquals(1115.1574404225098, gaussianDistribution0.standardDeviation(), 0.01);
      assertEquals((-643.83644841675), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(0.01, 0.01);
      double double0 = gaussianDistribution0.maxLikelihood();
      assertEquals(0.01, gaussianDistribution0.standardDeviation(), 0.01);
      assertEquals(0.01, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution((-1389.0169364570481), 906.8868487);
      double double0 = gaussianDistribution0.maxLikelihood();
      assertEquals(906.8868487, gaussianDistribution0.standardDeviation(), 0.01);
      assertEquals((-1389.0169364570481), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(1432.743562003, 6.283185307179586);
      double double0 = gaussianDistribution0.klDivergence(gaussianDistribution0);
      assertEquals(6.283185307179586, gaussianDistribution0.standardDeviation(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1432.743562003, gaussianDistribution0.expectedValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.0;
      GaussianDistribution gaussianDistribution1 = new GaussianDistribution(doubleArray0);
      double double0 = gaussianDistribution0.klDivergence(gaussianDistribution1);
      assertEquals(0.7559289460184544, gaussianDistribution1.standardDeviation(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0.2857142857142857, gaussianDistribution1.maxLikelihood(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3514.2552577318;
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0, false);
      double double0 = gaussianDistribution0.expectedValue();
      assertEquals(390.4728064146445, double0, 0.01);
      assertEquals(1171.4184192439334, gaussianDistribution0.standardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (-79.14456669);
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0, false);
      double double0 = gaussianDistribution0.expectedValue();
      assertEquals(32.3106340506957, gaussianDistribution0.standardDeviation(), 0.01);
      assertEquals((-13.190761115), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0);
      // Undeclared exception!
      try { 
        gaussianDistribution0.sample((Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.math.distributions.GaussianDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = null;
      try {
        gaussianDistribution0 = new GaussianDistribution((double[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.math.distributions.GaussianDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = null;
      try {
        gaussianDistribution0 = new GaussianDistribution((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.math.distributions.GaussianDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(0.01, 0.01);
      double double0 = gaussianDistribution0.probability(0.01);
      assertEquals(39.89422804014327, double0, 0.01);
      assertEquals(0.01, gaussianDistribution0.standardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution();
      double double0 = gaussianDistribution0.probability((-1569.4669));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = gaussianDistribution0.probability(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, gaussianDistribution0.standardDeviation(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, gaussianDistribution0.expectedValue(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution();
      double double0 = gaussianDistribution0.probability(0.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0);
      // Undeclared exception!
      try { 
        gaussianDistribution0.logLikelihood(116.291);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/math3/util/FastMath
         //
         verifyException("com.insightml.math.distributions.GaussianDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0);
      double double0 = gaussianDistribution0.maxLikelihood();
      assertEquals(Double.NaN, gaussianDistribution0.standardDeviation(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0);
      double double0 = gaussianDistribution0.expectedValue();
      assertEquals(Double.NaN, gaussianDistribution0.standardDeviation(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(doubleArray0);
      // Undeclared exception!
      try { 
        gaussianDistribution0.confidenceInterval(Double.NaN);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.insightml.math.types.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution(1432.743562003, 6.283185307179586);
      String string0 = gaussianDistribution0.toString();
      assertEquals("Gaussian{1432.74356 +/- 6.28319, 39.47842}", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution((-3237.649724326766), Double.NEGATIVE_INFINITY);
      double double0 = gaussianDistribution0.standardDeviation();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals((-3237.649724326766), gaussianDistribution0.expectedValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GaussianDistribution gaussianDistribution0 = new GaussianDistribution();
      // Undeclared exception!
      try { 
        gaussianDistribution0.klDivergence((GaussianDistribution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.math.distributions.GaussianDistribution", e);
      }
  }
}
