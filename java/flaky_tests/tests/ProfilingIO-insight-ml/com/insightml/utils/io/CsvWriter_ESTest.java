/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 12:22:17 GMT 2022
 */

package com.insightml.utils.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.utils.io.CsvWriter;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CsvWriter_ESTest extends CsvWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = CsvWriter.formatLine(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        CsvWriter.formatLine((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.io.CsvWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[11];
      MockFile mockFile0 = new MockFile("\"0\";\"0\";\"0\";\"0\";\"0\";\"0\";\"0\";\"0\";\"0\";\"0\";\"0\"", "\"0\";\"0\";\"0\";\"0\";\"0\";\"0\";\"0\";\"0\";\"0\";\"0\";\"0\"");
      CsvWriter csvWriter0 = new CsvWriter(mockFile0, 'z', false, stringArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) csvWriter0;
      // Undeclared exception!
      try { 
        CsvWriter.formatLine(objectArray0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // com.insightml.utils.io.CsvWriter
         //
         verifyException("com.insightml.utils.types.AbstractClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CD3H@A", "CD3H@A");
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CsvWriter csvWriter0 = new CsvWriter(mockFile0, '.', false, stringArray0);
      // Undeclared exception!
      try { 
        csvWriter0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("com.insightml.utils.io.CsvWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MockFile mockFile0 = new MockFile("expression failed");
      CsvWriter csvWriter0 = new CsvWriter(mockFile0, 'u', false, stringArray0);
      // Undeclared exception!
      try { 
        csvWriter0.addLine((Map<? extends CharSequence, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.io.CsvWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[3];
      File file0 = MockFile.createTempFile("@TbDr>T.S", "@TbDr>T.S");
      CsvWriter csvWriter0 = new CsvWriter(file0, 'd', false, stringArray0);
      csvWriter0.close();
      HashMap<CharSequence, Double> hashMap0 = new HashMap<CharSequence, Double>();
      // Undeclared exception!
      try { 
        csvWriter0.addLine(hashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("com.insightml.utils.io.CsvWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[6];
      CsvWriter csvWriter0 = null;
      try {
        csvWriter0 = new CsvWriter((File) null, 'n', false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      MockFile mockFile0 = new MockFile("");
      CsvWriter csvWriter0 = null;
      try {
        csvWriter0 = new CsvWriter(mockFile0, 'r', false, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.insightml.utils.io.CsvWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double((-268.45));
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) double0;
      String string0 = CsvWriter.formatLine(objectArray0);
      assertEquals("\"0\";\"0\";\"-268,45\";\"0\";\"0\";\"0\";\"0\";\"0\";\"0\"", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "0");
      String[] stringArray0 = new String[7];
      CsvWriter csvWriter0 = new CsvWriter(mockFile0, '>', false, stringArray0);
      HashMap<CharSequence, Double> hashMap0 = new HashMap<CharSequence, Double>();
      csvWriter0.addLine(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("[$}o6)", "[$}o6)");
      String[] stringArray0 = new String[0];
      CsvWriter csvWriter0 = null;
      try {
        csvWriter0 = new CsvWriter(mockFile0, 'e', true, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String@0000000002                        (null:-1 : CsvWriter.java:53)
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      MockFile mockFile0 = new MockFile("\"0\";\"0\";\"0\"", "\"0\";\"0\";\"0\"");
      CsvWriter csvWriter0 = null;
      try {
        csvWriter0 = new CsvWriter(mockFile0, 'a', true, stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.insightml.utils.io.CsvWriter", e);
      }
  }
}
