/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 13:44:33 GMT 2022
 */

package com.insightml.utils.types.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.data.samples.SelectionSample;
import com.insightml.utils.types.collections.DefensiveList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefensiveList_ESTest extends DefensiveList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefensiveList<Object> defensiveList0 = new DefensiveList<Object>();
      // Undeclared exception!
      try { 
        defensiveList0.isEmpty();
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefensiveList<Object> defensiveList0 = new DefensiveList<Object>();
      DefensiveList<Integer> defensiveList1 = new DefensiveList<Integer>();
      // Undeclared exception!
      try { 
        defensiveList1.indexOf(defensiveList0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefensiveList<Object> defensiveList0 = new DefensiveList<Object>();
      // Undeclared exception!
      try { 
        defensiveList0.clear();
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefensiveList<Integer> defensiveList0 = new DefensiveList<Integer>();
      Integer integer0 = new Integer((-1410));
      // Undeclared exception!
      try { 
        defensiveList0.add((-1410), integer0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefensiveList<Object> defensiveList0 = new DefensiveList<Object>();
      // Undeclared exception!
      try { 
        defensiveList0.subList(1616, 1616);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefensiveList<Integer> defensiveList0 = new DefensiveList<Integer>();
      // Undeclared exception!
      try { 
        defensiveList0.addAll(0, (Collection<? extends Integer>) null);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefensiveList<Object> defensiveList0 = new DefensiveList<Object>();
      DefensiveList<Locale.FilteringMode> defensiveList1 = new DefensiveList<Locale.FilteringMode>();
      // Undeclared exception!
      try { 
        defensiveList1.contains(defensiveList0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefensiveList<Integer> defensiveList0 = new DefensiveList<Integer>();
      DefensiveList<SelectionSample<Object, Integer>> defensiveList1 = new DefensiveList<SelectionSample<Object, Integer>>();
      // Undeclared exception!
      try { 
        defensiveList1.remove((Object) defensiveList0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefensiveList<Object> defensiveList0 = new DefensiveList<Object>();
      // Undeclared exception!
      try { 
        defensiveList0.listIterator(61);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefensiveList<Integer> defensiveList0 = new DefensiveList<Integer>();
      // Undeclared exception!
      try { 
        defensiveList0.listIterator();
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefensiveList<Integer> defensiveList0 = new DefensiveList<Integer>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        defensiveList0.lastIndexOf(locale_FilteringMode0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefensiveList<Object> defensiveList0 = new DefensiveList<Object>();
      // Undeclared exception!
      try { 
        defensiveList0.size();
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefensiveList<Object> defensiveList0 = new DefensiveList<Object>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        defensiveList0.set((-387), locale_FilteringMode0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefensiveList<Integer> defensiveList0 = new DefensiveList<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        defensiveList0.addAll((Collection<? extends Integer>) linkedList0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefensiveList<SelectionSample<Integer, Object>> defensiveList0 = new DefensiveList<SelectionSample<Integer, Object>>();
      // Undeclared exception!
      try { 
        defensiveList0.toArray();
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefensiveList<Integer> defensiveList0 = new DefensiveList<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        defensiveList0.retainAll(linkedList0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefensiveList<Object> defensiveList0 = new DefensiveList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        defensiveList0.containsAll(arrayList0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefensiveList<Integer> defensiveList0 = new DefensiveList<Integer>();
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        defensiveList0.toArray(integerArray0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // class com.insightml.utils.types.collections.DefensiveList
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefensiveList<Integer> defensiveList0 = new DefensiveList<Integer>();
      // Undeclared exception!
      try { 
        defensiveList0.iterator();
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefensiveList<Integer> defensiveList0 = new DefensiveList<Integer>();
      DefensiveList<Object> defensiveList1 = new DefensiveList<Object>();
      // Undeclared exception!
      try { 
        defensiveList1.add((Object) defensiveList0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // class com.insightml.utils.types.collections.DefensiveList
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefensiveList<Integer> defensiveList0 = new DefensiveList<Integer>();
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        defensiveList0.removeAll(stack0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefensiveList<Object> defensiveList0 = new DefensiveList<Object>();
      // Undeclared exception!
      try { 
        defensiveList0.get((-4552));
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefensiveList<Object> defensiveList0 = new DefensiveList<Object>();
      // Undeclared exception!
      try { 
        defensiveList0.remove(0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.types.collections.DefensiveList", e);
      }
  }
}
