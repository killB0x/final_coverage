/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 13:40:57 GMT 2022
 */

package com.insightml.utils.types;

import org.junit.Test;
import static org.junit.Assert.*;
import com.insightml.utils.types.Triple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Triple_ESTest extends Triple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Triple<Integer, Integer, Integer> triple0 = Triple.create((Integer) null, integer0, integer0);
      Object object0 = triple0.getFirst();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>((Integer) null, (Integer) null, (Integer) null);
      String string0 = triple0.toString();
      assertEquals("(null,null,null)", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = Triple.create((Integer) null, (Integer) null, (Integer) null);
      Integer integer0 = triple0.getSecond();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Triple<Integer, Integer, Integer> triple0 = Triple.create(integer0, integer0, (Integer) null);
      Object object0 = triple0.getFirst();
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>((Integer) null, (Integer) null, (Integer) null);
      triple0.setThird((Integer) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = Triple.create((Integer) null, (Integer) null, (Integer) null);
      triple0.setSecond((Integer) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>((Integer) null, (Integer) null, (Integer) null);
      Integer integer0 = triple0.getThird();
      assertNull(integer0);
  }
}
