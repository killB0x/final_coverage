/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 13:39:02 GMT 2022
 */

package com.insightml.utils.types.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.utils.types.Triple;
import com.insightml.utils.types.collections.TripleList;
import java.util.Iterator;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TripleList_ESTest extends TripleList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(483);
      Triple<Integer, Integer, Integer> triple0 = Triple.create(integer0, integer0, integer0);
      TripleList<Triple<Integer, Integer, Integer>, Integer, Triple<Integer, Integer, Integer>> tripleList0 = new TripleList<Triple<Integer, Integer, Integer>, Integer, Triple<Integer, Integer, Integer>>();
      tripleList0.add(triple0, integer0, triple0);
      List<Triple<Triple<Integer, Integer, Integer>, Integer, Triple<Integer, Integer, Integer>>> list0 = tripleList0.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TripleList<Triple<Integer, Integer, Integer>, Integer, Integer> tripleList0 = new TripleList<Triple<Integer, Integer, Integer>, Integer, Integer>();
      Integer integer0 = new Integer(1064);
      Triple<Integer, Integer, Integer> triple0 = Triple.create(integer0, integer0, integer0);
      tripleList0.add(triple0, integer0, integer0);
      int int0 = tripleList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TripleList<Triple<Integer, Integer, Integer>, Integer, Integer> tripleList0 = new TripleList<Triple<Integer, Integer, Integer>, Integer, Integer>();
      Iterator<Triple<Triple<Integer, Integer, Integer>, Integer, Integer>> iterator0 = tripleList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TripleList<Triple<Integer, Integer, Integer>, Integer, Integer> tripleList0 = new TripleList<Triple<Integer, Integer, Integer>, Integer, Integer>();
      Integer integer0 = new Integer(0);
      Triple<Integer, Integer, Integer> triple0 = Triple.create((Integer) null, integer0, integer0);
      tripleList0.add(triple0, integer0, integer0);
      Triple<Triple<Integer, Integer, Integer>, Integer, Integer> triple1 = tripleList0.getFirst();
      assertNotNull(triple1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TripleList<Triple<Integer, Integer, Integer>, Integer, Integer> tripleList0 = new TripleList<Triple<Integer, Integer, Integer>, Integer, Integer>();
      // Undeclared exception!
      try { 
        tripleList0.getFirst();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TripleList<Integer, Integer, Integer> tripleList0 = new TripleList<Integer, Integer, Integer>();
      List<Triple<Integer, Integer, Integer>> list0 = tripleList0.toList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TripleList<Integer, Integer, Integer> tripleList0 = new TripleList<Integer, Integer, Integer>();
      int int0 = tripleList0.size();
      assertEquals(0, int0);
  }
}
