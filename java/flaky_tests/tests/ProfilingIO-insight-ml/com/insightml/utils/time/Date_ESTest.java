/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 12:56:43 GMT 2022
 */

package com.insightml.utils.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.utils.time.Date;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Date_ESTest extends Date_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Date date1 = new Date(1392412881320L);
      boolean boolean0 = date0.equals(date1);
      assertFalse(date1.equals((Object)date0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Date date1 = date0.addHours(6);
      double double0 = date1.minutesDifference(date0);
      assertEquals(1392430881320L, date1.getTimeInMillis());
      assertEquals(360.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Date date1 = new Date(1392405681320L);
      boolean boolean0 = date0.before(date1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Date date1 = new Date(1392412881320L);
      double double0 = date1.secondsDifference(date0);
      assertEquals(3600.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Date date1 = new Date(1392412881320L);
      double double0 = date1.hourDifference(date0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Date date1 = date0.addHours((-1));
      double double0 = date0.daysDifference(date1);
      assertEquals(0.041666666666666664, double0, 0.01);
      assertEquals(1392405681320L, date1.getTimeInMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      // Undeclared exception!
      try { 
        date0.secondsDifference((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Date date0 = new Date(1392412881320L);
      // Undeclared exception!
      try { 
        date0.minutesDifference((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      // Undeclared exception!
      try { 
        date0.hourDifference((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      // Undeclared exception!
      try { 
        date0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      // Undeclared exception!
      try { 
        date0.equals(mockDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.evosuite.runtime.mock.java.util.MockDate cannot be cast to class com.insightml.utils.time.Date (org.evosuite.runtime.mock.java.util.MockDate is in unnamed module of loader 'app'; com.insightml.utils.time.Date is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6992cd26)
         //
         verifyException("com.insightml.utils.time.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      // Undeclared exception!
      try { 
        date0.daysDifference((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      // Undeclared exception!
      try { 
        date0.before((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Date date0 = new Date(1392409281320L);
      // Undeclared exception!
      try { 
        date0.addHours(1974);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String@0000000002                        (Date.java:52 : Date.java:48)
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Date date0 = null;
      try {
        date0 = new Date((java.util.Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Date date0 = null;
      try {
        date0 = new Date(mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String@0000000002                        (Date.java:32 : Date.java:28)
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Date date0 = null;
      try {
        date0 = new Date(2302L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String@0000000002                        (null:-1 : Date.java:28)
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Calendar calendar0 = date0.cal();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Date date1 = new Date(mockDate0);
      boolean boolean0 = date0.equals(date1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      boolean boolean0 = date0.equals(date0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Date date1 = new Date(1392412881320L);
      boolean boolean0 = date0.before(date1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      boolean boolean0 = date0.before(date0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      double double0 = date0.secondsDifference(date0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      double double0 = date0.hourDifference(date0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      double double0 = date0.minutesDifference(date0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      long long0 = date0.getTimeInMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Date date1 = date0.addHours(1);
      boolean boolean0 = date1.equals(date0);
      assertEquals(1392412881320L, date1.getTimeInMillis());
      assertFalse(boolean0);
      assertFalse(date0.equals((Object)date1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      date0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      String string0 = date0.toString();
      assertEquals("Fri Feb 14 20:21:21 UTC 2014", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      double double0 = date0.daysDifference(date0);
      assertEquals(0.0, double0, 0.01);
  }
}
