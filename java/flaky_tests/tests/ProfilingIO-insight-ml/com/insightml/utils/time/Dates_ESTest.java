/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 12:13:55 GMT 2022
 */

package com.insightml.utils.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.utils.time.Date;
import com.insightml.utils.time.Dates;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Dates_ESTest extends Dates_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4233, 4233, 4233, 60, 6);
      MockDate mockDate0 = new MockDate(4233, 5, (-2614), 23, (-1391), (-2614));
      Calendar calendar0 = Dates.getCalendar((java.util.Date) mockDate0);
      Calendar calendar1 = Dates.max(calendar0, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=131158739126000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=6126,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=93,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=5,SECOND=26,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      assertNotNull(calendar1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Calendar calendar0 = MockCalendar.getInstance();
      Calendar calendar1 = Dates.min(mockGregorianCalendar0, calendar0);
      assertNotNull(calendar1);
      assertNotSame(calendar1, calendar0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Calendar calendar0 = Dates.getCalendar(674, (int) (byte)1, 3);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=674,MONTH=0,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=3,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=0,MINUTE=0,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.getCalendar((-2332), 1649, (-4020));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String@0000000001                        (Dates.java:49 : Dates.java:56)
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Calendar calendar0 = Dates.getCalendar();
      String string0 = Dates.toString(calendar0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Date date1 = date0.addHours(3);
      Double double0 = Dates.minutes(date0, date1);
      assertEquals(180.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Date date1 = date0.addHours(3);
      Double double0 = Dates.minutes(date1, date0);
      assertEquals((-180.0), (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4);
      mockGregorianCalendar0.setLenient(false);
      Calendar calendar0 = Dates.min(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 4241);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      Calendar calendar0 = Dates.min(mockGregorianCalendar0, mockGregorianCalendar0);
      assertSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-3889));
      Calendar calendar0 = Dates.min(mockGregorianCalendar0, mockGregorianCalendar0);
      assertSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 4241);
      mockGregorianCalendar0.setFirstDayOfWeek((-2147462211));
      Calendar calendar0 = Dates.min(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4);
      mockGregorianCalendar0.setLenient(false);
      Calendar calendar0 = Dates.max(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4,MONTH=4,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 4241);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      Calendar calendar0 = Dates.max(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1949), "");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      calendar0.setMinimalDaysInFirstWeek((-2886));
      Calendar calendar1 = Dates.max(calendar0, calendar0);
      assertSame(calendar0, calendar1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 4241);
      mockGregorianCalendar0.setFirstDayOfWeek((-2147462211));
      Calendar calendar0 = Dates.max(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals((-2147462211), calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      double double0 = Dates.hoursDifference(calendar0, calendar0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4233, 4233, 4233, 60, 6);
      int int0 = Dates.getDayOfYear(mockGregorianCalendar0);
      assertEquals(125, int0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      double double0 = Dates.hoursDifference(mockGregorianCalendar1, mockGregorianCalendar0);
      assertEquals(2.264403974407778E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 200, 0);
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      double double0 = Dates.hoursDifference(mockGregorianCalendar1, mockGregorianCalendar0);
      assertEquals((-386780.3559222222), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      short short0 = Dates.getYear(calendar0);
      assertEquals((short)2014, short0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(200, 111, (-2332), (-2147462108), 4);
      short short0 = Dates.getYear(mockGregorianCalendar0);
      assertEquals((short) (-17369), short0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(5, "com.insightml.utils.time.Dates");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      int int0 = Dates.getWeekOfYear(calendar0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Calendar calendar0 = Dates.getCalendar();
      int int0 = Dates.getWeekOfMonth(calendar0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Calendar calendar0 = Dates.getCalendar();
      byte byte0 = Dates.getMonth(calendar0);
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 200, 0);
      int int0 = Dates.getHourOfDay(mockGregorianCalendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Calendar calendar0 = Dates.getCalendar();
      int int0 = Dates.getHourOfDay(calendar0);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Calendar calendar0 = Dates.getCalendar();
      byte byte0 = Dates.getDayOfMonth(calendar0);
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Calendar calendar0 = Dates.getCalendar((-2922), 3, 3, (-2922), 2598);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-2922,MONTH=2,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=3,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-2922,MINUTE=2598,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      int int0 = Dates.daysDifference(calendar0, calendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Calendar calendar0 = Dates.getCalendar();
      Calendar calendar1 = Dates.getCalendar((-1L));
      int int0 = Dates.daysDifference(calendar0, calendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      assertEquals(16115, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set((-2147462237), (-2147462134), (-2147462237));
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        Dates.getYear(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set(0, (int) (short)2014);
      // Undeclared exception!
      try { 
        Dates.getWeekOfYear(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set(4, (-2549), 5, 4, 5, (-1270));
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        Dates.getMonth(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setLenient(false);
      mockGregorianCalendar0.set(52, (-739), 52);
      // Undeclared exception!
      try { 
        Dates.getHourOfDay(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set(4, 4, 4, 4, 4, (-1270));
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        Dates.getDayOfYear(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SECOND
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.getDayOfWeek((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Dates", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-38), (-38), (-38));
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        Dates.getDayOfWeek(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2147462211), 2242, 31, 2242, 2242, 31);
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        Dates.getDayOfMonth(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.dateParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.dateParser("d7J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'J'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Calendar calendar0 = Dates.getCalendar(3207L);
      Calendar calendar1 = MockCalendar.getInstance();
      Calendar calendar2 = Dates.max(calendar0, calendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar2.toString());
      assertNotNull(calendar2);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=3207,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=3,MILLISECOND=207,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Calendar calendar0 = Dates.getCalendar();
      Calendar calendar1 = Dates.max(calendar0, (Calendar) null);
      assertNull(calendar1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Calendar calendar0 = Dates.max((Calendar) null, (Calendar) null);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Calendar calendar0 = Dates.getCalendar(96L);
      Calendar calendar1 = Dates.min(mockGregorianCalendar0, calendar0);
      assertNotNull(calendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=96,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=96,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Calendar calendar0 = Dates.getCalendar();
      Calendar calendar1 = Dates.min(calendar0, (Calendar) null);
      assertNull(calendar1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Calendar calendar0 = Dates.min((Calendar) null, (Calendar) null);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = Dates.getDayOfWeek(mockGregorianCalendar0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Double double0 = Dates.minutes(date0, date0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = new Date(mockDate0);
      Double double0 = Dates.minutes(date0, (Date) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = Dates.dateParser("]");
      assertFalse(simpleDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.getHourOfDay((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Dates", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.hoursDifference((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Dates", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.getWeekOfMonth((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Dates", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.toString((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Dates", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.getYear((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Dates", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.daysDifference((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Dates", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.getDayOfMonth((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Dates", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.getCalendar((java.util.Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Dates", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.getDayOfYear((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Dates", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Double double0 = Dates.minutes((Date) null, (Date) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.getMonth((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Dates", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.getCalendar((-2481), (-2481), (-2481), (-2481), (-2481));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String@0000000001                        (null:-1 : Dates.java:56)
         //
         verifyException("com.insightml.utils.Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dates.getWeekOfYear((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.time.Dates", e);
      }
  }
}
