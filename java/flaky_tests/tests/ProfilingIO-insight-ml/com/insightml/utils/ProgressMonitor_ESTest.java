/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 13:06:41 GMT 2022
 */

package com.insightml.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.utils.ProgressMonitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProgressMonitor_ESTest extends ProgressMonitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ProgressMonitor progressMonitor0 = new ProgressMonitor((-1), (-1));
      System.setCurrentTimeMillis(0L);
      progressMonitor0.tick("");
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ProgressMonitor progressMonitor0 = new ProgressMonitor((-3506), 5);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ProgressMonitor progressMonitor0 = new ProgressMonitor(0, 0);
      // Undeclared exception!
      try { 
        progressMonitor0.tick("");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.insightml.utils.ProgressMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ProgressMonitor progressMonitor0 = new ProgressMonitor(0, 0);
      // Undeclared exception!
      try { 
        progressMonitor0.tick();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.insightml.utils.ProgressMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ProgressMonitor progressMonitor0 = new ProgressMonitor((-1), (-1));
      progressMonitor0.tick((String) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ProgressMonitor progressMonitor0 = new ProgressMonitor(5, 5);
      progressMonitor0.tick("C ");
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ProgressMonitor progressMonitor0 = new ProgressMonitor((-1), (-1));
      progressMonitor0.tick("");
      progressMonitor0.tick("Completed {}/{} ({}%) in {} ms; {} ms left");
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ProgressMonitor progressMonitor0 = new ProgressMonitor(5, 5);
      progressMonitor0.tick();
      progressMonitor0.tick("C ");
      progressMonitor0.tick("0?*Pg]_p");
      progressMonitor0.tick("C ");
      progressMonitor0.tick();
  }
}
