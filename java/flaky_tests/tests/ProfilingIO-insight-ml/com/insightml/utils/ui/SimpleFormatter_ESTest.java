/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 13:09:34 GMT 2022
 */

package com.insightml.utils.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.utils.ui.SimpleFormatter;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleFormatter_ESTest extends SimpleFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecimalFormat decimalFormat0 = SimpleFormatter.createDecimalFormatter(5076);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(5076, decimalFormat0.getMinimumFractionDigits());
      assertEquals(5076, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      SimpleFormatter.createDecimalFormatter(5076, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      SimpleFormatter.createDecimalFormatter(2147483645, false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleFormatter.createDecimalFormatter((-4341), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4341
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DecimalFormat decimalFormat0 = SimpleFormatter.createDecimalFormatter(5063);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(5063, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(5063, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      SimpleFormatter.createDecimalFormatter(5063);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      SimpleFormatter.createDecimalFormatter(2147483645);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleFormatter.createDecimalFormatter((-3));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DecimalFormat decimalFormat0 = SimpleFormatter.createDecimalFormatter(3994, false);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3994, decimalFormat0.getMaximumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3994, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertNotNull(decimalFormat0);
      
      DecimalFormat decimalFormat1 = SimpleFormatter.createDecimalFormatter(3994);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertEquals(3994, decimalFormat1.getMaximumFractionDigits());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(0, decimalFormat1.getGroupingSize());
      assertEquals(3994, decimalFormat1.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertFalse(decimalFormat1.isGroupingUsed());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertNotNull(decimalFormat1);
      assertTrue(decimalFormat1.equals((Object)decimalFormat0));
      
      SimpleFormatter simpleFormatter0 = new SimpleFormatter(3994, false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter(2147483620, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = null;
      try {
        simpleFormatter0 = new SimpleFormatter((-4341), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4341
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter(64, true);
      assertNotNull(simpleFormatter0);
      
      String string0 = simpleFormatter0.format(0.0);
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DecimalFormat decimalFormat0 = SimpleFormatter.createDecimalFormatter(0, true);
      assertEquals("#.", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      String string0 = simpleFormatter0.format((double) 0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DecimalFormat decimalFormat0 = SimpleFormatter.createDecimalFormatter(0);
      assertEquals("#0.", decimalFormat0.toLocalizedPattern());
  }
}
