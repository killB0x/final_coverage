/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 12:47:36 GMT 2022
 */

package com.insightml.utils.pipeline;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.insightml.utils.pipeline.IteratorPipelineElement;
import com.insightml.utils.pipeline.PipelineConsumer;
import java.util.Iterator;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorPipelineElement_ESTest extends IteratorPipelineElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(iterator0).hasNext();
      doReturn(integer0, (Object) null).when(iterator0).next();
      IteratorPipelineElement<Object> iteratorPipelineElement0 = new IteratorPipelineElement<Object>(iterator0);
      PipelineConsumer<Object> pipelineConsumer0 = (PipelineConsumer<Object>) mock(PipelineConsumer.class, new ViolatedAssumptionAnswer());
      iteratorPipelineElement0.consume(pipelineConsumer0);
      // Undeclared exception!
      try { 
        iteratorPipelineElement0.map((Function<Object, Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Provided empty iterator
         //
         verifyException("com.insightml.utils.pipeline.IteratorPipelineElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      IteratorPipelineElement<Object> iteratorPipelineElement0 = new IteratorPipelineElement<Object>(iterator0);
      try { 
        iteratorPipelineElement0.consume((PipelineConsumer<Object>) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Already consumed
         //
         verifyException("com.insightml.utils.pipeline.IteratorPipelineElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      IteratorPipelineElement<Object> iteratorPipelineElement0 = new IteratorPipelineElement<Object>(iterator0);
      PipelineConsumer<Object> pipelineConsumer0 = (PipelineConsumer<Object>) mock(PipelineConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        iteratorPipelineElement0.consume(pipelineConsumer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Already consumed
         //
         verifyException("com.insightml.utils.pipeline.IteratorPipelineElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IteratorPipelineElement<Integer> iteratorPipelineElement0 = null;
      try {
        iteratorPipelineElement0 = new IteratorPipelineElement<Integer>((Iterator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.insightml.utils.pipeline.IteratorPipelineElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      IteratorPipelineElement<Integer> iteratorPipelineElement0 = new IteratorPipelineElement<Integer>(iterator0);
      PipelineConsumer<Integer> pipelineConsumer0 = (PipelineConsumer<Integer>) mock(PipelineConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        iteratorPipelineElement0.consume(pipelineConsumer0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Already consumed
         //
         verifyException("com.insightml.utils.pipeline.IteratorPipelineElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iterator0).hasNext();
      IteratorPipelineElement<Object> iteratorPipelineElement0 = new IteratorPipelineElement<Object>(iterator0);
      iteratorPipelineElement0.consume((PipelineConsumer<Object>) null, 431);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      IteratorPipelineElement<Object> iteratorPipelineElement0 = new IteratorPipelineElement<Object>(iterator0);
      PipelineConsumer<Object> pipelineConsumer0 = (PipelineConsumer<Object>) mock(PipelineConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        iteratorPipelineElement0.consume(pipelineConsumer0, 1198);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Already consumed
         //
         verifyException("com.insightml.utils.pipeline.IteratorPipelineElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      IteratorPipelineElement<Object> iteratorPipelineElement0 = null;
      try {
        iteratorPipelineElement0 = new IteratorPipelineElement<Object>(iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Provided empty iterator
         //
         verifyException("com.insightml.utils.pipeline.IteratorPipelineElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      IteratorPipelineElement<Object> iteratorPipelineElement0 = new IteratorPipelineElement<Object>(iterator0);
      Function<Object, Object> function0 = Function.identity();
      IteratorPipelineElement<Object> iteratorPipelineElement1 = iteratorPipelineElement0.map(function0);
      PipelineConsumer<Object> pipelineConsumer0 = (PipelineConsumer<Object>) mock(PipelineConsumer.class, new ViolatedAssumptionAnswer());
      iteratorPipelineElement1.consume(pipelineConsumer0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      IteratorPipelineElement<Object> iteratorPipelineElement0 = new IteratorPipelineElement<Object>(iterator0);
      try { 
        iteratorPipelineElement0.consume((PipelineConsumer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Already consumed
         //
         verifyException("com.insightml.utils.pipeline.IteratorPipelineElement", e);
      }
  }
}
