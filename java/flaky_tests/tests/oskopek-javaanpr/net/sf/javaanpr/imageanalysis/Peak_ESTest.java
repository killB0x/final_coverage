/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 05:21:02 GMT 2022
 */

package net.sf.javaanpr.imageanalysis;

import org.junit.Test;
import static org.junit.Assert.*;
import net.sf.javaanpr.imageanalysis.Peak;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Peak_ESTest extends Peak_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Peak peak0 = new Peak((-1705), (-3640), 2);
      int int0 = peak0.getDiff();
      assertEquals(1707, int0);
      assertEquals((-3640), peak0.getCenter());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Peak peak0 = new Peak((-1), 0);
      int int0 = peak0.getRight();
      assertEquals(0, int0);
      assertEquals(0, peak0.getCenter());
      assertEquals(1, peak0.getDiff());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Peak peak0 = new Peak((-1705), (-3640), 2);
      assertEquals(2, peak0.getRight());
      
      peak0.setRight((-1705));
      int int0 = peak0.getRight();
      assertEquals((-1705), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Peak peak0 = new Peak(2750, (-1083));
      peak0.setLeft(0);
      int int0 = peak0.getLeft();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Peak peak0 = new Peak((-1), (-1));
      peak0.setLeft(3074);
      int int0 = peak0.getLeft();
      assertEquals((-3075), peak0.getDiff());
      assertEquals(3074, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Peak peak0 = new Peak((-1705), (-3640), 2);
      peak0.setLeft(0);
      peak0.setRight((-1705));
      int int0 = peak0.getDiff();
      assertEquals(0, peak0.getLeft());
      assertEquals((-1705), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Peak peak0 = new Peak(0, 0, 0);
      int int0 = peak0.getCenter();
      assertEquals(0, peak0.getDiff());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Peak peak0 = new Peak((-1705), (-3640), 2);
      int int0 = peak0.getCenter();
      assertEquals(1707, peak0.getDiff());
      assertEquals((-3640), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Peak peak0 = new Peak((-1705), (-3640), 2);
      int int0 = peak0.getRight();
      assertEquals((-3640), peak0.getCenter());
      assertEquals(1707, peak0.getDiff());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Peak peak0 = new Peak((-1705), (-3640), 2);
      int int0 = peak0.getLeft();
      assertEquals((-1705), int0);
      assertEquals(1707, peak0.getDiff());
      assertEquals((-3640), peak0.getCenter());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Peak peak0 = new Peak((-1705), (-3640), 2);
      assertEquals((-3640), peak0.getCenter());
      
      peak0.setCenter(2);
      int int0 = peak0.getCenter();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Peak peak0 = new Peak(0, 0);
      int int0 = peak0.getDiff();
      assertEquals(0, int0);
      assertEquals(0, peak0.getCenter());
  }
}
