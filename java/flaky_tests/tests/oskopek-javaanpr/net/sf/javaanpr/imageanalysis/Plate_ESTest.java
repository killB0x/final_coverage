/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 04:54:38 GMT 2022
 */

package net.sf.javaanpr.imageanalysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.awt.image.RasterFormatException;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import net.sf.javaanpr.imageanalysis.Char;
import net.sf.javaanpr.imageanalysis.Plate;
import net.sf.javaanpr.imageanalysis.PlateGraph;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Plate_ESTest extends Plate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      Vector<Char> vector0 = new Vector<Char>();
      float float0 = plate0.getAverageCharHeight(vector0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      Vector<Char> vector0 = new Vector<Char>();
      float float0 = plate0.getAveragePieceSaturation(vector0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      Vector<Char> vector0 = new Vector<Char>();
      float float0 = plate0.getAveragePieceMaxBrightness(vector0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      Vector<Char> vector0 = new Vector<Char>(3, 488);
      float float0 = plate0.getAveragePieceMinBrightness(vector0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      ArrayList<Char> arrayList0 = new ArrayList<Char>();
      float float0 = plate0.getAveragePieceBrightness(arrayList0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      Stack<Char> stack0 = new Stack<Char>();
      float float0 = plate0.getAveragePieceContrast(stack0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Stack<Char> stack0 = new Stack<Char>();
      Plate plate0 = new Plate(bufferedImage0);
      float float0 = plate0.getAveragePieceHue(stack0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      Vector<Char> vector0 = new Vector<Char>();
      float float0 = plate0.getCharsWidthDispersion(vector0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(5, 5, 5);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      plate0.normalize();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      try { 
        plate0.normalize();
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // negative or zero height
         //
         verifyException("java.awt.image.Raster", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      try { 
        plate0.getPiecesWidthDispersion((List<Char>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.imageanalysis.Plate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      try { 
        plate0.getCharsWidthDispersion((List<Char>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.imageanalysis.Plate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      try { 
        plate0.getAveragePieceSaturation((List<Char>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.imageanalysis.Plate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      try { 
        plate0.getAveragePieceMinBrightness((List<Char>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.imageanalysis.Plate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      try { 
        plate0.getAveragePieceMaxBrightness((List<Char>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.imageanalysis.Plate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      try { 
        plate0.getAveragePieceHue((List<Char>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.imageanalysis.Plate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      try { 
        plate0.getAveragePieceHeight((List<Char>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.imageanalysis.Plate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      try { 
        plate0.getAveragePieceContrast((List<Char>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.imageanalysis.Plate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      try { 
        plate0.getAveragePieceBrightness((List<Char>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.imageanalysis.Plate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      try { 
        plate0.getAverageCharWidth((List<Char>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.imageanalysis.Plate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(5, 5, 5);
      Plate plate0 = new Plate(bufferedImage0);
      // Undeclared exception!
      plate0.clone();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(7, 7, 7);
      Plate plate0 = new Plate(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Plate plate0 = null;
      try {
        plate0 = new Plate((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.imageanalysis.Photo", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 13);
      Plate plate0 = null;
      try {
        plate0 = new Plate(bufferedImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      float float0 = plate0.getAveragePieceWidth(list0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      float float0 = plate0.getAverageCharWidth(list0);
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      PlateGraph plateGraph0 = plate0.histogram(bufferedImage0);
      assertNotNull(plateGraph0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      Plate plate1 = plate0.clone();
      assertTrue(plate1.equals((Object)plate0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      plate0.verticalEdgeDetector(bufferedImage0);
      assertTrue(bufferedImage0.isAlphaPremultiplied());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      plate0.horizontalEdgeDetector(bufferedImage0);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      float float0 = plate0.getAveragePieceHeight(list0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      float float0 = plate0.getAverageCharHeight(list0);
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      float float0 = plate0.getAveragePieceSaturation(list0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      float float0 = plate0.getAveragePieceMaxBrightness(list0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      float float0 = plate0.getAveragePieceMinBrightness(list0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      float float0 = plate0.getAveragePieceBrightness(list0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      float float0 = plate0.getAveragePieceContrast(list0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      float float0 = plate0.getAveragePieceHue(list0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      float float0 = plate0.getPiecesWidthDispersion(list0);
      assertFalse(list0.isEmpty());
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Vector<Char> vector0 = new Vector<Char>();
      Plate plate0 = new Plate(bufferedImage0);
      float float0 = plate0.getPiecesWidthDispersion(vector0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      float float0 = plate0.getCharsWidthDispersion(list0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      assertEquals(0, list0.size());
      
      float float0 = plate0.getAveragePieceHeight(list0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      List<Char> list0 = plate0.getChars();
      List<Char> list1 = plate0.getChars();
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      plate0.horizontalEdgeBi(bufferedImage0);
      plate0.normalize();
      assertEquals(2, plate0.getHeight());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      BufferedImage bufferedImage1 = plate0.renderGraph();
      assertEquals(140, bufferedImage1.getTileHeight());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Plate plate0 = new Plate(bufferedImage0);
      plate0.normalize();
      plate0.normalize();
      assertEquals(3, plate0.getWidth());
  }
}
