/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 05:22:08 GMT 2022
 */

package net.sf.javaanpr.recognizer;

import org.junit.Test;
import static org.junit.Assert.*;
import net.sf.javaanpr.recognizer.RecognizedPattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RecognizedPattern_ESTest extends RecognizedPattern_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('T', 2962.0);
      double double0 = recognizedPattern0.getCost();
      assertEquals('T', recognizedPattern0.getChar());
      assertEquals(2962.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('e', (-2132.039898823086));
      double double0 = recognizedPattern0.getCost();
      assertEquals('e', recognizedPattern0.getChar());
      assertEquals((-2132.039898823086), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('}', 822.631438287575);
      char char0 = recognizedPattern0.getChar();
      assertEquals('}', char0);
      assertEquals(822.631438287575, recognizedPattern0.getCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('T', 2962.0);
      char char0 = recognizedPattern0.getChar();
      assertEquals(2962.0, recognizedPattern0.getCost(), 0.01);
      assertEquals('T', char0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('7', 1.0);
      char char0 = recognizedPattern0.getChar();
      assertEquals(1.0, recognizedPattern0.getCost(), 0.01);
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('P', 0.0);
      double double0 = recognizedPattern0.getCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals('P', recognizedPattern0.getChar());
  }
}
