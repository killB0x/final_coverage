/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 05:11:47 GMT 2022
 */

package net.sf.javaanpr.recognizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.util.List;
import net.sf.javaanpr.recognizer.RecognizedChar;
import net.sf.javaanpr.recognizer.RecognizedPattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RecognizedChar_ESTest extends RecognizedChar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      recognizedChar0.sort(false);
      boolean boolean0 = recognizedChar0.isSorted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('7', (-0.9658371592937879));
      recognizedChar0.sort(false);
      recognizedChar0.addPattern(recognizedPattern0);
      recognizedChar0.getPatterns();
      assertTrue(recognizedChar0.isSorted());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('7', 0.0);
      recognizedChar0.sort(false);
      recognizedChar0.addPattern(recognizedPattern0);
      recognizedChar0.getPattern(0);
      assertTrue(recognizedChar0.isSorted());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      recognizedChar0.sort(false);
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('n', 2900.974368525);
      recognizedChar0.addPattern(recognizedPattern0);
      recognizedChar0.getPattern(0);
      assertTrue(recognizedChar0.isSorted());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('7', (-0.9658371592937879));
      recognizedChar0.sort(false);
      recognizedChar0.addPattern(recognizedPattern0);
      recognizedChar0.getPattern(0);
      assertTrue(recognizedChar0.isSorted());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('x', 0.0);
      recognizedChar0.addPattern(recognizedPattern0);
      recognizedChar0.addPattern((RecognizedPattern) null);
      // Undeclared exception!
      try { 
        recognizedChar0.sort(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.recognizer.PatternComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      // Undeclared exception!
      try { 
        recognizedChar0.render();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.sf.javaanpr.recognizer.RecognizedChar", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('n', 2900.974368525);
      recognizedChar0.addPattern(recognizedPattern0);
      BufferedImage bufferedImage0 = recognizedChar0.render();
      assertEquals(520, bufferedImage0.getWidth());
      assertEquals(220, bufferedImage0.getTileHeight());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      recognizedChar0.sort(false);
      // Undeclared exception!
      try { 
        recognizedChar0.getPattern(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      RecognizedPattern recognizedPattern0 = recognizedChar0.getPattern(40);
      assertNull(recognizedPattern0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      assertFalse(recognizedChar0.isSorted());
      
      recognizedChar0.sort(false);
      recognizedChar0.getPatterns();
      assertTrue(recognizedChar0.isSorted());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      List<RecognizedPattern> list0 = recognizedChar0.getPatterns();
      assertNull(list0);
      assertFalse(recognizedChar0.isSorted());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      assertFalse(recognizedChar0.isSorted());
      
      recognizedChar0.sort(false);
      recognizedChar0.sort(true);
      assertTrue(recognizedChar0.isSorted());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      recognizedChar0.addPattern((RecognizedPattern) null);
      // Undeclared exception!
      try { 
        recognizedChar0.render();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.recognizer.RecognizedChar", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RecognizedChar recognizedChar0 = new RecognizedChar();
      boolean boolean0 = recognizedChar0.isSorted();
      assertFalse(boolean0);
  }
}
