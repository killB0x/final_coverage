/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 05:15:50 GMT 2022
 */

package net.sf.javaanpr.intelligence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.javaanpr.intelligence.SyntaxAnalysisMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SyntaxAnalysisMode_ESTest extends SyntaxAnalysisMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SyntaxAnalysisMode[] syntaxAnalysisModeArray0 = SyntaxAnalysisMode.values();
      assertEquals(3, syntaxAnalysisModeArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SyntaxAnalysisMode syntaxAnalysisMode0 = SyntaxAnalysisMode.valueOf("DO_NOT_PARSE");
      assertEquals(SyntaxAnalysisMode.DO_NOT_PARSE, syntaxAnalysisMode0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        SyntaxAnalysisMode.getSyntaxAnalysisModeFromInt((-1333));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected: 0, 1, or 2. Got: -1333
         //
         verifyException("net.sf.javaanpr.intelligence.SyntaxAnalysisMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SyntaxAnalysisMode syntaxAnalysisMode0 = SyntaxAnalysisMode.getSyntaxAnalysisModeFromInt(2);
      assertEquals(SyntaxAnalysisMode.EQUAL_OR_SHORTER_LENGTH, syntaxAnalysisMode0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SyntaxAnalysisMode syntaxAnalysisMode0 = SyntaxAnalysisMode.getSyntaxAnalysisModeFromInt(1);
      assertEquals(SyntaxAnalysisMode.ONLY_EQUAL_LENGTH, syntaxAnalysisMode0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SyntaxAnalysisMode syntaxAnalysisMode0 = SyntaxAnalysisMode.getSyntaxAnalysisModeFromInt(0);
      assertEquals(SyntaxAnalysisMode.DO_NOT_PARSE, syntaxAnalysisMode0);
  }
}
