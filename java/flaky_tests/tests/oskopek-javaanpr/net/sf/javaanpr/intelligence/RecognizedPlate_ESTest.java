/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 05:18:30 GMT 2022
 */

package net.sf.javaanpr.intelligence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import net.sf.javaanpr.intelligence.RecognizedPlate;
import net.sf.javaanpr.recognizer.RecognizedChar;
import net.sf.javaanpr.recognizer.RecognizedPattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RecognizedPlate_ESTest extends RecognizedPlate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RecognizedPlate recognizedPlate0 = new RecognizedPlate();
      RecognizedChar recognizedChar0 = new RecognizedChar();
      recognizedChar0.sort(true);
      RecognizedPattern recognizedPattern0 = new RecognizedPattern('$', 563.898);
      recognizedChar0.addPattern(recognizedPattern0);
      recognizedPlate0.addChar(recognizedChar0);
      String string0 = recognizedPlate0.getString();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RecognizedPlate recognizedPlate0 = new RecognizedPlate();
      RecognizedChar recognizedChar0 = new RecognizedChar();
      recognizedPlate0.addChar(recognizedChar0);
      List<RecognizedChar> list0 = recognizedPlate0.getChars();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RecognizedPlate recognizedPlate0 = new RecognizedPlate();
      RecognizedChar recognizedChar0 = new RecognizedChar();
      recognizedChar0.sort(false);
      recognizedPlate0.addChar(recognizedChar0);
      RecognizedChar recognizedChar1 = recognizedPlate0.getChar(0);
      assertSame(recognizedChar1, recognizedChar0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RecognizedPlate recognizedPlate0 = new RecognizedPlate();
      RecognizedChar recognizedChar0 = new RecognizedChar();
      recognizedPlate0.addChar(recognizedChar0);
      RecognizedChar recognizedChar1 = recognizedPlate0.getChar(0);
      assertFalse(recognizedChar1.isSorted());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RecognizedPlate recognizedPlate0 = new RecognizedPlate();
      RecognizedChar recognizedChar0 = new RecognizedChar();
      recognizedChar0.sort(false);
      recognizedPlate0.addChar(recognizedChar0);
      // Undeclared exception!
      try { 
        recognizedPlate0.getString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RecognizedPlate recognizedPlate0 = new RecognizedPlate();
      RecognizedChar recognizedChar0 = new RecognizedChar();
      recognizedPlate0.addChar(recognizedChar0);
      // Undeclared exception!
      try { 
        recognizedPlate0.getString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.javaanpr.intelligence.RecognizedPlate", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RecognizedPlate recognizedPlate0 = new RecognizedPlate();
      String string0 = recognizedPlate0.getString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RecognizedPlate recognizedPlate0 = new RecognizedPlate();
      List<RecognizedChar> list0 = recognizedPlate0.getChars();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RecognizedPlate recognizedPlate0 = new RecognizedPlate();
      recognizedPlate0.addChar((RecognizedChar) null);
      RecognizedChar recognizedChar0 = recognizedPlate0.getChar(0);
      assertNull(recognizedChar0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RecognizedPlate recognizedPlate0 = new RecognizedPlate();
      // Undeclared exception!
      try { 
        recognizedPlate0.getChar(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }
}
