/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:35:09 GMT 2022
 */

package org.sql4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sql4j.Database;
import org.sql4j.From;
import org.sql4j.Select;
import org.sql4j.SqlBuilder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Select_ESTest extends Select_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Select.SelectForUpdate select_SelectForUpdate0 = new Select.SelectForUpdate(sqlBuilder0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Database database0 = Database.ORACLE;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      SqlBuilder sqlBuilder0 = new SqlBuilder(database0, connection0);
      Select.SelectCountDistinct select_SelectCountDistinct0 = new Select.SelectCountDistinct(sqlBuilder0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Select select0 = null;
      try {
        select0 = new Select((SqlBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sql4j.Select", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Select select0 = new Select(sqlBuilder0);
      Select.SelectForUpdate select_SelectForUpdate0 = select0.all();
      Select.SelectFinalizer select_SelectFinalizer0 = select_SelectForUpdate0.forUpdate();
      assertNotNull(select_SelectFinalizer0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Select select0 = new Select(sqlBuilder0);
      // Undeclared exception!
      try { 
        select0.columns((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("org.sql4j.Select", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Select.SelectDistinct select_SelectDistinct0 = new Select.SelectDistinct(sqlBuilder0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        select_SelectDistinct0.columns(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("org.sql4j.Select$SelectDistinct", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Database database0 = Database.ORACLE;
      SqlBuilder sqlBuilder0 = new SqlBuilder(database0, (Connection) null);
      Select select0 = new Select(sqlBuilder0);
      Select.SelectDistinct select_SelectDistinct0 = select0.distinct();
      assertNotNull(select_SelectDistinct0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Database database0 = Database.ORACLE;
      SqlBuilder sqlBuilder0 = new SqlBuilder(database0, (Connection) null);
      Select select0 = new Select(sqlBuilder0);
      Select.SelectCount select_SelectCount0 = select0.count();
      Select.SelectCountDistinct select_SelectCountDistinct0 = select_SelectCount0.distinct();
      Select.SelectFinalizer select_SelectFinalizer0 = select_SelectCountDistinct0.column(", ");
      From from0 = select_SelectFinalizer0.from();
      assertNotNull(from0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Select.SelectCount select_SelectCount0 = new Select.SelectCount(sqlBuilder0);
      Select.SelectCountDistinct select_SelectCountDistinct0 = select_SelectCount0.distinct();
      assertNotNull(select_SelectCountDistinct0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Select.SelectCount select_SelectCount0 = new Select.SelectCount(sqlBuilder0);
      Select.SelectFinalizer select_SelectFinalizer0 = select_SelectCount0.column((String) null);
      assertNotNull(select_SelectFinalizer0);
  }
}
