/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:31:01 GMT 2022
 */

package org.sql4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sql4j.Condition;
import org.sql4j.Database;
import org.sql4j.SqlBuilder;
import org.sql4j.Update;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Update_ESTest extends Update_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Database database0 = Database.ORACLE;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      SqlBuilder sqlBuilder0 = new SqlBuilder(database0, connection0);
      Update update0 = new Update(sqlBuilder0, "OR ");
      Update.FinalizedUpdate update_FinalizedUpdate0 = update0.set("OR ", sqlBuilder0);
      update_FinalizedUpdate0.getParameters();
      assertEquals("UPDATE OR  SET\nOR  = ?", update_FinalizedUpdate0.toPreparedSqlString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Update update0 = new Update(sqlBuilder0, "9V:");
      Object object0 = new Object();
      Update.FinalizedUpdate update_FinalizedUpdate0 = update0.set("9V:", object0);
      // Undeclared exception!
      try { 
        update_FinalizedUpdate0.toSqlString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported type for value assignment: java.lang.Object
         //
         verifyException("org.sql4j.Condition", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Update update0 = new Update(sqlBuilder0, "");
      Update.FinalizedUpdate update_FinalizedUpdate0 = update0.set("", sqlBuilder0);
      Update.FinalizedUpdate update_FinalizedUpdate1 = update_FinalizedUpdate0.set("", sqlBuilder0);
      assertEquals("UPDATE  SET\n = ?,\n = ?", update_FinalizedUpdate1.toPreparedSqlString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Update update0 = new Update(sqlBuilder0, "VU~QK4>+UQu*+S CZN1");
      Update.FinalizedUpdate update_FinalizedUpdate0 = update0.set("VU~QK4>+UQu*+S CZN1", "VU~QK4>+UQu*+S CZN1");
      String string0 = update_FinalizedUpdate0.toPreparedSqlString();
      assertEquals("UPDATE VU~QK4>+UQu*+S CZN1 SET\nVU~QK4>+UQu*+S CZN1 = ?", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Update update0 = new Update(sqlBuilder0, "org.sql4j.Where");
      Object object0 = new Object();
      Update.FinalizedUpdate update_FinalizedUpdate0 = update0.set("org.sql4j.Where", object0);
      // Undeclared exception!
      try { 
        update_FinalizedUpdate0.where((Condition.FinalizedCondition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sql4j.Where", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Update update0 = null;
      try {
        update0 = new Update((SqlBuilder) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sql4j.Update", e);
      }
  }
}
