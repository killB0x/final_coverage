/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:39:09 GMT 2022
 */

package org.sql4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sql4j.Condition;
import org.sql4j.Delete;
import org.sql4j.SqlBuilder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Delete_ESTest extends Delete_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      sqlBuilder0.newLine();
      List<Object> list0 = sqlBuilder0.getParameters();
      SqlBuilder sqlBuilder1 = sqlBuilder0.addParameters(list0);
      Delete delete0 = new Delete(sqlBuilder0, "U~[8X]t[J$O4,");
      delete0.toSqlString();
      delete0.getParameters();
      delete0.toSqlString();
      delete0.toSqlString();
      Condition.FinalizedCondition condition_FinalizedCondition0 = mock(Condition.FinalizedCondition.class, new ViolatedAssumptionAnswer());
      doReturn(sqlBuilder1, (SqlBuilder) null).when(condition_FinalizedCondition0).getContext();
      // Undeclared exception!
      try { 
        delete0.where(condition_FinalizedCondition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sql4j.Where", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Delete delete0 = new Delete(sqlBuilder0, "kb($F[%?");
      // Undeclared exception!
      try { 
        delete0.toSqlString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Delete delete0 = new Delete(sqlBuilder0, "kb($F[%?");
      sqlBuilder0.addParameter("kb($F[%?");
      // Undeclared exception!
      try { 
        delete0.toSqlString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Object object0 = new Object();
      sqlBuilder0.addParameter(object0);
      Delete delete0 = new Delete(sqlBuilder0, "kb($F[%?");
      // Undeclared exception!
      try { 
        delete0.toSqlString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported type for value assignment: java.lang.Object
         //
         verifyException("org.sql4j.Condition", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Delete delete0 = new Delete(sqlBuilder0, "");
      String string0 = delete0.toPreparedSqlString();
      assertEquals("DELETE FROM \n", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Delete delete0 = null;
      try {
        delete0 = new Delete((SqlBuilder) null, "DELETE FROM ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sql4j.Delete", e);
      }
  }
}
