/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:38:28 GMT 2022
 */

package org.sql4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sql4j.Column;
import org.sql4j.ColumnConstraint;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Column_ESTest extends Column_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Column.ColumnDataTypeChooser column_ColumnDataTypeChooser0 = Column.newColumn("+)*xz");
      Column.ColumnConstraintDef column_ColumnConstraintDef0 = column_ColumnDataTypeChooser0.typeString(0);
      String string0 = column_ColumnConstraintDef0.getColumnString();
      assertEquals("+)*xz VARCHAR(0)", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Column.ColumnDataTypeChooser column_ColumnDataTypeChooser0 = Column.newColumn("+)*xz");
      Column.ColumnConstraintDef column_ColumnConstraintDef0 = column_ColumnDataTypeChooser0.typeString(0);
      ColumnConstraint.FinalizedColumnConstraint columnConstraint_FinalizedColumnConstraint0 = mock(ColumnConstraint.FinalizedColumnConstraint.class, new ViolatedAssumptionAnswer());
      Column.FinalizedColumn column_FinalizedColumn0 = column_ColumnConstraintDef0.constraint(columnConstraint_FinalizedColumnConstraint0);
      assertNotNull(column_FinalizedColumn0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Column.ColumnDataTypeChooser column_ColumnDataTypeChooser0 = Column.newColumn((String) null);
      Column.ColumnConstraintDef column_ColumnConstraintDef0 = column_ColumnDataTypeChooser0.typeInteger();
      assertNotNull(column_ColumnConstraintDef0);
  }
}
