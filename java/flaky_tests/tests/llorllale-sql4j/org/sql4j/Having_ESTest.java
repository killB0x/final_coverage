/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:39:50 GMT 2022
 */

package org.sql4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sql4j.Condition;
import org.sql4j.Database;
import org.sql4j.Having;
import org.sql4j.SqlBuilder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Having_ESTest extends Having_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Condition.FinalizedCondition condition_FinalizedCondition0 = mock(Condition.FinalizedCondition.class, new ViolatedAssumptionAnswer());
      doReturn(sqlBuilder0, sqlBuilder0).when(condition_FinalizedCondition0).getContext();
      Database database0 = Database.ORACLE;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      SqlBuilder sqlBuilder1 = new SqlBuilder(database0, connection0);
      Having having0 = new Having(sqlBuilder1, condition_FinalizedCondition0);
      Condition.FinalizedCondition condition_FinalizedCondition1 = mock(Condition.FinalizedCondition.class, new ViolatedAssumptionAnswer());
      doReturn(sqlBuilder0, (SqlBuilder) null).when(condition_FinalizedCondition1).getContext();
      // Undeclared exception!
      try { 
        having0.having(condition_FinalizedCondition1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sql4j.Having", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      sqlBuilder0.append("?");
      Condition.FinalizedCondition condition_FinalizedCondition0 = mock(Condition.FinalizedCondition.class, new ViolatedAssumptionAnswer());
      doReturn(sqlBuilder0, (SqlBuilder) null).when(condition_FinalizedCondition0).getContext();
      Having having0 = null;
      try {
        having0 = new Having(sqlBuilder0, condition_FinalizedCondition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sql4j.Having", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Condition.FinalizedCondition condition_FinalizedCondition0 = mock(Condition.FinalizedCondition.class, new ViolatedAssumptionAnswer());
      doReturn(sqlBuilder0, (SqlBuilder) null).when(condition_FinalizedCondition0).getContext();
      Having having0 = null;
      try {
        having0 = new Having(sqlBuilder0, condition_FinalizedCondition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sql4j.Having", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Condition.FinalizedCondition condition_FinalizedCondition0 = mock(Condition.FinalizedCondition.class, new ViolatedAssumptionAnswer());
      doReturn(sqlBuilder0, sqlBuilder0).when(condition_FinalizedCondition0).getContext();
      Having having0 = new Having(sqlBuilder0, condition_FinalizedCondition0);
      having0.getParameters();
      assertEquals("HAVING HAVING ", having0.toPreparedSqlString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Condition.FinalizedCondition condition_FinalizedCondition0 = mock(Condition.FinalizedCondition.class, new ViolatedAssumptionAnswer());
      doReturn(sqlBuilder0, sqlBuilder0).when(condition_FinalizedCondition0).getContext();
      Having having0 = new Having(sqlBuilder0, condition_FinalizedCondition0);
      // Undeclared exception!
      try { 
        having0.orderBy("z&*Pxp|");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("org.sql4j.OrderBy", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Condition.FinalizedCondition condition_FinalizedCondition0 = mock(Condition.FinalizedCondition.class, new ViolatedAssumptionAnswer());
      doReturn(sqlBuilder0, sqlBuilder0).when(condition_FinalizedCondition0).getContext();
      Having having0 = new Having(sqlBuilder0, condition_FinalizedCondition0);
      String string0 = having0.toPreparedSqlString();
      assertEquals("HAVING HAVING ", string0);
  }
}
