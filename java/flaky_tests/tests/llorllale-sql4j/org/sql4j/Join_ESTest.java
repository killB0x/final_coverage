/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:33:01 GMT 2022
 */

package org.sql4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sql4j.Condition;
import org.sql4j.Join;
import org.sql4j.SqlBuilder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Join_ESTest extends Join_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Join.RightOuterJoin join_RightOuterJoin0 = new Join.RightOuterJoin(sqlBuilder0, "m,gJqTCS)\".2_!pA");
      String string0 = join_RightOuterJoin0.joinPrefix();
      assertEquals("RIGHT OUTER ", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Join.RightInnerJoin join_RightInnerJoin0 = new Join.RightInnerJoin(sqlBuilder0, "RIGHT OUTER ");
      String string0 = join_RightInnerJoin0.joinPrefix();
      assertEquals("RIGHT INNER ", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Join.LeftOuterJoin join_LeftOuterJoin0 = new Join.LeftOuterJoin(sqlBuilder0, "m,gJqTCS)\".2_!pA");
      String string0 = join_LeftOuterJoin0.joinPrefix();
      assertEquals("LEFT OUTER ", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Join.LeftInnerJoin join_LeftInnerJoin0 = new Join.LeftInnerJoin(sqlBuilder0, "m,gJqTCS)\".2_!pA");
      String string0 = join_LeftInnerJoin0.joinPrefix();
      assertEquals("LEFT INNER ", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      SqlBuilder sqlBuilder1 = new SqlBuilder(sqlBuilder0);
      Join.LeftOuterJoin join_LeftOuterJoin0 = new Join.LeftOuterJoin(sqlBuilder1, (String) null);
      SqlBuilder sqlBuilder2 = new SqlBuilder(sqlBuilder1);
      Condition.FinalizedCondition condition_FinalizedCondition0 = mock(Condition.FinalizedCondition.class, new ViolatedAssumptionAnswer());
      doReturn(sqlBuilder2, (SqlBuilder) null).when(condition_FinalizedCondition0).getContext();
      // Undeclared exception!
      try { 
        join_LeftOuterJoin0.on(condition_FinalizedCondition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sql4j.Join", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Join join0 = new Join(sqlBuilder0, "");
      String string0 = join0.joinPrefix();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Join join0 = null;
      try {
        join0 = new Join((SqlBuilder) null, "/Y{J}.,%1ApA#@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sql4j.Join", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SqlBuilder sqlBuilder0 = new SqlBuilder();
      Join.RightInnerJoin join_RightInnerJoin0 = new Join.RightInnerJoin(sqlBuilder0, "");
      String string0 = join_RightInnerJoin0.joinPrefix();
      assertEquals("RIGHT INNER ", string0);
  }
}
