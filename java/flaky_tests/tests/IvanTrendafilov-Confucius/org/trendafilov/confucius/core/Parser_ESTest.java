/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 18:44:07 GMT 2022
 */

package org.trendafilov.confucius.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.nio.file.InvalidPathException;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.trendafilov.confucius.core.ConfigurationDataProvider;
import org.trendafilov.confucius.core.FileConfigurationDataProvider;
import org.trendafilov.confucius.core.Parser;
import org.trendafilov.confucius.core.StreamConfigurationDataProvider;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileConfigurationDataProvider fileConfigurationDataProvider0 = new FileConfigurationDataProvider("q[Hv)z");
      Parser parser0 = null;
      try {
        parser0 = new Parser(fileConfigurationDataProvider0, "q[Hv)z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to read configuration
         //
         verifyException("org.trendafilov.confucius.core.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileConfigurationDataProvider fileConfigurationDataProvider0 = new FileConfigurationDataProvider("[d\uFFFDC2\u0004^");
      Parser parser0 = null;
      try {
        parser0 = new Parser(fileConfigurationDataProvider0, "[d\uFFFDC2\u0004^");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Parser parser0 = null;
      try {
        parser0 = new Parser((ConfigurationDataProvider) null, "x0bl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.trendafilov.confucius.core.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 990);
      StreamConfigurationDataProvider streamConfigurationDataProvider0 = new StreamConfigurationDataProvider(byteArrayInputStream0);
      Parser parser0 = null;
      try {
        parser0 = new Parser(streamConfigurationDataProvider0, "org.trendafilov.confucius.core.FileConfigurationDataProvider");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // arraycopy: source index -1 out of bounds for byte[9]
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StreamConfigurationDataProvider streamConfigurationDataProvider0 = new StreamConfigurationDataProvider(byteArrayInputStream0);
      Parser parser0 = new Parser(streamConfigurationDataProvider0, "4pS?[a}$pHl");
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileConfigurationDataProvider fileConfigurationDataProvider0 = new FileConfigurationDataProvider((String) null);
      Parser parser0 = new Parser(fileConfigurationDataProvider0, (String) null);
      Map<String, String> map0 = parser0.getConfiguration();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StreamConfigurationDataProvider streamConfigurationDataProvider0 = new StreamConfigurationDataProvider(byteArrayInputStream0);
      Parser parser0 = new Parser(streamConfigurationDataProvider0, "5");
      Map<String, String> map0 = parser0.getConfiguration();
      assertEquals(1, map0.size());
  }
}
