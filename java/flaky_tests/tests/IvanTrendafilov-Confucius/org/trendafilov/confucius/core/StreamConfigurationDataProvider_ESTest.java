/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 18:47:38 GMT 2022
 */

package org.trendafilov.confucius.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.trendafilov.confucius.core.StreamConfigurationDataProvider;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StreamConfigurationDataProvider_ESTest extends StreamConfigurationDataProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StreamConfigurationDataProvider streamConfigurationDataProvider0 = new StreamConfigurationDataProvider(byteArrayInputStream0);
      InputStream inputStream0 = streamConfigurationDataProvider0.getInputStream();
      assertSame(inputStream0, byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StreamConfigurationDataProvider streamConfigurationDataProvider0 = new StreamConfigurationDataProvider(byteArrayInputStream0);
      List<String> list0 = streamConfigurationDataProvider0.getAllLines();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StreamConfigurationDataProvider streamConfigurationDataProvider0 = new StreamConfigurationDataProvider((InputStream) null);
      List<String> list0 = streamConfigurationDataProvider0.getAllLines();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StreamConfigurationDataProvider streamConfigurationDataProvider0 = new StreamConfigurationDataProvider(pipedInputStream0);
      try { 
        streamConfigurationDataProvider0.getAllLines();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StreamConfigurationDataProvider streamConfigurationDataProvider0 = new StreamConfigurationDataProvider((InputStream) null);
      InputStream inputStream0 = streamConfigurationDataProvider0.getInputStream();
      assertNull(inputStream0);
  }
}
