/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 19:32:14 GMT 2022
 */

package com.pyramidacceptors.ptalk.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pyramidacceptors.ptalk.api.RS232Configuration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RS232Configuration_ESTest extends RS232Configuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RS232Configuration rS232Configuration0 = RS232Configuration.INSTANCE;
      assertEquals((-3299), rS232Configuration0.getPollRetryLimit());
      
      boolean boolean0 = rS232Configuration0.setPollRetryLimit(15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RS232Configuration rS232Configuration0 = RS232Configuration.INSTANCE;
      assertEquals((-4911), rS232Configuration0.getPollrate());
      
      boolean boolean0 = rS232Configuration0.setPollrate(5000);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RS232Configuration[] rS232ConfigurationArray0 = RS232Configuration.values();
      assertEquals(1, rS232ConfigurationArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RS232Configuration rS232Configuration0 = RS232Configuration.INSTANCE;
      RS232Configuration rS232Configuration1 = RS232Configuration.valueOf("INSTANCE");
      //  // Unstable assertion: assertEquals(0, rS232Configuration1.getEventMask());
      
      rS232Configuration0.setEventMask((-4911));
      rS232Configuration0.setPollrate((-4911));
      RS232Configuration rS232Configuration2 = RS232Configuration.INSTANCE;
      boolean boolean0 = rS232Configuration2.setPollrate((-4911));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RS232Configuration.RS232State.values();
      RS232Configuration rS232Configuration0 = RS232Configuration.INSTANCE;
      rS232Configuration0.toggleAck();
      rS232Configuration0.setEventMask(0);
      rS232Configuration0.getPollrate();
      rS232Configuration0.getEscrowMode();
      rS232Configuration0.getEnableMask();
      // Undeclared exception!
      try { 
        RS232Configuration.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.pyramidacceptors.ptalk.api.RS232Configuration.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RS232Configuration rS232Configuration0 = RS232Configuration.INSTANCE;
      rS232Configuration0.setPollrate(0);
      rS232Configuration0.setEnabled(false);
      rS232Configuration0.getEventMask();
      rS232Configuration0.setEventMask(2383);
      rS232Configuration0.setPollrate(2383);
      rS232Configuration0.toggleAck();
      rS232Configuration0.setPollRetryLimit((-3299));
      rS232Configuration0.getEscrowMode();
      rS232Configuration0.setPollrate(2383);
      rS232Configuration0.setEventMask((-4911));
      rS232Configuration0.getPollRetryLimit();
      rS232Configuration0.getEnableMask();
      rS232Configuration0.setEnableMask(0);
      rS232Configuration0.setEnabled(false);
      rS232Configuration0.setEscrowMode(true);
      // Undeclared exception!
      try { 
        RS232Configuration.RS232State.valueOf("3_39^j0{f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.pyramidacceptors.ptalk.api.RS232Configuration.RS232State.3_39^j0{f
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RS232Configuration rS232Configuration0 = RS232Configuration.INSTANCE;
      rS232Configuration0.setEnabled(true);
      //  // Unstable assertion: assertEquals(0, rS232Configuration0.getEnableMask());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RS232Configuration rS232Configuration0 = RS232Configuration.INSTANCE;
      rS232Configuration0.toggleAck();
      boolean boolean0 = rS232Configuration0.getAck();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RS232Configuration rS232Configuration0 = RS232Configuration.INSTANCE;
      assertEquals(5, rS232Configuration0.getPollRetryLimit());
      
      boolean boolean0 = rS232Configuration0.setPollRetryLimit(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RS232Configuration rS232Configuration0 = RS232Configuration.INSTANCE;
      boolean boolean0 = rS232Configuration0.setPollrate(5693);
      //  // Unstable assertion: assertEquals(0, rS232Configuration0.getPollrate());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RS232Configuration rS232Configuration0 = RS232Configuration.INSTANCE;
      rS232Configuration0.setPollrate(0);
      rS232Configuration0.setEnabled(true);
      rS232Configuration0.getEventMask();
      rS232Configuration0.setEventMask(0);
      rS232Configuration0.getPollRetryLimit();
      rS232Configuration0.getEnableMask();
      rS232Configuration0.setEnableMask(0);
      rS232Configuration0.setEnabled(false);
      rS232Configuration0.setEscrowMode(true);
      // Undeclared exception!
      try { 
        RS232Configuration.RS232State.valueOf("3j!_39^j0{z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.pyramidacceptors.ptalk.api.RS232Configuration.RS232State.3j!_39^j0{z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RS232Configuration rS232Configuration0 = RS232Configuration.valueOf("INSTANCE");
      rS232Configuration0.setEventMask((-1220));
      assertEquals((-1220), rS232Configuration0.getEventMask());
  }
}
