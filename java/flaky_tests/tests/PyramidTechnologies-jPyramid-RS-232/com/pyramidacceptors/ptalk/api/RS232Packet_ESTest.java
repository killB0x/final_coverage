/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 19:28:08 GMT 2022
 */

package com.pyramidacceptors.ptalk.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pyramidacceptors.ptalk.api.RS232Packet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RS232Packet_ESTest extends RS232Packet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      RS232Packet rS232Packet2 = rS232Packet1.parseAsNew(byteArray0);
      rS232Packet2.or((byte)2, (byte)2);
      byte[] byteArray1 = new byte[5];
      rS232Packet2.parseAsNew(byteArray1);
      rS232Packet0.hashCode();
      assertEquals(11, rS232Packet0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      rS232Packet0.parseAsNew(byteArray0);
      RS232Packet rS232Packet1 = new RS232Packet(byteArray0);
      rS232Packet0.or((byte)0, (byte)7);
      boolean boolean0 = rS232Packet0.equals(rS232Packet1);
      assertEquals(3, rS232Packet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      RS232Packet rS232Packet1 = new RS232Packet(byteArray0);
      boolean boolean0 = rS232Packet0.equals(rS232Packet1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = RS232Packet.serialNumberBytes();
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      boolean boolean0 = rS232Packet0.or(5, (byte)32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      boolean boolean0 = rS232Packet0.or((byte)0, (byte)7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[2];
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      boolean boolean0 = rS232Packet1.replace((byte)1, (byte)1);
      assertEquals(2, rS232Packet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      boolean boolean0 = rS232Packet0.replace(0, (byte) (-110));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      rS232Packet0.parseAsNew(byteArray0);
      RS232Packet rS232Packet1 = rS232Packet0.pack();
      rS232Packet1.pack();
      RS232Packet rS232Packet2 = rS232Packet0.pack();
      byte[] byteArray1 = new byte[4];
      byteArray1[1] = (byte) (-61);
      rS232Packet2.parseAsNew(byteArray1);
      assertEquals(11, rS232Packet2.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)10;
      rS232Packet0.parseAsNew(byteArray0);
      assertEquals(11, rS232Packet0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = RS232Packet.serialNumberBytes();
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      rS232Packet0.parseAsNew(byteArray0);
      boolean boolean0 = rS232Packet0.isValid();
      assertEquals(14, rS232Packet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      int int0 = rS232Packet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      assertFalse(rS232Packet1.isValid());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = RS232Packet.serialNumberBytes();
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      RS232Packet rS232Packet1 = rS232Packet0.pack();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      rS232Packet1.parseAsNew(byteArray1);
      rS232Packet0.pack();
      byte[] byteArray2 = new byte[0];
      rS232Packet1.parseAsNew(byteArray2);
      rS232Packet1.pack();
      assertEquals(12, rS232Packet1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      RS232Packet rS232Packet2 = rS232Packet1.parseAsNew(byteArray0);
      rS232Packet2.pack();
      rS232Packet0.pack();
      rS232Packet2.parseAsNew(byteArray0);
      rS232Packet2.pack();
      assertEquals((byte)2, rS232Packet2.getFirmwareRevision());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      rS232Packet0.parseAsNew(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-25);
      byteArray1[2] = (byte) (-25);
      byteArray1[3] = (byte) (-25);
      byteArray1[4] = (byte)2;
      byteArray1[6] = (byte) (-25);
      rS232Packet0.parseAsNew(byteArray1);
      rS232Packet0.pack();
      assertEquals(12, rS232Packet0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      RS232Packet rS232Packet2 = rS232Packet1.pack();
      RS232Packet rS232Packet3 = rS232Packet2.parseAsNew(byteArray0);
      byte[] byteArray1 = rS232Packet3.toBytes();
      boolean boolean0 = RS232Packet.isValid(byteArray1);
      assertEquals((byte)2, rS232Packet2.getFirmwareRevision());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      byte[] byteArray1 = new byte[5];
      RS232Packet rS232Packet2 = rS232Packet1.parseAsNew(byteArray1);
      rS232Packet0.parseAsNew(byteArray0);
      byte byte0 = rS232Packet2.getFirmwareRevision();
      assertEquals(11, rS232Packet2.size());
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-39);
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      RS232Packet rS232Packet1 = rS232Packet0.pack();
      RS232Packet rS232Packet2 = new RS232Packet();
      RS232Packet rS232Packet3 = rS232Packet1.parseAsNew(byteArray0);
      rS232Packet1.parseAsNew(byteArray0);
      rS232Packet3.pack();
      byte[] byteArray1 = rS232Packet2.toBytes();
      rS232Packet1.parseAsNew(byteArray1);
      byte byte0 = rS232Packet3.getFirmwareRevision();
      assertTrue(rS232Packet0.isValid());
      assertEquals((byte) (-39), byte0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      String string0 = rS232Packet1.getByteString();
      assertEquals(3, rS232Packet0.size());
      assertEquals("00 00 00 ", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)124;
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      rS232Packet1.pack();
      rS232Packet1.parseAsNew(byteArray0);
      rS232Packet1.getBillName();
      assertEquals(11, rS232Packet1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      rS232Packet1.parseAsNew(byteArray0);
      RS232Packet rS232Packet2 = rS232Packet1.pack();
      rS232Packet0.pack();
      rS232Packet2.parseAsNew(byteArray0);
      byte byte0 = rS232Packet1.getAcceptorModel();
      assertEquals(11, rS232Packet1.size());
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      assertEquals(1, rS232Packet0.size());
      
      byte byte0 = rS232Packet0.get(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = RS232Packet.serialNumberBytes();
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      byte byte0 = rS232Packet0.get(0);
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-56);
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      byte byte0 = rS232Packet1.get((byte)2);
      assertEquals(4, rS232Packet0.size());
      assertEquals((byte) (-56), byte0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      // Undeclared exception!
      try { 
        rS232Packet0.parseAsNew((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pyramidacceptors.ptalk.api.RS232Packet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      // Undeclared exception!
      try { 
        rS232Packet0.pack();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RS232Packet rS232Packet0 = null;
      try {
        rS232Packet0 = new RS232Packet((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null
         //
         verifyException("com.pyramidacceptors.ptalk.api.RS232Packet", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      RS232Packet rS232Packet2 = rS232Packet1.parseAsNew(byteArray0);
      byte[] byteArray1 = new byte[5];
      rS232Packet2.parseAsNew(byteArray1);
      boolean boolean0 = rS232Packet2.isValid();
      assertEquals(11, rS232Packet2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      RS232Packet rS232Packet2 = rS232Packet1.parseAsNew(byteArray0);
      byte[] byteArray1 = new byte[5];
      rS232Packet2.parseAsNew(byteArray1);
      boolean boolean0 = rS232Packet2.isValid();
      assertEquals(11, rS232Packet2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = RS232Packet.serialNumberBytes();
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      boolean boolean0 = rS232Packet0.isValid();
      assertEquals(7, rS232Packet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      int int0 = rS232Packet0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      String string0 = rS232Packet0.getByteString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      // Undeclared exception!
      try { 
        rS232Packet0.get(82);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      rS232Packet0.parseAsNew(byteArray0);
      byte[] byteArray1 = new byte[3];
      RS232Packet rS232Packet1 = new RS232Packet(byteArray1);
      boolean boolean0 = rS232Packet1.equals(rS232Packet0);
      assertEquals(3, rS232Packet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[5];
      RS232Packet rS232Packet1 = new RS232Packet(byteArray0);
      boolean boolean0 = rS232Packet1.equals(rS232Packet0);
      assertEquals(5, rS232Packet1.size());
      assertFalse(rS232Packet0.equals((Object)rS232Packet1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      Object object0 = new Object();
      boolean boolean0 = rS232Packet0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      rS232Packet0.parseAsNew(byteArray0);
      rS232Packet0.toString();
      assertEquals(3, rS232Packet0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[3] = (byte)124;
      byteArray0[2] = (byte)2;
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      rS232Packet0.pack();
      rS232Packet0.parseAsNew(byteArray0);
      rS232Packet0.getMessage();
      assertEquals(11, rS232Packet0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      String string0 = rS232Packet0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      rS232Packet0.parseAsNew(byteArray0);
      rS232Packet0.getMessage();
      assertEquals(3, rS232Packet0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[3] = (byte)96;
      byteArray0[1] = (byte)2;
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      rS232Packet0.pack();
      rS232Packet0.parseAsNew(byteArray0);
      assertEquals(11, rS232Packet0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[3] = (byte) (-104);
      byteArray0[1] = (byte)2;
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      rS232Packet0.pack();
      rS232Packet1.parseAsNew(byteArray0);
      assertEquals(11, rS232Packet1.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      RS232Packet rS232Packet2 = rS232Packet1.parseAsNew(byteArray0);
      rS232Packet2.or((byte)2, (byte)2);
      byte[] byteArray1 = new byte[5];
      rS232Packet2.parseAsNew(byteArray1);
      boolean boolean0 = rS232Packet2.isValid();
      assertEquals(11, rS232Packet2.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      boolean boolean0 = rS232Packet1.or((byte)2, (byte)2);
      assertEquals(3, rS232Packet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      boolean boolean0 = rS232Packet0.or((-738), (byte)2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[5];
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      boolean boolean0 = rS232Packet1.replace((byte)2, (byte)17);
      assertEquals(5, rS232Packet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      boolean boolean0 = rS232Packet0.replace((-761), (byte)2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        RS232Packet.isValid((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null
         //
         verifyException("com.pyramidacceptors.ptalk.api.RS232Packet", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte[] byteArray0 = new byte[3];
      RS232Packet rS232Packet1 = rS232Packet0.parseAsNew(byteArray0);
      boolean boolean0 = rS232Packet1.equals(rS232Packet0);
      assertEquals(3, rS232Packet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = RS232Packet.resetBytes();
      RS232Packet rS232Packet0 = new RS232Packet();
      rS232Packet0.parseAsNew(byteArray0);
      rS232Packet0.toString();
      assertEquals(7, rS232Packet0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = RS232Packet.isValid(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      rS232Packet0.getBillName();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      byte byte0 = rS232Packet0.getFirmwareRevision();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = RS232Packet.serialNumberBytes();
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      rS232Packet0.getAcceptorModel();
      assertEquals(7, rS232Packet0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = RS232Packet.serialNumberBytes();
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      rS232Packet0.getCreditAction();
      assertEquals(7, rS232Packet0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      rS232Packet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RS232Packet rS232Packet0 = new RS232Packet();
      String string0 = rS232Packet0.toString();
      assertEquals("Command - Raw: ", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = RS232Packet.serialNumberBytes();
      RS232Packet rS232Packet0 = new RS232Packet(byteArray0);
      rS232Packet0.getInterpretedEvents();
      assertEquals(7, rS232Packet0.size());
  }
}
