/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 06:09:19 GMT 2022
 */

package app.myoss.cloud.mybatis.generator.types.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType;
import app.myoss.cloud.mybatis.generator.types.impl.PrimitiveTypeWrapper;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FullyQualifiedJavaType_ESTest extends FullyQualifiedJavaType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType0);
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("Q");
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.getImportList();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("float");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?jva.la[.Chr>cte");
      fullyQualifiedJavaType0.getImportList();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?jva.lan[.Chracter");
      FullyQualifiedJavaType.getNewIteratorInstance();
      fullyQualifiedJavaType0.getImportList();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FullyQualifiedJavaType.getNewIteratorInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("qbu.7Yq#qZj|CeV1");
      fullyQualifiedJavaType0.getImportList();
      fullyQualifiedJavaType0.getPackageName();
      FullyQualifiedJavaType.getNewMapInstance();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("Z%mx");
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("short");
      FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = new FullyQualifiedJavaType("kwK*A4J:ML(_~");
      FullyQualifiedJavaType.getNewIteratorInstance();
      fullyQualifiedJavaType0.getShortName();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("Z%mx");
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("double");
      Object object0 = new Object();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getObjectInstance();
      fullyQualifiedJavaType2.equals("?jva.lan[.Chracter");
      fullyQualifiedJavaType2.getBaseQualifiedName();
      fullyQualifiedJavaType2.getShortName();
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getIntInstance();
      fullyQualifiedJavaType3.getBaseQualifiedName();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("double");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("long");
      fullyQualifiedJavaType0.getShortName();
      FullyQualifiedJavaType.getBooleanPrimitiveInstance();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("long");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("byte");
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewIteratorInstance();
      fullyQualifiedJavaType1.getImportList();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("short");
      FullyQualifiedJavaType.getNewIteratorInstance();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("char");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewListInstance();
      fullyQualifiedJavaType0.getFullyQualifiedName();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewIteratorInstance();
      fullyQualifiedJavaType1.hashCode();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewMapInstance();
      FullyQualifiedJavaType.getNewListInstance();
      fullyQualifiedJavaType0.toString();
      fullyQualifiedJavaType2.toString();
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType0);
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewIteratorInstance();
      Object object0 = new Object();
      fullyQualifiedJavaType3.equals(object0);
      fullyQualifiedJavaType2.getBaseQualifiedName();
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.getShortName();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getObjectInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType(", ");
      fullyQualifiedJavaType1.compareTo(fullyQualifiedJavaType0);
      fullyQualifiedJavaType1.getShortName();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FullyQualifiedJavaType.getObjectInstance();
      PrimitiveTypeWrapper.getIntegerInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("");
      fullyQualifiedJavaType0.getShortName();
      FullyQualifiedJavaType.getNewListInstance();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getObjectInstance();
      PrimitiveTypeWrapper.getDoubleInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("?AZ%ImxR");
      fullyQualifiedJavaType1.getFullyQualifiedName();
      Object object0 = new Object();
      fullyQualifiedJavaType1.compareTo(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getObjectInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = new FullyQualifiedJavaType("?");
      fullyQualifiedJavaType1.getBaseShortName();
      Object object0 = new Object();
      fullyQualifiedJavaType0.equals(object0);
      fullyQualifiedJavaType2.getBaseShortName();
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getIntInstance();
      fullyQualifiedJavaType3.isExtendsBoundedWildcard();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getObjectInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("?AZ%Im/R");
      fullyQualifiedJavaType0.getBaseShortName();
      Object object0 = new Object();
      fullyQualifiedJavaType1.equals("Object");
      fullyQualifiedJavaType1.compareTo(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?AZ{Im/R");
      fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      fullyQualifiedJavaType0.addTypeArgument((FullyQualifiedJavaType) null);
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.getFullyQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?AZ%ImxR");
      fullyQualifiedJavaType0.getShortName();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      fullyQualifiedJavaType0.addTypeArgument((FullyQualifiedJavaType) null);
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.getImportList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewListInstance();
      fullyQualifiedJavaType0.getShortName();
      fullyQualifiedJavaType0.isPrimitive();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = fullyQualifiedJavaType2.getPrimitiveTypeWrapper();
      primitiveTypeWrapper0.getBaseShortName();
      fullyQualifiedJavaType1.getImportList();
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewHashMapInstance();
      primitiveTypeWrapper0.addTypeArgument(fullyQualifiedJavaType3);
      primitiveTypeWrapper0.hashCode();
      primitiveTypeWrapper0.getFullyQualifiedName();
      primitiveTypeWrapper0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewHashMapInstance();
      fullyQualifiedJavaType1.getImportList();
      fullyQualifiedJavaType0.getShortName();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewArrayListInstance();
      fullyQualifiedJavaType2.addTypeArgument(fullyQualifiedJavaType0);
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getLongInstance();
      primitiveTypeWrapper0.isExplicitlyImported();
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getStringInstance();
      fullyQualifiedJavaType3.addTypeArgument(fullyQualifiedJavaType0);
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getLongInstance();
      fullyQualifiedJavaType3.getTypeArguments();
      primitiveTypeWrapper1.getBaseShortName();
      FullyQualifiedJavaType.getNewArrayListInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getIntInstance();
      fullyQualifiedJavaType4.equals(fullyQualifiedJavaType5);
      FullyQualifiedJavaType.getNewArrayListInstance();
      FullyQualifiedJavaType.getNewArrayListInstance();
      PrimitiveTypeWrapper.getShortInstance();
      fullyQualifiedJavaType1.getFullyQualifiedName();
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getStringInstance();
      fullyQualifiedJavaType6.addTypeArgument(fullyQualifiedJavaType5);
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getObjectInstance();
      fullyQualifiedJavaType7.getPackageName();
      FullyQualifiedJavaType.getStringInstance();
      FullyQualifiedJavaType.getIntInstance();
      fullyQualifiedJavaType2.getBaseQualifiedName();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = null;
      try {
        fullyQualifiedJavaType0 = new FullyQualifiedJavaType("<}LBp)_q]Bi9\"B$C0R");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '.'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = null;
      try {
        fullyQualifiedJavaType0 = new FullyQualifiedJavaType("9?x<Y;tI`E");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '.'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      fullyQualifiedJavaType0.addTypeArgument((FullyQualifiedJavaType) null);
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewListInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getObjectInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getFloatInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getByteInstance();
      FullyQualifiedJavaType.getStringInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getDoubleInstance();
      fullyQualifiedJavaType0.getShortName();
      fullyQualifiedJavaType0.isWildcardType();
      fullyQualifiedJavaType1.hashCode();
      fullyQualifiedJavaType0.getPackageName();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewIteratorInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper3 = PrimitiveTypeWrapper.getCharacterInstance();
      PrimitiveTypeWrapper.getBooleanInstance();
      fullyQualifiedJavaType2.hashCode();
      fullyQualifiedJavaType1.isBoundedWildcard();
      fullyQualifiedJavaType1.isWildcardType();
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewArrayListInstance();
      fullyQualifiedJavaType3.getFullyQualifiedName();
      primitiveTypeWrapper1.getTypeArguments();
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getIntInstance();
      fullyQualifiedJavaType4.getImportList();
      PrimitiveTypeWrapper.getBooleanInstance();
      primitiveTypeWrapper1.isArray();
      FullyQualifiedJavaType.getStringInstance();
      fullyQualifiedJavaType4.hashCode();
      primitiveTypeWrapper3.getShortName();
      primitiveTypeWrapper2.getBaseShortName();
      fullyQualifiedJavaType4.getPackageName();
      primitiveTypeWrapper0.isExplicitlyImported();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?A%ImxR");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = null;
      try {
        fullyQualifiedJavaType0 = new FullyQualifiedJavaType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getObjectInstance();
      fullyQualifiedJavaType1.getImportList();
      fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType1);
      fullyQualifiedJavaType1.getImportList();
      fullyQualifiedJavaType0.getShortName();
      fullyQualifiedJavaType1.getPackageName();
      fullyQualifiedJavaType1.isExtendsBoundedWildcard();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewIteratorInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewIteratorInstance();
      FullyQualifiedJavaType.getNewIteratorInstance();
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType2);
      fullyQualifiedJavaType0.getFullyQualifiedName();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewArrayListInstance();
      fullyQualifiedJavaType0.isWildcardType();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getShortInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewListInstance();
      fullyQualifiedJavaType0.toString();
      fullyQualifiedJavaType0.hashCode();
      fullyQualifiedJavaType0.getTypeArguments();
      fullyQualifiedJavaType0.toString();
      fullyQualifiedJavaType1.toString();
      fullyQualifiedJavaType1.getImportList();
      fullyQualifiedJavaType0.isPrimitive();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      PrimitiveTypeWrapper.getShortInstance();
      fullyQualifiedJavaType1.getPackageName();
      fullyQualifiedJavaType2.addTypeArgument(primitiveTypeWrapper0);
      fullyQualifiedJavaType1.getFullyQualifiedName();
      fullyQualifiedJavaType2.getShortName();
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewArrayListInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getStringInstance();
      fullyQualifiedJavaType1.isWildcardType();
      PrimitiveTypeWrapper.getShortInstance();
      FullyQualifiedJavaType.getIntInstance();
      fullyQualifiedJavaType4.addTypeArgument(fullyQualifiedJavaType3);
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getNewArrayListInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getIntInstance();
      primitiveTypeWrapper0.hashCode();
      fullyQualifiedJavaType3.isPrimitive();
      fullyQualifiedJavaType4.addTypeArgument(fullyQualifiedJavaType0);
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getNewArrayListInstance();
      fullyQualifiedJavaType7.compareTo(fullyQualifiedJavaType5);
      FullyQualifiedJavaType.getObjectInstance();
      fullyQualifiedJavaType2.getBaseShortName();
      fullyQualifiedJavaType6.isWildcardType();
      fullyQualifiedJavaType0.getPackageName();
      fullyQualifiedJavaType5.compareTo(fullyQualifiedJavaType4);
      fullyQualifiedJavaType1.getFullyQualifiedName();
      FullyQualifiedJavaType.getNewArrayListInstance();
      FullyQualifiedJavaType.getNewArrayListInstance();
      FullyQualifiedJavaType.getIntInstance();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      fullyQualifiedJavaType0.getShortName();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewHashMapInstance();
      fullyQualifiedJavaType0.toString();
      fullyQualifiedJavaType0.getImportList();
      PrimitiveTypeWrapper.getByteInstance();
      PrimitiveTypeWrapper.getBooleanInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewMapInstance();
      fullyQualifiedJavaType1.getShortName();
      PrimitiveTypeWrapper.getFloatInstance();
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      PrimitiveTypeWrapper.getByteInstance();
      FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType.getNewMapInstance();
      PrimitiveTypeWrapper.getLongInstance();
      FullyQualifiedJavaType.getObjectInstance();
      FullyQualifiedJavaType.getNewListInstance();
      PrimitiveTypeWrapper.getShortInstance();
      fullyQualifiedJavaType1.getShortName();
      fullyQualifiedJavaType1.getImportList();
      fullyQualifiedJavaType0.getBaseQualifiedName();
      FullyQualifiedJavaType.getStringInstance();
      FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType.getNewIteratorInstance();
      fullyQualifiedJavaType0.isExplicitlyImported();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.compareTo((FullyQualifiedJavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      Object object0 = new Object();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getIntInstance();
      fullyQualifiedJavaType0.equals(fullyQualifiedJavaType1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      fullyQualifiedJavaType0.addTypeArgument((FullyQualifiedJavaType) null);
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.getShortName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      fullyQualifiedJavaType0.getPrimitiveTypeWrapper();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      FullyQualifiedJavaType.getObjectInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewArrayListInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewListInstance();
      fullyQualifiedJavaType0.getFullyQualifiedName();
      FullyQualifiedJavaType.getNewIteratorInstance();
      FullyQualifiedJavaType.getNewIteratorInstance();
      fullyQualifiedJavaType3.getPrimitiveTypeWrapper();
      fullyQualifiedJavaType3.hashCode();
      fullyQualifiedJavaType3.hashCode();
      FullyQualifiedJavaType.getDateInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getNewMapInstance();
      fullyQualifiedJavaType2.getShortName();
      FullyQualifiedJavaType.getNewListInstance();
      fullyQualifiedJavaType4.toString();
      fullyQualifiedJavaType3.addTypeArgument((FullyQualifiedJavaType) null);
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getNewIteratorInstance();
      fullyQualifiedJavaType1.equals(fullyQualifiedJavaType2);
      fullyQualifiedJavaType5.isArray();
      fullyQualifiedJavaType1.getBaseQualifiedName();
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType3.getShortName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType0);
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.getShortName();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("java.lang.Long");
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType1);
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewArrayListInstance();
      FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getObjectInstance();
      fullyQualifiedJavaType3.hashCode();
      PrimitiveTypeWrapper.getIntegerInstance();
      PrimitiveTypeWrapper.getByteInstance();
      fullyQualifiedJavaType1.isPrimitive();
      fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType2);
      FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      fullyQualifiedJavaType0.getBaseShortName();
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getDateInstance();
      fullyQualifiedJavaType4.compareTo(fullyQualifiedJavaType2);
      fullyQualifiedJavaType0.isPrimitive();
      FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType.getNewArrayListInstance();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewListInstance();
      fullyQualifiedJavaType0.getBaseQualifiedName();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      fullyQualifiedJavaType0.getPackageName();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      FullyQualifiedJavaType.getStringInstance();
      fullyQualifiedJavaType0.getShortName();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewListInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewHashMapInstance();
      fullyQualifiedJavaType1.addTypeArgument(fullyQualifiedJavaType0);
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getDateInstance();
      PrimitiveTypeWrapper.getIntegerInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewMapInstance();
      FullyQualifiedJavaType.getNewArrayListInstance();
      fullyQualifiedJavaType3.addTypeArgument(fullyQualifiedJavaType0);
      FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getNewMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getStringInstance();
      PrimitiveTypeWrapper.getShortInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getFloatInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getDoubleInstance();
      fullyQualifiedJavaType0.getImportList();
      fullyQualifiedJavaType0.getTypeArguments();
      primitiveTypeWrapper1.toString();
      primitiveTypeWrapper1.getPackageName();
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getNewMapInstance();
      primitiveTypeWrapper1.isArray();
      primitiveTypeWrapper0.getTypeArguments();
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getNewArrayListInstance();
      PrimitiveTypeWrapper.getFloatInstance();
      fullyQualifiedJavaType7.toString();
      fullyQualifiedJavaType7.getImportList();
      FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType8 = FullyQualifiedJavaType.getObjectInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType9 = FullyQualifiedJavaType.getStringInstance();
      fullyQualifiedJavaType8.isExplicitlyImported();
      FullyQualifiedJavaType fullyQualifiedJavaType10 = FullyQualifiedJavaType.getNewMapInstance();
      FullyQualifiedJavaType.getNewMapInstance();
      fullyQualifiedJavaType6.addTypeArgument(fullyQualifiedJavaType2);
      primitiveTypeWrapper1.getBaseQualifiedName();
      fullyQualifiedJavaType1.getFullyQualifiedName();
      fullyQualifiedJavaType5.getShortName();
      fullyQualifiedJavaType10.addTypeArgument(fullyQualifiedJavaType4);
      fullyQualifiedJavaType9.getPackageName();
      primitiveTypeWrapper1.getTypeArguments();
      FullyQualifiedJavaType.getIntInstance();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewMapInstance();
      fullyQualifiedJavaType0.getShortName();
      fullyQualifiedJavaType0.getTypeArguments();
      PrimitiveTypeWrapper.getLongInstance();
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      fullyQualifiedJavaType1.isExtendsBoundedWildcard();
      fullyQualifiedJavaType0.getFullyQualifiedName();
      fullyQualifiedJavaType0.getBaseShortName();
      fullyQualifiedJavaType0.getImportList();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType(">5_]d");
      fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType1);
      FullyQualifiedJavaType fullyQualifiedJavaType2 = new FullyQualifiedJavaType("short");
      fullyQualifiedJavaType2.compareTo(fullyQualifiedJavaType1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewIteratorInstance();
      fullyQualifiedJavaType0.hashCode();
      fullyQualifiedJavaType0.isPrimitive();
      fullyQualifiedJavaType0.hashCode();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewArrayListInstance();
      PrimitiveTypeWrapper.getLongInstance();
      fullyQualifiedJavaType1.getImportList();
      fullyQualifiedJavaType1.getImportList();
      fullyQualifiedJavaType1.getShortName();
      fullyQualifiedJavaType0.getTypeArguments();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getDateInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getByteInstance();
      FullyQualifiedJavaType.getIntInstance();
      fullyQualifiedJavaType0.getBaseShortName();
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewIteratorInstance();
      FullyQualifiedJavaType.getIntInstance();
      fullyQualifiedJavaType3.isExtendsBoundedWildcard();
      fullyQualifiedJavaType2.getPackageName();
      primitiveTypeWrapper0.getBaseShortName();
      FullyQualifiedJavaType.getNewHashMapInstance();
      fullyQualifiedJavaType0.getBaseShortName();
      fullyQualifiedJavaType3.equals("Byte");
      FullyQualifiedJavaType.getBooleanPrimitiveInstance();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      fullyQualifiedJavaType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      fullyQualifiedJavaType0.isBoundedWildcard();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType1);
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewHashMapInstance();
      fullyQualifiedJavaType2.compareTo(fullyQualifiedJavaType1);
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewMapInstance();
      FullyQualifiedJavaType.getDateInstance();
      fullyQualifiedJavaType3.addTypeArgument(fullyQualifiedJavaType0);
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getCharacterInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getStringInstance();
      PrimitiveTypeWrapper.getShortInstance();
      primitiveTypeWrapper0.getImportList();
      fullyQualifiedJavaType4.isPrimitive();
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getNewHashMapInstance();
      fullyQualifiedJavaType5.hashCode();
      FullyQualifiedJavaType.getNewArrayListInstance();
      PrimitiveTypeWrapper.getLongInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getNewHashMapInstance();
      fullyQualifiedJavaType0.isBoundedWildcard();
      primitiveTypeWrapper0.getImportList();
      fullyQualifiedJavaType6.getTypeArguments();
      FullyQualifiedJavaType.getNewIteratorInstance();
      FullyQualifiedJavaType.getNewListInstance();
      FullyQualifiedJavaType.getBooleanPrimitiveInstance();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      fullyQualifiedJavaType0.getImportList();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getShortInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getCharacterInstance();
      fullyQualifiedJavaType0.toString();
      primitiveTypeWrapper0.isExtendsBoundedWildcard();
      FullyQualifiedJavaType.getNewIteratorInstance();
      primitiveTypeWrapper0.isArray();
      primitiveTypeWrapper1.isArray();
      fullyQualifiedJavaType0.toString();
      FullyQualifiedJavaType.getObjectInstance();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getFloatInstance();
      primitiveTypeWrapper0.getImportList();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getObjectInstance();
      FullyQualifiedJavaType.getObjectInstance();
      fullyQualifiedJavaType0.getShortName();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      fullyQualifiedJavaType0.getBaseShortName();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getObjectInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("?AZ%ImxR");
      fullyQualifiedJavaType1.getShortName();
      fullyQualifiedJavaType0.getShortName();
      fullyQualifiedJavaType1.isWildcardType();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      fullyQualifiedJavaType0.toString();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getDateInstance();
      FullyQualifiedJavaType.getNewIteratorInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getLongInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getIntegerInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getFloatInstance();
      fullyQualifiedJavaType0.toString();
      fullyQualifiedJavaType0.toString();
      primitiveTypeWrapper1.toString();
      fullyQualifiedJavaType0.isWildcardType();
      primitiveTypeWrapper2.addTypeArgument(primitiveTypeWrapper0);
      FullyQualifiedJavaType.getNewArrayListInstance();
      FullyQualifiedJavaType.getNewMapInstance();
      fullyQualifiedJavaType1.isWildcardType();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("float");
      fullyQualifiedJavaType0.getImportList();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("Z%mx");
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("char");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("Z%mx");
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("byte");
      fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?AZ{I/R");
      FullyQualifiedJavaType fullyQualifiedJavaType1 = null;
      try {
        fullyQualifiedJavaType1 = new FullyQualifiedJavaType(",<>");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getObjectInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("?AZ%ImxR");
      fullyQualifiedJavaType0.getBaseShortName();
      Object object0 = new Object();
      fullyQualifiedJavaType1.equals("Object");
      fullyQualifiedJavaType1.getBaseShortName();
      fullyQualifiedJavaType1.isExtendsBoundedWildcard();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewArrayListInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewIteratorInstance();
      FullyQualifiedJavaType.getNewIteratorInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getDoubleInstance();
      fullyQualifiedJavaType0.isExtendsBoundedWildcard();
      fullyQualifiedJavaType0.getTypeArguments();
      primitiveTypeWrapper1.isExplicitlyImported();
      PrimitiveTypeWrapper.getDoubleInstance();
      primitiveTypeWrapper1.isExtendsBoundedWildcard();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewMapInstance();
      FullyQualifiedJavaType.getObjectInstance();
      fullyQualifiedJavaType1.getBaseShortName();
      primitiveTypeWrapper0.equals(fullyQualifiedJavaType1);
      FullyQualifiedJavaType.getObjectInstance();
      fullyQualifiedJavaType2.isPrimitive();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      fullyQualifiedJavaType0.getFullyQualifiedName();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("AZ%ImxR");
      fullyQualifiedJavaType0.getBaseShortName();
      PrimitiveTypeWrapper.getLongInstance();
      Object object0 = new Object();
      fullyQualifiedJavaType0.equals(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getIntInstance();
      fullyQualifiedJavaType0.equals(fullyQualifiedJavaType1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getObjectInstance();
      fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getObjectInstance();
      fullyQualifiedJavaType0.getShortName();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getObjectInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("?AZ%ImxR");
      fullyQualifiedJavaType0.getBaseShortName();
      Object object0 = new Object();
      fullyQualifiedJavaType1.equals(object0);
      fullyQualifiedJavaType1.isArray();
      fullyQualifiedJavaType0.getBaseQualifiedName();
      fullyQualifiedJavaType1.getShortName();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getIntInstance();
      fullyQualifiedJavaType2.toString();
      fullyQualifiedJavaType1.getBaseShortName();
      fullyQualifiedJavaType2.getImportList();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("1iCyx");
      fullyQualifiedJavaType0.getTypeArguments();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewListInstance();
      fullyQualifiedJavaType0.isPrimitive();
      fullyQualifiedJavaType0.getImportList();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      FullyQualifiedJavaType.getDateInstance();
      fullyQualifiedJavaType0.getImportList();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      fullyQualifiedJavaType0.getShortName();
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType0);
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.getFullyQualifiedName();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      Object object0 = new Object();
      boolean boolean0 = fullyQualifiedJavaType0.equals(object0);
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewHashMapInstance();
      String string0 = fullyQualifiedJavaType0.getFullyQualifiedName();
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("java.util.HashMap", string0);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewIteratorInstance();
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType0);
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("Iterator", fullyQualifiedJavaType0.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      assertNotNull(fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType0.isExtendsBoundedWildcard();
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewArrayListInstance();
      int int0 = fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType1);
      assertEquals(12, int0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getByteInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertNotNull(fullyQualifiedJavaType2);
      assertEquals("boolean", fullyQualifiedJavaType2.getBaseShortName());
      
      fullyQualifiedJavaType0.getTypeArguments();
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getObjectInstance();
      assertNotNull(fullyQualifiedJavaType3);
      assertEquals("java.lang", fullyQualifiedJavaType3.getPackageName());
      
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getDoubleInstance();
      fullyQualifiedJavaType0.isPrimitive();
      fullyQualifiedJavaType0.getTypeArguments();
      primitiveTypeWrapper0.isExtendsBoundedWildcard();
      primitiveTypeWrapper1.addTypeArgument(primitiveTypeWrapper0);
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getDateInstance();
      assertNotNull(fullyQualifiedJavaType4);
      
      PrimitiveTypeWrapper.getDoubleInstance();
      primitiveTypeWrapper1.equals(fullyQualifiedJavaType1);
      String string0 = fullyQualifiedJavaType4.getShortName();
      assertEquals("Date", string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getStringInstance();
      assertNotNull(fullyQualifiedJavaType5);
      assertEquals("java.lang.String", fullyQualifiedJavaType5.getBaseQualifiedName());
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getDateInstance();
      boolean boolean0 = primitiveTypeWrapper2.equals(fullyQualifiedJavaType6);
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertFalse(boolean0);
      assertTrue(fullyQualifiedJavaType6.isExplicitlyImported());
  }
}
