/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 06:12:43 GMT 2022
 */

package app.myoss.cloud.mybatis.generator.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import app.myoss.cloud.mybatis.generator.config.IgnoredColumnPattern;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IgnoredColumnPattern_ESTest extends IgnoredColumnPattern_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("_*CWx^H");
      boolean boolean0 = ignoredColumnPattern0.matches("+x~+QnsQ5(ELN{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("Tv`");
      String string0 = ignoredColumnPattern0.getPatternRegex();
      assertEquals("Tv`", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("_*CWx^H");
      boolean boolean0 = ignoredColumnPattern0.canEqual(ignoredColumnPattern0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("KZTik9");
      boolean boolean0 = ignoredColumnPattern0.canEqual("KZTik9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("w3>]mP");
      // Undeclared exception!
      try { 
        ignoredColumnPattern0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = null;
      try {
        ignoredColumnPattern0 = new IgnoredColumnPattern("AbstractPropertyHolder(properties=");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 34
         // AbstractPropertyHolder(properties=
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = null;
      try {
        ignoredColumnPattern0 = new IgnoredColumnPattern((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("phR");
      Pattern pattern0 = ignoredColumnPattern0.getPattern();
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("");
      String string0 = ignoredColumnPattern0.getPatternRegex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("phR");
      IgnoredColumnPattern ignoredColumnPattern1 = new IgnoredColumnPattern("t^==}QV]1A;K,x");
      boolean boolean0 = ignoredColumnPattern0.equals(ignoredColumnPattern1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("");
      ignoredColumnPattern0.addProperty("", "");
      IgnoredColumnPattern ignoredColumnPattern1 = new IgnoredColumnPattern("");
      boolean boolean0 = ignoredColumnPattern0.equals(ignoredColumnPattern1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("");
      Object object0 = new Object();
      boolean boolean0 = ignoredColumnPattern0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("");
      boolean boolean0 = ignoredColumnPattern0.equals(ignoredColumnPattern0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("");
      boolean boolean0 = ignoredColumnPattern0.matches("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("");
      IgnoredColumnPattern ignoredColumnPattern1 = new IgnoredColumnPattern("");
      boolean boolean0 = ignoredColumnPattern0.equals(ignoredColumnPattern1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IgnoredColumnPattern ignoredColumnPattern0 = new IgnoredColumnPattern("");
      ignoredColumnPattern0.hashCode();
  }
}
