/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 06:14:22 GMT 2022
 */

package app.myoss.cloud.mybatis.generator.types.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType;
import app.myoss.cloud.mybatis.generator.types.impl.PrimitiveTypeWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrimitiveTypeWrapper_ESTest extends PrimitiveTypeWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PrimitiveTypeWrapper.getShortInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getShortInstance();
      assertEquals("shortValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Short", primitiveTypeWrapper0.getBaseQualifiedName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PrimitiveTypeWrapper.getLongInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getLongInstance();
      assertEquals("longValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertNotNull(primitiveTypeWrapper0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PrimitiveTypeWrapper.getIntegerInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getIntegerInstance();
      assertEquals("java.lang.Integer", primitiveTypeWrapper0.getBaseQualifiedName());
      assertNotNull(primitiveTypeWrapper0);
      assertEquals("intValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PrimitiveTypeWrapper.getFloatInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getFloatInstance();
      assertNotNull(primitiveTypeWrapper0);
      assertEquals("floatValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PrimitiveTypeWrapper.getDoubleInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getDoubleInstance();
      assertEquals("doubleValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertNotNull(primitiveTypeWrapper0);
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PrimitiveTypeWrapper.getCharacterInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getCharacterInstance();
      assertEquals("charValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertNotNull(primitiveTypeWrapper0);
      assertEquals("Character", primitiveTypeWrapper0.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PrimitiveTypeWrapper.getByteInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getByteInstance();
      assertEquals("java.lang.Byte", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("byteValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertNotNull(primitiveTypeWrapper0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertNotNull(primitiveTypeWrapper0);
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getShortInstance();
      assertNotNull(primitiveTypeWrapper0);
      
      String string0 = primitiveTypeWrapper0.getToPrimitiveMethod();
      assertEquals("shortValue()", string0);
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
  }
}
