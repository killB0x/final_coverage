/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 21:56:44 GMT 2022
 */

package org.openhim.mediator.engine.messages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.openhim.mediator.engine.messages.FinishRequest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinishRequest_ESTest extends FinishRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Integer integer0 = new Integer(0);
      FinishRequest finishRequest0 = new FinishRequest("Content-Type", hashMap0, integer0);
      Integer integer1 = finishRequest0.getResponseStatus();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1355);
      FinishRequest finishRequest0 = new FinishRequest((String) null, (String) null, integer0);
      Integer integer1 = finishRequest0.getResponseStatus();
      assertEquals(1355, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-429));
      FinishRequest finishRequest0 = new FinishRequest("Xt6@a", "", integer0);
      Integer integer1 = finishRequest0.getResponseStatus();
      assertEquals((-429), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Integer integer0 = new Integer(0);
      FinishRequest finishRequest0 = new FinishRequest("Content-Type", hashMap0, integer0);
      String string0 = finishRequest0.getResponseMimeType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Integer integer0 = new Integer(0);
      FinishRequest finishRequest0 = new FinishRequest("Content-Type", hashMap0, integer0);
      hashMap0.put("Content-Type", "Content-Type");
      String string0 = finishRequest0.getResponseMimeType();
      assertEquals("Content-Type", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", 0);
      FinishRequest finishRequest0 = new FinishRequest("kA", "", integer0);
      String string0 = finishRequest0.getResponseMimeType();
      assertNotNull(string0);
      assertEquals("kA", finishRequest0.getResponse());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Integer integer0 = new Integer(0);
      FinishRequest finishRequest0 = new FinishRequest("Content-Type", hashMap0, integer0);
      Map<String, String> map0 = finishRequest0.getResponseHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Integer integer0 = new Integer(446);
      FinishRequest finishRequest0 = new FinishRequest("", hashMap0, integer0);
      hashMap0.put("", "");
      Map<String, String> map0 = finishRequest0.getResponseHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Integer integer0 = new Integer(0);
      FinishRequest finishRequest0 = new FinishRequest("Content-Type", hashMap0, integer0);
      String string0 = finishRequest0.getResponse();
      assertEquals("Content-Type", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Integer integer0 = new Integer(446);
      FinishRequest finishRequest0 = new FinishRequest("", hashMap0, integer0);
      String string0 = finishRequest0.getResponse();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-534));
      FinishRequest finishRequest0 = new FinishRequest("`M*<T;t", (Map<String, String>) null, integer0);
      Map<String, String> map0 = finishRequest0.getResponseHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FinishRequest finishRequest0 = new FinishRequest((String) null, (Map<String, String>) null, (Integer) null);
      String string0 = finishRequest0.getResponse();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FinishRequest finishRequest0 = new FinishRequest((String) null, (Map<String, String>) null, (Integer) null);
      // Undeclared exception!
      try { 
        finishRequest0.getResponseMimeType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openhim.mediator.engine.messages.FinishRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FinishRequest finishRequest0 = new FinishRequest("uci?F_KHO=LS0X(yJw", "uci?F_KHO=LS0X(yJw", (Integer) null);
      Integer integer0 = finishRequest0.getResponseStatus();
      assertNull(integer0);
  }
}
