/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 21:51:52 GMT 2022
 */

package org.openhim.mediator.engine.messages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.openhim.mediator.engine.messages.FinishRequest;
import org.openhim.mediator.engine.messages.MediatorHTTPRequest;
import org.openhim.mediator.engine.messages.MediatorHTTPResponse;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MediatorHTTPResponse_ESTest extends MediatorHTTPResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse((MediatorHTTPRequest) null, "Content-Length", (Integer) null, hashMap0);
      assertNull(mediatorHTTPResponse0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("", integer0, hashMap0);
      Integer integer1 = mediatorHTTPResponse0.getStatusCode();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("W$C'A)?#0", (Integer) null, hashMap0);
      Integer integer0 = mediatorHTTPResponse0.getStatusCode();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-876));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("", integer0, hashMap0);
      Integer integer1 = mediatorHTTPResponse0.getStatusCode();
      assertEquals((-876), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(412);
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("", integer0, (Map<String, String>) null);
      Map<String, String> map0 = mediatorHTTPResponse0.getHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-807));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("g@?k2eatqo6", integer0, hashMap0);
      hashMap0.put("g@?k2eatqo6", "g@?k2eatqo6");
      Map<String, String> map0 = mediatorHTTPResponse0.getHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse((String) null, integer0, hashMap0);
      String string0 = mediatorHTTPResponse0.getBody();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-876));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("", integer0, hashMap0);
      String string0 = mediatorHTTPResponse0.getBody();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(412);
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("", integer0, (Map<String, String>) null);
      // Undeclared exception!
      try { 
        mediatorHTTPResponse0.toFinishRequest(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openhim.mediator.engine.messages.MediatorHTTPResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-807));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("g@?k2eatqo6", integer0, hashMap0);
      FinishRequest finishRequest0 = mediatorHTTPResponse0.toFinishRequest(false);
      assertEquals("text/plain", finishRequest0.getResponseMimeType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse((String) null, integer0, hashMap0);
      FinishRequest finishRequest0 = mediatorHTTPResponse0.toFinishRequest(false);
      assertNull(finishRequest0.getResponse());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(412);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("content-type", integer0, hashMap0);
      hashMap0.put("content-type", "content-type");
      FinishRequest finishRequest0 = mediatorHTTPResponse0.toFinishRequest(false);
      assertEquals("content-type", finishRequest0.getResponseMimeType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("connection", (Integer) null, hashMap0);
      hashMap0.put("Content-Type", "uf#<S@\"lqxWJq<");
      FinishRequest finishRequest0 = mediatorHTTPResponse0.toFinishRequest(false);
      assertEquals("uf#<S@\"lqxWJq<", finishRequest0.getResponseMimeType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(412);
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("", integer0, (Map<String, String>) null);
      FinishRequest finishRequest0 = mediatorHTTPResponse0.toFinishRequest(false);
      assertEquals("text/plain", finishRequest0.getResponseMimeType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse((String) null, (Integer) null, hashMap0);
      FinishRequest finishRequest0 = mediatorHTTPResponse0.toFinishRequest();
      assertNull(finishRequest0.getResponseMimeType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(859);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("G@?K2EAtQo6", integer0, hashMap0);
      hashMap0.put("connection", (String) null);
      FinishRequest finishRequest0 = mediatorHTTPResponse0.toFinishRequest(true);
      assertNull(finishRequest0.getResponseMimeType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Transfer-Encoding", "Transfer-Encoding");
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("Transfer-Encoding", (Integer) null, hashMap0);
      FinishRequest finishRequest0 = mediatorHTTPResponse0.toFinishRequest(true);
      assertNull(finishRequest0.getResponseMimeType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer((-807));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("g@?k2eatqo6", integer0, hashMap0);
      hashMap0.put("Content-Encoding", "vm0~vesqf~vy}r]o");
      FinishRequest finishRequest0 = mediatorHTTPResponse0.toFinishRequest(true);
      assertEquals("g@?k2eatqo6", finishRequest0.getResponse());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse(".'i/xsryo", (Integer) null, hashMap0);
      hashMap0.put("Content-Length", " ");
      FinishRequest finishRequest0 = mediatorHTTPResponse0.toFinishRequest(true);
      assertNull(finishRequest0.getResponseMimeType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(412);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("content-type", integer0, hashMap0);
      hashMap0.put("content-type", "content-type");
      FinishRequest finishRequest0 = mediatorHTTPResponse0.toFinishRequest(true);
      assertEquals("content-type", finishRequest0.getResponseMimeType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(412);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("content-type", integer0, hashMap0);
      Integer integer1 = mediatorHTTPResponse0.getStatusCode();
      assertEquals(412, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(412);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("content-type", integer0, hashMap0);
      Map<String, String> map0 = mediatorHTTPResponse0.getHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(859);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediatorHTTPResponse mediatorHTTPResponse0 = new MediatorHTTPResponse("G@?K2EAtQo6", integer0, hashMap0);
      String string0 = mediatorHTTPResponse0.getBody();
      assertEquals("G@?K2EAtQo6", string0);
  }
}
