/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 21:57:18 GMT 2022
 */

package org.openhim.mediator.engine.messages;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.openhim.mediator.engine.messages.RegisterMediatorWithCoreResponse;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RegisterMediatorWithCoreResponse_ESTest extends RegisterMediatorWithCoreResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(91);
      RegisterMediatorWithCoreResponse registerMediatorWithCoreResponse0 = new RegisterMediatorWithCoreResponse(true, integer0, "");
      boolean boolean0 = registerMediatorWithCoreResponse0.isSuccessful();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      RegisterMediatorWithCoreResponse registerMediatorWithCoreResponse0 = new RegisterMediatorWithCoreResponse(true, integer0, "lSL-sj)aD");
      registerMediatorWithCoreResponse0.getResponseStatus();
      assertTrue(registerMediatorWithCoreResponse0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(91);
      RegisterMediatorWithCoreResponse registerMediatorWithCoreResponse0 = new RegisterMediatorWithCoreResponse(true, integer0, "");
      registerMediatorWithCoreResponse0.getResponseStatus();
      assertTrue(registerMediatorWithCoreResponse0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RegisterMediatorWithCoreResponse registerMediatorWithCoreResponse0 = new RegisterMediatorWithCoreResponse(true, (Integer) null, "GQs>_UX=*)x>.Us5v");
      registerMediatorWithCoreResponse0.getResponseStatus();
      assertTrue(registerMediatorWithCoreResponse0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(0);
      RegisterMediatorWithCoreResponse registerMediatorWithCoreResponse0 = new RegisterMediatorWithCoreResponse(true, integer0, "lSL-sj)aD");
      registerMediatorWithCoreResponse0.getResponseBody();
      assertTrue(registerMediatorWithCoreResponse0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(91);
      RegisterMediatorWithCoreResponse registerMediatorWithCoreResponse0 = new RegisterMediatorWithCoreResponse(true, integer0, "");
      registerMediatorWithCoreResponse0.getResponseBody();
      assertTrue(registerMediatorWithCoreResponse0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      RegisterMediatorWithCoreResponse registerMediatorWithCoreResponse0 = new RegisterMediatorWithCoreResponse(false, integer0, (String) null);
      boolean boolean0 = registerMediatorWithCoreResponse0.isSuccessful();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      RegisterMediatorWithCoreResponse registerMediatorWithCoreResponse0 = new RegisterMediatorWithCoreResponse(false, integer0, (String) null);
      registerMediatorWithCoreResponse0.getResponseBody();
      assertFalse(registerMediatorWithCoreResponse0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      RegisterMediatorWithCoreResponse registerMediatorWithCoreResponse0 = new RegisterMediatorWithCoreResponse(false, integer0, (String) null);
      registerMediatorWithCoreResponse0.getResponseStatus();
      assertFalse(registerMediatorWithCoreResponse0.isSuccessful());
  }
}
