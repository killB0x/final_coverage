/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 21:54:17 GMT 2022
 */

package org.openhim.mediator.engine.messages;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.openhim.mediator.engine.messages.MediatorRequestMessage;
import org.openhim.mediator.engine.messages.SetupSSLContextResponse;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SetupSSLContextResponse_ESTest extends SetupSSLContextResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SetupSSLContextResponse setupSSLContextResponse0 = new SetupSSLContextResponse((MediatorRequestMessage) null);
      Throwable throwable0 = setupSSLContextResponse0.getError();
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("$'q5kPk^YZ>");
      SetupSSLContextResponse setupSSLContextResponse0 = new SetupSSLContextResponse((MediatorRequestMessage) null, mockThrowable0);
      boolean boolean0 = setupSSLContextResponse0.isSuccessful();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SetupSSLContextResponse setupSSLContextResponse0 = new SetupSSLContextResponse((MediatorRequestMessage) null);
      boolean boolean0 = setupSSLContextResponse0.isSuccessful();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      SetupSSLContextResponse setupSSLContextResponse0 = new SetupSSLContextResponse((MediatorRequestMessage) null, mockThrowable0);
      Throwable throwable0 = setupSSLContextResponse0.getError();
      assertSame(throwable0, mockThrowable0);
  }
}
