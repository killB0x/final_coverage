/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 18:35:18 GMT 2022
 */

package hirondelle.date4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import hirondelle.date4j.Util;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Util_ESTest extends Util_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.getLogger((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("hirondelle.date4j.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = Util.getArrayAsString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Util.getArrayAsString(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object is not an array.
         //
         verifyException("hirondelle.date4j.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      boolean boolean0 = Util.textHasContent("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      boolean boolean0 = Util.textHasContent("hirondelle.date4j.Util");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      boolean boolean0 = Util.textHasContent((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Logger logger0 = Util.getLogger(class0);
      assertNull(logger0.getResourceBundleName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Util util0 = new Util();
      String string0 = Util.quote(util0);
      assertNotNull(string0);
  }
}
