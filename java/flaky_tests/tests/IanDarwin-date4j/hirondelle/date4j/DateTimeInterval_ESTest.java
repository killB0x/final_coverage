/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 18:30:26 GMT 2022
 */

package hirondelle.date4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import hirondelle.date4j.DateTime;
import hirondelle.date4j.DateTimeInterval;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeInterval_ESTest extends DateTimeInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTime dateTime0 = DateTime.today(timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Abort;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      dateTime0.getNumDaysInMonth();
      int int0 = 6;
      dateTimeInterval0.plus(5299, 12, 52, 6, 1989, 4546, 12);
      dateTime0.getWeekDay();
      int int1 = 999999999;
      int int2 = 1372;
      int int3 = 59;
      // Undeclared exception!
      try { 
        dateTimeInterval0.plus(5299, 4545, 4549, 4545, 1978, 1372, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Year is not in the range 1..9999. Value is:13004
         //
         verifyException("hirondelle.date4j.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTime dateTime0 = DateTime.today(timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.LastDay;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      dateTimeInterval0.minus(120, 1999, 45, 59, 4, 120, 1993);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      DateTime dateTime0 = DateTime.forTimeOnly(integer0, integer0, integer0, integer0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.LastDay;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      int int1 = 0;
      dateTimeInterval0.plus(0, 0, 0, 0, 0, 0, 0);
      int int2 = 0;
      DateTime.Unit[] dateTime_UnitArray0 = new DateTime.Unit[7];
      DateTime.Unit dateTime_Unit0 = DateTime.Unit.DAY;
      dateTime_UnitArray0[0] = dateTime_Unit0;
      DateTime.Unit dateTime_Unit1 = DateTime.Unit.HOUR;
      dateTime_UnitArray0[1] = dateTime_Unit1;
      DateTime.Unit dateTime_Unit2 = DateTime.Unit.HOUR;
      dateTime_UnitArray0[2] = dateTime_Unit2;
      DateTime.Unit dateTime_Unit3 = DateTime.Unit.DAY;
      dateTime_UnitArray0[3] = dateTime_Unit3;
      DateTime.Unit dateTime_Unit4 = DateTime.Unit.SECOND;
      dateTime_UnitArray0[4] = dateTime_Unit4;
      DateTime.Unit dateTime_Unit5 = DateTime.Unit.DAY;
      dateTime_UnitArray0[5] = dateTime_Unit5;
      DateTime.Unit dateTime_Unit6 = DateTime.Unit.YEAR;
      dateTime_UnitArray0[6] = dateTime_Unit6;
      dateTime0.unitsAllPresent(dateTime_UnitArray0);
      int int3 = 1973;
      // Undeclared exception!
      try { 
        dateTimeInterval0.minus(2142, 1983, 0, 1971, 1983, 0, 2833);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("CccS&vSPWfF[OM@,_x");
      DateTime dateTime0 = DateTime.forInstantNanos((-397L), timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.FirstDay;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      int int0 = 1978;
      // Undeclared exception!
      dateTimeInterval0.plus(12, 1978, 1978, 28, 9999, 387, 387);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTime dateTime0 = DateTime.today(timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Abort;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      dateTime0.getNumDaysInMonth();
      dateTimeInterval0.plus(1989, 0, 5299, 1989, 52, 52, 12);
      dateTime0.getWeekDay();
      dateTimeInterval0.plus(1989, 0, 6, 1978, 4642, 1, 999999999);
      // Undeclared exception!
      dateTimeInterval0.minus(1986, 5299, 4642, 1986, 59, 0, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTime dateTime0 = DateTime.today(timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Abort;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      dateTimeInterval0.minus(711, 1735, 5299, 1735, 5299, 1735, 2000);
      // Undeclared exception!
      dateTimeInterval0.minus(5299, 5299, 5299, 5299, 6, 5299, 59);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("q$7R");
      DateTime dateTime0 = DateTime.forInstantNanos((-1L), timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Spillover;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      dateTimeInterval0.plus(1746, 1751, 12, 1000, 1751, 1989, 12);
      // Undeclared exception!
      try { 
        dateTimeInterval0.minus(5, 5, 1000, 12, 0, 0, (-456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nanosecond interval is not in the range 0..999999999
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(365, "");
      DateTime dateTime0 = DateTime.forInstant((-1454L), simpleTimeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Abort;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      // Undeclared exception!
      try { 
        dateTimeInterval0.plus(0, 2764, 2764, 5281, 45, 5280, 365);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Day Overflow: Year:2200 Month:4 has 30 days, but day has value:31 To avoid these exceptions, please specify a different DayOverflow policy.
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("q$7R");
      DateTime dateTime0 = DateTime.forInstantNanos((-1L), timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Spillover;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      dateTimeInterval0.plus(0, 1751, 12, 1751, 1751, 1989, 12);
      dateTimeInterval0.minus(1704, 1751, 1751, 1751, 12, 1751, 0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("CccS&vSPWfF[OM@,_x");
      DateTime dateTime0 = DateTime.forInstantNanos((-397L), timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Spillover;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      dateTimeInterval0.minus(0, 1930, 0, 90, 90, 1978, 0);
      dateTimeInterval0.plus(0, 0, 0, 0, 0, 1989, 12);
      // Undeclared exception!
      try { 
        dateTimeInterval0.minus(146097, 0, 0, 963, 1062, 464, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year is not in the range 0..9999
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(365, "");
      DateTime dateTime0 = DateTime.forInstant((-1454L), simpleTimeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Abort;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      int int0 = 0;
      int int1 = 12;
      int int2 = 3043;
      DateTime dateTime1 = dateTimeInterval0.plus(365, 12, 400, 3043, 365, 365, 2400000);
      dateTime1.compareTo(dateTime0);
      int int3 = 0;
      // Undeclared exception!
      try { 
        dateTimeInterval0.minus(3505, 3505, 168, (-709), (-1), 0, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hour is not in the range 0..9999
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = 5299;
      int int1 = 6;
      System.setCurrentTimeMillis(0L);
      DateTime dateTime0 = DateTime.forInstantNanos(5299, timeZone0);
      DateTime.Unit dateTime_Unit0 = DateTime.Unit.MONTH;
      DateTime dateTime1 = dateTime0.truncate(dateTime_Unit0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.LastDay;
      DateTimeInterval dateTimeInterval0 = null;
      try {
        dateTimeInterval0 = new DateTimeInterval(dateTime1, dateTime_DayOverflow0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // For interval calculations, DateTime must have year-month-day, or hour-minute-second, or both.
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer.getInteger("");
      Integer integer0 = new Integer(0);
      DateTime dateTime0 = new DateTime((Integer) null, (Integer) null, (Integer) null, (Integer) null, integer0, integer0, (Integer) null);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.LastDay;
      DateTimeInterval dateTimeInterval0 = null;
      try {
        dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // For interval calculations, DateTime must have year-month-day, or hour-minute-second, or both.
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTime dateTime0 = new DateTime("Year");
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Abort;
      DateTimeInterval dateTimeInterval0 = null;
      try {
        dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected format for date:Year
         //
         verifyException("hirondelle.date4j.DateTimeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("CccS&vSPWfF[OM@,_x");
      DateTime dateTime0 = DateTime.forInstantNanos((-397L), timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Spillover;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      dateTimeInterval0.plus(0, 0, 0, 0, 0, 1989, 12);
      // Undeclared exception!
      try { 
        dateTimeInterval0.minus(0, 0, 0, 0, 0, (-944), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Second is not in the range 0..9999
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer(12);
      int int0 = 1053;
      Integer integer2 = new Integer(1053);
      DateTime dateTime0 = new DateTime(integer0, integer1, integer1, integer0, integer1, integer1, integer2);
      TimeZone timeZone0 = TimeZone.getTimeZone("$8t{n5t0Dv\"=__~");
      DateTime dateTime1 = dateTime0.changeTimeZone(timeZone0, timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Spillover;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime1, dateTime_DayOverflow0);
      int int1 = 3328;
      dateTime1.lt(dateTime0);
      int int2 = 0;
      int int3 = 1796;
      int int4 = 2;
      int int5 = 3073;
      int int6 = 0;
      int int7 = 0;
      int int8 = 0;
      // Undeclared exception!
      try { 
        dateTimeInterval0.plus(0, 0, 60, 4000, 0, 60, (-1085));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nanosecond interval is not in the range 0..999999999
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTime dateTime0 = DateTime.today(timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Abort;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      dateTime0.hasYearMonthDay();
      // Undeclared exception!
      try { 
        dateTimeInterval0.plus(2000, 146097, 1983, 146097, 1735, 1978, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month is not in the range 0..9999
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DateTime dateTime0 = DateTime.forTimeOnly(integer0, integer0, integer0, integer0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.LastDay;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      DateTime dateTime1 = dateTimeInterval0.plus(0, 0, 0, 0, 0, 0, 0);
      dateTime0.compareTo(dateTime1);
      // Undeclared exception!
      try { 
        dateTimeInterval0.plus(7, 0, 7, 1973, 7, 0, (-1462));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nanosecond interval is not in the range 0..999999999
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTime dateTime0 = DateTime.today(timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.LastDay;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      // Undeclared exception!
      try { 
        dateTimeInterval0.plus(3154, 6, 98, (-1525), 4, 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hour is not in the range 0..9999
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = 0;
      timeZone0.getDisplayName(false, 0);
      DateTime dateTime0 = DateTime.forInstant(0L, timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.LastDay;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      int int1 = 8;
      int int2 = 1751;
      dateTime0.isInTheFuture(timeZone0);
      dateTimeInterval0.plus(8, 8, 8, 8, 1751, 1751, 1751);
      int int3 = (-3681);
      // Undeclared exception!
      try { 
        dateTimeInterval0.plus(8, 1751, (-27), (-2368), 1751, 1751, (-3681));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day is not in the range 0..9999
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTime dateTime0 = DateTime.today(timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.LastDay;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      // Undeclared exception!
      try { 
        dateTimeInterval0.minus(6, 5299, 6, (-1859), (-1399), 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hour is not in the range 0..9999
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTime dateTime0 = DateTime.today(timeZone0);
      DateTime dateTime1 = dateTime0.getEndOfDay();
      int int0 = (-267);
      Integer integer0 = new Integer((-267));
      int int1 = 1221;
      Integer integer1 = new Integer(1221);
      int int2 = 0;
      Integer integer2 = new Integer(0);
      int int3 = (-2012);
      Integer integer3 = new Integer((-2012));
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.LastDay;
      // Undeclared exception!
      try { 
        dateTime1.plus(integer0, integer1, integer2, integer2, integer3, integer2, integer2, dateTime_DayOverflow0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year is not in the range 0..9999
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 365;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(365, "");
      DateTime dateTime0 = DateTime.forInstant((-1454L), simpleTimeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Abort;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      int int1 = 2083;
      int int2 = 0;
      dateTimeInterval0.minus(365, 365, 2083, 0, 1634, 0, 2);
      int int3 = 4000;
      Integer integer0 = new Integer((-169));
      Integer integer1 = new Integer(1634);
      // Undeclared exception!
      try { 
        DateTime.forTimeOnly((Integer) null, integer0, (Integer) null, integer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Minute is not in the range 0..59. Value is:-169
         //
         verifyException("hirondelle.date4j.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.LastDay;
      DateTimeInterval dateTimeInterval0 = null;
      try {
        dateTimeInterval0 = new DateTimeInterval((DateTime) null, dateTime_DayOverflow0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      DateTime dateTime0 = DateTime.forTimeOnly(integer0, integer0, integer0, integer0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.LastDay;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      DateTime dateTime1 = dateTimeInterval0.plus(0, 0, 0, 0, 0, 0, 0);
      dateTime0.compareTo(dateTime1);
      int int1 = 0;
      int int2 = 0;
      int int3 = 68569;
      // Undeclared exception!
      try { 
        dateTimeInterval0.minus(0, 3505, 68569, (-812), 0, 0, 3505);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Day is not in the range 0..9999
         //
         verifyException("hirondelle.date4j.DateTimeInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("q$7R");
      DateTime dateTime0 = DateTime.forInstant(1789L, timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Spillover;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      dateTimeInterval0.minus(6, 5299, 5299, 6, 55, 55, 6);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTime dateTime0 = DateTime.today(timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Abort;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      dateTimeInterval0.plus(1199, 5299, 1199, 59, 1199, 5299, 0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "rUFvF2");
      DateTime dateTime0 = DateTime.now(simpleTimeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.FirstDay;
      dateTime0.hasYearMonthDay();
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      dateTimeInterval0.minus(0, 2, 0, 6, 1438, 0, 0);
      DateTime.now(simpleTimeZone0);
      dateTimeInterval0.plus(6, 0, 2, 2, 2, 12, 1781);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTime dateTime0 = DateTime.today(timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.LastDay;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      // Undeclared exception!
      try { 
        dateTimeInterval0.minus(5299, 5299, 5299, 5299, 6, 5299, 5299);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Year is not in the range 1..9999. Value is:-3742
         //
         verifyException("hirondelle.date4j.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTime dateTime0 = DateTime.today(timeZone0);
      DateTime.DayOverflow dateTime_DayOverflow0 = DateTime.DayOverflow.Abort;
      DateTimeInterval dateTimeInterval0 = new DateTimeInterval(dateTime0, dateTime_DayOverflow0);
      // Undeclared exception!
      try { 
        dateTimeInterval0.minus(5299, 5299, 5299, 5299, 6, 5299, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Year is not in the range 1..9999. Value is:-3742
         //
         verifyException("hirondelle.date4j.DateTime", e);
      }
  }
}
