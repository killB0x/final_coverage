/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 18:31:49 GMT 2022
 */

package hirondelle.date4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import hirondelle.date4j.ModelUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModelUtil_ESTest extends ModelUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ModelUtil.NullsGo modelUtil_NullsGo0 = ModelUtil.NullsGo.LAST;
      int int0 = ModelUtil.comparePossiblyNull((Integer) null, (Integer) null, modelUtil_NullsGo0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(48);
      Integer integer1 = new Integer(0);
      ModelUtil.NullsGo modelUtil_NullsGo0 = ModelUtil.NullsGo.FIRST;
      int int0 = ModelUtil.comparePossiblyNull(integer0, integer1, modelUtil_NullsGo0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual((-29.17), 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual(0.0F, 88);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual(1L, (-865L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual('S', '>');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object[] objectArray1 = new Object[1];
      // Undeclared exception!
      try { 
        ModelUtil.equalsFor(objectArray0, objectArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths do not match. 'This' length is 3, while 'That' length is 1.
         //
         verifyException("hirondelle.date4j.ModelUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      String string0 = ModelUtil.toStringAvoidCyclicRefs(object0, class0, (String) null);
      assertEquals("java.lang.Object {\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      int int0 = ModelUtil.hashCodeFor(objectArray0);
      assertEquals((-1117834737), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = ModelUtil.hash((-4321), true);
      assertEquals((-159876), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = ModelUtil.hash(0, (Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      int int0 = ModelUtil.hash(186, object0);
      assertEquals(6883, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      int int0 = ModelUtil.hash((-2172), object0);
      assertEquals((-80363), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = ModelUtil.hash(0, (-1L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = ModelUtil.hash(44122, 1190);
      assertEquals(1633704, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = ModelUtil.hash((-2526), 2525L);
      assertEquals((-90937), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = ModelUtil.hash(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = ModelUtil.hash(1168, 1989);
      assertEquals(45205, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = ModelUtil.hash((-657), (-657));
      assertEquals((-24966), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = ModelUtil.hash(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = ModelUtil.hash(0, (-2763.0F));
      assertEquals((-986927104), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = ModelUtil.hash(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = ModelUtil.hash((-2147483644), (-2206.1));
      assertEquals(1938952084, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = ModelUtil.hash((-1), '%');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = ModelUtil.hash((-2172), '^');
      assertEquals((-80270), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ModelUtil.NullsGo modelUtil_NullsGo0 = ModelUtil.NullsGo.LAST;
      int int0 = ModelUtil.comparePossiblyNull(integer0, (Integer) null, modelUtil_NullsGo0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ModelUtil.areEqual(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModelUtil.toStringFor((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("hirondelle.date4j.ToStringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ModelUtil.toStringFor(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ModelUtil.toStringAvoidCyclicRefs((Object) null, class0, "'F\"|vmazb+}+nf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("hirondelle.date4j.ToStringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer((-2811));
      // Undeclared exception!
      try { 
        ModelUtil.quickEquals((Object) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("hirondelle.date4j.ModelUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModelUtil.hashCodeFor((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("hirondelle.date4j.ModelUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModelUtil.equalsFor((Object[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("hirondelle.date4j.ModelUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer((-989));
      ModelUtil.NullsGo modelUtil_NullsGo0 = ModelUtil.NullsGo.LAST;
      int int0 = ModelUtil.comparePossiblyNull((Integer) null, integer0, modelUtil_NullsGo0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(1041);
      ModelUtil.NullsGo modelUtil_NullsGo0 = ModelUtil.NullsGo.FIRST;
      int int0 = ModelUtil.comparePossiblyNull(integer0, (Integer) null, modelUtil_NullsGo0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(2);
      boolean boolean0 = ModelUtil.areEqual((Object) null, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ModelUtil.NullsGo[] modelUtil_NullsGoArray0 = ModelUtil.NullsGo.values();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) objectArray0;
      // Undeclared exception!
      try { 
        ModelUtil.equalsFor(modelUtil_NullsGoArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This method does not currently support arrays.
         //
         verifyException("hirondelle.date4j.ModelUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual(3256, 3256);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual(1613.464923129472, (-3807.1647));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual(0.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual(301.6F, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual(0L, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual((-1063261540), (-1L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual('G', 'G');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual(')', '`');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual(true, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = ModelUtil.areEqual(false, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer0;
      Object[] objectArray1 = new Object[5];
      boolean boolean0 = ModelUtil.equalsFor(objectArray0, objectArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = new Object[0];
      // Undeclared exception!
      try { 
        ModelUtil.equalsFor(objectArray1, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths do not match. 'This' length is 0, while 'That' length is 1.
         //
         verifyException("hirondelle.date4j.ModelUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      boolean boolean0 = ModelUtil.equalsFor(objectArray0, objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Boolean boolean0 = ModelUtil.quickEquals(object1, object0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Boolean boolean0 = ModelUtil.quickEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer((-1657));
      ModelUtil.NullsGo modelUtil_NullsGo0 = ModelUtil.NullsGo.FIRST;
      Boolean boolean0 = ModelUtil.quickEquals(modelUtil_NullsGo0, integer0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      int int0 = ModelUtil.hashCodeFor(objectArray0);
      assertEquals(31524, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = ModelUtil.hash(118, true);
      assertEquals(4367, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = ModelUtil.hash(0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = ModelUtil.hash(2, 1234.6244F);
      assertEquals(1150964805, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = ModelUtil.hash(923, 'T');
      assertEquals(34235, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer((-1504));
      String string0 = ModelUtil.toStringFor(integer0);
      assertEquals("java.lang.Integer {\nbyteValue: 32\ndoubleValue: -1504.0\nfloatValue: -1504.0\nintValue: -1504\nlongValue: -1504\nshortValue: -1504\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = ModelUtil.hash((-2196), (-2196));
      assertEquals((-1063261540), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer((-1504));
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ModelUtil.toStringAvoidCyclicRefs(integer0, class0, "java.lang.Integer {\nbyteValue: 32\ndoubleValue: -1504.0\nfloatValue: -1504.0\nintValue: -1504\nlongValue: -1504\nshortValue: -1504\n}\n");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }
}
