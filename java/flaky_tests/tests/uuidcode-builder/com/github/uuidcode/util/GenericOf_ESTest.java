/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 21:02:57 GMT 2022
 */

package com.github.uuidcode.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.uuidcode.util.GenericOf;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericOf_ESTest extends GenericOf_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericOf<Integer, Integer> genericOf0 = new GenericOf<Integer, Integer>(class0, class0);
      Class class1 = (Class)genericOf0.getRawType();
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericOf<Integer, Integer> genericOf0 = new GenericOf<Integer, Integer>(class0, class0);
      Type type0 = genericOf0.getOwnerType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericOf<Integer, Integer> genericOf0 = new GenericOf<Integer, Integer>(class0, class0);
      Type[] typeArray0 = genericOf0.getActualTypeArguments();
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericOf<Integer, Integer> genericOf0 = new GenericOf<Integer, Integer>((Class<Integer>) null, class0);
      Type type0 = genericOf0.getRawType();
      assertNull(type0);
  }
}
