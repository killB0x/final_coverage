/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 21:14:49 GMT 2022
 */

package com.github.uuidcode.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.uuidcode.util.IntermediateOperation;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntermediateOperation_ESTest extends IntermediateOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntermediateOperation intermediateOperation0 = new IntermediateOperation();
      // Undeclared exception!
      try { 
        intermediateOperation0.run((Stream<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.uuidcode.util.IntermediateOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Long long0 = new Long((-515L));
      IntermediateOperation intermediateOperation0 = IntermediateOperation.skip(long0);
      Stream<String> stream0 = Stream.of("");
      // Undeclared exception!
      try { 
        intermediateOperation0.run(stream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -515
         //
         verifyException("java.util.stream.ReferencePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IntermediateOperation intermediateOperation0 = new IntermediateOperation();
      Function<Stream<String>, Stream<String>> function0 = Function.identity();
      intermediateOperation0.setIntermediateFunction(function0);
      Stream<String> stream0 = intermediateOperation0.run((Stream<String>) null);
      assertNull(stream0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Stream<String> stream0 = Stream.iterate("", unaryOperator0);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      IntermediateOperation intermediateOperation0 = IntermediateOperation.filter(predicate0);
      intermediateOperation0.run(stream0);
      // Undeclared exception!
      try { 
        intermediateOperation0.run(stream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException("java.util.stream.AbstractPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IntermediateOperation intermediateOperation0 = IntermediateOperation.map((Function<String, String>) null);
      assertNotNull(intermediateOperation0);
  }
}
