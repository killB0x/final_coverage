/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 20:57:00 GMT 2022
 */

package com.github.uuidcode.builder.html;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.uuidcode.builder.html.A;
import com.github.uuidcode.builder.html.Blockquote;
import com.github.uuidcode.builder.html.Body;
import com.github.uuidcode.builder.html.Br;
import com.github.uuidcode.builder.html.Button;
import com.github.uuidcode.builder.html.Dd;
import com.github.uuidcode.builder.html.Del;
import com.github.uuidcode.builder.html.Div;
import com.github.uuidcode.builder.html.Dl;
import com.github.uuidcode.builder.html.Dt;
import com.github.uuidcode.builder.html.Em;
import com.github.uuidcode.builder.html.Form;
import com.github.uuidcode.builder.html.H1;
import com.github.uuidcode.builder.html.H2;
import com.github.uuidcode.builder.html.H3;
import com.github.uuidcode.builder.html.H4;
import com.github.uuidcode.builder.html.H5;
import com.github.uuidcode.builder.html.H6;
import com.github.uuidcode.builder.html.Head;
import com.github.uuidcode.builder.html.Hr;
import com.github.uuidcode.builder.html.Html;
import com.github.uuidcode.builder.html.HtmlBuilder;
import com.github.uuidcode.builder.html.I;
import com.github.uuidcode.builder.html.Iframe;
import com.github.uuidcode.builder.html.Img;
import com.github.uuidcode.builder.html.Input;
import com.github.uuidcode.builder.html.Label;
import com.github.uuidcode.builder.html.Li;
import com.github.uuidcode.builder.html.Link;
import com.github.uuidcode.builder.html.Node;
import com.github.uuidcode.builder.html.Ol;
import com.github.uuidcode.builder.html.Option;
import com.github.uuidcode.builder.html.P;
import com.github.uuidcode.builder.html.Script;
import com.github.uuidcode.builder.html.Select;
import com.github.uuidcode.builder.html.Span;
import com.github.uuidcode.builder.html.Strong;
import com.github.uuidcode.builder.html.Table;
import com.github.uuidcode.builder.html.Tbody;
import com.github.uuidcode.builder.html.Td;
import com.github.uuidcode.builder.html.Text;
import com.github.uuidcode.builder.html.Textarea;
import com.github.uuidcode.builder.html.Th;
import com.github.uuidcode.builder.html.Thead;
import com.github.uuidcode.builder.html.Tr;
import com.github.uuidcode.builder.html.Ul;
import java.lang.reflect.Array;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlBuilder_ESTest extends HtmlBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Ul ul0 = HtmlBuilder.ul(nodeArray0);
      assertTrue(ul0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Table table0 = new Table();
      List<Node> list0 = (List<Node>)table0.getChildNodeList();
      Ul ul0 = HtmlBuilder.ul(list0);
      assertTrue(ul0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Tr tr0 = HtmlBuilder.tr(nodeArray0);
      assertTrue(tr0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Thead thead0 = HtmlBuilder.thead(nodeArray0);
      assertTrue(thead0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 4);
      Th th0 = HtmlBuilder.th(nodeArray0);
      assertTrue(th0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Td td0 = HtmlBuilder.td(nodeArray0);
      assertTrue(td0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Tbody tbody0 = HtmlBuilder.tbody(nodeArray0);
      assertTrue(tbody0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 3);
      Table table0 = HtmlBuilder.table(nodeArray0);
      assertTrue(table0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Strong strong0 = HtmlBuilder.strong(nodeArray0);
      assertTrue(strong0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Span span0 = HtmlBuilder.span(nodeArray0);
      assertTrue(span0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Select select0 = HtmlBuilder.select(nodeArray0);
      assertTrue(select0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 4);
      P p0 = HtmlBuilder.p(nodeArray0);
      assertTrue(p0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Option option0 = HtmlBuilder.option(nodeArray0);
      assertTrue(option0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Ol ol0 = HtmlBuilder.ol(nodeArray0);
      assertTrue(ol0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Link link0 = HtmlBuilder.link(nodeArray0);
      assertTrue(link0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Li li0 = HtmlBuilder.li(nodeArray0);
      assertTrue(li0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Label label0 = HtmlBuilder.label(nodeArray0);
      assertTrue(label0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Iframe iframe0 = HtmlBuilder.iframe(nodeArray0);
      assertTrue(iframe0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 4);
      I i0 = HtmlBuilder.i(nodeArray0);
      assertTrue(i0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Html html0 = HtmlBuilder.html(nodeArray0);
      assertTrue(html0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 5);
      Hr hr0 = HtmlBuilder.hr(nodeArray0);
      assertFalse(hr0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 3);
      Head head0 = HtmlBuilder.head(nodeArray0);
      assertTrue(head0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 5);
      H6 h6_0 = HtmlBuilder.h6(nodeArray0);
      assertTrue(h6_0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      H3 h3_0 = HtmlBuilder.h3(nodeArray0);
      assertTrue(h3_0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node<Node<Textarea>>[] nodeArray0 = (Node<Node<Textarea>>[]) Array.newInstance(Node.class, 3);
      H2 h2_0 = HtmlBuilder.h2(nodeArray0);
      assertTrue(h2_0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 5);
      H1 h1_0 = HtmlBuilder.h1(nodeArray0);
      assertTrue(h1_0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 5);
      Form form0 = HtmlBuilder.form(nodeArray0);
      assertTrue(form0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 4);
      Em em0 = HtmlBuilder.em(nodeArray0);
      assertTrue(em0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Dt dt0 = HtmlBuilder.dt(nodeArray0);
      assertTrue(dt0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Dl dl0 = HtmlBuilder.dl(nodeArray0);
      assertTrue(dl0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 6);
      Div div0 = HtmlBuilder.div(nodeArray0);
      assertTrue(div0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 2);
      Dd dd0 = HtmlBuilder.dd(nodeArray0);
      assertTrue(dd0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 2);
      Button button0 = HtmlBuilder.button(nodeArray0);
      assertTrue(button0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 5);
      Br br0 = HtmlBuilder.br(nodeArray0);
      assertFalse(br0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      Body body0 = HtmlBuilder.body(nodeArray0);
      assertTrue(body0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Node<Node<Textarea>>[] nodeArray0 = (Node<Node<Textarea>>[]) Array.newInstance(Node.class, 0);
      Blockquote blockquote0 = HtmlBuilder.blockquote(nodeArray0);
      assertTrue(blockquote0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 0);
      A a0 = HtmlBuilder.a(nodeArray0);
      assertTrue(a0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.textarea((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.script((Text[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.h5((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.h4((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.del((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.thead((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 6);
      H4 h4_0 = HtmlBuilder.h4(nodeArray0);
      assertTrue(h4_0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.strong((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.hr((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.iframe((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 6);
      Textarea textarea0 = HtmlBuilder.textarea(nodeArray0);
      assertTrue(textarea0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 4);
      H5 h5_0 = HtmlBuilder.h5(nodeArray0);
      assertTrue(h5_0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.tbody((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.ol((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.span((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.link((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.td((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.head((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Text text0 = HtmlBuilder.text("    ");
      assertTrue(text0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.a((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.th((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.button((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.h1((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.dd((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.p((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HtmlBuilder htmlBuilder0 = new HtmlBuilder();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.br((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.h6((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.li((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.form((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.i((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.blockquote((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.h2((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.ul((List<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.uuidcode.builder.html.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Img img0 = HtmlBuilder.img();
      assertFalse(img0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.table((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.dl((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.option((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.label((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Text[] textArray0 = new Text[0];
      Script script0 = HtmlBuilder.script(textArray0);
      assertTrue(script0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.em((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Node<Textarea>[] nodeArray0 = (Node<Textarea>[]) Array.newInstance(Node.class, 6);
      Del del0 = HtmlBuilder.del(nodeArray0);
      assertTrue(del0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.dt((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.div((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.h3((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.ul((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.html((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Input input0 = HtmlBuilder.input();
      assertFalse(input0.getRequiresEndTag());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.select((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.tr((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlBuilder.body((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
