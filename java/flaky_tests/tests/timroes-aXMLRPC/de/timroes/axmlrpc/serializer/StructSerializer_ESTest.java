/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:08:56 GMT 2022
 */

package de.timroes.axmlrpc.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.timroes.axmlrpc.serializer.SerializerHandler;
import de.timroes.axmlrpc.serializer.StructSerializer;
import de.timroes.axmlrpc.xmlcreator.XmlElement;
import java.util.HashMap;
import java.util.function.BiFunction;
import javax.imageio.metadata.IIOMetadataNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StructSerializer_ESTest extends StructSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("member");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("member");
      iIOMetadataNode1.removeChild(iIOMetadataNode0);
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      SerializerHandler serializerHandler0 = new SerializerHandler();
      StructSerializer structSerializer0 = new StructSerializer(serializerHandler0);
      HashMap hashMap0 = (HashMap)structSerializer0.deserialize(iIOMetadataNode0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("member");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("member");
      Node node0 = iIOMetadataNode1.appendChild(iIOMetadataNode0);
      Node node1 = iIOMetadataNode0.replaceChild(node0, iIOMetadataNode1);
      iIOMetadataNode1.appendChild(node1);
      StructSerializer structSerializer0 = new StructSerializer((SerializerHandler) null);
      try { 
        structSerializer0.deserialize(iIOMetadataNode1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A struct member must only contain one name and one value.
         //
         verifyException("de.timroes.axmlrpc.serializer.StructSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler();
      StructSerializer structSerializer0 = new StructSerializer(serializerHandler0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">LK*SubJEoFKcD`");
      iIOMetadataNode0.removeChild(iIOMetadataNode0);
      HashMap hashMap0 = (HashMap)structSerializer0.deserialize(iIOMetadataNode0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("Zd}k3g9>?A", object0, biFunction0);
      // Undeclared exception!
      try { 
        serializerHandler0.serialize(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: No serializer found for type 'java.lang.Object'.
         //
         verifyException("de.timroes.axmlrpc.serializer.StructSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StructSerializer structSerializer0 = new StructSerializer((SerializerHandler) null);
      // Undeclared exception!
      try { 
        structSerializer0.serialize((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.axmlrpc.serializer.StructSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler();
      StructSerializer structSerializer0 = new StructSerializer(serializerHandler0);
      // Undeclared exception!
      try { 
        structSerializer0.serialize(serializerHandler0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class de.timroes.axmlrpc.serializer.SerializerHandler cannot be cast to class java.util.Map (de.timroes.axmlrpc.serializer.SerializerHandler is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3418981b; java.util.Map is in module java.base of loader 'bootstrap')
         //
         verifyException("de.timroes.axmlrpc.serializer.StructSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StructSerializer structSerializer0 = new StructSerializer((SerializerHandler) null);
      // Undeclared exception!
      try { 
        structSerializer0.deserialize((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.axmlrpc.serializer.StructSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler();
      StructSerializer structSerializer0 = new StructSerializer(serializerHandler0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put("nil", "string");
      XmlElement xmlElement0 = structSerializer0.serialize(hashMap0);
      assertNotNull(xmlElement0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("member");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("value");
      iIOMetadataNode1.appendChild(iIOMetadataNode0);
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      SerializerHandler serializerHandler0 = new SerializerHandler();
      StructSerializer structSerializer0 = new StructSerializer(serializerHandler0);
      try { 
        structSerializer0.deserialize(iIOMetadataNode1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No deserializer found for type 'member'.
         //
         verifyException("de.timroes.axmlrpc.serializer.SerializerHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("member");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("name");
      iIOMetadataNode1.appendChild(iIOMetadataNode0);
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      SerializerHandler serializerHandler0 = new SerializerHandler();
      StructSerializer structSerializer0 = new StructSerializer(serializerHandler0);
      try { 
        structSerializer0.deserialize(iIOMetadataNode1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Element must contain only text elements.
         //
         verifyException("de.timroes.axmlrpc.XMLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("string");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      StructSerializer structSerializer0 = new StructSerializer(serializerHandler0);
      try { 
        structSerializer0.deserialize(iIOMetadataNode0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Only struct members allowed within a struct.
         //
         verifyException("de.timroes.axmlrpc.serializer.StructSerializer", e);
      }
  }
}
