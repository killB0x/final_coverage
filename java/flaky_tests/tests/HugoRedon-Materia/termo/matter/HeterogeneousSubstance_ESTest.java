/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 04:57:39 GMT 2022
 */

package termo.matter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeSupport;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import termo.binaryParameter.InteractionParameter;
import termo.component.Compound;
import termo.data.ExperimentalData;
import termo.data.ExperimentalDataBinaryList;
import termo.data.ExperimentalDataBinaryType;
import termo.data.ExperimentalDataList;
import termo.eos.Cubic;
import termo.eos.alpha.Alpha;
import termo.eos.alpha.AlphaParameter;
import termo.eos.alpha.AndroulakisEtAlAboveTc;
import termo.eos.alpha.MathiasAboveTcAlphaEquation;
import termo.eos.alpha.Soave2Parameters;
import termo.eos.alpha.TwoEquationsAlphaExpression;
import termo.eos.alpha.TwuEquation;
import termo.eos.alpha.UnitAlpha;
import termo.eos.alpha.YuAndLu;
import termo.eos.alpha.YuAndLuAboveTc;
import termo.eos.alpha.commonaAlphaEquationsImplementation.MathiasAlpha;
import termo.eos.alpha.commonaAlphaEquationsImplementation.StryjekAndVera;
import termo.eos.mixingRule.VDWMixingRule;
import termo.equations.Eqn101VaporPressure;
import termo.equations.Eqn10VaporPressure;
import termo.equations.EqnVaporPressure;
import termo.matter.HeterogeneousMixture;
import termo.matter.HeterogeneousSubstance;
import termo.matter.Homogeneous;
import termo.matter.Mixture;
import termo.matter.Substance;
import termo.optimization.errorfunctions.MixtureErrorFunction;
import termo.optimization.errorfunctions.VaporPressureErrorFunction;
import termo.phase.Phase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HeterogeneousSubstance_ESTest extends HeterogeneousSubstance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      compound0.setCriticalTemperature(1797.2269941);
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.calculateVF();
      heterogeneousSubstance0.getLiquid();
      // Undeclared exception!
      heterogeneousSubstance0.dewPressureImpl();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      StryjekAndVera stryjekAndVera0 = new StryjekAndVera();
      MathiasAboveTcAlphaEquation mathiasAboveTcAlphaEquation0 = new MathiasAboveTcAlphaEquation(stryjekAndVera0);
      mathiasAboveTcAlphaEquation0.getEquation();
      Compound compound0 = new Compound();
      stryjekAndVera0.setR3(2857.6915584984);
      compound0.setDipprChemID((-2547));
      compound0.setAbsoluteEntropyinStandardStateat298_15Kand101325Pa(0.0);
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, mathiasAboveTcAlphaEquation0, compound0);
      heterogeneousSubstance0.getComponent();
      heterogeneousSubstance0.bubbleTemperature();
      heterogeneousSubstance0.saturationTemperature(2857.6915584984);
      heterogeneousSubstance0.equilibriaRelation(1.01, 0.0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      compound0.setSolubilityParameterat298_15K(560.4194101207594);
      twuEquation0.setParameter(4195.5860669450185, compound0, 1105);
      compound0.setCriticalTemperature(0.5);
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.alphaParameters();
      heterogeneousSubstance0.getVapor();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance1 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance1.bubblePressure((-2894.72686285448));
      HeterogeneousSubstance heterogeneousSubstance2 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance2.dewTemperature();
      heterogeneousSubstance1.getLiquid();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      compound0.setCriticalTemperature(0.99);
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.toString();
      heterogeneousSubstance0.calculateVF();
      heterogeneousSubstance0.getComponent();
      // Undeclared exception!
      heterogeneousSubstance0.bubblePressure(0.99);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      compound0.setCriticalTemperature(0.5);
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.toString();
      heterogeneousSubstance0.calculateVF();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      StryjekAndVera stryjekAndVera0 = new StryjekAndVera();
      MathiasAboveTcAlphaEquation mathiasAboveTcAlphaEquation0 = new MathiasAboveTcAlphaEquation(stryjekAndVera0);
      stryjekAndVera0.setR3(1406.072717327712);
      cubic0.setOmega_b(1406.072717327712);
      cubic0.evaluateLatexCubic(1406.072717327712, (-2189.0684481490966), 1406.072717327712, 3465.243178206, 100.0);
      stryjekAndVera0.setR1(3465.243178206);
      Compound compound0 = new Compound("K\"*76|%=");
      cubic0.setU((-1523.63295161028));
      compound0.setMolecularWeight(1406.072717327712);
      stryjekAndVera0.setR1(1406.072717327712);
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, mathiasAboveTcAlphaEquation0, compound0);
      heterogeneousSubstance0.bubbleTemperature();
      mathiasAboveTcAlphaEquation0.equals(cubic0);
      heterogeneousSubstance0.bubbleTemperatureImpl();
      heterogeneousSubstance0.getVapor();
      heterogeneousSubstance0.pressure = 2133.4643488802;
      heterogeneousSubstance0.getComponent();
      heterogeneousSubstance0.bubbleTemperature();
      heterogeneousSubstance0.saturationTemperature(3465.243178206);
      heterogeneousSubstance0.getLiquid();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      Mixture mixture0 = new Mixture();
      heterogeneousSubstance0.vapor = (Homogeneous) mixture0;
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubblePressure(100.0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.matter.Mixture cannot be cast to class termo.matter.Substance (termo.matter.Mixture and termo.matter.Substance are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3f2f16a5)
         //
         verifyException("termo.matter.HeterogeneousSubstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      compound0.setB_YuAndLu((-0.17131848));
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.calculateVF();
      heterogeneousSubstance0.getComponent();
      heterogeneousSubstance0.saturationTemperature();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      ExperimentalData experimentalData0 = new ExperimentalData();
      HeterogeneousSubstance heterogeneousSubstance1 = new HeterogeneousSubstance();
      heterogeneousSubstance1.equals(heterogeneousSubstance0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      HeterogeneousSubstance heterogeneousSubstance1 = new HeterogeneousSubstance();
      heterogeneousSubstance1.equals(heterogeneousSubstance0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.toString();
      heterogeneousSubstance0.calculateVF();
      // Undeclared exception!
      heterogeneousSubstance0.bubblePressure();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      HeterogeneousSubstance heterogeneousSubstance1 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      Mixture mixture0 = new Mixture();
      heterogeneousSubstance1.vapor = (Homogeneous) mixture0;
      // Undeclared exception!
      try { 
        heterogeneousSubstance1.dewTemperature();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.matter.Mixture cannot be cast to class termo.matter.Substance (termo.matter.Mixture and termo.matter.Substance are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3f2f16a5)
         //
         verifyException("termo.matter.HeterogeneousSubstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.bubblePressure(1.0E-5);
      heterogeneousSubstance0.dewTemperature();
      // Undeclared exception!
      heterogeneousSubstance0.dewPressure();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      cubic0.setOmega_a(749.304);
      cubic0.setOmega_b((-78.0));
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      Cubic cubic1 = new Cubic();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic1, twuEquation0, compound0);
      heterogeneousSubstance0.equals(cubic1);
      heterogeneousSubstance0.alphaParameters();
      heterogeneousSubstance0.bubblePressure((-78.0));
      heterogeneousSubstance0.dewTemperature();
      heterogeneousSubstance0.getVapor();
      // Undeclared exception!
      heterogeneousSubstance0.dewPressure(1.0E-5);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      boolean boolean0 = heterogeneousSubstance0.equals(heterogeneousSubstance0);
      assertTrue(boolean0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      ArrayList<AlphaParameter> arrayList0 = new ArrayList<AlphaParameter>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.calculateVF();
      // Undeclared exception!
      heterogeneousSubstance0.bubblePressureImpl();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      TwuEquation twuEquation1 = new TwuEquation();
      twuEquation1.getEquation();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation1, compound0);
      heterogeneousSubstance0.dewPressure();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      twuEquation0.equals(compound0);
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.pressure = 0.001;
      heterogeneousSubstance0.calculateVF();
      heterogeneousSubstance0.hashCode();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      Object object0 = new Object();
      heterogeneousSubstance0.equals(object0);
      HeterogeneousSubstance.BubbleTemperatureErrorFunction heterogeneousSubstance_BubbleTemperatureErrorFunction0 = heterogeneousSubstance0.new BubbleTemperatureErrorFunction();
      List<AlphaParameter> list0 = new LinkedList<AlphaParameter>();
      heterogeneousSubstance0.getComponent();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubbleTemperature(13.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      twuEquation0.equals(compound0);
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      compound0.setFlashPoint(1.01);
      heterogeneousSubstance0.saturationTemperature(0.16666666666666666);
      heterogeneousSubstance0.bubblePressure((double) 1);
      heterogeneousSubstance0.dewTemperature();
      heterogeneousSubstance0.getComponent();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.bubblePressure((-991.7721430596691));
      // Undeclared exception!
      heterogeneousSubstance0.saturationPressure((double) 1000);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.calculateVF();
      heterogeneousSubstance0.dewTemperatureEstimate();
      // Undeclared exception!
      heterogeneousSubstance0.dewPressure((double) 1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.equilibriaRelation(1.0E-4, 1.0E-4);
      heterogeneousSubstance0.calculateVF();
      heterogeneousSubstance0.equilibriaRelation(1.0E-4, (-666.0612198339869));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      cubic0.setOmega_b((-78.0));
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.equals(compound0);
      heterogeneousSubstance0.alphaParameters();
      heterogeneousSubstance0.calculateVF();
      heterogeneousSubstance0.dewTemperature();
      // Undeclared exception!
      heterogeneousSubstance0.dewPressureImpl();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      cubic0.setOmega_b(1.0E-4);
      cubic0.setW(1.0E-4);
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      twuEquation0.getEquation();
      heterogeneousSubstance0.temperatureEstimate();
      heterogeneousSubstance0.getVapor();
      heterogeneousSubstance0.getVapor();
      heterogeneousSubstance0.dewTemperature();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      cubic0.setOmega_b((-78.0));
      TwuEquation twuEquation0 = new TwuEquation();
      cubic0.setName("");
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.temperatureEstimate();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubbleTemperature(5512.367);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.calculateVF();
      // Undeclared exception!
      heterogeneousSubstance0.calculateVF();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      cubic0.setOmega_b((-78.0));
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      ExperimentalDataBinaryList experimentalDataBinaryList0 = new ExperimentalDataBinaryList();
      compound0.setSmiles("component");
      HeterogeneousSubstance.BubbleTemperatureErrorFunction heterogeneousSubstance_BubbleTemperatureErrorFunction0 = heterogeneousSubstance0.new BubbleTemperatureErrorFunction();
      VaporPressureErrorFunction vaporPressureErrorFunction0 = new VaporPressureErrorFunction(heterogeneousSubstance0);
      heterogeneousSubstance0.bubbleTemperatureEstimate();
      heterogeneousSubstance0.bubblePressure((-1215.2631745434976));
      // Undeclared exception!
      heterogeneousSubstance0.calculateVF();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      cubic0.setOmega_b((-78.0));
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      ExperimentalDataBinaryList experimentalDataBinaryList0 = new ExperimentalDataBinaryList();
      experimentalDataBinaryList0.getReferenceComponent();
      twuEquation0.equals((Object) null);
      Cubic cubic1 = new Cubic();
      heterogeneousSubstance0.setvF((-78.0));
      heterogeneousSubstance0.alphaParameters();
      heterogeneousSubstance0.hashCode();
      heterogeneousSubstance0.dewTemperature();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      cubic0.setOmega_b((-78.0));
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.equals(compound0);
      heterogeneousSubstance0.alphaParameters();
      heterogeneousSubstance0.dewTemperature();
      heterogeneousSubstance0.dewPressureImpl();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      HeterogeneousSubstance heterogeneousSubstance1 = new HeterogeneousSubstance();
      // Undeclared exception!
      try { 
        heterogeneousSubstance1.bubblePressureEstimate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      cubic0.setOmega_b((-78.0));
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      ExperimentalDataBinaryList experimentalDataBinaryList0 = new ExperimentalDataBinaryList();
      experimentalDataBinaryList0.getReferenceComponent();
      twuEquation0.equals((Object) null);
      Cubic cubic1 = new Cubic();
      heterogeneousSubstance0.setvF((-78.0));
      heterogeneousSubstance0.saturationTemperature((-5184.374682118772));
      heterogeneousSubstance0.bubblePressure((double) 1);
      heterogeneousSubstance0.dewTemperature();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Compound compound0 = new Compound();
      AndroulakisEtAlAboveTc androulakisEtAlAboveTc0 = new AndroulakisEtAlAboveTc();
      HeterogeneousSubstance heterogeneousSubstance0 = null;
      try {
        heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, androulakisEtAlAboveTc0, compound0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported yet.
         //
         verifyException("termo.eos.alpha.AndroulakisEtAlAboveTc", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.hashCode();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      cubic0.setOmega_b((-78.0));
      TwuEquation twuEquation0 = new TwuEquation();
      Compound compound0 = new Compound();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      heterogeneousSubstance0.temperature = 1.0;
      twuEquation0.getEquation();
      cubic0.setName("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}");
      heterogeneousSubstance0.equals((Object) null);
      heterogeneousSubstance0.alphaParameters();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      cubic0.setOmega_b((-78.0));
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.temperature = 1.0;
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      String string0 = twuEquation0.getEquation();
      assertEquals("\\alpha(T) = T_r^{N(M-1)}e^{L\\left( 1-T_r^{NM} \\right)}", string0);
      assertNotNull(string0);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      
      cubic0.setName("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}");
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      Eqn101VaporPressure eqn101VaporPressure0 = compound0.getEqn101VaporPressure();
      assertNull(eqn101VaporPressure0);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      
      compound0.setEqn101VaporPressure((Eqn101VaporPressure) null);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      
      twuEquation0.setEquation((String) null);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      
      boolean boolean0 = heterogeneousSubstance0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.dewPressureEstimate();
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      int int0 = heterogeneousSubstance0.dewTemperatureEstimate();
      assertEquals(1, int0);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      heterogeneousSubstance0.dewPressureEstimate();
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      twuEquation0.setEquation("OPXqDm*9[5;");
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      
      int int1 = heterogeneousSubstance0.bubblePressure(2247.688407917173);
      assertEquals(1000, int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(2247.688407917173, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.alphaParameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.HeterogeneousSubstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      
      cubic0.setOmega_b((-78.0));
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.temperature = 1.0;
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      String string0 = twuEquation0.getEquation();
      assertEquals("\\alpha(T) = T_r^{N(M-1)}e^{L\\left( 1-T_r^{NM} \\right)}", string0);
      assertNotNull(string0);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      
      cubic0.setName("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}");
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      
      twuEquation0.setEquation((String) null);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      
      boolean boolean0 = heterogeneousSubstance0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.dewPressureEstimate();
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      int int0 = heterogeneousSubstance0.dewTemperatureEstimate();
      assertEquals(1, int0);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.setAlpha(twuEquation0);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Substance substance0 = heterogeneousSubstance0.getLiquid();
      assertNotNull(substance0);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(1.0, substance0.getMolarFraction(), 0.01);
      assertEquals(Double.NaN, substance0.getPressure(), 0.01);
      assertEquals(Double.NaN, substance0.calculate_b_cubicParameter(), 0.01);
      assertEquals(Double.NaN, substance0.getTemperature(), 0.01);
      assertEquals("  g = h - T * s", substance0.gibbsLatexEquation());
      assertEquals(Phase.LIQUID, substance0.getPhase());
      assertEquals(Double.NaN, substance0.calculatetAcentricFactorBasedVaporPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.getName());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      
      cubic0.setOmega_b((-78.0));
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.getName());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.getName());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.temperature = 1.0;
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.getName());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      String string0 = twuEquation0.getEquation();
      assertEquals("\\alpha(T) = T_r^{N(M-1)}e^{L\\left( 1-T_r^{NM} \\right)}", string0);
      assertNotNull(string0);
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      
      cubic0.setName("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}");
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      
      twuEquation0.setEquation((String) null);
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      
      boolean boolean0 = heterogeneousSubstance0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.dewPressureEstimate();
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      int int0 = heterogeneousSubstance0.dewTemperatureEstimate();
      assertEquals(1, int0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      heterogeneousSubstance0.dewPressureEstimate();
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      int int1 = heterogeneousSubstance0.bubblePressure();
      assertEquals(1000, int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      int int2 = heterogeneousSubstance0.bubbleTemperatureImpl();
      assertEquals(1, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      
      UnitAlpha unitAlpha0 = new UnitAlpha();
      assertNotNull(unitAlpha0);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      
      String string0 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string0);
      assertNotNull(string0);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      
      String string1 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string1);
      assertNotNull(string1);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      
      Compound compound0 = new Compound("r<7<IkTj1");
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertNull(compound0.getSubFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, unitAlpha0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertNull(compound0.getSubFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      compound0.setSubFamily("alpha(T) = 1");
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      cubic0.setW(1108.9267293);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      
      Long long0 = new Long(2974L);
      assertEquals(2974L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("^C^Ow9*CWV zHYAV", long0);
      assertEquals(2974L, (long)long1);
      assertNotNull(long1);
      
      compound0.setId(long1);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      
      Phase phase0 = Phase.VAPOR;
      double double0 = cubic0.calculateFugacityCoefficient(1789.37966, 0.0, 1789.37966, (-1540.858344159), 8314.472, 1108.9267293, phase0);
      assertEquals(Double.NaN, double0, 0.01);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      
      compound0.setB_Soave((-1540.858344159));
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      
      boolean boolean0 = heterogeneousSubstance0.equals(object0);
      assertFalse(boolean0);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      double double1 = heterogeneousSubstance0.equilibriaRelation(1.235, 1.235);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(1.235, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(1.235, heterogeneousSubstance0.getPressure(), 0.01);
      
      Phase phase1 = Phase.LIQUID;
      double double2 = cubic0.calculateCompresibilityFactor(Double.NaN, 1108.9267293, phase1);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(phase1.equals((Object)phase0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotSame(phase1, phase0);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      
      heterogeneousSubstance0.setAlpha(unitAlpha0);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(1.235, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(1.235, heterogeneousSubstance0.getPressure(), 0.01);
      
      List<AlphaParameter> list0 = heterogeneousSubstance0.alphaParameters();
      assertNotNull(list0);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(1.235, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(1.235, heterogeneousSubstance0.getPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      List<AlphaParameter> list0 = heterogeneousSubstance0.alphaParameters();
      assertNotNull(list0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      cubic0.setOmega_b((-78.0));
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      int int0 = heterogeneousSubstance0.saturationPressure(1.0);
      assertEquals(1000, int0);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      VaporPressureErrorFunction vaporPressureErrorFunction0 = new VaporPressureErrorFunction(heterogeneousSubstance0);
      assertNotNull(vaporPressureErrorFunction0);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.setErrorFunction(vaporPressureErrorFunction0);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      List<AlphaParameter> list0 = heterogeneousSubstance0.alphaParameters();
      assertNotNull(list0);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      HeterogeneousSubstance.BubbleTemperatureErrorFunction heterogeneousSubstance_BubbleTemperatureErrorFunction0 = heterogeneousSubstance0.new BubbleTemperatureErrorFunction();
      assertNotNull(heterogeneousSubstance_BubbleTemperatureErrorFunction0);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      double double0 = heterogeneousSubstance_BubbleTemperatureErrorFunction0.newVariableFunction(0.0, 772.892998, 0.001, 0.001);
      assertEquals(0.0, double0, 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Compound compound1 = new Compound();
      assertTrue(compound1.equals((Object)compound0));
      assertNotNull(compound1);
      assertEquals(0.0, compound1.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound1.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getA_dippr107Cp(), 0.01);
      assertNull(compound1.getStructure());
      assertEquals(0.0, compound1.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound1.getL_Twu(), 0.01);
      assertNull(compound1.getFamily());
      assertEquals(0.0, compound1.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound1.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound1.getDipprChemID());
      assertNull(compound1.getSubFamily());
      assertEquals(0.0, compound1.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound1.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound1.getFormula());
      assertEquals(0.0, compound1.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound1.getA_Mathias_Copeman(), 0.01);
      assertNull(compound1.getName());
      assertEquals(0.0, compound1.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound1.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound1.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound1.getCriticalCompressibilityFactor(), 0.01);
      assertNull(compound1.getCasNumber());
      assertEquals(0.0, compound1.getB_Soave(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getMeltingPoint_1atm(), 0.01);
      assertNull(compound1.getSmiles());
      assertEquals(0.0, compound1.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound1.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getFlashPoint(), 0.01);
      assertNull(compound1.getId());
      assertEquals(0.0, compound1.getA_Soave(), 0.01);
      assertEquals(0.0, compound1.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound1.getM_Twu(), 0.01);
      assertEquals(0.0, compound1.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound1.getA_Mathias(), 0.01);
      assertEquals(0.0, compound1.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound1.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound1.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getN_Twu(), 0.01);
      assertNull(compound1.toString());
      assertEquals(0.0, compound1.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound1.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound1.getStandardState());
      assertEquals(0.0, compound1.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound1.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound1.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound1.getVanderWaalsArea(), 0.01);
      
      heterogeneousSubstance0.setComponent(compound1);
      assertTrue(compound0.equals((Object)compound1));
      assertTrue(compound1.equals((Object)compound0));
      assertNotSame(compound0, compound1);
      assertNotSame(compound1, compound0);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, compound1.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound1.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getA_dippr107Cp(), 0.01);
      assertNull(compound1.getStructure());
      assertEquals(0.0, compound1.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound1.getL_Twu(), 0.01);
      assertNull(compound1.getFamily());
      assertEquals(0.0, compound1.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound1.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound1.getDipprChemID());
      assertNull(compound1.getSubFamily());
      assertEquals(0.0, compound1.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound1.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound1.getFormula());
      assertEquals(0.0, compound1.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound1.getA_Mathias_Copeman(), 0.01);
      assertNull(compound1.getName());
      assertEquals(0.0, compound1.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound1.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound1.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound1.getCriticalCompressibilityFactor(), 0.01);
      assertNull(compound1.getCasNumber());
      assertEquals(0.0, compound1.getB_Soave(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getMeltingPoint_1atm(), 0.01);
      assertNull(compound1.getSmiles());
      assertEquals(0.0, compound1.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound1.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getFlashPoint(), 0.01);
      assertNull(compound1.getId());
      assertEquals(0.0, compound1.getA_Soave(), 0.01);
      assertEquals(0.0, compound1.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound1.getM_Twu(), 0.01);
      assertEquals(0.0, compound1.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound1.getA_Mathias(), 0.01);
      assertEquals(0.0, compound1.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound1.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound1.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getN_Twu(), 0.01);
      assertNull(compound1.toString());
      assertEquals(0.0, compound1.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound1.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound1.getStandardState());
      assertEquals(0.0, compound1.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound1.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound1.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound1.getVanderWaalsArea(), 0.01);
      
      heterogeneousSubstance0.dewPressureEstimate();
      assertTrue(compound0.equals((Object)compound1));
      assertNotSame(compound0, compound1);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      heterogeneousSubstance0.dewPressureImpl();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      ExperimentalData experimentalData0 = new ExperimentalData();
      assertNotNull(experimentalData0);
      assertEquals(0.0, experimentalData0.getTemperature(), 0.01);
      assertEquals(0.0, experimentalData0.getPressure(), 0.01);
      assertNull(experimentalData0.getId());
      
      boolean boolean0 = heterogeneousSubstance0.equals(heterogeneousSubstance0);
      assertTrue(boolean0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      VaporPressureErrorFunction vaporPressureErrorFunction0 = heterogeneousSubstance0.getErrorFunction();
      assertNotNull(vaporPressureErrorFunction0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      HeterogeneousSubstance.BubbleTemperatureErrorFunction heterogeneousSubstance_BubbleTemperatureErrorFunction0 = heterogeneousSubstance0.new BubbleTemperatureErrorFunction();
      assertNotNull(heterogeneousSubstance_BubbleTemperatureErrorFunction0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      double double0 = 4794.761190843511;
      VaporPressureErrorFunction vaporPressureErrorFunction0 = heterogeneousSubstance0.getErrorFunction();
      assertNotNull(vaporPressureErrorFunction0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubbleTemperatureEstimate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      double double0 = 1.4897153;
      heterogeneousSubstance0.pressure = 1.4897153;
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(1.4897153, heterogeneousSubstance0.getPressure(), 0.01);
      
      double double1 = 510.82843;
      heterogeneousSubstance0.temperature = 510.82843;
      assertEquals(510.82843, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(1.4897153, heterogeneousSubstance0.getPressure(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.calculateVF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      
      UnitAlpha unitAlpha0 = new UnitAlpha();
      assertNotNull(unitAlpha0);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      
      String string0 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string0);
      assertNotNull(string0);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      
      String string1 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string1);
      assertNotNull(string1);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      
      cubic0.setOmega_a(1108.9267293);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertNull(cubic0.getName());
      
      Compound compound0 = new Compound("r<7<IkTj1");
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getId());
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, unitAlpha0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getId());
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      cubic0.setW(1108.9267293);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      
      Long long0 = new Long(2974L);
      assertEquals(2974L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("IVP", long0);
      assertEquals(2974L, (long)long1);
      assertNotNull(long1);
      
      compound0.setId(long1);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      
      double double0 = heterogeneousSubstance0.calculateEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      Phase phase0 = Phase.VAPOR;
      double double1 = cubic0.calculateFugacityCoefficient(1789.37966, 0.0, 1789.37966, (-1540.858344159), 8314.472, 1108.9267293, phase0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      
      compound0.setB_Soave((-1540.858344159));
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      
      boolean boolean0 = heterogeneousSubstance0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      Compound compound1 = new Compound();
      assertFalse(compound1.equals((Object)compound0));
      assertNotNull(compound1);
      assertEquals(0.0, compound1.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound1.getA_Soave(), 0.01);
      assertEquals(0.0, compound1.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound1.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getB_Soave(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound1.getCasNumber());
      assertEquals(0.0, compound1.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound1.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getN_Twu(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound1.getSubFamily());
      assertNull(compound1.toString());
      assertEquals(0.0, compound1.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound1.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0, compound1.getDipprChemID());
      assertNull(compound1.getFamily());
      assertEquals(0.0, compound1.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound1.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound1.getSmiles());
      assertEquals(0.0, compound1.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getM_Twu(), 0.01);
      assertEquals(0.0, compound1.getFlashPoint(), 0.01);
      assertEquals(0.0, compound1.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound1.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound1.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertNull(compound1.getStandardState());
      assertEquals(0.0, compound1.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound1.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getB_Mathias_Copeman(), 0.01);
      assertNull(compound1.getFormula());
      assertEquals(0.0, compound1.getA_MelhemEtAl(), 0.01);
      assertNull(compound1.getName());
      assertEquals(0.0, compound1.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound1.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound1.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound1.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound1.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound1.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound1.getAcentricFactor(), 0.01);
      assertNull(compound1.getId());
      assertEquals(0.0, compound1.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound1.getL_Twu(), 0.01);
      assertEquals(0.0, compound1.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound1.getA_Mathias(), 0.01);
      assertEquals(0.0, compound1.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound1.getStructure());
      assertEquals(0.0, compound1.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound1.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound1.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getRadiusofGyration(), 0.01);
      
      heterogeneousSubstance0.setComponent(compound0);
      assertFalse(compound0.equals((Object)compound1));
      assertNotSame(compound0, compound1);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      heterogeneousSubstance0.dewPressureEstimate();
      assertFalse(compound0.equals((Object)compound1));
      assertNotSame(compound0, compound1);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      
      int int0 = heterogeneousSubstance0.bubbleTemperatureImpl();
      assertEquals(1, int0);
      assertFalse(compound0.equals((Object)compound1));
      assertNotSame(compound0, compound1);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertNull(cubic0.getName());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      
      YuAndLu yuAndLu0 = new YuAndLu();
      assertNotNull(yuAndLu0);
      assertNull(yuAndLu0.getName());
      assertNull(yuAndLu0.toString());
      assertEquals(3, yuAndLu0.numberOfParameters());
      
      ExperimentalDataList experimentalDataList0 = new ExperimentalDataList();
      assertNotNull(experimentalDataList0);
      assertNull(experimentalDataList0.getId());
      assertNull(experimentalDataList0.getSource());
      assertNull(experimentalDataList0.getName());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, yuAndLu0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertNull(cubic0.getName());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(yuAndLu0.getName());
      assertNull(yuAndLu0.toString());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      int int0 = heterogeneousSubstance0.saturationTemperature();
      assertEquals(1, int0);
      assertNull(cubic0.getName());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(yuAndLu0.getName());
      assertNull(yuAndLu0.toString());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      int int1 = heterogeneousSubstance0.bubbleTemperature((-2718.679897117));
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertNull(cubic0.getName());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(yuAndLu0.getName());
      assertNull(yuAndLu0.toString());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Alpha alpha0 = heterogeneousSubstance0.getAlpha();
      assertNotNull(alpha0);
      assertSame(yuAndLu0, alpha0);
      assertSame(alpha0, yuAndLu0);
      assertNull(cubic0.getName());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(yuAndLu0.getName());
      assertNull(yuAndLu0.toString());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertNull(alpha0.toString());
      assertEquals(3, alpha0.numberOfParameters());
      assertNull(alpha0.getName());
      
      int int2 = heterogeneousSubstance0.bubbleTemperature();
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertSame(yuAndLu0, alpha0);
      assertNull(cubic0.getName());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(yuAndLu0.getName());
      assertNull(yuAndLu0.toString());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Alpha alpha1 = heterogeneousSubstance0.getAlpha();
      assertNotNull(alpha1);
      assertSame(yuAndLu0, alpha0);
      assertSame(yuAndLu0, alpha1);
      assertSame(alpha1, alpha0);
      assertSame(alpha1, yuAndLu0);
      assertNull(cubic0.getName());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(yuAndLu0.getName());
      assertNull(yuAndLu0.toString());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(3, alpha1.numberOfParameters());
      assertNull(alpha1.toString());
      assertNull(alpha1.getName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = heterogeneousSubstance0.equals(object0);
      assertFalse(boolean0);
      assertSame(yuAndLu0, alpha0);
      assertSame(yuAndLu0, alpha1);
      assertNull(cubic0.getName());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(yuAndLu0.getName());
      assertNull(yuAndLu0.toString());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance1 = new HeterogeneousSubstance();
      assertFalse(heterogeneousSubstance1.equals((Object)heterogeneousSubstance0));
      assertNotNull(heterogeneousSubstance1);
      assertEquals(0.0, heterogeneousSubstance1.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance1.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance1.getPressure(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance1.dewPressureEstimate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      
      UnitAlpha unitAlpha0 = new UnitAlpha();
      assertNotNull(unitAlpha0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      
      String string0 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string0);
      assertNotNull(string0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      
      String string1 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string1);
      assertNotNull(string1);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      
      Compound compound0 = new Compound("r<7<IkTj1");
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, unitAlpha0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      compound0.setSubFamily("alpha(T) = 1");
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      cubic0.setW(1108.9267293);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      
      int int0 = heterogeneousSubstance0.bubbleTemperature();
      assertEquals(1, int0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Alpha alpha0 = heterogeneousSubstance0.getAlpha();
      assertNotNull(alpha0);
      assertSame(unitAlpha0, alpha0);
      assertSame(alpha0, unitAlpha0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", alpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", alpha0.getName());
      assertEquals(0, alpha0.numberOfParameters());
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = heterogeneousSubstance0.equals("^C^Ow9*CWV zHYAV");
      assertFalse(boolean0);
      assertSame(unitAlpha0, alpha0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.dewPressureEstimate();
      assertSame(unitAlpha0, alpha0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      int int1 = heterogeneousSubstance0.dewTemperatureEstimate();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertSame(unitAlpha0, alpha0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      heterogeneousSubstance0.dewPressureEstimate();
      assertSame(unitAlpha0, alpha0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.getName());
      
      cubic0.setOmega_b((-78.0));
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.getName());
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      
      String string0 = twuEquation0.getEquation();
      assertEquals("\\alpha(T) = T_r^{N(M-1)}e^{L\\left( 1-T_r^{NM} \\right)}", string0);
      assertNotNull(string0);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      
      cubic0.setName("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}");
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      Alpha alpha0 = heterogeneousSubstance0.getAlpha();
      assertNull(alpha0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      UnitAlpha unitAlpha0 = new UnitAlpha();
      assertNotNull(unitAlpha0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      
      String string0 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string0);
      assertNotNull(string0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      
      String string1 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string1);
      assertNotNull(string1);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, unitAlpha0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      double double0 = 1.235;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = heterogeneousSubstance0.toString();
      assertEquals("Substancia heterog\u00E9nea, compuesto: null, alfa: Expresi\u00F3n independiente de T (Van Der Waals, ecuaci\u00F3n c\u00FAbica: null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Eqn10VaporPressure eqn10VaporPressure0 = compound0.getEqn10VaporPressure();
      assertNull(eqn10VaporPressure0);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      
      // Undeclared exception!
      try { 
        compound0.getVaporPressureList((EqnVaporPressure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.component.Compound", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      
      cubic0.setOmega_b((-78.0));
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.temperature = 1.0;
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      String string0 = twuEquation0.getEquation();
      assertEquals("\\alpha(T) = T_r^{N(M-1)}e^{L\\left( 1-T_r^{NM} \\right)}", string0);
      assertNotNull(string0);
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      
      cubic0.setName("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}");
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      
      twuEquation0.setEquation("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}");
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      
      compound0.setEnthalpyofFormationofIdealgasat298_15Kand101325Pa(1.0);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(1.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      
      int int0 = heterogeneousSubstance0.bubblePressureImpl();
      assertEquals(1000, int0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(1.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      cubic0.setCriticalCompressibilityFactor(1.0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(1.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      
      int int1 = heterogeneousSubstance0.saturationTemperature(Double.NaN);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(1.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(1.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      heterogeneousSubstance0.bubblePressure(1.0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      int int0 = heterogeneousSubstance0.dewPressureImpl();
      assertEquals(1000, int0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      List<AlphaParameter> list0 = heterogeneousSubstance0.alphaParameters();
      assertNotNull(list0);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      heterogeneousSubstance0.dewPressureImpl();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      
      UnitAlpha unitAlpha0 = new UnitAlpha();
      assertNotNull(unitAlpha0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      
      String string0 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string0);
      assertNotNull(string0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      
      String string1 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string1);
      assertNotNull(string1);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      
      cubic0.setOmega_a(1108.9267293);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      
      Cubic cubic1 = new Cubic();
      assertFalse(cubic1.equals((Object)cubic0));
      assertNotNull(cubic1);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic1.getEquation());
      assertEquals(0.0, cubic1.getOmega_a(), 0.01);
      assertEquals(0.0, cubic1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic1.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic1.getOmega_b(), 0.01);
      assertEquals(0.0, cubic1.getU(), 0.01);
      assertNull(cubic1.toString());
      assertTrue(cubic1.isCubic());
      assertEquals(0.0, cubic1.getW(), 0.01);
      assertNull(cubic1.getName());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic1, unitAlpha0, compound0);
      assertFalse(cubic1.equals((Object)cubic0));
      assertNotNull(heterogeneousSubstance0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic1.getEquation());
      assertEquals(0.0, cubic1.getOmega_a(), 0.01);
      assertEquals(0.0, cubic1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic1.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic1.getOmega_b(), 0.01);
      assertEquals(0.0, cubic1.getU(), 0.01);
      assertNull(cubic1.toString());
      assertTrue(cubic1.isCubic());
      assertEquals(0.0, cubic1.getW(), 0.01);
      assertNull(cubic1.getName());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.bubblePressureEstimate();
      assertFalse(cubic1.equals((Object)cubic0));
      assertNotSame(cubic1, cubic0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic1.getEquation());
      assertEquals(0.0, cubic1.getOmega_a(), 0.01);
      assertEquals(0.0, cubic1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic1.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic1.getOmega_b(), 0.01);
      assertEquals(0.0, cubic1.getU(), 0.01);
      assertNull(cubic1.toString());
      assertTrue(cubic1.isCubic());
      assertEquals(0.0, cubic1.getW(), 0.01);
      assertNull(cubic1.getName());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      
      int int0 = heterogeneousSubstance0.saturationPressure(0.0);
      assertEquals(1000, int0);
      assertFalse(cubic1.equals((Object)cubic0));
      assertNotSame(cubic1, cubic0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic1.getEquation());
      assertEquals(0.0, cubic1.getOmega_a(), 0.01);
      assertEquals(0.0, cubic1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic1.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic1.getOmega_b(), 0.01);
      assertEquals(0.0, cubic1.getU(), 0.01);
      assertNull(cubic1.toString());
      assertTrue(cubic1.isCubic());
      assertEquals(0.0, cubic1.getW(), 0.01);
      assertNull(cubic1.getName());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      VaporPressureErrorFunction vaporPressureErrorFunction0 = new VaporPressureErrorFunction(heterogeneousSubstance0);
      assertFalse(cubic1.equals((Object)cubic0));
      assertNotNull(vaporPressureErrorFunction0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic1.getEquation());
      assertEquals(0.0, cubic1.getOmega_a(), 0.01);
      assertEquals(0.0, cubic1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic1.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic1.getOmega_b(), 0.01);
      assertEquals(0.0, cubic1.getU(), 0.01);
      assertNull(cubic1.toString());
      assertTrue(cubic1.isCubic());
      assertEquals(0.0, cubic1.getW(), 0.01);
      assertNull(cubic1.getName());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      ExperimentalDataList experimentalDataList0 = new ExperimentalDataList();
      assertNotNull(experimentalDataList0);
      assertNull(experimentalDataList0.getId());
      assertNull(experimentalDataList0.getSource());
      assertNull(experimentalDataList0.getName());
      
      LinkedList<ExperimentalData> linkedList0 = new LinkedList<ExperimentalData>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      experimentalDataList0.setList(linkedList0);
      assertNull(experimentalDataList0.getId());
      assertNull(experimentalDataList0.getSource());
      assertNull(experimentalDataList0.getName());
      assertEquals(0, linkedList0.size());
      
      vaporPressureErrorFunction0.setExperimental(experimentalDataList0);
      assertFalse(cubic1.equals((Object)cubic0));
      assertNotSame(cubic1, cubic0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic1.getEquation());
      assertEquals(0.0, cubic1.getOmega_a(), 0.01);
      assertEquals(0.0, cubic1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic1.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic1.getOmega_b(), 0.01);
      assertEquals(0.0, cubic1.getU(), 0.01);
      assertNull(cubic1.toString());
      assertTrue(cubic1.isCubic());
      assertEquals(0.0, cubic1.getW(), 0.01);
      assertNull(cubic1.getName());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertNull(experimentalDataList0.getId());
      assertNull(experimentalDataList0.getSource());
      assertNull(experimentalDataList0.getName());
      
      heterogeneousSubstance0.setErrorFunction(vaporPressureErrorFunction0);
      assertFalse(cubic1.equals((Object)cubic0));
      assertNotSame(cubic1, cubic0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic1.getEquation());
      assertEquals(0.0, cubic1.getOmega_a(), 0.01);
      assertEquals(0.0, cubic1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic1.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic1.getOmega_b(), 0.01);
      assertEquals(0.0, cubic1.getU(), 0.01);
      assertNull(cubic1.toString());
      assertTrue(cubic1.isCubic());
      assertEquals(0.0, cubic1.getW(), 0.01);
      assertNull(cubic1.getName());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getFamily());
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      heterogeneousSubstance0.dewPressureImpl();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      
      YuAndLuAboveTc yuAndLuAboveTc0 = new YuAndLuAboveTc();
      assertNotNull(yuAndLuAboveTc0);
      assertNull(yuAndLuAboveTc0.toString());
      assertEquals(3, yuAndLuAboveTc0.numberOfParameters());
      assertNull(yuAndLuAboveTc0.getName());
      
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      assertNotNull(vDWMixingRule0);
      assertEquals(1, vDWMixingRule0.numberOfParameters());
      assertEquals("Van Der Waals", vDWMixingRule0.toString());
      assertEquals("Van Der Waals", vDWMixingRule0.getName());
      
      Mixture mixture0 = new Mixture();
      assertNotNull(mixture0);
      assertEquals(0.0, mixture0.getPressure(), 0.01);
      assertEquals("  g = h - T * s", mixture0.gibbsLatexEquation());
      assertNull(mixture0.getPhase());
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
      
      HashSet<Compound> hashSet0 = mixture0.getComponents();
      assertNotNull(hashSet0);
      assertEquals(0.0, mixture0.getPressure(), 0.01);
      assertEquals("  g = h - T * s", mixture0.gibbsLatexEquation());
      assertNull(mixture0.getPhase());
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      HeterogeneousSubstance.BubbleTemperatureErrorFunction heterogeneousSubstance_BubbleTemperatureErrorFunction0 = heterogeneousSubstance0.new BubbleTemperatureErrorFunction();
      assertNotNull(heterogeneousSubstance_BubbleTemperatureErrorFunction0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.setTemperature((-0.2697992172066988));
      assertEquals((-0.2697992172066988), heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      double double0 = heterogeneousSubstance_BubbleTemperatureErrorFunction0.newVariableFunction((-1.0), (-0.2697992172066988), 2750.6, (-1.0));
      assertEquals((-0.2698708336822068), double0, 0.01);
      assertEquals((-0.2697992172066988), heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Soave2Parameters soave2Parameters0 = new Soave2Parameters();
      assertNotNull(soave2Parameters0);
      assertNull(soave2Parameters0.toString());
      assertEquals(2, soave2Parameters0.numberOfParameters());
      assertNull(soave2Parameters0.getName());
      
      heterogeneousSubstance0.setAlpha(yuAndLuAboveTc0);
      assertNull(yuAndLuAboveTc0.toString());
      assertEquals(3, yuAndLuAboveTc0.numberOfParameters());
      assertNull(yuAndLuAboveTc0.getName());
      assertEquals((-0.2697992172066988), heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Substance substance0 = heterogeneousSubstance0.getLiquid();
      assertNotNull(substance0);
      assertEquals((-0.2697992172066988), heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals((-0.2697992172066988), substance0.getTemperature(), 0.01);
      assertEquals(0.0, substance0.getPressure(), 0.01);
      assertEquals("  g = h - T * s", substance0.gibbsLatexEquation());
      assertEquals(Phase.LIQUID, substance0.getPhase());
      assertEquals(1.0, substance0.getMolarFraction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      
      YuAndLu yuAndLu0 = new YuAndLu();
      assertNotNull(yuAndLu0);
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      assertEquals(3, yuAndLu0.numberOfParameters());
      
      boolean boolean0 = yuAndLu0.equals(cubic0);
      assertFalse(boolean0);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      assertEquals(3, yuAndLu0.numberOfParameters());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      
      compound0.setC_PolinomialCp((-2704.807608));
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals((-2704.807608), compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      
      compound0.setB_AndroulakisEtAl(274.442735);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(274.442735, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals((-2704.807608), compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      
      cubic0.setName("K5ZCeBe>FtrA8A^Ecn^");
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.toString());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      
      yuAndLu0.setEquation("K5ZCeBe>FtrA8A^Ecn^");
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      assertEquals(3, yuAndLu0.numberOfParameters());
      
      compound0.setLowerFlammabilityLimitTemperature(0.0);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(274.442735, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals((-2704.807608), compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      
      String string0 = yuAndLu0.getEquation();
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", string0);
      assertNotNull(string0);
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      assertEquals(3, yuAndLu0.numberOfParameters());
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, yuAndLu0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.toString());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(274.442735, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals((-2704.807608), compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      int int0 = heterogeneousSubstance0.saturationPressure();
      assertEquals(1000, int0);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.toString());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(274.442735, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals((-2704.807608), compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Substance substance0 = heterogeneousSubstance0.getLiquid();
      assertNotNull(substance0);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.toString());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(274.442735, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals((-2704.807608), compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals("  g = h - T * s", substance0.gibbsLatexEquation());
      assertEquals(Phase.LIQUID, substance0.getPhase());
      assertEquals(0.0, substance0.getTemperature(), 0.01);
      assertEquals(Double.NaN, substance0.calculatetAcentricFactorBasedVaporPressure(), 0.01);
      assertEquals(Double.NaN, substance0.getPressure(), 0.01);
      assertEquals(Double.NaN, substance0.calculate_b_cubicParameter(), 0.01);
      assertEquals(1.0, substance0.getMolarFraction(), 0.01);
      
      PropertyChangeSupport propertyChangeSupport0 = substance0.mpcs;
      assertNotNull(propertyChangeSupport0);
      
      heterogeneousSubstance0.mpcs = propertyChangeSupport0;
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.toString());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(274.442735, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals((-2704.807608), compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals("  g = h - T * s", substance0.gibbsLatexEquation());
      assertEquals(Phase.LIQUID, substance0.getPhase());
      assertEquals(0.0, substance0.getTemperature(), 0.01);
      assertEquals(Double.NaN, substance0.calculatetAcentricFactorBasedVaporPressure(), 0.01);
      assertEquals(Double.NaN, substance0.getPressure(), 0.01);
      assertEquals(Double.NaN, substance0.calculate_b_cubicParameter(), 0.01);
      assertEquals(1.0, substance0.getMolarFraction(), 0.01);
      
      ExperimentalData experimentalData0 = new ExperimentalData(179.7635634458, 3440.3047);
      assertNotNull(experimentalData0);
      assertEquals(179.7635634458, experimentalData0.getTemperature(), 0.01);
      assertNull(experimentalData0.getId());
      assertEquals(3440.3047, experimentalData0.getPressure(), 0.01);
      
      boolean boolean1 = yuAndLu0.equals(experimentalData0);
      assertFalse(boolean1);
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(179.7635634458, experimentalData0.getTemperature(), 0.01);
      assertNull(experimentalData0.getId());
      assertEquals(3440.3047, experimentalData0.getPressure(), 0.01);
      
      compound0.setC_PolinomialCp(0.0);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(274.442735, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      
      Substance substance1 = heterogeneousSubstance0.getVapor();
      assertTrue(substance1.equals((Object)substance0));
      assertNotNull(substance1);
      assertNotSame(substance1, substance0);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.toString());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(1.0, substance1.getMolarFraction(), 0.01);
      assertEquals("  g = h - T * s", substance1.gibbsLatexEquation());
      assertEquals(Double.NaN, substance1.calculatetAcentricFactorBasedVaporPressure(), 0.01);
      assertEquals(0.0, substance1.getTemperature(), 0.01);
      assertEquals(Phase.VAPOR, substance1.getPhase());
      assertEquals(Double.NaN, substance1.calculate_b_cubicParameter(), 0.01);
      assertEquals(Double.NaN, substance1.getPressure(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(274.442735, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      Compound compound1 = heterogeneousSubstance0.getComponent();
      assertNotNull(compound1);
      assertSame(compound1, compound0);
      assertSame(compound0, compound1);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.toString());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("K5ZCeBe>FtrA8A^Ecn^", cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertEquals(0.0, compound1.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound1.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound1.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound1.getId());
      assertEquals(0.0, compound1.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound1.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound1.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getFlashPoint(), 0.01);
      assertEquals(0.0, compound1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound1.getE_dippr107Cp(), 0.01);
      assertNull(compound1.getStandardState());
      assertEquals(0.0, compound1.getA_AndroulakisEtAl(), 0.01);
      assertNull(compound1.getFormula());
      assertEquals(0.0, compound1.getA_Mathias(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound1.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound1.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound1.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound1.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound1.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound1.getRefractiveIndexat298_15K(), 0.01);
      assertNull(compound1.getSmiles());
      assertEquals(0.0, compound1.getM_Twu(), 0.01);
      assertEquals(0.0, compound1.getN_Twu(), 0.01);
      assertEquals(0.0, compound1.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound1.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getB_YuAndLu(), 0.01);
      assertNull(compound1.getFamily());
      assertNull(compound1.toString());
      assertEquals(0.0, compound1.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound1.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound1.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound1.getName());
      assertEquals(0.0, compound1.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound1.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound1.getMeltingPoint_1atm(), 0.01);
      assertEquals(0, compound1.getDipprChemID());
      assertEquals(0.0, compound1.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getL_Twu(), 0.01);
      assertEquals(0.0, compound1.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound1.getB_Soave(), 0.01);
      assertEquals(0.0, compound1.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound1.getA_Soave(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(274.442735, compound1.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getA_dippr107Cp(), 0.01);
      assertNull(compound1.getStructure());
      assertEquals(0.0, compound1.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound1.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound1.getSubFamily());
      assertNull(compound1.getCasNumber());
      assertEquals(0.0, compound1.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(274.442735, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      heterogeneousSubstance0.saturationPressure();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      ArrayList<ExperimentalData> arrayList0 = new ArrayList<ExperimentalData>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      heterogeneousSubstance0.optimizeTo(arrayList0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Compound compound0 = heterogeneousSubstance0.getComponent();
      assertNull(compound0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.saturationPressure(2369.68156);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      ArrayList<ExperimentalData> arrayList0 = new ArrayList<ExperimentalData>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      heterogeneousSubstance0.optimizeTo(arrayList0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.dewPressureImpl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      
      UnitAlpha unitAlpha0 = new UnitAlpha();
      assertNotNull(unitAlpha0);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      
      String string0 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string0);
      assertNotNull(string0);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      
      String string1 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string1);
      assertNotNull(string1);
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      
      cubic0.setOmega_a(1108.9267293);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      
      Compound compound0 = new Compound("r<7<IkTj1");
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, unitAlpha0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      compound0.setSubFamily("alpha(T) = 1");
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      cubic0.setW(1108.9267293);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      
      Long long0 = new Long(2974L);
      assertEquals(2974L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("IVP", long0);
      assertEquals(2974L, (long)long1);
      assertNotNull(long1);
      
      compound0.setId(long1);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      
      Phase phase0 = Phase.VAPOR;
      double double0 = cubic0.calculateFugacityCoefficient(1789.37966, 0.0, 1789.37966, (-1540.858344159), 8314.472, 1108.9267293, phase0);
      assertEquals(Double.NaN, double0, 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      
      compound0.setB_Soave((-1540.858344159));
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      
      int int0 = heterogeneousSubstance0.dewPressure((-1464.45));
      assertEquals(1000, int0);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals("r<7<iktj1", compound0.toString());
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      YuAndLu yuAndLu0 = new YuAndLu();
      assertNotNull(yuAndLu0);
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      
      ExperimentalDataList experimentalDataList0 = new ExperimentalDataList();
      assertNotNull(experimentalDataList0);
      assertNull(experimentalDataList0.getName());
      assertNull(experimentalDataList0.getSource());
      assertNull(experimentalDataList0.getId());
      
      Compound compound0 = experimentalDataList0.getComponent();
      assertNull(compound0);
      assertNull(experimentalDataList0.getName());
      assertNull(experimentalDataList0.getSource());
      assertNull(experimentalDataList0.getId());
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, yuAndLu0, (Compound) null);
      assertNotNull(heterogeneousSubstance0);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(3, yuAndLu0.numberOfParameters());
      assertNull(yuAndLu0.toString());
      assertNull(yuAndLu0.getName());
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.HeterogeneousSubstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.HeterogeneousSubstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      YuAndLuAboveTc yuAndLuAboveTc0 = new YuAndLuAboveTc();
      assertNotNull(yuAndLuAboveTc0);
      assertEquals(3, yuAndLuAboveTc0.numberOfParameters());
      assertNull(yuAndLuAboveTc0.getName());
      assertNull(yuAndLuAboveTc0.toString());
      
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      assertNotNull(vDWMixingRule0);
      assertEquals("Van Der Waals", vDWMixingRule0.getName());
      assertEquals("Van Der Waals", vDWMixingRule0.toString());
      assertEquals(1, vDWMixingRule0.numberOfParameters());
      
      Mixture mixture0 = new Mixture();
      assertNotNull(mixture0);
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
      assertNull(mixture0.getPhase());
      assertEquals(0.0, mixture0.getPressure(), 0.01);
      assertEquals("  g = h - T * s", mixture0.gibbsLatexEquation());
      
      HashSet<Compound> hashSet0 = mixture0.getComponents();
      assertNotNull(hashSet0);
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
      assertNull(mixture0.getPhase());
      assertEquals(0.0, mixture0.getPressure(), 0.01);
      assertEquals("  g = h - T * s", mixture0.gibbsLatexEquation());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      HeterogeneousSubstance.BubbleTemperatureErrorFunction heterogeneousSubstance_BubbleTemperatureErrorFunction0 = heterogeneousSubstance0.new BubbleTemperatureErrorFunction();
      assertNotNull(heterogeneousSubstance_BubbleTemperatureErrorFunction0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      double double0 = heterogeneousSubstance_BubbleTemperatureErrorFunction0.newVariableFunction((-1.0), (-0.2697992172066988), 2750.6, (-1.0));
      assertEquals((-0.2698708336822068), double0, 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      Soave2Parameters soave2Parameters0 = new Soave2Parameters();
      assertNotNull(soave2Parameters0);
      assertNull(soave2Parameters0.toString());
      assertNull(soave2Parameters0.getName());
      assertEquals(2, soave2Parameters0.numberOfParameters());
      
      heterogeneousSubstance0.setAlpha(yuAndLuAboveTc0);
      assertEquals(3, yuAndLuAboveTc0.numberOfParameters());
      assertNull(yuAndLuAboveTc0.getName());
      assertNull(yuAndLuAboveTc0.toString());
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      Substance substance0 = heterogeneousSubstance0.getLiquid();
      assertNotNull(substance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(Phase.LIQUID, substance0.getPhase());
      assertEquals(1.0, substance0.getMolarFraction(), 0.01);
      assertEquals(0.0, substance0.getPressure(), 0.01);
      assertEquals("  g = h - T * s", substance0.gibbsLatexEquation());
      assertEquals(0.0, substance0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      cubic0.setOmega_b((-78.0));
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      Compound compound1 = new Compound();
      assertTrue(compound1.equals((Object)compound0));
      assertNotNull(compound1);
      assertEquals(0.0, compound1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound1.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getFlashPoint(), 0.01);
      assertEquals(0.0, compound1.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound1.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getB_Soave(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound1.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound1.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound1.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound1.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound1.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound1.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound1.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound1.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getN_Twu(), 0.01);
      assertEquals(0.0, compound1.getE_PolinomialCp(), 0.01);
      assertNull(compound1.getFormula());
      assertEquals(0.0, compound1.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getDipoleMoment(), 0.01);
      assertNull(compound1.toString());
      assertEquals(0.0, compound1.getC_dippr107Cp(), 0.01);
      assertEquals(0, compound1.getDipprChemID());
      assertEquals(0.0, compound1.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getM_Twu(), 0.01);
      assertEquals(0.0, compound1.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound1.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getB_dippr107Cp(), 0.01);
      assertNull(compound1.getSmiles());
      assertEquals(0.0, compound1.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getC_PolinomialCp(), 0.01);
      assertNull(compound1.getStructure());
      assertEquals(0.0, compound1.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getB_YuAndLu(), 0.01);
      assertNull(compound1.getFamily());
      assertEquals(0.0, compound1.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound1.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getL_Twu(), 0.01);
      assertEquals(0.0, compound1.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound1.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound1.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound1.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound1.getVanderWaalsArea(), 0.01);
      assertNull(compound1.getName());
      assertNull(compound1.getStandardState());
      assertEquals(0.0, compound1.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getK_StryjekAndVera(), 0.01);
      assertNull(compound1.getSubFamily());
      assertEquals(0.0, compound1.getA_Mathias(), 0.01);
      assertEquals(0.0, compound1.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound1.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound1.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound1.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound1.getA_Soave(), 0.01);
      assertNull(compound1.getId());
      assertEquals(0.0, compound1.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound1.getCasNumber());
      assertEquals(0.0, compound1.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getC_YuAndLu(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance1 = new HeterogeneousSubstance(cubic0, twuEquation0, compound1);
      assertTrue(compound1.equals((Object)compound0));
      assertTrue(heterogeneousSubstance1.equals((Object)heterogeneousSubstance0));
      assertNotNull(heterogeneousSubstance1);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound1.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getFlashPoint(), 0.01);
      assertEquals(0.0, compound1.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound1.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getB_Soave(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound1.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound1.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound1.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound1.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound1.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound1.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound1.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound1.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getN_Twu(), 0.01);
      assertEquals(0.0, compound1.getE_PolinomialCp(), 0.01);
      assertNull(compound1.getFormula());
      assertEquals(0.0, compound1.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getDipoleMoment(), 0.01);
      assertNull(compound1.toString());
      assertEquals(0.0, compound1.getC_dippr107Cp(), 0.01);
      assertEquals(0, compound1.getDipprChemID());
      assertEquals(0.0, compound1.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getM_Twu(), 0.01);
      assertEquals(0.0, compound1.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound1.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getB_dippr107Cp(), 0.01);
      assertNull(compound1.getSmiles());
      assertEquals(0.0, compound1.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getC_PolinomialCp(), 0.01);
      assertNull(compound1.getStructure());
      assertEquals(0.0, compound1.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getB_YuAndLu(), 0.01);
      assertNull(compound1.getFamily());
      assertEquals(0.0, compound1.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound1.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getL_Twu(), 0.01);
      assertEquals(0.0, compound1.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound1.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound1.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound1.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound1.getVanderWaalsArea(), 0.01);
      assertNull(compound1.getName());
      assertNull(compound1.getStandardState());
      assertEquals(0.0, compound1.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getK_StryjekAndVera(), 0.01);
      assertNull(compound1.getSubFamily());
      assertEquals(0.0, compound1.getA_Mathias(), 0.01);
      assertEquals(0.0, compound1.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound1.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound1.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound1.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound1.getA_Soave(), 0.01);
      assertNull(compound1.getId());
      assertEquals(0.0, compound1.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound1.getCasNumber());
      assertEquals(0.0, compound1.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getC_YuAndLu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance1.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance1.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance1.getPressure(), 0.01);
      
      Substance substance0 = heterogeneousSubstance1.getVapor();
      assertTrue(compound1.equals((Object)compound0));
      assertTrue(heterogeneousSubstance1.equals((Object)heterogeneousSubstance0));
      assertNotNull(substance0);
      assertNotSame(compound1, compound0);
      assertNotSame(heterogeneousSubstance1, heterogeneousSubstance0);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound1.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getFlashPoint(), 0.01);
      assertEquals(0.0, compound1.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound1.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getB_Soave(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound1.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound1.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound1.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound1.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound1.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound1.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound1.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound1.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getN_Twu(), 0.01);
      assertEquals(0.0, compound1.getE_PolinomialCp(), 0.01);
      assertNull(compound1.getFormula());
      assertEquals(0.0, compound1.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getDipoleMoment(), 0.01);
      assertNull(compound1.toString());
      assertEquals(0.0, compound1.getC_dippr107Cp(), 0.01);
      assertEquals(0, compound1.getDipprChemID());
      assertEquals(0.0, compound1.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getM_Twu(), 0.01);
      assertEquals(0.0, compound1.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound1.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getB_dippr107Cp(), 0.01);
      assertNull(compound1.getSmiles());
      assertEquals(0.0, compound1.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getC_PolinomialCp(), 0.01);
      assertNull(compound1.getStructure());
      assertEquals(0.0, compound1.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getB_YuAndLu(), 0.01);
      assertNull(compound1.getFamily());
      assertEquals(0.0, compound1.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound1.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getL_Twu(), 0.01);
      assertEquals(0.0, compound1.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound1.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound1.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound1.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound1.getVanderWaalsArea(), 0.01);
      assertNull(compound1.getName());
      assertNull(compound1.getStandardState());
      assertEquals(0.0, compound1.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getK_StryjekAndVera(), 0.01);
      assertNull(compound1.getSubFamily());
      assertEquals(0.0, compound1.getA_Mathias(), 0.01);
      assertEquals(0.0, compound1.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound1.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound1.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound1.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound1.getA_Soave(), 0.01);
      assertNull(compound1.getId());
      assertEquals(0.0, compound1.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound1.getCasNumber());
      assertEquals(0.0, compound1.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getC_YuAndLu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance1.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance1.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance1.getPressure(), 0.01);
      assertEquals(Phase.VAPOR, substance0.getPhase());
      assertEquals(Double.NaN, substance0.calculate_b_cubicParameter(), 0.01);
      assertEquals(0.0, substance0.getTemperature(), 0.01);
      assertEquals(Double.NaN, substance0.calculatetAcentricFactorBasedVaporPressure(), 0.01);
      assertEquals("  g = h - T * s", substance0.gibbsLatexEquation());
      assertEquals(1.0, substance0.getMolarFraction(), 0.01);
      assertEquals(0.0, substance0.getPressure(), 0.01);
      
      PropertyChangeSupport propertyChangeSupport0 = substance0.mpcs;
      assertNotNull(propertyChangeSupport0);
      
      heterogeneousSubstance0.mpcs = propertyChangeSupport0;
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, compound1.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound1.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getFlashPoint(), 0.01);
      assertEquals(0.0, compound1.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound1.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getB_Soave(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound1.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound1.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound1.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound1.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound1.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound1.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound1.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound1.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound1.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound1.getN_Twu(), 0.01);
      assertEquals(0.0, compound1.getE_PolinomialCp(), 0.01);
      assertNull(compound1.getFormula());
      assertEquals(0.0, compound1.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getDipoleMoment(), 0.01);
      assertNull(compound1.toString());
      assertEquals(0.0, compound1.getC_dippr107Cp(), 0.01);
      assertEquals(0, compound1.getDipprChemID());
      assertEquals(0.0, compound1.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound1.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound1.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getM_Twu(), 0.01);
      assertEquals(0.0, compound1.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound1.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getB_dippr107Cp(), 0.01);
      assertNull(compound1.getSmiles());
      assertEquals(0.0, compound1.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getC_PolinomialCp(), 0.01);
      assertNull(compound1.getStructure());
      assertEquals(0.0, compound1.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound1.getB_YuAndLu(), 0.01);
      assertNull(compound1.getFamily());
      assertEquals(0.0, compound1.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound1.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound1.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getL_Twu(), 0.01);
      assertEquals(0.0, compound1.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound1.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound1.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound1.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound1.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound1.getVanderWaalsArea(), 0.01);
      assertNull(compound1.getName());
      assertNull(compound1.getStandardState());
      assertEquals(0.0, compound1.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound1.getK_StryjekAndVera(), 0.01);
      assertNull(compound1.getSubFamily());
      assertEquals(0.0, compound1.getA_Mathias(), 0.01);
      assertEquals(0.0, compound1.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound1.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound1.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound1.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound1.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound1.getA_Soave(), 0.01);
      assertNull(compound1.getId());
      assertEquals(0.0, compound1.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound1.getCasNumber());
      assertEquals(0.0, compound1.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound1.getC_YuAndLu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance1.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance1.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance1.getPressure(), 0.01);
      assertEquals(Phase.VAPOR, substance0.getPhase());
      assertEquals(Double.NaN, substance0.calculate_b_cubicParameter(), 0.01);
      assertEquals(0.0, substance0.getTemperature(), 0.01);
      assertEquals(Double.NaN, substance0.calculatetAcentricFactorBasedVaporPressure(), 0.01);
      assertEquals("  g = h - T * s", substance0.gibbsLatexEquation());
      assertEquals(1.0, substance0.getMolarFraction(), 0.01);
      assertEquals(0.0, substance0.getPressure(), 0.01);
      
      heterogeneousSubstance0.temperature = 1.0;
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      String string0 = twuEquation0.getEquation();
      assertEquals("\\alpha(T) = T_r^{N(M-1)}e^{L\\left( 1-T_r^{NM} \\right)}", string0);
      assertNotNull(string0);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      
      cubic0.setName("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}");
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      
      twuEquation0.setEquation((String) null);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      
      compound0.setEnthalpyofFormationofIdealgasat298_15Kand101325Pa(1.0);
      assertFalse(compound0.equals((Object)compound1));
      assertNotSame(compound0, compound1);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(1.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      
      int int0 = heterogeneousSubstance0.bubblePressureImpl();
      assertEquals(1000, int0);
      assertFalse(compound0.equals((Object)compound1));
      assertFalse(heterogeneousSubstance0.equals((Object)heterogeneousSubstance1));
      assertNotSame(compound0, compound1);
      assertNotSame(heterogeneousSubstance0, heterogeneousSubstance1);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(1.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      cubic0.setCriticalCompressibilityFactor(1.0);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(1.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      
      int int1 = heterogeneousSubstance0.bubbleTemperatureImpl();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(compound0.equals((Object)compound1));
      assertFalse(heterogeneousSubstance0.equals((Object)heterogeneousSubstance1));
      assertNotSame(compound0, compound1);
      assertNotSame(heterogeneousSubstance0, heterogeneousSubstance1);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(1.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(1.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      
      // Undeclared exception!
      heterogeneousSubstance0.bubblePressure(1.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.temperatureEstimate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      ArrayList<ExperimentalData> arrayList0 = new ArrayList<ExperimentalData>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.temperatureEstimate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubbleTemperature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.saturationTemperature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      
      TwoEquationsAlphaExpression twoEquationsAlphaExpression0 = new TwoEquationsAlphaExpression();
      assertNotNull(twoEquationsAlphaExpression0);
      assertNull(twoEquationsAlphaExpression0.getName());
      assertNull(twoEquationsAlphaExpression0.toString());
      
      Alpha alpha0 = twoEquationsAlphaExpression0.getAlphaAboveTc();
      assertNull(alpha0);
      assertNull(twoEquationsAlphaExpression0.getName());
      assertNull(twoEquationsAlphaExpression0.toString());
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, (Alpha) null, (Compound) null);
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.saturationTemperature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertNull(compound0.getSmiles());
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      
      TwoEquationsAlphaExpression twoEquationsAlphaExpression0 = new TwoEquationsAlphaExpression();
      assertNotNull(twoEquationsAlphaExpression0);
      assertNull(twoEquationsAlphaExpression0.getName());
      assertNull(twoEquationsAlphaExpression0.toString());
      
      HeterogeneousSubstance heterogeneousSubstance0 = null;
      try {
        heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twoEquationsAlphaExpression0, compound0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.eos.alpha.TwoEquationsAlphaExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertNull(twuEquation0.getName());
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.setComponent(compound0);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.dewTemperature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      ExperimentalData experimentalData0 = new ExperimentalData();
      assertNotNull(experimentalData0);
      assertEquals(0.0, experimentalData0.getPressure(), 0.01);
      assertNull(experimentalData0.getId());
      assertEquals(0.0, experimentalData0.getTemperature(), 0.01);
      
      boolean boolean0 = heterogeneousSubstance0.equals(experimentalData0);
      assertFalse(boolean0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, experimentalData0.getPressure(), 0.01);
      assertNull(experimentalData0.getId());
      assertEquals(0.0, experimentalData0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      UnitAlpha unitAlpha0 = new UnitAlpha();
      assertNotNull(unitAlpha0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      
      String string0 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string0);
      assertNotNull(string0);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      
      String string1 = unitAlpha0.getEquation();
      assertEquals("\\alpha(T) = 1", string1);
      assertNotNull(string1);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      
      cubic0.setOmega_a(1108.9267293);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      Compound compound0 = new Compound("r<7<IkTj1");
      assertNotNull(compound0);
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, unitAlpha0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      compound0.setSubFamily("alpha(T) = 1");
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      cubic0.setW(1108.9267293);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      
      Long long0 = new Long(2974L);
      assertEquals(2974L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("IVP", long0);
      assertEquals(2974L, (long)long1);
      assertNotNull(long1);
      
      compound0.setId(long1);
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      
      Phase phase0 = Phase.VAPOR;
      double double0 = cubic0.calculateFugacityCoefficient(1789.37966, 0.0, 1789.37966, (-1540.858344159), 8314.472, 1108.9267293, phase0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      
      compound0.setB_Soave((-1540.858344159));
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      
      boolean boolean0 = heterogeneousSubstance0.equals(object0);
      assertFalse(boolean0);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      double double1 = heterogeneousSubstance0.equilibriaRelation(1.235, 1.235);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(1.235, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(1.235, heterogeneousSubstance0.getPressure(), 0.01);
      
      heterogeneousSubstance0.setAlpha(unitAlpha0);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(1.235, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(1.235, heterogeneousSubstance0.getPressure(), 0.01);
      
      heterogeneousSubstance0.setComponent(compound0);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(1108.9267293, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.getName());
      assertEquals(1108.9267293, cubic0.getOmega_a(), 0.01);
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.toString());
      assertEquals("Expresi\u00F3n independiente de T (Van Der Waals", unitAlpha0.getName());
      assertEquals(0, unitAlpha0.numberOfParameters());
      assertEquals("alpha(T) = 1", compound0.getSubFamily());
      assertEquals("r<7<iktj1", compound0.toString());
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals("r<7<iktj1", compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals((-1540.858344159), compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(2974L, (long)compound0.getId());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(1.235, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(1.235, heterogeneousSubstance0.getPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.dewPressure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStructure());
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      
      MathiasAlpha mathiasAlpha0 = new MathiasAlpha();
      assertNotNull(mathiasAlpha0);
      assertEquals("Mathias", mathiasAlpha0.getName());
      assertEquals((-0.15613), mathiasAlpha0.getR3(), 0.01);
      assertEquals((-1.0), mathiasAlpha0.getX(), 0.01);
      assertEquals(0.0, mathiasAlpha0.getR4(), 0.01);
      assertEquals(0.48508, mathiasAlpha0.getR1(), 0.01);
      assertEquals(1, mathiasAlpha0.numberOfParameters());
      assertEquals("Mathias", mathiasAlpha0.toString());
      assertEquals(1.55191, mathiasAlpha0.getR2(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, mathiasAlpha0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertNull(compound0.getStructure());
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals("Mathias", mathiasAlpha0.getName());
      assertEquals((-0.15613), mathiasAlpha0.getR3(), 0.01);
      assertEquals((-1.0), mathiasAlpha0.getX(), 0.01);
      assertEquals(0.0, mathiasAlpha0.getR4(), 0.01);
      assertEquals(0.48508, mathiasAlpha0.getR1(), 0.01);
      assertEquals(1, mathiasAlpha0.numberOfParameters());
      assertEquals("Mathias", mathiasAlpha0.toString());
      assertEquals(1.55191, mathiasAlpha0.getR2(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      // Undeclared exception!
      heterogeneousSubstance0.bubblePressure(1.0E-5);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      int int0 = heterogeneousSubstance0.dewTemperature();
      assertEquals(1, int0);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      int int0 = heterogeneousSubstance0.bubbleTemperature();
      assertEquals(1, int0);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      
      cubic0.setOmega_b((-78.0));
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      heterogeneousSubstance0.temperature = 1.0;
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      String string0 = twuEquation0.getEquation();
      assertEquals("\\alpha(T) = T_r^{N(M-1)}e^{L\\left( 1-T_r^{NM} \\right)}", string0);
      assertNotNull(string0);
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      
      cubic0.setName("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}");
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertTrue(cubic0.isCubic());
      
      twuEquation0.setEquation((String) null);
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      
      compound0.setEnthalpyofFormationofIdealgasat298_15Kand101325Pa(1.0);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(1.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      
      int int0 = heterogeneousSubstance0.bubblePressureImpl();
      assertEquals(1000, int0);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertTrue(cubic0.isCubic());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(1.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(1.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      cubic0.setCriticalCompressibilityFactor(1.0);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals(1.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertTrue(cubic0.isCubic());
      
      int int1 = heterogeneousSubstance0.bubbleTemperatureImpl();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertEquals((-78.0), cubic0.getOmega_b(), 0.01);
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.toString());
      assertEquals("alpha(T) = T_r^{N(M-1)}e^{Lleft( 1-T_r^{NM} \right)}", cubic0.getName());
      assertEquals(1.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertTrue(cubic0.isCubic());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(1.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getTemperature(), 0.01);
      
      // Undeclared exception!
      heterogeneousSubstance0.bubblePressure(1.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubbleTemperatureImpl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      
      double double0 = 2.0;
      cubic0.setOmega_a(2.0);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(2.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      
      double double1 = 2.0943951023931953;
      cubic0.setU(2.0943951023931953);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(2.0943951023931953, cubic0.getU(), 0.01);
      assertEquals(2.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      
      TwoEquationsAlphaExpression twoEquationsAlphaExpression0 = new TwoEquationsAlphaExpression();
      assertNotNull(twoEquationsAlphaExpression0);
      assertNull(twoEquationsAlphaExpression0.getName());
      assertNull(twoEquationsAlphaExpression0.toString());
      
      Alpha alpha0 = twoEquationsAlphaExpression0.getAlphaBelowTc();
      assertNull(alpha0);
      assertNull(twoEquationsAlphaExpression0.getName());
      assertNull(twoEquationsAlphaExpression0.toString());
      
      ExperimentalDataBinaryList experimentalDataBinaryList0 = new ExperimentalDataBinaryList();
      assertNotNull(experimentalDataBinaryList0);
      assertNull(experimentalDataBinaryList0.getId());
      assertEquals(ExperimentalDataBinaryType.isobaric, experimentalDataBinaryList0.getType());
      assertNull(experimentalDataBinaryList0.getSource());
      assertNull(experimentalDataBinaryList0.getName());
      assertNull(experimentalDataBinaryList0.toString());
      
      Compound compound0 = experimentalDataBinaryList0.getNonReferenceComponent();
      assertNull(compound0);
      assertNull(experimentalDataBinaryList0.getId());
      assertEquals(ExperimentalDataBinaryType.isobaric, experimentalDataBinaryList0.getType());
      assertNull(experimentalDataBinaryList0.getSource());
      assertNull(experimentalDataBinaryList0.getName());
      assertNull(experimentalDataBinaryList0.toString());
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, (Alpha) null, (Compound) null);
      assertNotNull(heterogeneousSubstance0);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(2.0943951023931953, cubic0.getU(), 0.01);
      assertEquals(2.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.dewTemperatureEstimate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.dewTemperatureEstimate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.dewPressureEstimate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertTrue(cubic0.isCubic());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertNull(cubic0.toString());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getU(), 0.01);
      
      YuAndLuAboveTc yuAndLuAboveTc0 = new YuAndLuAboveTc();
      assertNotNull(yuAndLuAboveTc0);
      assertNull(yuAndLuAboveTc0.toString());
      assertEquals(3, yuAndLuAboveTc0.numberOfParameters());
      assertNull(yuAndLuAboveTc0.getName());
      
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      assertNotNull(vDWMixingRule0);
      assertEquals(1, vDWMixingRule0.numberOfParameters());
      assertEquals("Van Der Waals", vDWMixingRule0.toString());
      assertEquals("Van Der Waals", vDWMixingRule0.getName());
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.dewPressureEstimate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      TwoEquationsAlphaExpression twoEquationsAlphaExpression0 = new TwoEquationsAlphaExpression();
      assertNotNull(twoEquationsAlphaExpression0);
      assertNull(twoEquationsAlphaExpression0.toString());
      assertNull(twoEquationsAlphaExpression0.getName());
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.setAlpha(twoEquationsAlphaExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.eos.alpha.TwoEquationsAlphaExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubbleTemperatureEstimate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      
      YuAndLuAboveTc yuAndLuAboveTc0 = new YuAndLuAboveTc();
      assertNotNull(yuAndLuAboveTc0);
      assertEquals(3, yuAndLuAboveTc0.numberOfParameters());
      assertNull(yuAndLuAboveTc0.toString());
      assertNull(yuAndLuAboveTc0.getName());
      
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      assertNotNull(vDWMixingRule0);
      assertEquals("Van Der Waals", vDWMixingRule0.toString());
      assertEquals("Van Der Waals", vDWMixingRule0.getName());
      assertEquals(1, vDWMixingRule0.numberOfParameters());
      
      Mixture mixture0 = new Mixture();
      assertNotNull(mixture0);
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
      assertNull(mixture0.getPhase());
      assertEquals(0.0, mixture0.getPressure(), 0.01);
      assertEquals("  g = h - T * s", mixture0.gibbsLatexEquation());
      
      HashSet<Compound> hashSet0 = mixture0.getComponents();
      assertNotNull(hashSet0);
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
      assertNull(mixture0.getPhase());
      assertEquals(0.0, mixture0.getPressure(), 0.01);
      assertEquals("  g = h - T * s", mixture0.gibbsLatexEquation());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      InteractionParameter interactionParameter0 = new InteractionParameter(true);
      assertNotNull(interactionParameter0);
      assertTrue(interactionParameter0.isSymmetric());
      
      HeterogeneousMixture heterogeneousMixture0 = new HeterogeneousMixture(cubic0, yuAndLuAboveTc0, vDWMixingRule0, hashSet0, interactionParameter0);
      assertNotNull(heterogeneousMixture0);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(3, yuAndLuAboveTc0.numberOfParameters());
      assertNull(yuAndLuAboveTc0.toString());
      assertNull(yuAndLuAboveTc0.getName());
      assertEquals("Van Der Waals", vDWMixingRule0.toString());
      assertEquals("Van Der Waals", vDWMixingRule0.getName());
      assertEquals(1, vDWMixingRule0.numberOfParameters());
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
      assertNull(mixture0.getPhase());
      assertEquals(0.0, mixture0.getPressure(), 0.01);
      assertEquals("  g = h - T * s", mixture0.gibbsLatexEquation());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(interactionParameter0.isSymmetric());
      assertEquals(0.0, heterogeneousMixture0.getPressure(), 0.01);
      assertEquals(100, (int)heterogeneousMixture0.getMaxIterations());
      assertEquals(0.0, heterogeneousMixture0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousMixture0.getvF(), 0.01);
      
      MixtureErrorFunction mixtureErrorFunction0 = heterogeneousMixture0.getErrorfunction();
      assertNotNull(mixtureErrorFunction0);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(3, yuAndLuAboveTc0.numberOfParameters());
      assertNull(yuAndLuAboveTc0.toString());
      assertNull(yuAndLuAboveTc0.getName());
      assertEquals("Van Der Waals", vDWMixingRule0.toString());
      assertEquals("Van Der Waals", vDWMixingRule0.getName());
      assertEquals(1, vDWMixingRule0.numberOfParameters());
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
      assertNull(mixture0.getPhase());
      assertEquals(0.0, mixture0.getPressure(), 0.01);
      assertEquals("  g = h - T * s", mixture0.gibbsLatexEquation());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(interactionParameter0.isSymmetric());
      assertEquals(0.0, heterogeneousMixture0.getPressure(), 0.01);
      assertEquals(100, (int)heterogeneousMixture0.getMaxIterations());
      assertEquals(0.0, heterogeneousMixture0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousMixture0.getvF(), 0.01);
      
      Compound compound0 = mixtureErrorFunction0.getReferenceComponent();
      assertNull(compound0);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(3, yuAndLuAboveTc0.numberOfParameters());
      assertNull(yuAndLuAboveTc0.toString());
      assertNull(yuAndLuAboveTc0.getName());
      assertEquals("Van Der Waals", vDWMixingRule0.toString());
      assertEquals("Van Der Waals", vDWMixingRule0.getName());
      assertEquals(1, vDWMixingRule0.numberOfParameters());
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
      assertNull(mixture0.getPhase());
      assertEquals(0.0, mixture0.getPressure(), 0.01);
      assertEquals("  g = h - T * s", mixture0.gibbsLatexEquation());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(interactionParameter0.isSymmetric());
      assertEquals(0.0, heterogeneousMixture0.getPressure(), 0.01);
      assertEquals(100, (int)heterogeneousMixture0.getMaxIterations());
      assertEquals(0.0, heterogeneousMixture0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousMixture0.getvF(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, yuAndLuAboveTc0, (Compound) null);
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.toString());
      assertNull(cubic0.getName());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(3, yuAndLuAboveTc0.numberOfParameters());
      assertNull(yuAndLuAboveTc0.toString());
      assertNull(yuAndLuAboveTc0.getName());
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubbleTemperatureEstimate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubblePressure((-71.36));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubblePressure((-490.284207));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.setErrorFunction((VaporPressureErrorFunction) null);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.saturationPressure((-1722.80089));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      VaporPressureErrorFunction vaporPressureErrorFunction0 = new VaporPressureErrorFunction(heterogeneousSubstance0);
      assertNotNull(vaporPressureErrorFunction0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      heterogeneousSubstance0.setErrorFunction(vaporPressureErrorFunction0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      VaporPressureErrorFunction vaporPressureErrorFunction1 = heterogeneousSubstance0.getErrorFunction();
      assertNotNull(vaporPressureErrorFunction1);
      assertSame(vaporPressureErrorFunction1, vaporPressureErrorFunction0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertNull(compound0.getStandardState());
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      heterogeneousSubstance0.calculateVF();
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.getName());
      assertTrue(cubic0.isCubic());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.toString());
      assertNull(twuEquation0.getName());
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertNull(compound0.getStandardState());
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      // Undeclared exception!
      heterogeneousSubstance0.saturationPressure();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.equilibriaRelation(1.0E-5, 1.0E-5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      assertNotNull(heterogeneousSubstance0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      
      Compound compound0 = heterogeneousSubstance0.getComponent();
      assertNull(compound0);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      assertNotNull(cubic0);
      assertNull(cubic0.getName());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getW(), 0.01);
      
      TwuEquation twuEquation0 = new TwuEquation();
      assertNotNull(twuEquation0);
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      
      Compound compound0 = new Compound();
      assertNotNull(compound0);
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, compound0);
      assertNotNull(heterogeneousSubstance0);
      assertNull(cubic0.getName());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getPressure(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      
      int int0 = heterogeneousSubstance0.saturationPressure();
      assertEquals(1000, int0);
      assertNull(cubic0.getName());
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic0.a_cubicParameterLatexEquation());
      assertEquals(0.0, cubic0.getOmega_b(), 0.01);
      assertTrue(cubic0.isCubic());
      assertEquals("P = \\frac{RT}{v - b} - \\frac{a} { v^2 + u b v + w b^2}", cubic0.getEquation());
      assertEquals(0.0, cubic0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, cubic0.getOmega_a(), 0.01);
      assertEquals(0.0, cubic0.getU(), 0.01);
      assertNull(cubic0.toString());
      assertEquals(0.0, cubic0.getW(), 0.01);
      assertNull(twuEquation0.toString());
      assertEquals(3, twuEquation0.numberOfParameters());
      assertNull(twuEquation0.getName());
      assertEquals(0.0, compound0.getB_Soave(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getA_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getM_Twu(), 0.01);
      assertEquals(0.0, compound0.getLiquidMolarVolumeat298_15K(), 0.01);
      assertEquals(0.0, compound0.getCriticalPressure(), 0.01);
      assertEquals(0.0, compound0.getLowerFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Soave(), 0.01);
      assertNull(compound0.getSmiles());
      assertEquals(0.0, compound0.getB_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getRefractiveIndexat298_15K(), 0.01);
      assertEquals(0.0, compound0.getFlashPoint(), 0.01);
      assertEquals(0.0, compound0.getMeltingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getCriticalCompressibilityFactor(), 0.01);
      assertEquals(0.0, compound0.getNetEnthalpyofCombustionStandardState298_15K(), 0.01);
      assertEquals(0.0, compound0.getE_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyorHeatofSublimation(), 0.01);
      assertEquals(0.0, compound0.getB_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getA_AdachiAndLu(), 0.01);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getCriticalTemperature(), 0.01);
      assertEquals(0.0, compound0.getB_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_dippr107Cp(), 0.01);
      assertNull(compound0.getSubFamily());
      assertEquals(0.0, compound0.getSolubilityParameterat298_15K(), 0.01);
      assertNull(compound0.getId());
      assertEquals(0.0, compound0.getEnthalpyofFormationofIdealgasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getTriplePointPressure(), 0.01);
      assertEquals(0.0, compound0.getK_StryjekAndVera(), 0.01);
      assertEquals(0.0, compound0.getA_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getC_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getR_UNIQUAC(), 0.01);
      assertNull(compound0.getStructure());
      assertEquals(0.0, compound0.getAutoIgnitionTermperature(), 0.01);
      assertNull(compound0.getCasNumber());
      assertEquals(0.0, compound0.getDielectricConstant(), 0.01);
      assertEquals(0.0, compound0.getA_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getEnthalpyofFusionatMeltingPoint(), 0.01);
      assertEquals(0.0, compound0.getB_Mathias_Copeman(), 0.01);
      assertEquals(0.0, compound0.getDipoleMoment(), 0.01);
      assertEquals(0.0, compound0.getVanderWaalsArea(), 0.01);
      assertEquals(0.0, compound0.getRadiusofGyration(), 0.01);
      assertNull(compound0.getName());
      assertEquals(0.0, compound0.getA_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getL_Twu(), 0.01);
      assertEquals(0.0, compound0.getC_PolinomialCp(), 0.01);
      assertNull(compound0.getFormula());
      assertNull(compound0.getStandardState());
      assertEquals(0.0, compound0.getTriplePointTemperature(), 0.01);
      assertEquals(0.0, compound0.getA_Mathias(), 0.01);
      assertEquals(0.0, compound0.getB_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getMolecularWeight(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimitTemperature(), 0.01);
      assertEquals(0.0, compound0.getUpperFlammabilityLimit(), 0.01);
      assertEquals(0.0, compound0.getCriticalVolume(), 0.01);
      assertEquals(0.0, compound0.getC_AndroulakisEtAl(), 0.01);
      assertEquals(0.0, compound0.getGibbsEnergyofFormationofIdealGasat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getAcentricFactor(), 0.01);
      assertEquals(0, compound0.getDipprChemID());
      assertEquals(0.0, compound0.getC_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getNormalBoilingPoint_1atm(), 0.01);
      assertEquals(0.0, compound0.getAbsoluteEntropyinStandardStateat298_15Kand101325Pa(), 0.01);
      assertEquals(0.0, compound0.getN_Twu(), 0.01);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
      assertEquals(0.0, compound0.getD_PolinomialCp(), 0.01);
      assertNull(compound0.toString());
      assertEquals(0.0, compound0.getB_YuAndLu(), 0.01);
      assertEquals(0.0, compound0.getB_dippr107Cp(), 0.01);
      assertEquals(0.0, compound0.getQ_UNIQUAC(), 0.01);
      assertEquals(0.0, compound0.getF_PolinomialCp(), 0.01);
      assertEquals(0.0, compound0.getE_PolinomialCp(), 0.01);
      assertNull(compound0.getFamily());
      assertEquals(0.0, compound0.getVanDerWaalsReducedVolume(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getTemperature(), 0.01);
      assertEquals(0.0, heterogeneousSubstance0.getvF(), 0.01);
      assertEquals(Double.NaN, heterogeneousSubstance0.getPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      YuAndLu yuAndLu0 = new YuAndLu();
      yuAndLu0.equals(cubic0);
      Compound compound0 = new Compound();
      compound0.setC_PolinomialCp((-2704.807608));
      compound0.setB_AndroulakisEtAl(274.442735);
      cubic0.setName("K5ZCeBe>FtrA8A^Ecn^");
      yuAndLu0.setEquation("K5ZCeBe>FtrA8A^Ecn^");
      compound0.setLowerFlammabilityLimitTemperature(0.0);
      yuAndLu0.getEquation();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, yuAndLu0, compound0);
      heterogeneousSubstance0.saturationPressure();
      ExperimentalData experimentalData0 = new ExperimentalData(179.7635634458, 3440.3047);
      yuAndLu0.equals(experimentalData0);
      compound0.setC_PolinomialCp(0.0);
      heterogeneousSubstance0.getVapor();
      heterogeneousSubstance0.getComponent();
      // Undeclared exception!
      heterogeneousSubstance0.saturationPressure();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      ExperimentalDataBinaryList experimentalDataBinaryList0 = new ExperimentalDataBinaryList((String) null);
      experimentalDataBinaryList0.getReferenceComponent();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, (Alpha) null, (Compound) null);
      experimentalDataBinaryList0.setName("Sm!kc#WcB");
      Alpha alpha0 = null;
      cubic0.setCriticalCompressibilityFactor(54.0);
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.dewPressureImpl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.dewPressureImpl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.saturationTemperature(13.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      ArrayList<ExperimentalData> arrayList0 = null;
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.saturationTemperature((-520.3329799046));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.saturationPressure(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.saturationPressure((-3324.130915423));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.dewPressure(2088.536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      YuAndLu yuAndLu0 = new YuAndLu();
      ExperimentalDataList experimentalDataList0 = new ExperimentalDataList();
      experimentalDataList0.getComponent();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, yuAndLu0, (Compound) null);
      experimentalDataList0.addExperimentalData((-2380.19768), (-242.872399665));
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.dewPressure(1.632);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      Object object0 = new Object();
      HeterogeneousSubstance.BubbleTemperatureErrorFunction heterogeneousSubstance_BubbleTemperatureErrorFunction0 = heterogeneousSubstance0.new BubbleTemperatureErrorFunction();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      TwuEquation twuEquation0 = new TwuEquation();
      twuEquation0.setName("");
      twuEquation0.setName("termo.eos.mixingRule.TwoParameterVanDerWaals");
      heterogeneousSubstance0.setAlpha(twuEquation0);
      HeterogeneousSubstance.BubbleTemperatureErrorFunction heterogeneousSubstance_BubbleTemperatureErrorFunction0 = heterogeneousSubstance0.new BubbleTemperatureErrorFunction();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.calculateVF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      cubic0.setOmega_b((-78.0));
      TwuEquation twuEquation0 = new TwuEquation();
      ExperimentalDataList experimentalDataList0 = new ExperimentalDataList();
      experimentalDataList0.getComponent();
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance(cubic0, twuEquation0, (Compound) null);
      experimentalDataList0.addExperimentalData((-242.872399665), (-78.0));
      HeterogeneousSubstance heterogeneousSubstance1 = new HeterogeneousSubstance();
      heterogeneousSubstance0.hashCode();
      // Undeclared exception!
      try { 
        heterogeneousSubstance1.calculateVF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      double double0 = (-2486.71);
      heterogeneousSubstance0.hashCode();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.saturationPressure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      Object object0 = new Object();
      heterogeneousSubstance0.equals(object0);
      HeterogeneousSubstance.BubbleTemperatureErrorFunction heterogeneousSubstance_BubbleTemperatureErrorFunction0 = heterogeneousSubstance0.new BubbleTemperatureErrorFunction();
      heterogeneousSubstance0.hashCode();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubblePressureImpl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      heterogeneousSubstance0.mpcs = null;
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubblePressureImpl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.dewTemperature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.calculateVF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.saturationPressure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HeterogeneousSubstance heterogeneousSubstance0 = new HeterogeneousSubstance();
      // Undeclared exception!
      try { 
        heterogeneousSubstance0.bubblePressure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }
}
