/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 04:45:12 GMT 2022
 */

package termo.matter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeEvent;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import termo.activityModel.NRTLActivityModel;
import termo.activityModel.UNIQUACActivityModel;
import termo.activityModel.VanLaarActivityModel;
import termo.activityModel.WilsonActivityModel;
import termo.binaryParameter.ActivityModelBinaryParameter;
import termo.binaryParameter.InteractionParameter;
import termo.component.Compound;
import termo.eos.Cubic;
import termo.eos.alpha.Alpha;
import termo.eos.alpha.GCEOSEquation;
import termo.eos.alpha.GeneralTwuEquation;
import termo.eos.alpha.MathiasAboveTcAlphaEquation;
import termo.eos.alpha.MelhemEtAl;
import termo.eos.alpha.Soave2Parameters;
import termo.eos.alpha.TwoEquationsAlphaExpression;
import termo.eos.alpha.TwuEquation;
import termo.eos.alpha.UnitAlpha;
import termo.eos.alpha.YuAndLu;
import termo.eos.alpha.commonaAlphaEquationsImplementation.SoaveAlpha;
import termo.eos.alpha.commonaAlphaEquationsImplementation.StryjekAndVera;
import termo.eos.mixingRule.HuronVidalMixingRule;
import termo.eos.mixingRule.HuronVidalModified2Order;
import termo.eos.mixingRule.HuronVidalOrbeySandlerModification;
import termo.eos.mixingRule.MathiasKlotzPrausnitzMixingRule;
import termo.eos.mixingRule.MixingRule;
import termo.eos.mixingRule.TwoParameterVanDerWaals;
import termo.eos.mixingRule.VDWMixingRule;
import termo.eos.mixingRule.WongSandlerMixingRule;
import termo.matter.Mixture;
import termo.matter.Substance;
import termo.phase.Phase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Mixture_ESTest extends Mixture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Cubic cubic0 = new Cubic();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Compound compound0 = new Compound("");
      linkedHashSet0.add(compound0);
      Compound compound1 = new Compound();
      linkedHashSet0.add(compound1);
      Phase phase0 = Phase.VAPOR;
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, linkedHashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      double double0 = mixture0.calculatetAcentricFactorBasedVaporPressure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Cubic cubic0 = new Cubic();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Compound compound0 = new Compound();
      linkedHashSet0.add(compound0);
      Phase phase0 = Phase.LIQUID;
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, linkedHashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      compound0.setFamily("termo.eos.alpha.TwoEquationsAlphaExpression");
      Substance substance0 = mixture0.getPureSubstance(compound0);
      mixture0.addComponent(substance0, (-381.50059));
      double double0 = mixture0.calculateIdealGasEntropy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Cubic cubic0 = new Cubic();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Compound compound0 = new Compound("");
      linkedHashSet0.add(compound0);
      Compound compound1 = new Compound();
      linkedHashSet0.add(compound1);
      Phase phase0 = Phase.VAPOR;
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, linkedHashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      double double0 = mixture0.calculateIdealGasEnthalpy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, vDWMixingRule0, activityModelBinaryParameter0);
      StryjekAndVera stryjekAndVera0 = new StryjekAndVera();
      MathiasAboveTcAlphaEquation mathiasAboveTcAlphaEquation0 = new MathiasAboveTcAlphaEquation(stryjekAndVera0);
      Compound compound0 = new Compound();
      Substance substance0 = new Substance(cubic0, mathiasAboveTcAlphaEquation0, compound0, phase0);
      double double0 = mixture0.oneOver_N_Parcial_b(substance0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      SoaveAlpha soaveAlpha0 = new SoaveAlpha();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      Compound compound0 = new Compound();
      hashSet0.add(compound0);
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      HuronVidalMixingRule huronVidalMixingRule0 = new HuronVidalMixingRule(wilsonActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, soaveAlpha0, hashSet0, phase0, huronVidalMixingRule0, activityModelBinaryParameter0);
      double double0 = mixture0.calculateFugacityCoefficient(compound0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      YuAndLu yuAndLu0 = new YuAndLu();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      Phase phase0 = Phase.LIQUID;
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      Compound compound0 = new Compound();
      hashSet0.add(compound0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, yuAndLu0, hashSet0, phase0, vDWMixingRule0, activityModelBinaryParameter0);
      double double0 = mixture0.calculateFugacity(compound0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Compound compound0 = new Compound();
      linkedHashSet0.add(compound0);
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, linkedHashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      HashMap<Compound, Double> hashMap0 = new HashMap<Compound, Double>();
      Double double0 = new Double(10.0);
      hashMap0.put(compound0, double0);
      mixture0.setFractions(hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Cubic cubic0 = new Cubic();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Compound compound0 = new Compound();
      linkedHashSet0.add(compound0);
      Phase phase0 = Phase.VAPOR;
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, linkedHashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      Double double0 = new Double(0.5);
      mixture0.setFraction(compound0, double0);
      assertEquals(0.0, compound0.getA_MelhemEtAl(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      TwoEquationsAlphaExpression twoEquationsAlphaExpression0 = new TwoEquationsAlphaExpression();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      Mixture mixture0 = new Mixture(cubic0, twoEquationsAlphaExpression0, hashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(hashSet0, "mixingRule", hashSet0, (Object) null);
      mixture0.propertyChange(propertyChangeEvent0);
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(vanLaarActivityModel0, cubic0);
      Mixture mixture0 = new Mixture(cubic0, phase0, wongSandlerMixingRule0, (InteractionParameter) null);
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(mixture0, "alpha", object0, (Object) null);
      mixture0.propertyChange(propertyChangeEvent0);
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      mixture0.pureSubstances = null;
      Set<Substance> set0 = mixture0.getPureSubstances();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      linkedHashSet0.add((Compound) null);
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, linkedHashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      Set<Substance> set0 = mixture0.getPureSubstances();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      mixture0.pressure = (-1246.2558590342);
      Compound compound0 = new Compound();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      hashSet0.add(compound0);
      mixture0.setComponents(hashSet0);
      Substance substance0 = mixture0.getPureSubstance(compound0);
      assertEquals((-1246.2558590342), substance0.getPressure(), 0.01);
      assertEquals(0.0, substance0.getTemperature(), 0.01);
      assertEquals(1.0, substance0.getMolarFraction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Compound compound0 = new Compound();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      UNIQUACActivityModel uNIQUACActivityModel0 = new UNIQUACActivityModel();
      linkedHashSet0.add(compound0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      compound0.setCriticalPressure(394.0);
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(uNIQUACActivityModel0, cubic0);
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, linkedHashSet0, phase0, wongSandlerMixingRule0, activityModelBinaryParameter0);
      Substance substance0 = mixture0.getPureSubstance(compound0);
      assertNotNull(substance0);
      assertEquals(0.0, substance0.getTemperature(), 0.01);
      assertEquals(1.0, substance0.getMolarFraction(), 0.01);
      assertEquals(0.0, substance0.getPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      UnitAlpha unitAlpha0 = new UnitAlpha();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, unitAlpha0, hashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      MixingRule mixingRule0 = mixture0.getMixingRule();
      assertNull(mixingRule0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Soave2Parameters soave2Parameters0 = new Soave2Parameters();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      Compound compound0 = new Compound();
      linkedHashSet0.add(compound0);
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      HuronVidalMixingRule huronVidalMixingRule0 = new HuronVidalMixingRule(nRTLActivityModel0, cubic0);
      Mixture mixture0 = new Mixture(cubic0, soave2Parameters0, linkedHashSet0, phase0, huronVidalMixingRule0, activityModelBinaryParameter0);
      HashMap<String, Double> hashMap0 = mixture0.getFractions();
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Compound compound0 = new Compound();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      linkedHashSet0.add(compound0);
      mixture0.setComponents(linkedHashSet0);
      Substance substance0 = mixture0.getPureSubstance(compound0);
      double double0 = mixture0.getFraction(substance0);
      assertEquals(0.0, substance0.getTemperature(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, substance0.getPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Cubic cubic0 = new Cubic();
      GCEOSEquation gCEOSEquation0 = new GCEOSEquation();
      Compound compound0 = new Compound("YJ3v>s4Q");
      Phase phase0 = Phase.LIQUID;
      Substance substance0 = new Substance(cubic0, gCEOSEquation0, compound0, phase0);
      mixture0.addComponent(substance0, (-381.50059));
      double double0 = mixture0.getFraction(substance0);
      assertEquals((-381.50059), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Cubic cubic0 = new Cubic();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(cubic0, "interactionParameters", (Object) null, (Object) null);
      mixture0.propertyChange(propertyChangeEvent0);
      InteractionParameter interactionParameter0 = mixture0.getBinaryParameters();
      assertNull(interactionParameter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      HuronVidalMixingRule huronVidalMixingRule0 = new HuronVidalMixingRule(nRTLActivityModel0, cubic0, true);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getAlpha();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalMixingRule0, interactionParameter0);
      InteractionParameter interactionParameter1 = mixture0.getBinaryParameters();
      assertTrue(interactionParameter1.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      GeneralTwuEquation generalTwuEquation0 = new GeneralTwuEquation();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, generalTwuEquation0, linkedHashSet0, phase0, vDWMixingRule0, activityModelBinaryParameter0);
      Alpha alpha0 = mixture0.getAlpha();
      assertSame(alpha0, generalTwuEquation0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      HuronVidalModified2Order huronVidalModified2Order0 = new HuronVidalModified2Order(vanLaarActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, hashSet0, phase0, huronVidalModified2Order0, activityModelBinaryParameter0);
      double double0 = mixture0.calculate_b_cubicParameter();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.setComponents((Set<Compound>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      mixture0.mpcs = null;
      // Undeclared exception!
      try { 
        mixture0.setBinaryParameters(activityModelBinaryParameter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.propertyChange((PropertyChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Homogeneous", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      Cubic cubic0 = new Cubic();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(vanLaarActivityModel0, cubic0);
      mixture0.setMixingRule(wongSandlerMixingRule0);
      // Undeclared exception!
      try { 
        mixture0.partial_aPartial_temperature();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.partial_aPartial_temperature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(wilsonActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getAlpha();
      Mixture mixture0 = new Mixture(cubic0, phase0, wongSandlerMixingRule0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.partial_aPartial_temperature();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7cc57567)
         //
         verifyException("termo.eos.mixingRule.WongSandlerMixingRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(vanLaarActivityModel0, cubic0);
      Mixture mixture0 = new Mixture(cubic0, phase0, wongSandlerMixingRule0, (InteractionParameter) null);
      MelhemEtAl melhemEtAl0 = new MelhemEtAl();
      Compound compound0 = new Compound();
      Substance substance0 = new Substance(cubic0, melhemEtAl0, compound0, phase0);
      // Undeclared exception!
      try { 
        mixture0.oneOver_N_Parcial_b(substance0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(wilsonActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getB();
      Mixture mixture0 = new Mixture(cubic0, phase0, wongSandlerMixingRule0, interactionParameter0);
      GCEOSEquation gCEOSEquation0 = new GCEOSEquation();
      Substance substance0 = new Substance(cubic0, gCEOSEquation0, (Compound) null, phase0);
      // Undeclared exception!
      try { 
        mixture0.oneOver_N_Parcial_b(substance0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7cc57567)
         //
         verifyException("termo.eos.mixingRule.WongSandlerMixingRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Cubic cubic0 = new Cubic();
      TwoEquationsAlphaExpression twoEquationsAlphaExpression0 = new TwoEquationsAlphaExpression();
      Mixture mixture0 = new Mixture();
      HashSet<Compound> hashSet0 = mixture0.getComponents();
      Phase phase0 = Phase.LIQUID;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(vanLaarActivityModel0, cubic0);
      Mixture mixture1 = new Mixture(cubic0, twoEquationsAlphaExpression0, hashSet0, phase0, wongSandlerMixingRule0, activityModelBinaryParameter0);
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        mixture1.oneOver_N_Parcial_a(substance0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      TwoParameterVanDerWaals twoParameterVanDerWaals0 = new TwoParameterVanDerWaals();
      mixture0.setMixingRule(twoParameterVanDerWaals0);
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getK();
      mixture0.setBinaryParameters(interactionParameter0);
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        mixture0.oneOver_N_Parcial_a(substance0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7cc57567)
         //
         verifyException("termo.eos.mixingRule.TwoParameterVanDerWaals", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      LinkedHashSet<Substance> linkedHashSet0 = new LinkedHashSet<Substance>();
      linkedHashSet0.add((Substance) null);
      mixture0.addCompounds(linkedHashSet0);
      // Undeclared exception!
      try { 
        mixture0.getReadOnlyFractions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      mixture0.pureSubstances = null;
      // Undeclared exception!
      try { 
        mixture0.getPureSubstance((Compound) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      LinkedHashSet<Substance> linkedHashSet0 = new LinkedHashSet<Substance>();
      linkedHashSet0.add((Substance) null);
      mixture0.addCompounds(linkedHashSet0);
      // Undeclared exception!
      try { 
        mixture0.getComponents();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Cubic cubic0 = new Cubic();
      TwoEquationsAlphaExpression twoEquationsAlphaExpression0 = new TwoEquationsAlphaExpression();
      Mixture mixture0 = new Mixture();
      HashSet<Compound> hashSet0 = mixture0.getComponents();
      Phase phase0 = Phase.LIQUID;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(vanLaarActivityModel0, cubic0);
      Mixture mixture1 = new Mixture(cubic0, twoEquationsAlphaExpression0, hashSet0, phase0, wongSandlerMixingRule0, activityModelBinaryParameter0);
      // Undeclared exception!
      try { 
        mixture1.calculate_b_cubicParameter();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(wilsonActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getB();
      Mixture mixture0 = new Mixture(cubic0, phase0, wongSandlerMixingRule0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculate_b_cubicParameter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7cc57567)
         //
         verifyException("termo.eos.mixingRule.WongSandlerMixingRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(vanLaarActivityModel0, cubic0);
      Mixture mixture0 = new Mixture(cubic0, phase0, wongSandlerMixingRule0, (InteractionParameter) null);
      // Undeclared exception!
      try { 
        mixture0.calculate_a_cubicParameter();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.calculate_a_cubicParameter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      HuronVidalOrbeySandlerModification huronVidalOrbeySandlerModification0 = new HuronVidalOrbeySandlerModification(nRTLActivityModel0, cubic0);
      InteractionParameter interactionParameter0 = new InteractionParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalOrbeySandlerModification0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculate_a_cubicParameter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7cc57567)
         //
         verifyException("termo.activityModel.NRTLActivityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      mixture0.pureSubstances = null;
      // Undeclared exception!
      try { 
        mixture0.calculateIdealGasEnthalpy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      UnitAlpha unitAlpha0 = new UnitAlpha();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Phase phase0 = Phase.LIQUID;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      HuronVidalMixingRule huronVidalMixingRule0 = new HuronVidalMixingRule(vanLaarActivityModel0, cubic0);
      Mixture mixture0 = new Mixture(cubic0, unitAlpha0, linkedHashSet0, phase0, huronVidalMixingRule0, (InteractionParameter) null);
      Compound compound0 = new Compound();
      // Undeclared exception!
      try { 
        mixture0.calculateFugacityCoefficient(compound0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      TwoParameterVanDerWaals twoParameterVanDerWaals0 = new TwoParameterVanDerWaals();
      InteractionParameter interactionParameter0 = new InteractionParameter(true);
      Mixture mixture0 = new Mixture(cubic0, phase0, twoParameterVanDerWaals0, interactionParameter0);
      Compound compound0 = new Compound();
      // Undeclared exception!
      try { 
        mixture0.calculateFugacityCoefficient(compound0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7cc57567)
         //
         verifyException("termo.eos.mixingRule.TwoParameterVanDerWaals", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(vanLaarActivityModel0, cubic0);
      Phase phase0 = Phase.VAPOR;
      Mixture mixture0 = new Mixture(cubic0, phase0, wongSandlerMixingRule0, (InteractionParameter) null);
      Compound compound0 = new Compound();
      // Undeclared exception!
      try { 
        mixture0.calculateFugacity(compound0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      TwoParameterVanDerWaals twoParameterVanDerWaals0 = new TwoParameterVanDerWaals();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getA_vanLaar();
      Mixture mixture0 = new Mixture(cubic0, phase0, twoParameterVanDerWaals0, interactionParameter0);
      Compound compound0 = new Compound();
      // Undeclared exception!
      try { 
        mixture0.calculateFugacity(compound0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7cc57567)
         //
         verifyException("termo.eos.mixingRule.TwoParameterVanDerWaals", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.addCompounds((Set<Substance>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Phase phase0 = Phase.VAPOR;
      Mixture mixture0 = null;
      try {
        mixture0 = new Mixture((Cubic) null, (Alpha) null, (Set<Compound>) null, phase0, (MixingRule) null, (InteractionParameter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.calculate_b_cubicParameter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Set<Substance> set0 = mixture0.getPureSubstances();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        mixture0.oneOver_N_Parcial_b(substance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Soave2Parameters soave2Parameters0 = new Soave2Parameters();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, soave2Parameters0, hashSet0, phase0, vDWMixingRule0, activityModelBinaryParameter0);
      MixingRule mixingRule0 = mixture0.getMixingRule();
      assertEquals("Van Der Waals", mixingRule0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      InteractionParameter interactionParameter0 = mixture0.getBinaryParameters();
      assertFalse(interactionParameter0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      TwuEquation twuEquation0 = new TwuEquation();
      mixture0.setAlpha(twuEquation0);
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      SoaveAlpha soaveAlpha0 = new SoaveAlpha();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      HuronVidalMixingRule huronVidalMixingRule0 = new HuronVidalMixingRule(wilsonActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, soaveAlpha0, hashSet0, phase0, huronVidalMixingRule0, activityModelBinaryParameter0);
      double double0 = mixture0.calculate_a_cubicParameter();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Substance substance0 = new Substance();
      mixture0.addComponent(substance0, 781.0);
      // Undeclared exception!
      try { 
        mixture0.calculatetAcentricFactorBasedVaporPressure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      double double0 = mixture0.calculatetAcentricFactorBasedVaporPressure();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Compound compound0 = new Compound();
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, linkedHashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      HashMap<Compound, Double> hashMap0 = new HashMap<Compound, Double>();
      Double double0 = new Double(10.0);
      hashMap0.put(compound0, double0);
      // Undeclared exception!
      try { 
        mixture0.setFractions(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Cubic cubic0 = new Cubic();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Compound compound0 = new Compound();
      linkedHashSet0.add(compound0);
      Phase phase0 = Phase.LIQUID;
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, linkedHashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      double double0 = mixture0.calculateIdealGasEntropy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Cubic cubic0 = new Cubic();
      GCEOSEquation gCEOSEquation0 = new GCEOSEquation();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.VAPOR;
      Substance substance0 = new Substance(cubic0, gCEOSEquation0, compound0, phase0);
      mixture0.addComponent(substance0, 0.0);
      assertEquals(0.0, substance0.getMolarFraction(), 0.01);
      
      double double0 = mixture0.calculateIdealGasEntropy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Substance substance0 = new Substance();
      LinkedHashSet<Substance> linkedHashSet0 = new LinkedHashSet<Substance>();
      linkedHashSet0.add(substance0);
      mixture0.addCompounds(linkedHashSet0);
      // Undeclared exception!
      try { 
        mixture0.calculateIdealGasEntropy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Cubic cubic0 = new Cubic();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Phase phase0 = Phase.LIQUID;
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, linkedHashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      double double0 = mixture0.calculateIdealGasEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      double double0 = mixture0.calculateIdealGasEnthalpy();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Substance substance0 = new Substance();
      mixture0.addComponent(substance0, (-75.845182663575));
      // Undeclared exception!
      try { 
        mixture0.getFractions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      HashMap<String, Double> hashMap0 = mixture0.getFractions();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      LinkedHashSet<Substance> linkedHashSet0 = new LinkedHashSet<Substance>();
      Substance substance0 = new Substance();
      linkedHashSet0.add(substance0);
      mixture0.addCompounds(linkedHashSet0);
      HashMap<Compound, Double> hashMap0 = mixture0.getReadOnlyFractions();
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      HashMap<Compound, Double> hashMap0 = mixture0.getReadOnlyFractions();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Compound compound0 = new Compound();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      hashSet0.add(compound0);
      mixture0.setComponents(hashSet0);
      HashSet<Compound> hashSet1 = mixture0.getComponents();
      assertTrue(hashSet1.contains(compound0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      LinkedHashSet<Substance> linkedHashSet0 = new LinkedHashSet<Substance>();
      Substance substance0 = new Substance();
      linkedHashSet0.add(substance0);
      mixture0.addCompounds(linkedHashSet0);
      mixture0.addCompounds(linkedHashSet0);
      assertEquals(0.0, mixture0.getPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Compound compound0 = new Compound();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      hashSet0.add(compound0);
      mixture0.setComponents(hashSet0);
      Compound compound1 = new Compound();
      Substance substance0 = mixture0.getPureSubstance(compound1);
      assertNull(substance0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Compound compound0 = new Compound();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      linkedHashSet0.add(compound0);
      mixture0.setComponents(linkedHashSet0);
      Substance substance0 = mixture0.getPureSubstance(compound0);
      assertNotNull(substance0);
      
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(substance0, "DN}c;Vl$)qU", substance0, object0);
      mixture0.propertyChange(propertyChangeEvent0);
      assertEquals(0.0, substance0.getPressure(), 0.01);
      assertEquals(1.0, substance0.getMolarFraction(), 0.01);
      assertEquals(0.0, substance0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(mixture0, "alpha", "alpha", "alpha");
      // Undeclared exception!
      try { 
        mixture0.propertyChange(propertyChangeEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class termo.eos.alpha.Alpha (java.lang.String is in module java.base of loader 'bootstrap'; termo.eos.alpha.Alpha is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7cc57567)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      GCEOSEquation gCEOSEquation0 = new GCEOSEquation();
      Compound compound0 = new Compound();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(gCEOSEquation0, "components", compound0, hashSet0);
      mixture0.propertyChange(propertyChangeEvent0);
      assertEquals("components", propertyChangeEvent0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      SoaveAlpha soaveAlpha0 = new SoaveAlpha();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      Compound compound0 = new Compound();
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      HuronVidalMixingRule huronVidalMixingRule0 = new HuronVidalMixingRule(wilsonActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, soaveAlpha0, hashSet0, phase0, huronVidalMixingRule0, activityModelBinaryParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculateFugacityCoefficient(compound0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.eos.mixingRule.ExcessGibbsMixingRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      YuAndLu yuAndLu0 = new YuAndLu();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      Phase phase0 = Phase.LIQUID;
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, yuAndLu0, hashSet0, phase0, vDWMixingRule0, activityModelBinaryParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculateFugacity(compound0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.eos.mixingRule.MixingRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      mixture0.removeComponent((Substance) null);
      assertNull(mixture0.getPhase());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Cubic cubic0 = new Cubic();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.LIQUID;
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, linkedHashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      Substance substance0 = mixture0.getPureSubstance(compound0);
      // Undeclared exception!
      try { 
        mixture0.addComponent(substance0, (-381.50059));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      MathiasKlotzPrausnitzMixingRule mathiasKlotzPrausnitzMixingRule0 = new MathiasKlotzPrausnitzMixingRule();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, mathiasKlotzPrausnitzMixingRule0, activityModelBinaryParameter0);
      double double0 = mixture0.oneOver_N_Parcial_a((Substance) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Compound compound0 = new Compound();
      Substance substance0 = mixture0.getPureSubstance(compound0);
      // Undeclared exception!
      try { 
        mixture0.getFraction(substance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      SoaveAlpha soaveAlpha0 = new SoaveAlpha();
      HashSet<Compound> hashSet0 = new HashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      HuronVidalMixingRule huronVidalMixingRule0 = new HuronVidalMixingRule(wilsonActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, soaveAlpha0, hashSet0, phase0, huronVidalMixingRule0, activityModelBinaryParameter0);
      double double0 = mixture0.partial_aPartial_temperature();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Alpha alpha0 = mixture0.getAlpha();
      assertNull(alpha0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.oneOver_N_Parcial_a((Substance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Cubic cubic0 = new Cubic();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.VAPOR;
      Mixture mixture0 = new Mixture(cubic0, (Alpha) null, linkedHashSet0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      Double double0 = new Double(0.5);
      // Undeclared exception!
      try { 
        mixture0.setFraction(compound0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }
}
