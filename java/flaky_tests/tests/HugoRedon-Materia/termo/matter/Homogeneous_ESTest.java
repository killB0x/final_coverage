/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 05:00:14 GMT 2022
 */

package termo.matter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeEvent;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import termo.activityModel.NRTLActivityModel;
import termo.activityModel.UNIQUACActivityModel;
import termo.activityModel.VanLaarActivityModel;
import termo.activityModel.WilsonActivityModel;
import termo.binaryParameter.ActivityModelBinaryParameter;
import termo.binaryParameter.InteractionParameter;
import termo.component.Compound;
import termo.eos.Cubic;
import termo.eos.alpha.Alpha;
import termo.eos.alpha.AndroulakisEtAl;
import termo.eos.alpha.AndroulakisEtAlAboveTc;
import termo.eos.alpha.GeneralTwuEquation;
import termo.eos.alpha.MathiasCopemanEquation;
import termo.eos.alpha.TwoEquationsAlphaExpression;
import termo.eos.alpha.YuAndLu;
import termo.eos.alpha.commonaAlphaEquationsImplementation.MathiasAlpha;
import termo.eos.mixingRule.HuronVidalMixingRule;
import termo.eos.mixingRule.HuronVidalModified2Order;
import termo.eos.mixingRule.HuronVidalOrbeySandlerModification;
import termo.eos.mixingRule.LinearCombinationOfHuronVidalAndMichelsenModels;
import termo.eos.mixingRule.MathiasKlotzPrausnitzMixingRule;
import termo.eos.mixingRule.TwoParameterVanDerWaals;
import termo.eos.mixingRule.VDWMixingRule;
import termo.eos.mixingRule.WongSandlerMixingRule;
import termo.matter.Mixture;
import termo.matter.Substance;
import termo.phase.Phase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Homogeneous_ESTest extends Homogeneous_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      mixture0.setTemperature((-0.003654));
      assertEquals((-0.003654), mixture0.getTemperature(), 0.01);
      
      mixture0.setTemperature(0.0);
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      AndroulakisEtAlAboveTc androulakisEtAlAboveTc0 = new AndroulakisEtAlAboveTc();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.VAPOR;
      Substance substance0 = new Substance(cubic0, androulakisEtAlAboveTc0, compound0, phase0);
      substance0.temperature = 2501.0392496;
      substance0.calculateGibbs();
      assertEquals(2501.0392496, substance0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      AndroulakisEtAlAboveTc androulakisEtAlAboveTc0 = new AndroulakisEtAlAboveTc();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.VAPOR;
      Substance substance0 = new Substance(cubic0, androulakisEtAlAboveTc0, compound0, phase0);
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      InteractionParameter interactionParameter0 = new InteractionParameter(false);
      Mixture mixture0 = new Mixture(cubic0, phase0, vDWMixingRule0, interactionParameter0);
      mixture0.addComponent(substance0, Double.NaN);
      double double0 = mixture0.calculateFugacity(substance0);
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      AndroulakisEtAlAboveTc androulakisEtAlAboveTc0 = new AndroulakisEtAlAboveTc();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.LIQUID;
      Substance substance0 = new Substance(cubic0, androulakisEtAlAboveTc0, compound0, phase0);
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      InteractionParameter interactionParameter0 = new InteractionParameter(true);
      Mixture mixture0 = new Mixture(cubic0, phase0, vDWMixingRule0, interactionParameter0);
      mixture0.setTemperature(0.16666666666666666);
      double double0 = mixture0.calculateFugacity(substance0);
      assertEquals(0.16666666666666666, mixture0.getTemperature(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      HuronVidalOrbeySandlerModification huronVidalOrbeySandlerModification0 = new HuronVidalOrbeySandlerModification(nRTLActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalOrbeySandlerModification0, activityModelBinaryParameter0);
      mixture0.calculatePressure(6.0, 5.0);
      double double0 = mixture0.calculateEntropy();
      assertEquals(6.0, mixture0.getTemperature(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      AndroulakisEtAlAboveTc androulakisEtAlAboveTc0 = new AndroulakisEtAlAboveTc();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.VAPOR;
      Substance substance0 = new Substance(cubic0, androulakisEtAlAboveTc0, compound0, phase0);
      double double0 = substance0.calculatePressure(Double.NaN, (-756.5786145818604));
      assertEquals(Double.NaN, substance0.getPressure(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      mixture0.setTemperature(1.0);
      boolean boolean0 = mixture0.equals(mixture0);
      assertEquals(1.0, mixture0.getTemperature(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      mixture0.temperature = (-1429.2);
      mixture0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      mixture0.setPressure((-292.592043686741));
      mixture0.hashCode();
      assertEquals((-292.592043686741), mixture0.getPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      HuronVidalOrbeySandlerModification huronVidalOrbeySandlerModification0 = new HuronVidalOrbeySandlerModification(nRTLActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalOrbeySandlerModification0, activityModelBinaryParameter0);
      mixture0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      HuronVidalOrbeySandlerModification huronVidalOrbeySandlerModification0 = new HuronVidalOrbeySandlerModification(nRTLActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalOrbeySandlerModification0, activityModelBinaryParameter0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(phase0, "", nRTLActivityModel0, cubic0);
      mixture0.propertyChange(propertyChangeEvent0);
      assertEquals("  g = h - T * s", mixture0.gibbsLatexEquation());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      UNIQUACActivityModel uNIQUACActivityModel0 = new UNIQUACActivityModel();
      LinearCombinationOfHuronVidalAndMichelsenModels linearCombinationOfHuronVidalAndMichelsenModels0 = new LinearCombinationOfHuronVidalAndMichelsenModels(uNIQUACActivityModel0, cubic0, 4101.83931);
      Mixture mixture0 = new Mixture(cubic0, phase0, linearCombinationOfHuronVidalAndMichelsenModels0, (InteractionParameter) null);
      mixture0.calculateMolarVolume();
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      AndroulakisEtAlAboveTc androulakisEtAlAboveTc0 = new AndroulakisEtAlAboveTc();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.LIQUID;
      Substance substance0 = new Substance(cubic0, androulakisEtAlAboveTc0, compound0, phase0);
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      InteractionParameter interactionParameter0 = new InteractionParameter(true);
      Mixture mixture0 = new Mixture(cubic0, phase0, vDWMixingRule0, interactionParameter0);
      mixture0.calculateFugacityCoefficient(substance0);
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Cubic cubic0 = new Cubic();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(cubic0, "phase", cubic0, (Object) null);
      mixture0.propertyChange(propertyChangeEvent0);
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Cubic cubic0 = new Cubic();
      Substance substance0 = new Substance();
      mixture0.addComponent(substance0, (-1109.0));
      mixture0.setCubicEquationOfState(cubic0);
      assertEquals(0.0, mixture0.getPressure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      MathiasKlotzPrausnitzMixingRule mathiasKlotzPrausnitzMixingRule0 = new MathiasKlotzPrausnitzMixingRule();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, mathiasKlotzPrausnitzMixingRule0, activityModelBinaryParameter0);
      Substance substance0 = new Substance();
      double double0 = mixture0.oneOver_N_Parcial_a(substance0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Cubic cubic0 = new Cubic();
      GeneralTwuEquation generalTwuEquation0 = new GeneralTwuEquation();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.VAPOR;
      Substance substance0 = new Substance(cubic0, generalTwuEquation0, compound0, phase0);
      mixture0.addComponent(substance0, 0.0);
      mixture0.setTemperature((-2985.2427));
      double double0 = substance0.getTemperature();
      assertEquals((-2985.2427), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      InteractionParameter interactionParameter0 = new InteractionParameter(false);
      Mixture mixture0 = new Mixture(cubic0, phase0, vDWMixingRule0, interactionParameter0);
      Phase phase1 = mixture0.getPhase();
      assertEquals(Phase.VAPOR, phase1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Substance substance0 = new Substance();
      Cubic cubic0 = substance0.getCubicEquationOfState();
      assertNull(cubic0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AndroulakisEtAl androulakisEtAl0 = new AndroulakisEtAl();
      Compound compound0 = new Compound();
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      cubic0.setW(8314.472);
      Substance substance0 = new Substance(cubic0, androulakisEtAl0, compound0, phase0);
      Cubic cubic1 = substance0.getCubicEquationOfState();
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic1.a_cubicParameterLatexEquation());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      AndroulakisEtAl androulakisEtAl0 = new AndroulakisEtAl();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.LIQUID;
      Substance substance0 = new Substance(cubic0, androulakisEtAl0, compound0, phase0);
      cubic0.setU((-2304.592198787229));
      Cubic cubic1 = substance0.getCubicEquationOfState();
      assertEquals(0.0, cubic1.getCriticalCompressibilityFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      AndroulakisEtAlAboveTc androulakisEtAlAboveTc0 = new AndroulakisEtAlAboveTc();
      cubic0.setOmega_b(784.6907163376472);
      Compound compound0 = new Compound();
      Phase phase0 = Phase.VAPOR;
      Substance substance0 = new Substance(cubic0, androulakisEtAlAboveTc0, compound0, phase0);
      Cubic cubic1 = substance0.getCubicEquationOfState();
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic1.a_cubicParameterLatexEquation());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.LIQUID;
      cubic0.setOmega_b((-672.8));
      Substance substance0 = new Substance(cubic0, mathiasCopemanEquation0, compound0, phase0);
      Cubic cubic1 = substance0.getCubicEquationOfState();
      assertEquals("a = \\Omega_a \\frac{\\left(RT_c\\right)^2}{p_c}\\alpha(T)", cubic1.a_cubicParameterLatexEquation());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      AndroulakisEtAlAboveTc androulakisEtAlAboveTc0 = new AndroulakisEtAlAboveTc();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.LIQUID;
      Substance substance0 = new Substance(cubic0, androulakisEtAlAboveTc0, compound0, phase0);
      cubic0.setOmega_a(0.3);
      Cubic cubic1 = substance0.getCubicEquationOfState();
      assertEquals(0.0, cubic1.getU(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compound compound0 = new Compound("}");
      Cubic cubic0 = new Cubic();
      YuAndLu yuAndLu0 = new YuAndLu();
      cubic0.setOmega_a((-145.95));
      Phase phase0 = Phase.LIQUID;
      Substance substance0 = new Substance(cubic0, yuAndLu0, compound0, phase0);
      Cubic cubic1 = substance0.getCubicEquationOfState();
      assertEquals(0.0, cubic1.getOmega_b(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      LinearCombinationOfHuronVidalAndMichelsenModels linearCombinationOfHuronVidalAndMichelsenModels0 = new LinearCombinationOfHuronVidalAndMichelsenModels(vanLaarActivityModel0, cubic0, 3488.65367055363);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      cubic0.setCriticalCompressibilityFactor(3329.14488);
      Mixture mixture0 = new Mixture(cubic0, phase0, linearCombinationOfHuronVidalAndMichelsenModels0, activityModelBinaryParameter0);
      Cubic cubic1 = mixture0.getCubicEquationOfState();
      assertEquals(0.0, cubic1.getOmega_b(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      AndroulakisEtAlAboveTc androulakisEtAlAboveTc0 = new AndroulakisEtAlAboveTc();
      Compound compound0 = new Compound();
      Phase phase0 = Phase.LIQUID;
      Substance substance0 = new Substance(cubic0, androulakisEtAlAboveTc0, compound0, phase0);
      cubic0.setCriticalCompressibilityFactor((-2268.038571476));
      Cubic cubic1 = substance0.getCubicEquationOfState();
      assertTrue(cubic1.isCubic());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      double double0 = mixture0.calculatetAcentricFactorBasedVaporPressure();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      LinearCombinationOfHuronVidalAndMichelsenModels linearCombinationOfHuronVidalAndMichelsenModels0 = new LinearCombinationOfHuronVidalAndMichelsenModels(wilsonActivityModel0, cubic0, 0.0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, linearCombinationOfHuronVidalAndMichelsenModels0, activityModelBinaryParameter0);
      double double0 = mixture0.calculate_b_cubicParameter();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Mixture mixture0 = new Mixture();
      HashSet<Compound> hashSet0 = mixture0.getComponents();
      Phase phase0 = Phase.VAPOR;
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      LinearCombinationOfHuronVidalAndMichelsenModels linearCombinationOfHuronVidalAndMichelsenModels0 = new LinearCombinationOfHuronVidalAndMichelsenModels(wilsonActivityModel0, cubic0, 0.6666666666666666);
      InteractionParameter interactionParameter0 = new InteractionParameter(true);
      Mixture mixture1 = new Mixture(cubic0, (Alpha) null, hashSet0, phase0, linearCombinationOfHuronVidalAndMichelsenModels0, interactionParameter0);
      mixture1.calculate_a_cubicParameter();
      assertEquals(0.0, mixture1.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, vDWMixingRule0, activityModelBinaryParameter0);
      double double0 = mixture0.calculatePressure(0.0, (-2654.3722069164));
      assertEquals(-0.0, mixture0.getPressure(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      HuronVidalOrbeySandlerModification huronVidalOrbeySandlerModification0 = new HuronVidalOrbeySandlerModification(wilsonActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Phase phase0 = Phase.LIQUID;
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalOrbeySandlerModification0, activityModelBinaryParameter0);
      double double0 = mixture0.calculatePressure((-603.51), 6.0);
      assertEquals((-603.51), mixture0.getTemperature(), 0.01);
      assertEquals((-836311.1661200001), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      double double0 = mixture0.calculateIdealGasEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      double double0 = mixture0.calculateIdealGasEnthalpy();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      HuronVidalOrbeySandlerModification huronVidalOrbeySandlerModification0 = new HuronVidalOrbeySandlerModification(nRTLActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalOrbeySandlerModification0, activityModelBinaryParameter0);
      mixture0.calculatePressure(6.0, 5.0);
      double double0 = mixture0.calculateCompresibilityFactor();
      assertEquals(9977.366399999999, mixture0.getPressure(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Cubic cubic0 = new Cubic();
      mixture0.mpcs = null;
      // Undeclared exception!
      try { 
        mixture0.setCubicEquationOfState(cubic0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Homogeneous", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        substance0.propertyChange((PropertyChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Homogeneous", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Phase phase0 = Phase.LIQUID;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      LinearCombinationOfHuronVidalAndMichelsenModels linearCombinationOfHuronVidalAndMichelsenModels0 = new LinearCombinationOfHuronVidalAndMichelsenModels(vanLaarActivityModel0, cubic0, 4536.1773);
      Mixture mixture0 = new Mixture(cubic0, mathiasCopemanEquation0, linkedHashSet0, phase0, linearCombinationOfHuronVidalAndMichelsenModels0, (InteractionParameter) null);
      // Undeclared exception!
      try { 
        mixture0.partial_aPartial_temperature();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        substance0.partial_aPartial_temperature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      UNIQUACActivityModel uNIQUACActivityModel0 = new UNIQUACActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(uNIQUACActivityModel0, cubic0);
      InteractionParameter interactionParameter0 = new InteractionParameter(false);
      Mixture mixture0 = new Mixture(cubic0, phase0, wongSandlerMixingRule0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.partial_aPartial_temperature();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.eos.mixingRule.WongSandlerMixingRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      MathiasAlpha mathiasAlpha0 = new MathiasAlpha();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(vanLaarActivityModel0, cubic0);
      Mixture mixture0 = new Mixture(cubic0, mathiasAlpha0, linkedHashSet0, phase0, wongSandlerMixingRule0, (InteractionParameter) null);
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        mixture0.oneOver_N_Parcial_b(substance0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        substance0.oneOver_N_Parcial_b(substance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      TwoEquationsAlphaExpression twoEquationsAlphaExpression0 = new TwoEquationsAlphaExpression();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Phase phase0 = Phase.VAPOR;
      UNIQUACActivityModel uNIQUACActivityModel0 = new UNIQUACActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(uNIQUACActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getAlpha();
      Mixture mixture0 = new Mixture(cubic0, twoEquationsAlphaExpression0, linkedHashSet0, phase0, wongSandlerMixingRule0, interactionParameter0);
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        mixture0.oneOver_N_Parcial_b(substance0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.eos.mixingRule.WongSandlerMixingRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Substance substance0 = new Substance();
      Cubic cubic0 = new Cubic();
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      LinearCombinationOfHuronVidalAndMichelsenModels linearCombinationOfHuronVidalAndMichelsenModels0 = new LinearCombinationOfHuronVidalAndMichelsenModels(vanLaarActivityModel0, cubic0, (-1347.9863367));
      mixture0.setMixingRule(linearCombinationOfHuronVidalAndMichelsenModels0);
      // Undeclared exception!
      try { 
        mixture0.oneOver_N_Parcial_a(substance0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        substance0.oneOver_N_Parcial_a(substance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      TwoParameterVanDerWaals twoParameterVanDerWaals0 = new TwoParameterVanDerWaals();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getAlpha();
      Mixture mixture0 = new Mixture(cubic0, phase0, twoParameterVanDerWaals0, interactionParameter0);
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        mixture0.oneOver_N_Parcial_a(substance0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.eos.mixingRule.TwoParameterVanDerWaals", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        substance0.calculatetAcentricFactorBasedVaporPressure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(nRTLActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getAlpha();
      Mixture mixture0 = new Mixture(cubic0, phase0, wongSandlerMixingRule0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculate_b_cubicParameter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.eos.mixingRule.WongSandlerMixingRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.calculate_a_cubicParameter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      TwoParameterVanDerWaals twoParameterVanDerWaals0 = new TwoParameterVanDerWaals();
      InteractionParameter interactionParameter0 = new InteractionParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, twoParameterVanDerWaals0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculate_a_cubicParameter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.eos.mixingRule.TwoParameterVanDerWaals", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      HuronVidalMixingRule huronVidalMixingRule0 = new HuronVidalMixingRule(vanLaarActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalMixingRule0, activityModelBinaryParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculatePressure((-1.0), (-1.0));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      UNIQUACActivityModel uNIQUACActivityModel0 = new UNIQUACActivityModel();
      LinearCombinationOfHuronVidalAndMichelsenModels linearCombinationOfHuronVidalAndMichelsenModels0 = new LinearCombinationOfHuronVidalAndMichelsenModels(uNIQUACActivityModel0, cubic0, (-1219.76804546458));
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getK();
      Mixture mixture0 = new Mixture(cubic0, phase0, linearCombinationOfHuronVidalAndMichelsenModels0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculatePressure((-1219.76804546458), (-1582.0));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.activityModel.UNIQUACActivityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      HuronVidalModified2Order huronVidalModified2Order0 = new HuronVidalModified2Order(vanLaarActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalModified2Order0, activityModelBinaryParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculateMolarVolume();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      HuronVidalModified2Order huronVidalModified2Order0 = new HuronVidalModified2Order(vanLaarActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getA_vanLaar();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalModified2Order0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculateMolarVolume();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.activityModel.VanLaarActivityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        substance0.calculateIdealGasEntropy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        substance0.calculateIdealGasEnthalpy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      HuronVidalMixingRule huronVidalMixingRule0 = new HuronVidalMixingRule(vanLaarActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalMixingRule0, activityModelBinaryParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculateGibbs();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(wilsonActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getB();
      Mixture mixture0 = new Mixture(cubic0, phase0, wongSandlerMixingRule0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculateGibbs();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.eos.mixingRule.WongSandlerMixingRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.calculateFugacityCoefficient((Substance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      UNIQUACActivityModel uNIQUACActivityModel0 = new UNIQUACActivityModel();
      HuronVidalOrbeySandlerModification huronVidalOrbeySandlerModification0 = new HuronVidalOrbeySandlerModification(uNIQUACActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getAlpha();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalOrbeySandlerModification0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculateFugacityCoefficient((Substance) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.activityModel.UNIQUACActivityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      LinearCombinationOfHuronVidalAndMichelsenModels linearCombinationOfHuronVidalAndMichelsenModels0 = new LinearCombinationOfHuronVidalAndMichelsenModels(vanLaarActivityModel0, cubic0, 8314.472);
      Mixture mixture0 = new Mixture(cubic0, phase0, linearCombinationOfHuronVidalAndMichelsenModels0, (InteractionParameter) null);
      // Undeclared exception!
      try { 
        mixture0.calculateFugacity((Substance) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        mixture0.calculateFugacity(substance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Substance substance0 = new Substance();
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      TwoParameterVanDerWaals twoParameterVanDerWaals0 = new TwoParameterVanDerWaals();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getK();
      Mixture mixture0 = new Mixture(cubic0, phase0, twoParameterVanDerWaals0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculateFugacity(substance0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.eos.mixingRule.TwoParameterVanDerWaals", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      HuronVidalOrbeySandlerModification huronVidalOrbeySandlerModification0 = new HuronVidalOrbeySandlerModification(vanLaarActivityModel0, cubic0);
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalOrbeySandlerModification0, (InteractionParameter) null);
      // Undeclared exception!
      try { 
        mixture0.calculateEntropy();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      TwoParameterVanDerWaals twoParameterVanDerWaals0 = new TwoParameterVanDerWaals();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getA();
      Mixture mixture0 = new Mixture(cubic0, phase0, twoParameterVanDerWaals0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculateEntropy();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.eos.mixingRule.TwoParameterVanDerWaals", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      HuronVidalMixingRule huronVidalMixingRule0 = new HuronVidalMixingRule(vanLaarActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalMixingRule0, activityModelBinaryParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculateEnthalpy();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        substance0.calculateEnthalpy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(nRTLActivityModel0, cubic0);
      InteractionParameter interactionParameter0 = new InteractionParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, wongSandlerMixingRule0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculateEnthalpy();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.eos.mixingRule.WongSandlerMixingRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      HuronVidalMixingRule huronVidalMixingRule0 = new HuronVidalMixingRule(vanLaarActivityModel0, cubic0);
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalMixingRule0, (InteractionParameter) null);
      // Undeclared exception!
      try { 
        mixture0.calculateCompresibilityFactor();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      HuronVidalMixingRule huronVidalMixingRule0 = new HuronVidalMixingRule(nRTLActivityModel0, cubic0);
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getTwoParameterVanDerWaals();
      Mixture mixture0 = new Mixture(cubic0, phase0, huronVidalMixingRule0, interactionParameter0);
      // Undeclared exception!
      try { 
        mixture0.calculateCompresibilityFactor();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.activityModel.NRTLActivityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        substance0.calculate_b_cubicParameter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.calculateCompresibilityFactor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.calculateMolarVolume();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Mixture mixture1 = new Mixture();
      boolean boolean0 = mixture0.equals(mixture1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Mixture mixture1 = new Mixture();
      mixture1.setTemperature(1.0);
      boolean boolean0 = mixture0.equals(mixture1);
      assertEquals(1.0, mixture1.getTemperature(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Phase phase0 = Phase.VAPOR;
      TwoParameterVanDerWaals twoParameterVanDerWaals0 = new TwoParameterVanDerWaals();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture1 = new Mixture((Cubic) null, phase0, twoParameterVanDerWaals0, activityModelBinaryParameter0);
      boolean boolean0 = mixture1.equals(mixture0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Mixture mixture1 = new Mixture();
      Cubic cubic0 = new Cubic();
      mixture1.setCubicEquationOfState(cubic0);
      boolean boolean0 = mixture1.equals(mixture0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Object object0 = new Object();
      boolean boolean0 = mixture0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      boolean boolean0 = mixture0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Substance substance0 = new Substance();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(substance0, "temperature", "temperature", "temperature");
      // Undeclared exception!
      try { 
        substance0.propertyChange(propertyChangeEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class java.lang.Double (java.lang.String and java.lang.Double are in module java.base of loader 'bootstrap')
         //
         verifyException("termo.matter.Homogeneous", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Substance substance0 = new Substance();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(substance0, "cubic", substance0, substance0);
      // Undeclared exception!
      try { 
        substance0.propertyChange(propertyChangeEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.matter.Substance cannot be cast to class termo.eos.Cubic (termo.matter.Substance and termo.eos.Cubic are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9)
         //
         verifyException("termo.matter.Homogeneous", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Substance substance0 = new Substance();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(substance0, "pressure", substance0, substance0);
      // Undeclared exception!
      try { 
        substance0.propertyChange(propertyChangeEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.matter.Substance cannot be cast to class java.lang.Double (termo.matter.Substance is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7aea37c9; java.lang.Double is in module java.base of loader 'bootstrap')
         //
         verifyException("termo.matter.Homogeneous", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Cubic cubic0 = new Cubic();
      mixture0.setCubicEquationOfState(cubic0);
      MathiasKlotzPrausnitzMixingRule mathiasKlotzPrausnitzMixingRule0 = new MathiasKlotzPrausnitzMixingRule();
      mixture0.setMixingRule(mathiasKlotzPrausnitzMixingRule0);
      double double0 = mixture0.calculateEnthalpy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      Mixture mixture0 = new Mixture(cubic0, phase0, vDWMixingRule0, (InteractionParameter) null);
      double double0 = mixture0.partial_aPartial_temperature();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      Phase phase0 = Phase.LIQUID;
      mixture0.setPhase(phase0);
      assertEquals(0.0, mixture0.getTemperature(), 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Substance substance0 = new Substance();
      substance0.setPressure(282.5744367);
      double double0 = substance0.getPressure();
      assertEquals(282.5744367, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      String string0 = mixture0.enthalpyLatexEquation();
      assertEquals("h= h_{ideal }+ \\left[\\frac{ T \\left(   \\frac{\\partial a }{\\partial T}  \\right)  - a }{b  \\sqrt{u^2 -4 w}}\\right]\\ln{\\left[\\frac{2 v + b \\left(u + \\sqrt{u^2 - 4w}\\right)}{2 v + b \\left(u - \\sqrt{u^2 - 4w}\\right)}\\right]}+ pv - RT", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      mixture0.getPhase();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Substance substance0 = new Substance();
      // Undeclared exception!
      try { 
        substance0.calculateEntropy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Substance", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      String string0 = mixture0.gibbsLatexEquation();
      assertEquals("  g = h - T * s", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Substance substance0 = new Substance();
      double double0 = substance0.getTemperature();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.calculatePressure(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      String string0 = mixture0.entropyLatexEquation();
      assertEquals("s= s_{ideal }+ R  \\ln{\\frac{z \\left(v-b\\right) }{v}}+ \\left[\\frac{ \\frac{\\partial a }{\\partial T} }{b  \\sqrt{u^2 -4 w}}\\right]\\ln{\\left[\\frac{2 v + b \\left(u + \\sqrt{u^2 - 4w}\\right)}{2 v + b \\left(u - \\sqrt{u^2 - 4w}\\right)}\\right]}", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Substance substance0 = new Substance();
      double double0 = substance0.getPressure();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        mixture0.calculateGibbs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matter.Mixture", e);
      }
  }
}
