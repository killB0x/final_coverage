/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 05:02:41 GMT 2022
 */

package termo.matrix;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import termo.matrix.Matrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-6850.94);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        matrix0.matrixVectorMultiplication(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1.0);
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = matrix0.matrixVectorMultiplication(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1555.6263668;
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray2 = matrix0.inverse();
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        matrix0.inverse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("termo.matrix.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 951.85140943976;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(2, doubleArray0.length);
      
      double double0 = matrix0.minorWithothSign(doubleArray0);
      assertEquals(951.85140943976, double0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-189.94452381708);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(1, doubleArray0.length);
      
      double double0 = matrix0.minorWithothSign(doubleArray0);
      assertEquals((-189.94452381708), double0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(2, doubleArray0.length);
      
      double double0 = matrix0.menor(1, 1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(1, doubleArray0.length);
      
      double double0 = matrix0.menor(3208, 1);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1555.6263668;
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(1, doubleArray0.length);
      
      double double0 = matrix0.determinant();
      assertEquals(1555.6263668, double0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 385.17501;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(2, doubleArray0.length);
      
      double double0 = matrix0.determinant();
      assertEquals((-385.17501), double0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[7];
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = doubleArray0[2];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(4, doubleArray0.length);
      
      double double0 = matrix0.a(4, 4);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix matrix0 = new Matrix((double[][]) null);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.transposeMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matrix.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Matrix matrix0 = new Matrix((double[][]) null);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.scalarMultiplication(752.227182149003);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matrix.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        matrix0.scalarMultiplication((-281.7649983));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("termo.matrix.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      matrix0.minorWithothSign(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Matrix matrix0 = new Matrix((double[][]) null);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.minorWithothSign((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[17][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(17, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        matrix0.minorWithothSign(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Matrix matrix0 = new Matrix((double[][]) null);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.menor(625, 625);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matrix.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        matrix0.menor(3, 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("termo.matrix.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[][] doubleArray0 = new double[17][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(17, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        matrix0.menor((-1254), (-1254));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        matrix0.matrixVectorMultiplication((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matrix.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      matrix0.inverse();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Matrix matrix0 = new Matrix((double[][]) null);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.inverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      matrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Matrix matrix0 = new Matrix((double[][]) null);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.determinant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      matrix0.cofactorMatrix();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Matrix matrix0 = new Matrix((double[][]) null);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.cofactorMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.matrix.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        matrix0.cofactorMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        matrix0.a((-2792), (-2792));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(2, doubleArray0.length);
      
      double[][] doubleArray1 = matrix0.scalarMultiplication((-2540.96717914));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(7, doubleArray0.length);
      
      double[][] doubleArray1 = matrix0.transposeMatrix();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        matrix0.transposeMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("termo.matrix.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(1, doubleArray0.length);
      
      double double0 = matrix0.menor(1, 821);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      matrix0.menor(1, 1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = matrix0.cofactorMatrix();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(2, doubleArray0.length);
      
      double double0 = matrix0.determinant();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[][] doubleArray0 = new double[15][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.determinant();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Matrix matrix0 = new Matrix((double[][]) null);
      // Undeclared exception!
      try { 
        matrix0.a((-3363), (-3363));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[2];
      Matrix matrix0 = new Matrix(doubleArray0);
      double[] doubleArray2 = matrix0.matrixVectorMultiplication(doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      Matrix matrix0 = new Matrix(doubleArray0);
      double double0 = matrix0.minorWithothSign(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }
}
