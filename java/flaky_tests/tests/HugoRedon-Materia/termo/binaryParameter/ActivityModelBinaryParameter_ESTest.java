/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 04:48:52 GMT 2022
 */

package termo.binaryParameter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import termo.binaryParameter.ActivityModelBinaryParameter;
import termo.binaryParameter.InteractionParameter;
import termo.component.Compound;
import termo.data.ExperimentalDataList;
import termo.equations.Eqn101VaporPressure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ActivityModelBinaryParameter_ESTest extends ActivityModelBinaryParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      assertFalse(activityModelBinaryParameter0.isSymmetric());
      
      Object object0 = new Object();
      boolean boolean0 = activityModelBinaryParameter0.equals(object0);
      assertFalse(boolean0);
      
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setB(activityModelBinaryParameter1);
      activityModelBinaryParameter1.setB(activityModelBinaryParameter0);
      activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      ActivityModelBinaryParameter activityModelBinaryParameter2 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA_vanLaar(activityModelBinaryParameter2);
      activityModelBinaryParameter1.equals(activityModelBinaryParameter2);
      Compound compound0 = null;
      activityModelBinaryParameter2.keyFor(compound0, compound0);
      activityModelBinaryParameter0.setTwoParameterVanDerWaals(activityModelBinaryParameter1);
      Object object1 = new Object();
      activityModelBinaryParameter2.equals(object1);
      double double0 = 548.311618435;
      activityModelBinaryParameter2.setValue(compound0, compound0, double0);
      activityModelBinaryParameter0.equals(object0);
      Object object2 = null;
      activityModelBinaryParameter1.equals(object2);
      ActivityModelBinaryParameter activityModelBinaryParameter3 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter2.equals(activityModelBinaryParameter3);
      Object object3 = null;
      activityModelBinaryParameter3.equals(object3);
      Object object4 = null;
      activityModelBinaryParameter2.equals(object4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Compound compound0 = new Compound();
      activityModelBinaryParameter0.keyFor(compound0, compound0);
      activityModelBinaryParameter0.setB((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      activityModelBinaryParameter1.setB((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter2 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter1.setB((InteractionParameter) null);
      boolean boolean0 = activityModelBinaryParameter0.equals((Object) null);
      assertFalse(boolean0);
      
      ActivityModelBinaryParameter activityModelBinaryParameter3 = new ActivityModelBinaryParameter();
      Object object0 = new Object();
      ActivityModelBinaryParameter activityModelBinaryParameter4 = new ActivityModelBinaryParameter();
      Object object1 = new Object();
      boolean boolean1 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setB((InteractionParameter) null);
      assertFalse(activityModelBinaryParameter0.isSymmetric());
      
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertFalse(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      activityModelBinaryParameter1.setB((InteractionParameter) null);
      boolean boolean0 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA_vanLaar((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertFalse(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      activityModelBinaryParameter1.setA_vanLaar((InteractionParameter) null);
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      assertTrue(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = activityModelBinaryParameter1.equals(object0);
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setAlpha((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter1.setAlpha((InteractionParameter) null);
      activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      ActivityModelBinaryParameter activityModelBinaryParameter2 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter1.equals(activityModelBinaryParameter2);
      assertFalse(boolean0);
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setAlpha((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertFalse(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      activityModelBinaryParameter1.setAlpha((InteractionParameter) null);
      activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      boolean boolean0 = activityModelBinaryParameter1.equals(activityModelBinaryParameter1);
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      Object object0 = new Object();
      Object object1 = new Object();
      activityModelBinaryParameter1.isSymmetric();
      Object object2 = new Object();
      activityModelBinaryParameter1.equals(object2);
      activityModelBinaryParameter0.setTwoParameterVanDerWaals((InteractionParameter) null);
      activityModelBinaryParameter1.setTwoParameterVanDerWaals((InteractionParameter) null);
      activityModelBinaryParameter0.equals(object2);
      activityModelBinaryParameter1.equals((Object) null);
      Object object3 = new Object();
      boolean boolean0 = activityModelBinaryParameter1.equals(object3);
      assertFalse(boolean0);
      
      boolean boolean1 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertTrue(activityModelBinaryParameter0.equals((Object)activityModelBinaryParameter1));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      Object object0 = new Object();
      Object object1 = new Object();
      activityModelBinaryParameter1.isSymmetric();
      activityModelBinaryParameter1.equals(object0);
      activityModelBinaryParameter0.setTwoParameterVanDerWaals((InteractionParameter) null);
      activityModelBinaryParameter1.setTwoParameterVanDerWaals((InteractionParameter) null);
      boolean boolean0 = activityModelBinaryParameter1.equals((Object) null);
      assertFalse(boolean0);
      
      Object object2 = new Object();
      boolean boolean1 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setK((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      ActivityModelBinaryParameter activityModelBinaryParameter2 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter2.setAlpha(activityModelBinaryParameter0);
      activityModelBinaryParameter0.setTwoParameterVanDerWaals(activityModelBinaryParameter2);
      ActivityModelBinaryParameter activityModelBinaryParameter3 = new ActivityModelBinaryParameter();
      assertTrue(activityModelBinaryParameter3.equals((Object)activityModelBinaryParameter1));
      
      activityModelBinaryParameter3.setTwoParameterVanDerWaals((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter4 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter3.equals(activityModelBinaryParameter4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setTwoParameterVanDerWaals((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setK((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setSymmetric(false);
      activityModelBinaryParameter1.setTwoParameterVanDerWaals((InteractionParameter) null);
      activityModelBinaryParameter0.setAlpha((InteractionParameter) null);
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertFalse(boolean0);
      
      boolean boolean1 = activityModelBinaryParameter0.equals((Object) null);
      assertFalse(boolean1);
      
      activityModelBinaryParameter1.getTwoParameterVanDerWaals();
      boolean boolean2 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setB((InteractionParameter) null);
      activityModelBinaryParameter0.setK((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      ActivityModelBinaryParameter activityModelBinaryParameter2 = new ActivityModelBinaryParameter();
      assertTrue(activityModelBinaryParameter2.equals((Object)activityModelBinaryParameter1));
      
      boolean boolean0 = activityModelBinaryParameter0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setB((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getK();
      assertTrue(interactionParameter0.isSymmetric());
      
      activityModelBinaryParameter0.setB(interactionParameter0);
      assertTrue(interactionParameter0.isSymmetric());
      
      Object object0 = new Object();
      activityModelBinaryParameter0.equals((Object) null);
      boolean boolean0 = activityModelBinaryParameter0.equals(object0);
      assertFalse(boolean0);
      
      activityModelBinaryParameter0.setAlpha((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.getAlpha();
      assertFalse(activityModelBinaryParameter0.equals((Object)activityModelBinaryParameter1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setAlpha((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setTwoParameterVanDerWaals((InteractionParameter) null);
      activityModelBinaryParameter0.hashCode();
      Object object0 = new Object();
      boolean boolean0 = activityModelBinaryParameter0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter1.setA((InteractionParameter) null);
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      ActivityModelBinaryParameter activityModelBinaryParameter2 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setAlpha(activityModelBinaryParameter1);
      ActivityModelBinaryParameter activityModelBinaryParameter3 = new ActivityModelBinaryParameter();
      Object object0 = new Object();
      activityModelBinaryParameter3.equals(object0);
      ActivityModelBinaryParameter activityModelBinaryParameter4 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter4.hashCode();
      boolean boolean0 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter1.setA((InteractionParameter) null);
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      ActivityModelBinaryParameter activityModelBinaryParameter2 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setAlpha(activityModelBinaryParameter1);
      Object object0 = new Object();
      activityModelBinaryParameter0.equals(object0);
      activityModelBinaryParameter2.hashCode();
      boolean boolean0 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setK((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      Object object0 = new Object();
      boolean boolean0 = activityModelBinaryParameter1.equals(object0);
      assertFalse(boolean0);
      
      activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      activityModelBinaryParameter1.setAlpha((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter2 = new ActivityModelBinaryParameter();
      boolean boolean1 = activityModelBinaryParameter1.equals(activityModelBinaryParameter2);
      assertFalse(boolean1);
      assertFalse(activityModelBinaryParameter2.equals((Object)activityModelBinaryParameter1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setK((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getAlpha();
      assertTrue(interactionParameter0.isSymmetric());
      
      interactionParameter0.equals(activityModelBinaryParameter0);
      Compound compound0 = new Compound("_fD84oWQ34-@`");
      compound0.setStructure("*w%g");
      interactionParameter0.setValue(compound0, compound0, (-470.9460772570652));
      compound0.setCriticalCompressibilityFactor(0.0);
      interactionParameter0.equals("_fD84oWQ34-@`");
      interactionParameter0.setValue(compound0, compound0, (-580.0));
      activityModelBinaryParameter0.setB(interactionParameter0);
      activityModelBinaryParameter0.setSymmetric(true);
      activityModelBinaryParameter0.getB();
      activityModelBinaryParameter0.getB();
      activityModelBinaryParameter0.hashCode();
      activityModelBinaryParameter0.getTwoParameterVanDerWaals();
      Object object0 = new Object();
      activityModelBinaryParameter0.equals(object0);
      activityModelBinaryParameter0.getB();
      InteractionParameter interactionParameter1 = activityModelBinaryParameter0.getAlpha();
      interactionParameter1.keyFor(compound0, compound0);
      interactionParameter1.keyFor(compound0, compound0);
      boolean boolean0 = activityModelBinaryParameter0.equals(interactionParameter1);
      assertFalse(boolean0);
      
      activityModelBinaryParameter0.getB();
      InteractionParameter interactionParameter2 = activityModelBinaryParameter0.getAlpha();
      assertTrue(interactionParameter2.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA((InteractionParameter) null);
      activityModelBinaryParameter0.setAlpha((InteractionParameter) null);
      Object object0 = new Object();
      activityModelBinaryParameter0.equals((Object) null);
      boolean boolean0 = activityModelBinaryParameter0.equals(object0);
      assertFalse(boolean0);
      
      activityModelBinaryParameter0.hashCode();
      assertFalse(activityModelBinaryParameter0.equals((Object)activityModelBinaryParameter1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setAlpha((InteractionParameter) null);
      activityModelBinaryParameter0.hashCode();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertFalse(activityModelBinaryParameter1.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      activityModelBinaryParameter1.setB(activityModelBinaryParameter0);
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertFalse(boolean0);
      
      activityModelBinaryParameter0.hashCode();
      assertFalse(activityModelBinaryParameter0.equals((Object)activityModelBinaryParameter1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Object object0 = new Object();
      activityModelBinaryParameter0.equals(object0);
      activityModelBinaryParameter0.hashCode();
      InteractionParameter interactionParameter0 = new InteractionParameter();
      Compound compound0 = new Compound();
      interactionParameter0.setValue(compound0, compound0, 0.0);
      compound0.setA_PolinomialCp((-1441.38084981863));
      activityModelBinaryParameter0.setA(interactionParameter0);
      compound0.setB_AdachiAndLu((-2195.69578));
      activityModelBinaryParameter0.setA_vanLaar((InteractionParameter) null);
      activityModelBinaryParameter0.getA_vanLaar();
      activityModelBinaryParameter0.getB();
      activityModelBinaryParameter0.hashCode();
      compound0.setLowerFlammabilityLimitTemperature(0.0);
      activityModelBinaryParameter0.getTwoParameterVanDerWaals();
      InteractionParameter interactionParameter1 = activityModelBinaryParameter0.getAlpha();
      interactionParameter1.setValue(compound0, compound0, 0.0);
      Object object1 = new Object();
      interactionParameter1.equals(object1);
      activityModelBinaryParameter0.getAlpha();
      activityModelBinaryParameter0.hashCode();
      boolean boolean0 = activityModelBinaryParameter0.equals(interactionParameter1);
      assertTrue(interactionParameter1.isSymmetric());
      assertFalse(boolean0);
      
      activityModelBinaryParameter0.hashCode();
      activityModelBinaryParameter0.getA_vanLaar();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      boolean boolean1 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA_vanLaar((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertFalse(boolean0);
      assertFalse(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA_vanLaar((InteractionParameter) null);
      activityModelBinaryParameter0.equals(activityModelBinaryParameter0);
      activityModelBinaryParameter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setTwoParameterVanDerWaals((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertFalse(boolean0);
      
      InteractionParameter interactionParameter0 = activityModelBinaryParameter1.getAlpha();
      assertTrue(interactionParameter0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      activityModelBinaryParameter1.setTwoParameterVanDerWaals(activityModelBinaryParameter0);
      boolean boolean0 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      activityModelBinaryParameter0.setAlpha(activityModelBinaryParameter1);
      activityModelBinaryParameter1.hashCode();
      boolean boolean0 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      activityModelBinaryParameter1.setAlpha(activityModelBinaryParameter0);
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Object object0 = new Object();
      activityModelBinaryParameter0.equals(object0);
      activityModelBinaryParameter0.setK((InteractionParameter) null);
      Object object1 = new Object();
      boolean boolean0 = activityModelBinaryParameter0.equals(object1);
      assertFalse(boolean0);
      
      activityModelBinaryParameter0.hashCode();
      Compound compound0 = new Compound();
      compound0.setAutoIgnitionTermperature(1056.1935990684797);
      compound0.setK_StryjekAndVera((-2122.649));
      compound0.setB_MelhemEtAl((-2122.649));
      activityModelBinaryParameter0.setValue(compound0, compound0, 0.0);
      activityModelBinaryParameter0.hashCode();
      activityModelBinaryParameter0.hashCode();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getA_vanLaar();
      activityModelBinaryParameter0.setB((InteractionParameter) null);
      Object object2 = new Object();
      interactionParameter0.equals(object2);
      interactionParameter0.setSymmetric(false);
      activityModelBinaryParameter0.hashCode();
      activityModelBinaryParameter0.setTwoParameterVanDerWaals(interactionParameter0);
      activityModelBinaryParameter0.hashCode();
      InteractionParameter interactionParameter1 = activityModelBinaryParameter0.getAlpha();
      activityModelBinaryParameter0.getTwoParameterVanDerWaals();
      activityModelBinaryParameter0.hashCode();
      activityModelBinaryParameter0.getB();
      InteractionParameter interactionParameter2 = activityModelBinaryParameter0.getA_vanLaar();
      assertFalse(interactionParameter2.equals((Object)interactionParameter1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setK((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter1.setTwoParameterVanDerWaals(activityModelBinaryParameter0);
      activityModelBinaryParameter1.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setK((InteractionParameter) null);
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getAlpha();
      interactionParameter0.equals(activityModelBinaryParameter0);
      activityModelBinaryParameter0.setA(interactionParameter0);
      activityModelBinaryParameter0.setSymmetric(false);
      activityModelBinaryParameter0.setA_vanLaar(interactionParameter0);
      activityModelBinaryParameter0.getK();
      Compound compound0 = new Compound();
      interactionParameter0.keyFor(compound0, compound0);
      activityModelBinaryParameter0.getAlpha();
      activityModelBinaryParameter0.setK(interactionParameter0);
      Object object0 = new Object();
      activityModelBinaryParameter0.setK(interactionParameter0);
      compound0.setSolubilityParameterat298_15K(0.0);
      activityModelBinaryParameter0.equals(object0);
      activityModelBinaryParameter0.getK();
      Compound compound1 = new Compound();
      Long long0 = new Long(367L);
      Object object1 = new Object();
      activityModelBinaryParameter0.equals(object1);
      compound0.setId(long0);
      compound1.setNetEnthalpyofCombustionStandardState298_15K((-2.0));
      activityModelBinaryParameter0.getValue(compound0, compound1);
      InteractionParameter interactionParameter1 = activityModelBinaryParameter0.getTwoParameterVanDerWaals();
      activityModelBinaryParameter0.getA_vanLaar();
      activityModelBinaryParameter0.hashCode();
      activityModelBinaryParameter0.getTwoParameterVanDerWaals();
      interactionParameter1.setSymmetric(false);
      activityModelBinaryParameter0.hashCode();
      activityModelBinaryParameter0.getA_vanLaar();
      activityModelBinaryParameter0.getK();
      activityModelBinaryParameter0.getK();
      boolean boolean0 = activityModelBinaryParameter0.equals(interactionParameter1);
      assertFalse(boolean0);
      
      InteractionParameter interactionParameter2 = activityModelBinaryParameter0.getB();
      assertFalse(interactionParameter2.equals((Object)interactionParameter0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertFalse(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA((InteractionParameter) null);
      activityModelBinaryParameter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA(activityModelBinaryParameter1);
      activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      Eqn101VaporPressure eqn101VaporPressure0 = new Eqn101VaporPressure();
      eqn101VaporPressure0.getComponent();
      activityModelBinaryParameter0.getAlpha();
      activityModelBinaryParameter1.getA();
      activityModelBinaryParameter1.getA_vanLaar();
      activityModelBinaryParameter0.getAlpha();
      activityModelBinaryParameter0.getK();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getB();
      // Undeclared exception!
      try { 
        interactionParameter0.getValue((Compound) null, (Compound) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.binaryParameter.InteractionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      activityModelBinaryParameter1.setA(activityModelBinaryParameter0);
      boolean boolean0 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter0);
      assertTrue(boolean0);
      
      Eqn101VaporPressure eqn101VaporPressure0 = new Eqn101VaporPressure();
      eqn101VaporPressure0.getComponent();
      Compound compound0 = new Compound();
      // Undeclared exception!
      try { 
        activityModelBinaryParameter0.keyFor((Compound) null, compound0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.binaryParameter.InteractionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      activityModelBinaryParameter0.setA_vanLaar(activityModelBinaryParameter1);
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getA_vanLaar();
      Compound compound0 = new Compound("V]9D-;?`");
      compound0.setB_Soave(1034.0404547835);
      compound0.setDielectricConstant(1.0);
      interactionParameter0.setSymmetric(true);
      Object object0 = new Object();
      interactionParameter0.equals(object0);
      interactionParameter0.getValue(compound0, compound0);
      activityModelBinaryParameter0.getAlpha();
      activityModelBinaryParameter0.setA(interactionParameter0);
      InteractionParameter interactionParameter1 = activityModelBinaryParameter0.getTwoParameterVanDerWaals();
      activityModelBinaryParameter0.hashCode();
      compound0.setEnthalpyofFusionatMeltingPoint(0.0);
      Object object1 = new Object();
      activityModelBinaryParameter0.equals(object1);
      activityModelBinaryParameter1.setAlpha(interactionParameter1);
      activityModelBinaryParameter0.keyFor(compound0, compound0);
      activityModelBinaryParameter0.getA_vanLaar();
      Object object2 = new Object();
      activityModelBinaryParameter1.equals(object2);
      activityModelBinaryParameter1.getA();
      activityModelBinaryParameter0.getA_vanLaar();
      activityModelBinaryParameter1.getAlpha();
      activityModelBinaryParameter1.getK();
      ActivityModelBinaryParameter activityModelBinaryParameter2 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      activityModelBinaryParameter1.setA_vanLaar(activityModelBinaryParameter0);
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertFalse(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA((InteractionParameter) null);
      Object object0 = new Object();
      activityModelBinaryParameter0.equals(object0);
      activityModelBinaryParameter0.setAlpha((InteractionParameter) null);
      activityModelBinaryParameter0.getA();
      activityModelBinaryParameter0.getK();
      activityModelBinaryParameter0.setA_vanLaar((InteractionParameter) null);
      assertFalse(activityModelBinaryParameter0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = new InteractionParameter();
      activityModelBinaryParameter0.setK(interactionParameter0);
      activityModelBinaryParameter0.setB(interactionParameter0);
      activityModelBinaryParameter0.equals(interactionParameter0);
      activityModelBinaryParameter0.setA_vanLaar(interactionParameter0);
      InteractionParameter interactionParameter1 = activityModelBinaryParameter0.getK();
      interactionParameter1.equals(activityModelBinaryParameter0);
      interactionParameter1.equals(activityModelBinaryParameter0);
      Compound compound0 = new Compound();
      compound0.setStandardState("termo.binaryParameter.ActivityModelBinaryParameter");
      activityModelBinaryParameter0.getValue(compound0, compound0);
      interactionParameter1.setSymmetric(false);
      activityModelBinaryParameter0.setB(interactionParameter1);
      InteractionParameter interactionParameter2 = new InteractionParameter();
      Compound compound1 = new Compound();
      interactionParameter2.setValue(compound1, compound1, 401.5682838);
      activityModelBinaryParameter0.setA(interactionParameter2);
      InteractionParameter interactionParameter3 = activityModelBinaryParameter0.getA_vanLaar();
      assertSame(interactionParameter3, interactionParameter1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Object object0 = new Object();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getK();
      interactionParameter0.equals(object0);
      interactionParameter0.setSymmetric(false);
      interactionParameter0.equals(activityModelBinaryParameter0);
      activityModelBinaryParameter0.setAlpha(interactionParameter0);
      InteractionParameter interactionParameter1 = new InteractionParameter(false);
      activityModelBinaryParameter0.equals(interactionParameter1);
      interactionParameter1.setSymmetric(true);
      Compound compound0 = new Compound();
      interactionParameter0.setSymmetric(false);
      Compound compound1 = new Compound("Yz&Mdoa4f{1w");
      activityModelBinaryParameter0.getValue(compound0, compound1);
      activityModelBinaryParameter0.setA_vanLaar(interactionParameter1);
      activityModelBinaryParameter0.equals(object0);
      InteractionParameter interactionParameter2 = activityModelBinaryParameter0.getB();
      activityModelBinaryParameter0.setK(interactionParameter2);
      activityModelBinaryParameter0.setK(interactionParameter2);
      activityModelBinaryParameter0.setA_vanLaar(interactionParameter1);
      activityModelBinaryParameter0.setTwoParameterVanDerWaals(interactionParameter0);
      activityModelBinaryParameter0.getA_vanLaar();
      InteractionParameter interactionParameter3 = activityModelBinaryParameter0.getA_vanLaar();
      assertTrue(interactionParameter3.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA(activityModelBinaryParameter0);
      assertFalse(activityModelBinaryParameter0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = new InteractionParameter();
      interactionParameter0.setSymmetric(true);
      activityModelBinaryParameter0.setSymmetric(true);
      activityModelBinaryParameter0.setA_vanLaar(interactionParameter0);
      InteractionParameter interactionParameter1 = activityModelBinaryParameter0.getTwoParameterVanDerWaals();
      interactionParameter1.equals(activityModelBinaryParameter0);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      interactionParameter1.setSymmetric(true);
      interactionParameter1.equals(activityModelBinaryParameter1);
      activityModelBinaryParameter0.setA(interactionParameter1);
      activityModelBinaryParameter0.getA();
      activityModelBinaryParameter0.getTwoParameterVanDerWaals();
      activityModelBinaryParameter0.hashCode();
      activityModelBinaryParameter1.getA();
      InteractionParameter interactionParameter2 = activityModelBinaryParameter1.getK();
      assertTrue(interactionParameter2.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getTwoParameterVanDerWaals();
      assertFalse(interactionParameter0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setA_vanLaar(activityModelBinaryParameter0);
      // Undeclared exception!
      try { 
        activityModelBinaryParameter0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Compound compound0 = new Compound("");
      activityModelBinaryParameter0.getValue(compound0, compound0);
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getB();
      Compound compound1 = new Compound("termo.cp.PolinomialCpEquation");
      interactionParameter0.setSymmetric(false);
      compound1.setA_Mathias_Copeman(325.14138);
      interactionParameter0.setValue(compound1, compound1, (-1.0));
      activityModelBinaryParameter0.setB(interactionParameter0);
      compound1.setC_dippr107Cp((-4493.54));
      InteractionParameter interactionParameter1 = activityModelBinaryParameter0.getA();
      interactionParameter1.keyFor(compound1, compound1);
      activityModelBinaryParameter0.setA_vanLaar(interactionParameter1);
      activityModelBinaryParameter0.setK(interactionParameter1);
      Object object0 = new Object();
      activityModelBinaryParameter0.equals(object0);
      activityModelBinaryParameter0.setAlpha(interactionParameter0);
      activityModelBinaryParameter0.setB(interactionParameter1);
      activityModelBinaryParameter0.setB(interactionParameter0);
      InteractionParameter interactionParameter2 = activityModelBinaryParameter0.getAlpha();
      activityModelBinaryParameter0.setTwoParameterVanDerWaals(interactionParameter2);
      assertFalse(activityModelBinaryParameter0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setK(activityModelBinaryParameter0);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertFalse(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getA_vanLaar();
      assertFalse(interactionParameter0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setTwoParameterVanDerWaals((InteractionParameter) null);
      activityModelBinaryParameter0.getK();
      activityModelBinaryParameter0.setAlpha((InteractionParameter) null);
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getA_vanLaar();
      Eqn101VaporPressure eqn101VaporPressure0 = new Eqn101VaporPressure();
      eqn101VaporPressure0.setC(0.0);
      eqn101VaporPressure0.getComponent();
      // Undeclared exception!
      try { 
        interactionParameter0.getValue((Compound) null, (Compound) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.binaryParameter.InteractionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      Eqn101VaporPressure eqn101VaporPressure0 = new Eqn101VaporPressure();
      eqn101VaporPressure0.getComponent();
      // Undeclared exception!
      try { 
        activityModelBinaryParameter1.keyFor((Compound) null, (Compound) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.binaryParameter.InteractionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setK((InteractionParameter) null);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertFalse(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      activityModelBinaryParameter1.setK((InteractionParameter) null);
      boolean boolean0 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = new InteractionParameter();
      Object object0 = new Object();
      interactionParameter0.equals(object0);
      activityModelBinaryParameter0.setAlpha(interactionParameter0);
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      String string0 = null;
      Compound compound0 = null;
      try {
        compound0 = new Compound((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.component.Compound", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setAlpha(activityModelBinaryParameter0);
      assertFalse(activityModelBinaryParameter0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setB(activityModelBinaryParameter1);
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getAlpha();
      Compound compound0 = new Compound();
      Eqn101VaporPressure eqn101VaporPressure0 = new Eqn101VaporPressure();
      compound0.setR_UNIQUAC(0.0);
      eqn101VaporPressure0.setComponent(compound0);
      ExperimentalDataList experimentalDataList0 = compound0.getVaporPressureList(eqn101VaporPressure0);
      experimentalDataList0.getComponent();
      // Undeclared exception!
      try { 
        interactionParameter0.keyFor((Compound) null, (Compound) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.binaryParameter.InteractionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Compound compound0 = new Compound();
      activityModelBinaryParameter0.setA((InteractionParameter) null);
      activityModelBinaryParameter0.getValue(compound0, compound0);
      activityModelBinaryParameter0.hashCode();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter0.equals(activityModelBinaryParameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.setB((InteractionParameter) null);
      activityModelBinaryParameter0.hashCode();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getTwoParameterVanDerWaals();
      assertFalse(interactionParameter0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      assertTrue(activityModelBinaryParameter1.equals((Object)activityModelBinaryParameter0));
      
      activityModelBinaryParameter1.setK(activityModelBinaryParameter0);
      boolean boolean0 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      ActivityModelBinaryParameter activityModelBinaryParameter1 = new ActivityModelBinaryParameter();
      boolean boolean0 = activityModelBinaryParameter1.equals(activityModelBinaryParameter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.equals((Object) null);
      activityModelBinaryParameter0.hashCode();
      InteractionParameter interactionParameter0 = new InteractionParameter();
      Eqn101VaporPressure eqn101VaporPressure0 = new Eqn101VaporPressure();
      eqn101VaporPressure0.getComponent();
      // Undeclared exception!
      try { 
        interactionParameter0.getValue((Compound) null, (Compound) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.binaryParameter.InteractionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getA();
      assertFalse(interactionParameter0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getB();
      assertFalse(interactionParameter0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = new InteractionParameter();
      activityModelBinaryParameter0.setTwoParameterVanDerWaals(interactionParameter0);
      activityModelBinaryParameter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = new InteractionParameter();
      activityModelBinaryParameter0.setTwoParameterVanDerWaals(interactionParameter0);
      InteractionParameter interactionParameter1 = activityModelBinaryParameter0.getB();
      activityModelBinaryParameter0.getA();
      activityModelBinaryParameter0.setTwoParameterVanDerWaals(interactionParameter1);
      assertNotSame(interactionParameter1, interactionParameter0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      activityModelBinaryParameter0.getAlpha();
      Compound compound0 = null;
      try {
        compound0 = new Compound((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.component.Compound", e);
      }
  }
}
