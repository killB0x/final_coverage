/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 05:10:38 GMT 2022
 */

package termo.eos.alpha;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import termo.component.Compound;
import termo.eos.alpha.MathiasCopemanEquation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathiasCopemanEquation_ESTest extends MathiasCopemanEquation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      Compound compound0 = new Compound();
      compound0.setC_Mathias_Copeman(2.0);
      double double0 = mathiasCopemanEquation0.TempOverAlphaTimesDerivativeAlphaRespectTemperature((-1.0), compound0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      mathiasCopemanEquation0.setX(Double.NaN);
      String string0 = mathiasCopemanEquation0.getEquation();
      assertEquals("\\alpha(T) =\\left[ 1 +  A \\left( 1- \\sqrt{T_r}\\right)+ B \\left( 1- \\sqrt{T_r}\\right)^2+ C  \\left( 1- \\sqrt{T_r}\\right)^3\\right]^2", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      mathiasCopemanEquation0.setX(2635.5);
      double double0 = mathiasCopemanEquation0.getX();
      assertEquals(2635.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      mathiasCopemanEquation0.setX((-1327));
      double double0 = mathiasCopemanEquation0.getX();
      assertEquals((-1327.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      Compound compound0 = new Compound("K_d:fJny`UH AK");
      mathiasCopemanEquation0.setParameter((-1076.812054), compound0, 1);
      double double0 = mathiasCopemanEquation0.getParameter(compound0, 1);
      assertEquals((-1076.812054), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      Compound compound0 = new Compound();
      compound0.setCriticalTemperature((-1.3331890482684114));
      double double0 = mathiasCopemanEquation0.alpha(0.0, compound0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, mathiasCopemanEquation0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      Compound compound0 = new Compound();
      compound0.setCriticalTemperature((-1.3331890482684114));
      double double0 = mathiasCopemanEquation0.TempOverAlphaTimesDerivativeAlphaRespectTemperature((-1798.374498860493), compound0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      mathiasCopemanEquation0.setX(1869.25307296535);
      Compound compound0 = new Compound();
      compound0.setCriticalTemperature(2464.07833);
      compound0.setB_Mathias_Copeman((-2783.44120874711));
      double double0 = mathiasCopemanEquation0.TempOverAlphaTimesDerivativeAlphaRespectTemperature(2293.3, compound0);
      assertEquals(1869.25307296535, mathiasCopemanEquation0.getX(), 0.01);
      assertEquals(54.70456956433061, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      // Undeclared exception!
      try { 
        mathiasCopemanEquation0.getParameter((Compound) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.eos.alpha.MathiasCopemanEquation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      // Undeclared exception!
      try { 
        mathiasCopemanEquation0.alpha(2.0, (Compound) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.eos.alpha.MathiasCopemanEquation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      // Undeclared exception!
      try { 
        mathiasCopemanEquation0.TempOverAlphaTimesDerivativeAlphaRespectTemperature(0.0, (Compound) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.eos.alpha.MathiasCopemanEquation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      double double0 = mathiasCopemanEquation0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      String string0 = mathiasCopemanEquation0.getParameterName(2);
      assertEquals("C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      String string0 = mathiasCopemanEquation0.getParameterName(1);
      assertEquals("B", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      String string0 = mathiasCopemanEquation0.getParameterName(3);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      String string0 = mathiasCopemanEquation0.getParameterName(0);
      assertNotNull(string0);
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      Compound compound0 = new Compound();
      double double0 = mathiasCopemanEquation0.getParameter(compound0, 3);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      Compound compound0 = new Compound();
      double double0 = mathiasCopemanEquation0.getParameter(compound0, 2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      Compound compound0 = new Compound();
      double double0 = mathiasCopemanEquation0.getParameter(compound0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      // Undeclared exception!
      try { 
        mathiasCopemanEquation0.setParameter(405.0, (Compound) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.eos.alpha.MathiasCopemanEquation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      Compound compound0 = new Compound("Zoo.]zg@|,D");
      mathiasCopemanEquation0.setParameter(1.55171, compound0, 1);
      double double0 = mathiasCopemanEquation0.getParameter(compound0, 1);
      assertEquals(1.55171, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      Compound compound0 = new Compound();
      mathiasCopemanEquation0.setParameter(1869.25307296535, compound0, 3);
      assertEquals(0.0, compound0.getC_Mathias_Copeman(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      Compound compound0 = new Compound();
      mathiasCopemanEquation0.setParameter(1.0, compound0, 0);
      compound0.setCriticalTemperature((-1.3331890482684114));
      double double0 = mathiasCopemanEquation0.TempOverAlphaTimesDerivativeAlphaRespectTemperature((-1798.374498860493), compound0);
      assertEquals(1.0, compound0.getA_Mathias_Copeman(), 0.01);
      assertEquals((-1.0575908490005483), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      String string0 = mathiasCopemanEquation0.getEquation();
      assertEquals("\\alpha(T) =\\left[ 1 +  A \\left( 1- \\sqrt{T_r}\\right)\\right]^2", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      int int0 = mathiasCopemanEquation0.numberOfParameters();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MathiasCopemanEquation mathiasCopemanEquation0 = new MathiasCopemanEquation();
      mathiasCopemanEquation0.setX(1869.25307296535);
      mathiasCopemanEquation0.getEquation();
      assertEquals(1869.25307296535, mathiasCopemanEquation0.getX(), 0.01);
  }
}
