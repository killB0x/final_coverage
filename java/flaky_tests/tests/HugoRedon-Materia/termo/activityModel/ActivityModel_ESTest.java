/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 05:06:58 GMT 2022
 */

package termo.activityModel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import termo.activityModel.NRTLActivityModel;
import termo.activityModel.VanLaarActivityModel;
import termo.activityModel.WilsonActivityModel;
import termo.binaryParameter.ActivityModelBinaryParameter;
import termo.binaryParameter.InteractionParameter;
import termo.component.Compound;
import termo.eos.Cubic;
import termo.eos.alpha.commonaAlphaEquationsImplementation.PengAndRobinsonAlpha;
import termo.eos.mixingRule.HuronVidalOrbeySandlerModification;
import termo.eos.mixingRule.MathiasKlotzPrausnitzMixingRule;
import termo.eos.mixingRule.MixingRule;
import termo.eos.mixingRule.VDWMixingRule;
import termo.eos.mixingRule.WongSandlerMixingRule;
import termo.matter.Mixture;
import termo.matter.Substance;
import termo.phase.Phase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ActivityModel_ESTest extends ActivityModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Compound compound1 = new Compound();
      nRTLActivityModel0.setParameter(0.0, compound0, compound1, activityModelBinaryParameter0, 3);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compound compound0 = new Compound();
      Compound compound1 = new Compound("Aji");
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      vanLaarActivityModel0.setParameter(0.0, compound0, compound1, activityModelBinaryParameter0, 2);
      assertEquals("Van Laar", vanLaarActivityModel0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Compound compound1 = new Compound();
      nRTLActivityModel0.setParameter((-1027.53784195354), compound0, compound1, activityModelBinaryParameter0, 1);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Compound compound1 = new Compound();
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      nRTLActivityModel0.setParameter(0, compound1, compound0, activityModelBinaryParameter0, 0);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      Compound compound0 = new Compound("Bij");
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Compound compound1 = new Compound();
      nRTLActivityModel0.getParameter(compound0, compound1, activityModelBinaryParameter0, 3);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Compound compound1 = new Compound();
      nRTLActivityModel0.getParameter(compound1, compound0, activityModelBinaryParameter0, 2);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Compound compound1 = new Compound();
      nRTLActivityModel0.getParameter(compound0, compound1, activityModelBinaryParameter0, 1);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Compound compound1 = new Compound();
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      nRTLActivityModel0.getParameter(compound1, compound0, activityModelBinaryParameter0, 0);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      double double0 = nRTLActivityModel0.tau(compound0, compound0, activityModelBinaryParameter0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Compound compound1 = new Compound();
      double double0 = nRTLActivityModel0.tau(compound1, compound0, activityModelBinaryParameter0, 1263.105);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      nRTLActivityModel0.setParameter((-1027.53784195354), compound0, compound0, activityModelBinaryParameter0, 1);
      double double0 = nRTLActivityModel0.tau(compound0, compound0, activityModelBinaryParameter0, 1263.105);
      assertEquals((-9.784163367072731E-5), double0, 0.01);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      WongSandlerMixingRule wongSandlerMixingRule0 = new WongSandlerMixingRule(nRTLActivityModel0, cubic0);
      Mixture mixture0 = new Mixture(cubic0, phase0, wongSandlerMixingRule0, activityModelBinaryParameter0);
      double double0 = nRTLActivityModel0.parcialExcessGibbsRespectTemperature(mixture0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      int int0 = nRTLActivityModel0.numberOfParameters();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      vanLaarActivityModel0.setParameter(222.297673, compound0, compound0, activityModelBinaryParameter0, 0);
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      double double0 = nRTLActivityModel0.getParameter(compound0, compound0, activityModelBinaryParameter0, 0);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
      assertEquals(222.297673, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      nRTLActivityModel0.setName((String) null);
      String string0 = nRTLActivityModel0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      String string0 = nRTLActivityModel0.getName();
      assertEquals("NRTL", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      wilsonActivityModel0.setName("");
      String string0 = wilsonActivityModel0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Cubic cubic0 = new Cubic();
      PengAndRobinsonAlpha pengAndRobinsonAlpha0 = new PengAndRobinsonAlpha();
      LinkedHashSet<Compound> linkedHashSet0 = new LinkedHashSet<Compound>();
      Phase phase0 = Phase.LIQUID;
      HuronVidalOrbeySandlerModification huronVidalOrbeySandlerModification0 = new HuronVidalOrbeySandlerModification(nRTLActivityModel0, cubic0);
      Mixture mixture0 = new Mixture(cubic0, pengAndRobinsonAlpha0, linkedHashSet0, phase0, huronVidalOrbeySandlerModification0, activityModelBinaryParameter0);
      double double0 = nRTLActivityModel0.excessGibbsEnergy(mixture0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      Substance substance0 = new Substance();
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.VAPOR;
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, (MixingRule) null, activityModelBinaryParameter0);
      double double0 = wilsonActivityModel0.activityCoefficient(substance0, mixture0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      // Undeclared exception!
      try { 
        nRTLActivityModel0.tau((Compound) null, (Compound) null, activityModelBinaryParameter0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.binaryParameter.InteractionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      // Undeclared exception!
      try { 
        wilsonActivityModel0.setParameter(0.0, (Compound) null, (Compound) null, activityModelBinaryParameter0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.binaryParameter.InteractionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        vanLaarActivityModel0.parcialExcessGibbsRespectTemperature(mixture0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      // Undeclared exception!
      try { 
        nRTLActivityModel0.parcialExcessGibbsRespectTemperature((Mixture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.activityModel.NRTLActivityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      Mixture mixture0 = new Mixture();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      InteractionParameter interactionParameter0 = activityModelBinaryParameter0.getTwoParameterVanDerWaals();
      mixture0.setBinaryParameters(interactionParameter0);
      // Undeclared exception!
      try { 
        vanLaarActivityModel0.parcialExcessGibbsRespectTemperature(mixture0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @704154e9)
         //
         verifyException("termo.activityModel.VanLaarActivityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        vanLaarActivityModel0.excessGibbsEnergy(mixture0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      // Undeclared exception!
      try { 
        vanLaarActivityModel0.excessGibbsEnergy((Mixture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.activityModel.VanLaarActivityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      Phase phase0 = Phase.VAPOR;
      MathiasKlotzPrausnitzMixingRule mathiasKlotzPrausnitzMixingRule0 = new MathiasKlotzPrausnitzMixingRule();
      InteractionParameter interactionParameter0 = new InteractionParameter();
      Mixture mixture0 = new Mixture((Cubic) null, phase0, mathiasKlotzPrausnitzMixingRule0, interactionParameter0);
      // Undeclared exception!
      try { 
        nRTLActivityModel0.excessGibbsEnergy(mixture0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @704154e9)
         //
         verifyException("termo.activityModel.NRTLActivityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      Substance substance0 = new Substance();
      Mixture mixture0 = new Mixture();
      // Undeclared exception!
      try { 
        vanLaarActivityModel0.activityCoefficient(substance0, mixture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.activityModel.VanLaarActivityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      Substance substance0 = new Substance();
      Cubic cubic0 = new Cubic();
      Phase phase0 = Phase.LIQUID;
      VDWMixingRule vDWMixingRule0 = new VDWMixingRule();
      InteractionParameter interactionParameter0 = new InteractionParameter();
      Mixture mixture0 = new Mixture(cubic0, phase0, vDWMixingRule0, interactionParameter0);
      // Undeclared exception!
      try { 
        nRTLActivityModel0.activityCoefficient(substance0, mixture0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class termo.binaryParameter.InteractionParameter cannot be cast to class termo.binaryParameter.ActivityModelBinaryParameter (termo.binaryParameter.InteractionParameter and termo.binaryParameter.ActivityModelBinaryParameter are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @704154e9)
         //
         verifyException("termo.activityModel.NRTLActivityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      Compound compound0 = new Compound("go7.iy^@\"V1[<$MqKb");
      nRTLActivityModel0.setParameter(2354.29796128757, compound0, (Compound) null, activityModelBinaryParameter0, (-2122));
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      nRTLActivityModel0.setParameter(1.0, compound0, compound0, activityModelBinaryParameter0, 1);
      double double0 = nRTLActivityModel0.tau(compound0, compound0, activityModelBinaryParameter0, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      nRTLActivityModel0.getParameterName((-1171));
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VanLaarActivityModel vanLaarActivityModel0 = new VanLaarActivityModel();
      String string0 = vanLaarActivityModel0.getParameterName(3);
      assertEquals("Bji", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      String string0 = nRTLActivityModel0.getParameterName(1);
      assertEquals("Aji", string0);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      String string0 = nRTLActivityModel0.getParameterName(0);
      assertEquals("Aij", string0);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      Compound compound0 = new Compound();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      double double0 = nRTLActivityModel0.getParameter(compound0, compound0, activityModelBinaryParameter0, (-2180));
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WilsonActivityModel wilsonActivityModel0 = new WilsonActivityModel();
      ActivityModelBinaryParameter activityModelBinaryParameter0 = new ActivityModelBinaryParameter();
      // Undeclared exception!
      try { 
        wilsonActivityModel0.getParameter((Compound) null, (Compound) null, activityModelBinaryParameter0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("termo.binaryParameter.InteractionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NRTLActivityModel nRTLActivityModel0 = new NRTLActivityModel();
      String string0 = nRTLActivityModel0.getParameterName(2);
      assertEquals(5, nRTLActivityModel0.numberOfParameters());
      assertEquals("Bij", string0);
  }
}
