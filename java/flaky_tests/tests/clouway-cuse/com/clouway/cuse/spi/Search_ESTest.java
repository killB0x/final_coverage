/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:21:45 GMT 2022
 */

package com.clouway.cuse.spi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.clouway.cuse.gae.GaeSearchApiMatchedIdObjectFinder;
import com.clouway.cuse.gae.filters.MultiFieldValueFilter;
import com.clouway.cuse.spi.DefaultIdConverterCatalog;
import com.clouway.cuse.spi.EntityLoader;
import com.clouway.cuse.spi.IdConverterCatalog;
import com.clouway.cuse.spi.IndexStrategyFactory;
import com.clouway.cuse.spi.IndexingStrategyCatalog;
import com.clouway.cuse.spi.IndexingStrategyCatalogImpl;
import com.clouway.cuse.spi.Search;
import com.clouway.cuse.spi.SortOrder;
import com.clouway.cuse.spi.SortType;
import com.clouway.cuse.spi.filters.SearchFilter;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Search_ESTest extends Search_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Search.SearchBuilder<Integer> search_SearchBuilder0 = new Search.SearchBuilder<Integer>(class0, (EntityLoader) null, (IndexingStrategyCatalog) null, gaeSearchApiMatchedIdObjectFinder0);
      Search.SearchBuilder<Integer> search_SearchBuilder1 = search_SearchBuilder0.where("5O#g$)Nx(=+");
      assertNotNull(search_SearchBuilder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IndexingStrategyCatalogImpl indexingStrategyCatalogImpl0 = new IndexingStrategyCatalogImpl((IndexStrategyFactory) null);
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Class<Integer> class0 = Integer.class;
      Search.SearchBuilder<Integer> search_SearchBuilder0 = new Search.SearchBuilder<Integer>(class0, (EntityLoader) null, indexingStrategyCatalogImpl0, gaeSearchApiMatchedIdObjectFinder0);
      Search.SearchBuilder<Integer> search_SearchBuilder1 = search_SearchBuilder0.inIndex(class0);
      assertNotNull(search_SearchBuilder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      EntityLoader entityLoader0 = mock(EntityLoader.class, new ViolatedAssumptionAnswer());
      IndexingStrategyCatalogImpl indexingStrategyCatalogImpl0 = new IndexingStrategyCatalogImpl((IndexStrategyFactory) null);
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Search.SearchBuilder<Object> search_SearchBuilder0 = new Search.SearchBuilder<Object>(class0, class0, entityLoader0, indexingStrategyCatalogImpl0, (IdConverterCatalog) null, gaeSearchApiMatchedIdObjectFinder0);
      Search.SearchBuilder search_SearchBuilder1 = search_SearchBuilder0.and();
      assertNotNull(search_SearchBuilder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IndexingStrategyCatalogImpl indexingStrategyCatalogImpl0 = new IndexingStrategyCatalogImpl((IndexStrategyFactory) null);
      DefaultIdConverterCatalog defaultIdConverterCatalog0 = new DefaultIdConverterCatalog();
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Class<String> class0 = String.class;
      EntityLoader entityLoader0 = mock(EntityLoader.class, new ViolatedAssumptionAnswer());
      Search.SearchBuilder<String> search_SearchBuilder0 = new Search.SearchBuilder<String>(class0, class0, entityLoader0, indexingStrategyCatalogImpl0, defaultIdConverterCatalog0, gaeSearchApiMatchedIdObjectFinder0);
      Search.SearchBuilder<String> search_SearchBuilder1 = search_SearchBuilder0.where("}uN");
      Search.SearchBuilder search_SearchBuilder2 = search_SearchBuilder1.and();
      assertNotNull(search_SearchBuilder2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      EntityLoader entityLoader0 = mock(EntityLoader.class, new ViolatedAssumptionAnswer());
      IndexingStrategyCatalogImpl indexingStrategyCatalogImpl0 = new IndexingStrategyCatalogImpl((IndexStrategyFactory) null);
      DefaultIdConverterCatalog defaultIdConverterCatalog0 = new DefaultIdConverterCatalog();
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Search.SearchBuilder<Object> search_SearchBuilder0 = new Search.SearchBuilder<Object>(class0, class0, entityLoader0, indexingStrategyCatalogImpl0, defaultIdConverterCatalog0, gaeSearchApiMatchedIdObjectFinder0);
      Search.SearchBuilder<Object> search_SearchBuilder1 = search_SearchBuilder0.where("");
      assertNotNull(search_SearchBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IndexingStrategyCatalogImpl indexingStrategyCatalogImpl0 = new IndexingStrategyCatalogImpl((IndexStrategyFactory) null);
      DefaultIdConverterCatalog defaultIdConverterCatalog0 = new DefaultIdConverterCatalog();
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Search.SearchBuilder<Object> search_SearchBuilder0 = new Search.SearchBuilder<Object>((Class<Object>) null, class0, (EntityLoader) null, indexingStrategyCatalogImpl0, defaultIdConverterCatalog0, gaeSearchApiMatchedIdObjectFinder0);
      Search.SearchBuilder<Object> search_SearchBuilder1 = search_SearchBuilder0.where("k");
      assertNotNull(search_SearchBuilder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndexingStrategyCatalogImpl indexingStrategyCatalogImpl0 = new IndexingStrategyCatalogImpl((IndexStrategyFactory) null);
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Class<Integer> class0 = Integer.class;
      Search.SearchBuilder<Integer> search_SearchBuilder0 = new Search.SearchBuilder<Integer>(class0, (EntityLoader) null, indexingStrategyCatalogImpl0, gaeSearchApiMatchedIdObjectFinder0);
      Search.SearchBuilder<Integer> search_SearchBuilder1 = search_SearchBuilder0.where((String) null);
      assertNotNull(search_SearchBuilder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Class<String> class0 = String.class;
      Search.SearchBuilder<String> search_SearchBuilder0 = new Search.SearchBuilder<String>(class0, (EntityLoader) null, (IndexingStrategyCatalog) null, gaeSearchApiMatchedIdObjectFinder0);
      MultiFieldValueFilter multiFieldValueFilter0 = new MultiFieldValueFilter("B");
      Search.SearchBuilder<String> search_SearchBuilder1 = search_SearchBuilder0.where("B", (SearchFilter) multiFieldValueFilter0);
      assertNotNull(search_SearchBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndexingStrategyCatalogImpl indexingStrategyCatalogImpl0 = new IndexingStrategyCatalogImpl((IndexStrategyFactory) null);
      DefaultIdConverterCatalog defaultIdConverterCatalog0 = new DefaultIdConverterCatalog();
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Class<Integer> class0 = Integer.class;
      EntityLoader entityLoader0 = mock(EntityLoader.class, new ViolatedAssumptionAnswer());
      Search.SearchBuilder<Integer> search_SearchBuilder0 = new Search.SearchBuilder<Integer>(class0, class0, entityLoader0, indexingStrategyCatalogImpl0, defaultIdConverterCatalog0, gaeSearchApiMatchedIdObjectFinder0);
      Search<Integer> search0 = search_SearchBuilder0.fetchMaximum(0);
      assertNotNull(search0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IndexingStrategyCatalogImpl indexingStrategyCatalogImpl0 = new IndexingStrategyCatalogImpl((IndexStrategyFactory) null);
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Class<String> class0 = String.class;
      Search.SearchBuilder<String> search_SearchBuilder0 = new Search.SearchBuilder<String>(class0, (EntityLoader) null, indexingStrategyCatalogImpl0, gaeSearchApiMatchedIdObjectFinder0);
      Search<String> search0 = search_SearchBuilder0.returnAll();
      // Undeclared exception!
      try { 
        search0.now();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.clouway.cuse.spi.IndexingStrategyCatalogImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      EntityLoader entityLoader0 = mock(EntityLoader.class, new ViolatedAssumptionAnswer());
      IndexingStrategyCatalogImpl indexingStrategyCatalogImpl0 = new IndexingStrategyCatalogImpl((IndexStrategyFactory) null);
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Search.SearchBuilder<Object> search_SearchBuilder0 = new Search.SearchBuilder<Object>(class0, class0, entityLoader0, indexingStrategyCatalogImpl0, (IdConverterCatalog) null, gaeSearchApiMatchedIdObjectFinder0);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      SortType sortType0 = SortType.TEXT;
      Search.SearchBuilder<Object> search_SearchBuilder1 = search_SearchBuilder0.sortBy((String) null, sortOrder0, sortType0);
      assertNotNull(search_SearchBuilder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IndexingStrategyCatalogImpl indexingStrategyCatalogImpl0 = new IndexingStrategyCatalogImpl((IndexStrategyFactory) null);
      DefaultIdConverterCatalog defaultIdConverterCatalog0 = new DefaultIdConverterCatalog();
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Class<Integer> class0 = Integer.class;
      EntityLoader entityLoader0 = mock(EntityLoader.class, new ViolatedAssumptionAnswer());
      Search.SearchBuilder<Integer> search_SearchBuilder0 = new Search.SearchBuilder<Integer>(class0, class0, entityLoader0, indexingStrategyCatalogImpl0, defaultIdConverterCatalog0, gaeSearchApiMatchedIdObjectFinder0);
      Search.SearchBuilder<Integer> search_SearchBuilder1 = search_SearchBuilder0.offset(1);
      assertNotNull(search_SearchBuilder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      EntityLoader entityLoader0 = mock(EntityLoader.class, new ViolatedAssumptionAnswer());
      IndexingStrategyCatalogImpl indexingStrategyCatalogImpl0 = new IndexingStrategyCatalogImpl((IndexStrategyFactory) null);
      DefaultIdConverterCatalog defaultIdConverterCatalog0 = new DefaultIdConverterCatalog();
      GaeSearchApiMatchedIdObjectFinder gaeSearchApiMatchedIdObjectFinder0 = new GaeSearchApiMatchedIdObjectFinder();
      Search.SearchBuilder<Object> search_SearchBuilder0 = new Search.SearchBuilder<Object>(class0, class0, entityLoader0, indexingStrategyCatalogImpl0, defaultIdConverterCatalog0, gaeSearchApiMatchedIdObjectFinder0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiFieldValueFilter multiFieldValueFilter0 = new MultiFieldValueFilter("}uN");
      Search.SearchBuilder search_SearchBuilder1 = search_SearchBuilder0.where((List<String>) linkedList0, (SearchFilter) multiFieldValueFilter0);
      assertNotNull(search_SearchBuilder1);
  }
}
