/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 18:50:05 GMT 2022
 */

package us.parr.lib.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.parr.lib.util.Pair;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object0);
      Pair<Object, Pair<Object, Object>> pair1 = new Pair<Object, Pair<Object, Object>>(object0, pair0);
      String string0 = pair1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object0);
      Pair<Object, Pair<Object, Object>> pair1 = new Pair<Object, Pair<Object, Object>>(object0, pair0);
      pair1.hashCode();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object0);
      Pair<Object, Object> pair1 = new Pair<Object, Object>(pair0, object0);
      Pair<Object, Object> pair2 = new Pair<Object, Object>(pair0, object0);
      boolean boolean0 = pair1.equals(pair2);
      assertTrue(boolean0);
      assertFalse(pair2.equals((Object)pair0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object0);
      Pair<Object, Object> pair1 = new Pair<Object, Object>(pair0, object0);
      Pair<Object, Object> pair2 = new Pair<Object, Object>(pair0, pair0);
      boolean boolean0 = pair1.equals(pair2);
      assertFalse(pair2.equals((Object)pair1));
      assertFalse(boolean0);
      assertFalse(pair0.equals((Object)pair1));
      assertFalse(pair1.equals((Object)pair0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object0);
      Pair<Object, Object> pair1 = new Pair<Object, Object>(pair0, object0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
      assertFalse(pair0.equals((Object)pair1));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object0);
      boolean boolean0 = pair0.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object0);
      boolean boolean0 = pair0.equals(object0);
      assertFalse(boolean0);
  }
}
