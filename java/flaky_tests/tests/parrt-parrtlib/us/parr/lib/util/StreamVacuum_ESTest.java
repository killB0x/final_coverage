/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 18:57:01 GMT 2022
 */

package us.parr.lib.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.parr.lib.util.StreamVacuum;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StreamVacuum_ESTest extends StreamVacuum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StreamVacuum streamVacuum0 = new StreamVacuum(dataInputStream0);
      streamVacuum0.run();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\n", streamVacuum0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StreamVacuum streamVacuum0 = new StreamVacuum(sequenceInputStream0);
      streamVacuum0.start();
      streamVacuum0.join();
      assertEquals("", streamVacuum0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      StreamVacuum streamVacuum0 = new StreamVacuum(dataInputStream0);
      // Undeclared exception!
      try { 
        streamVacuum0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 10);
      StreamVacuum streamVacuum0 = new StreamVacuum(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        streamVacuum0.run();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M;w");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      // Undeclared exception!
      try { 
        StreamVacuum.append(bufferedReader0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.util.StreamVacuum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      bufferedReader0.close();
      StringBuilder stringBuilder0 = new StringBuilder(10);
      try { 
        StreamVacuum.append(bufferedReader0, stringBuilder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StreamVacuum streamVacuum0 = null;
      try {
        streamVacuum0 = new StreamVacuum((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B4A}kD-cfXNApCk_1_");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StreamVacuum.append(bufferedReader0, stringBuilder0);
      assertEquals("B4A}kD-cfXNApCk_1_\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StreamVacuum streamVacuum0 = new StreamVacuum(pipedInputStream0);
      // Undeclared exception!
      try { 
        streamVacuum0.join();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.util.StreamVacuum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      StreamVacuum streamVacuum0 = new StreamVacuum(pushbackInputStream0);
      streamVacuum0.run();
      assertEquals("", streamVacuum0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StreamVacuum streamVacuum0 = new StreamVacuum(pipedInputStream0);
      String string0 = streamVacuum0.toString();
      assertEquals("", string0);
  }
}
