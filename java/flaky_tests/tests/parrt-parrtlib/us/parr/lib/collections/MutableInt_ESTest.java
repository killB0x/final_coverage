/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 18:53:37 GMT 2022
 */

package us.parr.lib.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.parr.lib.collections.MutableInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MutableInt_ESTest extends MutableInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2052));
      assertEquals((-2052), mutableInt0.v);
      
      mutableInt0.v = (-2052);
      mutableInt0.v = 562;
      MutableInt mutableInt1 = new MutableInt(0);
      boolean boolean0 = mutableInt1.equals(mutableInt0.v);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(2634);
      long long0 = mutableInt0.longValue();
      assertEquals(2634L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-510));
      long long0 = mutableInt0.longValue();
      assertEquals((-510L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2052));
      mutableInt0.v = (-2052);
      mutableInt0.v = 562;
      mutableInt0.v = 1;
      mutableInt0.v = 0;
      int int0 = mutableInt0.intValue();
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2052));
      mutableInt0.v = (-2052);
      mutableInt0.v = 562;
      int int0 = mutableInt0.intValue();
      assertEquals((short)562, mutableInt0.shortValue());
      assertEquals(562, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(1242);
      mutableInt0.v = 1242;
      mutableInt0.v = 0;
      float float0 = mutableInt0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2052));
      float float0 = mutableInt0.floatValue();
      assertEquals((-2052.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      mutableInt0.v = 0;
      mutableInt0.v = (-294);
      mutableInt0.v = 1753;
      double double0 = mutableInt0.doubleValue();
      assertEquals(1753.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      mutableInt0.v = 0;
      mutableInt0.v = (-294);
      double double0 = mutableInt0.doubleValue();
      assertEquals((-294.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2052));
      mutableInt0.v = (-2052);
      mutableInt0.v = 562;
      MutableInt mutableInt1 = new MutableInt(0);
      int int0 = mutableInt0.compareTo((Number) mutableInt1);
      assertEquals((byte)50, mutableInt0.byteValue());
      assertEquals(562, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2052));
      mutableInt0.v = (-2052);
      mutableInt0.v = 562;
      MutableInt mutableInt1 = new MutableInt(0);
      int int0 = mutableInt1.compareTo((Number) mutableInt0);
      assertEquals((short)562, mutableInt0.shortValue());
      assertEquals((-562), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(3360);
      // Undeclared exception!
      try { 
        mutableInt0.compareTo((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-510));
      int int0 = mutableInt0.intValue();
      assertEquals((-510), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(5330);
      Integer integer0 = new Integer((-3027));
      boolean boolean0 = mutableInt0.equals(integer0);
      assertFalse(boolean0);
      assertEquals(5330, mutableInt0.v);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-510));
      boolean boolean0 = mutableInt0.equals(mutableInt0.v);
      assertEquals((-510), mutableInt0.v);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-510));
      Object object0 = new Object();
      boolean boolean0 = mutableInt0.equals(object0);
      assertEquals((-510), mutableInt0.v);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(5330);
      float float0 = mutableInt0.floatValue();
      assertEquals(5330.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(1041);
      int int0 = mutableInt0.compareTo((Number) mutableInt0);
      assertEquals(1041, mutableInt0.v);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-510));
      mutableInt0.hashCode();
      assertEquals((-510), mutableInt0.v);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      long long0 = mutableInt0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      double double0 = mutableInt0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(2271);
      String string0 = mutableInt0.toString();
      assertEquals("2271", string0);
  }
}
