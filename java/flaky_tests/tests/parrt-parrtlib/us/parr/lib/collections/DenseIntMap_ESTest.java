/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 18:47:58 GMT 2022
 */

package us.parr.lib.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.parr.lib.collections.DenseIntMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DenseIntMap_ESTest extends DenseIntMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DenseIntMap<AbstractMap.SimpleImmutableEntry<Object, Object>> denseIntMap0 = new DenseIntMap<AbstractMap.SimpleImmutableEntry<Object, Object>>(934);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer0, integer0);
      denseIntMap0.put(integer0, abstractMap_SimpleImmutableEntry0);
      assertTrue(denseIntMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DenseIntMap<Object> denseIntMap0 = new DenseIntMap<Object>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) denseIntMap0;
      denseIntMap0.buckets = objectArray0;
      Integer integer0 = Integer.valueOf(0);
      DenseIntMap denseIntMap1 = (DenseIntMap)denseIntMap0.put(integer0, (Object) integer0);
      assertTrue(denseIntMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DenseIntMap<Object> denseIntMap0 = new DenseIntMap<Object>(508);
      Integer integer0 = new Integer(0);
      Object object0 = denseIntMap0.get((Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DenseIntMap<Object> denseIntMap0 = new DenseIntMap<Object>();
      Object object0 = denseIntMap0.get(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DenseIntMap<Object> denseIntMap0 = new DenseIntMap<Object>(508);
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(denseIntMap0).when(biFunction0).apply(any() , any());
      denseIntMap0.compute(integer0, biFunction0);
      denseIntMap0.get(0);
      assertTrue(denseIntMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DenseIntMap<Comparable<Object>> denseIntMap0 = new DenseIntMap<Comparable<Object>>();
      Integer integer0 = new Integer(1);
      boolean boolean0 = denseIntMap0.containsKey(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      DenseIntMap<AbstractMap.SimpleImmutableEntry<Object, Object>> denseIntMap1 = new DenseIntMap<AbstractMap.SimpleImmutableEntry<Object, Object>>(0);
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>((Object) null, denseIntMap0);
      // Undeclared exception!
      try { 
        denseIntMap1.put(integer0, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      denseIntMap0.buckets = null;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        denseIntMap0.put((-3681), integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>(0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        denseIntMap0.put(0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DenseIntMap<Object> denseIntMap0 = new DenseIntMap<Object>(1);
      denseIntMap0.buckets = null;
      // Undeclared exception!
      try { 
        denseIntMap0.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      denseIntMap0.buckets = null;
      // Undeclared exception!
      try { 
        denseIntMap0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DenseIntMap<Object> denseIntMap0 = new DenseIntMap<Object>();
      // Undeclared exception!
      try { 
        denseIntMap0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DenseIntMap<Comparable<Object>> denseIntMap0 = new DenseIntMap<Comparable<Object>>();
      DenseIntMap<AbstractMap.SimpleImmutableEntry<Object, Object>> denseIntMap1 = new DenseIntMap<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        denseIntMap1.get((Object) denseIntMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class us.parr.lib.collections.DenseIntMap cannot be cast to class java.lang.Integer (us.parr.lib.collections.DenseIntMap is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3f80ed9; java.lang.Integer is in module java.base of loader 'bootstrap')
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DenseIntMap<Object> denseIntMap0 = new DenseIntMap<Object>(834);
      Integer integer0 = new Integer(834);
      // Undeclared exception!
      try { 
        denseIntMap0.get((Object) integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 834 out of bounds for length 834
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DenseIntMap<Comparable<Integer>> denseIntMap0 = new DenseIntMap<Comparable<Integer>>();
      // Undeclared exception!
      try { 
        denseIntMap0.forEach((BiConsumer<? super Integer, ? super Comparable<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      // Undeclared exception!
      try { 
        denseIntMap0.containsValue(denseIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      // Undeclared exception!
      try { 
        denseIntMap0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      // Undeclared exception!
      try { 
        denseIntMap0.containsKey(denseIntMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class us.parr.lib.collections.DenseIntMap cannot be cast to class java.lang.Integer (us.parr.lib.collections.DenseIntMap is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3f80ed9; java.lang.Integer is in module java.base of loader 'bootstrap')
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      Integer integer0 = new Integer((-3381));
      // Undeclared exception!
      try { 
        denseIntMap0.containsKey(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3381 out of bounds for length 10
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DenseIntMap<Object> denseIntMap0 = null;
      try {
        denseIntMap0 = new DenseIntMap<Object>((-2025));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2025
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>(10);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      denseIntMap0.buckets = integerArray0;
      int int0 = denseIntMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DenseIntMap<Comparable<Object>> denseIntMap0 = new DenseIntMap<Comparable<Object>>();
      int int0 = denseIntMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      Integer integer0 = new Integer(0);
      denseIntMap0.putIfAbsent(integer0, integer0);
      BiConsumer<Object, Integer> biConsumer0 = (BiConsumer<Object, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      denseIntMap0.forEach(biConsumer0);
      assertTrue(denseIntMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      Integer integer0 = new Integer((-10));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      DenseIntMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>> denseIntMap0 = new DenseIntMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      denseIntMap0.buckets = abstractMap_SimpleImmutableEntryArray0;
      boolean boolean0 = denseIntMap0.containsValue(abstractMap_SimpleImmutableEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      DenseIntMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>> denseIntMap1 = new DenseIntMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      Integer integer0 = new Integer(9);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntryArray0[0];
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntryArray0[2];
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntryArray0[0];
      denseIntMap1.buckets = abstractMap_SimpleImmutableEntryArray0;
      boolean boolean0 = denseIntMap1.containsValue(denseIntMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DenseIntMap<Object> denseIntMap0 = new DenseIntMap<Object>(852);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) denseIntMap0;
      denseIntMap0.buckets = objectArray0;
      Integer integer0 = new Integer(1);
      boolean boolean0 = denseIntMap0.containsKey(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DenseIntMap<Object> denseIntMap0 = new DenseIntMap<Object>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) denseIntMap0;
      denseIntMap0.buckets = objectArray0;
      boolean boolean0 = denseIntMap0.isEmpty();
      assertEquals(1, denseIntMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DenseIntMap<Comparable<Object>> denseIntMap0 = new DenseIntMap<Comparable<Object>>();
      boolean boolean0 = denseIntMap0.isEmpty();
      assertEquals(0, denseIntMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      // Undeclared exception!
      try { 
        denseIntMap0.entrySet();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DenseIntMap<Object> denseIntMap0 = new DenseIntMap<Object>();
      // Undeclared exception!
      try { 
        denseIntMap0.values();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      denseIntMap0.clear();
      assertFalse(denseIntMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      Integer integer0 = new Integer(0);
      denseIntMap0.put(0, integer0);
      assertEquals(1, denseIntMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DenseIntMap<Object> denseIntMap0 = new DenseIntMap<Object>(1);
      Set<Integer> set0 = denseIntMap0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      // Undeclared exception!
      try { 
        denseIntMap0.putAll(denseIntMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      // Undeclared exception!
      try { 
        denseIntMap0.remove((Object) denseIntMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DenseIntMap<Integer> denseIntMap0 = new DenseIntMap<Integer>();
      // Undeclared exception!
      try { 
        denseIntMap0.get((-1204));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1204 out of bounds for length 10
         //
         verifyException("us.parr.lib.collections.DenseIntMap", e);
      }
  }
}
