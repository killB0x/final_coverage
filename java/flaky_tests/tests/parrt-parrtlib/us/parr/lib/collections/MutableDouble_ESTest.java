/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 18:55:22 GMT 2022
 */

package us.parr.lib.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.parr.lib.collections.MutableDouble;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MutableDouble_ESTest extends MutableDouble_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      MutableDouble mutableDouble1 = new MutableDouble((-2450.2572685441));
      boolean boolean0 = mutableDouble1.equals(mutableDouble0);
      assertFalse(mutableDouble0.equals((Object)mutableDouble1));
      assertFalse(boolean0);
      assertEquals((-2450.2572685441), mutableDouble1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = 0.0;
      long long0 = mutableDouble0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = 1020.6579683167;
      long long0 = mutableDouble0.longValue();
      assertEquals(1020L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(0.0);
      mutableDouble0.intValue();
      assertEquals(0.0, mutableDouble0.v, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = 1020.6579683167;
      int int0 = mutableDouble0.intValue();
      assertEquals((short)1020, mutableDouble0.shortValue());
      assertEquals(1020, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1189.8589));
      mutableDouble0.v = (-1189.8589);
      mutableDouble0.v = (-1189.8589);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-3389.8789735085293);
      mutableDouble0.v = 0.0;
      float float0 = mutableDouble0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = 1020.6579683167;
      float float0 = mutableDouble0.floatValue();
      assertEquals(1020.65796F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1189.8589));
      mutableDouble0.v = (-1189.8589);
      mutableDouble0.v = (-1189.8589);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-3389.8789735085293);
      mutableDouble0.v = 0.0;
      double double0 = mutableDouble0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = (-1.0);
      mutableDouble0.v = 1020.6579683167;
      double double0 = mutableDouble0.doubleValue();
      assertEquals(1020.6579683167, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      MutableDouble mutableDouble1 = new MutableDouble((-2450.2572685441));
      int int0 = mutableDouble0.compareTo((Number) mutableDouble1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-145.675126328612));
      int int0 = mutableDouble0.compareTo((Number) (byte)111);
      assertEquals((-1), int0);
      assertEquals((-145.675126328612), mutableDouble0.v, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1706.59729663359));
      // Undeclared exception!
      try { 
        mutableDouble0.compareTo((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.MutableDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      float float0 = mutableDouble0.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      double double0 = mutableDouble0.doubleValue();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      MutableDouble mutableDouble1 = new MutableDouble((-2450.2572685441));
      boolean boolean0 = mutableDouble0.equals(mutableDouble1);
      assertEquals((-2450.2572685441), mutableDouble1.doubleValue(), 0.01);
      assertFalse(mutableDouble1.equals((Object)mutableDouble0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      Object object0 = new Object();
      boolean boolean0 = mutableDouble0.equals(object0);
      assertEquals((-1.0), mutableDouble0.v, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      int int0 = mutableDouble0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1.0);
      boolean boolean0 = mutableDouble0.equals(mutableDouble0);
      assertTrue(boolean0);
      assertEquals(1.0, mutableDouble0.v, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1.0);
      int int0 = mutableDouble0.compareTo((Number) mutableDouble0);
      assertEquals(1.0F, mutableDouble0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(0.0);
      String string0 = mutableDouble0.toString();
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1.0);
      mutableDouble0.hashCode();
      assertEquals(1.0, mutableDouble0.v, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1554.247));
      long long0 = mutableDouble0.longValue();
      assertEquals((-1554L), long0);
  }
}
