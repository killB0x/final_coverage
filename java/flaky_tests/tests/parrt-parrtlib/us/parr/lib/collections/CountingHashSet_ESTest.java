/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 18:42:50 GMT 2022
 */

package us.parr.lib.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.parr.lib.collections.CountingDenseIntSet;
import us.parr.lib.collections.CountingHashSet;
import us.parr.lib.collections.CountingSet;
import us.parr.lib.collections.DenseIntSet;
import us.parr.lib.collections.MutableInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CountingHashSet_ESTest extends CountingHashSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      boolean boolean0 = countingHashSet0.add(countingHashSet0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      countingHashSet0.set(object0, (-3673));
      double double0 = countingHashSet0.entropy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.set((Object) null, (-670));
      double double0 = countingHashSet0.entropy();
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.add(countingHashSet0);
      CountingHashSet<Integer> countingHashSet1 = new CountingHashSet<Integer>();
      boolean boolean0 = countingHashSet0.add(countingHashSet1);
      assertTrue(boolean0);
      
      CountingHashSet countingHashSet2 = (CountingHashSet)countingHashSet0.argmax();
      assertNotNull(countingHashSet2);
      assertEquals(2, countingHashSet2.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CountingHashSet<Integer> countingHashSet0 = new CountingHashSet<Integer>();
      CountingHashSet<Object> countingHashSet1 = new CountingHashSet<Object>();
      boolean boolean0 = countingHashSet1.add(countingHashSet0);
      assertTrue(boolean0);
      
      CountingHashSet<Object> countingHashSet2 = countingHashSet1.minus(countingHashSet1);
      CountingHashSet<Object> countingHashSet3 = countingHashSet1.minus(countingHashSet2);
      assertEquals(1, countingHashSet3.size());
      assertNotSame(countingHashSet3, countingHashSet1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      boolean boolean0 = countingHashSet0.add((Object) null);
      assertTrue(boolean0);
      
      int int0 = countingHashSet0.total();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      AbstractMap.SimpleImmutableEntry<Object, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Object, Integer>[] abstractMap_SimpleImmutableEntryArray1 = countingHashSet0.toArray(abstractMap_SimpleImmutableEntryArray0);
      assertSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CountingHashSet<Integer> countingHashSet0 = new CountingHashSet<Integer>();
      Object[] objectArray0 = countingHashSet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.add((Object) null);
      int int0 = countingHashSet0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      Object object0 = new Object();
      boolean boolean0 = countingHashSet0.add(object0);
      assertTrue(boolean0);
      
      boolean boolean1 = countingHashSet0.isEmpty();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.add(countingHashSet0);
      CountingHashSet<Integer> countingHashSet1 = new CountingHashSet<Integer>();
      boolean boolean0 = countingHashSet0.add(countingHashSet1);
      assertTrue(boolean0);
      
      double double0 = countingHashSet0.entropy();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CountingHashSet<MutableInt> countingHashSet0 = new CountingHashSet<MutableInt>();
      MutableInt mutableInt0 = new MutableInt((-975));
      countingHashSet0.set(mutableInt0, (-483));
      int int0 = countingHashSet0.count(mutableInt0);
      assertEquals((-483), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CountingHashSet<Integer> countingHashSet0 = new CountingHashSet<Integer>();
      Object object0 = new Object();
      boolean boolean0 = countingHashSet0.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.data = null;
      // Undeclared exception!
      try { 
        countingHashSet0.total();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      Set<Object> set0 = countingHashSet0.keySet();
      countingHashSet0.add(set0);
      // Undeclared exception!
      try { 
        countingHashSet0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.add((Object) null);
      // Undeclared exception!
      try { 
        countingHashSet0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      // Undeclared exception!
      try { 
        countingHashSet0.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.add(countingHashSet0);
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      // Undeclared exception!
      try { 
        countingHashSet0.toArray(mutableIntArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      CountingHashSet<Object> countingHashSet1 = countingHashSet0.minus((CountingSet<Object>) null);
      countingHashSet1.data = null;
      // Undeclared exception!
      try { 
        countingHashSet1.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CountingHashSet<Integer> countingHashSet0 = new CountingHashSet<Integer>();
      countingHashSet0.data = null;
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        countingHashSet0.remove(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.add(countingHashSet0);
      // Undeclared exception!
      try { 
        countingHashSet0.minus((CountingSet<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CountingHashSet<Integer> countingHashSet0 = new CountingHashSet<Integer>();
      CountingDenseIntSet countingDenseIntSet0 = new CountingDenseIntSet(countingHashSet0);
      Integer integer0 = new Integer(1);
      countingHashSet0.set(integer0, 2482);
      // Undeclared exception!
      try { 
        countingHashSet0.minus(countingDenseIntSet0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("us.parr.lib.collections.CountingDenseIntSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.data = null;
      // Undeclared exception!
      try { 
        countingHashSet0.keys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.data = null;
      // Undeclared exception!
      try { 
        countingHashSet0.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CountingHashSet<AbstractMap.SimpleImmutableEntry<MutableInt, Integer>> countingHashSet0 = new CountingHashSet<AbstractMap.SimpleImmutableEntry<MutableInt, Integer>>();
      countingHashSet0.data = null;
      // Undeclared exception!
      try { 
        countingHashSet0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.data = null;
      // Undeclared exception!
      try { 
        countingHashSet0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.data = null;
      // Undeclared exception!
      try { 
        countingHashSet0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.data = null;
      // Undeclared exception!
      try { 
        countingHashSet0.entropy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.data = null;
      // Undeclared exception!
      try { 
        countingHashSet0.counts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.data = null;
      // Undeclared exception!
      try { 
        countingHashSet0.add(countingHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CountingDenseIntSet countingDenseIntSet0 = new CountingDenseIntSet(5513);
      CountingHashSet<Integer> countingHashSet0 = new CountingHashSet<Integer>(countingDenseIntSet0);
      assertEquals(1, countingHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DenseIntSet denseIntSet0 = new DenseIntSet(561);
      CountingHashSet<Integer> countingHashSet0 = null;
      try {
        countingHashSet0 = new CountingHashSet<Integer>(denseIntSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DenseIntSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = null;
      try {
        countingHashSet0 = new CountingHashSet<Object>((CountingSet<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      Object object0 = new Object();
      countingHashSet0.set(object0, (-42));
      countingHashSet0.add(countingHashSet0);
      countingHashSet0.toString();
      countingHashSet0.iterator();
      countingHashSet0.argmax();
      CountingHashSet<AbstractMap.SimpleImmutableEntry<Object, Object>> countingHashSet1 = new CountingHashSet<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      countingHashSet1.size();
      List<Object> list0 = countingHashSet0.keys();
      assertFalse(list0.contains((-42)));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      Object object0 = new Object();
      countingHashSet0.set(object0, (-42));
      int int0 = countingHashSet0.total();
      assertEquals((-42), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      int int0 = countingHashSet0.total();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      boolean boolean0 = countingHashSet0.add(countingHashSet0);
      assertTrue(boolean0);
      
      int int0 = countingHashSet0.count(countingHashSet0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CountingDenseIntSet countingDenseIntSet0 = new CountingDenseIntSet(0);
      CountingHashSet<Integer> countingHashSet0 = new CountingHashSet<Integer>(countingDenseIntSet0);
      Integer integer0 = Integer.valueOf(0);
      boolean boolean0 = countingHashSet0.contains(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      Integer integer0 = new Integer(315);
      boolean boolean0 = countingHashSet0.remove(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      Object object0 = new Object();
      boolean boolean0 = countingHashSet0.add(object0);
      boolean boolean1 = countingHashSet0.remove(object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CountingDenseIntSet countingDenseIntSet0 = new CountingDenseIntSet(0);
      CountingHashSet<Integer> countingHashSet0 = new CountingHashSet<Integer>(countingDenseIntSet0);
      countingHashSet0.entrySet();
      assertTrue(countingHashSet0.contains(0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CountingHashSet<MutableInt> countingHashSet0 = new CountingHashSet<MutableInt>();
      Set<Map.Entry<MutableInt, Integer>> set0 = (Set<Map.Entry<MutableInt, Integer>>)countingHashSet0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      CountingHashSet<Object> countingHashSet1 = new CountingHashSet<Object>();
      boolean boolean0 = countingHashSet0.add((Object) null);
      assertTrue(boolean0);
      
      CountingHashSet<Object> countingHashSet2 = countingHashSet0.minus(countingHashSet1);
      assertEquals(1, countingHashSet2.size());
      assertNotSame(countingHashSet2, countingHashSet0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      countingHashSet0.add(countingHashSet0);
      List<Integer> list0 = countingHashSet0.counts();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      List<Integer> list0 = countingHashSet0.counts();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      Object object0 = new Object();
      countingHashSet0.set(object0, 0);
      double double0 = countingHashSet0.entropy();
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      boolean boolean0 = countingHashSet0.add(countingHashSet0);
      assertTrue(boolean0);
      
      boolean boolean1 = countingHashSet0.add(countingHashSet0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      int int0 = countingHashSet0.count(countingHashSet0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      List<Object> list0 = countingHashSet0.keys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CountingHashSet<Integer> countingHashSet0 = new CountingHashSet<Integer>();
      CountingHashSet<AbstractMap.SimpleImmutableEntry<Object, Object>> countingHashSet1 = new CountingHashSet<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        countingHashSet1.retainAll(countingHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CountingHashSet.retainAll
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      CountingHashSet countingHashSet1 = (CountingHashSet)countingHashSet0.argmax();
      // Undeclared exception!
      try { 
        countingHashSet0.removeAll(countingHashSet1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CountingHashSet.removeAll
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CountingDenseIntSet countingDenseIntSet0 = new CountingDenseIntSet(0);
      CountingHashSet<Integer> countingHashSet0 = new CountingHashSet<Integer>(countingDenseIntSet0);
      countingHashSet0.toArray();
      assertTrue(countingHashSet0.contains(0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      Object[] objectArray0 = new Object[3];
      Object[] objectArray1 = countingHashSet0.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      boolean boolean0 = countingHashSet0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CountingHashSet<Integer> countingHashSet0 = new CountingHashSet<Integer>();
      countingHashSet0.clear();
      assertEquals(0, countingHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CountingHashSet<Object> countingHashSet0 = new CountingHashSet<Object>();
      // Undeclared exception!
      try { 
        countingHashSet0.containsAll(countingHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CountingHashSet.containsAll
         //
         verifyException("us.parr.lib.collections.CountingHashSet", e);
      }
  }
}
