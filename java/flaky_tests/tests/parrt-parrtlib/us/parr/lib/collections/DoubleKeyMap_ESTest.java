/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 18:49:02 GMT 2022
 */

package us.parr.lib.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.parr.lib.collections.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Object, Integer, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<Integer, Integer>>();
      Integer integer0 = new Integer(2150);
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer1 = new Integer(2150);
      doubleKeyMap1.put(integer1, integer0, integer0);
      Object object0 = doubleKeyMap1.put(integer1, integer0, doubleKeyMap0);
      assertEquals(2150, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Integer, Integer>>();
      Integer integer0 = new Integer(2305);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap1 = doubleKeyMap0.put(integer0, integer0, hashMap0);
      assertNull(hashMap1);
      
      HashMap<Integer, Integer> hashMap2 = doubleKeyMap0.put(integer0, integer0, hashMap1);
      assertEquals(0, hashMap2.size());
      assertNotNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(2150);
      DoubleKeyMap<Integer, Map<Integer, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Integer, Object>, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Object object0 = new Object();
      doubleKeyMap0.put(integer0, hashMap0, object0);
      Object object1 = doubleKeyMap0.get(integer0, (Map<Integer, Object>) hashMap0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      HashMap<Integer, Map<Integer, Integer>> hashMap0 = new HashMap<Integer, Map<Integer, Integer>>();
      doubleKeyMap0.data = (Map<Integer, Map<Integer, Integer>>) hashMap0;
      Integer integer0 = new Integer(743);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, hashMap1);
      Map<Integer, Integer> map0 = doubleKeyMap0.get(integer0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-579));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DoubleKeyMap<HashMap<Integer, Integer>, Integer, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Integer, HashMap<Integer, Integer>>();
      doubleKeyMap0.put(hashMap0, integer0, hashMap0);
      Map<Integer, HashMap<Integer, Integer>> map0 = doubleKeyMap0.get(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.data = null;
      // Undeclared exception!
      try { 
        doubleKeyMap0.values(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DoubleKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Integer, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      doubleKeyMap0.put(hashMap0, hashMap0, hashMap1);
      Integer integer0 = new Integer(1);
      hashMap0.put(doubleKeyMap0.data, integer0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(hashMap0, hashMap0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      doubleKeyMap0.data = null;
      Integer integer0 = new Integer(748);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DoubleKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      doubleKeyMap0.data = (Map<Object, Map<Object, Integer>>) hashMap0;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(789);
      doubleKeyMap0.put(hashMap0, doubleKeyMap1, integer0);
      DoubleKeyMap<Object, Map<Integer, Integer>, Map<Integer, Integer>> doubleKeyMap2 = new DoubleKeyMap<Object, Map<Integer, Integer>, Map<Integer, Integer>>();
      // Undeclared exception!
      try { 
        doubleKeyMap2.keySet((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Integer, Object>();
      DoubleKeyMap<Object, Object, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Object, Integer>>();
      doubleKeyMap1.data = null;
      // Undeclared exception!
      try { 
        doubleKeyMap1.keySet((Object) doubleKeyMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DoubleKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Integer, Object>();
      doubleKeyMap0.data = null;
      // Undeclared exception!
      try { 
        doubleKeyMap0.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DoubleKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Integer, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, Integer>, Integer>();
      Integer integer0 = new Integer(954);
      doubleKeyMap0.data = null;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.get(integer0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DoubleKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Integer>, Object>();
      Integer integer0 = new Integer(1614);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      hashMap0.putIfAbsent(doubleKeyMap0.data, integer0);
      doubleKeyMap0.put(integer0, hashMap0, hashMap0);
      DoubleKeyMap<Object, Object, Map<Integer, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Integer, Integer>>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.get((Object) doubleKeyMap0.data);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Integer, Integer>>();
      doubleKeyMap0.data = null;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.get(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.parr.lib.collections.DoubleKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Integer, Integer>>();
      Set<Integer> set0 = doubleKeyMap0.keySet((Integer) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      Integer integer0 = new Integer((-579));
      Integer integer1 = doubleKeyMap0.put(integer0, integer0, integer0);
      assertNull(integer1);
      
      Set<Integer> set0 = doubleKeyMap0.keySet(integer0);
      assertTrue(set0.contains((-579)));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      Integer integer0 = new Integer((-2893));
      Collection<Integer> collection0 = doubleKeyMap0.values(integer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      Integer integer0 = new Integer((-579));
      Integer integer1 = doubleKeyMap0.put(integer0, integer0, integer0);
      assertNull(integer1);
      
      Collection<Integer> collection0 = doubleKeyMap0.values(integer0);
      assertNotNull(collection0);
      assertTrue(collection0.contains((-579)));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Object>, HashMap<Integer, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, HashMap<Integer, Object>, Integer>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = doubleKeyMap0.get((Map<Integer, Object>) hashMap0, hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Integer>, Object>();
      DoubleKeyMap<Object, Object, Map<Integer, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Integer, Integer>>();
      Map<Object, Map<Integer, Integer>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0.data);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Integer, Object>();
      Set<Map<Integer, Integer>> set0 = doubleKeyMap0.keySet();
      assertEquals(0, set0.size());
  }
}
