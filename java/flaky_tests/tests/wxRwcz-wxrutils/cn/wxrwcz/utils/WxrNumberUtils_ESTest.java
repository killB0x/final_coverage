/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 21:46:35 GMT 2022
 */

package cn.wxrwcz.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cn.wxrwcz.utils.WxrNumberUtils;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WxrNumberUtils_ESTest extends WxrNumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-4683));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      String string0 = WxrNumberUtils.numberToPercentDefault(bigDecimal1, bigDecimal0);
      assertEquals("-0.02%", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String string0 = WxrNumberUtils.numberFormat(bigInteger0, (byte)1, 1);
      assertEquals("1,677,721,600.0%", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-2862));
      String string0 = WxrNumberUtils.numberFormat(integer0, integer0, (-2862));
      assertEquals("100%", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1347));
      Integer integer1 = new Integer(0);
      Integer integer2 = WxrNumberUtils.getIntegerAddNumer(integer0, integer1);
      assertEquals((-1347), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1808));
      Integer integer1 = WxrNumberUtils.getIntegerIncrement(integer0);
      assertEquals((-1807), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = WxrNumberUtils.getIntegerForSkipBlanks(integer0);
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = WxrNumberUtils.getIntegerDecrement(integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(579);
      Integer integer1 = WxrNumberUtils.getIntegerDecrement(integer0);
      assertEquals(578, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = WxrNumberUtils.getIntegerAddNumer(integer0, integer0);
      assertEquals(2, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = WxrNumberUtils.getBigDecimalForSkipBlanks(bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-4683));
      BigDecimal bigDecimal1 = WxrNumberUtils.getBigDecimalForSkipBlanks(bigDecimal0);
      assertEquals((byte) (-75), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = WxrNumberUtils.get2Double(2044);
      assertEquals(2044.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = WxrNumberUtils.get2Double((-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        WxrNumberUtils.numberToPercentDefault((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.wxrwcz.utils.WxrNumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = WxrNumberUtils.doulbeToPercent(0, (-3505));
      assertEquals("0%", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(1);
      String string0 = WxrNumberUtils.numberFormat(integer0, integer0, 1);
      assertEquals("100.0%", string0);
      
      String string1 = WxrNumberUtils.doulbeToPercent(1, 1);
      assertEquals("100.0%", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      String string0 = WxrNumberUtils.numberFormat(bigDecimal0, bigDecimal1, (-1080));
      assertEquals("0.00%", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String string0 = WxrNumberUtils.numberFormat(integer0, integer0, (-893));
      assertEquals("0.00%", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String string0 = WxrNumberUtils.numberFormat((Number) null, bigDecimal0, (-1));
      assertEquals("0.00%", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String string0 = WxrNumberUtils.numberFormat(bigDecimal0, (Number) null, (-1));
      assertEquals("0.00%", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = WxrNumberUtils.getIntegerAddNumer((Integer) null, (Integer) null);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = WxrNumberUtils.getIntegerDecrement((Integer) null);
      Integer integer1 = WxrNumberUtils.getIntegerIncrement(integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = WxrNumberUtils.getIntegerIncrement((Integer) null);
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigDecimal bigDecimal0 = WxrNumberUtils.getBigDecimalForSkipBlanks((BigDecimal) null);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = WxrNumberUtils.getIntegerForSkipBlanks((Integer) null);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = WxrNumberUtils.getIntegerForSkipBlanks(integer0);
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = WxrNumberUtils.get2Double(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = WxrNumberUtils.doubleTo2String(0);
      assertEquals("0.00", string0);
  }
}
