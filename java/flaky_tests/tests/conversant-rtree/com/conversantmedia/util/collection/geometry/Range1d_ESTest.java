/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 19:29:50 GMT 2022
 */

package com.conversantmedia.util.collection.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.conversantmedia.util.collection.geometry.Point1d;
import com.conversantmedia.util.collection.geometry.Point2d;
import com.conversantmedia.util.collection.geometry.Point3d;
import com.conversantmedia.util.collection.geometry.Range1d;
import com.conversantmedia.util.collection.geometry.Rect2d;
import com.conversantmedia.util.collection.geometry.Rect3d;
import com.conversantmedia.util.collection.spatial.HyperPoint;
import com.conversantmedia.util.collection.spatial.HyperRect;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Range1d_ESTest extends Range1d_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point1d point1d0 = new Point1d((-232.88511328503));
      Range1d.Builder range1d_Builder0 = new Range1d.Builder();
      // Undeclared exception!
      try { 
        range1d_Builder0.getMbr((HyperPoint) null, point1d0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      Range1d range1d1 = new Range1d(595.994651525788, (-724.3034855001534));
      boolean boolean0 = range1d0.intersects(range1d1);
      assertEquals(1320.2981370259413, range1d1.cost(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      Range1d range1d1 = new Range1d((-724.3034855001534), 4335.92498723);
      boolean boolean0 = range1d1.contains(range1d0);
      assertEquals(0.0, range1d0.cost(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point1d point1d0 = new Point1d(1855.75867007);
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      // Undeclared exception!
      try { 
        range1d0.getRange((-2137));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid dimension
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range1d range1d0 = new Range1d(1340.3059, 1340.3059);
      Point1d point1d0 = (Point1d)range1d0.getCentroid();
      Point1d point1d1 = new Point1d(1476.44);
      Range1d range1d1 = new Range1d(point1d1, point1d0);
      assertEquals(136.1341, range1d1.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range1d range1d0 = new Range1d((-497.934395), 3896.036069802083);
      double double0 = range1d0.perimeter();
      assertEquals(4393.970464802083, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range1d range1d0 = new Range1d(0.0, (-1.0));
      double double0 = range1d0.getRange(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range1d range1d0 = new Range1d(1605.023270919, 0.0);
      double double0 = range1d0.cost();
      assertEquals(1605.023270919, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range1d range1d0 = new Range1d((-2925.05944821883), (-2925.05944821883));
      // Undeclared exception!
      try { 
        range1d0.intersects((HyperRect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      // Undeclared exception!
      try { 
        range1d0.getMbr((HyperRect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point3d point3d0 = new Point3d(929.301752188175, 929.301752188175, 929.301752188175);
      Rect3d rect3d0 = new Rect3d(point3d0, point3d0);
      Point1d point1d0 = new Point1d(0);
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      // Undeclared exception!
      try { 
        range1d0.getMbr(rect3d0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Rect3d cannot be cast to class com.conversantmedia.util.collection.geometry.Range1d (com.conversantmedia.util.collection.geometry.Rect3d and com.conversantmedia.util.collection.geometry.Range1d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1d0a6c7c)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      // Undeclared exception!
      try { 
        range1d0.contains((HyperRect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      Point2d point2d0 = new Point2d(511.3483348201889, 1320.2981370259413);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      // Undeclared exception!
      try { 
        range1d0.contains(rect2d0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Rect2d cannot be cast to class com.conversantmedia.util.collection.geometry.Range1d (com.conversantmedia.util.collection.geometry.Rect2d and com.conversantmedia.util.collection.geometry.Range1d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1d0a6c7c)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range1d range1d0 = null;
      try {
        range1d0 = new Range1d((Point1d) null, (Point1d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point1d point1d0 = new Point1d((-2345.9776359207367));
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      double double0 = range1d0.getRange(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range1d range1d0 = new Range1d(1605.023270919, 0.0);
      int int0 = range1d0.getNDim();
      assertEquals(1605.023270919, range1d0.cost(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      Range1d range1d1 = new Range1d(595.994651525788, 2934.778905);
      boolean boolean0 = range1d0.equals(range1d1);
      assertFalse(boolean0);
      assertFalse(range1d1.equals((Object)range1d0));
      assertEquals(2338.784253474212, range1d1.cost(), 0.01);
      assertEquals(0.0, range1d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      boolean boolean0 = range1d0.equals("(595.994651525788) (595.994651525788)");
      assertFalse(boolean0);
      assertEquals(0.0, range1d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range1d range1d0 = new Range1d((-2451.84), (-2451.84));
      boolean boolean0 = range1d0.equals((Object) null);
      assertEquals(0.0, range1d0.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      boolean boolean0 = range1d0.equals(range1d0);
      assertTrue(boolean0);
      assertEquals(0.0, range1d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      Range1d range1d1 = new Range1d(595.994651525788, (-724.3034855001534));
      boolean boolean0 = range1d0.equals(range1d1);
      assertFalse(boolean0);
      assertEquals(1320.2981370259413, range1d1.cost(), 0.01);
      assertFalse(range1d1.equals((Object)range1d0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      Point1d point1d0 = new Point1d((-2219.7871664397917));
      Range1d range1d1 = new Range1d(point1d0, point1d0);
      boolean boolean0 = range1d1.intersects(range1d0);
      assertEquals(0.0, range1d0.cost(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, range1d1.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      boolean boolean0 = range1d0.intersects(range1d0);
      assertEquals(0.0, range1d0.cost(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      Range1d range1d1 = new Range1d(595.994651525788, (-724.3034855001534));
      Point1d point1d0 = (Point1d)range1d1.getCentroid();
      Range1d range1d2 = new Range1d(point1d0, point1d0);
      boolean boolean0 = range1d0.intersects(range1d2);
      assertFalse(boolean0);
      assertEquals(0.0, range1d2.cost(), 0.01);
      assertEquals(1320.2981370259413, range1d1.cost(), 0.01);
      assertFalse(range1d2.equals((Object)range1d0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      Range1d range1d1 = new Range1d(595.994651525788, (-724.3034855001534));
      Point1d point1d0 = (Point1d)range1d1.getCentroid();
      Range1d range1d2 = new Range1d(point1d0, point1d0);
      boolean boolean0 = range1d2.contains(range1d0);
      assertEquals(1320.2981370259413, range1d1.cost(), 0.01);
      assertEquals(0.0, range1d2.cost(), 0.01);
      assertFalse(range1d2.equals((Object)range1d0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      boolean boolean0 = range1d0.contains(range1d0);
      assertEquals(0.0, range1d0.cost(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      Range1d range1d1 = new Range1d(595.994651525788, (-724.3034855001534));
      boolean boolean0 = range1d0.contains(range1d1);
      assertFalse(boolean0);
      assertEquals(1320.2981370259413, range1d1.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range1d range1d0 = new Range1d(1481.3626606518699, 1481.3626606518699);
      // Undeclared exception!
      try { 
        range1d0.getRange(41);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid dimension
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      Range1d range1d1 = new Range1d(595.994651525788, (-724.3034855001534));
      HyperRect hyperRect0 = range1d1.getMbr(range1d0);
      assertEquals(1320.2981370259413, range1d1.cost(), 0.01);
      assertEquals(1320.2981370259413, hyperRect0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      Range1d range1d1 = new Range1d(595.994651525788, (-724.3034855001534));
      Point1d point1d0 = (Point1d)range1d1.getMin();
      Point1d point1d1 = (Point1d)range1d0.getMax();
      Range1d range1d2 = new Range1d(point1d0, point1d1);
      assertTrue(range1d2.equals((Object)range1d1));
      assertEquals(1320.2981370259413, range1d1.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range1d.Builder range1d_Builder0 = new Range1d.Builder();
      Range1d range1d0 = new Range1d(1641.5, 1641.5);
      HyperRect hyperRect0 = range1d_Builder0.getBBox(range1d0);
      assertEquals(0.0, hyperRect0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      double double0 = range1d0.perimeter();
      assertEquals(1, range1d0.getNDim());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      Point1d point1d0 = (Point1d)range1d0.getMin();
      Range1d range1d1 = new Range1d(point1d0, point1d0);
      boolean boolean0 = range1d1.equals(range1d0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      range1d0.hashCode();
      assertEquals(0.0, range1d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      HyperRect hyperRect0 = range1d0.getMbr(range1d0);
      assertEquals(0.0, range1d0.cost(), 0.01);
      assertEquals(0.0, hyperRect0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range1d range1d0 = new Range1d(595.994651525788, 595.994651525788);
      String string0 = range1d0.toString();
      assertEquals("(595.994651525788) (595.994651525788)", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range1d range1d0 = new Range1d(340.0, 340.0);
      double double0 = range1d0.cost();
      assertEquals(0.0, double0, 0.01);
  }
}
