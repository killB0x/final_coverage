/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 19:26:56 GMT 2022
 */

package com.conversantmedia.util.collection.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.conversantmedia.util.collection.geometry.Point2d;
import com.conversantmedia.util.collection.geometry.Point3d;
import com.conversantmedia.util.collection.geometry.Range1d;
import com.conversantmedia.util.collection.geometry.Rect2d;
import com.conversantmedia.util.collection.geometry.Rect3d;
import com.conversantmedia.util.collection.spatial.HyperPoint;
import com.conversantmedia.util.collection.spatial.HyperRect;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Rect2d_ESTest extends Rect2d_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d((-4550.80106), (-608.703), (-608.703), (-608.703));
      double double0 = rect2d0.cost();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d((-22.363399761919936), (-3520.33390196), 773.448530161, 4130.584);
      boolean boolean0 = rect2d0.intersects(rect2d0);
      assertTrue(boolean0);
      assertEquals(6088691.741240605, rect2d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(1255.663392515678, 1255.663392515678, (-1.0), (-1.0));
      Point2d point2d0 = (Point2d)rect2d0.getMin();
      Rect2d rect2d1 = new Rect2d(point2d0, point2d0);
      boolean boolean0 = rect2d1.contains(rect2d0);
      assertTrue(boolean0);
      assertEquals(1579202.882089013, rect2d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d((-1783.7007979), 0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        rect2d0.getRange((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid dimension
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d((-4056.654364), (-2322.485), (-593.105057207816), 16.806338377161);
      rect2d0.getCentroid();
      assertEquals(8102250.893421176, rect2d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d((-4056.654364), (-2322.485), (-593.105057207816), 16.806338377161);
      double double0 = rect2d0.perimeter();
      assertEquals(11605.681290338689, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(482.069678492412, 3203.23604, 482.069678492412, 482.069678492412);
      double double0 = rect2d0.perimeter();
      assertEquals((-5442.332723015175), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, (-192.4));
      Rect2d rect2d0 = new Rect2d(point2d0);
      double double0 = rect2d0.getRange(1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(482.069678492412, 3203.23604, 482.069678492412, 482.069678492412);
      double double0 = rect2d0.getRange(1);
      assertEquals(0.0, rect2d0.cost(), 0.01);
      assertEquals((-2721.1663615075877), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d((-22.3633998), (-3520.33390196), 773.448530161, (-3520.33390196));
      Point2d point2d0 = new Point2d(773.448530161, 86.3756015612);
      Rect2d rect2d1 = new Rect2d(point2d0, point2d0);
      HyperRect hyperRect0 = rect2d0.getMbr(rect2d1);
      assertEquals(2870262.450805886, hyperRect0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d((-2482.4789011397706), (-2482.4789011397706), (-1.0), (-1.0));
      double double0 = rect2d0.cost();
      assertEquals(6157737.536801844, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d((-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0));
      Rect2d rect2d0 = new Rect2d((-3520.3596749432027), (-2670.3706777), (-3520.3596749432027), (-1.0));
      // Undeclared exception!
      try { 
        rect2d0.getMbr(rect3d0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Rect3d cannot be cast to class com.conversantmedia.util.collection.geometry.Rect2d (com.conversantmedia.util.collection.geometry.Rect3d and com.conversantmedia.util.collection.geometry.Rect2d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @73f16238)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(156.0, 156.0, 156.0, 237.8512381547468);
      // Undeclared exception!
      try { 
        rect2d0.contains((HyperRect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(1736.58920047616, 1736.58920047616, 1736.58920047616, (-1781.316));
      Range1d range1d0 = new Range1d(1736.58920047616, 1736.58920047616);
      // Undeclared exception!
      try { 
        rect2d0.contains(range1d0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Range1d cannot be cast to class com.conversantmedia.util.collection.geometry.Rect2d (com.conversantmedia.util.collection.geometry.Range1d and com.conversantmedia.util.collection.geometry.Rect2d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @73f16238)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rect2d rect2d0 = null;
      try {
        rect2d0 = new Rect2d((Point2d) null, (Point2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rect2d rect2d0 = null;
      try {
        rect2d0 = new Rect2d((Point2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(1, (-3520.33390196), 0.0, (-1.0));
      double double0 = rect2d0.getRange(1);
      assertEquals(3519.33390196, double0, 0.01);
      assertEquals(3519.33390196, rect2d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(1810.27, 0, 6486.958, 1);
      double double0 = rect2d0.getRange(0);
      assertEquals(4676.688, double0, 0.01);
      assertEquals(4676.688, rect2d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(1810.27, 0, 6486.958, 1);
      int int0 = rect2d0.getNDim();
      assertEquals(2, int0);
      assertEquals(4676.688, rect2d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d((-3091.1024864441006), (-3091.1024864441006), (-3091.1024864441006), (-3091.1024864441006));
      Rect2d rect2d1 = new Rect2d((-3091.1024864441006), (-3091.1024864441006), (-3091.1024864441006), 1221.1394);
      boolean boolean0 = rect2d0.equals(rect2d1);
      assertFalse(boolean0);
      assertEquals(0.0, rect2d1.cost(), 0.01);
      assertFalse(rect2d1.equals((Object)rect2d0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point2d point2d0 = new Point2d((-319.2141695), (-319.2141695));
      Rect2d rect2d0 = new Rect2d(point2d0);
      Rect2d rect2d1 = new Rect2d(point2d0, point2d0);
      boolean boolean0 = rect2d1.equals(rect2d0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(1810.27, 0, 6486.958, 1);
      Object object0 = new Object();
      boolean boolean0 = rect2d0.equals(object0);
      assertFalse(boolean0);
      assertEquals(4676.688, rect2d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d((-546.2996847354), (-546.2996847354), (-546.2996847354), (-546.2996847354));
      boolean boolean0 = rect2d0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point2d point2d0 = new Point2d(1810.27, (-319.2141695));
      Rect2d rect2d0 = new Rect2d(point2d0);
      boolean boolean0 = rect2d0.equals(rect2d0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point2d point2d0 = new Point2d(1810.27, 6486.958);
      Rect2d rect2d0 = new Rect2d(1810.27, 0, 6486.958, 1);
      Rect2d rect2d1 = new Rect2d(point2d0, point2d0);
      boolean boolean0 = rect2d0.equals(rect2d1);
      assertEquals(4676.688, rect2d0.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point2d point2d0 = new Point2d((-319.2141695), (-319.2141695));
      Rect2d rect2d0 = new Rect2d(point2d0);
      Rect2d rect2d1 = new Rect2d((-319.2141695), 0, 1810.27, 1810.27);
      boolean boolean0 = rect2d0.intersects(rect2d1);
      assertFalse(boolean0);
      assertEquals(3854941.307520765, rect2d1.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d((-1.0), 1.0E-12, 4.0, (-1.0));
      boolean boolean0 = rect2d0.intersects(rect2d0);
      assertFalse(boolean0);
      assertEquals(5.0000000000050004, rect2d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point2d point2d0 = new Point2d(2465.963156188135, 2465.963156188135);
      Rect2d rect2d0 = new Rect2d(point2d0);
      Rect2d rect2d1 = new Rect2d(2465.963156188135, 1178.6820012, 0, (-640.3078));
      boolean boolean0 = rect2d1.intersects(rect2d0);
      assertFalse(boolean0);
      assertEquals(4485561.831241181, rect2d1.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point2d point2d0 = new Point2d((-319.2141695), (-319.2141695));
      Rect2d rect2d0 = new Rect2d(point2d0);
      boolean boolean0 = rect2d0.intersects(rect2d0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point2d point2d0 = new Point2d((-319.2141695), (-319.2141695));
      Point2d point2d1 = new Point2d((-1919.826), 1810.27);
      Rect2d rect2d0 = new Rect2d(point2d1);
      Rect2d rect2d1 = new Rect2d(point2d0);
      boolean boolean0 = rect2d1.intersects(rect2d0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point2d point2d0 = new Point2d(1810.27, 6486.958);
      Rect2d rect2d0 = new Rect2d(1810.27, 0, 6486.958, 1);
      Rect2d rect2d1 = new Rect2d(point2d0, point2d0);
      boolean boolean0 = rect2d0.contains(rect2d1);
      assertEquals(4676.688, rect2d0.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(0, 28.05751629880335, 1, 1);
      Rect2d rect2d1 = new Rect2d(0, 1, 0, 1);
      boolean boolean0 = rect2d0.contains(rect2d1);
      assertEquals(27.05751629880335, rect2d0.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point2d point2d0 = new Point2d(2.0, 2.0);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      Point2d point2d1 = new Point2d(0, 0);
      Rect2d rect2d1 = new Rect2d(point2d0, point2d1);
      boolean boolean0 = rect2d1.contains(rect2d0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(1810.27, 0, 6486.958, 1);
      boolean boolean0 = rect2d0.contains(rect2d0);
      assertEquals(4676.688, rect2d0.cost(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point2d point2d0 = new Point2d(28.05751629880335, 28.05751629880335);
      Rect2d rect2d0 = new Rect2d(point2d0);
      Rect2d rect2d1 = new Rect2d(0, 1, 0, 1);
      boolean boolean0 = rect2d0.contains(rect2d1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point2d point2d0 = new Point2d(2272.848543412, 2272.848543412);
      Point2d point2d1 = new Point2d((-2020.09399663179), 0);
      Rect2d rect2d0 = new Rect2d(point2d1, point2d0);
      assertEquals(9757208.199089939, rect2d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point2d point2d0 = new Point2d(1810.27, 6486.958);
      Rect2d.Builder rect2d_Builder0 = new Rect2d.Builder();
      Point3d point3d0 = new Point3d(0.0, 395.5715, 0.0);
      HyperRect hyperRect0 = rect2d_Builder0.getMbr(point2d0, point3d0);
      assertEquals(1.1027054239355E7, hyperRect0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2d point2d0 = new Point2d((-319.2141695), (-319.2141695));
      Rect2d rect2d0 = new Rect2d(point2d0);
      Rect2d.Builder rect2d_Builder0 = new Rect2d.Builder();
      HyperRect hyperRect0 = rect2d_Builder0.getBBox(rect2d0);
      assertSame(rect2d0, hyperRect0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(1.0255711265262513, 1.0255711265262513, 1.0255711265262513, 1.0255711265262513);
      rect2d0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(1.0255711265262513, 1.0255711265262513, 1.0255711265262513, 1.0255711265262513);
      HyperPoint hyperPoint0 = rect2d0.getMax();
      assertEquals(2, hyperPoint0.getNDim());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(12.744757217562828, 12.744757217562828, 12.744757217562828, 12.744757217562828);
      HyperRect hyperRect0 = rect2d0.getMbr(rect2d0);
      assertNotSame(rect2d0, hyperRect0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(11.788644876223703, 11.788644876223703, 11.788644876223703, 11.788644876223703);
      String string0 = rect2d0.toString();
      assertEquals("(11.788644876223703,11.788644876223703) (11.788644876223703,11.788644876223703)", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d((-546.2996847354), (-546.2996847354), (-546.2996847354), (-546.2996847354));
      double double0 = rect2d0.perimeter();
      assertEquals(2, rect2d0.getNDim());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point2d point2d0 = new Point2d(2272.848543412, 2272.848543412);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      HyperPoint hyperPoint0 = rect2d0.getCentroid();
      assertTrue(hyperPoint0.equals((Object)point2d0));
  }
}
