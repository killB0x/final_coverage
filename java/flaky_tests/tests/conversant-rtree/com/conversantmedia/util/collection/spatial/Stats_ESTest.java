/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 19:39:05 GMT 2022
 */

package com.conversantmedia.util.collection.spatial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.conversantmedia.util.collection.spatial.RTree;
import com.conversantmedia.util.collection.spatial.Stats;
import java.io.PrintStream;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Stats_ESTest extends Stats_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.setMaxFill((-2436));
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      stats0.print(mockPrintStream0);
      assertEquals(193L, mockFile0.length());
      assertEquals(0, stats0.getBranchCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stats stats0 = new Stats();
      MockPrintStream mockPrintStream0 = new MockPrintStream("|u!DG<");
      stats0.setMaxDepth(670);
      stats0.print(mockPrintStream0);
      assertEquals(670, stats0.getMaxDepth());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      stats0.setType(rTree_Split0);
      stats0.getType();
      assertEquals(0, stats0.getMaxDepth());
      assertEquals(0, stats0.getBranchCount());
      assertEquals(Float.NaN, stats0.getEntriesPerLeaf(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.setMaxDepth(1359);
      int int0 = stats0.getMaxDepth();
      assertEquals(1359, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.setMaxDepth((-1106));
      int int0 = stats0.getMaxDepth();
      assertEquals((-1106), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.countLeafAtDepth(3);
      stats0.setMaxFill((-3642));
      float float0 = stats0.getLeafFillPercentage();
      assertEquals(1, stats0.getLeafCount());
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.countEntriesAtDepth(953, 1);
      float float0 = stats0.getLeafFillPercentage();
      assertEquals(953, stats0.getEntryCount());
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.countEntriesAtDepth((-1114), 986);
      float float0 = stats0.getLeafFillPercentage();
      assertEquals((-1114), stats0.getEntryCount());
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.countLeafAtDepth(3);
      int int0 = stats0.getLeafCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.countEntriesAtDepth(4, 4);
      int int0 = stats0.getEntryCount();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.countEntriesAtDepth((-1461), 232);
      int int0 = stats0.getEntryCount();
      assertEquals(Float.NEGATIVE_INFINITY, stats0.getLeafFillPercentage(), 0.01F);
      assertEquals((-1461), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.countLeafAtDepth(3);
      float float0 = stats0.getEntriesPerLeaf();
      assertEquals(1, stats0.getLeafCount());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.countEntriesAtDepth(4, 4);
      float float0 = stats0.getEntriesPerLeaf();
      assertEquals(4, stats0.getEntryCount());
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.countEntriesAtDepth((-1816), 639);
      float float0 = stats0.getEntriesPerLeaf();
      assertEquals((-1816), stats0.getEntryCount());
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.countBranchAtDepth(194);
      int int0 = stats0.getBranchCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stats stats0 = new Stats();
      // Undeclared exception!
      try { 
        stats0.print((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Stats", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.setMaxDepth(1684);
      MockPrintStream mockPrintStream0 = new MockPrintStream(".]WV{@=O");
      // Undeclared exception!
      try { 
        stats0.print(mockPrintStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1000 out of bounds for length 1000
         //
         verifyException("com.conversantmedia.util.collection.spatial.Stats", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stats stats0 = new Stats();
      // Undeclared exception!
      try { 
        stats0.countLeafAtDepth((-2436));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2436 out of bounds for length 1000
         //
         verifyException("com.conversantmedia.util.collection.spatial.Stats", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stats stats0 = new Stats();
      // Undeclared exception!
      try { 
        stats0.countEntriesAtDepth((-1111), (-1111));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1111 out of bounds for length 1000
         //
         verifyException("com.conversantmedia.util.collection.spatial.Stats", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.countEntriesAtDepth(625, 0);
      stats0.countLeafAtDepth(2);
      float float0 = stats0.getLeafFillPercentage();
      assertEquals(1, stats0.getLeafCount());
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Stats stats0 = new Stats();
      int int0 = stats0.getBranchCount();
      assertEquals(0, int0);
      assertEquals(0, stats0.getMaxDepth());
      assertEquals(Float.NaN, stats0.getEntriesPerLeaf(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stats stats0 = new Stats();
      int int0 = stats0.getMaxDepth();
      assertEquals(0, int0);
      assertEquals(Float.NaN, stats0.getEntriesPerLeaf(), 0.01F);
      assertEquals(0, stats0.getBranchCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Stats stats0 = new Stats();
      int int0 = stats0.getLeafCount();
      assertEquals(0, int0);
      assertEquals(0, stats0.getEntryCount());
      assertEquals(0, stats0.getMaxDepth());
      assertEquals(0, stats0.getBranchCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Stats stats0 = new Stats();
      // Undeclared exception!
      try { 
        stats0.countBranchAtDepth((-2279));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2279 out of bounds for length 1000
         //
         verifyException("com.conversantmedia.util.collection.spatial.Stats", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.getType();
      assertEquals(0, stats0.getBranchCount());
      assertEquals(0, stats0.getMaxDepth());
      assertEquals(Float.NaN, stats0.getEntriesPerLeaf(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.setMinFill(827);
      assertEquals(0, stats0.getMaxDepth());
      assertEquals(0, stats0.getBranchCount());
      assertEquals(Float.NaN, stats0.getEntriesPerLeaf(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Stats stats0 = new Stats();
      int int0 = stats0.getEntryCount();
      assertEquals(0, stats0.getBranchCount());
      assertEquals(0, int0);
      assertEquals(0, stats0.getMaxDepth());
      assertEquals(Float.NaN, stats0.getEntriesPerLeaf(), 0.01F);
  }
}
