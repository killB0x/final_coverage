/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 19:32:35 GMT 2022
 */

package com.conversantmedia.util.collection.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.conversantmedia.util.collection.geometry.Point1d;
import com.conversantmedia.util.collection.geometry.Point3d;
import com.conversantmedia.util.collection.spatial.HyperPoint;
import com.conversantmedia.util.collection.spatial.HyperRect;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Point3d_ESTest extends Point3d_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      Point3d point3d1 = new Point3d(2, 0.0, 0.0);
      Point3d.Builder point3d_Builder0 = new Point3d.Builder();
      HyperRect hyperRect0 = point3d_Builder0.getMbr(point3d1, point3d0);
      assertEquals(0.0, hyperRect0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point3d point3d0 = new Point3d((-26.555193641), (-1.0), (-26.555193641));
      point3d0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      point3d0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point3d point3d0 = new Point3d((-26.555193641), 1.0, 383.1);
      Point3d point3d1 = new Point3d((-26.555193641), 1.0, (-1.0));
      boolean boolean0 = point3d0.equals(point3d1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      Point3d point3d1 = new Point3d(2, 0.0, 0.0);
      double double0 = point3d1.distance((HyperPoint) point3d0, 2);
      assertEquals(3072.3671, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1.0), 0.0, (-1.0));
      // Undeclared exception!
      try { 
        point3d0.distance((HyperPoint) point3d0, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid dimension
         //
         verifyException("com.conversantmedia.util.collection.geometry.Point3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point3d point3d0 = new Point3d((-26.555193641), 1.0, 383.1);
      double double0 = point3d0.distance((HyperPoint) point3d0, 1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      Point3d point3d1 = new Point3d(2, 0.0, 0.0);
      double double0 = point3d1.distance((HyperPoint) point3d0, 1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      Point3d point3d1 = new Point3d(2, 0.0, 0.0);
      double double0 = point3d1.distance((HyperPoint) point3d0, 0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point3d point3d0 = new Point3d((-26.555193641), (-1.0), (-26.555193641));
      Point3d point3d1 = new Point3d(2, (-486.123997), 1.0);
      double double0 = point3d0.distance((HyperPoint) point3d1);
      assertEquals(486.74426575535944, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point3d point3d0 = new Point3d((-26.555193641), (-1.0), (-26.555193641));
      double double0 = point3d0.distance((HyperPoint) point3d0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      Double double0 = point3d0.getCoord(2);
      assertEquals(3072.3671, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point3d point3d0 = new Point3d((-26.555193641), 1.0, 383.1);
      Double double0 = point3d0.getCoord(1);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point3d point3d0 = new Point3d(2, 0.0, 0.0);
      Double double0 = point3d0.getCoord(1);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point3d point3d0 = new Point3d(2, 0.0, 0.0);
      Double double0 = point3d0.getCoord(0);
      assertEquals(2.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1.0), 0.0, (-903.0078874));
      // Undeclared exception!
      try { 
        point3d0.getCoord((-843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid dimension
         //
         verifyException("com.conversantmedia.util.collection.geometry.Point3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      Point3d point3d1 = new Point3d(2, 0.0, 0.0);
      double double0 = point3d0.distance((HyperPoint) point3d1, 0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      double double0 = point3d0.distance((HyperPoint) point3d0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point3d point3d0 = new Point3d((-0.0725664878257458), (-0.0725664878257458), (-0.0725664878257458));
      // Undeclared exception!
      try { 
        point3d0.distance((HyperPoint) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Point3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      Point1d point1d0 = new Point1d(302.7);
      // Undeclared exception!
      try { 
        point3d0.distance((HyperPoint) point1d0, 1946);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Point1d cannot be cast to class com.conversantmedia.util.collection.geometry.Point3d (com.conversantmedia.util.collection.geometry.Point1d and com.conversantmedia.util.collection.geometry.Point3d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7861cc)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Point3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point3d point3d0 = new Point3d((-0.8569162044505838), (-0.8569162044505838), (-0.8569162044505838));
      Point1d point1d0 = new Point1d(1);
      // Undeclared exception!
      try { 
        point3d0.distance((HyperPoint) point1d0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Point1d cannot be cast to class com.conversantmedia.util.collection.geometry.Point3d (com.conversantmedia.util.collection.geometry.Point1d and com.conversantmedia.util.collection.geometry.Point3d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7861cc)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Point3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point3d point3d0 = new Point3d((-726.138236), (-726.138236), (-726.138236));
      Point3d point3d1 = new Point3d((-726.138236), 2, 1);
      boolean boolean0 = point3d0.equals(point3d1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 0.0);
      Point3d point3d1 = new Point3d(0, 0.0, 0);
      boolean boolean0 = point3d1.equals(point3d0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      Point3d point3d1 = new Point3d(2, 0.0, 0.0);
      boolean boolean0 = point3d0.equals(point3d1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      Object object0 = new Object();
      boolean boolean0 = point3d0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      boolean boolean0 = point3d0.equals(point3d0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      boolean boolean0 = point3d0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point3d point3d0 = new Point3d(315.713347888264, 315.713347888264, 315.713347888264);
      // Undeclared exception!
      try { 
        point3d0.distance((HyperPoint) point3d0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid dimension
         //
         verifyException("com.conversantmedia.util.collection.geometry.Point3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      double double0 = point3d0.distance((HyperPoint) point3d0, 2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point3d point3d0 = new Point3d((-721.259891), (-721.259891), (-721.259891));
      // Undeclared exception!
      try { 
        point3d0.getCoord(639);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid dimension
         //
         verifyException("com.conversantmedia.util.collection.geometry.Point3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point3d point3d0 = new Point3d((-39.55249053534918), (-39.55249053534918), (-39.55249053534918));
      Double double0 = point3d0.getCoord(0);
      assertEquals((-39.55249053534918), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 3072.3671);
      Point3d.Builder point3d_Builder0 = new Point3d.Builder();
      HyperRect hyperRect0 = point3d_Builder0.getBBox(point3d0);
      assertEquals(0.0, hyperRect0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 0.0);
      int int0 = point3d0.getNDim();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1932.0), (-1932.0), (-1932.0));
      // Undeclared exception!
      try { 
        point3d0.distance((HyperPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Point3d", e);
      }
  }
}
