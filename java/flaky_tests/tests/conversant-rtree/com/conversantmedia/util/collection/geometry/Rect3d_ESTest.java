/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 19:25:18 GMT 2022
 */

package com.conversantmedia.util.collection.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.conversantmedia.util.collection.geometry.Point3d;
import com.conversantmedia.util.collection.geometry.Range1d;
import com.conversantmedia.util.collection.geometry.Rect2d;
import com.conversantmedia.util.collection.geometry.Rect3d;
import com.conversantmedia.util.collection.spatial.HyperPoint;
import com.conversantmedia.util.collection.spatial.HyperRect;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Rect3d_ESTest extends Rect3d_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1728.134034497086), (-1728.134034497086), 1.0);
      Rect3d rect3d0 = new Rect3d(point3d0);
      Point3d point3d1 = new Point3d(750.9913460580452, 1406.0739371458756, 3);
      Rect3d rect3d1 = new Rect3d(point3d1, point3d0);
      boolean boolean0 = rect3d1.intersects(rect3d0);
      assertEquals(1.5540189060876567E7, rect3d1.cost(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(0, 2, (-1727.1474957246585), 1, 1, 2);
      boolean boolean0 = rect3d0.intersects(rect3d0);
      assertFalse(boolean0);
      assertEquals(1729.1474957246585, rect3d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1728.134034497086), (-1728.134034497086), 1.0);
      Rect3d rect3d0 = new Rect3d(point3d0);
      Point3d point3d1 = new Point3d(750.9913460580452, 1406.0739371458756, 3);
      Rect3d rect3d1 = new Rect3d(point3d1, point3d0);
      boolean boolean0 = rect3d1.contains(rect3d0);
      assertTrue(boolean0);
      assertEquals(1.5540189060876567E7, rect3d1.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point3d point3d0 = new Point3d((-462.4757), 0.0, 0.0);
      Rect3d rect3d0 = new Rect3d(point3d0);
      // Undeclared exception!
      try { 
        rect3d0.getRange((-2602));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid dimension
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 170.584196313);
      Point3d point3d1 = new Point3d(2, 1737.5, (-988.4911956));
      Rect3d rect3d0 = new Rect3d(point3d0, point3d1);
      rect3d0.getCentroid();
      assertEquals(4027786.986897675, rect3d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 170.584196313);
      Rect3d rect3d0 = new Rect3d(point3d0);
      HyperPoint hyperPoint0 = rect3d0.getCentroid();
      assertTrue(hyperPoint0.equals((Object)point3d0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d((-499.70746384), 1.0, 0.0, 1.0, 0.0, 3679.35485233436);
      HyperRect hyperRect0 = rect3d0.getMbr(rect3d0);
      assertEquals(1842280.4366797353, rect3d0.cost(), 0.01);
      assertEquals(1842280.4366797353, hyperRect0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d((-2247.58708), (-2316.4924), 1, 1, (-860.4128006255197), 640.04822264438);
      double double0 = rect3d0.perimeter();
      assertEquals(17374.85960807544, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d((-1715.0067457093367), 0, 1, (-1715.0067457093367), (-1715.0067457093367), 1.0E-12);
      double double0 = rect3d0.perimeter();
      assertEquals(3, rect3d0.getNDim());
      assertEquals((-6864.026982837343), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(2232.8, 2.0, 2.0, 621.611442234021, 2421.495383395767, 621.611442234021);
      double double0 = rect3d0.getRange(0);
      assertEquals((-1611.188557765979), double0, 0.01);
      assertEquals(2.4154085314525957E9, rect3d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1632.44), 2.0, 1405.79580198);
      Rect3d rect3d0 = new Rect3d(point3d0, point3d0);
      Point3d point3d1 = new Point3d((-2256.529509815), (-2256.529509815), (-3178.698871963478));
      Rect3d rect3d1 = new Rect3d(point3d0, point3d1);
      HyperRect hyperRect0 = rect3d1.getMbr(rect3d0);
      assertEquals(6.461957905427372E9, hyperRect0.cost(), 0.01);
      assertEquals(6.461957905427372E9, rect3d1.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d((-499.70746384), 1.0, 0.0, 1.0, 0.0, 3679.35485233436);
      double double0 = rect3d0.cost();
      assertEquals(1842280.4366797353, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point3d point3d0 = new Point3d((-988.4911956), (-988.4911956), (-988.4911956));
      Rect3d rect3d0 = new Rect3d(point3d0, point3d0);
      // Undeclared exception!
      try { 
        rect3d0.intersects((HyperRect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1719.7772054834263), (-1719.7772054834263), (-1719.7772054834263));
      Rect3d rect3d0 = new Rect3d(point3d0, point3d0);
      Range1d range1d0 = new Range1d(2, 0.0);
      // Undeclared exception!
      try { 
        rect3d0.intersects(range1d0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Range1d cannot be cast to class com.conversantmedia.util.collection.geometry.Rect3d (com.conversantmedia.util.collection.geometry.Range1d and com.conversantmedia.util.collection.geometry.Rect3d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7f457e60)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point3d point3d0 = new Point3d(2376.0, 2376.0, 2376.0);
      Rect3d rect3d0 = new Rect3d(point3d0);
      // Undeclared exception!
      try { 
        rect3d0.contains((HyperRect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1521.7620144623759, 1521.7620144623759, 1521.7620144623759, 1521.7620144623759, 1521.7620144623759, 1521.7620144623759);
      Range1d range1d0 = new Range1d(1521.7620144623759, 1521.7620144623759);
      // Undeclared exception!
      try { 
        rect3d0.contains(range1d0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Range1d cannot be cast to class com.conversantmedia.util.collection.geometry.Rect3d (com.conversantmedia.util.collection.geometry.Range1d and com.conversantmedia.util.collection.geometry.Rect3d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7f457e60)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rect3d rect3d0 = null;
      try {
        rect3d0 = new Rect3d((Point3d) null, (Point3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rect3d rect3d0 = null;
      try {
        rect3d0 = new Rect3d((Point3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point3d point3d0 = new Point3d((-744.01), 0.0, (-744.01));
      Rect3d rect3d0 = new Rect3d(point3d0, point3d0);
      double double0 = rect3d0.getRange(2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point3d point3d0 = new Point3d(0.0, 0.0, 170.584196313);
      Rect3d rect3d0 = new Rect3d(point3d0);
      double double0 = rect3d0.getRange(1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d((-499.70746384), 1.0, 0.0, 1.0, 0.0, 3679.35485233436);
      double double0 = rect3d0.getRange(0);
      assertEquals(1842280.4366797353, rect3d0.cost(), 0.01);
      assertEquals(500.70746384, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1728.134034497086), (-1728.134034497086), 1.0);
      Rect3d rect3d0 = new Rect3d(point3d0);
      int int0 = rect3d0.getNDim();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1556.8334312517445, 1556.8334312517445, 1556.8334312517445, 1556.8334312517445, 1556.8334312517445, 1556.8334312517445);
      Rect3d rect3d1 = new Rect3d(1556.8334312517445, 1556.8334312517445, 1556.8334312517445, 1556.8334312517445, 1556.8334312517445, (-0.36815612960936994));
      boolean boolean0 = rect3d0.equals(rect3d1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1551.6868386722547, 1551.6868386722547, 1551.6868386722547, 1551.6868386722547, 1551.6868386722547, 1551.6868386722547);
      Rect3d rect3d1 = new Rect3d(1551.6868386722547, 1551.6868386722547, 1551.6868386722547, 1551.6868386722547, 1551.6868386722547, 1551.6868386722547);
      boolean boolean0 = rect3d0.equals(rect3d1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1551.6868386722547, 1551.6868386722547, 1551.6868386722547, 1551.6868386722547, 1551.6868386722547, 1551.6868386722547);
      Rect3d rect3d1 = new Rect3d(1551.6868386722547, (-1759.9175917438572), (-1759.9175917438572), (-1759.9175917438572), (-1759.9175917438572), 1551.6868386722547);
      boolean boolean0 = rect3d0.equals(rect3d1);
      assertEquals(0.0, rect3d1.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1539.6914352992346, 1539.6914352992346, 1539.6914352992346, 1539.6914352992346, 1539.6914352992346, 1539.6914352992346);
      boolean boolean0 = rect3d0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1551.6868386722547, 1551.6868386722547, 1551.6868386722547, 1551.6868386722547, 1551.6868386722547, 1551.6868386722547);
      boolean boolean0 = rect3d0.equals(rect3d0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1744.21808), 1.0, (-1744.21808));
      Rect3d rect3d0 = new Rect3d(point3d0, point3d0);
      Object object0 = new Object();
      boolean boolean0 = rect3d0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d((-1727.1474957246585), 1.0E-12, 2, (-2827.02616558), 1, (-1.0));
      Rect3d rect3d1 = new Rect3d((-2827.02616558), (-378.0), 1, 2604.0, 977.9331064, (-1727.1474957246585));
      boolean boolean0 = rect3d0.intersects(rect3d1);
      assertEquals(1.2726265108880957E10, rect3d1.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1715.0067457093367), (-1715.0067457093367), (-1715.0067457093367));
      Rect3d rect3d0 = new Rect3d((-1715.0067457093367), 0, 1, (-1715.0067457093367), (-1715.0067457093367), 1.0E-12);
      Rect3d rect3d1 = new Rect3d(point3d0, point3d0);
      boolean boolean0 = rect3d1.intersects(rect3d0);
      assertEquals(0.0, rect3d0.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1715.0067457093367), (-1715.0067457093367), (-1715.0067457093367));
      Rect3d.Builder rect3d_Builder0 = new Rect3d.Builder();
      HyperRect hyperRect0 = rect3d_Builder0.getMbr(point3d0, point3d0);
      Rect3d rect3d0 = new Rect3d((-1715.0067457093367), 0, 1, (-1715.0067457093367), (-1715.0067457093367), 1.0E-12);
      boolean boolean0 = rect3d0.intersects(hyperRect0);
      assertFalse(boolean0);
      assertEquals(0.0, rect3d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1728.0), (-1728.0), (-1728.0));
      Rect3d rect3d0 = new Rect3d(1, (-1728.0), 0, 1, 0, 2);
      Rect3d rect3d1 = new Rect3d(point3d0);
      boolean boolean0 = rect3d1.intersects(rect3d0);
      assertFalse(boolean0);
      assertEquals(0.0, rect3d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1728.134034497086), (-1728.134034497086), 1.0);
      Rect3d rect3d0 = new Rect3d(point3d0);
      boolean boolean0 = rect3d0.intersects(rect3d0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1, 0, 0, (-1727.1474957246585), 1, (-1727.1474957246585));
      boolean boolean0 = rect3d0.intersects(rect3d0);
      assertFalse(boolean0);
      assertEquals(2984765.6194836837, rect3d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d((-1727.1474957246585), 1.0E-12, 2, (-2827.02616558), 1, (-1.0));
      Rect3d rect3d1 = new Rect3d((-2827.02616558), (-378.0), 1, 2604.0, 977.9331064, (-1727.1474957246585));
      boolean boolean0 = rect3d1.contains(rect3d0);
      assertEquals(1.2726265108880957E10, rect3d1.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1544.4995469062053, 1544.4995469062053, 1544.4995469062053, 1544.4995469062053, 1544.4995469062053, 1544.4995469062053);
      Rect3d rect3d1 = new Rect3d(1544.4995469062053, 1544.4995469062053, (-1011.4258452432992), (-1009.38334), 1544.4995469062053, 3716.982938031873);
      boolean boolean0 = rect3d0.contains(rect3d1);
      assertFalse(boolean0);
      assertEquals(0.0, rect3d1.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1744.21808), 1.0, (-1744.21808));
      Point3d point3d1 = new Point3d((-1744.21808), (-1728.134034497086), (-5226.7738));
      Rect3d rect3d0 = new Rect3d(point3d1, point3d1);
      Rect3d.Builder rect3d_Builder0 = new Rect3d.Builder();
      HyperRect hyperRect0 = rect3d_Builder0.getMbr(point3d1, point3d0);
      boolean boolean0 = rect3d0.contains(hyperRect0);
      assertEquals(0.0, hyperRect0.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1715.0067457093367), (-1715.0067457093367), (-1715.0067457093367));
      Rect3d.Builder rect3d_Builder0 = new Rect3d.Builder();
      HyperRect hyperRect0 = rect3d_Builder0.getMbr(point3d0, point3d0);
      Rect3d rect3d0 = new Rect3d((-1715.0067457093367), 0, 1, (-1715.0067457093367), (-1715.0067457093367), 1.0E-12);
      boolean boolean0 = rect3d0.contains(hyperRect0);
      assertEquals(0.0, rect3d0.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(0, 2, 1, 0, 1, 1);
      Rect3d rect3d1 = new Rect3d(0, 1, (-1728.134034497086), (-1728.134034497086), 2, 1);
      boolean boolean0 = rect3d1.contains(rect3d0);
      assertEquals(2988175.375221673, rect3d1.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1728.134034497086), (-1728.134034497086), 1.0);
      Rect3d rect3d0 = new Rect3d(point3d0);
      boolean boolean0 = rect3d0.contains(rect3d0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1728.134034497086), (-1728.134034497086), (-1728.134034497086));
      Rect3d rect3d0 = new Rect3d(point3d0, point3d0);
      Rect3d rect3d1 = new Rect3d(0, 1, (-1728.134034497086), (-1728.134034497086), 2, 1);
      boolean boolean0 = rect3d1.contains(rect3d0);
      assertEquals(2988175.375221673, rect3d1.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d((-2247.58708), (-2316.4924), 1, 1, (-860.4128006255197), 640.04822264438);
      // Undeclared exception!
      try { 
        rect3d0.getRange(2857);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid dimension
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1728.134034497086), (-1728.134034497086), (-1728.134034497086));
      Point3d point3d1 = new Point3d(2, 0, 2);
      Rect3d rect3d0 = new Rect3d(point3d0, point3d1);
      assertEquals(5.172933821226374E9, rect3d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d((-499.70746384), 1.0, 0.0, 1.0, 0.0, 3679.35485233436);
      Rect3d.Builder rect3d_Builder0 = new Rect3d.Builder();
      HyperRect hyperRect0 = rect3d_Builder0.getBBox(rect3d0);
      assertEquals(1842280.4366797353, hyperRect0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Rect3d.Builder rect3d_Builder0 = new Rect3d.Builder();
      Point3d point3d0 = new Point3d(0.0, 0.0, 170.584196313);
      HyperRect hyperRect0 = rect3d_Builder0.getMbr(point3d0, point3d0);
      Rect3d rect3d0 = new Rect3d(point3d0);
      HyperRect hyperRect1 = rect3d0.getMbr(hyperRect0);
      assertTrue(rect3d0.equals((Object)hyperRect0));
      assertTrue(hyperRect1.equals((Object)hyperRect0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1545.5687798, 1545.5687798, 1545.5687798, 1545.5687798, 1545.5687798, 1545.5687798);
      HyperPoint hyperPoint0 = rect3d0.getMax();
      assertEquals(3, hyperPoint0.getNDim());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1728.134034497086), (-1728.134034497086), 1.0);
      Rect3d rect3d0 = new Rect3d(point3d0);
      rect3d0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1545.5687798, 1545.5687798, 1545.5687798, 1545.5687798, 1545.5687798, 1545.5687798);
      HyperPoint hyperPoint0 = rect3d0.getCentroid();
      assertEquals(3, hyperPoint0.getNDim());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point3d point3d0 = new Point3d((-1728.134034497086), (-1690.7094), 0.0);
      Rect3d rect3d0 = new Rect3d(point3d0);
      Rect3d rect3d1 = new Rect3d((-1728.134034497086), (-1728.134034497086), 1, 0.0, 0.0, 920.078955);
      boolean boolean0 = rect3d0.intersects(rect3d1);
      assertEquals(2.744780809592942E9, rect3d1.cost(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Point3d point3d0 = new Point3d(1794.85137344574, (-140.36), (-140.36));
      Rect3d rect3d0 = new Rect3d(point3d0, point3d0);
      Rect2d rect2d0 = new Rect2d((-140.36), (-1374.39), (-1.0), 0);
      // Undeclared exception!
      try { 
        rect3d0.getMbr(rect2d0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Rect2d cannot be cast to class com.conversantmedia.util.collection.geometry.Rect3d (com.conversantmedia.util.collection.geometry.Rect2d and com.conversantmedia.util.collection.geometry.Rect3d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7f457e60)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1555.4771735139284, 1555.4771735139284, 1555.4771735139284, 1555.4771735139284, 1555.4771735139284, 1555.4771735139284);
      String string0 = rect3d0.toString();
      assertEquals("(1555.4771735139284,1555.4771735139284,1555.4771735139284) (1555.4771735139284,1555.4771735139284,1555.4771735139284)", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1545.5687798, 1545.5687798, 1545.5687798, 1545.5687798, 1545.5687798, 1545.5687798);
      double double0 = rect3d0.perimeter();
      assertEquals(3, rect3d0.getNDim());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(1555.4771735139284, 1555.4771735139284, 1555.4771735139284, 1555.4771735139284, 1555.4771735139284, 1555.4771735139284);
      HyperPoint hyperPoint0 = rect3d0.getMin();
      assertEquals(3, hyperPoint0.getNDim());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Point3d point3d0 = new Point3d(1794.85137344574, (-140.36), (-140.36));
      Rect3d rect3d0 = new Rect3d(point3d0, point3d0);
      double double0 = rect3d0.cost();
      assertEquals(0.0, double0, 0.01);
  }
}
