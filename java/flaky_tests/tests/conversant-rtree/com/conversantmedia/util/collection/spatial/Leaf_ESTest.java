/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 19:20:06 GMT 2022
 */

package com.conversantmedia.util.collection.spatial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.conversantmedia.util.collection.geometry.Point1d;
import com.conversantmedia.util.collection.geometry.Point2d;
import com.conversantmedia.util.collection.geometry.Range1d;
import com.conversantmedia.util.collection.geometry.Rect2d;
import com.conversantmedia.util.collection.geometry.Rect3d;
import com.conversantmedia.util.collection.spatial.AxialSplitLeaf;
import com.conversantmedia.util.collection.spatial.HyperRect;
import com.conversantmedia.util.collection.spatial.Leaf;
import com.conversantmedia.util.collection.spatial.LinearSplitLeaf;
import com.conversantmedia.util.collection.spatial.Node;
import com.conversantmedia.util.collection.spatial.QuadraticSplitLeaf;
import com.conversantmedia.util.collection.spatial.RTree;
import com.conversantmedia.util.collection.spatial.RectBuilder;
import com.conversantmedia.util.collection.spatial.Stats;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Leaf_ESTest extends Leaf_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 542, 542);
      Stats stats0 = new Stats();
      // Undeclared exception!
      try { 
        axialSplitLeaf0.collectStats(stats0, (-1401));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1401 out of bounds for length 1000
         //
         verifyException("com.conversantmedia.util.collection.spatial.Stats", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, (-10), 0);
      Point2d point2d0 = new Point2d((-10), 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      axialSplitLeaf0.size = (-10);
      Object object0 = new Object();
      boolean boolean0 = axialSplitLeaf0.contains(rect2d0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuadraticSplitLeaf<Object> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Object>((RectBuilder<Object>) null, (-1), 31);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      quadraticSplitLeaf0.size = (-1);
      quadraticSplitLeaf0.forEach(consumer0);
      assertTrue(quadraticSplitLeaf0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point2d point2d0 = new Point2d(4.9E-324, 4.9E-324);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(anyInt());
      QuadraticSplitLeaf<Integer> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Integer>(rectBuilder0, 14, 1756);
      // Undeclared exception!
      try { 
        quadraticSplitLeaf0.split((Integer) point2d0.Y);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 1756
         //
         verifyException("com.conversantmedia.util.collection.spatial.QuadraticSplitLeaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 339, 339);
      axialSplitLeaf0.size = (-1431);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      axialSplitLeaf0.intersects((HyperRect) null, consumer0);
      assertTrue(axialSplitLeaf0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 0, 1);
      Object object0 = new Object();
      axialSplitLeaf0.add(object0);
      Object[] objectArray0 = new Object[1];
      int int0 = axialSplitLeaf0.intersects((HyperRect) rect2d0, objectArray0, 1);
      assertEquals(1, axialSplitLeaf0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point2d point2d0 = new Point2d(4.9E-324, 4.9E-324);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 14, 14);
      axialSplitLeaf0.add(1);
      axialSplitLeaf0.add(point2d0);
      Object[] objectArray0 = new Object[5];
      int int0 = axialSplitLeaf0.intersects((HyperRect) rect2d0, objectArray0, 0);
      assertEquals(2, axialSplitLeaf0.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, (-10), 0);
      Point2d point2d0 = new Point2d((-10), 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      axialSplitLeaf0.size = (-10);
      Object[] objectArray0 = new Object[5];
      int int0 = axialSplitLeaf0.intersects((HyperRect) rect2d0, objectArray0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 342, 342);
      linearSplitLeaf0.size = (-1);
      linearSplitLeaf0.search((HyperRect) null, (Consumer<Object>) null);
      assertEquals((-1), linearSplitLeaf0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 0, 1);
      Object object0 = new Object();
      axialSplitLeaf0.add(object0);
      Object[] objectArray0 = new Object[0];
      int int0 = axialSplitLeaf0.search((HyperRect) rect2d0, objectArray0, 0);
      assertEquals(1, axialSplitLeaf0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2d point2d0 = new Point2d(4.9E-324, 4.9E-324);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 14, 14);
      axialSplitLeaf0.add(1);
      Object object0 = new Object();
      axialSplitLeaf0.add(object0);
      Object[] objectArray0 = new Object[6];
      int int0 = axialSplitLeaf0.search((HyperRect) rect2d0, objectArray0, 0);
      assertEquals(2, axialSplitLeaf0.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2d point2d0 = new Point2d((-22.786013927843847), (-22.786013927843847));
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 1, 1);
      axialSplitLeaf0.size = (-622);
      Object[] objectArray0 = new Object[1];
      int int0 = axialSplitLeaf0.search((HyperRect) rect2d0, objectArray0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 385, 385);
      Integer integer0 = new Integer(385);
      Node<Object> node0 = axialSplitLeaf0.add(integer0);
      axialSplitLeaf0.update(integer0, node0);
      assertEquals(1, axialSplitLeaf0.totalSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 967, 967);
      Integer integer0 = new Integer(967);
      Node<Object> node0 = axialSplitLeaf0.update(axialSplitLeaf0, integer0);
      assertTrue(node0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point2d point2d0 = new Point2d(4.9E-324, 4.9E-324);
      Rect2d rect2d0 = new Rect2d(1, 0, 0, 4.9E-324);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 14, 14);
      axialSplitLeaf0.add(1);
      Object object0 = new Object();
      axialSplitLeaf0.add(object0);
      axialSplitLeaf0.add(point2d0);
      axialSplitLeaf0.remove(object0);
      assertEquals(2, axialSplitLeaf0.totalSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 3, 3);
      linearSplitLeaf0.size = 664;
      // Undeclared exception!
      try { 
        linearSplitLeaf0.add(linearSplitLeaf0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.LinearSplitLeaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 342, 342);
      linearSplitLeaf0.size = (-1);
      Node<Object> node0 = linearSplitLeaf0.update(rectBuilder0, rectBuilder0);
      assertEquals((-1), node0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 0, 1);
      Object object0 = new Object();
      axialSplitLeaf0.add(object0);
      int int0 = axialSplitLeaf0.totalSize();
      assertEquals(1, axialSplitLeaf0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      QuadraticSplitLeaf<Integer> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Integer>(rectBuilder0, (-491), 937);
      assertEquals(0, quadraticSplitLeaf0.totalSize());
      
      quadraticSplitLeaf0.size = (-491);
      int int0 = quadraticSplitLeaf0.totalSize();
      assertEquals((-491), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      QuadraticSplitLeaf<Object> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Object>(rectBuilder0, 128, 128);
      assertEquals(0, quadraticSplitLeaf0.size());
      
      quadraticSplitLeaf0.size = 128;
      int int0 = quadraticSplitLeaf0.size();
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuadraticSplitLeaf<Object> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Object>((RectBuilder<Object>) null, (-1), 31);
      assertEquals(0, quadraticSplitLeaf0.size());
      
      quadraticSplitLeaf0.size = (-1);
      int int0 = quadraticSplitLeaf0.size();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point2d point2d0 = new Point2d((-32.42733964100482), (-32.42733964100482));
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 1, 1);
      Object object0 = new Object();
      axialSplitLeaf0.add(object0);
      Object[] objectArray0 = new Object[4];
      int int0 = axialSplitLeaf0.search((HyperRect) rect2d0, objectArray0, 1);
      assertEquals(1, axialSplitLeaf0.totalSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, (-264), 0);
      Object object0 = new Object();
      axialSplitLeaf0.size = (-264);
      Node<Object> node0 = axialSplitLeaf0.remove(object0);
      assertEquals((-264), node0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point2d point2d0 = new Point2d(4.9E-324, 4.9E-324);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 14, 14);
      axialSplitLeaf0.add(point2d0.Y);
      axialSplitLeaf0.instrument();
      assertEquals(1, axialSplitLeaf0.totalSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 342, 342);
      linearSplitLeaf0.size = (-1);
      Node<Object> node0 = linearSplitLeaf0.instrument();
      assertEquals((-1), node0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QuadraticSplitLeaf<Object> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Object>((RectBuilder<Object>) null, 3170, 3170);
      HyperRect hyperRect0 = quadraticSplitLeaf0.getBound();
      assertNull(hyperRect0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2d point2d0 = new Point2d(4.9E-324, 4.9E-324);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 14, 14);
      axialSplitLeaf0.add(point2d0.X);
      axialSplitLeaf0.getBound();
      assertEquals(1, axialSplitLeaf0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 3113, 3720);
      Range1d range1d0 = new Range1d(0, 3567);
      linearSplitLeaf0.mbr = (HyperRect) range1d0;
      HyperRect hyperRect0 = linearSplitLeaf0.getBound();
      assertEquals(3567.0, hyperRect0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range1d range1d0 = new Range1d(3, 3);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0, range1d0, range1d0, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 3, 3);
      Node<Object> node0 = linearSplitLeaf0.add(linearSplitLeaf0);
      linearSplitLeaf0.classify(node0, node0, node0);
      // Undeclared exception!
      try { 
        linearSplitLeaf0.classify(node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 1266, 1266);
      // Undeclared exception!
      try { 
        linearSplitLeaf0.update((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point2d point2d0 = new Point2d((-1601.9057050372512), (-2806.4218706936));
      Rect2d rect2d0 = new Rect2d(point2d0);
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>((RectBuilder<Object>) null, 961, 3);
      // Undeclared exception!
      try { 
        axialSplitLeaf0.search((HyperRect) rect2d0, (Object[]) null, 3558);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QuadraticSplitLeaf<Object> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Object>((RectBuilder<Object>) null, 44, 44);
      Range1d range1d0 = new Range1d(44, 1.0);
      quadraticSplitLeaf0.size = 44;
      // Undeclared exception!
      try { 
        quadraticSplitLeaf0.search((HyperRect) range1d0, (Consumer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range1d range1d0 = new Range1d(3, 3);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 3, 3);
      linearSplitLeaf0.add(range1d0);
      Point2d point2d0 = new Point2d(3, 3);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        linearSplitLeaf0.search((HyperRect) rect2d0, consumer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Range1d cannot be cast to class com.conversantmedia.util.collection.geometry.Rect2d (com.conversantmedia.util.collection.geometry.Range1d and com.conversantmedia.util.collection.geometry.Rect2d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3d888855)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 0, 1);
      Object object0 = new Object();
      axialSplitLeaf0.add(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      axialSplitLeaf0.size = 93;
      // Undeclared exception!
      try { 
        axialSplitLeaf0.search((HyperRect) rect2d0, consumer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 1266, 1266);
      linearSplitLeaf0.size = 1266;
      Integer integer0 = new Integer(1266);
      // Undeclared exception!
      try { 
        linearSplitLeaf0.remove(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 67, 67);
      linearSplitLeaf0.size = 74;
      // Undeclared exception!
      try { 
        linearSplitLeaf0.remove((Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 67 out of bounds for length 67
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d(31, 0.0, 3166.9723, 0.0, 3166.9723, (-59.0));
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>((RectBuilder<Object>) null, 31, 97);
      // Undeclared exception!
      try { 
        axialSplitLeaf0.intersects((HyperRect) rect3d0, (Object[]) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 0, 1);
      axialSplitLeaf0.add(rect2d0);
      Point1d point1d0 = new Point1d((-1486.4066177872173));
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        axialSplitLeaf0.intersects((HyperRect) range1d0, consumer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Rect2d cannot be cast to class com.conversantmedia.util.collection.geometry.Range1d (com.conversantmedia.util.collection.geometry.Rect2d and com.conversantmedia.util.collection.geometry.Range1d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3d888855)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      QuadraticSplitLeaf<Integer> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Integer>((RectBuilder<Integer>) null, 3, 3);
      quadraticSplitLeaf0.size = 3742;
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        quadraticSplitLeaf0.forEach(consumer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      // Undeclared exception!
      try { 
        Leaf.create((RectBuilder<Object>) null, (-5217), (-5217), (RTree.Split) rTree_Split0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -5217
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 967, 967);
      Integer integer0 = new Integer(967);
      axialSplitLeaf0.add(integer0);
      Point1d point1d0 = new Point1d(967);
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        axialSplitLeaf0.contains(range1d0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 0, 1);
      Object object0 = new Object();
      axialSplitLeaf0.add(object0);
      Range1d range1d0 = new Range1d(0.0, 1607.171886537119);
      // Undeclared exception!
      try { 
        axialSplitLeaf0.contains(range1d0, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Rect2d cannot be cast to class com.conversantmedia.util.collection.geometry.Range1d (com.conversantmedia.util.collection.geometry.Rect2d and com.conversantmedia.util.collection.geometry.Range1d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3d888855)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 931, 931);
      // Undeclared exception!
      try { 
        linearSplitLeaf0.collectStats((Stats) null, 931);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      AxialSplitLeaf<Integer> axialSplitLeaf0 = new AxialSplitLeaf<Integer>(rectBuilder0, 0, 0);
      Stats stats0 = new Stats();
      // Undeclared exception!
      try { 
        axialSplitLeaf0.collectStats(stats0, 2370);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2370 out of bounds for length 1000
         //
         verifyException("com.conversantmedia.util.collection.spatial.Stats", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range1d range1d0 = new Range1d(44, 44);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0, range1d0, range1d0, (HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 44, 1);
      Object object0 = new Object();
      Node<Object> node0 = linearSplitLeaf0.add(object0);
      // Undeclared exception!
      try { 
        linearSplitLeaf0.classify(node0, node0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range1d range1d0 = new Range1d(3, 3);
      Point2d point2d0 = new Point2d(3, 2.0);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0, range1d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 3, 3);
      Node<Object> node0 = linearSplitLeaf0.add(range1d0);
      // Undeclared exception!
      try { 
        linearSplitLeaf0.classify(node0, node0, node0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Rect2d cannot be cast to class com.conversantmedia.util.collection.geometry.Range1d (com.conversantmedia.util.collection.geometry.Rect2d and com.conversantmedia.util.collection.geometry.Range1d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3d888855)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range1d range1d0 = new Range1d(32, 32);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0, range1d0, range1d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 32, 32);
      Node<Object> node0 = linearSplitLeaf0.add(linearSplitLeaf0);
      linearSplitLeaf0.size = (-1640);
      // Undeclared exception!
      try { 
        linearSplitLeaf0.classify(node0, node0, range1d0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1640 out of bounds for length 32
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range1d range1d0 = new Range1d(33, 33);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 33, 33);
      linearSplitLeaf0.add(range1d0);
      // Undeclared exception!
      try { 
        linearSplitLeaf0.intersects((HyperRect) range1d0, (Consumer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range1d range1d0 = new Range1d(5, 5);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 5, 5);
      Rect2d rect2d0 = new Rect2d(2154.823, 0.0, 1.0, 1.0);
      linearSplitLeaf0.mbr = (HyperRect) rect2d0;
      // Undeclared exception!
      try { 
        linearSplitLeaf0.add(linearSplitLeaf0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Range1d cannot be cast to class com.conversantmedia.util.collection.geometry.Rect2d (com.conversantmedia.util.collection.geometry.Range1d and com.conversantmedia.util.collection.geometry.Rect2d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3d888855)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 1259, 0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        linearSplitLeaf0.add(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.conversantmedia.util.collection.spatial.LinearSplitLeaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>((RectBuilder<Object>) null, 401, 401);
      int int0 = axialSplitLeaf0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 84, 84);
      Stats stats0 = new Stats();
      linearSplitLeaf0.collectStats(stats0, 84);
      assertEquals(84, stats0.getMaxDepth());
      assertEquals(0, stats0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 64, 64);
      Stats stats0 = new Stats();
      linearSplitLeaf0.collectStats(stats0, 0);
      assertEquals(0.0F, stats0.getEntriesPerLeaf(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Point2d point2d0 = new Point2d(4.9E-324, 4.9E-324);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 14, 14);
      axialSplitLeaf0.add(1);
      Object object0 = new Object();
      boolean boolean0 = axialSplitLeaf0.contains(rect2d0, object0);
      assertEquals(1, axialSplitLeaf0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Point2d point2d0 = new Point2d(4.9E-324, 4.9E-324);
      Rect2d rect2d0 = new Rect2d(point2d0);
      Rect2d rect2d1 = new Rect2d(1, 0.0, 4.9E-324, 412.67);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 14, 14);
      axialSplitLeaf0.add(1);
      Object object0 = new Object();
      boolean boolean0 = axialSplitLeaf0.contains(rect2d1, object0);
      assertEquals(1, axialSplitLeaf0.totalSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 2975, 1358);
      axialSplitLeaf0.add(rect2d0);
      boolean boolean0 = axialSplitLeaf0.contains(rect2d0, rect2d0);
      assertEquals(1, axialSplitLeaf0.totalSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 21, 21);
      Integer integer0 = new Integer(21);
      axialSplitLeaf0.add(integer0);
      // Undeclared exception!
      try { 
        axialSplitLeaf0.forEach((Consumer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 0, 1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      axialSplitLeaf0.forEach(consumer0);
      assertEquals(0, axialSplitLeaf0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Node<Object> node0 = Leaf.create((RectBuilder<Object>) null, 1739, 1739, (RTree.Split) rTree_Split0);
      assertEquals(0, node0.totalSize());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(0, (-8.608612977103915), (-8.608612977103915), 1);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 0, 1);
      Object object0 = new Object();
      Node<Object> node0 = axialSplitLeaf0.add(object0);
      // Undeclared exception!
      try { 
        axialSplitLeaf0.classify(node0, node0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(1, 0, 0, 4.9E-324);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 14, 14);
      axialSplitLeaf0.add(1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      axialSplitLeaf0.intersects((HyperRect) rect2d0, consumer0);
      assertEquals(1, axialSplitLeaf0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range1d range1d0 = new Range1d(3, 3);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 3, 3);
      linearSplitLeaf0.add(linearSplitLeaf0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        linearSplitLeaf0.intersects((HyperRect) range1d0, objectArray0, (-575));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -575 out of bounds for length 0
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 21, 1);
      Object object0 = new Object();
      axialSplitLeaf0.add(object0);
      Point2d point2d1 = new Point2d(21, 0);
      Rect2d rect2d1 = new Rect2d(point2d1, point2d1);
      Object[] objectArray0 = new Object[5];
      int int0 = axialSplitLeaf0.intersects((HyperRect) rect2d1, objectArray0, 0);
      assertEquals(1, axialSplitLeaf0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range1d range1d0 = new Range1d(5, 5);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 5, 5);
      linearSplitLeaf0.add(range1d0);
      Object[] objectArray0 = new Object[0];
      int int0 = linearSplitLeaf0.intersects((HyperRect) range1d0, objectArray0, 5);
      assertEquals(1, linearSplitLeaf0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range1d range1d0 = new Range1d(2, 2);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 2, 2);
      linearSplitLeaf0.add(range1d0);
      Rect3d rect3d0 = new Rect3d(2, (-334.8673214666634), 2, 4.0, 2.0, 9.0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        linearSplitLeaf0.intersects((HyperRect) rect3d0, objectArray0, 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Range1d cannot be cast to class com.conversantmedia.util.collection.geometry.Rect3d (com.conversantmedia.util.collection.geometry.Range1d and com.conversantmedia.util.collection.geometry.Rect3d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3d888855)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range1d range1d0 = new Range1d(5, 5);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 5, 5);
      linearSplitLeaf0.add(linearSplitLeaf0);
      Range1d range1d1 = new Range1d((-1698.149137085), (-1698.149137085));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linearSplitLeaf0.search((HyperRect) range1d1, consumer0);
      assertEquals(1, linearSplitLeaf0.totalSize());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range1d range1d0 = new Range1d(3, 3);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 3, 3);
      linearSplitLeaf0.add(linearSplitLeaf0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linearSplitLeaf0.search((HyperRect) range1d0, consumer0);
      assertEquals(1, linearSplitLeaf0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range1d range1d0 = new Range1d(2, 2);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 2, 2);
      linearSplitLeaf0.add(range1d0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        linearSplitLeaf0.search((HyperRect) range1d0, objectArray0, (-654));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -654 out of bounds for length 0
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Point2d point2d0 = new Point2d(7.139226501012079, 7.139226501012079);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 0, 1);
      Object object0 = new Object();
      axialSplitLeaf0.add(object0);
      Point2d point2d1 = new Point2d(0, 0);
      Rect2d rect2d1 = new Rect2d(point2d1, point2d1);
      Object[] objectArray0 = new Object[5];
      int int0 = axialSplitLeaf0.search((HyperRect) rect2d1, objectArray0, 1);
      assertEquals(1, axialSplitLeaf0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range1d range1d0 = new Range1d(2, 2);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 2, 2);
      linearSplitLeaf0.add(range1d0);
      Object[] objectArray0 = new Object[0];
      int int0 = linearSplitLeaf0.search((HyperRect) range1d0, objectArray0, 2);
      assertEquals(1, linearSplitLeaf0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range1d range1d0 = new Range1d(3, 3);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 3, 3);
      linearSplitLeaf0.add(linearSplitLeaf0);
      Rect3d rect3d0 = new Rect3d(638.1477338991399, (-1.0), 3, (-2086.8356386609), 638.1477338991399, 182.0971);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        linearSplitLeaf0.search((HyperRect) rect3d0, objectArray0, 3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Range1d cannot be cast to class com.conversantmedia.util.collection.geometry.Rect3d (com.conversantmedia.util.collection.geometry.Range1d and com.conversantmedia.util.collection.geometry.Rect3d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3d888855)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range1d range1d0 = new Range1d(3, 3);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0, range1d0, range1d0, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 3, 3);
      Node<Object> node0 = linearSplitLeaf0.add(linearSplitLeaf0);
      linearSplitLeaf0.classify(node0, node0, range1d0);
      // Undeclared exception!
      try { 
        linearSplitLeaf0.update(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range1d range1d0 = new Range1d(10, 10);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0, range1d0, range1d0, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 10, 10);
      Node<Object> node0 = linearSplitLeaf0.add(linearSplitLeaf0);
      Integer integer0 = new Integer(10);
      linearSplitLeaf0.classify(node0, node0, integer0);
      // Undeclared exception!
      try { 
        linearSplitLeaf0.classify(node0, node0, range1d0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 985, 985);
      Integer integer0 = new Integer(985);
      Node<Object> node0 = axialSplitLeaf0.add(integer0);
      Node<Object> node1 = axialSplitLeaf0.add(node0);
      axialSplitLeaf0.remove(node1);
      assertEquals(1, axialSplitLeaf0.totalSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Point2d point2d0 = new Point2d((-17.788728470396897), (-17.788728470396897));
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 14, 14);
      axialSplitLeaf0.add(1);
      Integer integer0 = new Integer(1);
      axialSplitLeaf0.remove(integer0);
      assertEquals(1, axialSplitLeaf0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Point2d point2d0 = new Point2d((-17.788728470396897), (-17.788728470396897));
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 14, 14);
      axialSplitLeaf0.add(1);
      axialSplitLeaf0.remove(point2d0.X);
      assertEquals(1, axialSplitLeaf0.totalSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 2975, 1358);
      Object object0 = new Object();
      Node<Object> node0 = axialSplitLeaf0.remove(object0);
      assertTrue(node0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      QuadraticSplitLeaf<Object> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Object>((RectBuilder<Object>) null, 3180, 3180);
      boolean boolean0 = quadraticSplitLeaf0.isLeaf();
      assertTrue(boolean0);
      assertEquals(0, quadraticSplitLeaf0.totalSize());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 64, 64);
      Node<Object> node0 = linearSplitLeaf0.instrument();
      assertEquals(0, node0.totalSize());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 2975, 1358);
      String string0 = axialSplitLeaf0.toString();
      assertEquals("AXIAL[null]", string0);
      assertEquals(0, axialSplitLeaf0.totalSize());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      QuadraticSplitLeaf<Integer> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Integer>(rectBuilder0, (-491), 937);
      int int0 = quadraticSplitLeaf0.totalSize();
      assertEquals(0, int0);
  }
}
