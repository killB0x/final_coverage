/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 19:40:01 GMT 2022
 */

package com.conversantmedia.util.collection.spatial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.conversantmedia.util.collection.geometry.Point1d;
import com.conversantmedia.util.collection.geometry.Point2d;
import com.conversantmedia.util.collection.geometry.Range1d;
import com.conversantmedia.util.collection.geometry.Rect2d;
import com.conversantmedia.util.collection.geometry.Rect3d;
import com.conversantmedia.util.collection.spatial.AxialSplitLeaf;
import com.conversantmedia.util.collection.spatial.Branch;
import com.conversantmedia.util.collection.spatial.CounterNode;
import com.conversantmedia.util.collection.spatial.HyperRect;
import com.conversantmedia.util.collection.spatial.Leaf;
import com.conversantmedia.util.collection.spatial.LinearSplitLeaf;
import com.conversantmedia.util.collection.spatial.Node;
import com.conversantmedia.util.collection.spatial.QuadraticSplitLeaf;
import com.conversantmedia.util.collection.spatial.RTree;
import com.conversantmedia.util.collection.spatial.RectBuilder;
import com.conversantmedia.util.collection.spatial.Stats;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CounterNode_ESTest extends CounterNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 1214, 128, rTree_Split0);
      Node<Object> node0 = branch0.instrument();
      branch0.addChild(node0);
      Node<Object> node1 = branch0.instrument();
      CounterNode<Object> counterNode1 = new CounterNode<Object>(node1);
      // Undeclared exception!
      try { 
        counterNode1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      QuadraticSplitLeaf<Object> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Object>(rectBuilder0, 32, 32);
      Point1d point1d0 = new Point1d((-4955.27));
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      RectBuilder<Integer> rectBuilder1 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0, (HyperRect) null).when(rectBuilder1).getBBox(anyInt());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder1, 0, 993);
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>(linearSplitLeaf0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      quadraticSplitLeaf0.search((HyperRect) range1d0, consumer0);
      Rect3d rect3d0 = new Rect3d((-4613.6), 32, (-4613.6), 4.0, 1291.89222, 1.5091827396275213);
      Integer integer0 = new Integer((-1593));
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(0);
      counterNode0.add(integer2);
      counterNode0.update(integer0, integer0);
      Object object0 = new Object();
      CounterNode<Object> counterNode1 = new CounterNode<Object>(quadraticSplitLeaf0);
      counterNode1.remove(integer1);
      CounterNode<Integer> counterNode2 = new CounterNode<Integer>(counterNode0);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      counterNode2.search((HyperRect) range1d0, integerArray0, 0);
      boolean boolean0 = counterNode1.contains(rect3d0, counterNode2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      Rect3d rect3d0 = new Rect3d(1.0, 1.0, 1.0, 4711.370266705, 1079.5921375912328, 4711.370266705);
      RectBuilder<Object> rectBuilder1 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect3d0, rect3d0, rect3d0).when(rectBuilder1).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1000, 1731, rTree_Split0);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(branch0);
      rect3d0.getCentroid();
      Object object0 = new Object();
      counterNode0.instrument();
      Object object1 = new Object();
      counterNode0.remove(object1);
      Object object2 = new Object();
      Node<Object> node0 = counterNode0.add(object2);
      assertFalse(node0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 0, 0);
      linearSplitLeaf0.size = 1;
      CounterNode<Object> counterNode0 = new CounterNode<Object>(linearSplitLeaf0);
      Stats stats0 = new Stats();
      stats0.countLeafAtDepth(1);
      stats0.countEntriesAtDepth(0, 0);
      stats0.setMinFill((-3915));
      counterNode0.collectStats(stats0, 1);
      CounterNode.searchCount = 0;
      // Undeclared exception!
      try { 
        counterNode0.remove(linearSplitLeaf0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 91;
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 91, 91);
      linearSplitLeaf0.instrument();
      int int1 = (-412);
      linearSplitLeaf0.size = (-412);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(linearSplitLeaf0);
      counterNode0.instrument();
      counterNode0.getBound();
      Rect2d rect2d0 = null;
      try {
        rect2d0 = new Rect2d((Point2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      Rect2d rect2d0 = new Rect2d(0.0, 0.0, 1.0E-12, 98.07625797379023);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 871, 871);
      Object object0 = new Object();
      Node<Object> node0 = linearSplitLeaf0.add(object0);
      CounterNode<Object> counterNode1 = new CounterNode<Object>(node0);
      counterNode1.getBound();
      int int0 = counterNode1.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, (-700), 0);
      linearSplitLeaf0.size = (-700);
      Node<Object> node0 = linearSplitLeaf0.instrument();
      CounterNode<Object> counterNode1 = new CounterNode<Object>(node0);
      Integer integer0 = new Integer((-700));
      Node<Object> node1 = counterNode1.update(node0, integer0);
      assertTrue(node1.isLeaf());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 1284, 1284);
      Node<Object> node0 = linearSplitLeaf0.instrument();
      CounterNode<Object> counterNode0 = new CounterNode<Object>(node0);
      counterNode0.size();
      RectBuilder<Integer> rectBuilder1 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      AxialSplitLeaf<Integer> axialSplitLeaf0 = new AxialSplitLeaf<Integer>(rectBuilder1, 1284, 0);
      CounterNode<Integer> counterNode1 = new CounterNode<Integer>(axialSplitLeaf0);
      axialSplitLeaf0.size = 188;
      Point2d point2d0 = new Point2d((-1.0), 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      // Undeclared exception!
      try { 
        counterNode1.contains(rect2d0, (Integer) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 871, 871);
      Object object0 = new Object();
      Node<Object> node0 = linearSplitLeaf0.add(object0);
      CounterNode<Object> counterNode1 = new CounterNode<Object>(node0);
      counterNode1.getBound();
      int int0 = counterNode1.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 0, 201);
      Node<Object> node0 = linearSplitLeaf0.add((Object) null);
      CounterNode<Object> counterNode1 = new CounterNode<Object>(node0);
      Node<Object> node1 = counterNode1.instrument();
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, (-617), 31);
      Node<Object> node0 = linearSplitLeaf0.add(counterNode0);
      Point2d point2d0 = new Point2d(31, (-900.43578));
      Rect2d rect2d0 = new Rect2d(point2d0);
      linearSplitLeaf0.mbr = (HyperRect) rect2d0;
      CounterNode<Object> counterNode1 = new CounterNode<Object>(node0);
      counterNode1.size();
      HyperRect hyperRect0 = counterNode1.getBound();
      assertEquals(0.0, hyperRect0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Node<Object> node0 = Leaf.create(rectBuilder0, 281, 281, (RTree.Split) rTree_Split0);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(node0);
      Object object0 = new Object();
      counterNode0.update(object0, rTree_Split0);
      Stats stats0 = new Stats();
      stats0.countLeafAtDepth(44);
      counterNode0.collectStats(stats0, 0);
      RectBuilder<Integer> rectBuilder1 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder1).getBBox(anyInt());
      AxialSplitLeaf<Integer> axialSplitLeaf0 = new AxialSplitLeaf<Integer>(rectBuilder1, 5592, 281);
      CounterNode<Integer> counterNode1 = new CounterNode<Integer>(axialSplitLeaf0);
      Point2d point2d0 = new Point2d(281, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 1;
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 1;
      integerArray0[7] = (Integer) 0;
      counterNode1.search((HyperRect) rect2d0, integerArray0, 128);
      Integer integer0 = new Integer((-4848));
      axialSplitLeaf0.add(integer0);
      counterNode1.remove((Integer) 1);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      counterNode1.forEach(consumer0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      counterNode1.forEach(consumer1);
      assertTrue(counterNode1.isLeaf());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      int int0 = (-3570);
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Node<Object> node0 = Leaf.create(rectBuilder0, (-3570), 0, (RTree.Split) rTree_Split0);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(node0);
      counterNode0.getBound();
      RectBuilder<Integer> rectBuilder1 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder1).getBBox(anyInt());
      AxialSplitLeaf<Integer> axialSplitLeaf0 = new AxialSplitLeaf<Integer>(rectBuilder1, 0, 957);
      int int1 = (-1307);
      Integer integer0 = new Integer((-1307));
      axialSplitLeaf0.add(integer0);
      CounterNode<Integer> counterNode1 = new CounterNode<Integer>(axialSplitLeaf0);
      counterNode1.size();
      counterNode0.contains((HyperRect) null, (Object) null);
      Integer integer1 = new Integer(957);
      // Undeclared exception!
      try { 
        axialSplitLeaf0.split(integer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.AxialSplitLeaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 0, rTree_Split0);
      Node<Object> node0 = branch0.instrument();
      CounterNode<Object> counterNode0 = new CounterNode<Object>(node0);
      Point2d point2d0 = new Point2d(0, (-1.0));
      Rect2d rect2d0 = new Rect2d(point2d0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) branch0;
      objectArray0[1] = (Object) branch0;
      objectArray0[2] = (Object) node0;
      objectArray0[3] = (Object) rect2d0;
      objectArray0[4] = (Object) rect2d0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) rect2d0;
      objectArray0[8] = (Object) point2d0;
      counterNode0.search((HyperRect) rect2d0, objectArray0, 0);
      counterNode0.update(branch0, node0);
      int int0 = counterNode0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Node<Object> node0 = Leaf.create(rectBuilder0, 281, 281, (RTree.Split) rTree_Split0);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(node0);
      Object object0 = new Object();
      counterNode0.update(object0, rTree_Split0);
      Rect2d rect2d0 = new Rect2d(0, 0, 0, 281);
      RectBuilder<Integer> rectBuilder1 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder1).getBBox(anyInt());
      AxialSplitLeaf<Integer> axialSplitLeaf0 = new AxialSplitLeaf<Integer>(rectBuilder1, 5592, 281);
      CounterNode<Integer> counterNode1 = new CounterNode<Integer>(axialSplitLeaf0);
      Point2d point2d0 = new Point2d(281, 0.0);
      Rect2d rect2d1 = new Rect2d(point2d0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      axialSplitLeaf0.forEach(consumer0);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 1;
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 1;
      integerArray0[6] = (Integer) 0;
      counterNode1.search((HyperRect) rect2d1, integerArray0, 128);
      Integer integer0 = new Integer((-4848));
      axialSplitLeaf0.add(integer0);
      int int0 = counterNode1.search((HyperRect) rect2d1, integerArray0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(1363);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 1363, 1363, rTree_Split0);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(branch0);
      Node<Object> node0 = counterNode0.instrument();
      assertEquals(0, node0.totalSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RectBuilder<Object> rectBuilder1 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null, (HyperRect) null).when(rectBuilder1).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1000, 1731, rTree_Split0);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(branch0);
      Object object0 = new Object();
      Object object1 = new Object();
      counterNode0.remove(object1);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        counterNode0.add(object2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      QuadraticSplitLeaf<Object> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Object>(rectBuilder0, 32, 32);
      Point1d point1d0 = new Point1d((-4955.27));
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      RectBuilder<Integer> rectBuilder1 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder1).getBBox(anyInt());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder1, 0, 993);
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>(linearSplitLeaf0);
      Rect3d rect3d0 = new Rect3d((-4613.6), 32, (-4613.6), 4.0, 1291.89222, 1.5091827396275213);
      Integer integer0 = new Integer((-1593));
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(0);
      counterNode0.update(integer0, integer0);
      Object object0 = new Object();
      CounterNode<Object> counterNode1 = new CounterNode<Object>(quadraticSplitLeaf0);
      counterNode1.remove(integer1);
      CounterNode<Integer> counterNode2 = new CounterNode<Integer>(counterNode0);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      counterNode2.search((HyperRect) range1d0, integerArray0, 0);
      boolean boolean0 = counterNode1.contains(rect3d0, counterNode2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null, (HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 559, 559);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(linearSplitLeaf0);
      Object object0 = new Object();
      counterNode0.update(object0, (Object) null);
      Object object1 = new Object();
      counterNode0.update(object1, (Object) null);
      Object object2 = new Object();
      counterNode0.add(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      Node<Object> node0 = counterNode0.update(object3, object4);
      assertTrue(node0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Node<Object> node0 = Leaf.create(rectBuilder0, 281, 281, (RTree.Split) rTree_Split0);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(node0);
      Object object0 = new Object();
      counterNode0.update(object0, rTree_Split0);
      Stats stats0 = new Stats();
      stats0.countLeafAtDepth(44);
      counterNode0.collectStats(stats0, 0);
      RectBuilder<Integer> rectBuilder1 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null).when(rectBuilder1).getBBox(anyInt());
      AxialSplitLeaf<Integer> axialSplitLeaf0 = new AxialSplitLeaf<Integer>(rectBuilder1, 5592, 281);
      CounterNode<Integer> counterNode1 = new CounterNode<Integer>(axialSplitLeaf0);
      Point2d point2d0 = new Point2d(281, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 1;
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 1;
      integerArray0[7] = (Integer) 0;
      counterNode1.search((HyperRect) rect2d0, integerArray0, 128);
      Integer integer0 = new Integer((-4848));
      axialSplitLeaf0.add(integer0);
      axialSplitLeaf0.add((Integer) null);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      counterNode1.forEach(consumer0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      counterNode1.forEach(consumer1);
      assertEquals(2, counterNode1.totalSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Node<Object> node0 = Leaf.create((RectBuilder<Object>) null, (-3256), 0, (RTree.Split) rTree_Split0);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(node0);
      Stats stats0 = new Stats();
      // Undeclared exception!
      try { 
        counterNode0.collectStats(stats0, (-3256));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3256 out of bounds for length 1000
         //
         verifyException("com.conversantmedia.util.collection.spatial.Stats", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      // Undeclared exception!
      try { 
        counterNode0.intersects((HyperRect) null, (Integer[]) null, (-1749));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 0, 0);
      Node<Object> node0 = linearSplitLeaf0.instrument();
      CounterNode<Object> counterNode0 = new CounterNode<Object>(node0);
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      stats0.setType(rTree_Split0);
      stats0.countLeafAtDepth(0);
      counterNode0.collectStats(stats0, 0);
      Integer integer0 = new Integer(0);
      counterNode0.update(stats0, integer0);
      counterNode0.totalSize();
      RectBuilder<Integer> rectBuilder1 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split1 = RTree.Split.LINEAR;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, (-1), 0, rTree_Split1);
      CounterNode<Integer> counterNode1 = new CounterNode<Integer>(branch0);
      counterNode1.isLeaf();
      counterNode0.getBound();
      counterNode0.size();
      counterNode0.collectStats(stats0, 0);
      counterNode1.totalSize();
      counterNode0.size();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) counterNode0;
      objectArray0[3] = (Object) counterNode0;
      objectArray0[4] = (Object) branch0;
      objectArray0[5] = (Object) branch0;
      objectArray0[6] = (Object) rectBuilder0;
      objectArray0[7] = (Object) rectBuilder1;
      objectArray0[8] = (Object) node0;
      int int0 = counterNode0.intersects((HyperRect) null, objectArray0, 31);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(anyInt());
      AxialSplitLeaf<Integer> axialSplitLeaf0 = new AxialSplitLeaf<Integer>(rectBuilder0, (-58), 41);
      axialSplitLeaf0.size = 0;
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>(axialSplitLeaf0);
      counterNode0.remove((Integer) null);
      Integer integer0 = new Integer(1965);
      counterNode0.add(integer0);
      RectBuilder<Object> rectBuilder1 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder1).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder1, 41, 0);
      CounterNode<Object> counterNode1 = new CounterNode<Object>(linearSplitLeaf0);
      Object object0 = new Object();
      Object object1 = new Object();
      counterNode1.update(object0, object1);
      Stats stats0 = new Stats();
      counterNode1.collectStats(stats0, 146);
      assertEquals(146, stats0.getMaxDepth());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 0, 0, rTree_Split0);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(branch0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        counterNode0.remove(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CounterNode<Object> counterNode0 = new CounterNode<Object>((Node<Object>) null);
      // Undeclared exception!
      try { 
        counterNode0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        counterNode0.search((HyperRect) null, integerArray0, (-5290));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      Integer integer0 = new Integer((-313));
      // Undeclared exception!
      try { 
        counterNode0.contains((HyperRect) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      QuadraticSplitLeaf<Object> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Object>(rectBuilder0, 32, 32);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(quadraticSplitLeaf0);
      counterNode0.isLeaf();
      Point1d point1d0 = new Point1d((-4955.27));
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      counterNode0.contains(range1d0, quadraticSplitLeaf0);
      RectBuilder<Integer> rectBuilder1 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder1, 0, 0);
      CounterNode<Integer> counterNode1 = new CounterNode<Integer>(linearSplitLeaf0);
      Rect3d rect3d0 = new Rect3d(0, (-2026.1460198), (-2026.1460198), 32, (-2026.1460198), 32);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(93);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(44);
      integerArray0[2] = integer2;
      int int0 = counterNode1.search((HyperRect) rect3d0, integerArray0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      QuadraticSplitLeaf<Object> quadraticSplitLeaf0 = new QuadraticSplitLeaf<Object>(rectBuilder0, 0, 0);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(quadraticSplitLeaf0);
      // Undeclared exception!
      try { 
        counterNode0.add(quadraticSplitLeaf0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.conversantmedia.util.collection.spatial.QuadraticSplitLeaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      // Undeclared exception!
      try { 
        counterNode0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Node<Object> node0 = Leaf.create(rectBuilder0, (-1), 1000, (RTree.Split) rTree_Split0);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(node0);
      counterNode0.totalSize();
      counterNode0.isLeaf();
      counterNode0.isLeaf();
      counterNode0.totalSize();
      RectBuilder<Integer> rectBuilder1 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Integer> branch0 = null;
      try {
        branch0 = new Branch<Integer>(rectBuilder1, 0, (-791), rTree_Split1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -791
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Node<Integer> node0 = Leaf.create((RectBuilder<Integer>) null, 40, 40, (RTree.Split) rTree_Split0);
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>(node0);
      counterNode0.isLeaf();
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 0, 1);
      linearSplitLeaf0.size = 0;
      Node<Object> node1 = linearSplitLeaf0.instrument();
      CounterNode<Object> counterNode1 = new CounterNode<Object>(node1);
      Object object0 = new Object();
      counterNode1.remove(object0);
      Stats stats0 = new Stats();
      counterNode1.collectStats(stats0, 0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      counterNode1.forEach(consumer0);
      Point2d point2d0 = new Point2d(0, 0);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      counterNode1.search((HyperRect) rect2d0, consumer1);
      assertTrue(counterNode1.isLeaf());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      HyperRect<Integer> hyperRect0 = null;
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        counterNode0.search((HyperRect) null, consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CounterNode<Object> counterNode0 = new CounterNode<Object>((Node<Object>) null);
      // Undeclared exception!
      try { 
        counterNode0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(anyInt());
      int int0 = 93;
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 93, 93);
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>(linearSplitLeaf0);
      Integer integer0 = new Integer(93);
      counterNode0.add(integer0);
      counterNode0.getBound();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        counterNode0.search((HyperRect) null, consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      Node<Integer> node0 = counterNode0.instrument();
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 0, 0);
      Node<Object> node0 = linearSplitLeaf0.instrument();
      CounterNode<Object> counterNode0 = new CounterNode<Object>(node0);
      counterNode0.instrument();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      counterNode0.forEach(consumer0);
      assertTrue(counterNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      Stats stats0 = new Stats();
      // Undeclared exception!
      try { 
        counterNode0.collectStats(stats0, 1266);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      int int0 = 0;
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 93, 0);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(axialSplitLeaf0);
      Stats stats0 = new Stats();
      stats0.setMinFill(93);
      stats0.setMaxFill(93);
      counterNode0.collectStats(stats0, 0);
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 93, 0);
      // Undeclared exception!
      try { 
        axialSplitLeaf0.classify(counterNode0, linearSplitLeaf0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      // Undeclared exception!
      try { 
        counterNode0.getBound();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 0, 0);
      Integer integer0 = new Integer(0);
      Node<Integer> node0 = linearSplitLeaf0.remove(integer0);
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>(node0);
      counterNode0.getBound();
      Consumer<Integer> consumer0 = null;
      counterNode0.intersects((HyperRect) null, (Consumer<Integer>) null);
      RectBuilder<Object> rectBuilder1 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      QuadraticSplitLeaf<Object> quadraticSplitLeaf0 = null;
      try {
        quadraticSplitLeaf0 = new QuadraticSplitLeaf<Object>(rectBuilder1, 0, (-2290));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2290
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      // Undeclared exception!
      try { 
        counterNode0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      AxialSplitLeaf<Object> axialSplitLeaf0 = new AxialSplitLeaf<Object>(rectBuilder0, 1688, 1688);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(axialSplitLeaf0);
      counterNode0.size();
      double double0 = 0.0;
      double double1 = (-52.188);
      double double2 = (-1352.289568212);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        axialSplitLeaf0.split(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.AxialSplitLeaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      Range1d range1d0 = new Range1d(0.0, 0.0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        counterNode0.intersects((HyperRect) range1d0, consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>((Node<Integer>) null);
      // Undeclared exception!
      try { 
        counterNode0.forEach((Consumer<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(anyInt());
      int int0 = 3;
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder0, 3, 3, rTree_Split0);
      Integer integer0 = new Integer(3);
      branch0.toString();
      branch0.remove(integer0);
      Rect3d rect3d0 = new Rect3d(3, 0.0, 0.0, 0.0, (-1793.051588355915), (-201.9274585));
      rect3d0.equals(integer0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer1 = new Integer(3);
      integerArray0[0] = integer1;
      branch0.search((HyperRect) rect3d0, integerArray0, 0);
      Integer integer2 = new Integer(int0);
      integerArray0[1] = integer2;
      branch0.search((HyperRect) rect3d0, integerArray0, 3);
      CounterNode<Integer> counterNode0 = new CounterNode<Integer>(branch0);
      RectBuilder<Object> rectBuilder1 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder1, (-1563), 0);
      Node<Object> node0 = linearSplitLeaf0.remove(rect3d0);
      CounterNode<Object> counterNode1 = new CounterNode<Object>(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      counterNode1.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      counterNode1.intersects((HyperRect) rect3d0, consumer1);
      assertEquals(0, counterNode1.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CounterNode<Object> counterNode0 = new CounterNode<Object>((Node<Object>) null);
      // Undeclared exception!
      try { 
        counterNode0.update((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.CounterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 559, 559);
      CounterNode<Object> counterNode0 = new CounterNode<Object>(linearSplitLeaf0);
      Object object0 = new Object();
      counterNode0.update(object0, (Object) null);
      Object object1 = new Object();
      Node<Object> node0 = counterNode0.update(object1, (Object) null);
      assertEquals(0, node0.size());
  }
}
