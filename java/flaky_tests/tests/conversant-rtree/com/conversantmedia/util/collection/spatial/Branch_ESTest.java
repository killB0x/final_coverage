/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 19:23:23 GMT 2022
 */

package com.conversantmedia.util.collection.spatial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.conversantmedia.util.collection.geometry.Point1d;
import com.conversantmedia.util.collection.geometry.Point2d;
import com.conversantmedia.util.collection.geometry.Range1d;
import com.conversantmedia.util.collection.geometry.Rect2d;
import com.conversantmedia.util.collection.geometry.Rect3d;
import com.conversantmedia.util.collection.spatial.Branch;
import com.conversantmedia.util.collection.spatial.CounterNode;
import com.conversantmedia.util.collection.spatial.HyperPoint;
import com.conversantmedia.util.collection.spatial.HyperRect;
import com.conversantmedia.util.collection.spatial.Leaf;
import com.conversantmedia.util.collection.spatial.LinearSplitLeaf;
import com.conversantmedia.util.collection.spatial.Node;
import com.conversantmedia.util.collection.spatial.QuadraticSplitLeaf;
import com.conversantmedia.util.collection.spatial.RTree;
import com.conversantmedia.util.collection.spatial.RectBuilder;
import com.conversantmedia.util.collection.spatial.Stats;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Branch_ESTest extends Branch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 1, 0);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 0, 1365, rTree_Split0);
      Object object0 = new Object();
      Node<Object> node0 = branch0.add(object0);
      branch0.remove(object0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      branch0.intersects((HyperRect) rect2d0, objectArray0, 1365);
      Integer integer0 = new Integer(1365);
      branch0.update(integer0, node0);
      Object object1 = new Object();
      branch0.add(object1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 1, 0);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 0, 1365, rTree_Split0);
      Object object0 = new Object();
      branch0.add(object0);
      branch0.remove(object0);
      branch0.add(object0);
      Object object1 = new Object();
      branch0.remove(object1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Point1d point1d0 = new Point1d((-1198.7304142445043));
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      Rect3d rect3d0 = new Rect3d(0.0, 0.0, (-1.0), 2.0, 1.0, (-2114.197));
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0, range1d0, range1d0, range1d0, rect3d0).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 1135, rTree_Split0);
      branch0.add(rTree_Split0);
      // Undeclared exception!
      try { 
        branch0.add((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Rect3d cannot be cast to class com.conversantmedia.util.collection.geometry.Range1d (com.conversantmedia.util.collection.geometry.Rect3d and com.conversantmedia.util.collection.geometry.Range1d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @50026918)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 31, 31, rTree_Split0);
      Node<Object> node0 = branch0.add(rect2d0);
      Node<Object> node1 = branch0.add(node0);
      Object object0 = new Object();
      linearSplitLeaf0.remove(point2d0);
      Object object1 = new Object();
      branch0.contains(rect2d0, object1);
      branch0.addChild(node0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) node1;
      objectArray0[2] = (Object) rTree_Split0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) node1;
      objectArray0[5] = (Object) linearSplitLeaf0;
      objectArray0[6] = object0;
      Object object3 = new Object();
      objectArray0[7] = object3;
      branch0.search((HyperRect) rect2d0, objectArray0, 1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, (HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 1, 5127);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1, 1980, rTree_Split0);
      branch0.add(stats0);
      Object object0 = new Object();
      Object object1 = new Object();
      Node<Object> node0 = branch0.add(object1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.search((HyperRect) rect2d0, consumer0);
      branch0.addChild(node0);
      // Undeclared exception!
      try { 
        branch0.instrument();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 31, 31, rTree_Split0);
      branch0.add(stats0);
      Object object0 = new Object();
      Object object1 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.intersects((HyperRect) rect2d0, consumer0);
      Node<Object> node0 = branch0.add(rTree_Split0);
      branch0.addChild(node0);
      branch0.totalSize();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      int int0 = 93;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split0);
      Node<Object> node0 = branch0.add(stats0);
      Object object0 = new Object();
      branch0.add(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.search((HyperRect) rect2d0, consumer0);
      branch0.addChild(node0);
      Integer integer0 = new Integer(2918);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        branch0.update(integer0, object1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, (HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split0);
      branch0.add(stats0);
      Object object0 = new Object();
      Object object1 = new Object();
      branch0.contains(rect2d0, linearSplitLeaf0);
      Object object2 = new Object();
      branch0.remove(stats0);
      branch0.isLeaf();
      LinearSplitLeaf<Integer> linearSplitLeaf1 = new LinearSplitLeaf<Integer>((RectBuilder<Integer>) null, 93, 1);
      Object object3 = new Object();
      branch0.add(rect2d0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.search((HyperRect) rect2d0, consumer0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split0);
      branch0.add(stats0);
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Rect2d rect2d1 = new Rect2d(1305.3649450302, 0.0, 0, (-3140.79043218));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) rect2d0;
      objectArray0[1] = (Object) branch0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) stats0;
      objectArray0[4] = (Object) rect2d0;
      objectArray0[5] = (Object) rectBuilder1;
      objectArray0[6] = (Object) branch0;
      branch0.search((HyperRect) rect2d1, objectArray0, (-1));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      LinearSplitLeaf<Object> linearSplitLeaf1 = new LinearSplitLeaf<Object>(rectBuilder1, 0, 2);
      RectBuilder<Object> rectBuilder2 = linearSplitLeaf1.builder;
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree.Split rTree_Split1 = RTree.Split.LINEAR;
      rect2d0.toString();
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, (-2936), 2095, rTree_Split1);
      branch0.add(rectBuilder2);
      Rect2d rect2d1 = new Rect2d(2081.2, 1268.2090312319, 2.0, 0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) rectBuilder0;
      objectArray0[1] = (Object) rTree_Split0;
      branch0.search((HyperRect) rect2d1, objectArray0, 1);
      branch0.totalSize();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 1, rTree_Split0);
      Consumer<Object> consumer0 = null;
      // Undeclared exception!
      try { 
        branch0.add(rect2d0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 691, 1135, rTree_Split0);
      branch0.add(rect2d0);
      Object object0 = new Object();
      Point1d point1d0 = new Point1d((-2384.084684245));
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        branch0.search((HyperRect) range1d0, consumer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Rect2d cannot be cast to class com.conversantmedia.util.collection.geometry.Range1d (com.conversantmedia.util.collection.geometry.Rect2d and com.conversantmedia.util.collection.geometry.Range1d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @50026918)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 31, 31, rTree_Split0);
      Object object0 = new Object();
      Node<Object> node0 = branch0.update(rect2d0, object0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split1);
      Node<Object> node1 = branch1.add(stats0);
      Object object1 = new Object();
      branch0.add(object1);
      int int0 = 1593;
      Branch<Object> branch2 = new Branch<Object>(rectBuilder1, (-560), 1593, rTree_Split1);
      branch2.addChild(node0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) linearSplitLeaf0;
      objectArray0[1] = (Object) stats0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) node1;
      objectArray0[4] = (Object) linearSplitLeaf0;
      branch1.intersects((HyperRect) rect2d0, objectArray0, 3);
      Object object3 = new Object();
      Object object4 = new Object();
      branch2.contains(rect2d0, object4);
      Object object5 = new Object();
      branch0.remove(object1);
      branch2.isLeaf();
      int int1 = (-1399);
      LinearSplitLeaf<Integer> linearSplitLeaf1 = null;
      try {
        linearSplitLeaf1 = new LinearSplitLeaf<Integer>((RectBuilder<Integer>) null, 93, (-1399));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1399
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Point2d point2d0 = new Point2d((-449.0), (-449.0));
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, (HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 1135, rTree_Split0);
      branch0.add(rTree_Split0);
      // Undeclared exception!
      try { 
        branch0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 1, 1);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1, 257, rTree_Split1);
      branch0.add(rect2d0);
      branch0.add(rect2d0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) rTree_Split0;
      objectArray0[1] = (Object) rTree_Split1;
      branch0.intersects((HyperRect) rect2d0, objectArray0, 93);
      branch0.search((HyperRect) rect2d0, objectArray0, 93);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1475, 1475, rTree_Split0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split1);
      branch0.add(rTree_Split1);
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[0];
      branch0.intersects((HyperRect) rect2d0, objectArray0, 0);
      Object object0 = new Object();
      branch1.contains(rect2d0, rTree_Split1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 31, 31, rTree_Split0);
      Node<Object> node0 = branch0.add(rect2d0);
      branch0.add(node0);
      Object object0 = new Object();
      linearSplitLeaf0.remove(point2d0);
      Object object1 = new Object();
      branch0.contains(rect2d0, object1);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        branch0.update(object2, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 31, 31, rTree_Split0);
      Node<Object> node0 = branch0.add(rect2d0);
      branch0.add(node0);
      Object object0 = new Object();
      linearSplitLeaf0.remove(point2d0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        branch0.intersects((HyperRect) rect2d0, objectArray0, (-762));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -762 out of bounds for length 0
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 31, 31, rTree_Split0);
      branch0.add(rect2d0);
      Object object0 = new Object();
      branch0.update(object0, point2d0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        branch0.addChild(linearSplitLeaf0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1475, 1475, rTree_Split0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split1);
      branch1.add(stats0);
      branch0.add(rTree_Split1);
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      branch1.update(stats0, rectBuilder2);
      branch1.remove(point2d0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch1.intersects((HyperRect) rect2d0, consumer0);
      branch1.totalSize();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1475, 1475, rTree_Split0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split1);
      branch1.add(stats0);
      Node<Object> node0 = branch0.add(rTree_Split1);
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) node0;
      branch0.intersects((HyperRect) rect2d0, objectArray0, 1475);
      branch0.instrument();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch1.search((HyperRect) rect2d0, consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch1.search((HyperRect) rect2d0, consumer1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Point1d point1d0 = new Point1d(0.0);
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0, range1d0, (HyperRect) null, (HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 0, 0);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 0, 93, rTree_Split0);
      Object object0 = new Object();
      linearSplitLeaf0.update((Object) null, object0);
      Object object1 = new Object();
      branch0.update(rTree_Split0, object1);
      branch0.remove(rTree_Split0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        branch0.add(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 0, 0);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1, 1, rTree_Split0);
      branch0.add(stats0);
      branch0.remove(rTree_Split0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1475, 1475, rTree_Split0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split1);
      branch1.add(stats0);
      branch0.add(rTree_Split1);
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf1 = new LinearSplitLeaf<Integer>(rectBuilder2, 93, 0);
      RectBuilder<Integer> rectBuilder3 = linearSplitLeaf1.builder;
      RTree.Split rTree_Split2 = RTree.Split.LINEAR;
      Branch<Integer> branch2 = new Branch<Integer>(rectBuilder3, 0, 41, rTree_Split2);
      Object object0 = new Object();
      branch0.contains(rect2d0, object0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 1, 1, rTree_Split0);
      Object object0 = new Object();
      branch0.add(object0);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        branch0.forEach((Consumer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 5138, 336);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 336, 336, rTree_Split0);
      Rect2d rect2d0 = new Rect2d(336, 0.0, 0.0, 0.0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) rTree_Split0;
      objectArray0[2] = (Object) rTree_Split0;
      objectArray0[3] = (Object) rectBuilder0;
      branch0.search((HyperRect) rect2d0, objectArray0, 336);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 0, rTree_Split0);
      Range1d range1d0 = new Range1d(0, 0);
      // Undeclared exception!
      try { 
        branch0.search((HyperRect) range1d0, (Object[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split0);
      Node<Object> node0 = branch0.add(stats0);
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      branch0.remove(object0);
      branch0.search((HyperRect) rect2d0, consumer0);
      Integer integer0 = new Integer(31);
      Integer integer1 = new Integer(1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) rectBuilder0;
      objectArray0[1] = (Object) node0;
      objectArray0[2] = (Object) rectBuilder0;
      objectArray0[3] = (Object) consumer0;
      objectArray0[4] = (Object) point2d0;
      objectArray0[5] = (Object) integer1;
      branch0.search((HyperRect) rect2d0, objectArray0, 1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 1, 0);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 0, 1365, rTree_Split0);
      Object object0 = new Object();
      Node<Object> node0 = branch0.add(object0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) node0;
      // Undeclared exception!
      try { 
        branch0.search((HyperRect) rect2d0, objectArray0, (-1473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1473 out of bounds for length 2
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1475, 1475, rTree_Split0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split1);
      branch1.add(stats0);
      branch0.add(rTree_Split1);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2123);
      Object[] objectArray0 = new Object[0];
      branch1.search((HyperRect) rect2d0, objectArray0, 0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Point1d point1d0 = new Point1d((-1198.7304142445043));
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 93, 128);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1, 1, rTree_Split0);
      Node<Object> node0 = branch0.instrument();
      branch0.addChild(node0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        branch0.contains(range1d0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Range1d", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 0, 0);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1, 1, rTree_Split0);
      branch0.add(stats0);
      branch0.contains(rect2d0, rectBuilder1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1475, 1475, rTree_Split0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split1);
      branch1.add(stats0);
      branch0.add(rTree_Split1);
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf1 = new LinearSplitLeaf<Integer>(rectBuilder2, 1475, 0);
      RectBuilder<Integer> rectBuilder3 = linearSplitLeaf1.builder;
      RTree.Split rTree_Split2 = RTree.Split.LINEAR;
      Branch<Integer> branch2 = new Branch<Integer>(rectBuilder3, 0, 41, rTree_Split2);
      branch2.toString();
      branch0.add(rTree_Split0);
      branch1.instrument();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Point1d point1d0 = new Point1d((-1198.7304142445043));
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0, range1d0, range1d0).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 1135, rTree_Split0);
      branch0.add(rTree_Split0);
      branch0.instrument();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1475, 1475, rTree_Split0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split1);
      branch1.add(stats0);
      branch0.add(rTree_Split1);
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        branch1.update(stats0, rectBuilder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 0, 0);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1, 1, rTree_Split0);
      branch0.add(stats0);
      branch0.remove(rTree_Split0);
      Object object0 = new Object();
      Node<Object> node0 = branch0.update(object0, rect2d0);
      assertFalse(node0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Point1d point1d0 = new Point1d(0.0);
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0, range1d0, range1d0).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 1135, rTree_Split0);
      branch0.add(rTree_Split0);
      // Undeclared exception!
      try { 
        branch0.intersects((HyperRect) range1d0, (Consumer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 2123, 0);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1481, 2123, rTree_Split0);
      branch0.toString();
      Rect3d rect3d0 = new Rect3d(1481, 2123, 2123, 2123, 4.9E-324, (-3314.57543939));
      rect3d0.toString();
      rect3d0.getCentroid();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.instrument();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object1;
      branch0.intersects((HyperRect) rect3d0, objectArray0, 1481);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.search((HyperRect) rect3d0, consumer1);
      branch0.search((HyperRect) rect3d0, consumer0);
      Branch<Integer> branch1 = new Branch<Integer>((RectBuilder<Integer>) null, 0, 0, rTree_Split0);
      Integer integer0 = new Integer(1);
      branch1.contains(rect3d0, integer0);
      HyperRect hyperRect0 = branch0.getBound();
      assertNull(hyperRect0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Point2d point2d0 = new Point2d((-11.058080408649456), (-11.058080408649456));
      Rect2d rect2d0 = new Rect2d(1, 1, 0, 1);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 31, 31, rTree_Split0);
      Node<Object> node0 = branch0.add(rect2d0);
      branch0.add(node0);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer(1071);
      boolean boolean0 = branch0.contains(rect2d0, integer0);
      assertEquals(2, branch0.totalSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 128, 128, rTree_Split0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Rect3d rect3d0 = new Rect3d(0.0, 0.0, 128, 3725.8916646, 128, 128);
      Integer integer0 = new Integer(128);
      HyperPoint hyperPoint0 = rect3d0.getCentroid();
      rect3d0.getCentroid();
      branch0.contains(rect3d0, integer0);
      boolean boolean0 = branch0.contains(rect3d0, integer0);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) hyperPoint0;
      objectArray0[1] = (Object) hyperPoint0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      int int0 = branch0.intersects((HyperRect) rect3d0, objectArray0, 128);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1475, 1475, rTree_Split0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split1);
      Integer integer0 = new Integer(1475);
      branch1.remove(integer0);
      branch1.add(stats0);
      branch0.add(rTree_Split1);
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf1 = new LinearSplitLeaf<Integer>(rectBuilder2, 1475, 0);
      RectBuilder<Integer> rectBuilder3 = linearSplitLeaf1.builder;
      RTree.Split rTree_Split2 = RTree.Split.LINEAR;
      Branch<Integer> branch2 = new Branch<Integer>(rectBuilder3, 0, 41, rTree_Split2);
      branch2.toString();
      branch0.add(rTree_Split0);
      branch0.getBound();
      assertEquals(2, branch0.totalSize());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 93, 93);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 2566, 93, rTree_Split0);
      branch0.toString();
      RectBuilder<Object> rectBuilder2 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf1 = new LinearSplitLeaf<Object>(rectBuilder2, 93, 0);
      RectBuilder<Object> rectBuilder3 = linearSplitLeaf1.builder;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder3, 93, 128, rTree_Split0);
      branch1.addChild(linearSplitLeaf1);
      Range1d range1d0 = new Range1d(0.0, 2285.876309);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2566);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      int int0 = 9;
      Integer integer2 = new Integer(9);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      branch1.addChild(linearSplitLeaf1);
      branch1.totalSize();
      Stats stats0 = new Stats();
      branch1.collectStats(stats0, int0);
      Object object0 = new Object();
      RTree.Split rTree_Split1 = RTree.Split.AXIAL;
      Branch<Object> branch2 = null;
      try {
        branch2 = new Branch<Object>(rectBuilder3, 128, (-532), rTree_Split1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -532
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 93, 93);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 2566, 93, rTree_Split0);
      String string0 = branch0.toString();
      assertEquals("BRANCH[null]", string0);
      
      RectBuilder<Object> rectBuilder2 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf1 = new LinearSplitLeaf<Object>(rectBuilder2, 93, 2566);
      RectBuilder<Object> rectBuilder3 = linearSplitLeaf1.builder;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder3, 93, 128, rTree_Split0);
      branch1.addChild(linearSplitLeaf1);
      Range1d range1d0 = new Range1d(0.0, 2285.876309);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2566);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2566);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      int int0 = branch1.search((HyperRect) range1d0, (Object[]) integerArray0, (int) integerArray0[0]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 1116, 1116, rTree_Split0);
      Range1d range1d0 = new Range1d(1116, 1116);
      Object[] objectArray0 = new Object[7];
      CounterNode<Object> counterNode0 = new CounterNode<Object>(branch0);
      Node<Object> node0 = counterNode0.instrument();
      branch0.addChild(node0);
      int int0 = branch0.search((HyperRect) range1d0, objectArray0, 1116);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(0.0, 0.0, 0.0, 0.0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 31, 31, rTree_Split0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      Object object0 = new Object();
      branch0.add(object0);
      LinearSplitLeaf<Integer> linearSplitLeaf1 = new LinearSplitLeaf<Integer>((RectBuilder<Integer>) null, 31, 93);
      RectBuilder<Integer> rectBuilder2 = linearSplitLeaf1.builder;
      RTree.Split rTree_Split1 = RTree.Split.LINEAR;
      Branch<Integer> branch1 = new Branch<Integer>((RectBuilder<Integer>) null, 128, 896, rTree_Split1);
      branch1.collectStats(stats0, 896);
      assertEquals(Float.NaN, stats0.getEntriesPerLeaf(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 2666, 2666);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Range1d range1d0 = new Range1d(2.0, 0.0);
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(2666);
      Integer integer2 = new Integer(379);
      Integer integer3 = new Integer(379);
      Integer integer4 = new Integer(3938);
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer(4461);
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 128, 479, rTree_Split0);
      Integer[] integerArray0 = new Integer[0];
      branch0.intersects((HyperRect) range1d0, integerArray0, 479);
      RectBuilder<Object> rectBuilder2 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf1 = new LinearSplitLeaf<Object>(rectBuilder2, 379, 2442);
      RectBuilder<Object> rectBuilder3 = linearSplitLeaf1.builder;
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder3, 3938, 1, rTree_Split1);
      branch1.addChild(linearSplitLeaf1);
      int int0 = branch1.intersects((HyperRect) range1d0, (Object[]) integerArray0, 3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, (HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1475, 1475, rTree_Split0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split1);
      branch1.add(stats0);
      // Undeclared exception!
      try { 
        branch0.add(rTree_Split1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 691, 1135, rTree_Split0);
      branch0.add(rect2d0);
      Object object0 = new Object();
      branch0.add(object0);
      assertEquals(2, branch0.totalSize());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 93, 93);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 2566, 93, rTree_Split0);
      branch0.toString();
      RectBuilder<Object> rectBuilder2 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder2).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf1 = new LinearSplitLeaf<Object>(rectBuilder2, 93, 0);
      RectBuilder<Object> rectBuilder3 = linearSplitLeaf1.builder;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder3, 93, 128, rTree_Split0);
      branch1.addChild(linearSplitLeaf1);
      Range1d range1d0 = new Range1d(0.0, 2285.876309);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2566);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3938);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      // Undeclared exception!
      try { 
        branch1.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 1592, 2351, rTree_Split0);
      Rect3d rect3d0 = new Rect3d(1323.0408795005, 2701.1, (-119), 0.0, (-1.0), 2351);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-119));
      // Undeclared exception!
      try { 
        branch0.collectStats((Stats) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 1148, rTree_Split0);
      // Undeclared exception!
      try { 
        branch0.addChild((Node<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Integer> branch0 = new Branch<Integer>((RectBuilder<Integer>) null, 2, 2, rTree_Split0);
      Stats stats0 = new Stats();
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>((RectBuilder<Integer>) null, 2, 2);
      branch0.addChild(linearSplitLeaf0);
      stats0.countLeafAtDepth(2);
      branch0.collectStats(stats0, 2);
      assertEquals(2, stats0.getLeafCount());
      assertEquals(3, stats0.getMaxDepth());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 93, 93);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 2566, 93, rTree_Split0);
      branch0.toString();
      RectBuilder<Object> rectBuilder2 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf1 = new LinearSplitLeaf<Object>(rectBuilder2, 93, 0);
      RectBuilder<Object> rectBuilder3 = linearSplitLeaf1.builder;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder3, 93, 128, rTree_Split0);
      branch1.addChild(linearSplitLeaf1);
      Range1d range1d0 = new Range1d(0.0, 2285.876309);
      branch1.getChildren();
      branch1.toString();
      Stats stats0 = new Stats();
      stats0.countLeafAtDepth(336);
      branch1.collectStats(stats0, 1);
      LinearSplitLeaf<Integer> linearSplitLeaf2 = new LinearSplitLeaf<Integer>(rectBuilder1, (-4512), 2093);
      RectBuilder<Integer> rectBuilder4 = linearSplitLeaf0.builder;
      branch1.totalSize();
      int int0 = branch1.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 32, 32, rTree_Split0);
      Node<Object> node0 = branch0.instrument();
      branch0.totalSize();
      branch0.toString();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.intersects((HyperRect) null, consumer0);
      branch0.addChild(node0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        branch0.search((HyperRect) null, consumer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Point1d point1d0 = new Point1d((-1198.7304142445043));
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(range1d0, range1d0, range1d0).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 1135, rTree_Split0);
      branch0.add(rTree_Split0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.search((HyperRect) range1d0, consumer0);
      assertEquals(2, branch0.totalSize());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 1135, rTree_Split0);
      // Undeclared exception!
      try { 
        branch0.add(rTree_Split0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 2666, 2666);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Integer integer0 = new Integer(2442);
      linearSplitLeaf0.remove(integer0);
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 3, 0, rTree_Split0);
      branch0.isLeaf();
      RectBuilder<Object> rectBuilder2 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null, (HyperRect) null).when(rectBuilder2).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf1 = new LinearSplitLeaf<Object>(rectBuilder2, 2666, 2666);
      RectBuilder<Object> rectBuilder3 = linearSplitLeaf1.builder;
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder3, (-3808), 2442, rTree_Split1);
      // Undeclared exception!
      try { 
        branch1.add(rTree_Split0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(anyInt());
      int int0 = 0;
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 0, 0);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, (-1473), 0, rTree_Split0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2636);
      branch0.remove(integer1);
      Point2d point2d0 = new Point2d(277.24227648134, (-138.452385594457));
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = integer1;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 1;
      Integer integer2 = new Integer(int0);
      integerArray0[5] = integer2;
      integerArray0[6] = (Integer) 1;
      int int1 = branch0.search((HyperRect) rect2d0, integerArray0, 0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 1116, 1116, rTree_Split0);
      Range1d range1d0 = new Range1d(1116, 1116);
      // Undeclared exception!
      try { 
        branch0.intersects((HyperRect) range1d0, (Object[]) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1475, 1475, rTree_Split0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split1);
      Node<Object> node0 = branch1.add(stats0);
      branch0.add(rTree_Split1);
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) rectBuilder1;
      objectArray0[1] = (Object) rectBuilder0;
      objectArray0[2] = (Object) stats0;
      objectArray0[3] = (Object) branch0;
      objectArray0[4] = (Object) node0;
      objectArray0[5] = (Object) rectBuilder2;
      objectArray0[7] = (Object) point2d0;
      branch1.intersects((HyperRect) rect2d0, objectArray0, 1);
      Object object0 = new Object();
      Object object1 = new Object();
      RTree.Split rTree_Split2 = RTree.Split.LINEAR;
      Branch<Object> branch2 = new Branch<Object>(rectBuilder1, 1475, 0, rTree_Split2);
      boolean boolean0 = branch0.isLeaf();
      assertEquals(1, branch0.totalSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Point2d point2d0 = new Point2d((-899.2692997243241), (-899.2692997243241));
      Rect2d rect2d0 = new Rect2d((-899.2692997243241), 1, 0, (-899.2692997243241));
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 31, 31, rTree_Split0);
      branch0.add(linearSplitLeaf0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      int int0 = branch0.intersects((HyperRect) rect2d0, objectArray0, (-762));
      assertEquals(1, branch0.totalSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 1116, 1116, rTree_Split0);
      Range1d range1d0 = new Range1d(1116, 1116);
      Object[] objectArray0 = new Object[7];
      CounterNode<Object> counterNode0 = new CounterNode<Object>(branch0);
      Node<Object> node0 = counterNode0.instrument();
      branch0.addChild(node0);
      int int0 = branch0.intersects((HyperRect) range1d0, objectArray0, 42);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 0, 0);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1607, 0, rTree_Split0);
      int int0 = branch0.totalSize();
      assertEquals(0, int0);
      
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder2).getBBox(anyInt());
      LinearSplitLeaf<Integer> linearSplitLeaf1 = new LinearSplitLeaf<Integer>(rectBuilder2, 1607, 1607);
      RectBuilder<Integer> rectBuilder3 = linearSplitLeaf1.builder;
      Branch<Integer> branch1 = new Branch<Integer>(rectBuilder3, 0, 0, rTree_Split0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        branch1.add(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.conversantmedia.util.collection.spatial.QuadraticSplitLeaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 93, 93);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 2566, 93, rTree_Split0);
      String string0 = branch0.toString();
      assertEquals("BRANCH[null]", string0);
      
      RectBuilder<Object> rectBuilder2 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf1 = new LinearSplitLeaf<Object>(rectBuilder2, 93, 0);
      RectBuilder<Object> rectBuilder3 = linearSplitLeaf1.builder;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder3, 93, 128, rTree_Split0);
      branch1.addChild(linearSplitLeaf1);
      Range1d range1d0 = new Range1d(0.0, 2285.876309);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2566);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3938);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      int int0 = branch0.intersects((HyperRect) range1d0, integerArray0, 3938);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 128, 1643, rTree_Split0);
      branch0.add(rTree_Split0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        branch0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 110, 4555, rTree_Split0);
      Point1d point1d0 = new Point1d((-2051));
      Range1d range1d0 = new Range1d(point1d0, point1d0);
      Object[] objectArray0 = new Object[0];
      branch0.intersects((HyperRect) range1d0, objectArray0, (-2051));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.search((HyperRect) range1d0, consumer0);
      assertEquals(0, branch0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 0, 0);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 0, 0, rTree_Split0);
      HyperRect<Integer> hyperRect0 = null;
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.search((HyperRect) null, consumer0);
      RectBuilder<Object> rectBuilder2 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder2).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf1 = new LinearSplitLeaf<Object>(rectBuilder2, 0, 3067);
      RectBuilder<Object> rectBuilder3 = linearSplitLeaf1.builder;
      int int0 = 0;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder3, 0, 0, rTree_Split0);
      branch1.remove((Object) null);
      branch1.isLeaf();
      // Undeclared exception!
      try { 
        branch0.addChild(linearSplitLeaf0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Too many children
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Point2d point2d0 = new Point2d((-899.2692997243241), (-899.2692997243241));
      Rect2d rect2d0 = new Rect2d(0, 0, 1, (-899.2692997243241));
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 31, 31, rTree_Split0);
      Node<Object> node0 = branch0.add(rect2d0);
      branch0.add(node0);
      Object object0 = new Object();
      linearSplitLeaf0.remove(point2d0);
      Object[] objectArray0 = new Object[0];
      int int0 = branch0.intersects((HyperRect) rect2d0, objectArray0, (-762));
      assertEquals(2, branch0.totalSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 110, 4555, rTree_Split0);
      Object[] objectArray0 = new Object[0];
      Rect3d rect3d0 = new Rect3d(382.506769, 110, 5137.524, 110, (-1.0), 4555);
      Object[] objectArray1 = new Object[0];
      int int0 = branch0.intersects((HyperRect) rect3d0, objectArray1, 4555);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 2666, 2666);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Integer integer0 = new Integer(2442);
      Node<Integer> node0 = linearSplitLeaf0.remove(integer0);
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 3, 0, rTree_Split0);
      boolean boolean0 = branch0.isLeaf();
      assertFalse(boolean0);
      
      RectBuilder<Object> rectBuilder2 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf1 = new LinearSplitLeaf<Object>(rectBuilder2, 2666, 2666);
      RectBuilder<Object> rectBuilder3 = linearSplitLeaf1.builder;
      RTree.Split rTree_Split1 = RTree.Split.AXIAL;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder3, 3, 3, rTree_Split1);
      Rect2d rect2d0 = new Rect2d((-2163.639190809075), 0.0, 2442, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) node0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) linearSplitLeaf0;
      objectArray0[4] = (Object) rTree_Split1;
      objectArray0[5] = (Object) branch1;
      objectArray0[6] = (Object) rectBuilder3;
      Object object2 = new Object();
      objectArray0[7] = object2;
      int int0 = branch1.intersects((HyperRect) rect2d0, objectArray0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 0, 0, rTree_Split0);
      HyperRect hyperRect0 = branch0.getBound();
      assertNull(hyperRect0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 2, 2);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 2, 2, rTree_Split0);
      int int0 = branch0.totalSize();
      assertEquals(0, int0);
      
      boolean boolean0 = branch0.isLeaf();
      assertFalse(boolean0);
      
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Integer> branch1 = new Branch<Integer>((RectBuilder<Integer>) null, 1, 0, rTree_Split1);
      branch1.getBound();
      assertFalse(branch1.isLeaf());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      int int0 = 245;
      int int1 = 0;
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 245, 0);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      linearSplitLeaf0.size = 245;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 2415, 0, rTree_Split0);
      // Undeclared exception!
      try { 
        branch0.addChild(linearSplitLeaf0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Too many children
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 0, rTree_Split0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        branch0.addChild(branch0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Too many children
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 25, 25, rTree_Split0);
      // Undeclared exception!
      try { 
        branch0.remove(rTree_Split0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1475, 1475, rTree_Split0);
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 31);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder1, 93, 31, rTree_Split1);
      Node<Object> node0 = branch1.add(stats0);
      Node<Object> node1 = branch0.add(rTree_Split1);
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      branch1.addChild(node1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stats0;
      objectArray0[1] = (Object) point2d0;
      objectArray0[2] = (Object) branch1;
      objectArray0[3] = (Object) rTree_Split0;
      objectArray0[4] = (Object) node0;
      objectArray0[5] = (Object) branch1;
      objectArray0[6] = (Object) rectBuilder2;
      branch0.intersects((HyperRect) rect2d0, objectArray0, 1481);
      Object object0 = new Object();
      Object object1 = new Object();
      branch1.contains(rect2d0, object1);
      assertEquals(2, branch1.totalSize());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(anyInt());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 0, 2108);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 0, 40, rTree_Split0);
      Integer integer0 = new Integer(40);
      Integer integer1 = new Integer(0);
      branch0.update(integer0, integer1);
      LinearSplitLeaf<Object> linearSplitLeaf1 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 0, 40);
      RectBuilder<Object> rectBuilder2 = linearSplitLeaf1.builder;
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch1 = new Branch<Object>((RectBuilder<Object>) null, 2293, 40, rTree_Split1);
      Rect3d rect3d0 = new Rect3d(0.0, 0.0, 2108, 40, 40, 0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linearSplitLeaf0.intersects((HyperRect) rect3d0, consumer0);
      branch1.toString();
      Integer integer2 = new Integer(0);
      branch0.update(integer2, integer2);
      branch1.addChild(linearSplitLeaf1);
      branch1.totalSize();
      branch0.remove(integer1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        branch1.remove(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 0, rTree_Split0);
      // Undeclared exception!
      try { 
        branch0.add(rTree_Split0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.conversantmedia.util.collection.spatial.QuadraticSplitLeaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(anyInt());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 0, 0);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, (-1473), 0, rTree_Split0);
      int int0 = 2636;
      int int1 = 0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        branch0.add(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.conversantmedia.util.collection.spatial.LinearSplitLeaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(0, 1, 0, 0.0);
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0, rect2d0, rect2d0, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split1 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1000, 41, rTree_Split1);
      branch0.add(rTree_Split0);
      Integer integer0 = new Integer(31);
      branch0.remove(integer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.intersects((HyperRect) rect2d0, consumer0);
      Integer integer1 = new Integer(1);
      // Undeclared exception!
      try { 
        branch0.add(integer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 2123, 0);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1481, 2123, rTree_Split0);
      branch0.toString();
      Rect3d rect3d0 = new Rect3d(1481, (-849.376131822), (-849.376131822), 2123, 4.9E-324, (-3314.57543939));
      rect3d0.toString();
      rect3d0.getCentroid();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.intersects((HyperRect) rect3d0, consumer0);
      branch0.instrument();
      LinearSplitLeaf<Integer> linearSplitLeaf1 = new LinearSplitLeaf<Integer>((RectBuilder<Integer>) null, 1481, 3212);
      RectBuilder<Integer> rectBuilder2 = linearSplitLeaf1.builder;
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Integer> branch1 = null;
      try {
        branch1 = new Branch<Integer>((RectBuilder<Integer>) null, 2123, (-3327), rTree_Split1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3327
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Point2d point2d0 = new Point2d(0.0, 0.0);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 1585, 1116, rTree_Split0);
      Range1d range1d0 = new Range1d(1978.775, 1.0E-12);
      branch0.intersects((HyperRect) range1d0, (Consumer<Object>) null);
      branch0.intersects((HyperRect) rect2d0, (Consumer<Object>) null);
      assertEquals(0, branch0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, (-292), 1589, rTree_Split0);
      branch0.instrument();
      // Undeclared exception!
      try { 
        branch0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(anyInt());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 0, 0);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 0, 0, rTree_Split0);
      branch0.instrument();
      Integer integer0 = new Integer((-1259));
      branch0.remove(integer0);
      Rect2d rect2d0 = null;
      try {
        rect2d0 = new Rect2d((Point2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 93, 93);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Integer> branch0 = new Branch<Integer>(rectBuilder1, 2566, 93, rTree_Split0);
      branch0.toString();
      RectBuilder<Object> rectBuilder2 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf1 = new LinearSplitLeaf<Object>(rectBuilder2, 93, 0);
      RectBuilder<Object> rectBuilder3 = linearSplitLeaf1.builder;
      Branch<Object> branch1 = new Branch<Object>(rectBuilder3, 93, 128, rTree_Split0);
      branch1.addChild(linearSplitLeaf1);
      Range1d range1d0 = new Range1d(0.0, 0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2566);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Branch<Object> branch2 = new Branch<Object>(rectBuilder3, 0, 93, rTree_Split1);
      branch1.forEach((Consumer<Object>) null);
      int int0 = branch1.addChild(linearSplitLeaf1);
      assertEquals(2, branch1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BRANCH[");
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 226, 226);
      RectBuilder<Object> rectBuilder0 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 226, 226, rTree_Split0);
      branch0.instrument();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.forEach(consumer0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        branch0.remove(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 0, 1589, rTree_Split0);
      Stats stats0 = new Stats();
      // Undeclared exception!
      try { 
        branch0.collectStats(stats0, 1297);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1297 out of bounds for length 1000
         //
         verifyException("com.conversantmedia.util.collection.spatial.Stats", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 2, 831);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 831, 2, rTree_Split0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      branch0.forEach(consumer0);
      branch0.size();
      RectBuilder<Integer> rectBuilder2 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder2).getBBox(anyInt());
      LinearSplitLeaf<Integer> linearSplitLeaf1 = new LinearSplitLeaf<Integer>(rectBuilder2, 2, 2);
      RectBuilder<Integer> rectBuilder3 = linearSplitLeaf1.builder;
      Integer integer0 = new Integer(0);
      linearSplitLeaf1.update(integer0, integer0);
      RTree.Split rTree_Split1 = RTree.Split.QUADRATIC;
      Leaf.create(rectBuilder3, 41, 366, (RTree.Split) rTree_Split1);
      branch0.getChildren();
      branch0.toString();
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 41);
      RectBuilder<Integer> rectBuilder4 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf2 = new LinearSplitLeaf<Integer>(rectBuilder4, 831, 41);
      RectBuilder<Integer> rectBuilder5 = linearSplitLeaf2.builder;
      RTree.Split rTree_Split2 = RTree.Split.QUADRATIC;
      Branch<Integer> branch1 = null;
      try {
        branch1 = new Branch<Integer>(rectBuilder5, 831, (-1), rTree_Split2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, (-3249), 4501, rTree_Split0);
      Range1d range1d0 = new Range1d(4501, 4501);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) branch0;
      objectArray0[1] = (Object) range1d0;
      objectArray0[2] = (Object) range1d0;
      int int0 = branch0.search((HyperRect) range1d0, objectArray0, 0);
      assertEquals(0, int0);
      
      Stats stats0 = new Stats();
      branch0.collectStats(stats0, 961);
      branch0.getBound();
      int int1 = branch0.totalSize();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 5138, 336);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 336, 336, rTree_Split0);
      Rect2d rect2d0 = new Rect2d(336, 0.0, 0.0, 0.0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) rTree_Split0;
      objectArray0[1] = (Object) linearSplitLeaf0;
      objectArray0[2] = (Object) rTree_Split0;
      objectArray0[3] = (Object) rectBuilder0;
      int int0 = branch0.search((HyperRect) rect2d0, objectArray0, 336);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 1885, 1885);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1885, 1885, rTree_Split0);
      int int0 = branch0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, (-626), 961, rTree_Split0);
      int int0 = branch0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 36, 36, rTree_Split0);
      Node<Object> node0 = new QuadraticSplitLeaf<Object>((RectBuilder<Object>) null, 36, 36);
      branch0.addChild(node0);
      branch0.getBound();
      int int0 = branch0.totalSize();
      assertEquals(1, branch0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, (-292), 1589, rTree_Split0);
      // Undeclared exception!
      try { 
        branch0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 1186, 1186, rTree_Split0);
      // Undeclared exception!
      try { 
        branch0.add(rTree_Split0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 31, 31);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 1475, 1475, rTree_Split0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        branch0.add(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 0, 1607);
      RectBuilder<Object> rectBuilder0 = linearSplitLeaf0.builder;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 0, 1607, rTree_Split0);
      int int0 = branch0.addChild(linearSplitLeaf0);
      assertEquals(1, branch0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>((RectBuilder<Integer>) null, 961, 1345);
      RectBuilder<Integer> rectBuilder0 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Integer> branch0 = new Branch<Integer>((RectBuilder<Integer>) null, 961, 1345, rTree_Split0);
      Integer integer0 = new Integer(697);
      Integer integer1 = new Integer(697);
      // Undeclared exception!
      try { 
        branch0.update(integer0, integer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Integer> branch0 = new Branch<Integer>((RectBuilder<Integer>) null, 128, 336, rTree_Split0);
      boolean boolean0 = branch0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 1503, 0);
      RectBuilder<Object> rectBuilder0 = linearSplitLeaf0.builder;
      linearSplitLeaf0.mbr = null;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 0, 0, rTree_Split0);
      Node[] nodeArray0 = branch0.getChildren();
      assertEquals(0, nodeArray0.length);
      
      RectBuilder<Integer> rectBuilder1 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      LinearSplitLeaf<Integer> linearSplitLeaf1 = new LinearSplitLeaf<Integer>(rectBuilder1, 0, 708);
      RectBuilder<Integer> rectBuilder2 = linearSplitLeaf1.builder;
      Branch<Integer> branch1 = new Branch<Integer>(rectBuilder2, 1503, 0, rTree_Split0);
      boolean boolean0 = branch1.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      int int0 = (-1888);
      Branch<Object> branch0 = null;
      try {
        branch0 = new Branch<Object>((RectBuilder<Object>) null, (-1888), (-1888), rTree_Split0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1888
         //
         verifyException("com.conversantmedia.util.collection.spatial.Branch", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Stats stats0 = new Stats();
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, (-4797), 3, rTree_Split0);
      Node[] nodeArray0 = branch0.getChildren();
      assertEquals(3, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.conversantmedia.util.collection.spatial.LinearSplitLeaf");
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>((RectBuilder<Object>) null, 1607, 402);
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, 1640, 1640, rTree_Split0);
      int int0 = branch0.totalSize();
      assertEquals(0, int0);
      
      String string0 = branch0.toString();
      assertEquals("BRANCH[null]", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, (-6121), 0, rTree_Split0);
      branch0.getChildren();
      branch0.toString();
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>((RectBuilder<Integer>) null, 0, 1104);
      RectBuilder<Integer> rectBuilder0 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split1 = RTree.Split.LINEAR;
      Branch<Integer> branch1 = new Branch<Integer>((RectBuilder<Integer>) null, 0, 1657, rTree_Split1);
      assertEquals(0, branch1.totalSize());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      Branch<Object> branch0 = new Branch<Object>((RectBuilder<Object>) null, (-2051), 93, rTree_Split0);
      assertEquals(0, branch0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 0, rTree_Split0);
      int int0 = branch0.totalSize();
      assertEquals(0, int0);
      
      branch0.update(rTree_Split0, rTree_Split0);
      assertEquals(0, branch0.totalSize());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      LinearSplitLeaf<Object> linearSplitLeaf0 = new LinearSplitLeaf<Object>(rectBuilder0, 0, 0);
      RectBuilder<Object> rectBuilder1 = linearSplitLeaf0.builder;
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder1, 0, 93, rTree_Split0);
      Object object0 = new Object();
      branch0.update(rTree_Split0, object0);
      Node<Object> node0 = branch0.remove(rTree_Split0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Branch<Object> branch0 = new Branch<Object>(rectBuilder0, 0, 0, rTree_Split0);
      Node<Object> node0 = branch0.remove(rTree_Split0);
      assertNull(node0);
  }
}
