/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 19:28:25 GMT 2022
 */

package com.conversantmedia.util.collection.spatial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.conversantmedia.util.collection.geometry.Point2d;
import com.conversantmedia.util.collection.geometry.Rect2d;
import com.conversantmedia.util.collection.geometry.Rect3d;
import com.conversantmedia.util.collection.spatial.CounterNode;
import com.conversantmedia.util.collection.spatial.HyperRect;
import com.conversantmedia.util.collection.spatial.LinearSplitLeaf;
import com.conversantmedia.util.collection.spatial.Node;
import com.conversantmedia.util.collection.spatial.RTree;
import com.conversantmedia.util.collection.spatial.RectBuilder;
import com.conversantmedia.util.collection.spatial.Stats;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedList;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RTree_ESTest extends RTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, 0, 3, rTree_Split0);
      Integer integer0 = new Integer(0);
      rTree0.add(integer0);
      Integer integer1 = new Integer(3);
      rTree0.update(integer0, integer1);
      assertEquals(1, rTree0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Point2d point2d0 = new Point2d((-20.1171), 2032.433193417);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0).when(rectBuilder0).getBBox(anyInt());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 2, 2);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree<Integer> rTree0 = new RTree<Integer>(rectBuilder1, 2, 32, rTree_Split0);
      rTree0.add((Integer) point2d0.X);
      Integer[] integerArray0 = new Integer[2];
      int int0 = rTree0.search((HyperRect) rect2d0, integerArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, 2656, 2656, rTree_Split0);
      Object object0 = new Object();
      rTree0.add(object0);
      Node<Object> node0 = rTree0.getRoot();
      assertEquals(1, node0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, 0, 3, rTree_Split0);
      Integer integer0 = new Integer(0);
      rTree0.add(integer0);
      Stats stats0 = rTree0.collectStats();
      assertEquals(0, stats0.getMaxDepth());
      assertEquals(33.333332F, stats0.getLeafFillPercentage(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null, (HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, (-2145491548), 3, rTree_Split0);
      Object object0 = new Object();
      rTree0.add(object0);
      // Undeclared exception!
      try { 
        rTree0.contains(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>((RectBuilder<Object>) null, 59, 2145495237, rTree_Split0);
      // Undeclared exception!
      rTree0.add((Object) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>((RectBuilder<Object>) null, (-1981), (-1981), rTree_Split0);
      // Undeclared exception!
      try { 
        rTree0.add((Object) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1981
         //
         verifyException("com.conversantmedia.util.collection.spatial.Leaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>((RectBuilder<Object>) null, 0, 0, rTree_Split0);
      // Undeclared exception!
      try { 
        rTree0.add((Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.conversantmedia.util.collection.spatial.QuadraticSplitLeaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = RTree.isEqual(0.0, 1.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = RTree.isEqual(0.0, 0.0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, 0, 3, rTree_Split0);
      Integer integer0 = new Integer(0);
      rTree0.add(integer0);
      rTree0.instrumentTree();
      assertEquals(1, rTree0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, 2663, 2663, rTree_Split0);
      rTree0.instrumentTree();
      assertEquals(0, rTree0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, 2656, 2656, rTree_Split0);
      Object object0 = new Object();
      rTree0.add(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      rTree0.forEach(consumer0);
      assertEquals(1, rTree0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Integer> rTree0 = new RTree<Integer>((RectBuilder<Integer>) null, 0, 3, rTree_Split0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      rTree0.forEach(consumer0);
      assertEquals(0, rTree0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = RTree.isEqual(2032.433193417, 2032.433193417);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = RTree.isEqual(2663, 41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Point2d point2d0 = new Point2d((-20.1171), 2032.433193417);
      Rect2d rect2d0 = new Rect2d(point2d0);
      RectBuilder<Integer> rectBuilder0 = (RectBuilder<Integer>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect2d0, rect2d0).when(rectBuilder0).getBBox(anyInt());
      LinearSplitLeaf<Integer> linearSplitLeaf0 = new LinearSplitLeaf<Integer>(rectBuilder0, 2, 2);
      RectBuilder<Integer> rectBuilder1 = linearSplitLeaf0.builder;
      RTree<Integer> rTree0 = new RTree<Integer>(rectBuilder1, 2, 32, rTree_Split0);
      rTree0.add((Integer) point2d0.Y);
      boolean boolean0 = rTree0.contains((Integer) point2d0.X);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Integer integer0 = new Integer(0);
      RTree<Integer> rTree0 = new RTree<Integer>((RectBuilder<Integer>) null, 0, 3, rTree_Split0);
      boolean boolean0 = rTree0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RectBuilder<CounterNode<Object>> rectBuilder0 = (RectBuilder<CounterNode<Object>>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any(com.conversantmedia.util.collection.spatial.CounterNode.class));
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      RTree<CounterNode<Object>> rTree0 = new RTree<CounterNode<Object>>(rectBuilder0, 4752, 4752, rTree_Split0);
      CounterNode<Object>[] counterNodeArray0 = (CounterNode<Object>[]) Array.newInstance(CounterNode.class, 4);
      rTree0.add(counterNodeArray0[2]);
      int int0 = rTree0.getEntryCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      RTree<Object> rTree0 = new RTree<Object>((RectBuilder<Object>) null, 2145495237, 2145495237, rTree_Split0);
      int int0 = rTree0.getEntryCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      Integer integer0 = new Integer(0);
      RTree<Integer> rTree0 = new RTree<Integer>((RectBuilder<Integer>) null, 0, 3, rTree_Split0);
      rTree0.update(integer0, integer0);
      assertEquals(0, rTree0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, 2656, 2656, rTree_Split0);
      Object object0 = new Object();
      rTree0.add(object0);
      rTree0.remove(rTree_Split0);
      assertEquals(1, rTree0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RectBuilder<CounterNode<Object>> rectBuilder0 = (RectBuilder<CounterNode<Object>>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      RTree<CounterNode<Object>> rTree0 = new RTree<CounterNode<Object>>(rectBuilder0, 4752, 4752, rTree_Split0);
      RectBuilder<Object> rectBuilder1 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree<Object> rTree1 = new RTree<Object>(rectBuilder1, 4752, 1, rTree_Split0);
      rTree1.remove(rTree0);
      assertEquals(0, rTree1.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, 1, 1, rTree_Split0);
      rTree0.add(rTree_Split0);
      // Undeclared exception!
      try { 
        rTree0.add(rTree_Split0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.AxialSplitLeaf", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, 0, 3, rTree_Split0);
      Integer integer0 = new Integer(0);
      rTree0.add(integer0);
      Rect3d rect3d0 = new Rect3d(3, (-9.5), 3, 3, (-9.5), 0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rTree0.intersects((HyperRect) rect3d0, consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      Point2d point2d0 = new Point2d(0, (-33));
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, (-33), 0, rTree_Split0);
      rTree0.intersects((HyperRect) rect2d0, consumer0);
      assertEquals(0, rTree0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(2663, 1752.66808505, 2663, 2663);
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      RTree<Integer> rTree0 = new RTree<Integer>((RectBuilder<Integer>) null, 720, 2663, rTree_Split0);
      Integer[] integerArray0 = new Integer[0];
      int int0 = rTree0.intersects((HyperRect) rect2d0, integerArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rect2d rect2d0 = new Rect2d(2663, 1752.66808505, 2663, 2663);
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      RTree<Integer> rTree0 = new RTree<Integer>((RectBuilder<Integer>) null, 720, 2663, rTree_Split0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      rTree0.search((HyperRect) rect2d0, (Collection<Integer>) linkedList0);
      assertFalse(linkedList0.contains(2663));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rect3d rect3d0 = new Rect3d((-690.8), (-690.8), 4.0, (-690.8), 4.0, (-2501.86162445404));
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(rect3d0).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, 0, 3, rTree_Split0);
      Integer integer0 = new Integer(0);
      rTree0.add(integer0);
      Point2d point2d0 = new Point2d(0, 3);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rTree0.search((HyperRect) rect2d0, consumer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.conversantmedia.util.collection.geometry.Rect3d cannot be cast to class com.conversantmedia.util.collection.geometry.Rect2d (com.conversantmedia.util.collection.geometry.Rect3d and com.conversantmedia.util.collection.geometry.Rect2d are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @52816eb)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, 1, 0, rTree_Split0);
      Point2d point2d0 = new Point2d(0, 1);
      Rect2d rect2d0 = new Rect2d(point2d0, point2d0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      rTree0.search((HyperRect) rect2d0, consumer0);
      assertEquals(0.0, rect2d0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RectBuilder<Object> rectBuilder0 = (RectBuilder<Object>) mock(RectBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((HyperRect) null).when(rectBuilder0).getBBox(any());
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>(rectBuilder0, 0, 3, rTree_Split0);
      Integer integer0 = new Integer(0);
      rTree0.add(integer0);
      Rect2d rect2d0 = new Rect2d(1078.0, (-966.47), 0, 1078.0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        rTree0.search((HyperRect) rect2d0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.geometry.Rect2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.LINEAR;
      RTree<Integer> rTree0 = new RTree<Integer>((RectBuilder<Integer>) null, (-49), (-49), rTree_Split0);
      int int0 = rTree0.search((HyperRect) null, (Integer[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.AXIAL;
      RTree<Object> rTree0 = new RTree<Object>((RectBuilder<Object>) null, (-1981), (-1981), rTree_Split0);
      Node<Object> node0 = rTree0.getRoot();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RTree.Split rTree_Split0 = RTree.Split.QUADRATIC;
      RTree<Object> rTree0 = new RTree<Object>((RectBuilder<Object>) null, (-1981), (-1981), rTree_Split0);
      // Undeclared exception!
      try { 
        rTree0.collectStats();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.conversantmedia.util.collection.spatial.RTree", e);
      }
  }
}
