/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 20:19:01 GMT 2022
 */

package com.lightstep.tracer.retry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lightstep.tracer.retry.ExponentialBackoffRetryPolicy;
import com.lightstep.tracer.retry.LinearDelayRetryPolicy;
import com.lightstep.tracer.retry.RetryException;
import com.lightstep.tracer.retry.Retryable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RetryPolicy_ESTest extends RetryPolicy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(4063, 4063, true, 753.37612062023);
      try { 
        linearDelayRetryPolicy0.run((Retryable<Object>) null, (long) 2035);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // attemptNo = 1, delayMs = 4063
         //
         verifyException("com.lightstep.tracer.retry.RetryPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(4063, 4063, true, 753.37612062023);
      Retryable<Object> retryable0 = (Retryable<Object>) mock(Retryable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(retryable0).retry(any(com.lightstep.tracer.retry.RetryPolicy.class) , anyInt());
      linearDelayRetryPolicy0.run(retryable0, 0L);
      assertEquals(4063, linearDelayRetryPolicy0.getMaxRetries());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(4063, 4063, true, 753.37612062023);
      Retryable<Object> retryable0 = (Retryable<Object>) mock(Retryable.class, new ViolatedAssumptionAnswer());
      doReturn(linearDelayRetryPolicy0).when(retryable0).retry(any(com.lightstep.tracer.retry.RetryPolicy.class) , anyInt());
      LinearDelayRetryPolicy linearDelayRetryPolicy1 = (LinearDelayRetryPolicy)linearDelayRetryPolicy0.run(retryable0, (long) 4063);
      assertEquals(4063, linearDelayRetryPolicy1.getMaxRetries());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(1, 1, true, 1);
      Retryable<Object> retryable0 = (Retryable<Object>) mock(Retryable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(retryable0).retry(any(com.lightstep.tracer.retry.RetryPolicy.class) , anyInt());
      linearDelayRetryPolicy0.run(retryable0);
      assertEquals(1, linearDelayRetryPolicy0.getMaxRetries());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(4063, 4063, true, 753.37612062023);
      MockException mockException0 = new MockException("");
      Retryable<Object> retryable0 = (Retryable<Object>) mock(Retryable.class, new ViolatedAssumptionAnswer());
      doReturn(mockException0).when(retryable0).retry(any(com.lightstep.tracer.retry.RetryPolicy.class) , anyInt());
      linearDelayRetryPolicy0.run(retryable0);
      assertEquals(4063, linearDelayRetryPolicy0.getMaxRetries());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(1, 1, false, 1);
      RetryException retryException0 = new RetryException();
      linearDelayRetryPolicy0.retryOn(retryException0);
      assertEquals(1, linearDelayRetryPolicy0.getMaxRetries());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExponentialBackoffRetryPolicy exponentialBackoffRetryPolicy0 = new ExponentialBackoffRetryPolicy(2053, 2053, 2053, 2053, true, 0.0);
      MockException mockException0 = new MockException("");
      exponentialBackoffRetryPolicy0.retryOn(mockException0);
      assertEquals(2053, exponentialBackoffRetryPolicy0.getMaxRetries());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(1, 1, true, 1);
      linearDelayRetryPolicy0.getDelayMs(1);
      assertEquals(1, linearDelayRetryPolicy0.getMaxRetries());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(18, 18, false, 18);
      linearDelayRetryPolicy0.getDelayMs(18);
      assertEquals(18, linearDelayRetryPolicy0.getMaxRetries());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(1348, 1348, false, 1348);
      // Undeclared exception!
      try { 
        linearDelayRetryPolicy0.run((Retryable<Object>) null, (-757L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value (-757) is negative
         //
         verifyException("com.lightstep.tracer.retry.RetryPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(1, 1, false, 1);
      try { 
        linearDelayRetryPolicy0.run((Retryable<Object>) null, (long) 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // attemptNo = 1, delayMs = 1
         //
         verifyException("com.lightstep.tracer.retry.RetryPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExponentialBackoffRetryPolicy exponentialBackoffRetryPolicy0 = null;
      try {
        exponentialBackoffRetryPolicy0 = new ExponentialBackoffRetryPolicy(0, 0, 0, 0, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxRetries (0) must be a positive value
         //
         verifyException("com.lightstep.tracer.retry.RetryPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExponentialBackoffRetryPolicy exponentialBackoffRetryPolicy0 = null;
      try {
        exponentialBackoffRetryPolicy0 = new ExponentialBackoffRetryPolicy(0, 0, (-370.1), 0, false, (-370.1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // jitter (-370.1) is negative
         //
         verifyException("com.lightstep.tracer.retry.RetryPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = null;
      try {
        linearDelayRetryPolicy0 = new LinearDelayRetryPolicy((-2031), (-2031), true, (-2031));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxRetries (-2031) is negative
         //
         verifyException("com.lightstep.tracer.retry.RetryPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(1, 1, false, 1);
      try { 
        linearDelayRetryPolicy0.run((Retryable<Object>) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // attemptNo = 1, delayMs = 1
         //
         verifyException("com.lightstep.tracer.retry.RetryPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(4063, 4063, true, 753.37612062023);
      int int0 = linearDelayRetryPolicy0.getMaxRetries();
      assertEquals(4063, int0);
  }
}
