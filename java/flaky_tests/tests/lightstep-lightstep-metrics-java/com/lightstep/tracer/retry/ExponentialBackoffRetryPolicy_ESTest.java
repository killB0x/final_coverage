/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 20:20:49 GMT 2022
 */

package com.lightstep.tracer.retry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lightstep.tracer.retry.ExponentialBackoffRetryPolicy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExponentialBackoffRetryPolicy_ESTest extends ExponentialBackoffRetryPolicy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExponentialBackoffRetryPolicy exponentialBackoffRetryPolicy0 = null;
      try {
        exponentialBackoffRetryPolicy0 = new ExponentialBackoffRetryPolicy(611, 0, 0.0, 1468, true, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delayMs (0) must be a positive value
         //
         verifyException("com.lightstep.tracer.retry.ExponentialBackoffRetryPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExponentialBackoffRetryPolicy exponentialBackoffRetryPolicy0 = new ExponentialBackoffRetryPolicy(1, 1, 1, 1, true, 1);
      long long0 = exponentialBackoffRetryPolicy0.getDelayMs(1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExponentialBackoffRetryPolicy exponentialBackoffRetryPolicy0 = new ExponentialBackoffRetryPolicy(2233, 2233, 2233, 2233, true, 2233);
      long long0 = exponentialBackoffRetryPolicy0.getDelayMs(2233);
      assertEquals(2233L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExponentialBackoffRetryPolicy exponentialBackoffRetryPolicy0 = null;
      try {
        exponentialBackoffRetryPolicy0 = new ExponentialBackoffRetryPolicy(2233, 2233, 2233, 0, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxDelayMs (0) must be a positive value
         //
         verifyException("com.lightstep.tracer.retry.ExponentialBackoffRetryPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExponentialBackoffRetryPolicy exponentialBackoffRetryPolicy0 = new ExponentialBackoffRetryPolicy(1, 1, 1, 1, false, 1);
      long long0 = exponentialBackoffRetryPolicy0.getDelayMs(1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExponentialBackoffRetryPolicy exponentialBackoffRetryPolicy0 = null;
      try {
        exponentialBackoffRetryPolicy0 = new ExponentialBackoffRetryPolicy(2213, (-1154), 2213, 2213, true, 2213);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delayMs (-1154) must be a positive value
         //
         verifyException("com.lightstep.tracer.retry.ExponentialBackoffRetryPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ExponentialBackoffRetryPolicy exponentialBackoffRetryPolicy0 = null;
      try {
        exponentialBackoffRetryPolicy0 = new ExponentialBackoffRetryPolicy(1155, 1155, 0.0, 1155, false, 1155);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // backoffFactor (0.0) must be >= 1.0
         //
         verifyException("com.lightstep.tracer.retry.ExponentialBackoffRetryPolicy", e);
      }
  }
}
