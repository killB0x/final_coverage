/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 20:23:48 GMT 2022
 */

package com.lightstep.tracer.retry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lightstep.tracer.retry.LinearDelayRetryPolicy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LinearDelayRetryPolicy_ESTest extends LinearDelayRetryPolicy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = null;
      try {
        linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(2430, (-1), true, 2430);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delayMs (-1) must be a positive value
         //
         verifyException("com.lightstep.tracer.retry.LinearDelayRetryPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(1, 1, true, 1);
      long long0 = linearDelayRetryPolicy0.getDelayMs(1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(1, 1, false, 1);
      long long0 = linearDelayRetryPolicy0.getDelayMs(1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(2349, 2349, false, 2349);
      long long0 = linearDelayRetryPolicy0.getDelayMs(2349);
      assertEquals(2349L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinearDelayRetryPolicy linearDelayRetryPolicy0 = null;
      try {
        linearDelayRetryPolicy0 = new LinearDelayRetryPolicy(248, 0, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delayMs (0) must be a positive value
         //
         verifyException("com.lightstep.tracer.retry.LinearDelayRetryPolicy", e);
      }
  }
}
