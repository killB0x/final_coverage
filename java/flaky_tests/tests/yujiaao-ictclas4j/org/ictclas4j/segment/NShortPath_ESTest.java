/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 02:25:31 GMT 2022
 */

package org.ictclas4j.segment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.ictclas4j.bean.SegNode;
import org.ictclas4j.segment.NShortPath;
import org.ictclas4j.segment.SegGraph;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NShortPath_ESTest extends NShortPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      
      SegNode segNode0 = new SegNode(0, 1, 0, (-1065.3696829781386), "path[");
      assertNotNull(segNode0);
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0, segNode0.getPos());
      assertEquals(1, segNode0.getCol());
      assertEquals("path[", segNode0.getSrcWord());
      assertEquals(0, segNode0.getRow());
      assertEquals("path[", segNode0.getWord());
      assertEquals((-1065.3696829781386), segNode0.getValue(), 0.01);
      
      boolean boolean0 = arrayList0.add(segNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(segNode0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0, segNode0.getPos());
      assertEquals(1, segNode0.getCol());
      assertEquals("path[", segNode0.getSrcWord());
      assertEquals(0, segNode0.getRow());
      assertEquals("path[", segNode0.getWord());
      assertEquals((-1065.3696829781386), segNode0.getValue(), 0.01);
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 1);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(nShortPath0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(1, segGraph0.getSize());
      assertEquals(1, segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, nShortPath0.getPathCount());
      
      int[] intArray0 = nShortPath0.getPaths(0);
      assertEquals(2, intArray0.length);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(1, segGraph0.getSize());
      assertEquals(1, segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, nShortPath0.getPathCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SegGraph segGraph0 = new SegGraph();
      assertNotNull(segGraph0);
      assertFalse(segGraph0.isRowFirst());
      assertEquals((-1), segGraph0.getMaxCol());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getSize());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 0);
      assertNotNull(nShortPath0);
      assertFalse(segGraph0.isRowFirst());
      assertEquals((-1), segGraph0.getMaxCol());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getSize());
      assertEquals(0, nShortPath0.getPathCount());
      
      int[] intArray0 = nShortPath0.getPaths(0);
      assertNull(intArray0);
      assertFalse(segGraph0.isRowFirst());
      assertEquals((-1), segGraph0.getMaxCol());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getSize());
      assertEquals(0, nShortPath0.getPathCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals(0, segGraph0.getSize());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      
      SegNode segNode0 = new SegNode();
      assertNotNull(segNode0);
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0.0, segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getRow());
      assertEquals(0, segNode0.getCol());
      assertNull(segNode0.getWord());
      assertEquals(0, segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      
      boolean boolean0 = arrayList0.add(segNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(segNode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0.0, segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getRow());
      assertEquals(0, segNode0.getCol());
      assertNull(segNode0.getWord());
      assertEquals(0, segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 0);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(nShortPath0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(0, segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, segGraph0.getSize());
      assertEquals(0, nShortPath0.getPathCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SegGraph segGraph0 = new SegGraph();
      assertNotNull(segGraph0);
      assertEquals((-1), segGraph0.getSize());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals((-1), segGraph0.getMaxRow());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 18);
      assertNotNull(nShortPath0);
      assertEquals((-1), segGraph0.getSize());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals(18, nShortPath0.getPathCount());
      
      int int0 = nShortPath0.getPathCount();
      assertEquals(18, int0);
      assertEquals((-1), segGraph0.getSize());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals(18, nShortPath0.getPathCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NShortPath nShortPath0 = new NShortPath((SegGraph) null, (-1312));
      assertNotNull(nShortPath0);
      assertEquals((-1312), nShortPath0.getPathCount());
      
      int int0 = nShortPath0.getPathCount();
      assertEquals((-1312), int0);
      assertEquals((-1312), nShortPath0.getPathCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NShortPath nShortPath0 = new NShortPath((SegGraph) null, (-3016));
      assertNotNull(nShortPath0);
      assertEquals((-3016), nShortPath0.getPathCount());
      
      ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((ArrayList<Integer>) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
      try { 
        nShortPath0.printPath(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.segment.NShortPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(segGraph0.isRowFirst());
      assertEquals((-1), segGraph0.getMaxCol());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals(0, segGraph0.getSize());
      
      boolean boolean0 = arrayList0.add((SegNode) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      SegNode segNode0 = new SegNode(1, 1, 1, 1, "e##\u65F6");
      assertNotNull(segNode0);
      assertEquals("e##\u65F6", segNode0.getWord());
      assertEquals("e##\u65F6", segNode0.getSrcWord());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(1, segNode0.getPos());
      assertEquals(1, segNode0.getCol());
      assertEquals(1.0, segNode0.getValue(), 0.01);
      assertEquals(1, segNode0.getRow());
      
      boolean boolean1 = arrayList0.add(segNode0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(segNode0));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("e##\u65F6", segNode0.getWord());
      assertEquals("e##\u65F6", segNode0.getSrcWord());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(1, segNode0.getPos());
      assertEquals(1, segNode0.getCol());
      assertEquals(1.0, segNode0.getValue(), 0.01);
      assertEquals(1, segNode0.getRow());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 1);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(nShortPath0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, segGraph0.getMaxCol());
      assertEquals(2, segGraph0.getSize());
      assertEquals(1, segGraph0.getMaxRow());
      assertEquals(1, nShortPath0.getPathCount());
      
      // Undeclared exception!
      try { 
        nShortPath0.getPaths(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.segment.SegGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      
      SegNode segNode0 = new SegNode((-1488), 1, 225, 225, "u0F)]Yq6i+^[J`BO");
      assertNotNull(segNode0);
      assertEquals((-1488), segNode0.getRow());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(225.0, segNode0.getValue(), 0.01);
      assertEquals(1, segNode0.getCol());
      assertEquals(225, segNode0.getPos());
      assertEquals("u0F)]Yq6i+^[J`BO", segNode0.getWord());
      assertEquals("u0F)]Yq6i+^[J`BO", segNode0.getSrcWord());
      
      boolean boolean0 = arrayList0.add(segNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(segNode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1488), segNode0.getRow());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(225.0, segNode0.getValue(), 0.01);
      assertEquals(1, segNode0.getCol());
      assertEquals(225, segNode0.getPos());
      assertEquals("u0F)]Yq6i+^[J`BO", segNode0.getWord());
      assertEquals("u0F)]Yq6i+^[J`BO", segNode0.getSrcWord());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 225);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(nShortPath0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, segGraph0.getSize());
      assertEquals((-1488), segGraph0.getMaxRow());
      assertEquals(1, segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(225, nShortPath0.getPathCount());
      
      // Undeclared exception!
      try { 
        nShortPath0.getPaths(225);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1488 out of bounds for length 2
         //
         verifyException("org.ictclas4j.segment.NShortPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      assertEquals((-1), segGraph0.getMaxCol());
      assertEquals((-1), segGraph0.getMaxRow());
      
      SegNode segNode0 = new SegNode();
      assertNotNull(segNode0);
      assertNull(segNode0.getWord());
      assertEquals(0, segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0.0, segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getCol());
      assertEquals(0, segNode0.getRow());
      
      boolean boolean0 = arrayList0.add(segNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(segNode0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(segNode0.getWord());
      assertEquals(0, segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0.0, segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getCol());
      assertEquals(0, segNode0.getRow());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 5605);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(nShortPath0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, segGraph0.getSize());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(5605, nShortPath0.getPathCount());
      
      NShortPath nShortPath1 = new NShortPath(segGraph0, 5605);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      
      boolean boolean0 = arrayList0.add((SegNode) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      NShortPath nShortPath0 = null;
      try {
        nShortPath0 = new NShortPath(segGraph0, 1226);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.segment.SegGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxCol());
      assertEquals(0, segGraph0.getSize());
      assertFalse(segGraph0.isRowFirst());
      assertEquals((-1), segGraph0.getMaxRow());
      
      SegNode segNode0 = new SegNode((-1780), (-1780), (-115), (-115), (String) null);
      assertNotNull(segNode0);
      assertEquals((-1780), segNode0.getCol());
      assertEquals((-1), segNode0.getPosSize());
      assertNull(segNode0.getWord());
      assertEquals((-115.0), segNode0.getValue(), 0.01);
      assertEquals((-115), segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      assertEquals((-1780), segNode0.getRow());
      
      boolean boolean0 = arrayList0.add(segNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(segNode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1780), segNode0.getCol());
      assertEquals((-1), segNode0.getPosSize());
      assertNull(segNode0.getWord());
      assertEquals((-115.0), segNode0.getValue(), 0.01);
      assertEquals((-115), segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      assertEquals((-1780), segNode0.getRow());
      
      NShortPath nShortPath0 = null;
      try {
        nShortPath0 = new NShortPath(segGraph0, 20);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1779
         //
         verifyException("org.ictclas4j.segment.NShortPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      assertEquals((-1), segGraph0.getMaxRow());
      
      SegNode segNode0 = new SegNode();
      assertNotNull(segNode0);
      assertEquals(0, segNode0.getRow());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0.0, segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getCol());
      assertNull(segNode0.getWord());
      assertEquals(0, segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      
      boolean boolean0 = arrayList0.add(segNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(segNode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, segNode0.getRow());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0.0, segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getCol());
      assertNull(segNode0.getWord());
      assertEquals(0, segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 582);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(nShortPath0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, segGraph0.getSize());
      assertEquals(0, segGraph0.getMaxCol());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(582, nShortPath0.getPathCount());
      
      ArrayList<ArrayList<Integer>> arrayList1 = nShortPath0.getPaths();
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(arrayList1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, segGraph0.getSize());
      assertEquals(0, segGraph0.getMaxCol());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(582, nShortPath0.getPathCount());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals(0, segGraph0.getSize());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      
      SegNode segNode0 = new SegNode(0, 1, (-1780), (-1065.3696829781386), "path[");
      assertNotNull(segNode0);
      assertEquals((-1), segNode0.getPosSize());
      assertEquals("path[", segNode0.getWord());
      assertEquals(0, segNode0.getRow());
      assertEquals(1, segNode0.getCol());
      assertEquals((-1065.3696829781386), segNode0.getValue(), 0.01);
      assertEquals((-1780), segNode0.getPos());
      assertEquals("path[", segNode0.getSrcWord());
      
      boolean boolean0 = arrayList0.add(segNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(segNode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals("path[", segNode0.getWord());
      assertEquals(0, segNode0.getRow());
      assertEquals(1, segNode0.getCol());
      assertEquals((-1065.3696829781386), segNode0.getValue(), 0.01);
      assertEquals((-1780), segNode0.getPos());
      assertEquals("path[", segNode0.getSrcWord());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 1);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(nShortPath0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(1, segGraph0.getMaxCol());
      assertEquals(1, segGraph0.getSize());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, nShortPath0.getPathCount());
      
      ArrayList<ArrayList<Integer>> arrayList1 = nShortPath0.getPaths();
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(arrayList1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(1, segGraph0.getMaxCol());
      assertEquals(1, segGraph0.getSize());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, nShortPath0.getPathCount());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      nShortPath0.printPath(arrayList1);
      assertTrue(arrayList0.contains(segNode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(1, segGraph0.getMaxCol());
      assertEquals(1, segGraph0.getSize());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, nShortPath0.getPathCount());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 1);
      assertNotNull(nShortPath0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      assertEquals(1, nShortPath0.getPathCount());
      
      ArrayList<ArrayList<Integer>> arrayList1 = nShortPath0.getPaths();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      assertEquals(1, nShortPath0.getPathCount());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      nShortPath0.printPath(arrayList1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      assertEquals(1, nShortPath0.getPathCount());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 225);
      assertNotNull(nShortPath0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      assertEquals(225, nShortPath0.getPathCount());
      
      nShortPath0.printPath((ArrayList<ArrayList<Integer>>) null);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      assertEquals(225, nShortPath0.getPathCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxRow());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      assertEquals((-1), segGraph0.getMaxCol());
      
      SegNode segNode0 = new SegNode(0, 1, (-1780), (-1065.3696829781386), "path[");
      assertNotNull(segNode0);
      assertEquals((-1), segNode0.getPosSize());
      assertEquals("path[", segNode0.getWord());
      assertEquals(1, segNode0.getCol());
      assertEquals("path[", segNode0.getSrcWord());
      assertEquals((-1780), segNode0.getPos());
      assertEquals((-1065.3696829781386), segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getRow());
      
      boolean boolean0 = arrayList0.add(segNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(segNode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals("path[", segNode0.getWord());
      assertEquals(1, segNode0.getCol());
      assertEquals("path[", segNode0.getSrcWord());
      assertEquals((-1780), segNode0.getPos());
      assertEquals((-1065.3696829781386), segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getRow());
      
      boolean boolean1 = arrayList0.add(segNode0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(segNode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals("path[", segNode0.getWord());
      assertEquals(1, segNode0.getCol());
      assertEquals("path[", segNode0.getSrcWord());
      assertEquals((-1780), segNode0.getPos());
      assertEquals((-1065.3696829781386), segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getRow());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 992);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(nShortPath0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(2, segGraph0.getSize());
      assertEquals(1, segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(992, nShortPath0.getPathCount());
      
      // Undeclared exception!
      try { 
        nShortPath0.getPaths((-7527));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, segGraph0.getSize());
      assertFalse(segGraph0.isRowFirst());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getMaxCol());
      
      SegNode segNode0 = new SegNode();
      assertNotNull(segNode0);
      assertEquals(0, segNode0.getCol());
      assertEquals(0.0, segNode0.getValue(), 0.01);
      assertNull(segNode0.getWord());
      assertEquals(0, segNode0.getRow());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0, segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      
      boolean boolean0 = arrayList0.add(segNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(segNode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, segNode0.getCol());
      assertEquals(0.0, segNode0.getValue(), 0.01);
      assertNull(segNode0.getWord());
      assertEquals(0, segNode0.getRow());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0, segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 23);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(nShortPath0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, segGraph0.getSize());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(0, segGraph0.getMaxCol());
      assertEquals(23, nShortPath0.getPathCount());
      
      int[] intArray0 = nShortPath0.getPaths(0);
      assertEquals(2, intArray0.length);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, segGraph0.getSize());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(0, segGraph0.getMaxCol());
      assertEquals(23, nShortPath0.getPathCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segGraph0.getSize());
      
      SegNode segNode0 = new SegNode(0, 1, 0, (-1065.3696829781386), "path[");
      assertNotNull(segNode0);
      assertEquals(1, segNode0.getCol());
      assertEquals(0, segNode0.getPos());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals((-1065.3696829781386), segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getRow());
      assertEquals("path[", segNode0.getWord());
      assertEquals("path[", segNode0.getSrcWord());
      
      boolean boolean0 = arrayList0.add(segNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(segNode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, segNode0.getCol());
      assertEquals(0, segNode0.getPos());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals((-1065.3696829781386), segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getRow());
      assertEquals("path[", segNode0.getWord());
      assertEquals("path[", segNode0.getSrcWord());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 1);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(nShortPath0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(1, segGraph0.getSize());
      assertEquals(1, segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, nShortPath0.getPathCount());
      
      nShortPath0.setPathCount((-2788));
      assertTrue(arrayList0.contains(segNode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(1, segGraph0.getSize());
      assertEquals(1, segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals((-2788), nShortPath0.getPathCount());
      
      // Undeclared exception!
      try { 
        nShortPath0.getPaths();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: loop in getPaths() might never stop, thus throwing exception. Loop count: 1002
         //
         verifyException("org.ictclas4j.segment.NShortPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals(0, segGraph0.getSize());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      
      SegNode segNode0 = new SegNode(0, 1, (-1780), (-1065.3696829781386), "path[");
      assertNotNull(segNode0);
      assertEquals(1, segNode0.getCol());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals("path[", segNode0.getSrcWord());
      assertEquals(0, segNode0.getRow());
      assertEquals("path[", segNode0.getWord());
      assertEquals((-1065.3696829781386), segNode0.getValue(), 0.01);
      assertEquals((-1780), segNode0.getPos());
      
      boolean boolean0 = arrayList0.add(segNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(segNode0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, segNode0.getCol());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals("path[", segNode0.getSrcWord());
      assertEquals(0, segNode0.getRow());
      assertEquals("path[", segNode0.getWord());
      assertEquals((-1065.3696829781386), segNode0.getValue(), 0.01);
      assertEquals((-1780), segNode0.getPos());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 1);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(nShortPath0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(1, segGraph0.getMaxCol());
      assertEquals(1, segGraph0.getSize());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, nShortPath0.getPathCount());
      
      int[] intArray0 = nShortPath0.getPaths(997);
      assertTrue(arrayList0.contains(segNode0));
      assertNull(intArray0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(1, segGraph0.getMaxCol());
      assertEquals(1, segGraph0.getSize());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(1, nShortPath0.getPathCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SegGraph segGraph0 = new SegGraph(arrayList0);
      assertNotNull(segGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals(0, segGraph0.getSize());
      assertFalse(segGraph0.isRowFirst());
      assertEquals((-1), segGraph0.getMaxCol());
      
      SegNode segNode0 = new SegNode(37, 1, 1, 37, "\u672A##\u65F6");
      assertNotNull(segNode0);
      assertEquals(1, segNode0.getPos());
      assertEquals((-1), segNode0.getPosSize());
      assertNull(segNode0.getSrcWord());
      assertEquals("\u672A##\u65F6", segNode0.getWord());
      assertEquals(37.0, segNode0.getValue(), 0.01);
      assertEquals(1, segNode0.getCol());
      assertEquals(37, segNode0.getRow());
      
      boolean boolean0 = arrayList0.add(segNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(segNode0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, segNode0.getPos());
      assertEquals((-1), segNode0.getPosSize());
      assertNull(segNode0.getSrcWord());
      assertEquals("\u672A##\u65F6", segNode0.getWord());
      assertEquals(37.0, segNode0.getValue(), 0.01);
      assertEquals(1, segNode0.getCol());
      assertEquals(37, segNode0.getRow());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, 37);
      assertTrue(arrayList0.contains(segNode0));
      assertNotNull(nShortPath0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(37, segGraph0.getMaxRow());
      assertEquals(1, segGraph0.getSize());
      assertEquals(1, segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(37, nShortPath0.getPathCount());
      
      // Undeclared exception!
      try { 
        nShortPath0.getPaths();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: loop in getPaths() might never stop, thus throwing exception. Loop count: 1002
         //
         verifyException("org.ictclas4j.segment.NShortPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SegGraph segGraph0 = new SegGraph();
      assertNotNull(segGraph0);
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals((-1), segGraph0.getSize());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      
      SegNode segNode0 = new SegNode();
      assertNotNull(segNode0);
      assertEquals(0, segNode0.getRow());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0.0, segNode0.getValue(), 0.01);
      assertNull(segNode0.getWord());
      assertEquals(0, segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      assertEquals(0, segNode0.getCol());
      
      boolean boolean0 = segGraph0.setElement(segNode0);
      assertFalse(boolean0);
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals(0, segGraph0.getSize());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segNode0.getRow());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0.0, segNode0.getValue(), 0.01);
      assertNull(segNode0.getWord());
      assertEquals(0, segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      assertEquals(0, segNode0.getCol());
      
      ArrayList<SegNode> arrayList0 = segGraph0.getSnList();
      assertFalse(arrayList0.contains(segNode0));
      assertNotNull(arrayList0);
      assertEquals((-1), segGraph0.getMaxRow());
      assertEquals(0, segGraph0.getSize());
      assertEquals((-1), segGraph0.getMaxCol());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean1 = arrayList0.add(segNode0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(segNode0));
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(0, segGraph0.getMaxCol());
      assertEquals(1, segGraph0.getSize());
      assertFalse(segGraph0.isRowFirst());
      assertEquals(0, segNode0.getRow());
      assertEquals((-1), segNode0.getPosSize());
      assertEquals(0.0, segNode0.getValue(), 0.01);
      assertNull(segNode0.getWord());
      assertEquals(0, segNode0.getPos());
      assertNull(segNode0.getSrcWord());
      assertEquals(0, segNode0.getCol());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      NShortPath nShortPath0 = new NShortPath(segGraph0, (-2215));
      assertNotNull(nShortPath0);
      assertEquals(0, segGraph0.getMaxRow());
      assertEquals(0, segGraph0.getMaxCol());
      assertEquals(1, segGraph0.getSize());
      assertFalse(segGraph0.isRowFirst());
      assertEquals((-2215), nShortPath0.getPathCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      SegGraph segGraph0 = new SegGraph(arrayList0);
      SegNode segNode0 = new SegNode(1, 1, 1, 0.9, "`ToW,}Msf}K|");
      arrayList0.add(segNode0);
      NShortPath nShortPath0 = new NShortPath(segGraph0, 873);
      // Undeclared exception!
      try { 
        nShortPath0.getPaths(913);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: loop in getPaths() might never stop, thus throwing exception. Loop count: 1002
         //
         verifyException("org.ictclas4j.segment.NShortPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NShortPath nShortPath0 = new NShortPath((SegGraph) null, (-2982));
      nShortPath0.getPaths();
      assertEquals((-2982), nShortPath0.getPathCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SegGraph segGraph0 = new SegGraph();
      NShortPath nShortPath0 = new NShortPath(segGraph0, 0);
      int int0 = nShortPath0.getPathCount();
      assertEquals(0, int0);
  }
}
