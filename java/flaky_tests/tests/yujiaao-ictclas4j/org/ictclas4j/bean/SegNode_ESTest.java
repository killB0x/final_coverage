/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 02:33:07 GMT 2022
 */

package org.ictclas4j.bean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.ictclas4j.bean.POS;
import org.ictclas4j.bean.SegNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SegNode_ESTest extends SegNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      String string0 = segNode0.getWord();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      segNode0.setWord("KKs");
      String string0 = segNode0.getWord();
      assertEquals("KKs", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SegNode segNode0 = new SegNode((-818), (-852), (-818), 968.619504177951, "etP a|KM?");
      segNode0.setValue(0.0);
      double double0 = segNode0.getValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SegNode segNode0 = new SegNode(12, (-808), 12, 0.0, (String) null);
      segNode0.setValue((-808));
      double double0 = segNode0.getValue();
      assertEquals((-808.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      String string0 = segNode0.getSrcWord();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SegNode segNode0 = new SegNode(0, (-3585), 1, 1072.0, "");
      String string0 = segNode0.getSrcWord();
      assertEquals(1072.0, segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getRow());
      assertEquals(1, segNode0.getPos());
      assertEquals((-3585), segNode0.getCol());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      segNode0.setRow(26);
      int int0 = segNode0.getRow();
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SegNode segNode0 = new SegNode((-1442), (-1442), 1, (-1.0), "org.ictclas4j.bean.POS");
      int int0 = segNode0.getRow();
      assertEquals((-1.0), segNode0.getValue(), 0.01);
      assertEquals((-1442), segNode0.getCol());
      assertEquals((-1442), int0);
      assertEquals(1, segNode0.getPos());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      ArrayList<POS> arrayList0 = new ArrayList<POS>();
      segNode0.setAllPos(arrayList0);
      int int0 = segNode0.getPosSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      int int0 = segNode0.getPos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      segNode0.setPos(1);
      int int0 = segNode0.getPos();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      segNode0.appendWord("");
      int int0 = segNode0.getLen();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      segNode0.setCol((-1));
      int int0 = segNode0.getCol();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SegNode segNode0 = new SegNode(1051, 815, 815, 1051, "\u6559\u533A");
      ArrayList<POS> arrayList0 = new ArrayList<POS>();
      segNode0.setAllPos(arrayList0);
      segNode0.getAllPos();
      assertEquals(815, segNode0.getCol());
      assertEquals(1051, segNode0.getRow());
      assertEquals(815, segNode0.getPos());
      assertEquals(1051.0, segNode0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      POS pOS0 = new POS();
      segNode0.addPos(pOS0);
      ArrayList<POS> arrayList0 = segNode0.getAllPos();
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SegNode segNode0 = new SegNode(12, (-808), 12, 0.0, (String) null);
      ArrayList<POS> arrayList0 = new ArrayList<POS>();
      segNode0.setAllPos(arrayList0);
      SegNode segNode1 = segNode0.clone();
      assertEquals(12, segNode1.getPos());
      assertEquals(12, segNode1.getRow());
      assertNotSame(segNode1, segNode0);
      assertEquals(0.0, segNode1.getValue(), 0.01);
      assertEquals((-808), segNode1.getCol());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      POS pOS0 = new POS(1251, 305);
      segNode0.addPos(pOS0);
      SegNode segNode1 = segNode0.clone();
      assertNotSame(segNode1, segNode0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SegNode segNode0 = new SegNode((-818), (-852), (-818), 968.619504177951, "etP a|KM?");
      segNode0.setCol(920);
      segNode0.clone();
      assertEquals(920, segNode0.getCol());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SegNode segNode0 = new SegNode((-1442), (-1442), 1, (-1.0), "org.ictclas4j.bean.POS");
      SegNode segNode1 = segNode0.clone();
      assertEquals((-1.0), segNode1.getValue(), 0.01);
      assertEquals((-1442), segNode1.getCol());
      assertEquals((-1442), segNode1.getRow());
      assertEquals(1, segNode1.getPos());
      assertNotSame(segNode1, segNode0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      segNode0.setWord("\u672A##\u6570");
      assertEquals(0, segNode0.getPos());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SegNode segNode0 = new SegNode((-818), (-852), (-818), 968.619504177951, "etP a|KM?");
      segNode0.appendWord("\\tu`?djoHmmICCuN");
      assertEquals((-818), segNode0.getPos());
      assertEquals((-852), segNode0.getCol());
      assertEquals(968.619504177951, segNode0.getValue(), 0.01);
      assertEquals((-818), segNode0.getRow());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      POS pOS0 = new POS();
      segNode0.addPos(pOS0);
      int int0 = segNode0.getPosSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      int int0 = segNode0.getPosSize();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      POS pOS0 = new POS(0, (-2472.0));
      segNode0.addPos(pOS0);
      segNode0.addPos(pOS0);
      assertEquals(0, segNode0.getPos());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SegNode segNode0 = new SegNode((-818), (-852), (-818), 968.619504177951, "etP a|KM?");
      int int0 = segNode0.getLen();
      assertEquals(968.619504177951, segNode0.getValue(), 0.01);
      assertEquals((-818), segNode0.getRow());
      assertEquals((-852), segNode0.getCol());
      assertEquals(9, int0);
      assertEquals((-818), segNode0.getPos());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      int int0 = segNode0.getLen();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      // Undeclared exception!
      try { 
        segNode0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/builder/ReflectionToStringBuilder
         //
         verifyException("org.ictclas4j.bean.SegNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SegNode segNode0 = new SegNode((-1), 0, (-1), 0, "q6");
      int int0 = segNode0.getPos();
      assertEquals((-1), segNode0.getRow());
      assertEquals((-1), int0);
      assertEquals(0, segNode0.getCol());
      assertEquals(0.0, segNode0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SegNode segNode0 = new SegNode((-818), (-852), (-818), 968.619504177951, "etP a|KM?");
      String string0 = segNode0.getSrcWord();
      assertEquals((-852), segNode0.getCol());
      assertEquals((-818), segNode0.getPos());
      assertNotNull(string0);
      assertEquals((-818), segNode0.getRow());
      assertEquals(968.619504177951, segNode0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      int int0 = segNode0.getCol();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SegNode segNode0 = new SegNode((-818), (-852), (-818), 968.619504177951, "etP a|KM?");
      segNode0.getAllPos();
      assertEquals(968.619504177951, segNode0.getValue(), 0.01);
      assertEquals((-852), segNode0.getCol());
      assertEquals((-818), segNode0.getRow());
      assertEquals((-818), segNode0.getPos());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SegNode segNode0 = new SegNode(0, 0, 0, 0.0, "");
      segNode0.getWord();
      assertEquals(0, segNode0.getPos());
      assertEquals(0.0, segNode0.getValue(), 0.01);
      assertEquals(0, segNode0.getRow());
      assertEquals(0, segNode0.getCol());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SegNode segNode0 = new SegNode((-818), (-852), (-818), 968.619504177951, "etP a|KM?");
      double double0 = segNode0.getValue();
      assertEquals((-818), segNode0.getPos());
      assertEquals((-852), segNode0.getCol());
      assertEquals(968.619504177951, double0, 0.01);
      assertEquals((-818), segNode0.getRow());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      int int0 = segNode0.getRow();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      segNode0.setSrcWord("P%L>[e%|r");
      assertEquals(0, segNode0.getRow());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SegNode segNode0 = new SegNode();
      segNode0.setCol(1511);
      int int0 = segNode0.getCol();
      assertEquals(1511, int0);
  }
}
