/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 02:39:36 GMT 2022
 */

package org.ictclas4j.bean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.ictclas4j.bean.TagContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TagContext_ESTest extends TagContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      tagContext0.setTotalFreq(1903);
      int int0 = tagContext0.getTotalFreq();
      assertEquals(1903, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      int[] intArray0 = new int[6];
      tagContext0.setTagFreq(intArray0);
      int[] intArray1 = tagContext0.getTagFreq();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      int[][] intArray0 = new int[9][1];
      int[] intArray1 = new int[0];
      intArray0[3] = intArray1;
      tagContext0.setTagFreq(intArray0[3]);
      int[] intArray2 = tagContext0.getTagFreq();
      assertSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      tagContext0.setKey(1348);
      int int0 = tagContext0.getKey();
      assertEquals(1348, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      tagContext0.setKey((-1));
      int int0 = tagContext0.getKey();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      int[][] intArray0 = new int[0][7];
      tagContext0.setContextArray(intArray0);
      int[][] intArray1 = tagContext0.getContextArray();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      int[][] intArray0 = new int[9][1];
      tagContext0.setContextArray(intArray0);
      int[][] intArray1 = tagContext0.getContextArray();
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      // Undeclared exception!
      try { 
        tagContext0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/builder/ReflectionToStringBuilder
         //
         verifyException("org.ictclas4j.bean.TagContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      int[] intArray0 = tagContext0.getTagFreq();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      int int0 = tagContext0.getTotalFreq();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      int int0 = tagContext0.getKey();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      int[][] intArray0 = tagContext0.getContextArray();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TagContext tagContext0 = new TagContext();
      tagContext0.setTotalFreq((-2));
      int int0 = tagContext0.getTotalFreq();
      assertEquals((-2), int0);
  }
}
