/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 02:29:43 GMT 2022
 */

package org.ictclas4j.bean;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.ictclas4j.bean.Queue;
import org.ictclas4j.bean.QueueNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Queue_ESTest extends Queue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode((-6), (-1), (-6));
      queue0.push(queueNode0);
      queue0.pop(false);
      queue0.push(queueNode0);
      queue0.pop(false);
      queue0.top();
      assertFalse(queue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode((-6), (-1), (-6));
      queue0.push(queueNode0);
      queue0.pop(false);
      queue0.pop(false);
      assertFalse(queue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode((-6), (-1), (-6));
      queue0.push(queueNode0);
      queueNode0.setWeight((-1));
      QueueNode queueNode1 = new QueueNode(2145242015, (-6), (-6));
      boolean boolean0 = queue0.push(queueNode1);
      assertFalse(queue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode();
      queue0.push(queueNode0);
      queue0.top();
      assertTrue(queue0.isSingle());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode(1636, 190, 594.1691764);
      queue0.push(queueNode0);
      queue0.top();
      assertTrue(queue0.isSingle());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode();
      queue0.push(queueNode0);
      queue0.pop(false);
      assertTrue(queue0.isSingle());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode(3958, 1292, 0.0);
      queue0.push(queueNode0);
      assertFalse(queue0.isEmpty());
      
      queue0.pop();
      assertTrue(queue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode();
      queue0.push(queueNode0);
      assertTrue(queue0.isSingle());
      
      queue0.pop();
      assertFalse(queue0.isSingle());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode(0, 1247, 1247);
      queue0.push(queueNode0);
      assertFalse(queue0.isEmpty());
      
      queue0.pop();
      assertFalse(queue0.isSingle());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode((-1), (-1), (-2258.9));
      queue0.push(queueNode0);
      assertTrue(queue0.isSingle());
      
      queue0.pop();
      assertFalse(queue0.isSingle());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = queue0.pop(false);
      assertNull(queueNode0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = queue0.pop();
      boolean boolean0 = queue0.push(queueNode0);
      assertFalse(boolean0);
      
      boolean boolean1 = queue0.isSingle();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Queue queue0 = new Queue();
      boolean boolean0 = queue0.isSingle();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode((-6), (-1), (-6));
      queue0.push(queueNode0);
      boolean boolean0 = queue0.isEmpty();
      assertTrue(queue0.isSingle());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = queue0.pop();
      boolean boolean0 = queue0.push(queueNode0);
      assertFalse(boolean0);
      
      boolean boolean1 = queue0.isEmpty();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Queue queue0 = new Queue();
      boolean boolean0 = queue0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = queue0.pop();
      boolean boolean0 = queue0.push(queueNode0);
      assertFalse(boolean0);
      
      queue0.top();
      assertTrue(queue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = queue0.top();
      assertNull(queueNode0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode(1636, 190, 594.1691764);
      queue0.push(queueNode0);
      QueueNode queueNode1 = queue0.pop(true);
      queue0.push(queueNode1);
      boolean boolean0 = queue0.isSingle();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Queue queue0 = new Queue();
      QueueNode queueNode0 = new QueueNode((-6), (-1), (-6));
      queueNode0.setWeight((-1));
      QueueNode queueNode1 = new QueueNode(2145242015, (-6), (-6));
      queue0.push(queueNode1);
      boolean boolean0 = queue0.push(queueNode0);
      assertFalse(queue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.resetIndex();
      assertTrue(queue0.isEmpty());
  }
}
