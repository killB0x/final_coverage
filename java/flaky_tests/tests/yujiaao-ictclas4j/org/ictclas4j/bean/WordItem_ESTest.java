/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 02:36:43 GMT 2022
 */

package org.ictclas4j.bean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.ictclas4j.bean.WordItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WordItem_ESTest extends WordItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WordItem wordItem0 = new WordItem();
      String string0 = wordItem0.getWord();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WordItem wordItem0 = new WordItem("p61olN9*t?B", (-263), (-263), (-263));
      wordItem0.setWord("");
      wordItem0.getWord();
      assertEquals((-263), wordItem0.getFreq());
      assertEquals((-263), wordItem0.getHandle());
      assertEquals((-263), wordItem0.getLen());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WordItem wordItem0 = new WordItem("XRda<.{ptG>g5Dd[G>", 2414, 1546, 2414);
      int int0 = wordItem0.getLen();
      assertEquals(2414, int0);
      assertEquals(1546, wordItem0.getHandle());
      assertEquals(2414, wordItem0.getFreq());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WordItem wordItem0 = new WordItem("p61olN9*t?B", (-263), (-263), (-263));
      int int0 = wordItem0.getLen();
      assertEquals((-263), int0);
      assertEquals((-263), wordItem0.getFreq());
      assertEquals((-263), wordItem0.getHandle());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WordItem wordItem0 = new WordItem("Z?", 1, 0, 3147);
      assertEquals(0, wordItem0.getHandle());
      
      wordItem0.setHandle(3147);
      int int0 = wordItem0.getHandle();
      assertEquals(3147, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WordItem wordItem0 = new WordItem("p61olN9*t?B", (-263), (-263), (-263));
      int int0 = wordItem0.getHandle();
      assertEquals((-263), wordItem0.getLen());
      assertEquals((-263), int0);
      assertEquals((-263), wordItem0.getFreq());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WordItem wordItem0 = new WordItem("", 0, 0, 0);
      assertEquals(0, wordItem0.getFreq());
      
      wordItem0.setFreq(1);
      int int0 = wordItem0.getFreq();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WordItem wordItem0 = new WordItem();
      wordItem0.setFreq((-956));
      int int0 = wordItem0.getFreq();
      assertEquals((-956), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WordItem wordItem0 = new WordItem();
      int int0 = wordItem0.getLen();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WordItem wordItem0 = new WordItem();
      // Undeclared exception!
      try { 
        wordItem0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/builder/ReflectionToStringBuilder
         //
         verifyException("org.ictclas4j.bean.WordItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WordItem wordItem0 = new WordItem("Z?", 1, 0, 3147);
      wordItem0.getWord();
      assertEquals(3147, wordItem0.getFreq());
      assertEquals(0, wordItem0.getHandle());
      assertEquals(1, wordItem0.getLen());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WordItem wordItem0 = new WordItem("Z?", 1, 0, 3147);
      int int0 = wordItem0.getHandle();
      assertEquals(1, wordItem0.getLen());
      assertEquals(0, int0);
      assertEquals(3147, wordItem0.getFreq());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WordItem wordItem0 = new WordItem();
      int int0 = wordItem0.getFreq();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WordItem wordItem0 = new WordItem();
      wordItem0.setLen(234);
      assertEquals(234, wordItem0.getLen());
  }
}
