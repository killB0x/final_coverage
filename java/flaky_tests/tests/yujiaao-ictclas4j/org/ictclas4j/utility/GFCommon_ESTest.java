/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 02:22:32 GMT 2022
 */

package org.ictclas4j.utility;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.ictclas4j.utility.GFCommon;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GFCommon_ESTest extends GFCommon_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup0).activeCount();
      doReturn(0).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, "java.home");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)110;
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, 250, 4);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)6, (byte)110}, byteArray0);
      assertEquals(250, int0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte)110;
      byteArray1[2] = (byte)110;
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte)6;
      byteArray1[5] = (byte)6;
      byteArray1[6] = (byte)6;
      int int1 = GFCommon.bytes2int(byteArray1, false);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)110, (byte)110, (byte)110, (byte)6, (byte)6, (byte)6}, byteArray1);
      assertFalse(int1 == int0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1852730931, int1);
      
      String string0 = GFCommon.formatIP("java.home");
      assertNull(string0);
      
      byte[] byteArray2 = GFCommon.long2bytes((long) (byte)6);
      assertNotNull(byteArray2);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)6}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean1 = GFCommon.isHasZero(byteArray1);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)110, (byte)110, (byte)110, (byte)6, (byte)6, (byte)6}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Connection connection0 = GFCommon.getConn("S.FE#):H@h]8", (String) null, "S.FE#):H@h]8", "");
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = GFCommon.formatIP("or.ictcla4j.uiliy.GFCommon");
      assertNotNull(string0);
      assertEquals("0orictuilGFC", string0);
      
      byte[] byteArray0 = GFCommon.long2bytes((-179L));
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)77}, byteArray0);
      
      int int0 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)77}, byteArray0);
      assertEquals((-1), int0);
      
      int int1 = GFCommon.bytesCopy(byteArray0, byteArray0, (-1), 1638);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      
      int int2 = GFCommon.getUnsigned((byte)30);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(30, int2);
      
      Connection connection0 = GFCommon.getConn("+EQ09ws3F!Y", "", "", "P=a!@'LFAhq%&4D}1R");
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, (int) (byte)0, 1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      
      long long0 = GFCommon.bytes2long(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, 0, 4);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int1 = GFCommon.getZeroIndex(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, int1);
      
      int int2 = GFCommon.bytesCopy(byteArray0, byteArray1, (-17922), 0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-17922), int2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = GFCommon.isActiveThread((ThreadGroup) null, "q) 0'I<O/.");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)24;
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, 64, (-2632));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)59, (byte)24}, byteArray0);
      assertEquals(64, int0);
      
      int int1 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)59, (byte)24}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(59, int1);
      
      String string0 = GFCommon.formatIP("q) 0'I<O/.");
      assertNull(string0);
      
      byte[] byteArray1 = GFCommon.long2bytes((long) (byte)24);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)24}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = GFCommon.isHasZero(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)24}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup0).activeCount();
      doReturn(0).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, "q) 0'I<O/.");
      assertFalse(boolean0);
      
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, 8, 146);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(153, int0);
      
      int int1 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = GFCommon.formatIP("q) 0'I<O/.");
      assertNull(string0);
      
      byte[] byteArray1 = GFCommon.long2bytes(0L);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string1 = GFCommon.long2bin((-120L));
      assertNotNull(string1);
      assertEquals("1111111111111111111111111111111111111111111111111111111110001000", string1);
      
      int int2 = GFCommon.bytesCopy(byteArray1, byteArray1, (-1199), 867);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1199), int2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup0).activeCount();
      doReturn(0).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, ".,qor9?i8fd(.A#5>");
      assertFalse(boolean0);
      
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, (-3261), (-3261));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-3261), int0);
      
      int int1 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = GFCommon.formatIP(".,qor9?i8fd(.A#5>");
      assertNull(string0);
      
      byte[] byteArray1 = GFCommon.long2bytes((long) (byte)1);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string1 = GFCommon.long2bin(0L);
      assertNotNull(string1);
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string1);
      
      int int2 = GFCommon.bytesCopy(byteArray0, byteArray0, (-3261), 22);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-3261), int2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      int int0 = GFCommon.random((-257));
      assertEquals(0, int0);
      
      int int1 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int1);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup0).activeCount();
      doReturn(0).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, "os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertFalse(boolean0);
      
      int int2 = GFCommon.bytesCopy(byteArray0, byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = GFCommon.bytes2int(byteArray0, true);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      String string1 = GFCommon.formatIP("x`_\"IW1*m@t*C");
      assertNull(string1);
      
      byte[] byteArray1 = GFCommon.long2bytes((long) 0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string2 = GFCommon.long2bin(60L);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("0000000000000000000000000000000000000000000000000000000000111100", string2);
      
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int int4 = GFCommon.bytesCopy(byteArray1, byteArray2, 1, 7);
      assertEquals(8, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(7, int4);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = GFCommon.getClassPath("");
      assertNull(string0);
      
      boolean boolean0 = GFCommon.isActiveThread((ThreadGroup) null, "wQ+}c:FHGgMZ");
      assertFalse(boolean0);
      
      byte[] byteArray0 = GFCommon.long2bytes((-278L));
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      
      byte[] byteArray1 = GFCommon.long2bytes((-278L));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1), int0);
      
      boolean boolean1 = GFCommon.isHasZero(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1);
      
      boolean boolean2 = GFCommon.isActiveThread((ThreadGroup) null, "wQ+}c:FHGgMZ");
      assertFalse(boolean2);
      
      int int1 = GFCommon.random((-1), (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = GFCommon.long2bin((-1L));
      assertNotNull(string1);
      assertEquals("1111111111111111111111111111111111111111111111111111111111111111", string1);
      
      int int2 = GFCommon.bytesCopy(byteArray0, byteArray0, 1187, (int) (byte)58);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1244, int2);
      
      int int3 = GFCommon.random((int) (byte)58);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      
      byte[] byteArray2 = GFCommon.long2bytes((-1L));
      assertNotNull(byteArray2);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Connection connection0 = GFCommon.getConn("1111111111111111111111111111111111111111111111111111111111111111", "wQ+}c:FHGgMZ", "ONX^(N mm%7ug&t//M", (String) null);
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = GFCommon.formatIP("or.ictcla4j.uiliy.GFCommon");
      assertNotNull(string0);
      assertEquals("0orictuilGFC", string0);
      
      byte[] byteArray0 = GFCommon.long2bytes((-179L), false);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)77, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      int int0 = GFCommon.bytesCopy(byteArray0, (byte[]) null, 19, 68);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)77, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(19, int0);
      
      Connection connection0 = GFCommon.getConn("or.ictcla4j.uiliy.GFCommon", "", "0orictuilGFC", (String) null);
      assertNull(connection0);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, (-43), (-43));
      assertNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)77, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = GFCommon.byte2bin((byte) (-34));
      assertNotNull(string0);
      assertEquals("11011110", string0);
      
      long long0 = GFCommon.bytes2long((byte[]) null, false);
      assertEquals(0L, long0);
      
      int int0 = GFCommon.getUnsigned((byte) (-34));
      assertEquals(222, int0);
      
      int int1 = GFCommon.random((int) (byte)0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long long1 = GFCommon.bytes2long((byte[]) null);
      assertEquals(0L, long1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      long long2 = GFCommon.bytes2long(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, long2);
      
      byte[] byteArray1 = GFCommon.bytesCopy((byte[]) null, 932, (-2300));
      assertNull(byteArray1);
      
      String string1 = GFCommon.getClassName("11011110");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("String", string1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      long long0 = GFCommon.bytes2long(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(70650219154374656L, long0);
      
      long long1 = GFCommon.bytes2long(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(long1 == long0);
      assertEquals(70650219154374656L, long1);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, (int) (byte) (-5), 24);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-5)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      GFCommon.getClassName((Object) null);
      Connection connection0 = GFCommon.getConn("Fzpn", (String) null, "lou", "");
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = GFCommon.byte2bin((byte) (-34));
      assertNotNull(string0);
      assertEquals("11011110", string0);
      
      byte[] byteArray0 = new byte[4];
      long long0 = GFCommon.bytes2long(byteArray0, false);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      
      int int0 = GFCommon.getUnsigned((byte)0);
      assertEquals(0, int0);
      
      int int1 = GFCommon.random((-1852));
      assertEquals(0, int1);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup0).activeCount();
      doReturn(0).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, "N!XB,f!% 4pmRVPto");
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[3] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)1;
      int int2 = GFCommon.bytesCopy(byteArray1, byteArray1, 867, (-1063));
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)1, (byte)0, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(867, int2);
      
      int int3 = GFCommon.bytes2int(byteArray1, false);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)1, (byte)0, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(16777472, int3);
      
      String string1 = GFCommon.formatIP("\njava.vm.version:");
      assertNull(string1);
      
      byte[] byteArray2 = GFCommon.long2bytes((long) (byte)1);
      assertNotNull(byteArray2);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      String string2 = GFCommon.long2bin(0L);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string2);
      
      int int4 = GFCommon.bytesCopy(byteArray2, byteArray0, 42, (int) (byte)1);
      assertEquals(8, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(42, int4);
      
      String string3 = GFCommon.long2bin(42);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0000000000000000000000000000000000000000000000000000000000101010", string3);
      
      String string4 = GFCommon.long2bin((byte)0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string4);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = GFCommon.long2bytes((-179L));
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)77}, byteArray0);
      
      int int0 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)77}, byteArray0);
      assertEquals((-1), int0);
      
      int int1 = GFCommon.bytesCopy(byteArray0, byteArray0, (-1), 146);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = GFCommon.bytesCopy(byteArray0, byteArray0, 146, 1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(146, int2);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      int int0 = GFCommon.random((-257), (-257));
      assertEquals(0, int0);
      
      int int1 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int1);
      
      String string1 = GFCommon.formatIP("java.vm.version");
      assertNull(string1);
      
      String string2 = GFCommon.getWebinfPath("java.vm.version");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      String string1 = GFCommon.getWebinfPath("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/", string1);
      
      String string2 = GFCommon.formatIP("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0osnamarcven", string2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      String string1 = GFCommon.getClassPath("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertNull(string1);
      
      String string2 = GFCommon.getSystemInfo();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string2);
      
      int int0 = GFCommon.random((-257));
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)8;
      int int1 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)32, (byte) (-4), (byte)32, (byte)8}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)32, (byte) (-4), (byte)32, (byte)8}, byteArray0);
      assertFalse(boolean0);
      
      int int2 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)32, (byte) (-4), (byte)32, (byte)8}, byteArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(553394383, int2);
      
      String string3 = GFCommon.getSystemInfo();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string3);
      
      String string4 = GFCommon.getClassPath("");
      assertNull(string4);
      
      int int3 = GFCommon.bytes2int(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)32, (byte) (-4), (byte)32, (byte)8}, byteArray0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(553394184, int3);
      
      long long0 = GFCommon.bytes2long(byteArray0, false);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)32, (byte) (-4), (byte)32, (byte)8}, byteArray0);
      assertEquals(553394383L, long0);
      
      int int4 = GFCommon.getUnsigned((byte) (-4));
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(252, int4);
      
      int int5 = GFCommon.random((-911));
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertEquals(1, int5);
      
      long long1 = GFCommon.bytes2long(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)32, (byte) (-4), (byte)32, (byte)8}, byteArray0);
      assertFalse(long1 == long0);
      assertEquals(889611624456L, long1);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, (int) (byte)8, 33);
      assertNotNull(byteArray1);
      assertEquals(33, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)32, (byte) (-4), (byte)32, (byte)8}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      String string1 = GFCommon.getClassPath("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)0;
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, (int) (byte) (-49), (int) (byte)0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)32, (byte)0, (byte)32, (byte)31, (byte)0}, byteArray0);
      assertEquals((-49), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      int int0 = GFCommon.random((-257));
      assertEquals(0, int0);
      
      int int1 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int1);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      int int2 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int2);
      
      String string1 = GFCommon.getSystemInfo();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string1);
      
      String string2 = GFCommon.getClassPath("0");
      assertNull(string2);
      
      int int3 = GFCommon.bytes2int(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      long long0 = GFCommon.bytes2long(byteArray0, false);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      
      int int4 = GFCommon.getUnsigned((byte)4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(4, int4);
      
      long long1 = GFCommon.bytes2long(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long1);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, 4, (int) (byte)4);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = GFCommon.getClassPath("");
      assertNull(string0);
      
      boolean boolean0 = GFCommon.isActiveThread((ThreadGroup) null, "wQ+}c:FHGgMZ");
      assertFalse(boolean0);
      
      byte[] byteArray0 = GFCommon.long2bytes((-278L));
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      
      byte[] byteArray1 = GFCommon.long2bytes((-278L));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1), int0);
      
      boolean boolean1 = GFCommon.isHasZero(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1);
      
      boolean boolean2 = GFCommon.isActiveThread((ThreadGroup) null, "wQ+}c:FHGgMZ");
      assertFalse(boolean2);
      
      int int1 = GFCommon.random((-1), (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long long0 = GFCommon.bytes2long(byteArray0, true);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-278L), long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = GFCommon.getClassName(object0);
      assertNotNull(string1);
      assertEquals("Object", string1);
      
      int int2 = GFCommon.bytes2int(byteArray1, true);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-278), int2);
      
      String string2 = GFCommon.int2bin(7);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("111", string2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      String string1 = GFCommon.getClassPath("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertNull(string1);
      
      String string2 = GFCommon.getWebinfPath("DVu");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      byte[] byteArray0 = new byte[0];
      int int0 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, int0);
      
      int int1 = GFCommon.getUnsigned((byte)78);
      assertFalse(int1 == int0);
      assertEquals(78, int1);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, 0, 78);
      assertNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray2 = GFCommon.int2bytes((int) (byte)78, false);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      String string3 = GFCommon.getSystemInfo();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string3);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(boolean0);
      
      byte[] byteArray3 = GFCommon.int2bytes((-1), false);
      assertNotNull(byteArray3);
      assertEquals(4, byteArray3.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      String string4 = GFCommon.long2bin((-1));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("1111111111111111111111111111111111111111111111111111111111111111", string4);
      
      int int2 = GFCommon.bytesCopy((byte[]) null, byteArray3, 78, (-1));
      assertEquals(4, byteArray3.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(int2 == int0);
      assertEquals(78, int2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = GFCommon.byte2bin((byte) (-34));
      assertNotNull(string0);
      assertEquals("11011110", string0);
      
      byte[] byteArray0 = new byte[4];
      long long0 = GFCommon.bytes2long(byteArray0, false);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      
      int int0 = GFCommon.getUnsigned((byte)0);
      assertEquals(0, int0);
      
      int int1 = GFCommon.random((-1852));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      long long1 = GFCommon.bytes2long(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long1);
      
      long long2 = GFCommon.bytes2long(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long2);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-34);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-34);
      byteArray1[4] = (byte) (-34);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-34);
      byteArray1[7] = (byte)18;
      byteArray1[8] = (byte) (-34);
      // Undeclared exception!
      try { 
        GFCommon.bytesCopy(byteArray1, (int) (byte) (-34), 32);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -24
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      long long0 = GFCommon.bytes2long(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        GFCommon.bytesCopy(byteArray0, (-269), 30);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -262
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = GFCommon.long2bytes(0L);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      int int0 = GFCommon.random((-257));
      assertEquals(0, int0);
      
      int int1 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int1);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      int int2 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int2);
      
      String string1 = GFCommon.getSystemInfo();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string1);
      
      String string2 = GFCommon.getClassPath("java.vm.version");
      assertNull(string2);
      
      int int3 = GFCommon.bytes2int(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      long long0 = GFCommon.bytes2long(byteArray0, false);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      
      int int4 = GFCommon.getUnsigned((byte)4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(4, int4);
      
      int int5 = GFCommon.random(4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertEquals(1, int5);
      
      long long1 = GFCommon.bytes2long(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, 0, (int) (byte)4);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = GFCommon.random(0);
      assertEquals(0, int0);
      
      int int1 = GFCommon.getUnsigned((byte) (-96));
      assertFalse(int1 == int0);
      assertEquals(160, int1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-96);
      long long0 = GFCommon.bytes2long(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-96)}, byteArray0);
      assertEquals(1184L, long0);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, 0, 160);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(160, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-96)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = GFCommon.bytesCopy(byteArray1, 32, (int) (byte)4);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(160, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-96)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      String string0 = GFCommon.long2bin(0);
      assertNotNull(string0);
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, (int) (byte) (-4), 1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = GFCommon.formatIP("org.ictclas4j.utility.GFCommon");
      assertNotNull(string0);
      assertEquals("orgictutiGFC", string0);
      
      int int0 = GFCommon.bytes2int((byte[]) null, true);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)4;
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-8), (byte)32, (byte)4}, byteArray0);
      assertFalse(boolean0);
      
      String string1 = GFCommon.int2bin(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      
      byte[] byteArray1 = GFCommon.long2bytes((-3033L));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-12), (byte)39}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = GFCommon.bytesCopy((byte[]) null, (int) (byte)4, (-132));
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = GFCommon.bytes2long((byte[]) null);
      assertEquals(0L, long0);
      
      byte[] byteArray0 = GFCommon.bytesCopy((byte[]) null, 45, 24);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = GFCommon.getClassPath("");
      assertNull(string0);
      
      boolean boolean0 = GFCommon.isActiveThread((ThreadGroup) null, "wQ+}c:FHGgMZ");
      assertFalse(boolean0);
      
      byte[] byteArray0 = GFCommon.long2bytes((-278L));
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      
      byte[] byteArray1 = GFCommon.long2bytes((-278L));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1), int0);
      
      boolean boolean1 = GFCommon.isHasZero(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1);
      
      boolean boolean2 = GFCommon.isActiveThread((ThreadGroup) null, "wQ+}c:FHGgMZ");
      assertFalse(boolean2);
      
      int int1 = GFCommon.random((-1), (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = GFCommon.long2bin(0);
      assertNotNull(string1);
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string1);
      
      Connection connection0 = GFCommon.getConn((String) null, "", "0000000000000000000000000000000000000000000000000000000000000000", "file.separator");
      assertNull(connection0);
      
      int int2 = GFCommon.getZeroIndex((byte[]) null);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = GFCommon.random(1380);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      String string2 = GFCommon.int2bin((-1170));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("11111111111111111111101101101110", string2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = GFCommon.long2bytes(0L);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = GFCommon.long2bytes(3600L, false);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)14, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = GFCommon.getZeroIndex((byte[]) null);
      assertEquals((-1), int0);
      
      byte[] byteArray2 = GFCommon.int2bytes((-1));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = GFCommon.getClassPath("");
      assertNull(string0);
      
      boolean boolean0 = GFCommon.isActiveThread((ThreadGroup) null, "wQ+}c:FHGgMZ");
      assertFalse(boolean0);
      
      byte[] byteArray0 = GFCommon.long2bytes((-278L));
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      
      byte[] byteArray1 = GFCommon.long2bytes((-278L));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1), int0);
      
      boolean boolean1 = GFCommon.isHasZero(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1);
      
      boolean boolean2 = GFCommon.isActiveThread((ThreadGroup) null, "wQ+}c:FHGgMZ");
      assertFalse(boolean2);
      
      int int1 = GFCommon.random((-1), (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = GFCommon.long2bin((-1L));
      assertNotNull(string1);
      assertEquals("1111111111111111111111111111111111111111111111111111111111111111", string1);
      
      Connection connection0 = GFCommon.getConn("!M?'<<(]\"0zM_$[9", "", (String) null, "org.ictclas4j.utility.GFCommon");
      assertNull(connection0);
      
      int int2 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = GFCommon.bytesCopy(byteArray1, byteArray1, 0, 0);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      byte[] byteArray2 = GFCommon.long2bytes((-1L));
      assertNotNull(byteArray2);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = GFCommon.getUnsigned((byte)109);
      assertEquals(109, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)109;
      byteArray0[8] = (byte)109;
      int int1 = GFCommon.bytesCopy(byteArray0, byteArray0, 0, (int) (byte)109);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)109, (byte)109, (byte) (-52), (byte)109, (byte)109, (byte)109, (byte)109, (byte)109, (byte)109}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(108, int1);
      
      byte[] byteArray1 = GFCommon.int2bytes(2130);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)8, (byte)82}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)109;
      byteArray2[1] = (byte)47;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)109;
      Connection connection0 = GFCommon.getConn("8o(<k{7e@P9", "os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", "pie", "8o(<k{7e@P9");
      assertNull(connection0);
      
      int int2 = GFCommon.getZeroIndex(byteArray2);
      assertEquals(9, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)109, (byte)47, (byte)0, (byte)0, (byte)109, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(2, int2);
      
      int int3 = GFCommon.random((int) (byte)47);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = GFCommon.random((-278), (-278));
      assertEquals(0, int0);
      
      String string0 = GFCommon.int2bin(16);
      assertNotNull(string0);
      assertEquals("10000", string0);
      
      boolean boolean0 = GFCommon.isActiveThread((ThreadGroup) null, "10000");
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-41);
      byteArray1[1] = (byte) (-41);
      byteArray1[2] = (byte) (-41);
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-41);
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte) (-41);
      int int1 = GFCommon.bytesCopy(byteArray0, byteArray1, (int) (byte)1, 3330);
      assertEquals(4, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-41), (byte) (-41), (byte) (-41)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-41), (byte) (-41), (byte)1, (byte) (-41), (byte)1, (byte) (-41)}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int1 == int0);
      assertEquals(3330, int1);
      
      int int2 = GFCommon.bytes2int(byteArray1, false);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-41), (byte) (-41), (byte)1, (byte) (-41), (byte)1, (byte) (-41)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(30922711, int2);
      
      byte[] byteArray2 = GFCommon.long2bytes((long) 3330);
      assertNotNull(byteArray2);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)13, (byte)2}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      long long0 = GFCommon.bytes2long(byteArray0, false);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-41), (byte) (-41), (byte) (-41)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(14145280L, long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = GFCommon.getClassName(object0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object", string1);
      
      int int3 = GFCommon.bytes2int(byteArray1, true);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-41), (byte) (-41), (byte)1, (byte) (-41), (byte)1, (byte) (-41)}, byteArray1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(30867927, int3);
      
      String string2 = GFCommon.byte2bin((byte)1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("00000001", string2);
      
      String string3 = GFCommon.formatIP("Object");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(threadGroup0).activeCount();
      doReturn(8).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, "q) 0'I<O/.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(60).when(threadGroup0).activeCount();
      doReturn(1678).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, "fa.R6W");
      assertFalse(boolean0);
      
      int int0 = GFCommon.random((-278), (-278));
      assertEquals(0, int0);
      
      String string0 = GFCommon.int2bin(0);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup1).activeCount();
      doReturn((-417)).when(threadGroup1).enumerate(any(java.lang.Thread[].class));
      boolean boolean1 = GFCommon.isActiveThread(threadGroup1, ":x}");
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      int int1 = GFCommon.bytesCopy(byteArray0, byteArray0, 867, 867);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(1733, int1);
      
      int int2 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string1 = GFCommon.formatIP("fa.R6W");
      assertNull(string1);
      
      byte[] byteArray1 = GFCommon.long2bytes(2211L);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)8, (byte) (-93)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long long0 = GFCommon.bytes2long(byteArray1, false);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)8, (byte) (-93)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2251799813685248L, long0);
      
      String string2 = GFCommon.getClassName("fa.R6W");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("String", string2);
      
      int int3 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      String string3 = GFCommon.byte2bin((byte)104);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("01101000", string3);
      
      String string4 = GFCommon.formatIP("0");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = (-34);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn((-34)).when(threadGroup0).activeCount();
      String string0 = "q) 0'I<O/.";
      // Undeclared exception!
      try { 
        GFCommon.isActiveThread(threadGroup0, "q) 0'I<O/.");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -34
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, (int) (byte)0, 1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      
      String string0 = GFCommon.int2bin(0);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, 0, 3096);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3096, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = GFCommon.byte2bin((byte) (-34));
      assertNotNull(string0);
      assertEquals("11011110", string0);
      
      byte[] byteArray0 = new byte[4];
      long long0 = GFCommon.bytes2long(byteArray0, true);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      
      int int0 = GFCommon.getUnsigned((byte)7);
      assertEquals(7, int0);
      
      int int1 = GFCommon.random((int) (byte)0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long long1 = GFCommon.bytes2long(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, 0, 252);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(252, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = GFCommon.random(8);
      assertEquals(0, int0);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, 2597, 8);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = GFCommon.formatIP("org.ictclas4j.utility.GFCommon");
      assertNotNull(string0);
      assertEquals("orgictutiGFC", string0);
      
      int int0 = GFCommon.bytes2int((byte[]) null, true);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      int int1 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      byte[] byteArray1 = GFCommon.long2bytes((-1394L), true);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-6), (byte) (-114)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int2 = GFCommon.random((int) (byte) (-8), 1);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = GFCommon.bytesCopy(byteArray1, (byte[]) null, (int) (byte)0, (int) (byte) (-8));
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-6), (byte) (-114)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        GFCommon.getClassPath(object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = GFCommon.bytesCopy((byte[]) null, (byte[]) null, (-2690), (-2690));
      assertEquals((-2690), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = GFCommon.byte2bin((byte) (-34));
      assertNotNull(string0);
      assertEquals("11011110", string0);
      
      byte[] byteArray0 = new byte[4];
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, 252, (-18463));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(252, int0);
      
      byte[] byteArray1 = GFCommon.int2bytes((-14109));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-56), (byte) (-29)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = GFCommon.int2bytes((-671));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-3), (byte)97}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int int1 = GFCommon.random(8, 252);
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      String string1 = GFCommon.long2bin(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string1);
      
      int int2 = GFCommon.getZeroIndex(byteArray1);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-56), (byte) (-29)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      byte[] byteArray3 = GFCommon.long2bytes((long) (-14109), true);
      assertNotNull(byteArray3);
      assertEquals(8, byteArray3.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-56), (byte) (-29)}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      int int3 = GFCommon.random(0, (-10790));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(9, int3);
      
      int int4 = GFCommon.bytesCopy(byteArray1, byteArray1, 252, 803);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-56), (byte) (-29)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(1054, int4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        GFCommon.getClassPath(object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = GFCommon.getClassPath("");
      assertNull(string0);
      
      boolean boolean0 = GFCommon.isActiveThread((ThreadGroup) null, "wQ+}c:FHGgMZ");
      assertFalse(boolean0);
      
      byte[] byteArray0 = GFCommon.long2bytes((-278L));
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      
      byte[] byteArray1 = GFCommon.long2bytes((-278L));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1), int0);
      
      boolean boolean1 = GFCommon.isHasZero(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1);
      
      boolean boolean2 = GFCommon.isActiveThread((ThreadGroup) null, "wQ+}c:FHGgMZ");
      assertFalse(boolean2);
      
      int int1 = GFCommon.random((-1), (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = GFCommon.long2bin((-1L));
      assertNotNull(string1);
      assertEquals("1111111111111111111111111111111111111111111111111111111111111111", string1);
      
      Connection connection0 = GFCommon.getConn("!M?'<<(]\"0zM_$[9", "", (String) null, "org.ictclas4j.utility.GFCommon");
      assertNull(connection0);
      
      int int2 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-22)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = GFCommon.random(64);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      String string1 = GFCommon.getWebinfPath("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/", string1);
      
      Connection connection0 = GFCommon.getConn("usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/", "", (String) null, (String) null);
      assertNull(connection0);
      
      int int0 = GFCommon.random(0, 12);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      long long0 = GFCommon.bytes2long(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(70650219154374656L, long0);
      
      long long1 = GFCommon.bytes2long(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(long1 == long0);
      assertEquals(70650219154374656L, long1);
      
      byte[] byteArray1 = GFCommon.long2bytes((long) (byte) (-5));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-5)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        GFCommon.getClassPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      String string1 = GFCommon.getClassPath("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertNull(string1);
      
      String string2 = GFCommon.getWebinfPath("DVu");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      byte[] byteArray0 = new byte[0];
      int int0 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, int0);
      
      int int1 = GFCommon.getUnsigned((byte)78);
      assertFalse(int1 == int0);
      assertEquals(78, int1);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, 0, 78);
      assertNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray2 = GFCommon.int2bytes((int) (byte)78, false);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      String string3 = GFCommon.getSystemInfo();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string3);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(boolean0);
      
      byte[] byteArray3 = GFCommon.int2bytes((-1), false);
      assertNotNull(byteArray3);
      assertEquals(4, byteArray3.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      String string4 = GFCommon.getClassName("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("String", string4);
      
      String string5 = GFCommon.formatIP("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("0osnamarcven", string5);
      
      String string6 = GFCommon.getSystemInfo();
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string6);
      
      int int2 = GFCommon.random((-2037), (int) (byte)78);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      GFCommon gFCommon0 = new GFCommon();
      assertNotNull(gFCommon0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = GFCommon.getUnsigned((byte)0);
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        GFCommon.getClassPath(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = GFCommon.formatIP("");
      assertNull(string0);
      
      String string1 = GFCommon.formatIP("");
      assertNull(string1);
      
      byte[] byteArray0 = GFCommon.long2bytes((-2989L), false);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-12), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      String string2 = GFCommon.long2bin((-2989L));
      assertNotNull(string2);
      assertEquals("1111111111111111111111111111111111111111111111111111010001010011", string2);
      
      int int0 = GFCommon.bytes2int(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-12), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)114;
      byteArray1[3] = (byte)63;
      byteArray1[4] = (byte) (-102);
      byteArray1[5] = (byte)33;
      int int1 = GFCommon.bytes2int(byteArray1);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)114, (byte)63, (byte) (-102), (byte)33}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int1 == int0);
      assertEquals(1916770849, int1);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray1);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)114, (byte)63, (byte) (-102), (byte)33}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean0);
      
      String string3 = GFCommon.int2bin(48);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertEquals("110000", string3);
      
      int int2 = GFCommon.random((int) (byte)0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)43;
      byteArray2[1] = (byte) (-123);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)63;
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte)33;
      byteArray2[6] = (byte)43;
      byteArray2[7] = (byte)114;
      long long0 = GFCommon.bytes2long(byteArray2, false);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)43, (byte) (-123), (byte)0, (byte)63, (byte)1, (byte)33, (byte)43, (byte)114}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(12139713234240811L, long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = GFCommon.byte2bin((byte) (-34));
      assertNotNull(string0);
      assertEquals("11011110", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)0;
      long long0 = GFCommon.bytes2long(byteArray0, false);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-34), (byte) (-34), (byte)0}, byteArray0);
      assertEquals(14606046L, long0);
      
      int int0 = GFCommon.getUnsigned((byte) (-34));
      assertEquals(222, int0);
      
      int int1 = GFCommon.random((int) (byte) (-34));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long long1 = GFCommon.bytes2long(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-34), (byte) (-34), (byte)0}, byteArray0);
      assertFalse(long1 == long0);
      assertEquals(3739147776L, long1);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, (-798), (int) (byte)0);
      assertNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-34), (byte) (-34), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = GFCommon.int2bytes(0);
      assertNotNull(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = (byte)18;
      String string0 = GFCommon.byte2bin((byte)18);
      assertNotNull(string0);
      assertEquals("00010010", string0);
      
      int int0 = GFCommon.getUnsigned((byte)18);
      assertEquals(18, int0);
      
      byte[] byteArray1 = GFCommon.long2bytes((-271L));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-15)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int1 = GFCommon.bytes2int(byteArray1, true);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-15)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int1 == int0);
      assertEquals((-271), int1);
      
      String string1 = GFCommon.formatIP("00010010");
      assertNull(string1);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, (String) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        GFCommon.getClassPath((Object) "00010010");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = GFCommon.formatIP((String) null);
      assertNull(string0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = GFCommon.int2bytes(7, false);
      assertNotNull(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = GFCommon.long2bytes(0L, true);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = GFCommon.long2bin(0L);
      assertNotNull(string0);
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string0);
      
      int int0 = GFCommon.bytes2int(byteArray0, true);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      
      String string1 = GFCommon.formatIP("0000000000000000000000000000000000000000000000000000000000000000");
      assertNull(string1);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      int int1 = GFCommon.bytes2int(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = GFCommon.isActiveThread((ThreadGroup) null, "0000000000000000000000000000000000000000000000000000000000000000");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = GFCommon.int2bytes(0, true);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string2 = GFCommon.getWebinfPath("0000000000000000000000000000000000000000000000000000000000000000");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      byte[] byteArray2 = GFCommon.long2bytes((long) 0, false);
      assertNotNull(byteArray2);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      String string3 = GFCommon.int2bin(0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0", string3);
      
      byte[] byteArray3 = new byte[4];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte) (-76);
      byteArray3[3] = (byte)42;
      boolean boolean2 = GFCommon.isHasZero(byteArray3);
      assertEquals(4, byteArray3.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte) (-76), (byte)42}, byteArray3);
      assertFalse(boolean2 == boolean1);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertTrue(boolean2);
      
      long long0 = GFCommon.bytes2long(byteArray1, false);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0L, long0);
      
      int int2 = GFCommon.random(0, (int) (byte)0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = GFCommon.random((-399), (-399));
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      byte[] byteArray4 = GFCommon.int2bytes(0, false);
      assertNotNull(byteArray4);
      assertEquals(4, byteArray4.length);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray4);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)0;
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, (int) (byte)0, 1);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-93), (byte)100, (byte)31, (byte)32, (byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = GFCommon.formatIP((String) null);
      assertNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = GFCommon.getClassName(object0);
      assertNotNull(string1);
      assertEquals("Object", string1);
      
      String string2 = GFCommon.getSystemInfo();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = GFCommon.getWebinfPath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-23);
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23)}, byteArray0);
      assertFalse(boolean0);
      
      String string0 = null;
      String string1 = GFCommon.formatIP((String) null);
      assertNull(string1);
      
      boolean boolean1 = false;
      int int0 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23)}, byteArray0);
      assertEquals(0, int0);
      
      boolean boolean2 = GFCommon.isHasZero(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23)}, byteArray0);
      assertFalse(boolean2);
      
      String string2 = GFCommon.getWebinfPath((String) null);
      assertNull(string2);
      
      GFCommon gFCommon0 = new GFCommon();
      assertNotNull(gFCommon0);
      
      String string3 = GFCommon.long2bin((byte) (-23));
      assertNotNull(string3);
      assertEquals("1111111111111111111111111111111111111111111111111111111111101001", string3);
      
      String string4 = GFCommon.int2bin((-3576));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertEquals("11111111111111111111001000001000", string4);
      
      String string5 = GFCommon.getSystemInfo();
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string5);
      
      String string6 = GFCommon.getSystemInfo();
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string6);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        GFCommon.getClassPath(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, 4176, (int) (byte)43);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4218, int0);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = GFCommon.getUnsigned((byte)109);
      assertEquals(109, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)109;
      byteArray0[8] = (byte)109;
      int int1 = GFCommon.bytesCopy(byteArray0, byteArray0, 0, (int) (byte)109);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)109, (byte)109, (byte) (-52), (byte)109, (byte)109, (byte)109, (byte)109, (byte)109, (byte)109}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(108, int1);
      
      byte[] byteArray1 = GFCommon.int2bytes(2130);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)8, (byte)82}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)109;
      byteArray2[1] = (byte)47;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)109;
      byteArray2[5] = (byte)31;
      byteArray2[6] = (byte)125;
      byteArray2[7] = (byte)109;
      byteArray2[8] = (byte) (-52);
      int int2 = GFCommon.bytesCopy(byteArray2, byteArray2, (int) (byte)109, (int) (byte)47);
      assertEquals(9, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)109, (byte)47, (byte)0, (byte)0, (byte)109, (byte)31, (byte)125, (byte)109, (byte) (-52)}, byteArray2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(155, int2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = GFCommon.formatIP("S.FE#):H@h]8");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = GFCommon.random(0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[6];
      int int1 = GFCommon.bytesCopy(byteArray0, byteArray0, (int) (byte)0, 64);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(63, int1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup0).activeCount();
      doReturn(0).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, "fa.R6W");
      assertFalse(boolean0);
      
      int int0 = GFCommon.random((-278), (-278));
      assertEquals(0, int0);
      
      String string0 = GFCommon.int2bin(0);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup1).activeCount();
      doReturn(0).when(threadGroup1).enumerate(any(java.lang.Thread[].class));
      boolean boolean1 = GFCommon.isActiveThread(threadGroup1, ":x}");
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      int int1 = GFCommon.bytesCopy(byteArray0, byteArray0, 867, 867);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(1733, int1);
      
      int int2 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      String string1 = GFCommon.formatIP("fa.R6W");
      assertNull(string1);
      
      byte[] byteArray1 = GFCommon.long2bytes(2211L);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)8, (byte) (-93)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long long0 = GFCommon.bytes2long(byteArray1, false);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)8, (byte) (-93)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2251799813685248L, long0);
      
      String string2 = GFCommon.getClassName("fa.R6W");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("String", string2);
      
      int int3 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      String string3 = GFCommon.byte2bin((byte)104);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("01101000", string3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = GFCommon.getUnsigned((byte)125);
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = GFCommon.getClassPath("(xpO8");
      assertNull(string0);
      
      byte[] byteArray0 = GFCommon.long2bytes(3149L);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)12, (byte)77}, byteArray0);
      
      String string1 = GFCommon.getWebinfPath("(xpO8");
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte byte0 = (byte)1;
      int int0 = GFCommon.getUnsigned((byte)1);
      assertEquals(1, int0);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, (-578), (-578));
      assertNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)12, (byte)77}, byteArray0);
      
      int int1 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)12, (byte)77}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = GFCommon.formatIP("0");
      assertNull(string2);
      
      int int2 = GFCommon.getUnsigned((byte)1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        GFCommon.getClassPath((Object) "0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = GFCommon.getClassName(object1);
      assertNotNull(string0);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertEquals("Object", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      long long0 = GFCommon.bytes2long(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0L, long0);
      
      boolean boolean0 = GFCommon.isActiveThread((ThreadGroup) null, "G");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = 0L;
      String string0 = GFCommon.long2bin(0L);
      assertNotNull(string0);
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string0);
      
      int int0 = 31;
      String string1 = GFCommon.int2bin(31);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("11111", string1);
      
      String string2 = GFCommon.getSystemInfo();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string2);
      
      byte[] byteArray0 = null;
      boolean boolean0 = GFCommon.isHasZero((byte[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        GFCommon.getClassPath((Object) "11111");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = GFCommon.isHasZero((byte[]) null);
      assertTrue(boolean0);
      
      Random.setNextRandom(300);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = GFCommon.getClassPath("V;ovlIsWTGG");
      assertNull(string0);
      
      int int0 = GFCommon.random(392);
      assertEquals(0, int0);
      
      byte[] byteArray0 = GFCommon.long2bytes(1831L, true);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)7, (byte)39}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      String string0 = GFCommon.byte2bin((byte) (-5));
      assertNotNull(string0);
      assertEquals("11111011", string0);
      
      long long0 = GFCommon.bytes2long(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(70650219154374656L, long0);
      
      long long1 = GFCommon.bytes2long(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(long1 == long0);
      assertEquals(70650219154374656L, long1);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, (int) (byte) (-5), 24);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-5)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string1 = GFCommon.getClassName("11111011");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("String", string1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      long long0 = GFCommon.bytes2long(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, long0);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, 55, (-15701));
      assertNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      long long0 = GFCommon.bytes2long(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0L, long0);
      
      long long1 = GFCommon.bytes2long(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0L, long1);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, 33, 33);
      assertNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      String string1 = GFCommon.getClassPath("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertNull(string1);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup0).activeCount();
      doReturn(0).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, "os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)0;
      long long0 = GFCommon.bytes2long(byteArray0, false);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-7), (byte)86, (byte)0, (byte) (-16), (byte)98, (byte)82, (byte)0}, byteArray0);
      assertEquals(23189731027646876L, long0);
      
      byte[] byteArray1 = GFCommon.bytesCopy(byteArray0, (int) (byte) (-16), (-1761));
      assertNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-7), (byte)86, (byte)0, (byte) (-16), (byte)98, (byte)82, (byte)0}, byteArray0);
      
      boolean boolean1 = GFCommon.isHasZero(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-7), (byte)86, (byte)0, (byte) (-16), (byte)98, (byte)82, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        GFCommon.getClassPath((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = GFCommon.long2bytes((-179L));
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)77}, byteArray0);
      
      int int0 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)77}, byteArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = GFCommon.long2bytes((long) (-1), false);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = GFCommon.formatIP("");
      assertNull(string0);
      
      int int0 = GFCommon.bytes2int((byte[]) null, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = GFCommon.getClassPath("z#(h,");
      assertNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-37);
      int int0 = GFCommon.bytes2int(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)31, (byte) (-37)}, byteArray0);
      assertEquals(16785371, int0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup0).activeCount();
      doReturn(0).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, "z#(h,");
      assertFalse(boolean0);
      
      int int1 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)31, (byte) (-37)}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(2031617, int1);
      
      String string1 = GFCommon.getClassPath("d@7)xuU\"%nm`<M");
      assertNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        GFCommon.getClassPath(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, (int) (byte)5, (-2845));
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = GFCommon.random((-1975), (-1975));
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)101;
      byteArray0[0] = (byte)101;
      byte byte1 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      int int1 = GFCommon.bytesCopy(byteArray0, byteArray0, (int) (byte)101, (int) (byte) (-1));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-1)}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(101, int1);
      
      byte[] byteArray1 = GFCommon.int2bytes((-964));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-4), (byte)60}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = GFCommon.int2bytes((int) (byte)101);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)101}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int int2 = 0;
      GFCommon.random((int) byteArray0[0], int2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      int int0 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)1, (byte)0, (byte)1}, byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, (int) (byte) (-1), 1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, int0);
      
      String string0 = GFCommon.int2bin(3);
      assertNotNull(string0);
      assertEquals("11", string0);
      
      String string1 = GFCommon.getSystemInfo();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      int int0 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      
      String string0 = GFCommon.int2bin(19);
      assertNotNull(string0);
      assertEquals("10011", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)0;
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, (-553), (int) (byte)32);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)100, (byte)31, (byte)32, (byte)0}, byteArray0);
      assertEquals((-553), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, (-351), (-351));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-351), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = GFCommon.long2bytes(0L);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      int int0 = GFCommon.random((-257));
      assertEquals(0, int0);
      
      int int1 = GFCommon.getZeroIndex(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int1);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      int int2 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int2);
      
      String string1 = GFCommon.getSystemInfo();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string1);
      
      String string2 = GFCommon.getClassPath("java.vm.version");
      assertNull(string2);
      
      int int3 = GFCommon.bytes2int(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = GFCommon.bytesCopy(byteArray0, byteArray0, (-1708), (-1244));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals((-1708), int4);
      
      long long0 = GFCommon.bytes2long(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)63;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)64;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      long long1 = GFCommon.bytes2long(byteArray1, true);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte)0, (byte)0, (byte)64, (byte)0, (byte)0}, byteArray1);
      assertFalse(long1 == long0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(69269236744192L, long1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Connection connection0 = GFCommon.getConn("", "", "", "");
      assertNull(connection0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-28);
      long long0 = GFCommon.bytes2long(byteArray0, true);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-6), (byte) (-28)}, byteArray0);
      assertEquals(2164325092L, long0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup0).activeCount();
      doReturn(0).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, "");
      assertFalse(boolean0);
      
      int int0 = GFCommon.getUnsigned((byte) (-1));
      assertEquals(255, int0);
      
      int int1 = GFCommon.bytes2int(byteArray0, true);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-6), (byte) (-28)}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals((-2130642204), int1);
      
      int int2 = GFCommon.random(1106);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      long long1 = GFCommon.bytes2long(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-6), (byte) (-28)}, byteArray0);
      assertTrue(long1 == long0);
      assertEquals(2164325092L, long1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)16;
      int int0 = GFCommon.bytes2int(byteArray0, true);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)30, (byte)0, (byte)0, (byte)28, (byte)0, (byte)27, (byte)0, (byte)16}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      int int0 = GFCommon.bytes2int(byteArray0, true);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)7;
      byte byte0 = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)65;
      boolean boolean0 = true;
      int int0 = GFCommon.bytes2int(byteArray0, true);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)7, (byte) (-125), (byte) (-43), (byte)1, (byte)65, (byte)1, (byte)65}, byteArray0);
      assertEquals(21037377, int0);
      
      int int1 = GFCommon.bytes2int(byteArray0, true);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)7, (byte) (-125), (byte) (-43), (byte)1, (byte)65, (byte)1, (byte)65}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(21037377, int1);
      
      long long0 = GFCommon.bytes2long(byteArray0, true);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)7, (byte) (-125), (byte) (-43), (byte)1, (byte)65, (byte)1, (byte)65}, byteArray0);
      assertEquals(1082979186278203713L, long0);
      
      int int2 = 315;
      GFCommon.random(int2, (int) byte0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = GFCommon.getUnsigned((byte) (-38));
      assertEquals(218, int0);
      
      String string0 = GFCommon.getClassName((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = GFCommon.random(0, 0);
      assertEquals(0, int0);
      
      String string0 = GFCommon.byte2bin((byte) (-94));
      assertNotNull(string0);
      assertEquals("10100010", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = GFCommon.formatIP("or.ictcla4j.uiliy.GFCommon");
      assertNotNull(string0);
      assertEquals("0orictuilGFC", string0);
      
      String string1 = GFCommon.getSystemInfo();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string1);
      
      String string2 = GFCommon.getWebinfPath("0orictuilGFC");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      Connection connection0 = GFCommon.getConn((String) null, " _+4VH{W", " _+4VH{W", "or.ictcla4j.uiliy.GFCommon");
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-5);
      long long0 = GFCommon.bytes2long(byteArray0);
      assertEquals(11, byteArray0.length);
      assertEquals(0L, long0);
      
      byte[] byteArray1 = GFCommon.long2bytes(0L);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = GFCommon.getUnsigned((byte) (-5));
      assertEquals(251, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = GFCommon.long2bytes(0L);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = 20;
      int int1 = GFCommon.bytesCopy(byteArray0, byteArray0, 20, (int) (byte)0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(20, int1);
      
      GFCommon.random(int0, int1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = GFCommon.byte2bin((byte) (-34));
      assertNotNull(string0);
      assertEquals("11011110", string0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = GFCommon.bytes2int(byteArray0, false);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = GFCommon.isHasZero((byte[]) null);
      assertTrue(boolean0);
      
      String string1 = GFCommon.int2bin((-15438));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("11111111111111111100001110110010", string1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)0;
      long long0 = GFCommon.bytes2long(byteArray0, true);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte) (-9), (byte)20, (byte)2, (byte)0}, byteArray0);
      assertEquals(16044077817790976L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = GFCommon.long2bytes(151L, false);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = GFCommon.bytes2long(byteArray0, false);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(151L, long0);
      
      byte[] byteArray1 = GFCommon.long2bytes(4599L, false);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long long1 = GFCommon.bytes2long(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(long1 == long0);
      assertEquals((-7566047373982433280L), long1);
      
      int int0 = 48;
      int int1 = 0;
      GFCommon.random(int0, int1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = GFCommon.long2bytes(0L, true);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      GFCommon gFCommon0 = new GFCommon();
      assertNotNull(gFCommon0);
      
      String string0 = GFCommon.int2bin(8);
      assertNotNull(string0);
      assertEquals("1000", string0);
      
      Connection connection0 = GFCommon.getConn("\njava.home:", "igG$8]TDYM", "igG$8]TDYM", "\njava.home:");
      assertNull(connection0);
      
      String string1 = GFCommon.getWebinfPath("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = GFCommon.int2bin((-2626));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("11111111111111111111010110111110", string2);
      
      Connection connection1 = GFCommon.getConn("ZaiXTV;sZ-", "ZaiXTV;sZ-", "", ">pTljU<*");
      assertNull(connection1);
      
      int int0 = GFCommon.random((-1), 948);
      assertEquals(0, int0);
      
      boolean boolean0 = GFCommon.isActiveThread((ThreadGroup) null, " j,Q~&");
      assertFalse(boolean0);
      
      boolean boolean1 = GFCommon.isActiveThread((ThreadGroup) null, "os.name:");
      assertFalse(boolean1);
      
      String string3 = GFCommon.int2bin((-1311));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("11111111111111111111101011100001", string3);
      
      String string4 = GFCommon.getClassName("11111111111111111111101011100001");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("String", string4);
      
      Connection connection2 = GFCommon.getConn("os.name:", " j,Q~&", "os.name:", "2D$");
      assertNull(connection2);
      
      boolean boolean2 = GFCommon.isActiveThread((ThreadGroup) null, "String");
      assertFalse(boolean2);
      
      String string5 = GFCommon.getWebinfPath("|uH4$Fw?~45.2@<vC");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      int int1 = GFCommon.random(1483);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      long long0 = GFCommon.bytes2long(byteArray0, true);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      
      int int2 = GFCommon.bytes2int(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = GFCommon.long2bin(0L);
      assertNotNull(string0);
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string0);
      
      int int0 = GFCommon.random(0, (-3384));
      assertEquals(0, int0);
      
      String string1 = GFCommon.formatIP("");
      assertNull(string1);
      
      int int1 = GFCommon.random(0);
      assertEquals(0, int1);
      
      String string2 = GFCommon.getClassName((Object) null);
      assertNull(string2);
      
      String string3 = GFCommon.getSystemInfo();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string3);
      
      byte[] byteArray0 = GFCommon.long2bytes((long) (-3384), false);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-14), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      Connection connection0 = GFCommon.getConn((String) null, (String) null, "os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", (String) null);
      assertNull(connection0);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-14), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      
      String string4 = GFCommon.getSystemInfo();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string4);
      
      String string5 = GFCommon.formatIP("z~`t\"7b=qix)7");
      assertNull(string5);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte)63;
      byteArray1[2] = (byte) (-51);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)102;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-71);
      byteArray1[7] = (byte)127;
      byteArray1[8] = (byte)24;
      long long0 = GFCommon.bytes2long(byteArray1, false);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)29, (byte)63, (byte) (-51), (byte)0, (byte)102, (byte)0, (byte) (-71), (byte)127, (byte)24}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = GFCommon.formatIP("");
      assertNull(string0);
      
      int int0 = GFCommon.bytes2int(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = GFCommon.formatIP("w./Z-}.@i6wt0");
      assertNull(string0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup0).activeCount();
      doReturn(0).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean0 = GFCommon.isActiveThread(threadGroup0, "w./Z-}.@i6wt0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      long long0 = GFCommon.bytes2long(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-75), (byte)26, (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      String string0 = GFCommon.byte2bin((byte) (-78));
      assertNotNull(string0);
      assertEquals("10110010", string0);
      
      int int0 = GFCommon.bytes2int(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-75), (byte)26, (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertEquals(449576960, int0);
      
      String string1 = GFCommon.formatIP("");
      assertNull(string1);
      
      int int1 = GFCommon.bytes2int(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-75), (byte)26, (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(449576960, int1);
      
      byte[] byteArray1 = GFCommon.long2bytes((long) (byte)0, true);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(threadGroup0).activeCount();
      doReturn(0).when(threadGroup0).enumerate(any(java.lang.Thread[].class));
      boolean boolean1 = GFCommon.isActiveThread(threadGroup0, "\n\nuser.name:");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = GFCommon.long2bytes(753L);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)2, (byte) (-15)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      int int0 = GFCommon.bytesCopy(byteArray0, byteArray0, (int) (byte)64, 1764);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1827, int0);
      
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = GFCommon.long2bytes(0L);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = GFCommon.getSystemInfo();
      assertNotNull(string0);
      assertEquals("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", string0);
      
      int int0 = GFCommon.random((-257));
      assertEquals(0, int0);
      
      String string1 = GFCommon.getWebinfPath("os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/", string1);
      
      Connection connection0 = GFCommon.getConn("W!Toa><(k", "os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", "y", "os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = GFCommon.random(27);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = GFCommon.byte2bin((byte)6);
      assertEquals("00000110", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GFCommon.getClassPath("file.separator");
      GFCommon.isActiveThread((ThreadGroup) null, "swQ+}c:FHGgMZ");
      byte[] byteArray0 = GFCommon.long2bytes((-278L));
      GFCommon.long2bytes((-278L), false);
      GFCommon.getZeroIndex(byteArray0);
      GFCommon.isHasZero(byteArray0);
      GFCommon.isActiveThread((ThreadGroup) null, "swQ+}c:FHGgMZ");
      GFCommon.random((-1), (-1));
      GFCommon.getClassName((Object) null);
      GFCommon.formatIP((String) null);
      GFCommon.getSystemInfo();
      GFCommon.random((-1), (-1));
      GFCommon gFCommon0 = new GFCommon();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = GFCommon.formatIP("cao");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = GFCommon.long2bin(548L);
      assertEquals("0000000000000000000000000000000000000000000000000000001000100100", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = GFCommon.formatIP("org.ictclas4j.utility.GFCommon");
      assertNotNull(string0);
      assertEquals("orgictutiGFC", string0);
      
      int int0 = GFCommon.bytes2int((byte[]) null, true);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)4;
      boolean boolean0 = GFCommon.isHasZero(byteArray0);
      assertTrue(boolean0);
      
      String string1 = GFCommon.int2bin(0);
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = GFCommon.long2bytes(0L, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = GFCommon.getWebinfPath("S.FE#):H@h]8");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GFCommon.getSystemInfo();
      Connection connection0 = GFCommon.getConn("_6a]=7syK&y", "os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", "os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user", "os.name:Linux\nos.arch:amd64\n\njava.vendor:Ubuntu\njava.home:/usr/lib/jvm/java-11-openjdk-amd64\njava.version:11.0.16\njava.vm.version:11.0.16+8-post-Ubuntu-0ubuntu120.04\n\nuser.name:user\nuser.dir:/home/user");
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = GFCommon.int2bytes(3652);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)14, (byte)68}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = GFCommon.int2bin(1480);
      assertEquals("10111001000", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      GFCommon.long2bytes(32L, true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        GFCommon.getClassPath(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.utility.GFCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      GFCommon.int2bin(184);
      String string0 = GFCommon.getClassPath("10111000");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      GFCommon gFCommon0 = new GFCommon();
      GFCommon.getWebinfPath("39@MVE&F");
      GFCommon.long2bin((-878L));
      GFCommon.getWebinfPath("IEWfir");
      GFCommon.byte2bin((byte)0);
      GFCommon.long2bin((byte)0);
      GFCommon.byte2bin((byte) (-125));
      GFCommon.getClassPath("os.arch");
      GFCommon.byte2bin((byte) (-125));
      GFCommon.getClassPath((Object) gFCommon0);
      GFCommon.getConn("", "", "", ";q9pP");
      GFCommon.long2bytes((long) (byte) (-125), false);
      GFCommon.byte2bin((byte) (-125));
      GFCommon.formatIP("10000011");
      GFCommon.random((int) (byte) (-125));
      GFCommon.int2bin((byte) (-125));
      byte[] byteArray0 = GFCommon.int2bytes(0);
      GFCommon.byte2bin((byte) (-125));
      GFCommon.int2bytes(0);
      GFCommon.isHasZero(byteArray0);
      String string0 = GFCommon.formatIP("39@MVE&F");
      assertNull(string0);
  }
}
