/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 02:30:41 GMT 2022
 */

package org.ictclas4j.utility;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.ictclas4j.bean.MidResult;
import org.ictclas4j.bean.POS;
import org.ictclas4j.bean.SegNode;
import org.ictclas4j.bean.SegResult;
import org.ictclas4j.utility.DebugUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DebugUtil_ESTest extends DebugUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("output\\postag.html");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      DebugUtil.outputPostag(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SegResult segResult0 = new SegResult("\n");
      ArrayList<MidResult> arrayList0 = new ArrayList<MidResult>();
      arrayList0.add((MidResult) null);
      segResult0.setMrList(arrayList0);
      // Undeclared exception!
      try { 
        DebugUtil.output2html(segResult0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.bean.SegResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = DebugUtil.writeTxtFile("Cp,-2x:<O?", "Cp,-2x:<O?", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        DebugUtil.writeTxtFile("", "", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.utility.DebugUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SegResult segResult0 = new SegResult("@ib(;");
      DebugUtil.output2html(segResult0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("output\\sr.html");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      DebugUtil.output2html(segResult0);
      assertEquals("@ib(;", segResult0.getRawContent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = DebugUtil.writeTxtFile("</td>", "</td>", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = DebugUtil.writeTxtFile("/W`", "/W`", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = DebugUtil.writeTxtFile("Vcc'A?c<W", (String) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = DebugUtil.writeTxtFile((String) null, "", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SegResult segResult0 = new SegResult("");
      DebugUtil.output2gui(segResult0);
      assertEquals(0L, segResult0.getSpendTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DebugUtil.output2gui((SegResult) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      POS pOS0 = new POS();
      SegNode segNode0 = new SegNode();
      segNode0.addPos(pOS0);
      pOS0.setBest(true);
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      arrayList0.add(segNode0);
      DebugUtil.outputPostag(arrayList0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      POS pOS0 = new POS();
      SegNode segNode0 = new SegNode();
      segNode0.addPos(pOS0);
      segNode0.addPos(pOS0);
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      arrayList0.add(segNode0);
      DebugUtil.outputPostag(arrayList0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<SegNode> arrayList0 = new ArrayList<SegNode>();
      SegNode segNode0 = new SegNode((-1), (-1), (-1), 720.92, "");
      arrayList0.add(segNode0);
      // Undeclared exception!
      try { 
        DebugUtil.outputPostag(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ictclas4j.utility.DebugUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DebugUtil.outputPostag((ArrayList<SegNode>) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DebugUtil.output2html((SegResult) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DebugUtil debugUtil0 = new DebugUtil();
  }
}
