/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 17:21:45 GMT 2022
 */

package io.churchkey.ssh;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.ssh.KeyInput;
import java.io.EOFException;
import java.io.IOException;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KeyInput_ESTest extends KeyInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)1;
      KeyInput keyInput0 = new KeyInput(byteArray0);
      String string0 = keyInput0.readString();
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)4;
      KeyInput keyInput0 = new KeyInput(byteArray0);
      byte[] byteArray1 = keyInput0.readBytes();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)1;
      KeyInput keyInput0 = new KeyInput(byteArray0);
      keyInput0.read();
      BigInteger bigInteger0 = keyInput0.readBigInteger();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)127;
      KeyInput keyInput0 = new KeyInput(byteArray0);
      keyInput0.read();
      BigInteger bigInteger0 = keyInput0.readBigInteger();
      assertEquals((short)127, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-108);
      KeyInput keyInput0 = new KeyInput(byteArray0);
      keyInput0.read();
      BigInteger bigInteger0 = keyInput0.readBigInteger();
      assertEquals((byte) (-108), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      KeyInput keyInput0 = new KeyInput(byteArray0);
      // Undeclared exception!
      try { 
        keyInput0.readString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1795162112
         //
         verifyException("io.churchkey.ssh.KeyInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      KeyInput keyInput0 = new KeyInput(byteArray0);
      try { 
        keyInput0.readString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // data truncated.  Expected 0 bytes, read 
         //  bytes
         //
         verifyException("io.churchkey.ssh.KeyInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      KeyInput keyInput0 = new KeyInput(byteArray0);
      try { 
        keyInput0.readString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      KeyInput keyInput0 = new KeyInput(byteArray0);
      // Undeclared exception!
      try { 
        keyInput0.readBytes();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -16777216
         //
         verifyException("io.churchkey.ssh.KeyInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      KeyInput keyInput0 = new KeyInput(byteArray0);
      try { 
        keyInput0.readBytes();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      KeyInput keyInput0 = new KeyInput(byteArray0);
      // Undeclared exception!
      try { 
        keyInput0.readBigInteger();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -16777216
         //
         verifyException("io.churchkey.ssh.KeyInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      KeyInput keyInput0 = new KeyInput(byteArray0);
      try { 
        keyInput0.readBigInteger();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      KeyInput keyInput0 = new KeyInput(byteArray0);
      // Undeclared exception!
      try { 
        keyInput0.readAuthMagic();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/PrintString
         //
         verifyException("io.churchkey.ssh.KeyInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KeyInput keyInput0 = null;
      try {
        keyInput0 = new KeyInput((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      KeyInput keyInput0 = new KeyInput(byteArray0);
      byte[] byteArray1 = keyInput0.readBytes();
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      KeyInput keyInput0 = new KeyInput(byteArray0);
      try { 
        keyInput0.readBytes();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // data truncated.  Expected 0 bytes, read 
         //  bytes
         //
         verifyException("io.churchkey.ssh.KeyInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      KeyInput keyInput0 = new KeyInput(byteArray0);
      try { 
        keyInput0.readBigInteger();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // data truncated.  Expected 0 bytes, read 
         //  bytes
         //
         verifyException("io.churchkey.ssh.KeyInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      KeyInput keyInput0 = new KeyInput(byteArray0);
      String string0 = keyInput0.readString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      KeyInput keyInput0 = new KeyInput(byteArray0);
      // Undeclared exception!
      try { 
        keyInput0.readBigInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }
}
