/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:51:37 GMT 2022
 */

package io.churchkey.ssh;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.Key;
import io.churchkey.ssh.OpenSSHPrivateKey;
import java.security.PublicKey;
import java.util.Map;
import javax.crypto.spec.SecretKeySpec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenSSHPrivateKey_ESTest extends OpenSSHPrivateKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.assertInt("ciphername", 0, (-1819));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected ciphername of '0'. Found '-1819'
         //
         verifyException("io.churchkey.ssh.OpenSSHPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.assertString("mg4b%ktOq(<?{z-", "e", "=4\u0001=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected mg4b%ktOq(<?{z- of 'e'. Found '=4\u0001='
         //
         verifyException("io.churchkey.ssh.OpenSSHPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenSSHPrivateKey.assertString("", "Tvt&?", "Tvt&?");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "*|fG{mJob[?");
      Key.Type key_Type0 = Key.Type.SECRET;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.RSA;
      Key.Format key_Format0 = Key.Format.OPENSSH;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.encode(key0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SECRET keys do not have public keys
         //
         verifyException("io.churchkey.Key", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.decode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)13;
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.decode(byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/PrintString
         //
         verifyException("io.churchkey.ssh.KeyInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.decode(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)10;
      byteArray0[6] = (byte)10;
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.decode(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 0
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.assertString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.assertInt("", 86, 1404);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected  of '86'. Found '1404'
         //
         verifyException("io.churchkey.ssh.OpenSSHPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenSSHPrivateKey.assertInt("secp128r1", (-2311), (-2311));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "4230017757A767FAE42398569B746325D45313AF0766266479B75654E65F");
      Key.Type key_Type0 = Key.Type.PRIVATE;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.DSA;
      Key.Format key_Format0 = Key.Format.JWK;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      Map<String, String> map0 = key0.getAttributes();
      Key.Algorithm key_Algorithm1 = Key.Algorithm.EC;
      PublicKey publicKey0 = mock(PublicKey.class, new ViolatedAssumptionAnswer());
      Key key1 = new Key(secretKeySpec0, publicKey0, key_Type0, key_Algorithm1, key_Format0, map0);
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.encode(key1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class javax.crypto.spec.SecretKeySpec cannot be cast to class java.security.interfaces.ECPrivateKey (javax.crypto.spec.SecretKeySpec and java.security.interfaces.ECPrivateKey are in module java.base of loader 'bootstrap')
         //
         verifyException("io.churchkey.ssh.OpenSSHPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "4230017757A767FAE42398569B746325D45313AF0766266479B75654E65F");
      Key.Type key_Type0 = Key.Type.PRIVATE;
      Key.Format key_Format0 = Key.Format.JWK;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.OCT;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.encode(key0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unsupported key type: OCT
         //
         verifyException("io.churchkey.ssh.OpenSSHPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "4230017757A767FAE42398569B746325D45313AF0766266479B75654E65F");
      Key.Algorithm key_Algorithm0 = Key.Algorithm.RSA;
      Key.Format key_Format0 = Key.Format.JWK;
      Key.Type key_Type0 = Key.Type.PRIVATE;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.encode(key0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class javax.crypto.spec.SecretKeySpec cannot be cast to class java.security.interfaces.RSAPrivateCrtKey (javax.crypto.spec.SecretKeySpec and java.security.interfaces.RSAPrivateCrtKey are in module java.base of loader 'bootstrap')
         //
         verifyException("io.churchkey.ssh.OpenSSHPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "4230017757A767FAE42398569B746325D45313AF0766266479B75654E65F");
      Key.Type key_Type0 = Key.Type.PRIVATE;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.DSA;
      Key.Format key_Format0 = Key.Format.JWK;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        OpenSSHPrivateKey.encode(key0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.ssh.OpenSSHPrivateKey", e);
      }
  }
}
