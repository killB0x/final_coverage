/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:56:06 GMT 2022
 */

package io.churchkey.ssh;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.Key;
import io.churchkey.ssh.KeyInput;
import io.churchkey.ssh.OpenSSHPublicKey;
import java.io.EOFException;
import java.math.BigInteger;
import java.security.interfaces.DSAParams;
import java.security.interfaces.DSAPublicKey;
import java.security.interfaces.ECPublicKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import java.util.LinkedList;
import java.util.List;
import javax.crypto.spec.SecretKeySpec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenSSHPublicKey_ESTest extends OpenSSHPublicKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      DSAParams dSAParams0 = mock(DSAParams.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(dSAParams0).getP();
      DSAParams dSAParams1 = mock(DSAParams.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(dSAParams1).getQ();
      DSAParams dSAParams2 = mock(DSAParams.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(dSAParams2).getG();
      DSAPublicKey dSAPublicKey0 = mock(DSAPublicKey.class, new ViolatedAssumptionAnswer());
      doReturn(dSAParams0, dSAParams1, dSAParams2).when(dSAPublicKey0).getParams();
      doReturn(bigInteger0).when(dSAPublicKey0).getY();
      byte[] byteArray0 = OpenSSHPublicKey.DsaPublic.write(dSAPublicKey0);
      assertEquals(31, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        OpenSSHPublicKey.EcPublic.curveName((ECParameterSpec) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/Hex
         //
         verifyException("io.churchkey.ec.Curve", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      ECPoint eCPoint0 = new ECPoint(bigInteger0, bigInteger0);
      ECPublicKey eCPublicKey0 = mock(ECPublicKey.class, new ViolatedAssumptionAnswer());
      doReturn(eCPoint0).when(eCPublicKey0).getW();
      byte[] byteArray1 = OpenSSHPublicKey.EcPublic.write(eCPublicKey0, "14j7lU7L?nuR7,");
      KeyInput keyInput0 = new KeyInput(byteArray1);
      try { 
        OpenSSHPublicKey.DsaPublic.read(keyInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      DSAParams dSAParams0 = mock(DSAParams.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(dSAParams0).getP();
      DSAParams dSAParams1 = mock(DSAParams.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(dSAParams1).getQ();
      DSAParams dSAParams2 = mock(DSAParams.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(dSAParams2).getG();
      DSAPublicKey dSAPublicKey0 = mock(DSAPublicKey.class, new ViolatedAssumptionAnswer());
      doReturn(dSAParams0, dSAParams1, dSAParams2).when(dSAPublicKey0).getParams();
      doReturn(bigInteger0).when(dSAPublicKey0).getY();
      OpenSSHPublicKey openSSHPublicKey0 = new OpenSSHPublicKey();
      Key.Type key_Type0 = Key.Type.PRIVATE;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.RSA;
      LinkedList<Key> linkedList0 = new LinkedList<Key>();
      Key.Format key_Format0 = Key.Format.OPENSSH;
      Key key0 = new Key(dSAPublicKey0, key_Type0, key_Algorithm0, key_Format0);
      linkedList0.addLast(key0);
      byte[] byteArray0 = openSSHPublicKey0.encodeSet(linkedList0);
      assertEquals(53, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenSSHPublicKey openSSHPublicKey0 = new OpenSSHPublicKey();
      // Undeclared exception!
      try { 
        openSSHPublicKey0.encodeSet((List<Key>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.ssh.OpenSSHPublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenSSHPublicKey openSSHPublicKey0 = new OpenSSHPublicKey();
      // Undeclared exception!
      try { 
        openSSHPublicKey0.encode((Key) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.ssh.OpenSSHPublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenSSHPublicKey openSSHPublicKey0 = new OpenSSHPublicKey();
      // Undeclared exception!
      try { 
        openSSHPublicKey0.decodeSet((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.util.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenSSHPublicKey openSSHPublicKey0 = new OpenSSHPublicKey();
      // Undeclared exception!
      try { 
        openSSHPublicKey0.decode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.util.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Key.Algorithm key_Algorithm0 = Key.Algorithm.RSA;
      Key.Format key_Format0 = Key.Format.OPENSSH;
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "4");
      Key.Type key_Type0 = Key.Type.PRIVATE;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      OpenSSHPublicKey openSSHPublicKey0 = new OpenSSHPublicKey();
      // Undeclared exception!
      try { 
        openSSHPublicKey0.encode(key0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PublicKey type unsupported: javax.crypto.spec.SecretKeySpec
         //
         verifyException("io.churchkey.ssh.OpenSSHPublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenSSHPublicKey openSSHPublicKey0 = new OpenSSHPublicKey();
      LinkedList<Key> linkedList0 = new LinkedList<Key>();
      byte[] byteArray0 = openSSHPublicKey0.encodeSet(linkedList0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "yWls#W*{?yx&g");
      LinkedList<Key> linkedList0 = new LinkedList<Key>();
      Key.Type key_Type0 = Key.Type.SECRET;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.RSA;
      Key.Format key_Format0 = Key.Format.PEM;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      linkedList0.addLast(key0);
      OpenSSHPublicKey openSSHPublicKey0 = new OpenSSHPublicKey();
      // Undeclared exception!
      try { 
        openSSHPublicKey0.encodeSet(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PublicKey type unsupported: javax.crypto.spec.SecretKeySpec
         //
         verifyException("io.churchkey.ssh.OpenSSHPublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OpenSSHPublicKey openSSHPublicKey0 = new OpenSSHPublicKey();
      byte[] byteArray0 = new byte[0];
      Key key0 = openSSHPublicKey0.decode(byteArray0);
      assertNull(key0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OpenSSHPublicKey.DsaPublic openSSHPublicKey_DsaPublic0 = new OpenSSHPublicKey.DsaPublic();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        OpenSSHPublicKey.RsaPublic.read((KeyInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.ssh.OpenSSHPublicKey$RsaPublic", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OpenSSHPublicKey.RsaPublic openSSHPublicKey_RsaPublic0 = new OpenSSHPublicKey.RsaPublic();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      RSAPublicKey rSAPublicKey0 = mock(RSAPublicKey.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(rSAPublicKey0).getModulus();
      doReturn(bigInteger0).when(rSAPublicKey0).getPublicExponent();
      byte[] byteArray0 = OpenSSHPublicKey.RsaPublic.write(rSAPublicKey0);
      KeyInput keyInput0 = new KeyInput(byteArray0);
      // Undeclared exception!
      try { 
        OpenSSHPublicKey.EcPublic.read(keyInput0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ssh-rsa
         //
         verifyException("io.churchkey.ec.Curve", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OpenSSHPublicKey.EcPublic openSSHPublicKey_EcPublic0 = new OpenSSHPublicKey.EcPublic();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OpenSSHPublicKey openSSHPublicKey0 = new OpenSSHPublicKey();
      byte[] byteArray0 = new byte[0];
      List<Key> list0 = openSSHPublicKey0.decodeSet(byteArray0);
      assertNull(list0);
  }
}
