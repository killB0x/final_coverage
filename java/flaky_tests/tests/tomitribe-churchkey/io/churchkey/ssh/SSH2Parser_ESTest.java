/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 17:15:22 GMT 2022
 */

package io.churchkey.ssh;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.Key;
import io.churchkey.ssh.SSH2Parser;
import javax.crypto.spec.SecretKeySpec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SSH2Parser_ESTest extends SSH2Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SSH2Parser sSH2Parser0 = new SSH2Parser();
      // Undeclared exception!
      try { 
        sSH2Parser0.encode((Key) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.ssh.SSH2Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SSH2Parser sSH2Parser0 = new SSH2Parser();
      // Undeclared exception!
      try { 
        sSH2Parser0.decode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.util.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SSH2Parser sSH2Parser0 = new SSH2Parser();
      byte[] byteArray0 = new byte[5];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "%");
      Key.Type key_Type0 = Key.Type.PUBLIC;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.OCT;
      Key.Format key_Format0 = Key.Format.PEM;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        sSH2Parser0.encode(key0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unsupported key algorithm: OCT
         //
         verifyException("io.churchkey.ssh.SSH2Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SSH2Parser sSH2Parser0 = new SSH2Parser();
      byte[] byteArray0 = new byte[5];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "%");
      Key.Type key_Type0 = Key.Type.PUBLIC;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.DSA;
      Key.Format key_Format0 = Key.Format.SSH2;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        sSH2Parser0.encode(key0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class javax.crypto.spec.SecretKeySpec cannot be cast to class java.security.interfaces.DSAPublicKey (javax.crypto.spec.SecretKeySpec and java.security.interfaces.DSAPublicKey are in module java.base of loader 'bootstrap')
         //
         verifyException("io.churchkey.ssh.SSH2Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SSH2Parser sSH2Parser0 = new SSH2Parser();
      byte[] byteArray0 = new byte[1];
      Key.Format key_Format0 = Key.Format.PEM;
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "%O4");
      Key.Type key_Type0 = Key.Type.PUBLIC;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.RSA;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        sSH2Parser0.encode(key0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class javax.crypto.spec.SecretKeySpec cannot be cast to class java.security.interfaces.RSAPublicKey (javax.crypto.spec.SecretKeySpec and java.security.interfaces.RSAPublicKey are in module java.base of loader 'bootstrap')
         //
         verifyException("io.churchkey.ssh.SSH2Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SSH2Parser sSH2Parser0 = new SSH2Parser();
      byte[] byteArray0 = new byte[3];
      Key.Algorithm key_Algorithm0 = Key.Algorithm.OCT;
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      Key.Type key_Type0 = Key.Type.SECRET;
      Key.Format key_Format0 = Key.Format.SSH2;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        sSH2Parser0.encode(key0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SSH2 encoding only supported for public keys
         //
         verifyException("io.churchkey.ssh.SSH2Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SSH2Parser sSH2Parser0 = new SSH2Parser();
      byte[] byteArray0 = new byte[5];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "%");
      Key.Type key_Type0 = Key.Type.PUBLIC;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.EC;
      Key.Format key_Format0 = Key.Format.PEM;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        sSH2Parser0.encode(key0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class javax.crypto.spec.SecretKeySpec cannot be cast to class java.security.interfaces.ECPublicKey (javax.crypto.spec.SecretKeySpec and java.security.interfaces.ECPublicKey are in module java.base of loader 'bootstrap')
         //
         verifyException("io.churchkey.ssh.SSH2Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SSH2Parser sSH2Parser0 = new SSH2Parser();
      byte[] byteArray0 = new byte[1];
      Key key0 = sSH2Parser0.decode(byteArray0);
      assertNull(key0);
  }
}
