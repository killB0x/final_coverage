/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 17:16:34 GMT 2022
 */

package io.churchkey.ec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.asn1.Oid;
import io.churchkey.ec.Curve;
import java.security.spec.ECParameterSpec;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Curve_ESTest extends Curve_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Curve[] curveArray0 = Curve.values();
      assertEquals(146, curveArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Curve curve0 = Curve.valueOf("k163");
      assertEquals(Curve.k163, curve0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Curve curve0 = Curve.valueOf("sect163k1");
      assertEquals(Curve.sect163k1, curve0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Curve curve0 = Curve.resolve("nistk283");
      assertTrue(curve0.isAlias());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Curve curve0 = Curve.resolve("sect163r2");
      assertFalse(curve0.isAlias());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Curve.resolve((Oid) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Curve curve0 = Curve.brainpoolp384r1;
      ECParameterSpec eCParameterSpec0 = curve0.getParameterSpec();
      boolean boolean0 = curve0.isEqual(eCParameterSpec0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Curve curve0 = Curve.nistk233;
      Curve curve1 = Curve.ansip160k1;
      ECParameterSpec eCParameterSpec0 = curve1.getParameterSpec();
      boolean boolean0 = curve0.isEqual(eCParameterSpec0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Curve curve0 = Curve.idgostr34102001cryptoproxchbparamset;
      boolean boolean0 = curve0.isAlias();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Curve curve0 = Curve.oakleyec2n4;
      Oid oid0 = curve0.getOid();
      assertNull(oid0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = Curve.getEnumName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Curve.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.ec.Curve", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Curve curve0 = Curve.brainpoolp160r1;
      // Undeclared exception!
      try { 
        curve0.isEqual((ECParameterSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.ec.ECParameterSpecs", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Curve.getEnumName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.ec.Curve", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Curve curve0 = Curve.ansip160r1;
      // Undeclared exception!
      try { 
        curve0.getParameterSpec();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/Hex
         //
         verifyException("io.churchkey.ec.Curve", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Curve.resolve("ansiX9P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ansiX9P
         //
         verifyException("io.churchkey.ec.Curve", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Curve.resolve("WeyR=x67,]h*+z^|V*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WeyR=x67,]h*+z^|V*
         //
         verifyException("io.churchkey.ec.Curve", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Curve curve0 = Curve.wapwsgidmecidwtls12;
      String string0 = curve0.getName();
      assertEquals("wap-wsg-idm-ecid-wtls12", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Curve curve0 = Curve.secp112r2;
      String string0 = curve0.getName();
      assertEquals("secp112r2", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Curve curve0 = Curve.nistk283;
      boolean boolean0 = curve0.isAlias();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Curve curve0 = Curve.wapwsgidmecidwtls12;
      List<Curve> list0 = curve0.getAliases();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Curve curve0 = Curve.nistk283;
      ECParameterSpec eCParameterSpec0 = curve0.getParameterSpec();
      Curve curve1 = Curve.p521;
      Oid oid0 = curve1.getOid();
      Curve curve2 = Curve.resolve(oid0);
      // Undeclared exception!
      try { 
        curve2.isEqual(eCParameterSpec0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/Hex
         //
         verifyException("io.churchkey.ec.Curve", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Curve curve0 = Curve.wapwsgidmecidwtls12;
      Oid oid0 = curve0.getOid();
      Curve curve1 = Curve.resolve(oid0);
      assertSame(curve1, curve0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Curve curve0 = Curve.wapwsgidmecidwtls4;
      // Undeclared exception!
      try { 
        curve0.isEqual((ECParameterSpec) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/Hex
         //
         verifyException("io.churchkey.ec.Curve", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = Curve.getEnumName("WeyR=x67,]h*+z^|V*");
      assertEquals("weyr=x67,]h*+z^|v*", string0);
  }
}
