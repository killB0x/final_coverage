/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 17:17:42 GMT 2022
 */

package io.churchkey.ec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.ec.EcPoints;
import java.math.BigInteger;
import java.security.spec.ECPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EcPoints_ESTest extends EcPoints_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      ECPoint eCPoint0 = new ECPoint(bigInteger0, bigInteger1);
      byte[] byteArray1 = EcPoints.toBytes(eCPoint0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)1, (byte) (-99), (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      // Undeclared exception!
      try { 
        EcPoints.fromBytes(byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/Hex
         //
         verifyException("io.churchkey.ec.EcPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ECPoint eCPoint0 = ECPoint.POINT_INFINITY;
      // Undeclared exception!
      try { 
        EcPoints.toBytes(eCPoint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.ec.EcPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        EcPoints.fromBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.ec.EcPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.xor(bigInteger0);
      ECPoint eCPoint0 = new ECPoint(bigInteger1, bigInteger0);
      byte[] byteArray0 = EcPoints.toBytes(eCPoint0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)10}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      // Undeclared exception!
      try { 
        EcPoints.fromBytes(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid EC point data: expected 6 bytes, found 7 bytes
         //
         verifyException("io.churchkey.ec.EcPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        EcPoints.fromBytes(byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/Hex
         //
         verifyException("io.churchkey.ec.EcPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        EcPoints.fromBytes(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Key data is truncated
         //
         verifyException("io.churchkey.ec.EcPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      ECPoint eCPoint0 = new ECPoint(bigInteger0, bigInteger0);
      byte[] byteArray0 = EcPoints.toBytes(eCPoint0);
      ECPoint eCPoint1 = EcPoints.fromBytes(byteArray0);
      assertTrue(eCPoint1.equals((Object)eCPoint0));
      assertArrayEquals(new byte[] {(byte)4, (byte)10, (byte)10}, byteArray0);
  }
}
