/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 17:07:33 GMT 2022
 */

package io.churchkey.asn1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.asn1.Asn1Object;
import io.churchkey.asn1.Asn1Type;
import io.churchkey.asn1.DerParser;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import java.math.BigInteger;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DerParser_ESTest extends DerParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      DerParser derParser0 = new DerParser(byteArray0);
      try { 
        derParser0.readBigInteger();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: data type is not an INTEGER: 0xad
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)127;
      DerParser derParser0 = new DerParser(byteArray0);
      try { 
        derParser0.readSequence();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: stream too short, missing value: read 4 out of required 32512
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      DerParser derParser0 = new DerParser(byteArray0);
      DerParser derParser1 = derParser0.readSequence();
      assertEquals(65534, DerParser.MAX_DER_VALUE_LENGTH);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)2;
      DerParser derParser0 = new DerParser(byteArray0);
      Asn1Object asn1Object0 = derParser0.readObject();
      assertEquals(Asn1Type.ANY, asn1Object0.getType());
      assertEquals(2, asn1Object0.getLength());
      assertNotNull(asn1Object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      DerParser derParser0 = new DerParser(byteArray0);
      BigInteger bigInteger0 = derParser0.readBigInteger();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte)86;
      DerParser derParser0 = new DerParser(byteArray0);
      BigInteger bigInteger0 = derParser0.readBigInteger();
      assertEquals((byte)86, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      DerParser derParser0 = new DerParser(byteArray0);
      // Undeclared exception!
      try { 
        derParser0.readSequence();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 31 out of bounds for length 31
         //
         verifyException("io.churchkey.asn1.Asn1Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DerParser derParser0 = new DerParser(pipedInputStream0);
      try { 
        derParser0.readSequence();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DerParser derParser0 = new DerParser((InputStream) null);
      // Undeclared exception!
      try { 
        derParser0.readObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DerParser derParser0 = new DerParser(byteArray0, (-797), 65534);
      // Undeclared exception!
      try { 
        derParser0.readObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -797 out of bounds for length 7
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DerParser derParser0 = new DerParser(pipedInputStream0);
      try { 
        derParser0.readObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DerParser derParser0 = new DerParser((InputStream) null);
      // Undeclared exception!
      try { 
        derParser0.readLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DerParser derParser0 = new DerParser(byteArray0, (byte) (-100), 1431);
      // Undeclared exception!
      try { 
        derParser0.readLength();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -100 out of bounds for length 1
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DerParser derParser0 = new DerParser(pipedInputStream0);
      try { 
        derParser0.readLength();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DerParser derParser0 = new DerParser((InputStream) null);
      // Undeclared exception!
      try { 
        derParser0.readBigInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DerParser derParser0 = new DerParser(byteArray0, (-1464), 162);
      // Undeclared exception!
      try { 
        derParser0.readBigInteger();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DerParser derParser0 = new DerParser(pipedInputStream0);
      try { 
        derParser0.readBigInteger();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DerParser derParser0 = null;
      try {
        derParser0 = new DerParser((byte[]) null, 65534, 65534);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DerParser derParser0 = null;
      try {
        derParser0 = new DerParser((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DerParser derParser0 = new DerParser(byteArray0);
      Asn1Object asn1Object0 = derParser0.readObject();
      assertNotNull(asn1Object0);
      assertEquals(Asn1Type.ANY, asn1Object0.getType());
      assertEquals(0, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DerParser derParser0 = new DerParser(sequenceInputStream0);
      Asn1Object asn1Object0 = derParser0.readObject();
      assertNull(asn1Object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      DerParser derParser0 = new DerParser(byteArray0);
      try { 
        derParser0.readLength();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: length data too short: expected=0, actual=-1
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      DerParser derParser0 = new DerParser(byteArray0);
      try { 
        derParser0.readLength();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: length field too big: 176
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      DerParser derParser0 = new DerParser(byteArray0);
      try { 
        derParser0.readLength();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: length field too big: 255
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DerParser derParser0 = new DerParser(byteArray0);
      int int0 = derParser0.readLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DerParser derParser0 = new DerParser(byteArray0);
      try { 
        derParser0.readLength();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: length missing
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      DerParser derParser0 = new DerParser(byteArray0);
      try { 
        derParser0.readBigInteger();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: stream too short, missing value: read -1 out of required 0
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DerParser derParser0 = new DerParser(byteArray0);
      try { 
        derParser0.readBigInteger();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: data type is not an INTEGER: 0x0
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      DerParser derParser0 = new DerParser(byteArray0);
      // Undeclared exception!
      try { 
        derParser0.readBigInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DerParser derParser0 = new DerParser(byteArray0);
      try { 
        derParser0.readObject();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: stream too short, missing value: read -1 out of required 0
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-123);
      DerParser derParser0 = new DerParser(byteArray0);
      Asn1Object asn1Object0 = derParser0.readObject();
      assertEquals(Asn1Type.NULL, asn1Object0.getType());
      assertNotNull(asn1Object0);
      assertEquals(0, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DerParser derParser0 = new DerParser(byteArray0);
      // Undeclared exception!
      try { 
        derParser0.readSequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      DerParser derParser0 = new DerParser(byteArray0);
      try { 
        derParser0.readLength();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: data length too big: 2214592512 (max=65534)
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      DerParser derParser0 = new DerParser(byteArray0);
      try { 
        derParser0.readLength();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: length not in shortest form: 0
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      DerParser derParser0 = new DerParser(byteArray0);
      derParser0.readLength();
      try { 
        derParser0.readSequence();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: length missing
         //
         verifyException("io.churchkey.asn1.DerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      DerParser derParser0 = new DerParser(byteArray0);
      // Undeclared exception!
      try { 
        derParser0.readSequence();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected type SEQUENCE, found ANY
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }
}
