/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:58:09 GMT 2022
 */

package io.churchkey.asn1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.asn1.Oid;
import java.io.EOFException;
import java.io.StreamCorruptedException;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Oid_ESTest extends Oid_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)127;
      Oid oid0 = Oid.fromBytes(byteArray0);
      assertEquals(10, oid0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      Oid oid0 = Oid.fromBytes(byteArray0);
      // Undeclared exception!
      try { 
        oid0.toHex();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/Hex
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[2] = 127;
      Oid oid0 = new Oid(intArray0);
      // Undeclared exception!
      try { 
        oid0.toHex();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/Hex
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-61);
      Oid oid0 = Oid.fromBytes(byteArray0);
      // Undeclared exception!
      try { 
        oid0.toHex();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/Hex
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1115);
      Oid oid0 = new Oid(intArray0);
      byte[] byteArray0 = oid0.toBytes();
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      Oid oid0 = Oid.oid(intArray0);
      assertEquals(1, oid0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Oid oid0 = Oid.fromBytes(byteArray0);
      int int0 = oid0.length();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 7;
      Oid oid0 = new Oid(intArray0);
      int int0 = oid0.get(1);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2342);
      Oid oid0 = new Oid(intArray0);
      int int0 = oid0.get(0);
      assertEquals((-2342), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Oid oid0 = Oid.fromString(".");
      assertEquals(0, oid0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[0];
      Oid oid0 = new Oid(intArray0);
      // Undeclared exception!
      try { 
        oid0.toHex();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[0];
      Oid oid0 = Oid.oid(intArray0);
      // Undeclared exception!
      try { 
        oid0.toBytes();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Oid.oid((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Oid.fromString("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Oid.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Oid.fromBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Oid oid0 = null;
      try {
        oid0 = new Oid((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Oid oid0 = null;
      try {
        oid0 = new Oid((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = 2442;
      Oid oid0 = new Oid(intArray0);
      assertEquals(7, oid0.length());
      
      byte[] byteArray0 = oid0.toBytes();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-109), (byte)10, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Oid oid0 = Oid.fromBytes(byteArray0);
      int[] intArray0 = new int[0];
      Oid oid1 = new Oid(intArray0);
      boolean boolean0 = oid0.equals(oid1);
      assertEquals(6, oid0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Oid oid0 = Oid.fromBytes(byteArray0);
      boolean boolean0 = oid0.equals((Object) null);
      assertEquals(3, oid0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Oid oid0 = Oid.fromBytes(byteArray0);
      boolean boolean0 = oid0.equals(oid0);
      assertTrue(boolean0);
      assertEquals(3, oid0.length());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Oid oid0 = Oid.fromBytes(byteArray0);
      Oid oid1 = Oid.fromBytes(byteArray0);
      boolean boolean0 = oid0.equals(oid1);
      assertTrue(boolean0);
      assertEquals(3, oid1.length());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-23);
      try { 
        Oid.fromBytes(byteArray0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // OID value exceeds 32 bits: 28407657600
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      try { 
        Oid.fromBytes(byteArray0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // OID component encoding beyond 5 bytes
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-52);
      try { 
        Oid.fromBytes(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Incomplete OID value
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        Oid.fromBytes(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Not enough data for an OID
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Oid oid0 = Oid.fromBytes(byteArray0);
      List<Integer> list0 = oid0.getComponents();
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Oid.fromHex("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/Hex
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[0];
      Oid oid0 = Oid.oid(intArray0);
      // Undeclared exception!
      try { 
        oid0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Oid oid0 = Oid.fromBytes(byteArray0);
      oid0.hashCode();
      assertEquals(4, oid0.length());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Oid oid0 = Oid.fromString("6");
      boolean boolean0 = oid0.equals("6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Oid oid0 = new Oid(linkedList0);
      int int0 = oid0.length();
      assertFalse(linkedList0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[0];
      Oid oid0 = new Oid(intArray0);
      // Undeclared exception!
      try { 
        oid0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/Join
         //
         verifyException("io.churchkey.asn1.Oid", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Oid oid0 = Oid.fromBytes(byteArray0);
      int int0 = oid0.get(1);
      assertEquals(0, int0);
      assertEquals(2, oid0.length());
  }
}
