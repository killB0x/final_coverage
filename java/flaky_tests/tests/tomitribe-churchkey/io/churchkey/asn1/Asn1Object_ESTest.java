/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:46:17 GMT 2022
 */

package io.churchkey.asn1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.asn1.Asn1Class;
import io.churchkey.asn1.Asn1Construction;
import io.churchkey.asn1.Asn1Object;
import io.churchkey.asn1.Asn1Type;
import io.churchkey.asn1.Oid;
import io.churchkey.asn1.Tag;
import java.io.EOFException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.math.BigInteger;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Asn1Object_ESTest extends Asn1Object_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-35);
      Asn1Object asn1Object0 = new Asn1Object((byte) (-35), 58, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)58;
      Asn1Object asn1Object1 = new Asn1Object((byte) (-35), (byte)58, byteArray1);
      boolean boolean0 = asn1Object1.equals(asn1Object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Asn1Object asn1Object0 = new Asn1Object((byte)24, (-68), byteArray0);
      Asn1Object asn1Object1 = new Asn1Object((byte)24, 149, byteArray0);
      boolean boolean0 = asn1Object0.equals(asn1Object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = 127;
      Oid oid0 = new Oid(intArray0);
      Asn1Object asn1Object0 = Asn1Object.objectIdentifier(oid0);
      Oid oid1 = asn1Object0.toOID();
      assertTrue(oid1.equals((Object)oid0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      Asn1Object asn1Object0 = new Asn1Object((byte)6, (byte)6, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asOID();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Asn1Class asn1Class0 = Asn1Class.CONTEXT;
      Asn1Construction asn1Construction0 = Asn1Construction.CONSTRUCTED;
      Asn1Type asn1Type0 = Asn1Type.UNIVERSAL_STRING;
      Tag tag0 = new Tag(asn1Class0, asn1Construction0, asn1Type0);
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = new Asn1Object(tag0, 3, byteArray0);
      BigInteger bigInteger0 = asn1Object0.toInteger();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      assertEquals(0, asn1Object0.getLength());
      
      String string0 = asn1Object0.toString();
      assertEquals("UNIVERSAL/NULL/false[0]: ", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      Asn1Object asn1Object0 = Asn1Object.octetString(byteArray0);
      BigInteger bigInteger0 = asn1Object0.toInteger();
      assertEquals((short) (-256), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)34;
      Asn1Object asn1Object0 = Asn1Object.sequence(byteArray0);
      BigInteger bigInteger0 = asn1Object0.toInteger();
      assertEquals((byte)34, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-30);
      Asn1Object asn1Object0 = Asn1Object.sequence(byteArray0);
      BigInteger bigInteger0 = asn1Object0.toInteger();
      assertEquals((short)226, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Asn1Class asn1Class0 = Asn1Class.PRIVATE;
      Asn1Construction asn1Construction0 = Asn1Construction.CONSTRUCTED;
      Asn1Type asn1Type0 = Asn1Type.UTCTIME;
      Tag tag0 = new Tag(asn1Class0, asn1Construction0, asn1Type0);
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object(tag0, 3, byteArray0);
      boolean boolean0 = asn1Object0.isType(asn1Type0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      Asn1Type asn1Type0 = Asn1Type.BMP_STRING;
      asn1Object0.isType(asn1Type0);
      assertEquals(0, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Asn1Object asn1Object0 = Asn1Object.sequence(byteArray0);
      boolean boolean0 = asn1Object0.isConstructed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      boolean boolean0 = asn1Object0.isConstructed();
      assertEquals(0, asn1Object0.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Asn1Class asn1Class0 = Asn1Class.APPLICATION;
      Asn1Type asn1Type0 = Asn1Type.NUMERIC_STRING;
      Asn1Object asn1Object0 = new Asn1Object(asn1Class0, asn1Type0, true, 1, (byte[]) null);
      byte[] byteArray0 = asn1Object0.getValue();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Asn1Object asn1Object0 = Asn1Object.sequence(byteArray0);
      byte[] byteArray1 = asn1Object0.getValue();
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((Tag) null, 3, byteArray0);
      Tag tag0 = asn1Object0.getTag();
      assertNull(tag0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((byte)1, (byte)0, (byte[]) null);
      byte[] byteArray0 = asn1Object0.getPureValueBytes();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Asn1Object asn1Object0 = Asn1Object.octetString(byteArray0);
      byte[] byteArray1 = asn1Object0.getPureValueBytes();
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Asn1Object asn1Object0 = Asn1Object.bitString(byteArray0);
      int int0 = asn1Object0.getLength();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Asn1Class asn1Class0 = Asn1Class.CONTEXT;
      Asn1Type asn1Type0 = Asn1Type.GENERALIZEDTIME;
      byte[] byteArray0 = new byte[6];
      Asn1Object asn1Object0 = new Asn1Object(asn1Class0, asn1Type0, true, (-748), byteArray0);
      int int0 = asn1Object0.getLength();
      assertEquals((-748), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Asn1Object asn1Object0 = Asn1Object.sequence(byteArray0);
      Asn1Class asn1Class0 = asn1Object0.getAsn1Class();
      assertEquals(Asn1Class.UNIVERSAL, asn1Class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      asn1Object0.createParser();
      assertEquals(0, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Asn1Object asn1Object0 = Asn1Object.bitString(byteArray0);
      assertEquals(0, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Asn1Construction asn1Construction0 = Asn1Construction.CONSTRUCTED;
      Asn1Class asn1Class0 = Asn1Class.UNIVERSAL;
      Asn1Type asn1Type0 = Asn1Type.OCTET_STRING;
      Tag tag0 = new Tag(asn1Class0, asn1Construction0, asn1Type0);
      byte[] byteArray0 = new byte[3];
      Asn1Object asn1Object0 = new Asn1Object(tag0, 40, byteArray0);
      Asn1Object asn1Object1 = asn1Object0.assertType(asn1Type0);
      assertEquals(Asn1Class.UNIVERSAL, asn1Object1.getAsn1Class());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Asn1Class asn1Class0 = Asn1Class.UNIVERSAL;
      Asn1Construction asn1Construction0 = Asn1Construction.PRIMITIVE;
      Asn1Type asn1Type0 = Asn1Type.ANY;
      Tag tag0 = new Tag(asn1Class0, asn1Construction0, asn1Type0);
      Asn1Object asn1Object0 = new Asn1Object(tag0, (-1861), (byte[]) null);
      Asn1Object asn1Object1 = asn1Object0.assertType(asn1Type0);
      assertSame(asn1Object1, asn1Object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Class asn1Class0 = Asn1Class.UNIVERSAL;
      Asn1Type asn1Type0 = Asn1Type.VISIBLE_STRING;
      Asn1Object asn1Object0 = new Asn1Object(asn1Class0, asn1Type0, false, 1, byteArray0);
      String string0 = asn1Object0.asString();
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[26];
      Oid oid0 = Oid.oid(intArray0);
      Asn1Object asn1Object0 = Asn1Object.objectIdentifier(oid0);
      Oid oid1 = asn1Object0.asOID();
      assertTrue(oid1.equals((Object)oid0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      Asn1Object asn1Object0 = new Asn1Object((byte)2, (byte)2, byteArray0);
      BigInteger bigInteger0 = asn1Object0.asInteger();
      assertEquals((short) (-28672), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((byte)2, (byte)2, byteArray0);
      BigInteger bigInteger0 = asn1Object0.asInteger();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)2;
      Asn1Object asn1Object0 = new Asn1Object((byte)2, (byte)2, byteArray0);
      BigInteger bigInteger0 = asn1Object0.asInteger();
      assertEquals((short)2, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((byte)109, (byte)109, (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Object asn1Object0 = new Asn1Object((byte)47, (byte)47, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("io.churchkey.asn1.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((byte)84, (byte)84, (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.toOID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((Tag) null, Integer.MAX_VALUE, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.toOID();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2147483648
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      Asn1Object asn1Object0 = new Asn1Object((byte)22, (byte)22, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.toOID();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 11 out of bounds for length 11
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((byte)6, (byte)6, (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.toInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-22), (byte) (-22), byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.toInteger();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -22
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Asn1Object asn1Object0 = new Asn1Object((byte)39, (byte)39, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.toInteger();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        Asn1Object.sequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Asn1Object.nill();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Asn1Object.octetString(byteArray0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        Asn1Object.octetString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Oid oid0 = new Oid(linkedList0);
      // Undeclared exception!
      try { 
        Asn1Object.objectIdentifier(oid0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Asn1Object.objectIdentifier((Oid) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Asn1Object.nill();
      // Undeclared exception!
      try { 
        Asn1Object.nill();
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((byte)84, (byte)84, (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = new Asn1Object((byte)29, (byte)29, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("io.churchkey.asn1.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Object asn1Object0 = new Asn1Object((Tag) null, 3075, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-41), (byte) (-41), byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.getPureValueBytes();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -41
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((byte)17, (byte)17, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.getPureValueBytes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = new Asn1Object((byte)7, (byte)7, byteArray0);
      Asn1Object asn1Object1 = new Asn1Object((byte)7, (byte)7, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object1.equals(asn1Object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("io.churchkey.asn1.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Asn1Object.nill();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Asn1Object.bitString(byteArray0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        Asn1Object.bitString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((Tag) null, 2222, (byte[]) null);
      Asn1Type asn1Type0 = Asn1Type.VISIBLE_STRING;
      // Undeclared exception!
      try { 
        asn1Object0.assertType(asn1Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Asn1Class asn1Class0 = Asn1Class.APPLICATION;
      Asn1Type asn1Type0 = Asn1Type.OBJECT_IDENTIFIER;
      byte[] byteArray0 = new byte[8];
      Asn1Object asn1Object0 = new Asn1Object(asn1Class0, asn1Type0, false, Integer.MAX_VALUE, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2147483648
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = new Asn1Object((byte)38, (byte)38, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Asn1Object asn1Object0 = new Asn1Object((Tag) null, 255, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asOID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-874);
      Oid oid0 = Oid.oid(intArray0);
      Asn1Object asn1Object0 = Asn1Object.objectIdentifier(oid0);
      try { 
        asn1Object0.asOID();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Incomplete OID value
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Asn1Class asn1Class0 = Asn1Class.UNIVERSAL;
      Asn1Type asn1Type0 = Asn1Type.INTEGER;
      byte[] byteArray0 = new byte[1];
      Asn1Object asn1Object0 = new Asn1Object(asn1Class0, asn1Type0, true, 0, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-94), (byte) (-94), byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asInteger();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -94
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-94), 6, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asInteger();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = null;
      try {
        asn1Object0 = new Asn1Object((byte) (-1), (byte) (-1), byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 31 out of bounds for length 31
         //
         verifyException("io.churchkey.asn1.Asn1Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-79);
      Asn1Object asn1Object0 = Asn1Object.bitString(byteArray0);
      Oid oid0 = asn1Object0.toOID();
      assertEquals(6, oid0.length());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      Asn1Object asn1Object0 = Asn1Object.sequence(byteArray0);
      try { 
        asn1Object0.toOID();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // OID value exceeds 32 bits: 13256906880
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      try { 
        asn1Object0.toOID();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Not enough data for an OID
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((byte)21, (byte)21, (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.asString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Object asn1Object0 = new Asn1Object((byte)58, (byte)58, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-20), (byte) (-20), byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Object asn1Object0 = new Asn1Object((byte)82, (byte)82, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Asn1Object asn1Object0 = new Asn1Object((byte)51, (byte)51, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = new Asn1Object((byte)25, (-472), byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Asn1Object asn1Object0 = new Asn1Object((byte)22, (byte)22, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-5), (byte) (-5), byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Asn1Class asn1Class0 = Asn1Class.UNIVERSAL;
      Asn1Type asn1Type0 = Asn1Type.BMP_STRING;
      Asn1Object asn1Object0 = new Asn1Object(asn1Class0, asn1Type0, false, (byte)0, byteArray0);
      String string0 = asn1Object0.asString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      // Undeclared exception!
      try { 
        asn1Object0.toInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((byte)2, (byte)2, (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.asInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Asn1Class asn1Class0 = Asn1Class.CONTEXT;
      Asn1Type asn1Type0 = Asn1Type.VIDEOTEX_STRING;
      byte[] byteArray0 = new byte[6];
      Asn1Object asn1Object0 = new Asn1Object(asn1Class0, asn1Type0, false, 0, byteArray0);
      assertEquals(0, asn1Object0.getLength());
      
      byte[] byteArray1 = asn1Object0.getPureValueBytes();
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((byte) (-99), 15, (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.getPureValueBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      int int0 = asn1Object0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Object asn1Object0 = new Asn1Object((Tag) null, 3075, byteArray0);
      Asn1Type asn1Type0 = Asn1Type.UTF8_STRING;
      // Undeclared exception!
      try { 
        asn1Object0.isType(asn1Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Asn1Object asn1Object0 = new Asn1Object((Tag) null, 255, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.isConstructed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Asn1Object asn1Object0 = new Asn1Object((Tag) null, 2410, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.getAsn1Class();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      byte[] byteArray0 = asn1Object0.getValue();
      // Undeclared exception!
      try { 
        Asn1Object.sequence(byteArray0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-11), (byte) (-11), byteArray0);
      Asn1Object asn1Object1 = new Asn1Object((byte) (-11), (byte) (-11), byteArray0);
      boolean boolean0 = asn1Object1.equals(asn1Object0);
      assertEquals((-11), asn1Object1.getLength());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)94;
      Asn1Object asn1Object0 = new Asn1Object((byte)94, 3, byteArray1);
      Asn1Object asn1Object1 = new Asn1Object((byte)94, 3, byteArray0);
      boolean boolean0 = asn1Object0.equals(asn1Object1);
      assertFalse(asn1Object1.equals((Object)asn1Object0));
      assertEquals(3, asn1Object1.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Object asn1Object0 = new Asn1Object((byte)58, (byte)58, byteArray0);
      Asn1Object asn1Object1 = new Asn1Object((byte)58, (-68), byteArray0);
      boolean boolean0 = asn1Object0.equals(asn1Object1);
      assertFalse(asn1Object1.equals((Object)asn1Object0));
      assertEquals((-68), asn1Object1.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Object asn1Object0 = new Asn1Object((byte)47, (byte)47, byteArray0);
      Asn1Object asn1Object1 = new Asn1Object((byte)47, (byte)47, (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.equals(asn1Object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = Asn1Object.nill();
      Asn1Object asn1Object1 = new Asn1Object((byte)7, (byte)7, byteArray0);
      boolean boolean0 = asn1Object1.equals(asn1Object0);
      assertFalse(boolean0);
      assertEquals(0, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = Asn1Object.bitString(byteArray0);
      Asn1Object asn1Object1 = new Asn1Object((byte) (-99), (byte) (-99), byteArray0);
      boolean boolean0 = asn1Object1.equals(asn1Object0);
      assertFalse(boolean0);
      assertEquals((-99), asn1Object1.getLength());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Object asn1Object0 = new Asn1Object((byte)58, (-9), byteArray0);
      boolean boolean0 = asn1Object0.equals(asn1Object0);
      assertEquals((-9), asn1Object0.getLength());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      boolean boolean0 = asn1Object0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = (-874);
      intArray0[3] = (-874);
      intArray0[4] = (-874);
      intArray0[5] = (-874);
      Oid oid0 = Oid.oid(intArray0);
      Asn1Object asn1Object0 = Asn1Object.objectIdentifier(oid0);
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // OID value exceeds 32 bits: 5952080640
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      Asn1Object asn1Object0 = Asn1Object.sequence(byteArray0);
      try { 
        asn1Object0.toOID();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // OID component encoding beyond 5 bytes
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-77);
      Asn1Object asn1Object0 = Asn1Object.sequence(byteArray0);
      try { 
        asn1Object0.toOID();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Incomplete OID value
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = (-874);
      Oid oid0 = Oid.oid(intArray0);
      Asn1Object asn1Object0 = Asn1Object.objectIdentifier(oid0);
      Oid oid1 = (Oid)asn1Object0.asObject();
      assertEquals(6, oid1.length());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((byte) (-122), (byte) (-122), (byte[]) null);
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Not enough data for an OID
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      try { 
        asn1Object0.asOID();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // Invalid DER: object is not an OID: NULL
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      try { 
        asn1Object0.asString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string: NULL
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-68), 257, byteArray0);
      try { 
        asn1Object0.asString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: can't handle UCS-4 string
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Asn1Object asn1Object0 = Asn1Object.sequence(byteArray0);
      try { 
        asn1Object0.asString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string: SEQUENCE
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[7];
      Oid oid0 = new Oid(intArray0);
      Asn1Object asn1Object0 = Asn1Object.objectIdentifier(oid0);
      try { 
        asn1Object0.asString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string: OBJECT_IDENTIFIER
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Class asn1Class0 = Asn1Class.UNIVERSAL;
      Asn1Type asn1Type0 = Asn1Type.VISIBLE_STRING;
      Asn1Object asn1Object0 = new Asn1Object(asn1Class0, asn1Type0, false, 1, byteArray0);
      try { 
        asn1Object0.asInteger();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not integer: VISIBLE_STRING
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: unsupported type: NULL
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((byte) (-112), 3226, (byte[]) null);
      asn1Object0.asObject();
      assertEquals(3226, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-20), (byte) (-20), byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((byte)30, (byte)30, (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      Asn1Object asn1Object0 = new Asn1Object((byte)123, (byte)123, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-6), (byte) (-6), byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Asn1Object asn1Object0 = new Asn1Object((byte)25, (byte)25, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Asn1Object asn1Object0 = new Asn1Object((byte)54, (byte)54, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Asn1Object asn1Object0 = new Asn1Object((byte)53, (byte)53, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-109), (byte) (-109), byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Asn1Object asn1Object0 = new Asn1Object((byte)18, (byte)18, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Asn1Class asn1Class0 = Asn1Class.UNIVERSAL;
      Asn1Type asn1Type0 = Asn1Type.INTEGER;
      Asn1Object asn1Object0 = new Asn1Object(asn1Class0, asn1Type0, true, 0, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-126), (byte) (-126), byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.asObject();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -126
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      Asn1Type asn1Type0 = Asn1Type.SET;
      // Undeclared exception!
      try { 
        asn1Object0.assertType(asn1Type0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected type SET, found NULL
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      Asn1Type asn1Type0 = asn1Object0.getType();
      Asn1Object asn1Object1 = asn1Object0.assertType(asn1Type0);
      assertEquals(0, asn1Object1.getLength());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Asn1Object asn1Object0 = Asn1Object.nill();
      Tag tag0 = asn1Object0.getTag();
      assertEquals(0, asn1Object0.getLength());
      assertEquals(Asn1Construction.PRIMITIVE, tag0.getConstruction());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((byte) (-112), (byte) (-112), (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.createParser();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((byte)2, (byte)2, byteArray0);
      asn1Object0.hashCode();
      assertEquals(2, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((byte)2, (byte)2, byteArray0);
      Object object0 = asn1Object0.asObject();
      boolean boolean0 = asn1Object0.equals(object0);
      assertEquals(2, asn1Object0.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = Asn1Object.sequence(byteArray0);
      Asn1Object asn1Object1 = new Asn1Object((byte)16, 17, byteArray0);
      boolean boolean0 = asn1Object0.equals(asn1Object1);
      assertFalse(boolean0);
      assertEquals(17, asn1Object1.getLength());
  }
}
