/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 17:11:04 GMT 2022
 */

package io.churchkey.asn1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.asn1.Asn1Object;
import io.churchkey.asn1.DerWriter;
import io.churchkey.asn1.Oid;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DerWriter_ESTest extends DerWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      derWriter0.writeLength(2950);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        derWriter0.writeObject((byte)66, 127, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      byte[] byteArray0 = new byte[2];
      derWriter0.integer(byteArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No output stream");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 2);
      DerWriter derWriter0 = new DerWriter(bufferedOutputStream0);
      byte[] byteArray0 = new byte[9];
      Asn1Object asn1Object0 = Asn1Object.octetString(byteArray0);
      DerWriter derWriter1 = derWriter0.writeObject(asn1Object0);
      assertSame(derWriter0, derWriter1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter(43);
      byte[] byteArray0 = new byte[6];
      DerWriter derWriter1 = derWriter0.writeObject((byte) (-127), 0, byteArray0);
      assertSame(derWriter1, derWriter0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter(6);
      byte[] byteArray0 = new byte[2];
      DerWriter derWriter1 = derWriter0.sequence(byteArray0);
      assertSame(derWriter0, derWriter1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No output stream");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 2);
      DerWriter derWriter0 = new DerWriter(bufferedOutputStream0);
      byte[] byteArray0 = new byte[9];
      DerWriter derWriter1 = derWriter0.octetString(byteArray0);
      assertSame(derWriter1, derWriter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      DerWriter derWriter1 = derWriter0.octetString(derWriter0);
      assertSame(derWriter1, derWriter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      byte[] byteArray0 = new byte[4];
      Oid oid0 = Oid.fromBytes(byteArray0);
      DerWriter derWriter1 = derWriter0.objectIdentifier(oid0);
      assertSame(derWriter0, derWriter1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      DerWriter derWriter1 = derWriter0.nill();
      assertSame(derWriter0, derWriter1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DerWriter derWriter1 = derWriter0.integer(bigInteger0);
      assertSame(derWriter0, derWriter1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      derWriter0.octetString(bigInteger0);
      byte[] byteArray0 = derWriter0.bytes();
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)10}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter(1);
      byte[] byteArray0 = new byte[9];
      DerWriter derWriter1 = derWriter0.bolean(byteArray0);
      assertSame(derWriter0, derWriter1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      byte[] byteArray0 = new byte[8];
      DerWriter derWriter1 = derWriter0.bitString(byteArray0);
      assertSame(derWriter0, derWriter1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter(43);
      byte[] byteArray0 = new byte[6];
      DerWriter derWriter1 = derWriter0.any(byteArray0);
      assertSame(derWriter1, derWriter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      // Undeclared exception!
      try { 
        derWriter0.writeObject((Asn1Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No ASN.1 object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      Asn1Object asn1Object0 = new Asn1Object((byte) (-55), (byte) (-55), (byte[]) null);
      // Undeclared exception!
      try { 
        derWriter0.writeObject(asn1Object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length: -55
         //
         verifyException("io.churchkey.asn1.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      byte[] byteArray0 = new byte[3];
      Asn1Object asn1Object0 = new Asn1Object((byte)116, (byte)116, byteArray0);
      // Undeclared exception!
      try { 
        derWriter0.writeObject(asn1Object0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        derWriter0.writeObject((byte) (-1), (int) (byte) (-1), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length: -1
         //
         verifyException("io.churchkey.asn1.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        derWriter0.writeObject((byte) (-73), (-1130), byteArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      try { 
        derWriter0.writeLength(193);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DerWriter.write();
      // Undeclared exception!
      try { 
        DerWriter.write();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        derWriter0.sequence(byteArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      // Undeclared exception!
      try { 
        derWriter0.sequence((DerWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      DerWriter derWriter1 = new DerWriter(derWriter0);
      // Undeclared exception!
      try { 
        derWriter0.sequence(derWriter1);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: The underlying stream is not a byte[] stream
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        derWriter0.octetString(byteArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        derWriter0.octetString(bigInteger0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      DerWriter derWriter1 = new DerWriter(derWriter0);
      // Undeclared exception!
      try { 
        derWriter0.octetString(derWriter1);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: The underlying stream is not a byte[] stream
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      int[] intArray0 = new int[0];
      Oid oid0 = new Oid(intArray0);
      // Undeclared exception!
      try { 
        derWriter0.objectIdentifier(oid0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      Oid oid0 = Oid.fromBytes(byteArray0);
      // Undeclared exception!
      try { 
        derWriter0.objectIdentifier(oid0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      // Undeclared exception!
      try { 
        derWriter0.integer((byte[]) null, 618, 618);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      // Undeclared exception!
      try { 
        derWriter0.integer((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        derWriter0.integer(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        derWriter0.integer(byteArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        derWriter0.integer(bigInteger0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        derWriter0.integer((-1204));
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        derWriter0.bolean(byteArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      // Undeclared exception!
      try { 
        derWriter0.bolean((DerWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      DerWriter derWriter1 = new DerWriter(derWriter0);
      // Undeclared exception!
      try { 
        derWriter0.bolean(derWriter1);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: The underlying stream is not a byte[] stream
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      // Undeclared exception!
      try { 
        derWriter0.bitString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        derWriter0.any(byteArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      // Undeclared exception!
      try { 
        derWriter0.any((DerWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DerWriter derWriter0 = null;
      try {
        derWriter0 = new DerWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output stream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DerWriter derWriter0 = null;
      try {
        derWriter0 = new DerWriter((-113));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -113
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      byte[] byteArray0 = derWriter0.bytes();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        derWriter0.bytes();
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: The underlying stream is not a byte[] stream
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter(0);
      derWriter0.writeLength(79);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      // Undeclared exception!
      try { 
        derWriter0.writeLength((-190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length: -190
         //
         verifyException("io.churchkey.asn1.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        derWriter0.integer(byteArray0, 0, (int) (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-111);
      // Undeclared exception!
      try { 
        derWriter0.integer(byteArray0, 0, 126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)18;
      // Undeclared exception!
      try { 
        derWriter0.integer(byteArray0, 0, 127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter(0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        derWriter0.integer(byteArray0, 0, 126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      // Undeclared exception!
      try { 
        derWriter0.any((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      // Undeclared exception!
      try { 
        derWriter0.integer((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No value
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      // Undeclared exception!
      try { 
        derWriter0.bolean((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      // Undeclared exception!
      try { 
        derWriter0.sequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      // Undeclared exception!
      try { 
        derWriter0.writeObject((byte)13, (int) (byte)13, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      byte[] byteArray0 = new byte[0];
      Asn1Object asn1Object0 = new Asn1Object((byte)125, (byte)125, byteArray0);
      // Undeclared exception!
      try { 
        derWriter0.writeObject(asn1Object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      DerWriter derWriter1 = new DerWriter(derWriter0);
      // Undeclared exception!
      try { 
        derWriter0.any(derWriter1);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: The underlying stream is not a byte[] stream
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      derWriter0.writeLength(193);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      byte[] byteArray0 = new byte[2];
      derWriter0.integer(byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      DerWriter derWriter1 = derWriter0.integer((-1252));
      assertSame(derWriter0, derWriter1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        derWriter0.integer(byteArray0, 0, (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length: -1
         //
         verifyException("io.churchkey.asn1.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      // Undeclared exception!
      try { 
        derWriter0.octetString((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      // Undeclared exception!
      try { 
        derWriter0.objectIdentifier((Oid) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      DerWriter derWriter1 = derWriter0.sequence(derWriter0);
      assertSame(derWriter1, derWriter0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        derWriter0.nill();
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      DerWriter derWriter1 = derWriter0.bolean(derWriter0);
      assertSame(derWriter1, derWriter0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      // Undeclared exception!
      try { 
        derWriter0.octetString((DerWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DerWriter derWriter0 = DerWriter.write();
      // Undeclared exception!
      try { 
        derWriter0.octetString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DerWriter derWriter0 = new DerWriter(pipedOutputStream0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        derWriter0.bitString(byteArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("io.churchkey.asn1.DerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DerWriter derWriter0 = new DerWriter();
      DerWriter derWriter1 = derWriter0.any(derWriter0);
      assertSame(derWriter0, derWriter1);
  }
}
