/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 17:20:47 GMT 2022
 */

package io.churchkey.pem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.asn1.Oid;
import io.churchkey.pem.BeginEcParameters;
import java.math.BigInteger;
import java.security.spec.ECFieldF2m;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.EllipticCurve;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeginEcParameters_ESTest extends BeginEcParameters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeginEcParameters.encode((ECParameterSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.pem.EcCurveParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeginEcParameters.decode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.util.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        BeginEcParameters.decode(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Contents do not start with -----BEGIN EC PARAMETERS-----
         //
         verifyException("io.churchkey.pem.BeginEcParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = BeginEcParameters.encode((Oid) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ECFieldF2m eCFieldF2m0 = new ECFieldF2m(1250, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      EllipticCurve ellipticCurve0 = new EllipticCurve(eCFieldF2m0, bigInteger0, bigInteger0, byteArray0);
      ECPoint eCPoint0 = new ECPoint(bigInteger0, bigInteger0);
      ECParameterSpec eCParameterSpec0 = new ECParameterSpec(ellipticCurve0, eCPoint0, bigInteger0, 1250);
      // Undeclared exception!
      try { 
        BeginEcParameters.encode(eCParameterSpec0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/PrintString
         //
         verifyException("io.churchkey.util.Pem", e);
      }
  }
}
