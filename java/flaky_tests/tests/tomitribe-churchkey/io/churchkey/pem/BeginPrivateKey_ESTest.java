/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 17:02:00 GMT 2022
 */

package io.churchkey.pem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.Key;
import io.churchkey.pem.BeginPrivateKey;
import java.io.UncheckedIOException;
import javax.crypto.spec.SecretKeySpec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeginPrivateKey_ESTest extends BeginPrivateKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      // Undeclared exception!
      try { 
        BeginPrivateKey.decode(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.pem.BeginPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeginPrivateKey.toDer((Key) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.pem.BeginPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeginPrivateKey.encode((Key) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.pem.BeginPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        BeginPrivateKey.decode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 31 out of bounds for length 31
         //
         verifyException("io.churchkey.asn1.Asn1Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        BeginPrivateKey.decode(byteArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.StreamCorruptedException: Invalid DER: stream too short, missing value: read -1 out of required 0
         //
         verifyException("io.churchkey.pem.BeginPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "Unsupported key type oid: ");
      Key.Type key_Type0 = Key.Type.PUBLIC;
      Key.Format key_Format0 = Key.Format.OPENSSH;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.OCT;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      byte[] byteArray1 = BeginPrivateKey.toDer(key0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      Key.Type key_Type0 = Key.Type.SECRET;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.EC;
      Key.Format key_Format0 = Key.Format.OPENSSH;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        BeginPrivateKey.toDer(key0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class javax.crypto.spec.SecretKeySpec cannot be cast to class java.security.interfaces.ECPrivateKey (javax.crypto.spec.SecretKeySpec and java.security.interfaces.ECPrivateKey are in module java.base of loader 'bootstrap')
         //
         verifyException("io.churchkey.pem.BeginPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "CuKH[TC~S(ZSf*(=6");
      Key.Type key_Type0 = Key.Type.SECRET;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.OCT;
      Key.Format key_Format0 = Key.Format.JWK;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        BeginPrivateKey.encode(key0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/PrintString
         //
         verifyException("io.churchkey.util.Pem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      Key.Type key_Type0 = Key.Type.PUBLIC;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.DSA;
      Key.Format key_Format0 = Key.Format.OPENSSH;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        BeginPrivateKey.toDer(key0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class javax.crypto.spec.SecretKeySpec cannot be cast to class java.security.interfaces.DSAPrivateKey (javax.crypto.spec.SecretKeySpec and java.security.interfaces.DSAPrivateKey are in module java.base of loader 'bootstrap')
         //
         verifyException("io.churchkey.pem.BeginPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Key.Type key_Type0 = Key.Type.PRIVATE;
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "'=aIZ|&4R8S");
      Key.Algorithm key_Algorithm0 = Key.Algorithm.RSA;
      Key.Format key_Format0 = Key.Format.OPENSSH;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        BeginPrivateKey.toDer(key0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class javax.crypto.spec.SecretKeySpec cannot be cast to class java.security.interfaces.RSAPrivateCrtKey (javax.crypto.spec.SecretKeySpec and java.security.interfaces.RSAPrivateCrtKey are in module java.base of loader 'bootstrap')
         //
         verifyException("io.churchkey.pem.BeginPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        BeginPrivateKey.decode(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected type SEQUENCE, found ANY
         //
         verifyException("io.churchkey.asn1.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "CuKH[TC~S(ZSf*(=6");
      Key.Type key_Type0 = Key.Type.SECRET;
      Key.Format key_Format0 = Key.Format.JWK;
      Key.Algorithm key_Algorithm0 = Key.Algorithm.EC;
      Key key0 = new Key(secretKeySpec0, key_Type0, key_Algorithm0, key_Format0);
      // Undeclared exception!
      try { 
        BeginPrivateKey.encode(key0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class javax.crypto.spec.SecretKeySpec cannot be cast to class java.security.interfaces.ECPrivateKey (javax.crypto.spec.SecretKeySpec and java.security.interfaces.ECPrivateKey are in module java.base of loader 'bootstrap')
         //
         verifyException("io.churchkey.pem.BeginPrivateKey", e);
      }
  }
}
