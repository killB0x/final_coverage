/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:49:14 GMT 2022
 */

package io.churchkey.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.churchkey.util.Pem;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pem_ESTest extends Pem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pem.Builder pem_Builder0 = Pem.builder();
      byte[] byteArray0 = new byte[3];
      pem_Builder0.type("");
      Pem pem0 = pem_Builder0.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Pem pem1 = new Pem("Pem(header=", "Pem(header=", "", byteArray0, (byte)114, hashMap0);
      boolean boolean0 = pem0.equals(pem1);
      assertEquals("-----END -----", pem0.getFooter());
      assertFalse(boolean0);
      assertEquals("-----BEGIN -----", pem0.getHeader());
      assertEquals(64, pem0.getWrap());
      assertEquals("", pem1.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pem pem0 = Pem.parse("\rf0\n]w0pX");
      assertEquals(2, pem0.getWrap());
      assertEquals("]w0pX", pem0.getFooter());
      assertEquals("", pem0.getType());
      assertEquals("", pem0.getHeader());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Pem pem0 = new Pem("%s: \"%s\"%n", "J)%PE^R\"!DnBHpy", "!Nz24o<(5RvI", byteArray0, (byte)0, hashMap0);
      int int0 = pem0.getWrap();
      assertEquals("J)%PE^R\"!DnBHpy", pem0.getFooter());
      assertEquals("%s: \"%s\"%n", pem0.getHeader());
      assertEquals(0, int0);
      assertEquals("!Nz24o<(5RvI", pem0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pem.Builder pem_Builder0 = Pem.builder();
      pem_Builder0.header("");
      Pem pem0 = pem_Builder0.build();
      int int0 = pem0.getWrap();
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Pem pem0 = new Pem((String) null, (String) null, (String) null, byteArray0, (-1720), hashMap0);
      pem0.getType();
      assertEquals((-1720), pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pem.Builder pem_Builder0 = new Pem.Builder();
      pem_Builder0.header("GY");
      Pem pem0 = pem_Builder0.build();
      String string0 = pem0.getType();
      assertNotNull(string0);
      assertEquals(64, pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[8];
      Pem pem0 = new Pem("-&K\"rKNU(lpC", "-----BEGIN %s-----", "Pem(header=", byteArray0, (byte)59, hashMap0);
      String string0 = pem0.getHeader();
      assertEquals(59, pem0.getWrap());
      assertEquals("-----BEGIN %s-----", pem0.getFooter());
      assertEquals("Pem(header=", pem0.getType());
      assertEquals("-&K\"rKNU(lpC", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Pem pem0 = new Pem("", "", "", byteArray0, 907, hashMap0);
      pem0.getHeader();
      assertEquals(907, pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pem.Builder pem_Builder0 = new Pem.Builder();
      pem_Builder0.header("jS5IjuCd");
      Pem pem0 = pem_Builder0.build();
      String string0 = pem0.getFooter();
      assertEquals(64, pem0.getWrap());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Pem pem0 = new Pem("GY", "GY", "GY", (byte[]) null, (byte)0, hashMap0);
      pem0.getFooter();
      assertEquals(0, pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Pem.Builder pem_Builder0 = Pem.builder();
      Pem.Builder pem_Builder1 = pem_Builder0.header("");
      pem_Builder1.data(byteArray0);
      Pem pem0 = pem_Builder1.build();
      pem0.getData();
      assertEquals(64, pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pem.Builder pem_Builder0 = Pem.builder();
      Pem.Builder pem_Builder1 = pem_Builder0.data("");
      pem_Builder1.header("Cq");
      Pem pem0 = pem_Builder0.build();
      pem0.getData();
      assertEquals(64, pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Pem pem0 = new Pem("N>RL%]hhM/", "N>RL%]hhM/", "EUO/-x", byteArray0, (-1498), (Map<String, String>) null);
      pem0.getAttributes();
      assertEquals("EUO/-x", pem0.getType());
      assertEquals((-1498), pem0.getWrap());
      assertEquals("N>RL%]hhM/", pem0.getFooter());
      assertEquals("N>RL%]hhM/", pem0.getHeader());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pem.Builder pem_Builder0 = new Pem.Builder();
      Pem.Builder pem_Builder1 = pem_Builder0.type("");
      pem_Builder1.attribute("", "");
      Pem pem0 = pem_Builder0.build();
      pem0.getAttributes();
      assertEquals(64, pem0.getWrap());
      assertEquals("-----END -----", pem0.getFooter());
      assertEquals("", pem0.getType());
      assertEquals("-----BEGIN -----", pem0.getHeader());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pem.Builder pem_Builder0 = new Pem.Builder();
      Pem.Builder pem_Builder1 = pem_Builder0.header("GY");
      Pem pem0 = pem_Builder0.build();
      pem0.canEqual(pem_Builder1);
      assertEquals(64, pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        Pem.parse(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)13;
      byteArray0[2] = (byte)13;
      // Undeclared exception!
      try { 
        Pem.parse(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input byte[] should at least have 2 bytes for base64 bytes
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Pem.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.util.Pem", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Pem.parse("I1ADg.a`w<9zMy");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Pem pem0 = Pem.parse("[\r|]");
      // Undeclared exception!
      try { 
        pem0.format();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/tomitribe/util/PrintString
         //
         verifyException("io.churchkey.util.Pem", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Pem pem0 = new Pem("N>RL5~%]hhM/", "N>RL5~%]hhM/", "N>RL5~%]hhM/", byteArray0, (-3102), hashMap0);
      int int0 = pem0.getWrap();
      assertEquals((-3102), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Pem pem0 = new Pem("N>RL%]hhM/", (String) null, "", byteArray0, (-3102), hashMap0);
      String string0 = pem0.getType();
      assertEquals("", string0);
      assertEquals("N>RL%]hhM/", pem0.getHeader());
      assertNotNull(string0);
      assertEquals((-3102), pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Pem pem0 = new Pem("N>RL%]hhM/", (String) null, "", byteArray0, (-3102), hashMap0);
      pem0.getAttributes();
      assertEquals("", pem0.getType());
      assertEquals((-3102), pem0.getWrap());
      assertEquals("N>RL%]hhM/", pem0.getHeader());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Pem pem0 = new Pem((String) null, "^-+ ?BEGIN | ?-+$", "^-+ ?BEGIN | ?-+$", byteArray0, 1, hashMap0);
      String string0 = pem0.getHeader();
      assertNull(string0);
      assertEquals(1, pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Pem pem0 = new Pem("", "5r2!B_;kIV7@\"T/of", "", (byte[]) null, 0, hashMap0);
      pem0.getData();
      assertEquals(0, pem0.getWrap());
      assertEquals("", pem0.getType());
      assertEquals("5r2!B_;kIV7@\"T/of", pem0.getFooter());
      assertEquals("", pem0.getHeader());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Pem pem0 = new Pem("", "", "", byteArray0, 907, hashMap0);
      pem0.getFooter();
      assertEquals(907, pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      Pem pem0 = Pem.parse(byteArray0);
      assertEquals(0, pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Pem.parse("\r:\ni3X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input byte[] should at least have 2 bytes for base64 bytes
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Pem.Builder pem_Builder0 = Pem.builder();
      Pem.Builder pem_Builder1 = pem_Builder0.type("wa$");
      Pem pem0 = pem_Builder0.build();
      pem_Builder1.attributes((Map<String, String>) null);
      Pem pem1 = pem_Builder1.build();
      boolean boolean0 = pem0.equals(pem1);
      assertEquals("-----END WA$-----", pem1.getFooter());
      assertFalse(boolean0);
      assertEquals(64, pem1.getWrap());
      assertEquals("-----BEGIN WA$-----", pem1.getHeader());
      assertEquals("wa$", pem1.getType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Pem.Builder pem_Builder0 = Pem.builder();
      Pem.Builder pem_Builder1 = pem_Builder0.type("37fogu3Qa+4}k&");
      HashMap<String, String> hashMap0 = new HashMap<String, String>(198, 198);
      Pem.Builder pem_Builder2 = pem_Builder1.attributes((Map<String, String>) null);
      Pem pem0 = pem_Builder2.build();
      Pem.Builder pem_Builder3 = pem_Builder0.attributes(hashMap0);
      Pem pem1 = pem_Builder3.build();
      boolean boolean0 = pem0.equals(pem1);
      assertEquals("-----BEGIN 37FOGU3QA+4}K&-----", pem1.getHeader());
      assertEquals("37fogu3Qa+4}k&", pem1.getType());
      assertEquals(64, pem1.getWrap());
      assertFalse(pem1.equals((Object)pem0));
      assertEquals("-----END 37FOGU3QA+4}K&-----", pem1.getFooter());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Pem.Builder pem_Builder0 = new Pem.Builder();
      Pem.Builder pem_Builder1 = pem_Builder0.header("");
      Pem pem0 = pem_Builder1.build();
      byte[] byteArray0 = new byte[0];
      pem_Builder0.data(byteArray0);
      Pem pem1 = pem_Builder0.build();
      boolean boolean0 = pem0.equals(pem1);
      assertFalse(boolean0);
      assertEquals(64, pem1.getWrap());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Pem pem0 = Pem.parse("\r\nViFX");
      Pem pem1 = Pem.parse("\r\n7ViFX");
      boolean boolean0 = pem1.equals(pem0);
      assertEquals("", pem1.getHeader());
      assertEquals(0, pem1.getWrap());
      assertEquals("", pem1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Pem.Builder pem_Builder0 = new Pem.Builder();
      Pem.Builder pem_Builder1 = pem_Builder0.header("W$j0n|=N");
      Pem pem0 = pem_Builder1.build();
      pem_Builder1.footer("W$j0n|=N");
      Pem pem1 = pem_Builder0.build();
      boolean boolean0 = pem0.equals(pem1);
      assertFalse(pem1.equals((Object)pem0));
      assertEquals(64, pem1.getWrap());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Pem.Builder pem_Builder0 = new Pem.Builder();
      Pem.Builder pem_Builder1 = pem_Builder0.header("W$jz0n|=N");
      Pem pem0 = pem_Builder1.build();
      Pem pem1 = pem_Builder0.build();
      boolean boolean0 = pem0.equals(pem1);
      assertEquals(64, pem1.getWrap());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Pem pem0 = Pem.parse("i\nx_3i");
      Pem pem1 = Pem.parse("\r\n\"x73i");
      boolean boolean0 = pem0.equals(pem1);
      assertFalse(boolean0);
      assertEquals(0, pem0.getWrap());
      assertEquals("\"x73i", pem1.getFooter());
      assertEquals("", pem1.getHeader());
      assertEquals("", pem1.getType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Pem.Builder pem_Builder0 = Pem.builder();
      Pem.Builder pem_Builder1 = pem_Builder0.type("wa$");
      Pem.Builder pem_Builder2 = pem_Builder1.header((String) null);
      Pem pem0 = pem_Builder0.build();
      pem_Builder2.type("%s: \"%s\"%n");
      Pem pem1 = pem_Builder2.build();
      boolean boolean0 = pem0.equals(pem1);
      assertEquals(64, pem1.getWrap());
      assertEquals("%s: \"%s\"%n", pem1.getType());
      assertEquals("-----BEGIN %S: \"%S\"%N-----", pem1.getHeader());
      assertFalse(boolean0);
      assertEquals("-----END %S: \"%S\"%N-----", pem1.getFooter());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Pem.Builder pem_Builder0 = new Pem.Builder();
      Pem.Builder pem_Builder1 = pem_Builder0.type("");
      pem_Builder1.header((String) null);
      Pem pem0 = pem_Builder1.build();
      Pem pem1 = pem_Builder0.build();
      boolean boolean0 = pem1.equals(pem0);
      assertTrue(boolean0);
      assertEquals("-----END -----", pem1.getFooter());
      assertEquals(64, pem1.getWrap());
      assertEquals("", pem1.getType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Pem pem0 = Pem.parse("\r\n6VipX");
      Pem pem1 = Pem.parse("\r\n6VipX");
      boolean boolean0 = pem1.equals(pem0);
      assertEquals("", pem1.getType());
      assertTrue(boolean0);
      assertEquals("6VipX", pem1.getFooter());
      assertEquals(0, pem1.getWrap());
      assertEquals("", pem1.getHeader());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Pem pem0 = Pem.parse("\r\n6VipX");
      boolean boolean0 = pem0.equals(pem0);
      assertEquals(0, pem0.getWrap());
      assertEquals("", pem0.getType());
      assertEquals("6VipX", pem0.getFooter());
      assertTrue(boolean0);
      assertEquals("", pem0.getHeader());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Pem pem0 = Pem.parse("[\r|]");
      boolean boolean0 = pem0.equals("[\r|]");
      assertEquals(0, pem0.getWrap());
      assertEquals("|]", pem0.getFooter());
      assertEquals("[", pem0.getHeader());
      assertFalse(boolean0);
      assertEquals("[", pem0.getType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Pem.Builder pem_Builder0 = new Pem.Builder();
      Pem.Builder pem_Builder1 = pem_Builder0.header("!~@v8(/({");
      Pem pem0 = pem_Builder1.build();
      pem0.hashCode();
      assertEquals(64, pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Pem pem0 = new Pem((String) null, "+XYnGRfFMhII-g", "+XYnGRfFMhII-g", byteArray0, 732, (Map<String, String>) null);
      pem0.hashCode();
      assertEquals(732, pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Pem pem0 = new Pem("GY", "GY", (String) null, (byte[]) null, 43, hashMap0);
      pem0.hashCode();
      assertEquals(43, pem0.getWrap());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Pem.Builder pem_Builder0 = Pem.builder();
      String string0 = pem_Builder0.toString();
      assertEquals("Pem.Builder(header=null, footer=null, type=null, data=null, wrap=64, attributes={})", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Pem.Builder pem_Builder0 = Pem.builder();
      Pem.Builder pem_Builder1 = pem_Builder0.type("37fogu3Qa+4}k&");
      Pem.Builder pem_Builder2 = pem_Builder1.attributes((Map<String, String>) null);
      Pem pem0 = pem_Builder2.build();
      Pem pem1 = pem_Builder2.build();
      boolean boolean0 = pem0.equals(pem1);
      assertTrue(boolean0);
      assertEquals("37fogu3Qa+4}k&", pem1.getType());
      assertEquals(64, pem1.getWrap());
      assertEquals("-----END 37FOGU3QA+4}K&-----", pem1.getFooter());
      assertEquals("-----BEGIN 37FOGU3QA+4}K&-----", pem1.getHeader());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Pem.Builder pem_Builder0 = Pem.builder();
      Pem.Builder pem_Builder1 = pem_Builder0.wrap(2010);
      assertSame(pem_Builder1, pem_Builder0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Pem.Builder pem_Builder0 = new Pem.Builder();
      Pem.Builder pem_Builder1 = pem_Builder0.header("[\r\n]");
      Pem pem0 = pem_Builder1.build();
      Pem pem1 = Pem.parse("[\r\n]");
      boolean boolean0 = pem0.equals(pem1);
      assertEquals(64, pem0.getWrap());
      assertEquals("]", pem1.getFooter());
      assertEquals("[", pem1.getType());
      assertEquals(0, pem1.getWrap());
      assertEquals("[", pem1.getHeader());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Pem.parse((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Pem.Builder pem_Builder0 = Pem.builder();
      // Undeclared exception!
      try { 
        pem_Builder0.format();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.churchkey.util.Pem", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Pem pem0 = Pem.parse(";\rkwp]");
      pem0.canEqual(pem0);
      assertEquals("kwp]", pem0.getFooter());
      assertEquals(";", pem0.getType());
      assertEquals(0, pem0.getWrap());
      assertEquals(";", pem0.getHeader());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Pem pem0 = Pem.parse("[\r|]");
      String string0 = pem0.toString();
      assertEquals("Pem(header=[, footer=|], type=[, data=[], wrap=0, attributes={})", string0);
  }
}
