/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 03:11:31 GMT 2022
 */

package com.contentful.java.cda;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contentful.java.cda.CDAAsset;
import com.contentful.java.cda.CDAClient;
import com.contentful.java.cda.CDAContentType;
import com.contentful.java.cda.FetchQuery;
import com.contentful.java.cda.QueryOperation;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbsQuery_ESTest extends AbsQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.include(10);
      assertSame(fetchQuery0, fetchQuery1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.include(0);
      assertSame(fetchQuery0, fetchQuery1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.skip(0);
      assertSame(fetchQuery1, fetchQuery0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.limit(1000);
      assertSame(fetchQuery0, fetchQuery1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.limit(0);
      assertSame(fetchQuery1, fetchQuery0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.where("fields.", "-JvS@6J");
      assertSame(fetchQuery0, fetchQuery1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-JvS@6J";
      stringArray0[1] = "\"m:\"^Lc(.V<4Km";
      stringArray0[2] = ",,x3Jz[/z^PpZ";
      stringArray0[3] = "-JvS@6J";
      stringArray0[4] = "\"m:\"^Lc(.V<4Km";
      stringArray0[5] = "10.5.8-SNAPSHOT";
      // Undeclared exception!
      try { 
        fetchQuery0.select(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not select 5. field (\"10.5.8-SNAPSHOT\").
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.where((Map<String, String>) hashMap0);
      assertSame(fetchQuery1, fetchQuery0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      String string0 = fetchQuery0.path();
      assertEquals("content_types", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.withLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Locale must not be null.
         //
         verifyException("com.contentful.java.cda.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>((Class<CDAContentType>) null, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.withContentType("sys.m}s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      String[] stringArray0 = new String[19];
      // Undeclared exception!
      try { 
        fetchQuery0.withContentType(stringArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ContentType must not be empty.
         //
         verifyException("com.contentful.java.cda.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>((Class<CDAContentType>) null, (CDAClient) null);
      QueryOperation<Object> queryOperation0 = new QueryOperation<Object>("I(JG=!''", fetchQuery0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        fetchQuery0.where("I(JG=!''", queryOperation0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.select((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Selections cannot be null. Please specify at least one.
         //
         verifyException("com.contentful.java.cda.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fields.[hdV7\"$r!&_Y-&E'S4o";
      // Undeclared exception!
      try { 
        fetchQuery0.select(stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot use field selection without specifying a content type first. Use '.withContentType(\"{typeid}\")' first.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>((Class<CDAContentType>) null, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.select("fields.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>((Class<CDAContentType>) null, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.reverseOrderBy("fields.Could not find id '%s' of type '%s'.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.reverseOrderBy((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key to order by must not be empty
         //
         verifyException("com.contentful.java.cda.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>((Class<CDAContentType>) null, (CDAClient) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ebw";
      stringArray0[1] = "\"Cl8ph:Ahi0+ZRo7{$";
      stringArray0[2] = "jFS";
      stringArray0[3] = "fields.[O9Ej";
      // Undeclared exception!
      try { 
        fetchQuery0.orderBy(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.orderBy((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Keys should not be null.
         //
         verifyException("com.contentful.java.cda.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>((Class<CDAContentType>) null, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.orderBy("fields.fields.fields.sys.Bzh>`]yp.CCH9Yk1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.orderBy((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key to order by must not be empty.
         //
         verifyException("com.contentful.java.cda.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.linksToEntryId((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // entryId must not be empty.
         //
         verifyException("com.contentful.java.cda.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.linksToAssetId("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // assetId must not be empty.
         //
         verifyException("com.contentful.java.cda.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        fetchQuery0.orderBy(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have an empty keys array.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.select("sys.\"m:");
      assertSame(fetchQuery0, fetchQuery1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.include((-3064));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Include level of -3064 is negative.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.include(110);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Include level of 110 is to high.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<CDAAsset> class0 = CDAAsset.class;
      FetchQuery<CDAAsset> fetchQuery0 = new FetchQuery<CDAAsset>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.skip((-850));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Limit of -850 is negative.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<CDAAsset> class0 = CDAAsset.class;
      FetchQuery<CDAAsset> fetchQuery0 = new FetchQuery<CDAAsset>(class0, (CDAClient) null);
      FetchQuery<CDAAsset> fetchQuery1 = fetchQuery0.skip(2153);
      assertSame(fetchQuery1, fetchQuery0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.limit((-1969990144));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Limit of -1969990144 is negative.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.limit(1232);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Limit of 1232 is greater than 1000.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      fetchQuery0.withContentType("yDY'}j");
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.reverseOrderBy("fields.^IM[`MGi0IvF=");
      assertSame(fetchQuery0, fetchQuery1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.reverseOrderBy("fields.^IM[`MGi0IvF=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \"fields.\" cannot be used without setting a content type first.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.reverseOrderBy("Cannot have an empty keys array.");
      assertSame(fetchQuery1, fetchQuery0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fields.32";
      // Undeclared exception!
      try { 
        fetchQuery0.orderBy(stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Key at 0 uses \"fields.\" but cannot be used without setting a content type first.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<CDAAsset> class0 = CDAAsset.class;
      FetchQuery<CDAAsset> fetchQuery0 = new FetchQuery<CDAAsset>(class0, (CDAClient) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Cannot use field selection without specifying a content type first. Use '.withContentType(\"{typeid}\")' first.";
      stringArray0[1] = "JhZJT.S^z1Y";
      stringArray0[2] = "sys.";
      stringArray0[3] = "*";
      stringArray0[4] = "fields.fields.yht";
      // Undeclared exception!
      try { 
        fetchQuery0.orderBy(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key at 5 to order by must not be empty.
         //
         verifyException("com.contentful.java.cda.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      fetchQuery0.withContentType("fields.IL7/sy})~");
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.orderBy("fields.IL7/sy})~");
      assertSame(fetchQuery1, fetchQuery0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.orderBy("fields.IL7/sy})~");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \"fields.\" cannot be used without setting a content type first.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.orderBy("Cannot have an empty keys array.");
      assertSame(fetchQuery0, fetchQuery1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      fetchQuery0.withContentType("fields.Limit of %d is greater than %d.");
      QueryOperation<String> queryOperation0 = QueryOperation.IsLaterOrAt;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fields.Limit of %d is greater than %d.";
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.where("fields.Limit of %d is greater than %d.", queryOperation0, stringArray0);
      assertSame(fetchQuery0, fetchQuery1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<CDAAsset> class0 = CDAAsset.class;
      FetchQuery<CDAAsset> fetchQuery0 = new FetchQuery<CDAAsset>(class0, (CDAClient) null);
      QueryOperation<String> queryOperation0 = QueryOperation.IsEqualTo;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "assetId must not be empty.";
      // Undeclared exception!
      try { 
        fetchQuery0.where("assetId must not be empty.", queryOperation0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Please specify either a \"sys.\", a \"metadata.\" or a \"fields.\" attribute to be searched for. (Remember to specify a ContentType for \"fields.\" searches when querying entries.)
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      CDAContentType cDAContentType0 = new CDAContentType();
      QueryOperation<CDAContentType> queryOperation0 = new QueryOperation<CDAContentType>("metadata.bo.I_(TgR73xOzr}S", cDAContentType0);
      CDAContentType[] cDAContentTypeArray0 = new CDAContentType[0];
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.where("metadata.bo.I_(TgR73xOzr}S", queryOperation0, cDAContentTypeArray0);
      assertSame(fetchQuery1, fetchQuery0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      CDAContentType cDAContentType0 = new CDAContentType();
      QueryOperation<CDAContentType> queryOperation0 = new QueryOperation<CDAContentType>("sys.", cDAContentType0);
      CDAContentType[] cDAContentTypeArray0 = new CDAContentType[0];
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.where("sys.", queryOperation0, cDAContentTypeArray0);
      assertSame(fetchQuery1, fetchQuery0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      QueryOperation<String> queryOperation0 = QueryOperation.IsLaterOrAt;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fields.Limit of %d is greater than %d.";
      // Undeclared exception!
      try { 
        fetchQuery0.where("fields.Limit of %d is greater than %d.", queryOperation0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot request fields of an entry without having a content type set first.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      QueryOperation<Object> queryOperation0 = new QueryOperation<Object>("Z^j]v|]j&\u0006bd%6. }-", (Object) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) queryOperation0;
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.where("Z^j]v|]j&\u0006bd%6. }-", queryOperation0, objectArray0);
      assertSame(fetchQuery0, fetchQuery1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      QueryOperation<CDAContentType> queryOperation0 = new QueryOperation<CDAContentType>("Yk;-,I+");
      CDAContentType[] cDAContentTypeArray0 = new CDAContentType[0];
      // Undeclared exception!
      try { 
        fetchQuery0.where("Yk;-,I+", queryOperation0, cDAContentTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Please specify at least one value to be searched for.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      QueryOperation<String> queryOperation0 = QueryOperation.IsLaterOrAt;
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        fetchQuery0.where("fields.Limit of %d is greater than %d.", queryOperation0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Value at position 0 must not be null.
         //
         verifyException("com.contentful.java.cda.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        fetchQuery0.select(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Please provide a selection to be selected.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.select("sys");
      FetchQuery<CDAContentType> fetchQuery2 = fetchQuery0.select("sys");
      assertSame(fetchQuery2, fetchQuery1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "sys.\"m:";
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.select(stringArray0);
      assertSame(fetchQuery0, fetchQuery1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      fetchQuery0.select("sys,");
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.select("sys,");
      assertSame(fetchQuery0, fetchQuery1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.select("fields.sys.Bzh>`]yp.CCH9Yk1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot request children of fields. ('fields.author'(\u2714) vs. 'fields.author.name'(\u2716))
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.select("fields.D");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot use field selection without specifying a content type first. Use '.withContentType(\"{typeid}\")' first.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      fetchQuery0.withLocale("hDz}lf&ZCYwV+");
      // Undeclared exception!
      try { 
        fetchQuery0.withLocale("W80CmR`9%q?)lOK]i3");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Locale \"hDz}lf&ZCYwV+\" is already present in query.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<CDAAsset> class0 = CDAAsset.class;
      FetchQuery<CDAAsset> fetchQuery0 = new FetchQuery<CDAAsset>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.withContentType("H");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // ContentType \"H\" is already present in query.
         //
         verifyException("com.contentful.java.cda.AbsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      fetchQuery0.withContentType("fields.Limit of %d is greater than %d.");
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.select("fields.D");
      assertSame(fetchQuery1, fetchQuery0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>((Class<CDAContentType>) null, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.path();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cda.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.linksToAssetId("sys,");
      assertSame(fetchQuery1, fetchQuery0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<CDAAsset> class0 = CDAAsset.class;
      FetchQuery<CDAAsset> fetchQuery0 = new FetchQuery<CDAAsset>(class0, (CDAClient) null);
      // Undeclared exception!
      try { 
        fetchQuery0.where((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<CDAContentType> class0 = CDAContentType.class;
      FetchQuery<CDAContentType> fetchQuery0 = new FetchQuery<CDAContentType>(class0, (CDAClient) null);
      FetchQuery<CDAContentType> fetchQuery1 = fetchQuery0.linksToEntryId("top");
      assertSame(fetchQuery0, fetchQuery1);
  }
}
