/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 03:42:39 GMT 2022
 */

package com.contentful.java.cda;

import org.junit.Test;
import static org.junit.Assert.*;
import com.contentful.java.cda.CDAArray;
import com.contentful.java.cda.CDAAsset;
import com.contentful.java.cda.CDAContentType;
import com.contentful.java.cda.CDAEntry;
import com.contentful.java.cda.CDAResource;
import com.contentful.java.cda.SynchronizedSpace;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayResource_ESTest extends ArrayResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SynchronizedSpace synchronizedSpace0 = new SynchronizedSpace();
      LinkedList<CDAContentType> linkedList0 = new LinkedList<CDAContentType>();
      LinkedList<CDAResource> linkedList1 = new LinkedList<CDAResource>(linkedList0);
      synchronizedSpace0.items = (List<CDAResource>) linkedList1;
      List<CDAResource> list0 = synchronizedSpace0.items();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SynchronizedSpace synchronizedSpace0 = new SynchronizedSpace();
      LinkedList<CDAContentType> linkedList0 = new LinkedList<CDAContentType>();
      LinkedList<CDAResource> linkedList1 = new LinkedList<CDAResource>(linkedList0);
      synchronizedSpace0.items = (List<CDAResource>) linkedList1;
      linkedList1.add((CDAResource) synchronizedSpace0);
      List<CDAResource> list0 = synchronizedSpace0.items();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SynchronizedSpace synchronizedSpace0 = new SynchronizedSpace();
      HashMap<String, CDAEntry> hashMap0 = new HashMap<String, CDAEntry>();
      synchronizedSpace0.entries = (Map<String, CDAEntry>) hashMap0;
      Map<String, CDAEntry> map0 = synchronizedSpace0.entries();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SynchronizedSpace synchronizedSpace0 = new SynchronizedSpace();
      HashMap<String, CDAEntry> hashMap0 = new HashMap<String, CDAEntry>();
      synchronizedSpace0.entries = (Map<String, CDAEntry>) hashMap0;
      CDAEntry cDAEntry0 = new CDAEntry();
      hashMap0.put("]T", cDAEntry0);
      Map<String, CDAEntry> map0 = synchronizedSpace0.entries();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SynchronizedSpace synchronizedSpace0 = new SynchronizedSpace();
      HashMap<String, CDAAsset> hashMap0 = new HashMap<String, CDAAsset>();
      synchronizedSpace0.assets = (Map<String, CDAAsset>) hashMap0;
      Map<String, CDAAsset> map0 = synchronizedSpace0.assets();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CDAArray cDAArray0 = new CDAArray();
      HashMap<String, CDAAsset> hashMap0 = new HashMap<String, CDAAsset>();
      cDAArray0.assets = (Map<String, CDAAsset>) hashMap0;
      CDAAsset cDAAsset0 = new CDAAsset();
      hashMap0.putIfAbsent("right", cDAAsset0);
      Map<String, CDAAsset> map0 = cDAArray0.assets();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SynchronizedSpace synchronizedSpace0 = new SynchronizedSpace();
      Map<String, CDAEntry> map0 = synchronizedSpace0.entries();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SynchronizedSpace synchronizedSpace0 = new SynchronizedSpace();
      List<CDAResource> list0 = synchronizedSpace0.items();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SynchronizedSpace synchronizedSpace0 = new SynchronizedSpace();
      Map<String, CDAAsset> map0 = synchronizedSpace0.assets();
      assertNull(map0);
  }
}
