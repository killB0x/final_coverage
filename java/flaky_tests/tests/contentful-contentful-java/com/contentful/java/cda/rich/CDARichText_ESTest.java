/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 03:27:53 GMT 2022
 */

package com.contentful.java.cda.rich;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contentful.java.cda.rich.CDARichMark;
import com.contentful.java.cda.rich.CDARichText;
import java.nio.CharBuffer;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CDARichText_ESTest extends CDARichText_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(445);
      LinkedList<CDARichMark> linkedList0 = new LinkedList<CDARichMark>();
      linkedList0.add((CDARichMark) null);
      CDARichText cDARichText0 = new CDARichText(charBuffer0, linkedList0);
      List<CDARichMark> list0 = cDARichText0.getMarks();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CDARichText cDARichText0 = null;
      try {
        cDARichText0 = new CDARichText((CharSequence) null, (List<CDARichMark>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<CDARichMark> linkedList0 = new LinkedList<CDARichMark>();
      CDARichText cDARichText0 = new CDARichText((CharSequence) null, linkedList0);
      CharSequence charSequence0 = cDARichText0.getText();
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<CDARichMark> linkedList0 = new LinkedList<CDARichMark>();
      CDARichText cDARichText0 = new CDARichText((CharSequence) null, linkedList0);
      List<CDARichMark> list0 = cDARichText0.getMarks();
      assertEquals(0, list0.size());
  }
}
