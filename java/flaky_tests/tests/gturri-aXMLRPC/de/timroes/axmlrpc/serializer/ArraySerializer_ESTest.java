/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 09:14:22 GMT 2022
 */

package de.timroes.axmlrpc.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.timroes.axmlrpc.serializer.ArraySerializer;
import de.timroes.axmlrpc.serializer.SerializerHandler;
import de.timroes.axmlrpc.xmlcreator.XmlElement;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.util.HashMap;
import javax.imageio.metadata.IIOMetadataNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArraySerializer_ESTest extends ArraySerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler(2961);
      ArraySerializer arraySerializer0 = new ArraySerializer(serializerHandler0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("i4");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("base64", "struct", sQLRecoverableException0);
      arraySerializer0.serialize(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler(498);
      ArraySerializer arraySerializer0 = new ArraySerializer(serializerHandler0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("nil");
      serializerHandler0.serialize(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler(217);
      ArraySerializer arraySerializer0 = new ArraySerializer(serializerHandler0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("nil");
      serializerHandler0.serialize(sQLNonTransientConnectionException0);
      Object object0 = new Object();
      arraySerializer0.serialize(sQLNonTransientConnectionException0);
      arraySerializer0.serialize(serializerHandler0);
      arraySerializer0.serialize(object0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(serializerHandler0.TYPE_INT2);
      arraySerializer0.deserialize(iIOMetadataNode0);
      Object object1 = null;
      XmlElement xmlElement0 = arraySerializer0.serialize(object1);
      Object object2 = null;
      arraySerializer0.serialize(object2);
      Object object3 = arraySerializer0.deserialize(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(serializerHandler0.TYPE_STRUCT);
      String string0 = "";
      String string1 = "";
      iIOMetadataNode1.getAttributeNodeNS(string0, string1);
      iIOMetadataNode1.isSupported(serializerHandler0.TYPE_NULL, serializerHandler0.TYPE_LONG);
      int int0 = 3755;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(serializerHandler0.TYPE_BASE64, serializerHandler0.TYPE_DATETIME, int0, hashMap0);
      sQLNonTransientConnectionException0.initCause(sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      XmlElement xmlElement1 = serializerHandler0.serialize(sQLNonTransientConnectionException1);
      arraySerializer0.deserialize(iIOMetadataNode1);
      arraySerializer0.deserialize(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode(serializerHandler0.TYPE_ARRAY);
      arraySerializer0.deserialize(iIOMetadataNode2);
      arraySerializer0.serialize(object3);
      XmlElement xmlElement2 = arraySerializer0.serialize(xmlElement0);
      arraySerializer0.serialize(xmlElement2);
      Object object4 = arraySerializer0.deserialize(iIOMetadataNode0);
      arraySerializer0.serialize(object4);
      arraySerializer0.serialize(object0);
      arraySerializer0.serialize(xmlElement1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler();
      ArraySerializer arraySerializer0 = new ArraySerializer(serializerHandler0);
      // Undeclared exception!
      try { 
        arraySerializer0.serialize((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler((-1478));
      ArraySerializer arraySerializer0 = new ArraySerializer(serializerHandler0);
      // Undeclared exception!
      try { 
        arraySerializer0.serialize(serializerHandler0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler(856);
      ArraySerializer arraySerializer0 = new ArraySerializer(serializerHandler0);
      // Undeclared exception!
      try { 
        arraySerializer0.serialize((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler();
      ArraySerializer arraySerializer0 = new ArraySerializer(serializerHandler0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        arraySerializer0.deserialize(iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.axmlrpc.serializer.ArraySerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler(0);
      ArraySerializer arraySerializer0 = new ArraySerializer(serializerHandler0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        arraySerializer0.deserialize(iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.axmlrpc.serializer.ArraySerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SerializerHandler serializerHandler0 = new SerializerHandler(377);
      ArraySerializer arraySerializer0 = new ArraySerializer(serializerHandler0);
      String string0 = "Zh<}*eh[O-qe-8\"<";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Zh<}*eh[O-qe-8\"<");
      try { 
        serializerHandler0.deserialize(iIOMetadataNode0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Value tag is missing around value.
         //
         verifyException("de.timroes.axmlrpc.serializer.SerializerHandler", e);
      }
  }
}
