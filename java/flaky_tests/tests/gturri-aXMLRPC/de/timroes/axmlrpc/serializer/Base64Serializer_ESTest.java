/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 09:30:54 GMT 2022
 */

package de.timroes.axmlrpc.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.timroes.axmlrpc.serializer.Base64Serializer;
import javax.imageio.metadata.IIOMetadataNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64Serializer_ESTest extends Base64Serializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Base64Serializer base64Serializer0 = new Base64Serializer();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Object object0 = base64Serializer0.deserialize(iIOMetadataNode0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Base64Serializer base64Serializer0 = new Base64Serializer();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        base64Serializer0.serialize(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class [Ljava.lang.Byte; (java.lang.Object and [Ljava.lang.Byte; are in module java.base of loader 'bootstrap')
         //
         verifyException("de.timroes.axmlrpc.serializer.Base64Serializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Base64Serializer base64Serializer0 = new Base64Serializer();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      try { 
        base64Serializer0.deserialize(iIOMetadataNode0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Element must contain only text elements.
         //
         verifyException("de.timroes.axmlrpc.XMLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Base64Serializer base64Serializer0 = new Base64Serializer();
      // Undeclared exception!
      try { 
        base64Serializer0.serialize((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.base64.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Base64Serializer base64Serializer0 = new Base64Serializer();
      // Undeclared exception!
      try { 
        base64Serializer0.deserialize((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.axmlrpc.serializer.Base64Serializer", e);
      }
  }
}
