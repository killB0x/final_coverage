/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 09:09:13 GMT 2022
 */

package de.timroes.axmlrpc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.timroes.axmlrpc.XMLRPCCallback;
import de.timroes.axmlrpc.XMLRPCClient;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import javax.net.ssl.KeyManager;
import javax.net.ssl.TrustManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XMLRPCClient_ESTest extends XMLRPCClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0, "*4U*", 64);
      Object[] objectArray0 = new Object[3];
      xMLRPCClient0.setTimeout((-1863));
      try { 
        xMLRPCClient0.call("+Bx$L", objectArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("de.timroes.axmlrpc.XMLRPCClient$Caller", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient((URL) null, "", 200);
      xMLRPCClient0.setLoginData("", "");
      assertEquals(32, XMLRPCClient.FLAGS_FORWARD);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      xMLRPCClient0.setTimeout(8192);
      try { 
        xMLRPCClient0.call("value", (Object[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("de.timroes.axmlrpc.XMLRPCClient$Caller", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "}S%1");
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL1, (-198599264));
      XMLRPCCallback xMLRPCCallback0 = mock(XMLRPCCallback.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[0];
      xMLRPCClient0.callAsync(xMLRPCCallback0, "}S%1", objectArray0);
      xMLRPCClient0.getURL();
      xMLRPCClient0.cancel(0L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0, (-198599264));
      xMLRPCClient0.cancel(0L);
      assertEquals(16384, XMLRPCClient.FLAGS_ACCEPT_NULL_DATES);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient((URL) null, "Missing type element inside of value element.", (-364));
      URL uRL0 = xMLRPCClient0.getURL();
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("z6+%1ycATa#K,5:", "V@fPHE!#OsaW^t", 256, "V@fPHnHE!#OsaW^t", uRLStreamHandler0);
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0, 256);
      URL uRL1 = xMLRPCClient0.getURL();
      assertEquals(256, uRL1.getPort());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("<3Y", "<3Y", 0, "3K", uRLStreamHandler0);
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0, "3K", 956);
      URL uRL1 = xMLRPCClient0.getURL();
      assertSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0, (-2217));
      System.setCurrentTimeMillis((-2229L));
      XMLRPCCallback xMLRPCCallback0 = mock(XMLRPCCallback.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[8];
      long long0 = xMLRPCClient0.callAsync(xMLRPCCallback0, "The server responded with a http 301 or 302 status code, but forwarding has not been enabled (FLAGS_FORWARD).", objectArray0);
      assertEquals((-2229L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      // Undeclared exception!
      try { 
        xMLRPCClient0.setUserAgentString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      XMLRPCClient xMLRPCClient0 = null;
      try {
        xMLRPCClient0 = new XMLRPCClient(uRL0, (String) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XMLRPCClient xMLRPCClient0 = null;
      try {
        xMLRPCClient0 = new XMLRPCClient(uRL0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, "}S%V");
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL1, (-198599255));
      XMLRPCCallback xMLRPCCallback0 = mock(XMLRPCCallback.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[0];
      xMLRPCClient0.callAsync(xMLRPCCallback0, "}S%V", objectArray0);
      xMLRPCClient0.getURL();
      xMLRPCClient0.setCustomHttpHeader("}S%V", "}S%V");
      xMLRPCClient0.getCookies();
      xMLRPCClient0.getURL();
      xMLRPCClient0.getCookies();
      xMLRPCClient0.setCustomHttpHeader("}S%V", "}S%V");
      xMLRPCClient0.cancel(0L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        xMLRPCClient0.call("value", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The URL is not valid for a http connection.
         //
         verifyException("de.timroes.axmlrpc.XMLRPCClient$Caller", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      xMLRPCClient0.setTimeout(2147483645);
      // Undeclared exception!
      try { 
        xMLRPCClient0.call("value", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      Proxy proxy0 = Proxy.NO_PROXY;
      xMLRPCClient0.setProxy(proxy0);
      try { 
        xMLRPCClient0.call("value", (Object[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("de.timroes.axmlrpc.XMLRPCClient$Caller", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0, (-2078810991));
      Object[] objectArray0 = new Object[9];
      try { 
        xMLRPCClient0.call("value", objectArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("de.timroes.axmlrpc.XMLRPCClient$Caller", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      // Undeclared exception!
      try { 
        xMLRPCClient0.installCustomKeyManagers((KeyManager[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.axmlrpc.XMLRPCClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0, (-2078810991));
      xMLRPCClient0.installCustomKeyManagers((KeyManager[]) null);
      assertEquals(776, XMLRPCClient.FLAGS_APACHE_WS);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      xMLRPCClient0.installCustomKeyManager((KeyManager) null);
      assertEquals(32, XMLRPCClient.FLAGS_FORWARD);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0, (-772));
      xMLRPCClient0.installCustomKeyManager((KeyManager) null);
      assertEquals(1024, XMLRPCClient.FLAGS_USE_SYSTEM_PROXY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      // Undeclared exception!
      try { 
        xMLRPCClient0.installCustomTrustManagers((TrustManager[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.axmlrpc.XMLRPCClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0, "@G", 255);
      xMLRPCClient0.installCustomTrustManagers((TrustManager[]) null);
      assertEquals(1, XMLRPCClient.FLAGS_STRICT);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      xMLRPCClient0.installCustomTrustManager((TrustManager) null);
      assertEquals(192, XMLRPCClient.FLAGS_SSL_IGNORE_ERRORS);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient((URL) null, "", 200);
      TrustManager trustManager0 = mock(TrustManager.class, new ViolatedAssumptionAnswer());
      xMLRPCClient0.installCustomTrustManager(trustManager0);
      assertEquals(2, XMLRPCClient.FLAGS_8BYTE_INT);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      // Undeclared exception!
      try { 
        xMLRPCClient0.setCustomHttpHeader("value", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      // Undeclared exception!
      try { 
        xMLRPCClient0.setCustomHttpHeader("Host", "value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You cannot modify the Host, Content-Type or Content-Length header.
         //
         verifyException("de.timroes.axmlrpc.XMLRPCClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      // Undeclared exception!
      try { 
        xMLRPCClient0.setCustomHttpHeader("Content-Length", "Content-Length");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You cannot modify the Host, Content-Type or Content-Length header.
         //
         verifyException("de.timroes.axmlrpc.XMLRPCClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      // Undeclared exception!
      try { 
        xMLRPCClient0.setCustomHttpHeader("Content-Type", "Content-Type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You cannot modify the Host, Content-Type or Content-Length header.
         //
         verifyException("de.timroes.axmlrpc.XMLRPCClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      xMLRPCClient0.clearCookies();
      assertEquals(1, XMLRPCClient.FLAGS_STRICT);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      xMLRPCClient0.clearLoginData();
      assertEquals(4096, XMLRPCClient.FLAGS_NO_STRING_ENCODE);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0, "8ethodRBsponse");
      xMLRPCClient0.setUserAgentString("value");
      assertEquals(2, XMLRPCClient.FLAGS_8BYTE_INT);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient(uRL0);
      long long0 = xMLRPCClient0.callAsync((XMLRPCCallback) null, "value", (Object[]) null);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XMLRPCClient xMLRPCClient0 = new XMLRPCClient((URL) null);
      // Undeclared exception!
      try { 
        xMLRPCClient0.call("value", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
