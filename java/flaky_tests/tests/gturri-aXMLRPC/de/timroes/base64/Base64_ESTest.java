/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 09:16:24 GMT 2022
 */

package de.timroes.base64;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.timroes.base64.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("");
      byte[] byteArray1 = Base64.encodeAsBytes(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeAsBytes("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      String string0 = Base64.encode(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("");
      String string0 = Base64.encode(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = Base64.encode("HZQ=");
      assertEquals("SFpRPQ==", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Base64.decodeAsString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeAsBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.base64.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeAsBytes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.base64.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encode((Byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.base64.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.base64.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.base64.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeAsString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.base64.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.timroes.base64.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeAsBytes(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-1), (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("AAABAA==");
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode("o/mo1@5G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The argument contains illegal characters.
         //
         verifyException("de.timroes.base64.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) byteArray0[0];
      byteArray1[1] = (Byte) (byte) (-108);
      String string0 = Base64.encode(byteArray1);
      assertEquals("AJQ=", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("FAUVBhA1BDAUJBkSGjYRCRQ1FTATBREFDBQ9FAwUCRIVFjEOFRUZFhYlIRcRJjEhFhUdChol\nKQcVJjUaDCYhMBgWNTQcNgkXDRcZIxIEGTkYMw0SDBYRLhkDESUWBj03ExURCR4kOQQVEwkO\nHiYcNRI3JDgPEzT/");
      assertEquals(120, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeAsString("M%i'!Atb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The argument contains illegal characters.
         //
         verifyException("de.timroes.base64.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode(",B[<YUz0CiH?Wq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The length of the input string must be a multiple of four.
         //
         verifyException("de.timroes.base64.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = Base64.encode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = Base64.decodeAsString("FAUVBhA1BDAJBkSGjYRCRQ1FTATBREFDBQ9FAwUCRIVFjEOFRUZFhYlIRcRJjEhFhUdCholKQcVJjUaDCYhMBgWNTQcNgkXDRcZIxIEGTkYMw0SDBYRLhkDESUWBj03ExURCR4kOQQVEwkOHiYcNRI3JDgPEzT/=");
      assertEquals("\u0014\u0005\u0015\u0006\u00105\u00040\t\u0006D\uFFFD\uFFFD\uFFFDBE\rEL\u0004\uFFFDDAC\u0005\u000FE\u0003\u0005\u0002D\uFFFDE\uFFFDC\uFFFDEFE\uFFFD\uFFFDHE\uFFFDI\uFFFDHE\uFFFDGB\uFFFD\uFFFDJA\uFFFDI\uFFFDF\uFFFD\t\uFFFDL\u0006\u0005\uFFFDM\u0007\r\uFFFDE\uFFFDE\uFFFDH\uFFFD\uFFFD\u0006NF\f\uFFFDD\uFFFD\u0005\uFFFDK\uFFFD@\uFFFDIE\uFFFD\uFFFDM\uFFFD\uFFFDDBG\uFFFD\u000EA\u0005D\uFFFDC\uFFFD\uFFFD\uFFFD\rD\uFFFD\uFFFD\u000E\u0003\uFFFD\uFFFD?", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeAsBytes("PUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8==");
      String string0 = Base64.encode(byteArray0);
      assertEquals("FAUVBhA1BDAUJBkSGjYRCRQ1FTATBREFDBQ9FAwUCRIVFjEOFRUZFhYlIRcRJjEhFhUdChol\nKQcVJjUaDCYhMBgWNTQcNgkXDRcZIxIEGTkYMw0SDBYRLhkDESUWBj03ExURCR4kOQQVEwkO\nHiYcNRI3JDgPEzT/", string0);
      assertEquals(120, byteArray0.length);
  }
}
