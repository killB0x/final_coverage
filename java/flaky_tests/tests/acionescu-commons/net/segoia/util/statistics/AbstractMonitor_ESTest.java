/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 06:48:47 GMT 2022
 */

package net.segoia.util.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import net.segoia.util.statistics.AggregatedMonitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractMonitor_ESTest extends AbstractMonitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      aggregatedMonitor0.setRefreshInterval(0L);
      aggregatedMonitor0.refresh();
      assertEquals(Float.NaN, aggregatedMonitor0.getRps(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      System.setCurrentTimeMillis(201L);
      aggregatedMonitor0.refresh();
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
      assertEquals(0.0F, aggregatedMonitor0.getRps(), 0.01F);
      assertTrue(aggregatedMonitor0.isEnabled());
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("net.segoia.util.statistics.AbstractMonitor");
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
      
      aggregatedMonitor0.setRefreshInterval(0L);
      aggregatedMonitor0.getRefreshInterval();
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      aggregatedMonitor0.setRefreshInterval((-1896L));
      long long0 = aggregatedMonitor0.getRefreshInterval();
      assertEquals((-1896L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("q");
      System.setCurrentTimeMillis(2433L);
      float float0 = aggregatedMonitor0.getAverageRps();
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
      assertEquals(-0.0F, float0, 0.01F);
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
      assertTrue(aggregatedMonitor0.isEnabled());
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("net.segoia.util.s!atisti;s$AbstractMonitor");
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
      
      aggregatedMonitor0.setAutoRefresh(false);
      boolean boolean0 = aggregatedMonitor0.getAutoRefresh();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      long long0 = aggregatedMonitor0.getLastRefreshTimestamp();
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
      assertTrue(aggregatedMonitor0.isEnabled());
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
      assertEquals(1392409281320L, long0);
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("net.segoia.util.s!atisti;s$AbstractMonitor");
      boolean boolean0 = aggregatedMonitor0.getAutoRefresh();
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
      assertTrue(aggregatedMonitor0.isEnabled());
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      float float0 = aggregatedMonitor0.getRps();
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
      assertTrue(aggregatedMonitor0.isEnabled());
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor(";@,*");
      assertTrue(aggregatedMonitor0.getAutoRefresh());
      
      aggregatedMonitor0.setAutoRefresh(false);
      float float0 = aggregatedMonitor0.getMinRps();
      assertFalse(aggregatedMonitor0.getAutoRefresh());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("net.segoia.util.s!atisti;s$AbstractMonitor");
      float float0 = aggregatedMonitor0.getMaxRps();
      assertEquals(1.4E-45F, float0, 0.01F);
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
      assertTrue(aggregatedMonitor0.isEnabled());
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("K\"<*5ElbC");
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
      
      aggregatedMonitor0.setAutoRefresh(false);
      float float0 = aggregatedMonitor0.getMaxRps();
      assertFalse(aggregatedMonitor0.getAutoRefresh());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      long long0 = aggregatedMonitor0.getRefreshInterval();
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
      assertEquals(5000L, long0);
      assertTrue(aggregatedMonitor0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      boolean boolean0 = aggregatedMonitor0.isEnabled();
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
      assertTrue(boolean0);
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("e4");
      aggregatedMonitor0.getMinRpsTimestamp();
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
      assertTrue(aggregatedMonitor0.isEnabled());
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      assertTrue(aggregatedMonitor0.isEnabled());
      
      aggregatedMonitor0.setEnabled(false);
      boolean boolean0 = aggregatedMonitor0.isEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
      
      aggregatedMonitor0.setAutoRefresh(false);
      float float0 = aggregatedMonitor0.getRps();
      assertFalse(aggregatedMonitor0.getAutoRefresh());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      aggregatedMonitor0.afterRefresh();
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
      assertTrue(aggregatedMonitor0.isEnabled());
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      float float0 = aggregatedMonitor0.getMinRps();
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
      assertEquals(3.4028235E38F, float0, 0.01F);
      assertTrue(aggregatedMonitor0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      aggregatedMonitor0.getMaxRpsTimestamp();
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
      assertTrue(aggregatedMonitor0.isEnabled());
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      float float0 = aggregatedMonitor0.getAverageRps();
      assertTrue(aggregatedMonitor0.isEnabled());
      assertEquals(Float.NaN, float0, 0.01F);
      assertEquals(5000L, aggregatedMonitor0.getRefreshInterval());
      assertEquals(1.4E-45F, aggregatedMonitor0.getMaxRps(), 0.01F);
      assertEquals(3.4028235E38F, aggregatedMonitor0.getMinRps(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("$\"pm");
      aggregatedMonitor0.setRefreshInterval((-1896L));
      aggregatedMonitor0.refresh();
      assertEquals((-1896L), aggregatedMonitor0.getRefreshInterval());
  }
}
