/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 06:47:15 GMT 2022
 */

package net.segoia.util.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.statistics.AggregatedMonitor;
import net.segoia.util.statistics.MonitorBehaviour;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AggregatedMonitor_ESTest extends AggregatedMonitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("Monitor '");
      aggregatedMonitor0.getStartTimestamp();
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis((-187L));
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("M/2\"fY");
      long long0 = aggregatedMonitor0.getStartTimestamp();
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
      assertEquals((-187L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("5=XQn>542KjX]^HTe");
      aggregatedMonitor0.addChildMonitor(aggregatedMonitor0);
      aggregatedMonitor0.getChildrenCount();
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("5=XQn>542KjX]^HTe");
      aggregatedMonitor0.addChildMonitor(aggregatedMonitor0);
      aggregatedMonitor0.containsMonitor(aggregatedMonitor0);
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("%\"OshUy'Nj}T>PXfmL");
      // Undeclared exception!
      try { 
        aggregatedMonitor0.removeChildCounterMonitor((MonitorBehaviour) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("07\"~{@A.6C\"PKH~HV;");
      // Undeclared exception!
      try { 
        aggregatedMonitor0.containsMonitor((MonitorBehaviour) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("B");
      // Undeclared exception!
      try { 
        aggregatedMonitor0.addChildMonitor((MonitorBehaviour) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("M/2\"fY");
      long long0 = aggregatedMonitor0.getMaxExecutionTime();
      assertEquals((-9223372036854775808L), long0);
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("M/2\"fY");
      aggregatedMonitor0.getLastExecutionTimestamp();
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("M/2\"fY");
      aggregatedMonitor0.getPendingCallsCount();
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("M/2\"fY");
      aggregatedMonitor0.getTotalExecutionTime();
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("M/2\"fY");
      long long0 = aggregatedMonitor0.getMinExecutionTime();
      assertEquals(9223372036854775807L, long0);
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("M/2\"fY");
      aggregatedMonitor0.beforeRefresh();
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = null;
      try {
        aggregatedMonitor0 = new AggregatedMonitor("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name of the counter cannot be null
         //
         verifyException("net.segoia.util.statistics.AggregatedMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = null;
      try {
        aggregatedMonitor0 = new AggregatedMonitor((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name of the counter cannot be null
         //
         verifyException("net.segoia.util.statistics.AggregatedMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("o");
      aggregatedMonitor0.getLastExecutionTime();
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("M/2\"fY");
      aggregatedMonitor0.getMinExecutionTimestamp();
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("5=XQn>542KjX]^HTe");
      aggregatedMonitor0.removeChildCounterMonitor(aggregatedMonitor0);
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("M/2\"fY");
      long long0 = aggregatedMonitor0.getStartTimestamp();
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
      assertEquals(1392409281320L, long0);
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("5AJQR(Z");
      aggregatedMonitor0.getCallCount();
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("M/2\"fY");
      aggregatedMonitor0.getMaxExecutionTimestamp();
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("5=XQn>542KjX]^HTe");
      aggregatedMonitor0.containsMonitor(aggregatedMonitor0);
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("5AJQR(Z");
      aggregatedMonitor0.addChildMonitor(aggregatedMonitor0);
      aggregatedMonitor0.beforeRefresh();
      assertEquals(0L, aggregatedMonitor0.getTotalExecutionTime());
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
      assertEquals(0L, aggregatedMonitor0.getPendingCallsCount());
      assertEquals(0L, aggregatedMonitor0.getCallCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("5AJQR(Z");
      float float0 = aggregatedMonitor0.getAverageExecutionTime();
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("5AJQR(Z");
      aggregatedMonitor0.getName();
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AggregatedMonitor aggregatedMonitor0 = new AggregatedMonitor("' not enabled.");
      aggregatedMonitor0.getChildrenCount();
      assertEquals((-9223372036854775808L), aggregatedMonitor0.getMaxExecutionTime());
      assertEquals(9223372036854775807L, aggregatedMonitor0.getMinExecutionTime());
  }
}
