/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:23:16 GMT 2022
 */

package net.segoia.util.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import net.segoia.util.data.ProxyMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProxyMap_ESTest extends ProxyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ProxyMap<Integer, Integer> proxyMap0 = new ProxyMap<Integer, Integer>(hashMap0);
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)proxyMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      ProxyMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> proxyMap0 = new ProxyMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(hashMap0);
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      proxyMap0.put(abstractMap_SimpleImmutableEntry1, integer0);
      int int0 = proxyMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      HashMap<Integer, Comparable<Object>> hashMap0 = new HashMap<Integer, Comparable<Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      hashMap0.put(integer0, comparable0);
      ProxyMap<Integer, Comparable<Object>> proxyMap0 = new ProxyMap<Integer, Comparable<Object>>(hashMap0);
      Comparable<Object> comparable1 = proxyMap0.remove((Object) integer0);
      assertSame(comparable1, comparable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-3458));
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      ProxyMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> proxyMap0 = new ProxyMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      BiFunction<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> biFunction0 = (BiFunction<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      proxyMap0.merge(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0, biFunction0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = proxyMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ProxyMap<Integer, Integer> proxyMap0 = new ProxyMap<Integer, Integer>(hashMap0);
      Integer integer0 = proxyMap0.get(hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Comparable<Integer>, HashMap<Integer, Integer>> hashMap1 = new HashMap<Comparable<Integer>, HashMap<Integer, Integer>>();
      hashMap1.put((Comparable<Integer>) null, hashMap0);
      ProxyMap<Comparable<Integer>, HashMap<Integer, Integer>> proxyMap0 = new ProxyMap<Comparable<Integer>, HashMap<Integer, Integer>>(hashMap1);
      HashMap<Integer, Integer> hashMap2 = proxyMap0.get((Object) null);
      assertSame(hashMap2, hashMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ProxyMap<Integer, Integer> proxyMap0 = new ProxyMap<Integer, Integer>(hashMap0);
      boolean boolean0 = proxyMap0.containsKey(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ProxyMap<Integer, Integer> proxyMap0 = new ProxyMap<Integer, Integer>(hashMap0);
      // Undeclared exception!
      try { 
        proxyMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ProxyMap<Object, String> proxyMap0 = new ProxyMap<Object, String>(hashMap0);
      // Undeclared exception!
      try { 
        proxyMap0.put(hashMap0, "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProxyMap<Integer, Integer> proxyMap0 = null;
      try {
        proxyMap0 = new ProxyMap<Integer, Integer>((Map<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(1);
      ProxyMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> proxyMap0 = new ProxyMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0);
      Collection<AbstractMap.SimpleImmutableEntry<Integer, Integer>> collection0 = proxyMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      ProxyMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> proxyMap0 = new ProxyMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0);
      Set<Integer> set0 = proxyMap0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ProxyMap<Integer, Integer> proxyMap0 = new ProxyMap<Integer, Integer>(hashMap0);
      int int0 = proxyMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Comparable<Integer>, HashMap<Integer, Object>> hashMap0 = new HashMap<Comparable<Integer>, HashMap<Integer, Object>>();
      ProxyMap<Comparable<Integer>, HashMap<Integer, Object>> proxyMap0 = new ProxyMap<Comparable<Integer>, HashMap<Integer, Object>>(hashMap0);
      boolean boolean0 = proxyMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ProxyMap<Integer, Integer> proxyMap0 = new ProxyMap<Integer, Integer>(hashMap0);
      assertTrue(proxyMap0.isEmpty());
      
      Integer integer0 = new Integer((-3540));
      proxyMap0.put(integer0, integer0);
      boolean boolean0 = proxyMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ProxyMap<Integer, Integer> proxyMap0 = new ProxyMap<Integer, Integer>(hashMap0);
      proxyMap0.putIfAbsent((Integer) null, (Integer) null);
      boolean boolean0 = proxyMap0.containsValue((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      ProxyMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> proxyMap0 = new ProxyMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0);
      ProxyMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> proxyMap1 = new ProxyMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(proxyMap0);
      boolean boolean0 = proxyMap1.containsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ProxyMap<Integer, Integer> proxyMap0 = new ProxyMap<Integer, Integer>(hashMap0);
      Integer integer0 = new Integer((-3540));
      proxyMap0.put(integer0, integer0);
      boolean boolean0 = proxyMap0.containsKey(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ProxyMap<Integer, Integer> proxyMap0 = new ProxyMap<Integer, Integer>(hashMap0);
      proxyMap0.putAll(hashMap0);
      assertEquals(0, proxyMap0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ProxyMap<Integer, Integer> proxyMap0 = new ProxyMap<Integer, Integer>(hashMap0);
      String string0 = proxyMap0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Comparable<Integer>, HashMap<Integer, Integer>> hashMap0 = new HashMap<Comparable<Integer>, HashMap<Integer, Integer>>();
      ProxyMap<Comparable<Integer>, HashMap<Integer, Integer>> proxyMap0 = new ProxyMap<Comparable<Integer>, HashMap<Integer, Integer>>(hashMap0);
      HashMap<Integer, Integer> hashMap1 = proxyMap0.remove((Object) hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, HashMap<Integer, Integer>> hashMap0 = new HashMap<Integer, HashMap<Integer, Integer>>();
      ProxyMap<Integer, HashMap<Integer, Integer>> proxyMap0 = new ProxyMap<Integer, HashMap<Integer, Integer>>(hashMap0);
      proxyMap0.clear();
      assertTrue(proxyMap0.isEmpty());
  }
}
