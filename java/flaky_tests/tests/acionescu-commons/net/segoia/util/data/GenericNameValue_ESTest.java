/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 05:51:27 GMT 2022
 */

package net.segoia.util.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.data.GenericNameValue;
import net.segoia.util.data.NameValue;
import net.segoia.util.data.type.ParameterType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericNameValue_ESTest extends GenericNameValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      assertNull(genericNameValue0.getName());
      
      ParameterType parameterType0 = new ParameterType((String) null);
      ParameterType.fromString("List");
      parameterType0.setType((String) null);
      genericNameValue0.setComplexType(parameterType0);
      GenericNameValue genericNameValue1 = GenericNameValue.copy(genericNameValue0);
      genericNameValue1.setType("String");
      GenericNameValue genericNameValue2 = genericNameValue1.copy();
      genericNameValue2.name = "MULTIPLE";
      GenericNameValue genericNameValue3 = GenericNameValue.copy(genericNameValue0);
      genericNameValue2.toString();
      genericNameValue3.name = "v~m f_>*zCXH|(n=";
      GenericNameValue genericNameValue4 = genericNameValue0.copy();
      genericNameValue3.setName(" ");
      GenericNameValue genericNameValue5 = GenericNameValue.copy(genericNameValue3);
      GenericNameValue genericNameValue6 = new GenericNameValue("net.segoia.util.data.GenericNameValue");
      genericNameValue6.initializeComplexValues();
      genericNameValue5.value = (Object) genericNameValue6;
      genericNameValue4.value = (Object) genericNameValue5;
      genericNameValue0.copy();
      genericNameValue1.initializeComplexValues();
      genericNameValue6.isList();
      genericNameValue6.initializeComplexValues();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      genericNameValue0.setType("String");
      genericNameValue0.initializeComplexValues();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      ParameterType parameterType0 = new ParameterType("Number");
      parameterType0.fullGenericTypes();
      parameterType0.setType("");
      genericNameValue0.initializeComplexValues();
      genericNameValue0.getComplexType();
      genericNameValue0.setComplexType(parameterType0);
      genericNameValue0.initializeComplexValues();
      genericNameValue0.initializeComplexValues();
      genericNameValue0.getTypeForMatchingRule("Number");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      Object object0 = genericNameValue0.value;
      genericNameValue0.setValue((Object) null);
      genericNameValue0.toString();
      Object object1 = new Object();
      genericNameValue0.value = object1;
      genericNameValue0.isList();
      genericNameValue0.initializeComplexValues();
      GenericNameValue genericNameValue1 = genericNameValue0.copy();
      GenericNameValue genericNameValue2 = GenericNameValue.copy(genericNameValue1);
      ParameterType parameterType0 = new ParameterType("Number");
      genericNameValue2.compareTo((NameValue<Object>) genericNameValue0);
      genericNameValue1.getComplexType();
      parameterType0.matches((ParameterType) null);
      genericNameValue2.setName("U~2)kJ**");
      genericNameValue1.setComplexType(parameterType0);
      ParameterType parameterType1 = new ParameterType();
      ParameterType.fromString("null null null");
      parameterType1.fullGenericTypes();
      genericNameValue2.setComplexType(parameterType1);
      genericNameValue0.toString();
      GenericNameValue genericNameValue3 = genericNameValue0.copy();
      genericNameValue0.isMap();
      genericNameValue1.initializeComplexValues();
      GenericNameValue genericNameValue4 = new GenericNameValue("net.segoia.util.parser.event.GroupEvent");
      genericNameValue4.initializeComplexValues();
      genericNameValue4.initializeComplexValues();
      genericNameValue3.equals(genericNameValue4);
      GenericNameValue genericNameValue5 = GenericNameValue.copy(genericNameValue3);
      genericNameValue5.setType("null null null");
      genericNameValue0.setComplexType(parameterType0);
      genericNameValue5.initializeComplexValues();
      genericNameValue0.initializeComplexValues();
      genericNameValue1.toString();
      genericNameValue4.copy();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("+jdAt7.2G6B93[~>le", "+jdAt7.2G6B93[~>le");
      genericNameValue0.setType("Number");
      genericNameValue0.initializeComplexValues();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      Object object0 = genericNameValue0.value;
      genericNameValue0.setValue((Object) null);
      genericNameValue0.toString();
      Object object1 = new Object();
      genericNameValue0.value = object1;
      genericNameValue0.isList();
      genericNameValue0.initializeComplexValues();
      GenericNameValue genericNameValue1 = genericNameValue0.copy();
      GenericNameValue genericNameValue2 = GenericNameValue.copy(genericNameValue1);
      ParameterType parameterType0 = new ParameterType("Number");
      genericNameValue2.compareTo((NameValue<Object>) genericNameValue0);
      ParameterType parameterType1 = new ParameterType("Number");
      parameterType0.matches(parameterType1);
      genericNameValue2.setName("U~2)kJ**");
      genericNameValue1.setComplexType(parameterType0);
      ParameterType parameterType2 = new ParameterType();
      parameterType2.fullGenericTypes();
      genericNameValue2.setComplexType(parameterType2);
      genericNameValue0.toString();
      genericNameValue0.equals((Object) null);
      GenericNameValue genericNameValue3 = genericNameValue0.copy();
      genericNameValue0.isMap();
      GenericNameValue genericNameValue4 = new GenericNameValue("net.segoia.util.parser.event.GroupEvent");
      genericNameValue4.initializeComplexValues();
      genericNameValue4.initializeComplexValues();
      genericNameValue3.equals(genericNameValue4);
      GenericNameValue genericNameValue5 = GenericNameValue.copy(genericNameValue3);
      genericNameValue5.setType("null null null");
      genericNameValue0.setComplexType(parameterType0);
      genericNameValue5.initializeComplexValues();
      genericNameValue0.initializeComplexValues();
      genericNameValue1.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("Number");
      genericNameValue0.setType("Number");
      genericNameValue0.initializeComplexValues();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      GenericNameValue genericNameValue1 = genericNameValue0.copy();
      assertTrue(genericNameValue1.equals((Object)genericNameValue0));
      assertNotSame(genericNameValue1, genericNameValue0);
      
      ParameterType parameterType0 = new ParameterType();
      genericNameValue1.setComplexType(parameterType0);
      boolean boolean0 = genericNameValue0.equals(genericNameValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      ParameterType parameterType0 = new ParameterType();
      genericNameValue0.setComplexType(parameterType0);
      assertFalse(genericNameValue0.isList());
      
      // Undeclared exception!
      try { 
        genericNameValue0.initializeComplexValues();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("*:gRoU", (Object) null);
      String string0 = genericNameValue0.toString();
      assertEquals("*:gRoU null null", string0);
      
      genericNameValue0.setType("RVn#yMN=y[uj6q<w?or");
      genericNameValue0.setName("{Q4jd#");
      ParameterType parameterType0 = new ParameterType("net.segoia.util.data.GenericNameValueContext");
      parameterType0.setType("Object");
      ParameterType.fromString("");
      parameterType0.matches((ParameterType) null);
      ParameterType.fromString("");
      genericNameValue0.setComplexType((ParameterType) null);
      genericNameValue0.setComplexType((ParameterType) null);
      genericNameValue0.initializeComplexValues();
      genericNameValue0.setType("L'K[E3");
      ParameterType parameterType1 = genericNameValue0.getComplexType();
      genericNameValue0.setValue((Object) null);
      GenericNameValue genericNameValue1 = GenericNameValue.copy(genericNameValue0);
      genericNameValue0.getComplexType();
      boolean boolean0 = genericNameValue0.isList();
      assertFalse(boolean0);
      
      genericNameValue0.setComplexType((ParameterType) null);
      genericNameValue0.setComplexType(parameterType1);
      boolean boolean1 = genericNameValue0.equals(genericNameValue1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      GenericNameValue genericNameValue1 = genericNameValue0.copy();
      assertTrue(genericNameValue1.equals((Object)genericNameValue0));
      
      genericNameValue1.setType("net.segoia.util.data.GenericNameValue");
      boolean boolean0 = genericNameValue1.equals(genericNameValue0);
      assertFalse(genericNameValue1.equals((Object)genericNameValue0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("");
      Object object0 = genericNameValue0.value;
      GenericNameValue genericNameValue1 = new GenericNameValue("", (Object) null);
      genericNameValue0.setType("");
      genericNameValue0.getType();
      genericNameValue1.initializeComplexValues();
      GenericNameValue genericNameValue2 = genericNameValue1.copy();
      NameValue.copy((NameValue<?>) genericNameValue2);
      genericNameValue0.initializeComplexValues();
      genericNameValue1.setValueAndOverrideType(genericNameValue0);
      genericNameValue2.getType();
      genericNameValue1.setValueAndOverrideType((Object) null);
      NameValue.copy((NameValue<?>) genericNameValue2);
      genericNameValue2.setValue((Object) null);
      genericNameValue1.compareTo((NameValue<Object>) genericNameValue2);
      genericNameValue1.initializeComplexValues();
      genericNameValue0.name = "";
      genericNameValue2.setValue((Object) null);
      GenericNameValue genericNameValue3 = GenericNameValue.copy(genericNameValue2);
      genericNameValue3.copy();
      assertFalse(genericNameValue2.equals((Object)genericNameValue1));
      assertFalse(genericNameValue3.equals((Object)genericNameValue1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("KOO_1Wb~8x,|w5ln=U");
      genericNameValue0.isList();
      GenericNameValue genericNameValue1 = new GenericNameValue("KOO_1Wb~8x,|w5ln=U", genericNameValue0);
      genericNameValue0.setValueAndOverrideType(genericNameValue1);
      // Undeclared exception!
      try { 
        genericNameValue0.equals(genericNameValue1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue(") P\"-4CY'-", (Object) null);
      GenericNameValue genericNameValue1 = GenericNameValue.copy(genericNameValue0);
      GenericNameValue genericNameValue2 = GenericNameValue.copy(genericNameValue0);
      genericNameValue0.setValue((Object) null);
      genericNameValue0.toString();
      GenericNameValue genericNameValue3 = new GenericNameValue((String) null);
      genericNameValue1.getType();
      genericNameValue1.compareTo((NameValue<Object>) genericNameValue2);
      assertTrue(genericNameValue2.equals((Object)genericNameValue0));
      
      NameValue.copy((NameValue<?>) genericNameValue1);
      genericNameValue0.equals(genericNameValue3);
      genericNameValue1.getType();
      genericNameValue3.getComplexType();
      genericNameValue3.setComplexType((ParameterType) null);
      genericNameValue2.setValueAndOverrideType(genericNameValue0);
      genericNameValue3.initializeComplexValues();
      genericNameValue1.hashCode();
      genericNameValue1.getTypeForMatchingRule("Any");
      boolean boolean0 = genericNameValue1.equals(genericNameValue0);
      assertFalse(genericNameValue1.equals((Object)genericNameValue2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("YR7", "YR7");
      GenericNameValue genericNameValue1 = genericNameValue0.copy();
      boolean boolean0 = genericNameValue0.equals(genericNameValue1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      GenericNameValue genericNameValue1 = new GenericNameValue("", genericNameValue0);
      genericNameValue1.getType();
      genericNameValue1.name = "GxgAw(t:NE@3n=UFqo";
      genericNameValue1.initializeComplexValues();
      GenericNameValue genericNameValue2 = GenericNameValue.copy(genericNameValue1);
      genericNameValue1.equals(genericNameValue2);
      ParameterType parameterType0 = new ParameterType();
      Object object0 = new Object();
      NameValue.copy((NameValue<?>) genericNameValue0);
      genericNameValue0.value = object0;
      parameterType0.fullGenericTypes();
      genericNameValue2.getType();
      parameterType0.fullGenericTypes();
      genericNameValue0.setComplexType(parameterType0);
      genericNameValue2.setValueAndOverrideType(genericNameValue0);
      GenericNameValue genericNameValue3 = genericNameValue2.copy();
      genericNameValue2.toString();
      genericNameValue1.toString();
      boolean boolean0 = genericNameValue2.equals(genericNameValue3);
      assertFalse(boolean0);
      
      genericNameValue0.name = " ";
      GenericNameValue genericNameValue4 = genericNameValue3.copy();
      assertTrue(genericNameValue4.equals((Object)genericNameValue3));
      
      genericNameValue4.setValue(genericNameValue0);
      genericNameValue3.setValueAndOverrideType(genericNameValue4);
      GenericNameValue genericNameValue5 = GenericNameValue.copy(genericNameValue3);
      genericNameValue4.toString();
      Object object1 = new Object();
      GenericNameValue genericNameValue6 = new GenericNameValue("Qwhk0tE'2 Yl]", object1);
      genericNameValue5.value = (Object) genericNameValue6;
      genericNameValue5.initializeComplexValues();
      genericNameValue4.copy();
      GenericNameValue genericNameValue7 = new GenericNameValue("");
      genericNameValue2.equals(genericNameValue7);
      genericNameValue4.hashCode();
      boolean boolean1 = genericNameValue1.isMap();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      GenericNameValue genericNameValue1 = GenericNameValue.copy(genericNameValue0);
      assertNotSame(genericNameValue1, genericNameValue0);
      
      genericNameValue0.toString();
      genericNameValue0.compareTo((NameValue<Object>) genericNameValue1);
      NameValue.copy((NameValue<?>) genericNameValue0);
      genericNameValue0.initializeComplexValues();
      genericNameValue0.setType("null null null");
      ParameterType parameterType0 = genericNameValue0.getComplexType();
      GenericNameValue genericNameValue2 = GenericNameValue.copy(genericNameValue0);
      genericNameValue2.getType();
      assertFalse(genericNameValue0.equals((Object)genericNameValue1));
      
      parameterType0.setType("null null null");
      GenericNameValue genericNameValue3 = genericNameValue0.copy();
      GenericNameValue.copy(genericNameValue2);
      genericNameValue3.setValueAndOverrideType(genericNameValue0);
      genericNameValue3.name = "null null null";
      genericNameValue1.setComplexType(parameterType0);
      genericNameValue3.hashCode();
      genericNameValue2.isList();
      genericNameValue3.setType("List[Number]");
      assertNotSame(genericNameValue3, genericNameValue0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        GenericNameValue.copy((GenericNameValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.GenericNameValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("YR7", "YR7");
      boolean boolean0 = genericNameValue0.isList();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      boolean boolean0 = genericNameValue0.isMap();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      String string0 = genericNameValue0.getTypeForMatchingRule("net.segoia.util.data.GenericNameValue");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("");
      GenericNameValue genericNameValue1 = GenericNameValue.copy(genericNameValue0);
      genericNameValue0.getType();
      NameValue.copy((NameValue<?>) genericNameValue0);
      genericNameValue1.setType("");
      GenericNameValue genericNameValue2 = GenericNameValue.copy(genericNameValue1);
      genericNameValue2.compareTo((NameValue<Object>) genericNameValue0);
      NameValue<?> nameValue0 = NameValue.copy((NameValue<?>) genericNameValue1);
      genericNameValue2.setValueAndOverrideType(genericNameValue1);
      genericNameValue1.setValueAndOverrideType(genericNameValue0);
      GenericNameValue genericNameValue3 = (GenericNameValue)genericNameValue2.value;
      genericNameValue1.initializeComplexValues();
      genericNameValue2.setValueAndOverrideType(genericNameValue3);
      genericNameValue0.setType("res is = ");
      NameValue.copy(nameValue0);
      GenericNameValue genericNameValue4 = genericNameValue1.copy();
      ParameterType parameterType0 = genericNameValue4.getComplexType();
      assertTrue(genericNameValue4.equals((Object)genericNameValue3));
      
      genericNameValue0.initializeComplexValues();
      genericNameValue1.setValue(genericNameValue4);
      boolean boolean0 = genericNameValue0.equals(genericNameValue1);
      assertFalse(boolean0);
      
      genericNameValue0.setComplexType(parameterType0);
      genericNameValue0.copy();
      genericNameValue4.initializeComplexValues();
      assertFalse(genericNameValue1.equals((Object)genericNameValue2));
      assertFalse(genericNameValue0.equals((Object)genericNameValue4));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      NameValue.copy((NameValue<?>) genericNameValue0);
      genericNameValue0.initializeComplexValues();
      GenericNameValue genericNameValue1 = new GenericNameValue("ztCel0e$t2nA:|V");
      genericNameValue0.setValue(genericNameValue1);
      genericNameValue0.hashCode();
      String string0 = genericNameValue0.getType();
      assertEquals("GenericNameValue", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      boolean boolean0 = genericNameValue0.isList();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("Gt[iEg~+AU',bEN>}p");
      genericNameValue0.getType();
      GenericNameValue genericNameValue1 = genericNameValue0.copy();
      genericNameValue1.setName((String) null);
      NameValue.copy((NameValue<?>) genericNameValue0);
      genericNameValue1.name = null;
      boolean boolean0 = genericNameValue1.equals(genericNameValue0);
      assertFalse(boolean0);
      
      GenericNameValue genericNameValue2 = genericNameValue0.copy();
      genericNameValue2.setName("Gt[iEg~+AU',bEN>}p");
      Object object0 = new Object();
      genericNameValue0.getType();
      genericNameValue0.setValueAndOverrideType(object0);
      GenericNameValue genericNameValue3 = genericNameValue0.copy();
      genericNameValue0.isList();
      genericNameValue3.equals(object0);
      genericNameValue3.toString();
      GenericNameValue genericNameValue4 = GenericNameValue.copy(genericNameValue3);
      NameValue.copy((NameValue<?>) genericNameValue4);
      GenericNameValue genericNameValue5 = genericNameValue4.copy();
      genericNameValue5.setType((String) null);
      genericNameValue3.setValue(genericNameValue4);
      genericNameValue4.hashCode();
      assertTrue(genericNameValue4.equals((Object)genericNameValue2));
      assertFalse(genericNameValue3.equals((Object)genericNameValue4));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue(")B/uJ", (Object) null);
      Object object0 = new Object();
      NameValue<GenericNameValue> nameValue0 = new NameValue<GenericNameValue>();
      NameValue<GenericNameValue> nameValue1 = nameValue0.copy();
      NameValue.copy(nameValue1);
      nameValue1.value = genericNameValue0;
      nameValue0.compareTo(nameValue1);
      assertFalse(nameValue1.equals((Object)nameValue0));
      
      nameValue0.value = nameValue1.value;
      nameValue0.value.initializeComplexValues();
      genericNameValue0.setValue(object0);
      genericNameValue0.value = null;
      NameValue.copy(nameValue1);
      genericNameValue0.getType();
      nameValue0.toString();
      nameValue1.value.copy();
      genericNameValue0.value = null;
      genericNameValue0.toString();
      genericNameValue0.setValueAndOverrideType((Object) null);
      genericNameValue0.isList();
      genericNameValue0.isList();
      ParameterType parameterType0 = genericNameValue0.getComplexType();
      genericNameValue0.hashCode();
      genericNameValue0.toString();
      GenericNameValue genericNameValue1 = nameValue0.value.copy();
      nameValue0.value.setValueAndOverrideType(genericNameValue1);
      genericNameValue0.getTypeForMatchingRule("Context");
      genericNameValue0.setComplexType(parameterType0);
      GenericNameValue genericNameValue2 = genericNameValue1.copy();
      boolean boolean0 = genericNameValue0.equals(genericNameValue2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      genericNameValue0.initializeComplexValues();
      assertNull(genericNameValue0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      GenericNameValue genericNameValue0 = new GenericNameValue("'Py[K?:f??1g<'", object0);
      genericNameValue0.setValue(object0);
      genericNameValue0.initializeComplexValues();
      assertFalse(genericNameValue0.isMap());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("net.segoia.util.parser.utils.JavaCollectionMapParser");
      NameValue.copy((NameValue<?>) genericNameValue0);
      Object object0 = genericNameValue0.value;
      genericNameValue0.setValue((Object) null);
      GenericNameValue genericNameValue1 = GenericNameValue.copy(genericNameValue0);
      genericNameValue0.toString();
      NameValue.copy((NameValue<?>) genericNameValue1);
      Object object1 = genericNameValue1.value;
      GenericNameValue genericNameValue2 = new GenericNameValue("net.segoia.util.parser.utils.JavaCollectionMapParser", (Object) null);
      genericNameValue2.setValueAndOverrideType(genericNameValue0);
      GenericNameValue genericNameValue3 = genericNameValue2.copy();
      Object object2 = new Object();
      genericNameValue3.setValue(object2);
      NameValue.copy((NameValue<?>) genericNameValue3);
      NameValue.copy((NameValue<?>) genericNameValue0);
      genericNameValue3.setValueAndOverrideType(genericNameValue2);
      genericNameValue2.name = "net.segoia.util.parser.utils.JavaCollectionMapParser";
      GenericNameValue genericNameValue4 = new GenericNameValue("net.segoia.util.parser.utils.JavaCollectionMapParser", object2);
      genericNameValue2.setValueAndOverrideType(genericNameValue4);
      GenericNameValue genericNameValue5 = (GenericNameValue)genericNameValue2.value;
      genericNameValue1.setValue(genericNameValue5);
      genericNameValue0.initializeComplexValues();
      // Undeclared exception!
      try { 
        genericNameValue2.compareTo((NameValue<Object>) genericNameValue4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.segoia.util.data.NameValue (java.lang.Object is in module java.base of loader 'bootstrap'; net.segoia.util.data.NameValue is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1ae9c50b)
         //
         verifyException("net.segoia.util.data.NameValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      genericNameValue0.hashCode();
      genericNameValue0.initializeComplexValues();
      boolean boolean0 = genericNameValue0.isList();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      genericNameValue0.setComplexType((ParameterType) null);
      assertNull(genericNameValue0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("oH");
      GenericNameValue genericNameValue1 = genericNameValue0.copy();
      String string0 = ".ha2EvUVd`ei";
      genericNameValue0.setName(".ha2EvUVd`ei");
      genericNameValue0.hashCode();
      GenericNameValue genericNameValue2 = genericNameValue1.copy();
      genericNameValue2.setValueAndOverrideType(genericNameValue0);
      ParameterType parameterType0 = ParameterType.fromString("oH");
      parameterType0.toString();
      genericNameValue2.setComplexType(parameterType0);
      genericNameValue2.getType();
      genericNameValue0.setValue(genericNameValue2);
      GenericNameValue genericNameValue3 = GenericNameValue.copy(genericNameValue0);
      genericNameValue2.setComplexType((ParameterType) null);
      // Undeclared exception!
      try { 
        genericNameValue3.compareTo((NameValue<Object>) genericNameValue0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      GenericNameValue genericNameValue0 = new GenericNameValue("`gY[s[7zA9@", "`gY[s[7zA9@");
      GenericNameValue genericNameValue1 = GenericNameValue.copy(genericNameValue0);
      genericNameValue1.setName("`gY[s[7zA9@");
      ParameterType parameterType0 = genericNameValue0.getComplexType();
      genericNameValue0.setComplexType(parameterType0);
      String string0 = genericNameValue0.toString();
      assertEquals("`gY[s[7zA9@ String `gY[s[7zA9@", string0);
      
      genericNameValue0.initializeComplexValues();
      assertNotSame(genericNameValue0, genericNameValue1);
      assertTrue(genericNameValue0.equals((Object)genericNameValue1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      GenericNameValue genericNameValue0 = new GenericNameValue((String) null, object0);
      genericNameValue0.initializeComplexValues();
      assertFalse(genericNameValue0.isList());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      Object object0 = genericNameValue0.value;
      boolean boolean0 = genericNameValue0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("Y`7");
      assertFalse(genericNameValue0.isMap());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("YR7", "YR7");
      boolean boolean0 = genericNameValue0.isMap();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      GenericNameValue genericNameValue0 = new GenericNameValue("net.segoia.util.data.GenericNameValue", object0);
      Object object1 = genericNameValue0.value;
      String string0 = genericNameValue0.getTypeForMatchingRule("net.segoia.util.data.GenericNameValue");
      assertEquals("Object", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue((String) null);
      GenericNameValue genericNameValue1 = genericNameValue0.copy();
      GenericNameValue genericNameValue2 = genericNameValue0.copy();
      genericNameValue1.setType((String) null);
      genericNameValue2.value = null;
      genericNameValue0.toString();
      assertTrue(genericNameValue0.equals((Object)genericNameValue1));
      
      genericNameValue0.setValue(genericNameValue2);
      genericNameValue0.getType();
      genericNameValue0.setValue((Object) null);
      genericNameValue1.equals((Object) null);
      genericNameValue1.initializeComplexValues();
      genericNameValue1.toString();
      Object object0 = new Object();
      boolean boolean0 = genericNameValue2.equals(genericNameValue0);
      assertFalse(boolean0);
      
      genericNameValue0.isList();
      genericNameValue2.hashCode();
      GenericNameValue genericNameValue3 = GenericNameValue.copy(genericNameValue2);
      Object object1 = genericNameValue3.value;
      genericNameValue0.setType("List");
      genericNameValue3.setType(":_w6");
      String string0 = genericNameValue0.toString();
      assertEquals("null List null", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      Object object0 = genericNameValue0.value;
      NameValue.copy((NameValue<?>) genericNameValue0);
      GenericNameValue genericNameValue1 = new GenericNameValue("TO#2ke", (Object) null);
      genericNameValue0.getType();
      GenericNameValue genericNameValue2 = GenericNameValue.copy(genericNameValue1);
      NameValue.copy((NameValue<?>) genericNameValue2);
      GenericNameValue genericNameValue3 = GenericNameValue.copy(genericNameValue2);
      genericNameValue2.getTypeForMatchingRule(",QO(/FCW");
      genericNameValue2.initializeComplexValues();
      genericNameValue1.compareTo((NameValue<Object>) genericNameValue2);
      genericNameValue1.isList();
      GenericNameValue genericNameValue4 = GenericNameValue.copy(genericNameValue3);
      ParameterType parameterType0 = new ParameterType("Number");
      genericNameValue1.setComplexType(parameterType0);
      genericNameValue4.getType();
      genericNameValue4.initializeComplexValues();
      genericNameValue2.isList();
      assertFalse(genericNameValue2.equals((Object)genericNameValue1));
      
      genericNameValue4.value = (Object) genericNameValue3;
      genericNameValue0.setComplexType((ParameterType) null);
      genericNameValue0.getType();
      genericNameValue4.getComplexType();
      genericNameValue1.isMap();
      boolean boolean0 = genericNameValue1.isList();
      assertNotSame(genericNameValue1, genericNameValue3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      GenericNameValue genericNameValue1 = genericNameValue0.copy();
      boolean boolean0 = genericNameValue0.equals(genericNameValue1);
      assertTrue(boolean0);
      assertNotSame(genericNameValue1, genericNameValue0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      ParameterType parameterType0 = genericNameValue0.getComplexType();
      assertNull(parameterType0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      Object object0 = new Object();
      genericNameValue0.setValueAndOverrideType(object0);
      assertFalse(genericNameValue0.isMap());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("JR7", "JR7");
      genericNameValue0.initializeComplexValues();
      assertFalse(genericNameValue0.isMap());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      boolean boolean0 = genericNameValue0.equals(genericNameValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("SIMPLE", "SIMPLE");
      String string0 = genericNameValue0.toString();
      assertEquals("SIMPLE String SIMPLE", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("");
      GenericNameValue genericNameValue1 = genericNameValue0.copy();
      GenericNameValue genericNameValue2 = GenericNameValue.copy(genericNameValue1);
      NameValue.copy((NameValue<?>) genericNameValue2);
      genericNameValue2.setValueAndOverrideType(genericNameValue1);
      GenericNameValue genericNameValue3 = genericNameValue2.copy();
      genericNameValue3.initializeComplexValues();
      GenericNameValue genericNameValue4 = (GenericNameValue)genericNameValue2.value;
      genericNameValue3.value = (Object) genericNameValue4;
      genericNameValue3.name = ")KR;(_.vUX(IQUX%";
      genericNameValue3.setType("");
      GenericNameValue genericNameValue5 = GenericNameValue.copy(genericNameValue3);
      genericNameValue1.getComplexType();
      GenericNameValue genericNameValue6 = GenericNameValue.copy(genericNameValue3);
      genericNameValue0.setValue(genericNameValue6);
      genericNameValue2.setValueAndOverrideType(genericNameValue6);
      genericNameValue6.setName("SIMPLE");
      assertEquals(")KR;(_.vUX(IQUX%", genericNameValue3.getName());
      
      genericNameValue0.toString();
      genericNameValue3.setName("");
      genericNameValue3.setType("List");
      genericNameValue6.isMap();
      GenericNameValue genericNameValue7 = (GenericNameValue)genericNameValue5.value;
      genericNameValue6.value = (Object) genericNameValue7;
      genericNameValue0.getType();
      genericNameValue6.getTypeForMatchingRule("A:Qzw.6M^FH4b1Q$]'-");
      genericNameValue1.equals(genericNameValue6);
      genericNameValue6.equals(genericNameValue7);
      genericNameValue5.setValueAndOverrideType(genericNameValue6);
      boolean boolean0 = genericNameValue1.equals(genericNameValue4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("", "");
      assertFalse(genericNameValue0.isList());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      String string0 = genericNameValue0.toString();
      assertEquals("null null null", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue();
      Object object0 = new Object();
      genericNameValue0.setValue(object0);
      assertFalse(genericNameValue0.isMap());
  }
}
