/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 06:35:12 GMT 2022
 */

package net.segoia.util.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import net.segoia.util.data.SetMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SetMap_ESTest extends SetMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = SetMap.createHashMapWithHashSet();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Integer>>();
      setMap0.putIfAbsent(linkedHashSet0, linkedHashSet1);
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      boolean boolean0 = setMap0.containsNestedValue(linkedHashSet0, linkedHashSet2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      HashMap<LinkedHashSet<Integer>, Set<Integer>> hashMap0 = new HashMap<LinkedHashSet<Integer>, Set<Integer>>();
      SetMap.LinkedHashSetFactory<Integer> setMap_LinkedHashSetFactory0 = new SetMap.LinkedHashSetFactory<Integer>();
      SetMap<LinkedHashSet<Integer>, Integer> setMap0 = new SetMap<LinkedHashSet<Integer>, Integer>(hashMap0, setMap_LinkedHashSetFactory0);
      hashMap0.put(linkedHashSet0, linkedHashSet0);
      int int0 = setMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SetMap<SetMap<Integer, Integer>, Set<Integer>> setMap0 = new SetMap<SetMap<Integer, Integer>, Set<Integer>>();
      setMap0.getNestedSet((SetMap<Integer, Integer>) null);
      Set<Set<Integer>> set0 = setMap0.remove((Object) null);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SetMap.HashSetFactory<SetMap<Integer, Integer>> setMap_HashSetFactory0 = new SetMap.HashSetFactory<SetMap<Integer, Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<SetMap<Integer, Integer>> linkedHashSet1 = new LinkedHashSet<SetMap<Integer, Integer>>();
      SetMap<Integer, Integer> setMap0 = new SetMap<Integer, Integer>();
      linkedHashSet1.add(setMap0);
      HashMap<LinkedHashSet<Integer>, Set<SetMap<Integer, Integer>>> hashMap0 = new HashMap<LinkedHashSet<Integer>, Set<SetMap<Integer, Integer>>>();
      hashMap0.put(linkedHashSet0, linkedHashSet1);
      SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>> setMap1 = new SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>>(hashMap0, setMap_HashSetFactory0);
      LinkedHashSet<Object> linkedHashSet2 = new LinkedHashSet<Object>();
      Set<SetMap<Integer, Integer>> set0 = setMap1.remove((Object) linkedHashSet2);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = SetMap.createTreeMapWithTreeSet();
      HashMap<SetMap<Integer, Integer>, Set<LinkedHashSet<Integer>>> hashMap0 = new HashMap<SetMap<Integer, Integer>, Set<LinkedHashSet<Integer>>>();
      SetMap.TreeSetFactory<LinkedHashSet<Integer>> setMap_TreeSetFactory0 = new SetMap.TreeSetFactory<LinkedHashSet<Integer>>();
      SetMap<SetMap<Integer, Integer>, LinkedHashSet<Integer>> setMap1 = new SetMap<SetMap<Integer, Integer>, LinkedHashSet<Integer>>(hashMap0, setMap_TreeSetFactory0);
      SetMap<Integer, Integer> setMap2 = SetMap.createHashMapWithHashSet();
      Set<LinkedHashSet<Integer>> set0 = setMap0.getUnion();
      setMap1.put(setMap2, set0);
      Set<LinkedHashSet<Integer>> set1 = setMap1.put(setMap2, (Set<LinkedHashSet<Integer>>) null);
      assertTrue(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SetMap.HashSetFactory<SetMap<Integer, Integer>> setMap_HashSetFactory0 = new SetMap.HashSetFactory<SetMap<Integer, Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<SetMap<Integer, Integer>> linkedHashSet1 = new LinkedHashSet<SetMap<Integer, Integer>>();
      SetMap<Integer, Integer> setMap0 = new SetMap<Integer, Integer>();
      linkedHashSet1.add(setMap0);
      HashMap<LinkedHashSet<Integer>, Set<SetMap<Integer, Integer>>> hashMap0 = new HashMap<LinkedHashSet<Integer>, Set<SetMap<Integer, Integer>>>();
      hashMap0.put(linkedHashSet0, linkedHashSet1);
      SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>> setMap1 = new SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>>(hashMap0, setMap_HashSetFactory0);
      Set<SetMap<Integer, Integer>> set0 = setMap1.put(linkedHashSet0, (Set<SetMap<Integer, Integer>>) linkedHashSet1);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = new SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      setMap0.add(linkedHashSet0, linkedHashSet0);
      Set<LinkedHashSet<Integer>> set0 = setMap0.getUnion();
      assertTrue(set0.contains(linkedHashSet0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SetMap.HashSetFactory<Integer> setMap_HashSetFactory0 = new SetMap.HashSetFactory<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(2606);
      linkedHashSet0.add(integer0);
      HashMap<Set<Integer>, Set<Integer>> hashMap0 = new HashMap<Set<Integer>, Set<Integer>>();
      hashMap0.put(linkedHashSet0, linkedHashSet0);
      SetMap<Set<Integer>, Integer> setMap0 = new SetMap<Set<Integer>, Integer>(hashMap0, setMap_HashSetFactory0);
      Set<Integer> set0 = setMap0.getNestedSet(linkedHashSet0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SetMap<Set<Integer>, Integer> setMap0 = SetMap.createHashMapWithHashSet();
      setMap0.put((Set<Integer>) null, (Set<Integer>) null);
      Set<Integer> set0 = setMap0.getIntersection();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(2);
      linkedHashSet0.add(integer0);
      SetMap<Set<Integer>, Integer> setMap0 = new SetMap<Set<Integer>, Integer>();
      setMap0.put((Set<Integer>) linkedHashSet0, (Set<Integer>) linkedHashSet0);
      Set<Integer> set0 = setMap0.getIntersection();
      assertTrue(set0.contains(2));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SetMap<Object, LinkedHashSet<Integer>> setMap0 = new SetMap<Object, LinkedHashSet<Integer>>();
      Map<Object, Set<LinkedHashSet<Integer>>> map0 = setMap0.getAll();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SetMap<Integer, Integer> setMap0 = SetMap.createHashMapWithHashSet();
      Integer integer0 = new Integer(1315);
      setMap0.getNestedSet(integer0);
      Map<Integer, Set<Integer>> map0 = setMap0.getAll();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SetMap<Integer, LinkedHashSet<Integer>> setMap0 = new SetMap<Integer, LinkedHashSet<Integer>>();
      Set<Map.Entry<Integer, Set<LinkedHashSet<Integer>>>> set0 = (Set<Map.Entry<Integer, Set<LinkedHashSet<Integer>>>>)setMap0.entrySet();
      SetMap<Set<Integer>, LinkedHashSet<Integer>> setMap1 = new SetMap<Set<Integer>, LinkedHashSet<Integer>>();
      Set<LinkedHashSet<Integer>> set1 = setMap1.get(set0);
      assertNull(set1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-1750));
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Set<Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Set<Integer>>();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, linkedHashSet0);
      SetMap.HashSetFactory<Integer> setMap_HashSetFactory0 = new SetMap.HashSetFactory<Integer>();
      SetMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> setMap0 = new SetMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(hashMap0, setMap_HashSetFactory0);
      Set<Integer> set0 = setMap0.get(abstractMap_SimpleImmutableEntry0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SetMap.LinkedHashSetFactory<Integer> setMap_LinkedHashSetFactory0 = new SetMap.LinkedHashSetFactory<Integer>();
      Set<Integer> set0 = setMap_LinkedHashSetFactory0.createSet();
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = SetMap.createTreeMapWithTreeSet();
      boolean boolean0 = setMap0.containsKey(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SetMap.HashSetFactory<LinkedHashSet<Integer>> setMap_HashSetFactory0 = new SetMap.HashSetFactory<LinkedHashSet<Integer>>();
      SetMap<Integer, LinkedHashSet<Integer>> setMap0 = new SetMap<Integer, LinkedHashSet<Integer>>((Map<Integer, Set<LinkedHashSet<Integer>>>) null, setMap_HashSetFactory0);
      // Undeclared exception!
      try { 
        setMap0.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.SetMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SetMap.LinkedHashSetFactory<Set<Object>> setMap_LinkedHashSetFactory0 = new SetMap.LinkedHashSetFactory<Set<Object>>();
      SetMap<SetMap.HashSetFactory<Object>, Set<Object>> setMap0 = new SetMap<SetMap.HashSetFactory<Object>, Set<Object>>((Map<SetMap.HashSetFactory<Object>, Set<Set<Object>>>) null, setMap_LinkedHashSetFactory0);
      // Undeclared exception!
      try { 
        setMap0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.SetMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = new SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      SetMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> setMap1 = SetMap.createTreeMapWithTreeSet();
      // Undeclared exception!
      try { 
        setMap1.removeValueForKey((Object) null, setMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = new SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      SetMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> setMap1 = SetMap.createTreeMapWithTreeSet();
      // Undeclared exception!
      try { 
        setMap1.removeValueForKey(setMap0, setMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.segoia.util.data.SetMap cannot be cast to class java.lang.Comparable (net.segoia.util.data.SetMap is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @240920b2; java.lang.Comparable is in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SetMap<LinkedHashSet<Integer>, Integer> setMap0 = SetMap.createTreeMapWithTreeSet();
      // Undeclared exception!
      try { 
        setMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SetMap<Integer, Set<Integer>> setMap0 = new SetMap<Integer, Set<Integer>>();
      SetMap<SetMap<Object, Object>, Object> setMap1 = SetMap.createTreeMapWithTreeSet();
      // Undeclared exception!
      try { 
        setMap1.remove((Object) setMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = new SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      SetMap<Object, LinkedHashSet<Object>> setMap1 = SetMap.createHashMapWithHashSet();
      // Undeclared exception!
      try { 
        setMap1.putAllNestedValues(setMap0, (Collection<LinkedHashSet<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SetMap<LinkedHashSet<Object>, Set<LinkedHashSet<Object>>> setMap0 = SetMap.createTreeMapWithTreeSet();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Set<LinkedHashSet<Object>>> linkedList0 = new LinkedList<Set<LinkedHashSet<Object>>>();
      // Undeclared exception!
      try { 
        setMap0.putAllNestedValues(linkedHashSet0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.LinkedHashSet cannot be cast to class java.lang.Comparable (java.util.LinkedHashSet and java.lang.Comparable are in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SetMap<Integer, Integer> setMap0 = SetMap.createHashMapWithHashSet();
      // Undeclared exception!
      try { 
        setMap0.putAll((Map<? extends Integer, ? extends Set<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SetMap<Set<Integer>, Integer> setMap0 = SetMap.createTreeMapWithTreeSet();
      // Undeclared exception!
      try { 
        setMap0.put((Set<Integer>) null, (Set<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SetMap<Object, Object> setMap0 = SetMap.createTreeMapWithTreeSet();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        setMap0.put((Object) linkedHashSet0, (Set<Object>) linkedHashSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.LinkedHashSet cannot be cast to class java.lang.Comparable (java.util.LinkedHashSet and java.lang.Comparable are in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SetMap.LinkedHashSetFactory<Set<Object>> setMap_LinkedHashSetFactory0 = new SetMap.LinkedHashSetFactory<Set<Object>>();
      SetMap<SetMap<Object, Object>, Set<Object>> setMap0 = new SetMap<SetMap<Object, Object>, Set<Object>>((Map<SetMap<Object, Object>, Set<Set<Object>>>) null, setMap_LinkedHashSetFactory0);
      // Undeclared exception!
      try { 
        setMap0.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.SetMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SetMap.LinkedHashSetFactory<LinkedHashSet<Integer>> setMap_LinkedHashSetFactory0 = new SetMap.LinkedHashSetFactory<LinkedHashSet<Integer>>();
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = new SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>((Map<LinkedHashSet<Integer>, Set<LinkedHashSet<Integer>>>) null, setMap_LinkedHashSetFactory0);
      // Undeclared exception!
      try { 
        setMap0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SetMap.HashSetFactory<Set<Integer>> setMap_HashSetFactory0 = new SetMap.HashSetFactory<Set<Integer>>();
      SetMap<LinkedHashSet<Integer>, Set<Integer>> setMap0 = new SetMap<LinkedHashSet<Integer>, Set<Integer>>((Map<LinkedHashSet<Integer>, Set<Set<Integer>>>) null, setMap_HashSetFactory0);
      // Undeclared exception!
      try { 
        setMap0.getUnion();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.SetMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      HashMap<Set<Integer>, Set<Integer>> hashMap0 = new HashMap<Set<Integer>, Set<Integer>>(2147483645);
      SetMap.HashSetFactory<Integer> setMap_HashSetFactory0 = new SetMap.HashSetFactory<Integer>();
      SetMap<Set<Integer>, Integer> setMap0 = new SetMap<Set<Integer>, Integer>(hashMap0, setMap_HashSetFactory0);
      // Undeclared exception!
      setMap0.getNestedSet(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SetMap<SetMap<Object, Object>, Object> setMap0 = SetMap.createTreeMapWithTreeSet();
      // Undeclared exception!
      try { 
        setMap0.getNestedSet((SetMap<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SetMap<SetMap<Object, Object>, Object> setMap0 = SetMap.createTreeMapWithTreeSet();
      SetMap<Object, Object> setMap1 = SetMap.createTreeMapWithTreeSet();
      // Undeclared exception!
      try { 
        setMap0.getNestedSet(setMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.segoia.util.data.SetMap cannot be cast to class java.lang.Comparable (net.segoia.util.data.SetMap is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @240920b2; java.lang.Comparable is in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<LinkedHashSet<Object>, Set<AbstractMap.SimpleImmutableEntry<Object, Object>>> hashMap0 = new HashMap<LinkedHashSet<Object>, Set<AbstractMap.SimpleImmutableEntry<Object, Object>>>();
      SetMap.TreeSetFactory<AbstractMap.SimpleImmutableEntry<Object, Object>> setMap_TreeSetFactory0 = new SetMap.TreeSetFactory<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetMap.LinkedHashSetFactory<AbstractMap.SimpleImmutableEntry<Object, Object>> setMap_LinkedHashSetFactory0 = new SetMap.LinkedHashSetFactory<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Set<AbstractMap.SimpleImmutableEntry<Object, Object>> set0 = setMap_LinkedHashSetFactory0.createSet();
      hashMap0.put(linkedHashSet0, set0);
      SetMap<LinkedHashSet<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> setMap0 = new SetMap<LinkedHashSet<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap0, setMap_TreeSetFactory0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashSet0, set0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      setMap0.add(linkedHashSet0, abstractMap_SimpleImmutableEntry0);
      HashMap<Set<Object>, Set<LinkedHashSet<Object>>> hashMap1 = new HashMap<Set<Object>, Set<LinkedHashSet<Object>>>();
      SetMap.LinkedHashSetFactory<LinkedHashSet<Object>> setMap_LinkedHashSetFactory1 = new SetMap.LinkedHashSetFactory<LinkedHashSet<Object>>();
      SetMap<Set<Object>, LinkedHashSet<Object>> setMap1 = new SetMap<Set<Object>, LinkedHashSet<Object>>(hashMap1, setMap_LinkedHashSetFactory1);
      // Undeclared exception!
      try { 
        setMap1.get(set0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SetMap.HashSetFactory<Object> setMap_HashSetFactory0 = new SetMap.HashSetFactory<Object>();
      SetMap<Object, Object> setMap0 = new SetMap<Object, Object>((Map<Object, Set<Object>>) null, setMap_HashSetFactory0);
      // Undeclared exception!
      try { 
        setMap0.get(setMap_HashSetFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.SetMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SetMap<Object, Object> setMap0 = new SetMap<Object, Object>();
      SetMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> setMap1 = SetMap.createTreeMapWithTreeSet();
      // Undeclared exception!
      try { 
        setMap1.get(setMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.segoia.util.data.SetMap cannot be cast to class java.lang.Comparable (net.segoia.util.data.SetMap is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @240920b2; java.lang.Comparable is in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SetMap.HashSetFactory<LinkedHashSet<Object>> setMap_HashSetFactory0 = new SetMap.HashSetFactory<LinkedHashSet<Object>>();
      SetMap<LinkedHashSet<Object>, LinkedHashSet<Object>> setMap0 = new SetMap<LinkedHashSet<Object>, LinkedHashSet<Object>>((Map<LinkedHashSet<Object>, Set<LinkedHashSet<Object>>>) null, setMap_HashSetFactory0);
      // Undeclared exception!
      try { 
        setMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.SetMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SetMap.LinkedHashSetFactory<LinkedHashSet<Integer>> setMap_LinkedHashSetFactory0 = new SetMap.LinkedHashSetFactory<LinkedHashSet<Integer>>();
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = new SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>((Map<LinkedHashSet<Integer>, Set<LinkedHashSet<Integer>>>) null, setMap_LinkedHashSetFactory0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        setMap0.containsValue(linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      linkedHashSet1.add(linkedHashSet0);
      linkedHashSet0.add(linkedHashSet1);
      SetMap<Object, Object> setMap0 = new SetMap<Object, Object>();
      // Undeclared exception!
      try { 
        setMap0.containsNestedValue(linkedHashSet0, linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>> setMap0 = SetMap.createTreeMapWithTreeSet();
      SetMap<Integer, Integer> setMap1 = SetMap.createHashMapWithHashSet();
      // Undeclared exception!
      try { 
        setMap0.containsNestedValue((LinkedHashSet<Integer>) null, setMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SetMap<LinkedHashSet<Object>, Set<Object>> setMap0 = SetMap.createTreeMapWithTreeSet();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        setMap0.containsNestedValue(linkedHashSet0, linkedHashSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.LinkedHashSet cannot be cast to class java.lang.Comparable (java.util.LinkedHashSet and java.lang.Comparable are in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SetMap.LinkedHashSetFactory<Set<Integer>> setMap_LinkedHashSetFactory0 = new SetMap.LinkedHashSetFactory<Set<Integer>>();
      SetMap<SetMap<Integer, Integer>, Set<Integer>> setMap0 = new SetMap<SetMap<Integer, Integer>, Set<Integer>>((Map<SetMap<Integer, Integer>, Set<Set<Integer>>>) null, setMap_LinkedHashSetFactory0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        setMap0.containsKey(linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SetMap.HashSetFactory<Integer> setMap_HashSetFactory0 = new SetMap.HashSetFactory<Integer>();
      SetMap<Integer, Integer> setMap0 = new SetMap<Integer, Integer>((Map<Integer, Set<Integer>>) null, setMap_HashSetFactory0);
      // Undeclared exception!
      try { 
        setMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.SetMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = SetMap.createTreeMapWithTreeSet();
      // Undeclared exception!
      try { 
        setMap0.add((LinkedHashSet<Integer>) null, (LinkedHashSet<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = SetMap.createTreeMapWithTreeSet();
      // Undeclared exception!
      try { 
        setMap0.add(linkedHashSet0, linkedHashSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.LinkedHashSet cannot be cast to class java.lang.Comparable (java.util.LinkedHashSet and java.lang.Comparable are in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SetMap<HashSet<Object>, HashSet<Integer>> setMap0 = SetMap.createTreeMapWithTreeSet();
      Collection<Set<HashSet<Integer>>> collection0 = setMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SetMap.HashSetFactory<SetMap<Integer, Integer>> setMap_HashSetFactory0 = new SetMap.HashSetFactory<SetMap<Integer, Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<SetMap<Integer, Integer>> linkedHashSet1 = new LinkedHashSet<SetMap<Integer, Integer>>();
      SetMap<Integer, Integer> setMap0 = new SetMap<Integer, Integer>();
      linkedHashSet1.add(setMap0);
      HashMap<LinkedHashSet<Integer>, Set<SetMap<Integer, Integer>>> hashMap0 = new HashMap<LinkedHashSet<Integer>, Set<SetMap<Integer, Integer>>>();
      hashMap0.put(linkedHashSet0, linkedHashSet1);
      SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>> setMap1 = new SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>>(hashMap0, setMap_HashSetFactory0);
      SetMap<Integer, Integer> setMap2 = SetMap.createHashMapWithHashSet();
      boolean boolean0 = setMap1.removeValueForKey(linkedHashSet0, setMap2);
      assertFalse(hashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SetMap.HashSetFactory<SetMap<Integer, Integer>> setMap_HashSetFactory0 = new SetMap.HashSetFactory<SetMap<Integer, Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<SetMap<Integer, Integer>> linkedHashSet1 = new LinkedHashSet<SetMap<Integer, Integer>>();
      SetMap<Integer, Integer> setMap0 = new SetMap<Integer, Integer>();
      HashMap<LinkedHashSet<Integer>, Set<SetMap<Integer, Integer>>> hashMap0 = new HashMap<LinkedHashSet<Integer>, Set<SetMap<Integer, Integer>>>();
      hashMap0.put(linkedHashSet0, linkedHashSet1);
      SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>> setMap1 = new SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>>(hashMap0, setMap_HashSetFactory0);
      boolean boolean0 = setMap1.removeValueForKey(linkedHashSet0, setMap0);
      assertEquals(0, setMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SetMap.HashSetFactory<SetMap<Integer, Integer>> setMap_HashSetFactory0 = new SetMap.HashSetFactory<SetMap<Integer, Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetMap<Integer, Integer> setMap0 = new SetMap<Integer, Integer>();
      HashMap<LinkedHashSet<Integer>, Set<SetMap<Integer, Integer>>> hashMap0 = new HashMap<LinkedHashSet<Integer>, Set<SetMap<Integer, Integer>>>();
      SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>> setMap1 = new SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>>(hashMap0, setMap_HashSetFactory0);
      boolean boolean0 = setMap1.removeValueForKey(linkedHashSet0, setMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Object, Set<Object>> hashMap0 = new HashMap<Object, Set<Object>>();
      SetMap.TreeSetFactory<Object> setMap_TreeSetFactory0 = new SetMap.TreeSetFactory<Object>();
      Set<Object> set0 = setMap_TreeSetFactory0.createSet();
      hashMap0.put(set0, set0);
      SetMap<Object, Object> setMap0 = new SetMap<Object, Object>(hashMap0, setMap_TreeSetFactory0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = setMap0.containsValue(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SetMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> setMap0 = SetMap.createHashMapWithHashSet();
      Object object0 = new Object();
      boolean boolean0 = setMap0.containsValue(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SetMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> setMap0 = new SetMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      SetMap<Object, Object> setMap1 = new SetMap<Object, Object>();
      setMap1.getNestedSet(setMap0);
      boolean boolean0 = setMap1.containsKey(setMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SetMap<Object, SetMap<Object, Object>> setMap0 = new SetMap<Object, SetMap<Object, Object>>();
      boolean boolean0 = setMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = new SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      assertTrue(setMap0.isEmpty());
      
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Integer>>();
      setMap0.putIfAbsent(linkedHashSet0, linkedHashSet1);
      boolean boolean0 = setMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SetMap.HashSetFactory<Integer> setMap_HashSetFactory0 = new SetMap.HashSetFactory<Integer>();
      Set<Integer> set0 = setMap_HashSetFactory0.createSet();
      HashMap<Set<Integer>, Set<Integer>> hashMap0 = new HashMap<Set<Integer>, Set<Integer>>();
      SetMap<Set<Integer>, Integer> setMap0 = new SetMap<Set<Integer>, Integer>(hashMap0, setMap_HashSetFactory0);
      hashMap0.put((Set<Integer>) null, set0);
      setMap0.put(set0, (Set<Integer>) null);
      // Undeclared exception!
      try { 
        setMap0.getIntersection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SetMap<LinkedHashSet<Integer>, Integer> setMap0 = new SetMap<LinkedHashSet<Integer>, Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      setMap0.putAllNestedValues(linkedHashSet0, linkedHashSet0);
      Set<Integer> set0 = setMap0.getIntersection();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = SetMap.createHashMapWithHashSet();
      boolean boolean0 = setMap0.containsNestedValue(linkedHashSet0, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = new SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      setMap0.add(linkedHashSet0, linkedHashSet0);
      boolean boolean0 = setMap0.containsNestedValue(linkedHashSet0, linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<LinkedHashSet<Integer>, Set<LinkedHashSet<Integer>>> hashMap0 = new HashMap<LinkedHashSet<Integer>, Set<LinkedHashSet<Integer>>>();
      SetMap.LinkedHashSetFactory<LinkedHashSet<Integer>> setMap_LinkedHashSetFactory0 = new SetMap.LinkedHashSetFactory<LinkedHashSet<Integer>>();
      SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> setMap0 = new SetMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>(hashMap0, setMap_LinkedHashSetFactory0);
      Set<LinkedHashSet<Integer>> set0 = setMap0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SetMap<LinkedHashSet<Integer>, Integer> setMap0 = new SetMap<LinkedHashSet<Integer>, Integer>((Map<LinkedHashSet<Integer>, Set<Integer>>) null, (SetMap.SetFactory<Integer>) null);
      Map<LinkedHashSet<Integer>, Set<Integer>> map0 = setMap0.getAll();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SetMap.HashSetFactory<SetMap<Integer, Integer>> setMap_HashSetFactory0 = new SetMap.HashSetFactory<SetMap<Integer, Integer>>();
      HashMap<LinkedHashSet<Integer>, Set<SetMap<Integer, Integer>>> hashMap0 = new HashMap<LinkedHashSet<Integer>, Set<SetMap<Integer, Integer>>>();
      SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>> setMap0 = new SetMap<LinkedHashSet<Integer>, SetMap<Integer, Integer>>(hashMap0, setMap_HashSetFactory0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Set<SetMap<Integer, Integer>> set0 = setMap0.remove((Object) linkedHashSet0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SetMap<Integer, Integer> setMap0 = new SetMap<Integer, Integer>();
      setMap0.clear();
      assertTrue(setMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SetMap<Integer, LinkedHashSet<Integer>> setMap0 = SetMap.createTreeMapWithTreeSet();
      int int0 = setMap0.size();
      assertEquals(0, int0);
  }
}
