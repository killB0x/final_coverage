/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 06:15:44 GMT 2022
 */

package net.segoia.util.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.data.Interval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Interval_ESTest extends Interval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-2517L));
      String string0 = interval0.toString();
      assertEquals((-2516L), interval0.getLength());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Interval interval0 = new Interval((-1L), 772L, true);
      String string0 = interval0.toString();
      assertEquals(772L, interval0.getEnd());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L), true);
      Interval interval1 = new Interval((-1L), (-1L));
      interval1.trimTail((-859));
      interval0.trimBy(interval1);
      interval0.trimBy(interval1);
      assertEquals(858L, interval1.getEnd());
      assertEquals(859L, interval0.getStart());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = new Interval(0L, (-1925L));
      interval1.trimBy(interval0);
      assertEquals(1L, interval1.getStart());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interval interval0 = new Interval(0L, (-1L), true);
      Interval interval1 = new Interval((-826L), 331L);
      boolean boolean0 = interval0.intersects(interval1);
      assertEquals(1157L, interval1.getLength());
      assertFalse(boolean0);
      assertTrue(interval0.isEos());
      assertEquals((-1L), interval0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Interval interval0 = new Interval((-1L), 772L, true);
      Interval interval1 = new Interval(684L, (-1L));
      boolean boolean0 = interval0.intersects(interval1);
      assertEquals(773L, interval0.getLength());
      assertFalse(boolean0);
      assertTrue(interval0.isEos());
      assertEquals((-685L), interval1.getLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Interval interval0 = new Interval(0L, (-393L), true);
      boolean boolean0 = interval0.isEmpty();
      assertEquals((-393L), interval0.getLength());
      assertTrue(interval0.isEos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Interval interval0 = new Interval(2558L, 2558L);
      boolean boolean0 = interval0.isEmpty();
      assertEquals(0L, interval0.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interval interval0 = new Interval(0L, (-1L), true);
      boolean boolean0 = interval0.isEos();
      assertEquals((-1L), interval0.getLength());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, false);
      interval0.trimHead(45);
      long long0 = interval0.getStart();
      assertFalse(interval0.isEmpty());
      assertEquals(45L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval interval0 = new Interval((-1173L), (-1173L), true);
      long long0 = interval0.getStart();
      assertEquals((-1173L), long0);
      assertEquals((-1173L), interval0.getEnd());
      assertTrue(interval0.isEos());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Interval interval0 = new Interval(0L, 735L);
      long long0 = interval0.getLength();
      assertEquals(735L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-2517L));
      long long0 = interval0.getLength();
      assertEquals((-2516L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, false);
      interval0.getEnd();
      assertFalse(interval0.isEos());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Interval interval0 = new Interval(0L, (-1L), true);
      long long0 = interval0.getEnd();
      assertEquals((-1L), long0);
      assertTrue(interval0.isEos());
      assertEquals(0L, interval0.getStart());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      // Undeclared exception!
      try { 
        interval0.trimBy((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      // Undeclared exception!
      try { 
        interval0.intersects((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval interval0 = new Interval(2054L, 2054L, false);
      // Undeclared exception!
      try { 
        interval0.contains((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Interval interval0 = new Interval(961L, 961L, true);
      String string0 = interval0.toString();
      assertEquals(961L, interval0.getEnd());
      assertEquals("961", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Interval interval0 = new Interval(2558L, 2558L);
      String string0 = interval0.toString();
      assertEquals("2558-2558", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Interval interval0 = new Interval(0, 0);
      String string0 = interval0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Interval interval0 = new Interval((-1L), 772L, true);
      Interval interval1 = new Interval((-1L), (-2517L));
      interval1.trimBy(interval0);
      interval0.trimBy(interval1);
      assertEquals((-3290L), interval1.getLength());
      assertEquals(773L, interval0.getLength());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, false);
      interval0.trimBy(interval0);
      assertFalse(interval0.isEos());
      assertEquals(0L, interval0.getLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Interval interval0 = new Interval(2558L, 2558L);
      Interval interval1 = new Interval(0, 0);
      interval0.trimBy(interval1);
      interval0.trimBy(interval1);
      assertEquals((-2559L), interval0.getLength());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Interval interval0 = new Interval(3058L, 3058L);
      Interval interval1 = new Interval((-3047L), 3058L, false);
      boolean boolean0 = interval0.intersects(interval1);
      assertFalse(boolean0);
      assertEquals(0L, interval0.getLength());
      assertFalse(interval1.isEos());
      assertEquals(6105L, interval1.getLength());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = new Interval('-', '-', true);
      boolean boolean0 = interval1.intersects(interval0);
      assertFalse(boolean0);
      assertEquals(0L, interval1.getLength());
      assertTrue(interval1.isEos());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Interval interval0 = new Interval((-5L), 1239L);
      Interval interval1 = new Interval((-1263L), '-', false);
      boolean boolean0 = interval0.intersects(interval1);
      assertFalse(interval1.isEos());
      assertEquals((-5L), interval0.getStart());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), 1L, true);
      Interval interval1 = new Interval((-311L), '-');
      boolean boolean0 = interval0.intersects(interval1);
      assertTrue(interval0.isEos());
      assertTrue(boolean0);
      assertEquals(1387L, interval0.getLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Interval interval0 = new Interval((-3402L), (-3402L), true);
      Interval interval1 = new Interval((-3722L), (-3722L));
      boolean boolean0 = interval1.intersects(interval0);
      assertFalse(boolean0);
      assertEquals(0L, interval1.getLength());
      assertEquals(0L, interval0.getLength());
      assertTrue(interval0.isEos());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, false);
      Interval interval1 = new Interval((-166L), 0L);
      boolean boolean0 = interval1.intersects(interval0);
      assertEquals(166L, interval1.getLength());
      assertFalse(interval0.isEos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Interval interval0 = new Interval((-5L), 1239L);
      boolean boolean0 = interval0.intersects(interval0);
      assertEquals(1244L, interval0.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, false);
      boolean boolean0 = interval0.contains(interval0);
      assertFalse(interval0.isEos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Interval interval0 = new Interval(0L, 28L, false);
      boolean boolean0 = interval0.isEmpty();
      assertFalse(boolean0);
      assertFalse(interval0.isEos());
      assertEquals(28L, interval0.getLength());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, false);
      boolean boolean0 = interval0.isEmpty();
      assertTrue(boolean0);
      assertFalse(interval0.isEos());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Interval interval0 = new Interval((-5L), 1239L);
      boolean boolean0 = interval0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1244L, interval0.getLength());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, false);
      interval0.getStart();
      assertFalse(interval0.isEos());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Interval interval0 = new Interval(24L, 24L);
      long long0 = interval0.getLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, false);
      interval0.trimTail((-1485));
      Interval interval1 = new Interval(0L, 28L, false);
      boolean boolean0 = interval1.contains(interval0);
      assertFalse(interval0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Interval interval0 = new Interval(2558L, 2558L);
      long long0 = interval0.getEnd();
      assertEquals(2558L, long0);
      assertEquals(2558L, interval0.getStart());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, false);
      interval0.trimHead(45);
      Interval interval1 = new Interval(0L, 28L, false);
      boolean boolean0 = interval0.contains(interval1);
      assertFalse(interval0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Interval interval0 = new Interval(3058L, 3058L);
      interval0.isEos();
      assertEquals(0L, interval0.getLength());
  }
}
