/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 06:33:03 GMT 2022
 */

package net.segoia.util.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.data.ValueType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValueType_ESTest extends ValueType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValueType valueType0 = new ValueType("{type=");
      valueType0.setValue("{type=");
      String string0 = valueType0.getValue();
      assertEquals("{type=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      ValueType valueType0 = new ValueType(object0);
      valueType0.setValue("");
      String string0 = valueType0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      ValueType valueType0 = new ValueType(object0);
      valueType0.setType((String) null);
      String string0 = valueType0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValueType valueType0 = new ValueType("");
      String string0 = valueType0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValueType valueType0 = null;
      try {
        valueType0 = new ValueType((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValueType valueType0 = new ValueType();
      ValueType valueType1 = new ValueType(valueType0);
      ValueType valueType2 = new ValueType(valueType0);
      boolean boolean0 = valueType1.equals(valueType2);
      assertFalse(valueType2.equals((Object)valueType0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValueType valueType0 = new ValueType();
      ValueType valueType1 = new ValueType();
      assertTrue(valueType1.equals((Object)valueType0));
      
      valueType1.setValue("");
      boolean boolean0 = valueType0.equals(valueType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValueType valueType0 = new ValueType("{type=");
      valueType0.setValue("{type=");
      ValueType valueType1 = new ValueType("{type=");
      boolean boolean0 = valueType0.equals(valueType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      ValueType valueType0 = new ValueType(object0);
      ValueType valueType1 = new ValueType((Object) null, "");
      boolean boolean0 = valueType0.equals(valueType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValueType valueType0 = new ValueType();
      ValueType valueType1 = new ValueType();
      boolean boolean0 = valueType0.equals(valueType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValueType valueType0 = new ValueType("{type=");
      Object object0 = new Object();
      boolean boolean0 = valueType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      ValueType valueType0 = new ValueType(object0);
      boolean boolean0 = valueType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValueType valueType0 = new ValueType();
      boolean boolean0 = valueType0.equals(valueType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValueType valueType0 = new ValueType();
      valueType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValueType valueType0 = new ValueType("{type=");
      valueType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ValueType valueType0 = new ValueType();
      ValueType valueType1 = new ValueType(valueType0, (String) null);
      assertFalse(valueType1.equals((Object)valueType0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ValueType valueType0 = new ValueType("{type=");
      valueType0.setValue("{type=");
      valueType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ValueType valueType0 = new ValueType("{type=");
      String string0 = valueType0.toString();
      assertEquals("{type={type=, value=null}", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ValueType valueType0 = new ValueType();
      ValueType valueType1 = new ValueType(valueType0);
      boolean boolean0 = valueType0.equals(valueType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ValueType valueType0 = new ValueType("{type=");
      String string0 = valueType0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ValueType valueType0 = new ValueType("{type=");
      String string0 = valueType0.getType();
      assertEquals("{type=", string0);
  }
}
