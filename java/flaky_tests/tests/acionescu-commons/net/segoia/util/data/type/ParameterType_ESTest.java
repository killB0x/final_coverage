/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 06:09:40 GMT 2022
 */

package net.segoia.util.data.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.data.type.ListType;
import net.segoia.util.data.type.ParameterType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParameterType_ESTest extends ParameterType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      ParameterType parameterType1 = ParameterType.fromString("e3|Iso");
      boolean boolean0 = parameterType1.matches(parameterType0);
      assertEquals("e3|Iso", parameterType1.getType());
      assertEquals("SIMPLE", parameterType1.getParameterTypeType());
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType("1R9_=[[");
      ListType listType0 = new ListType(parameterType0);
      String string0 = listType0.toString();
      assertEquals("List[1R9_=[[]", string0);
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
      assertEquals("List", listType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      parameterType0.setType("");
      String string0 = parameterType0.toString();
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParameterType parameterType0 = ParameterType.fromString("D^{]b4(");
      assertNotNull(parameterType0);
      
      String string0 = parameterType0.getTypeForMatchingRule("-?0hx-F");
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
      assertEquals("D^{]b4(", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType("");
      String string0 = parameterType0.getTypeForMatchingRule("");
      assertEquals("", string0);
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType("Z^VMe9l>Y3DY~B\"@Sm@");
      String string0 = parameterType0.getType();
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
      assertEquals("Z^VMe9l>Y3DY~B\"@Sm@", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType((String) null);
      parameterType0.setParameterTypeType((String) null);
      String string0 = parameterType0.getParameterTypeType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType("List[");
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
      
      parameterType0.setParameterTypeType("");
      parameterType0.getParameterTypeType();
      assertEquals("", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ListType listType0 = new ListType();
      listType0.setNestedType(listType0);
      // Undeclared exception!
      try { 
        listType0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType("List");
      ListType listType0 = new ListType(parameterType0);
      // Undeclared exception!
      try { 
        listType0.matches(parameterType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListType listType0 = new ListType();
      listType0.setNestedType(listType0);
      // Undeclared exception!
      try { 
        listType0.fullGenericTypes();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParameterType parameterType0 = ListType.fromString("Any");
      // Undeclared exception!
      try { 
        parameterType0.fullGenericTypes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.type.ListType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        ParameterType.fromString("Context");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse type 'Context'
         //
         verifyException("net.segoia.util.data.type.ParameterType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType("1R9_=[[");
      ParameterType parameterType1 = new ParameterType("Context");
      boolean boolean0 = parameterType0.equals(parameterType1);
      assertEquals("SIMPLE", parameterType1.getParameterTypeType());
      assertFalse(parameterType1.equals((Object)parameterType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      ParameterType parameterType1 = new ParameterType();
      boolean boolean0 = parameterType0.equals(parameterType1);
      assertTrue(boolean0);
      assertEquals("SIMPLE", parameterType1.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ListType listType0 = new ListType();
      listType0.setParameterTypeType((String) null);
      ListType listType1 = new ListType();
      assertFalse(listType1.equals((Object)listType0));
      
      listType1.setParameterTypeType((String) null);
      boolean boolean0 = listType1.equals(listType0);
      assertTrue(listType1.equals((Object)listType0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ListType listType0 = new ListType();
      ListType listType1 = new ListType();
      assertTrue(listType1.equals((Object)listType0));
      
      listType1.setParameterTypeType((String) null);
      boolean boolean0 = listType1.equals(listType0);
      assertFalse(listType1.equals((Object)listType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType("[]");
      ListType listType0 = new ListType(parameterType0);
      ListType listType1 = new ListType(listType0);
      boolean boolean0 = listType0.equals(listType1);
      assertEquals("List", listType1.getParameterTypeType());
      assertEquals("List", listType1.getType());
      assertFalse(boolean0);
      assertEquals("[]", parameterType0.getType());
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType((String) null);
      boolean boolean0 = parameterType0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParameterType parameterType0 = ParameterType.fromString("^jW");
      assertNotNull(parameterType0);
      
      ListType listType0 = new ListType(parameterType0);
      ListType listType1 = new ListType(parameterType0);
      boolean boolean0 = listType0.equals(listType1);
      assertEquals("^jW", parameterType0.getType());
      assertTrue(boolean0);
      assertEquals("List", listType1.getParameterTypeType());
      assertEquals("List", listType1.getType());
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      ParameterType parameterType1 = ParameterType.fromString("e3|Iso");
      assertNotNull(parameterType1);
      
      boolean boolean0 = parameterType0.equals(parameterType1);
      assertEquals("SIMPLE", parameterType1.getParameterTypeType());
      assertFalse(boolean0);
      assertEquals("e3|Iso", parameterType1.getType());
      assertFalse(parameterType1.equals((Object)parameterType0));
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType("[]");
      ListType listType0 = new ListType(parameterType0);
      assertEquals("List", listType0.getParameterTypeType());
      
      listType0.setParameterTypeType((String) null);
      listType0.hashCode();
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
      assertEquals("List", listType0.getType());
      assertEquals("[]", parameterType0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      parameterType0.hashCode();
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      boolean boolean0 = parameterType0.matches((ParameterType) null);
      assertFalse(boolean0);
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType("Z^VMe9l>Y3DY~B\"@Sm@");
      ListType listType0 = new ListType(parameterType0);
      assertEquals("Z^VMe9l>Y3DY~B\"@Sm@", parameterType0.getType());
      
      parameterType0.setType("Any");
      boolean boolean0 = parameterType0.matches(listType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      // Undeclared exception!
      try { 
        parameterType0.matches(parameterType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      try { 
        ParameterType.fromString("List[Any]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse type 'List[Any]'
         //
         verifyException("net.segoia.util.data.type.ParameterType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParameterType parameterType0 = ListType.fromString("[]");
      String string0 = parameterType0.fullGenericTypes();
      assertEquals("List[]", string0);
      assertEquals("List", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParameterType parameterType0 = ParameterType.fromString((String) null);
      assertNull(parameterType0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      String string0 = parameterType0.getType();
      assertNull(string0);
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      String string0 = parameterType0.toString();
      assertNull(string0);
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      parameterType0.setParameterTypeType("List[");
      ParameterType parameterType1 = ParameterType.fromString("e3|Iso");
      boolean boolean0 = parameterType0.equals(parameterType1);
      assertEquals("List[", parameterType0.getParameterTypeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      parameterType0.fullGenericTypes();
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      String string0 = parameterType0.getTypeForMatchingRule("List[");
      assertNull(string0);
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[5];
      try { 
        ParameterType.main(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse type 'Context[a=String,b=Number,c=List[Number],m=Date,d=Context[f=String,e=Number],z=h]'
         //
         verifyException("net.segoia.util.data.type.ParameterType", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType("?%[+4");
      String string0 = parameterType0.getParameterTypeType();
      assertEquals("SIMPLE", string0);
      assertEquals("?%[+4", parameterType0.getType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      parameterType0.setType("");
      String string0 = parameterType0.getType();
      assertEquals("", string0);
      assertEquals("SIMPLE", parameterType0.getParameterTypeType());
  }
}
