/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 06:22:18 GMT 2022
 */

package net.segoia.util.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.data.NameValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameValue_ESTest extends NameValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      assertNull(nameValue0.getName());
      
      nameValue0.value = (Object) "/";
      nameValue0.setName("/");
      nameValue0.setName(" ");
      NameValue<NameValue<Object>> nameValue1 = new NameValue<NameValue<Object>>("\"", nameValue0);
      nameValue1.setName("' for class '");
      nameValue1.copy();
      String string0 = "T";
      NameValue<NameValue<Object>> nameValue2 = new NameValue<NameValue<Object>>("T", nameValue0);
      nameValue0.value = (Object) nameValue2;
      NameValue<NameValue<Object>> nameValue3 = nameValue2.copy();
      NameValue<Object> nameValue4 = new NameValue<Object>();
      NameValue<Integer> nameValue5 = new NameValue<Integer>();
      NameValue<NameValue<Object>> nameValue6 = nameValue3.copy();
      Object object0 = nameValue0.getValue();
      nameValue6.equals(object0);
      nameValue0.hashCode();
      NameValue<NameValue<Integer>> nameValue7 = new NameValue<NameValue<Integer>>(string0, nameValue5);
      int int0 = (-2004589216);
      Integer integer0 = new Integer(int0);
      nameValue7.equals(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      String string0 = nameValue0.toString();
      assertEquals("null null", string0);
      
      NameValue<NameValue<Object>> nameValue1 = new NameValue<NameValue<Object>>("null null", nameValue0);
      nameValue1.value = nameValue0;
      nameValue0.value = (Object) nameValue1.value;
      Integer integer0 = new Integer(1);
      NameValue<Object> nameValue2 = new NameValue<Object>("null null", integer0);
      NameValue.copy(nameValue2);
      NameValue<NameValue<Object>> nameValue3 = nameValue1.copy();
      nameValue3.equals(nameValue0);
      // Undeclared exception!
      nameValue1.value.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      nameValue0.value = (Object) "/";
      nameValue0.setName(" ");
      NameValue<NameValue<Object>> nameValue1 = new NameValue<NameValue<Object>>("/", nameValue0);
      NameValue<NameValue<Object>> nameValue2 = nameValue1.copy();
      NameValue<Object> nameValue3 = new NameValue<Object>();
      NameValue<Integer> nameValue4 = new NameValue<Integer>();
      nameValue2.copy();
      nameValue0.hashCode();
      nameValue3.toString();
      nameValue3.name = " ";
      NameValue nameValue5 = (NameValue)nameValue0.getValue();
      nameValue1.equals(nameValue5);
      nameValue0.hashCode();
      // Undeclared exception!
      try { 
        nameValue5.getValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NameValue<Integer> nameValue0 = new NameValue<Integer>();
      NameValue.copy(nameValue0);
      NameValue<?> nameValue1 = NameValue.copy((NameValue<?>) null);
      assertNull(nameValue1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>("u`.O%NX`%s", "u`.O%NX`%s");
      NameValue<Object> nameValue1 = new NameValue<Object>("?fAOXZ7H~7w,bL<$p%", "?fAOXZ7H~7w,bL<$p%");
      nameValue1.name = "?fAOXZ7H~7w,bL<$p%";
      nameValue0.compareTo(nameValue1);
      int int0 = nameValue1.compareTo(nameValue0);
      assertEquals((-54), int0);
      
      NameValue<NameValue<Integer>> nameValue2 = new NameValue<NameValue<Integer>>();
      Integer integer0 = new Integer(2351);
      NameValue<Integer> nameValue3 = new NameValue<Integer>(" ", integer0);
      NameValue<Integer> nameValue4 = nameValue3.copy();
      assertTrue(nameValue4.equals((Object)nameValue3));
      
      nameValue2.value = nameValue4;
      nameValue2.hashCode();
      NameValue<Integer> nameValue5 = new NameValue<Integer>();
      NameValue<Integer> nameValue6 = new NameValue<Integer>();
      String string0 = nameValue6.toString();
      assertEquals("null null", string0);
      
      int int1 = nameValue5.compareTo(nameValue6);
      assertEquals(0, int1);
      
      nameValue6.copy();
      NameValue<NameValue<Integer>> nameValue7 = nameValue2.copy();
      assertNotSame(nameValue2, nameValue7);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      int int0 = nameValue0.compareTo(nameValue0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NameValue<Integer> nameValue0 = new NameValue<Integer>();
      nameValue0.getName();
      NameValue<Object> nameValue1 = new NameValue<Object>((String) null, nameValue0);
      NameValue<Object> nameValue2 = nameValue1.copy();
      nameValue2.value = (Object) nameValue1;
      Object object0 = new Object();
      nameValue1.setValue(object0);
      NameValue<Object> nameValue3 = new NameValue<Object>();
      nameValue2.equals(nameValue3);
      nameValue0.getName();
      NameValue.copy(nameValue2);
      NameValue<Object> nameValue4 = nameValue2.copy();
      nameValue2.getName();
      NameValue<Integer> nameValue5 = new NameValue<Integer>();
      nameValue5.getValue();
      Integer integer0 = new Integer(31);
      nameValue4.setValue(nameValue1);
      NameValue.copy(nameValue4);
      nameValue0.equals((Object) null);
      NameValue<Object> nameValue6 = nameValue3.copy();
      NameValue.copy(nameValue6);
      NameValue<NameValue<Object>> nameValue7 = new NameValue<NameValue<Object>>("0QWhmHzHZ;1", nameValue4);
      NameValue<NameValue<Object>> nameValue8 = nameValue7.copy();
      nameValue8.copy();
      boolean boolean0 = nameValue5.equals(nameValue4);
      assertFalse(boolean0);
      
      nameValue5.setName("0QWhmHzHZ;1");
      nameValue5.toString();
      nameValue0.copy();
      Integer integer1 = new Integer(0);
      boolean boolean1 = nameValue1.equals(nameValue2);
      assertFalse(nameValue0.equals((Object)nameValue5));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      NameValue<Object> nameValue1 = nameValue0.copy();
      assertNotSame(nameValue1, nameValue0);
      
      NameValue<Object> nameValue2 = nameValue0.copy();
      assertTrue(nameValue2.equals((Object)nameValue0));
      
      nameValue2.setValue(nameValue0);
      boolean boolean0 = nameValue0.equals(nameValue2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      Object object0 = nameValue0.value;
      NameValue<Object> nameValue1 = new NameValue<Object>();
      Object object1 = new Object();
      nameValue0.equals(object1);
      Integer integer0 = new Integer(0);
      NameValue<Integer> nameValue2 = new NameValue<Integer>("BPxEP>LfdBP5a", integer0);
      NameValue<Integer> nameValue3 = nameValue2.copy();
      nameValue3.getName();
      NameValue.copy(nameValue3);
      nameValue1.copy();
      nameValue0.getName();
      nameValue2.setName("BPxEP>LfdBP5a");
      NameValue.copy(nameValue2);
      NameValue<Integer> nameValue4 = new NameValue<Integer>();
      NameValue.copy(nameValue0);
      nameValue3.compareTo(nameValue2);
      nameValue4.compareTo(nameValue3);
      NameValue<NameValue<Integer>> nameValue5 = new NameValue<NameValue<Integer>>("Q'^ (j)m%x;OXK", nameValue4);
      NameValue<NameValue<Integer>> nameValue6 = nameValue5.copy();
      nameValue6.getValue();
      nameValue1.setName("Q'^ (j)m%x;OXK");
      nameValue4.getName();
      NameValue<Integer> nameValue7 = nameValue2.copy();
      boolean boolean0 = nameValue2.equals(nameValue7);
      assertTrue(boolean0);
      
      nameValue7.getName();
      nameValue1.getValue();
      assertFalse(nameValue1.equals((Object)nameValue0));
      
      NameValue<Object> nameValue8 = new NameValue<Object>();
      nameValue8.copy();
      Object object2 = nameValue8.value;
      NameValue<Object> nameValue9 = new NameValue<Object>("net.segoia.util.data.NameValue", (Object) null);
      NameValue.copy(nameValue9);
      int int0 = nameValue6.compareTo(nameValue5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>("_EDZ8O.4", "_EDZ8O.4");
      NameValue<Object> nameValue1 = nameValue0.copy();
      boolean boolean0 = nameValue0.equals(nameValue1);
      assertNotSame(nameValue1, nameValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(473);
      NameValue<Object> nameValue0 = new NameValue<Object>("Field '", integer0);
      NameValue<Object> nameValue1 = new NameValue<Object>("Field '", "Field '");
      // Undeclared exception!
      try { 
        nameValue0.compareTo(nameValue1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class java.lang.Integer (java.lang.String and java.lang.Integer are in module java.base of loader 'bootstrap')
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NameValue<Integer> nameValue0 = new NameValue<Integer>();
      nameValue0.getName();
      Integer integer0 = new Integer((-1));
      nameValue0.setValue(integer0);
      NameValue<Object> nameValue1 = new NameValue<Object>();
      NameValue<NameValue<Object>> nameValue2 = new NameValue<NameValue<Object>>((String) null, nameValue1);
      NameValue<Object> nameValue3 = nameValue2.value;
      nameValue1.equals(nameValue3);
      Integer integer1 = new Integer(1773);
      nameValue3.setValue(nameValue1);
      NameValue<Integer> nameValue4 = new NameValue<Integer>();
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(2562);
      nameValue0.setValue(integer3);
      Integer integer4 = nameValue4.value;
      nameValue1.setValue((Object) null);
      nameValue3.hashCode();
      nameValue3.setName("w}x>TF}sf");
      assertSame(nameValue1, nameValue3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameValue<Integer> nameValue0 = new NameValue<Integer>();
      NameValue<Object> nameValue1 = new NameValue<Object>();
      Object object0 = new Object();
      boolean boolean0 = nameValue1.equals(nameValue1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NameValue<Integer> nameValue0 = new NameValue<Integer>();
      nameValue0.getName();
      NameValue<Object> nameValue1 = new NameValue<Object>((String) null, nameValue0);
      NameValue<Object> nameValue2 = nameValue1.copy();
      assertTrue(nameValue2.equals((Object)nameValue1));
      
      nameValue2.value = (Object) nameValue1;
      Object object0 = new Object();
      nameValue1.setValue(object0);
      NameValue<Object> nameValue3 = new NameValue<Object>();
      boolean boolean0 = nameValue2.equals(nameValue3);
      assertFalse(boolean0);
      
      nameValue0.getName();
      NameValue.copy(nameValue2);
      NameValue<Object> nameValue4 = nameValue2.copy();
      nameValue2.getName();
      nameValue0.setName("net.segoia.util.data.NameValue");
      NameValue.copy(nameValue1);
      NameValue<Integer> nameValue5 = new NameValue<Integer>();
      NameValue.copy(nameValue5);
      nameValue0.compareTo(nameValue5);
      nameValue5.compareTo(nameValue0);
      NameValue<NameValue<Integer>> nameValue6 = new NameValue<NameValue<Integer>>("", nameValue0);
      NameValue<NameValue<Integer>> nameValue7 = nameValue6.copy();
      NameValue<Integer> nameValue8 = nameValue7.getValue();
      nameValue2.setName((String) null);
      nameValue8.getName();
      nameValue0.equals(nameValue6);
      nameValue5.getName();
      nameValue3.getValue();
      NameValue<Object> nameValue9 = nameValue4.copy();
      nameValue9.toString();
      NameValue.copy(nameValue9);
      int int0 = nameValue7.compareTo(nameValue6);
      assertNotSame(nameValue7, nameValue6);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NameValue<Integer> nameValue0 = new NameValue<Integer>();
      NameValue<Object> nameValue1 = new NameValue<Object>();
      nameValue1.setValue(nameValue0);
      boolean boolean0 = nameValue1.equals(nameValue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      NameValue<Object> nameValue1 = nameValue0.copy();
      NameValue.copy(nameValue1);
      Integer integer0 = new Integer(0);
      Integer integer1 = Integer.getInteger("m4O,0", integer0);
      NameValue<Integer> nameValue2 = new NameValue<Integer>("m4O,0", integer1);
      Integer integer2 = new Integer((-1));
      nameValue2.setValue(integer2);
      Integer integer3 = new Integer(0);
      NameValue<Integer> nameValue3 = new NameValue<Integer>("", integer3);
      int int0 = nameValue2.compareTo(nameValue3);
      assertEquals((-1), int0);
      
      NameValue<Integer> nameValue4 = new NameValue<Integer>();
      int int1 = nameValue2.compareTo(nameValue4);
      assertEquals(0, int1);
      
      nameValue0.hashCode();
      assertNotSame(nameValue0, nameValue1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NameValue<Integer> nameValue0 = new NameValue<Integer>();
      nameValue0.setName("XNk&& -");
      nameValue0.toString();
      NameValue<Object> nameValue1 = new NameValue<Object>();
      NameValue<Object> nameValue2 = nameValue1.copy();
      nameValue2.name = "";
      nameValue1.toString();
      nameValue1.getValue();
      nameValue0.equals((Object) null);
      NameValue<NameValue<Object>> nameValue3 = new NameValue<NameValue<Object>>();
      NameValue.copy(nameValue0);
      nameValue3.compareTo((NameValue<NameValue<Object>>) null);
      Integer integer0 = new Integer(1548);
      NameValue<Integer> nameValue4 = new NameValue<Integer>("", integer0);
      nameValue0.compareTo(nameValue4);
      NameValue<NameValue<Object>> nameValue5 = nameValue3.copy();
      boolean boolean0 = nameValue1.equals(nameValue2);
      assertFalse(boolean0);
      
      nameValue0.setName("");
      nameValue0.getName();
      nameValue5.compareTo(nameValue3);
      nameValue3.getName();
      Integer integer1 = new Integer((-2735));
      nameValue4.setValue(integer1);
      nameValue5.setName("");
      assertFalse(nameValue3.equals((Object)nameValue5));
      
      NameValue<?> nameValue6 = NameValue.copy(nameValue2);
      NameValue<Object> nameValue7 = nameValue1.copy();
      nameValue7.copy();
      nameValue4.setName("");
      NameValue<?> nameValue8 = NameValue.copy(nameValue6);
      assertTrue(nameValue8.equals((Object)nameValue6));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      NameValue<Object> nameValue1 = new NameValue<Object>("/", "/");
      boolean boolean0 = nameValue0.equals(nameValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      boolean boolean0 = nameValue0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NameValue<Integer> nameValue0 = new NameValue<Integer>();
      Integer integer0 = new Integer((-1));
      nameValue0.value = integer0;
      nameValue0.toString();
      nameValue0.hashCode();
      NameValue<?> nameValue1 = NameValue.copy(nameValue0);
      nameValue0.equals("null -1");
      NameValue<Object> nameValue2 = new NameValue<Object>();
      Integer.getInteger("null -1");
      nameValue2.value = (Object) null;
      NameValue<Object> nameValue3 = nameValue2.copy();
      NameValue<Object> nameValue4 = new NameValue<Object>();
      nameValue2.name = "%fb|65w3e(cA";
      nameValue4.compareTo(nameValue2);
      NameValue.copy(nameValue1);
      nameValue3.setValue("%fb|65w3e(cA");
      nameValue3.compareTo(nameValue4);
      nameValue0.setName("null -1");
      NameValue<Object> nameValue5 = new NameValue<Object>();
      NameValue<Object> nameValue6 = nameValue5.copy();
      nameValue6.getValue();
      nameValue4.value = null;
      nameValue0.getValue();
      Integer integer1 = new Integer(0);
      nameValue0.setValue(integer1);
      NameValue<Object> nameValue7 = nameValue3.copy();
      NameValue<Object> nameValue8 = nameValue7.copy();
      nameValue8.setName("D");
      nameValue8.toString();
      nameValue0.compareTo((NameValue<Integer>) null);
      nameValue7.getName();
      nameValue7.setName("D %fb|65w3e(cA");
      nameValue0.hashCode();
      nameValue2.toString();
      nameValue2.hashCode();
      int int0 = nameValue2.compareTo(nameValue4);
      assertFalse(nameValue4.equals((Object)nameValue3));
      assertTrue(nameValue4.equals((Object)nameValue5));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>("", "");
      NameValue<?> nameValue1 = NameValue.copy(nameValue0);
      nameValue0.setName("");
      Integer integer0 = new Integer(0);
      NameValue<Integer> nameValue2 = new NameValue<Integer>("", integer0);
      nameValue2.name = "";
      nameValue2.name = "";
      nameValue2.getValue();
      nameValue2.copy();
      nameValue2.getName();
      NameValue.copy(nameValue1);
      nameValue0.toString();
      NameValue.copy(nameValue2);
      NameValue<NameValue<Object>> nameValue3 = new NameValue<NameValue<Object>>();
      nameValue3.getName();
      NameValue.copy(nameValue3);
      nameValue2.setValue((Integer) null);
      String string0 = (String)nameValue0.value;
      nameValue0.setValue("");
      assertEquals("", nameValue0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      NameValue<Object> nameValue1 = new NameValue<Object>();
      NameValue<Object> nameValue2 = nameValue1.copy();
      nameValue0.compareTo(nameValue1);
      nameValue0.setName("Mx:Q[{!{t$g2v8!Pi");
      NameValue<Object> nameValue3 = nameValue0.copy();
      nameValue3.getValue();
      NameValue<Object> nameValue4 = new NameValue<Object>("", (Object) null);
      nameValue4.getValue();
      nameValue3.compareTo(nameValue0);
      nameValue3.compareTo(nameValue4);
      NameValue<NameValue<Object>> nameValue5 = new NameValue<NameValue<Object>>();
      nameValue5.setName((String) null);
      Object object0 = new Object();
      nameValue5.equals(object0);
      nameValue1.compareTo(nameValue3);
      assertTrue(nameValue1.equals((Object)nameValue2));
      
      NameValue.copy(nameValue5);
      Integer integer0 = new Integer(0);
      NameValue<Integer> nameValue6 = new NameValue<Integer>("Mx:Q[{!{t$g2v8!Pi", integer0);
      NameValue<Integer> nameValue7 = nameValue6.copy();
      nameValue7.hashCode();
      Integer integer1 = new Integer(0);
      nameValue2.setValue(integer1);
      assertFalse(nameValue2.equals((Object)nameValue0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-2724));
      NameValue<Integer> nameValue0 = new NameValue<Integer>("", integer0);
      NameValue<Object> nameValue1 = new NameValue<Object>();
      NameValue<NameValue<Object>> nameValue2 = new NameValue<NameValue<Object>>(" ", nameValue1);
      NameValue<NameValue<Object>> nameValue3 = nameValue2.copy();
      nameValue3.compareTo(nameValue2);
      Object object0 = nameValue3.getValue();
      Integer integer1 = new Integer((-2724));
      nameValue1.setValue(integer1);
      NameValue.copy(nameValue3);
      nameValue0.equals(object0);
      NameValue.copy(nameValue1);
      nameValue3.copy();
      boolean boolean0 = nameValue0.equals(nameValue1);
      assertFalse(boolean0);
      
      nameValue0.setName(" ");
      nameValue0.toString();
      nameValue0.copy();
      assertEquals(" ", nameValue0.getName());
      
      Integer integer2 = new Integer(0);
      boolean boolean1 = nameValue1.equals(integer2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      Object object0 = new Object();
      boolean boolean0 = nameValue0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      NameValue<NameValue<Object>> nameValue1 = new NameValue<NameValue<Object>>("abdfQKeY_3", nameValue0);
      NameValue<NameValue<Object>> nameValue2 = new NameValue<NameValue<Object>>();
      int int0 = nameValue1.compareTo(nameValue2);
      assertEquals(0, int0);
      
      boolean boolean0 = nameValue1.equals(nameValue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NameValue<Integer> nameValue0 = new NameValue<Integer>();
      NameValue<Object> nameValue1 = new NameValue<Object>("' for class '", "' for class '");
      NameValue<Object> nameValue2 = nameValue1.copy();
      nameValue2.compareTo(nameValue1);
      assertNotSame(nameValue2, nameValue1);
      assertTrue(nameValue2.equals((Object)nameValue1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>("Xa~Qz_oBOm#an +tt", "Xa~Qz_oBOm#an +tt");
      int int0 = nameValue0.compareTo((NameValue<Object>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NameValue<NameValue<Object>> nameValue0 = new NameValue<NameValue<Object>>();
      NameValue<NameValue<Object>> nameValue1 = nameValue0.copy();
      NameValue<Object> nameValue2 = new NameValue<Object>();
      Object object0 = nameValue2.value;
      nameValue1.compareTo(nameValue0);
      nameValue2.setName("");
      NameValue<Object> nameValue3 = new NameValue<Object>((String) null, (Object) null);
      NameValue<Object> nameValue4 = nameValue3.copy();
      nameValue3.compareTo(nameValue2);
      nameValue2.value = (Object) nameValue3;
      nameValue1.value = nameValue4;
      nameValue4.setValue((Object) null);
      NameValue<Object> nameValue5 = new NameValue<Object>("", nameValue0);
      nameValue1.setValue(nameValue5);
      nameValue5.hashCode();
      String string0 = nameValue2.toString();
      assertEquals(" null null", string0);
      
      nameValue1.value.compareTo(nameValue3);
      nameValue1.setName((String) null);
      int int0 = nameValue1.value.compareTo(nameValue2);
      assertEquals(0, int0);
      assertTrue(nameValue1.value.equals((Object)nameValue2));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>(",o1xPt(", ",o1xPt(");
      assertEquals(",o1xPt(", nameValue0.getName());
      
      nameValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NameValue<NameValue<Object>> nameValue0 = new NameValue<NameValue<Object>>();
      NameValue<NameValue<Object>> nameValue1 = nameValue0.copy();
      nameValue1.setName("K");
      assertFalse(nameValue1.equals((Object)nameValue0));
      
      NameValue<Integer> nameValue2 = new NameValue<Integer>();
      nameValue2.toString();
      Integer integer0 = Integer.getInteger("1&/5?4", 518);
      NameValue<Integer> nameValue3 = new NameValue<Integer>("null null", integer0);
      nameValue2.compareTo(nameValue3);
      NameValue<Object> nameValue4 = new NameValue<Object>("K", nameValue2);
      NameValue<Object> nameValue5 = nameValue4.copy();
      NameValue<Object> nameValue6 = nameValue5.copy();
      assertNotSame(nameValue6, nameValue5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      NameValue<NameValue<Object>> nameValue1 = new NameValue<NameValue<Object>>("abdfQKeY_3", nameValue0);
      boolean boolean0 = nameValue1.equals(nameValue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      NameValue<Object> nameValue1 = new NameValue<Object>();
      nameValue0.equals(nameValue1);
      assertTrue(nameValue1.equals((Object)nameValue0));
      
      Integer integer0 = new Integer(0);
      nameValue1.setValue(integer0);
      NameValue<Integer> nameValue2 = new NameValue<Integer>();
      Integer integer1 = new Integer(1);
      nameValue2.setValue(integer1);
      nameValue1.setValue(nameValue2);
      nameValue1.hashCode();
      nameValue1.setName("net.segoia.util.data.NameValue");
      assertFalse(nameValue1.equals((Object)nameValue0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NameValue<NameValue<Integer>> nameValue0 = new NameValue<NameValue<Integer>>();
      NameValue<NameValue<Integer>> nameValue1 = nameValue0.copy();
      boolean boolean0 = nameValue1.equals(nameValue0);
      assertTrue(boolean0);
      assertNotSame(nameValue1, nameValue0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      nameValue0.name = "";
      NameValue.copy((NameValue<?>) null);
      nameValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      NameValue<Object> nameValue1 = nameValue0.copy();
      nameValue0.value = null;
      nameValue1.name = null;
      boolean boolean0 = nameValue1.equals((Object) null);
      assertTrue(nameValue1.equals((Object)nameValue0));
      assertFalse(boolean0);
      
      NameValue<Integer> nameValue2 = new NameValue<Integer>();
      NameValue<Integer> nameValue3 = nameValue2.copy();
      nameValue2.compareTo(nameValue3);
      Integer integer0 = new Integer(2310);
      NameValue<Integer> nameValue4 = new NameValue<Integer>("", integer0);
      int int0 = nameValue2.compareTo(nameValue4);
      assertEquals(0, int0);
      
      nameValue4.setName("");
      nameValue0.setValue((Object) null);
      assertNotSame(nameValue0, nameValue1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      nameValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      nameValue0.name = "";
      nameValue0.setName("");
      nameValue0.setName("");
      nameValue0.setName("/");
      nameValue0.toString();
      nameValue0.getName();
      nameValue0.getName();
      NameValue<NameValue<Object>> nameValue1 = new NameValue<NameValue<Object>>();
      NameValue<NameValue<Object>> nameValue2 = nameValue1.copy();
      NameValue.copy(nameValue2);
      nameValue2.setName("");
      nameValue2.copy();
      nameValue2.name = "/ null";
      nameValue2.equals(nameValue0);
      NameValue<Integer> nameValue3 = new NameValue<Integer>();
      nameValue3.getName();
      nameValue3.hashCode();
      nameValue0.setName(" ");
      assertEquals(" ", nameValue0.getName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      NameValue<Integer> nameValue1 = new NameValue<Integer>();
      NameValue<?> nameValue2 = NameValue.copy(nameValue1);
      nameValue0.toString();
      nameValue0.compareTo(nameValue0);
      NameValue<Integer> nameValue3 = new NameValue<Integer>();
      NameValue<?> nameValue4 = NameValue.copy(nameValue0);
      assertNotSame(nameValue4, nameValue2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      NameValue<Object> nameValue1 = nameValue0.copy();
      int int0 = nameValue0.compareTo(nameValue1);
      assertNotSame(nameValue1, nameValue0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      NameValue<?> nameValue1 = NameValue.copy(nameValue0);
      assertNull(nameValue1.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NameValue<Object> nameValue0 = new NameValue<Object>();
      nameValue0.setName("");
      NameValue<Object> nameValue1 = nameValue0.copy();
      assertNotNull(nameValue1);
      
      nameValue1.compareTo(nameValue0);
      nameValue0.getValue();
      nameValue0.compareTo(nameValue1);
      nameValue1.setName("");
      NameValue<NameValue<Integer>> nameValue2 = new NameValue<NameValue<Integer>>("", (NameValue<Integer>) null);
      nameValue2.setName("3%3vb");
      assertEquals("3%3vb", nameValue2.getName());
  }
}
