/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:23:32 GMT 2022
 */

package net.segoia.util.data;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import net.segoia.util.data.MapMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapMap_ESTest extends MapMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MapMap<Integer, Integer, Integer> mapMap0 = new MapMap<Integer, Integer, Integer>();
      Integer integer0 = new Integer(4441);
      Integer integer1 = new Integer(4441);
      mapMap0.putNestedValue(integer0, integer0, integer1);
      Integer integer2 = mapMap0.getNestedValue(integer1, integer0);
      assertEquals(4441, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      MapMap<Integer, HashMap<Integer, Integer>, Integer> mapMap0 = new MapMap<Integer, HashMap<Integer, Integer>, Integer>();
      mapMap0.putNestedValue(integer0, hashMap0, integer0);
      Integer integer1 = mapMap0.putNestedValue(integer0, hashMap0, integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapMap<Integer, HashMap<Integer, Integer>, Integer> mapMap0 = new MapMap<Integer, HashMap<Integer, Integer>, Integer>();
      Integer integer0 = mapMap0.getNestedValue((Integer) null, hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MapMap<Map<Integer, Integer>, Map<Integer, Integer>, Map<Integer, Integer>> mapMap0 = new MapMap<Map<Integer, Integer>, Map<Integer, Integer>, Map<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      mapMap0.putNestedValue(hashMap0, hashMap0, hashMap0);
      Map<Integer, Integer> map0 = mapMap0.getNestedValue(hashMap0, hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MapMap<Integer, Integer, HashMap<Integer, Integer>> mapMap0 = new MapMap<Integer, Integer, HashMap<Integer, Integer>>();
      Integer integer0 = new Integer(414);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      mapMap0.putNestedValue(integer0, integer0, hashMap0);
      mapMap0.putNestedValue(integer0, integer0, (HashMap<Integer, Integer>) null);
      assertEquals(1, mapMap0.size());
  }
}
