/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 06:26:51 GMT 2022
 */

package net.segoia.util.data.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.data.type.ListType;
import net.segoia.util.data.type.ParameterType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ListType_ESTest extends ListType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListType.fromString("]=Bi:[n<#-{7Ve");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParameterType parameterType0 = ListType.fromString("[");
      assertEquals("List", parameterType0.getParameterTypeType());
      assertEquals("List", parameterType0.getType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ListType listType0 = new ListType();
      assertEquals("List", listType0.getType());
      
      listType0.setType((String) null);
      listType0.getTypeForMatchingRule("null[null]");
      assertEquals("List", listType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParameterType parameterType0 = ParameterType.fromString("B(q");
      ListType listType0 = new ListType(parameterType0);
      assertEquals("List", listType0.getType());
      
      listType0.setType("");
      String string0 = listType0.getTypeForMatchingRule("B(q");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      ListType listType0 = new ListType(parameterType0);
      String string0 = listType0.fullGenericTypes();
      assertEquals("List", listType0.getParameterTypeType());
      assertEquals("List[]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      ListType listType0 = new ListType(parameterType0);
      // Undeclared exception!
      try { 
        listType0.matches(listType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType("List");
      ListType listType0 = new ListType(parameterType0);
      // Undeclared exception!
      try { 
        listType0.matches(parameterType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.segoia.util.data.type.ParameterType cannot be cast to class net.segoia.util.data.type.ListType (net.segoia.util.data.type.ParameterType and net.segoia.util.data.type.ListType are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @c8de863)
         //
         verifyException("net.segoia.util.data.type.ListType", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListType.fromString("'GZ<a_&2][RZs");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListType.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.type.ListType", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ListType listType0 = new ListType();
      boolean boolean0 = listType0.equals(listType0);
      assertEquals("List", listType0.getType());
      assertEquals("List", listType0.getParameterTypeType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListType listType0 = new ListType();
      listType0.setNestedType(listType0);
      ParameterType parameterType0 = listType0.getNestedType();
      assertEquals("List", parameterType0.getType());
      assertEquals("List", parameterType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListType listType0 = new ListType();
      listType0.setNestedType((ParameterType) null);
      assertEquals("List", listType0.getType());
      assertEquals("List", listType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListType listType0 = new ListType();
      listType0.getNestedType();
      assertEquals("List", listType0.getParameterTypeType());
      assertEquals("List", listType0.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ListType listType0 = new ListType();
      ListType listType1 = new ListType(listType0);
      boolean boolean0 = listType1.equals(listType0);
      assertEquals("List", listType1.getParameterTypeType());
      assertEquals("List", listType1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ListType listType0 = new ListType();
      ListType listType1 = new ListType(listType0);
      boolean boolean0 = listType0.equals(listType1);
      assertEquals("List", listType1.getParameterTypeType());
      assertEquals("List", listType1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ListType listType0 = new ListType();
      boolean boolean0 = listType0.equals("SIMPLE");
      assertEquals("List", listType0.getType());
      assertEquals("List", listType0.getParameterTypeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ListType listType0 = new ListType();
      ListType listType1 = new ListType(listType0);
      ListType listType2 = new ListType(listType0);
      boolean boolean0 = listType1.equals(listType2);
      assertEquals("List", listType2.getType());
      assertFalse(listType2.equals((Object)listType0));
      assertTrue(boolean0);
      assertEquals("List", listType2.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListType listType0 = new ListType();
      ParameterType parameterType0 = ListType.fromString(".*");
      boolean boolean0 = listType0.equals(parameterType0);
      assertEquals("List", parameterType0.getType());
      assertEquals("List", parameterType0.getParameterTypeType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ListType listType0 = new ListType();
      listType0.hashCode();
      assertEquals("List", listType0.getType());
      assertEquals("List", listType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParameterType parameterType0 = new ParameterType();
      ListType listType0 = new ListType(parameterType0);
      listType0.hashCode();
      assertEquals("List", listType0.getParameterTypeType());
      assertEquals("List", listType0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ListType listType0 = new ListType((ParameterType) null);
      boolean boolean0 = listType0.matches((ParameterType) null);
      assertEquals("List", listType0.getType());
      assertFalse(boolean0);
      assertEquals("List", listType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ListType listType0 = new ListType();
      // Undeclared exception!
      try { 
        listType0.getTypeForMatchingRule("nestedType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.type.ListType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParameterType parameterType0 = ParameterType.fromString("B(q");
      ListType listType0 = new ListType(parameterType0);
      String string0 = listType0.getTypeForMatchingRule("B(q");
      assertEquals("List", string0);
      assertEquals("List", listType0.getParameterTypeType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ListType listType0 = new ListType();
      assertEquals("List", listType0.getType());
      
      listType0.setType("");
      ListType listType1 = new ListType(listType0);
      boolean boolean0 = listType1.matches(listType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ListType listType0 = new ListType();
      boolean boolean0 = listType0.matches(listType0);
      assertEquals("List", listType0.getParameterTypeType());
      assertTrue(boolean0);
      assertEquals("List", listType0.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ListType listType0 = new ListType();
      ParameterType parameterType0 = new ParameterType();
      boolean boolean0 = listType0.matches(parameterType0);
      assertEquals("List", listType0.getType());
      assertEquals("List", listType0.getParameterTypeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ListType listType0 = new ListType();
      // Undeclared exception!
      try { 
        listType0.fullGenericTypes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.data.type.ListType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ListType listType0 = new ListType();
      String string0 = listType0.toString();
      assertEquals("List", listType0.getParameterTypeType());
      assertEquals("List[null]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ListType listType0 = new ListType();
      ListType listType1 = new ListType(listType0);
      boolean boolean0 = listType1.matches(listType0);
      assertEquals("List", listType1.getParameterTypeType());
      assertFalse(boolean0);
  }
}
