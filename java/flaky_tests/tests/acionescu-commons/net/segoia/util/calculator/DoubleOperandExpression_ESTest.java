/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:29:52 GMT 2022
 */

package net.segoia.util.calculator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import net.segoia.util.calculator.ConstantExpression;
import net.segoia.util.calculator.DoubleOperandExpression;
import net.segoia.util.calculator.Expression;
import net.segoia.util.calculator.SingleOperandExpression;
import net.segoia.util.calculator.operators.AddOperator;
import net.segoia.util.calculator.operators.ConstantOperator;
import net.segoia.util.calculator.operators.DecimalLogarithmOperator;
import net.segoia.util.calculator.operators.DivideOperator;
import net.segoia.util.calculator.operators.MultiplyOperator;
import net.segoia.util.calculator.operators.Operator;
import net.segoia.util.calculator.operators.PowerOperator;
import net.segoia.util.calculator.operators.SqrtOperator;
import net.segoia.util.calculator.operators.SubtractOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleOperandExpression_ESTest extends DoubleOperandExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("");
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression(constantExpression0, constantExpression0, "");
      String string0 = doubleOperandExpression0.asString();
      String string1 = doubleOperandExpression0.asString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("net.segoia.util.calculator.operators.ConstantOperator");
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression(constantExpression0, constantExpression0, "net.segoia.util.calculator.operators.ConstantOperator");
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      Byte byte0 = Byte.valueOf((byte)114);
      hashMap1.put("net.segoia.util.calculator.operators.ConstantOperator", byte0);
      HashMap<String, Operator> hashMap2 = new HashMap<String, Operator>();
      DecimalLogarithmOperator decimalLogarithmOperator0 = new DecimalLogarithmOperator();
      hashMap2.put("net.segoia.util.calculator.operators.ConstantOperator", decimalLogarithmOperator0);
      hashMap2.put("iwC2:Yp", (Operator) null);
      doubleOperandExpression0.calculate(hashMap2, hashMap1);
      HashMap<String, Number> hashMap3 = new HashMap<String, Number>(hashMap1);
      DoubleOperandExpression doubleOperandExpression1 = new DoubleOperandExpression();
      assertFalse(doubleOperandExpression1.equals((Object)doubleOperandExpression0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      assertNull(doubleOperandExpression0.getOperator());
      
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      AddOperator addOperator0 = new AddOperator();
      hashMap0.put("", addOperator0);
      addOperator0.setArgumentsCount((-740));
      addOperator0.setArgumentsCount((-740));
      addOperator0.setArgumentsCount(550);
      hashMap0.put("", addOperator0);
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      Byte byte0 = Byte.valueOf((byte)1);
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression("", doubleOperandExpression0);
      doubleOperandExpression0.setFirstOperand(singleOperandExpression0);
      hashMap1.putIfAbsent("", byte0);
      // Undeclared exception!
      try { 
        doubleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("");
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression(constantExpression0, constantExpression0, "");
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        doubleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("~!p(ZM(Wxo+F}/;>5Hq");
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression(constantExpression0, constantExpression0, "~!p(ZM(Wxo+F}/;>5Hq");
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      Byte byte0 = new Byte((byte)1);
      hashMap1.put("~!p(ZM(Wxo+F}/;>5Hq", byte0);
      // Undeclared exception!
      try { 
        doubleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      doubleOperandExpression0.setOperator("");
      doubleOperandExpression0.getSecondOperand();
      doubleOperandExpression0.setSecondOperand((Expression) null);
      doubleOperandExpression0.getSecondOperand();
      HashMap<String, PowerOperator> hashMap0 = new HashMap<String, PowerOperator>();
      HashMap<String, Operator> hashMap1 = new HashMap<String, Operator>(hashMap0);
      SubtractOperator subtractOperator0 = new SubtractOperator();
      hashMap1.put("", subtractOperator0);
      HashMap<String, Number> hashMap2 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        doubleOperandExpression0.calculate(hashMap1, hashMap2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("-5i-2r{k%yNwQ");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-5i-2r{k%yNwQ";
      stringArray0[1] = "-5i-2r{k%yNwQ";
      stringArray0[2] = "-5i-2r{k%yNwQ";
      stringArray0[3] = "-5i-2r{k%yNwQ";
      stringArray0[4] = "-5i-2r{k%yNwQ";
      stringArray0[5] = "-5i-2r{k%yNwQ";
      stringArray0[6] = "-5i-2r{k%yNwQ";
      stringArray0[7] = "";
      ConstantExpression.main(stringArray0);
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      hashMap1.putAll(hashMap2);
      Integer integer0 = Integer.valueOf((-344));
      hashMap1.put("fXM!cT6GW,<Qb;", integer0);
      hashMap0.keySet();
      constantExpression0.calculate(hashMap0, hashMap1);
      constantExpression0.calculate(hashMap0, hashMap1);
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression(constantExpression0, constantExpression0, "net.segoia.util.calculator.DoubleOperandExpression");
      doubleOperandExpression0.getFirstOperand();
      doubleOperandExpression0.asString();
      doubleOperandExpression0.asString();
      Expression expression0 = doubleOperandExpression0.getSecondOperand();
      doubleOperandExpression0.setSecondOperand(expression0);
      doubleOperandExpression0.asString();
      doubleOperandExpression0.getSecondOperand();
      Expression expression1 = doubleOperandExpression0.getSecondOperand();
      assertSame(constantExpression0, expression1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("~!p(ZM(Wxo+F}/;>5Hq");
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression(constantExpression0, constantExpression0, "~!p(ZM(Wxo+F}/;>5Hq");
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      Byte byte0 = Byte.valueOf((byte) (-120));
      DivideOperator divideOperator0 = new DivideOperator();
      hashMap0.getOrDefault(hashMap1, divideOperator0);
      hashMap1.put("~!p(ZM(Wxo+F}/;>5Hq", byte0);
      // Undeclared exception!
      try { 
        doubleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression(";ML4");
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression(constantExpression0, constantExpression0, ";ML4");
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        doubleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("net.segoia.util.calculator.ExpressionResult");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "net.segoia.util.calculator.ExpressionResult";
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      constantExpression0.calculate(hashMap0, (Map<String, Number>) null);
      stringArray0[1] = "net.segoia.util.calculator.ExpressionResult";
      stringArray0[2] = "net.segoia.util.calculator.ExpressionResult";
      ConstantExpression.main(stringArray0);
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression(constantExpression0, constantExpression0, (String) null);
      HashMap<String, Operator> hashMap1 = new HashMap<String, Operator>();
      // Undeclared exception!
      try { 
        doubleOperandExpression0.calculate(hashMap1, (Map<String, Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      doubleOperandExpression0.getFirstOperand();
      // Undeclared exception!
      try { 
        doubleOperandExpression0.asString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression();
      singleOperandExpression0.setOperator("");
      singleOperandExpression0.asString();
      doubleOperandExpression0.setSecondOperand(singleOperandExpression0);
      doubleOperandExpression0.getSecondOperand();
      doubleOperandExpression0.getFirstOperand();
      doubleOperandExpression0.getFirstOperand();
      doubleOperandExpression0.getSecondOperand();
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      ConstantOperator constantOperator0 = new ConstantOperator();
      constantOperator0.setArgumentsCount(0);
      constantOperator0.setArgumentsCount(1);
      hashMap0.put("(null)", constantOperator0);
      hashMap1.clear();
      DecimalLogarithmOperator decimalLogarithmOperator0 = new DecimalLogarithmOperator();
      decimalLogarithmOperator0.setArgumentsCount((-1671));
      hashMap0.put("(null)", decimalLogarithmOperator0);
      // Undeclared exception!
      try { 
        doubleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      Expression expression0 = doubleOperandExpression0.getSecondOperand();
      assertNull(expression0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression((Expression) null, (Expression) null, "");
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      String string1 = "eI&gA8.M\\]rN";
      SqrtOperator sqrtOperator0 = new SqrtOperator();
      hashMap0.put("qr\"%ZoA&:%bb\">gmL", sqrtOperator0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      hashMap0.put("eI&gA8.M]rN", sqrtOperator0);
      doubleOperandExpression0.setFirstOperand((Expression) null);
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      Byte byte0 = Byte.valueOf((byte) (-38));
      hashMap1.put("", byte0);
      hashMap0.replace("u/2", (Operator) null);
      try { 
        Double.valueOf("qr\"%ZoA&:%bb\">gmL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression();
      doubleOperandExpression0.setFirstOperand(singleOperandExpression0);
      // Undeclared exception!
      try { 
        doubleOperandExpression0.asString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression();
      doubleOperandExpression0.setSecondOperand(singleOperandExpression0);
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      hashMap0.keySet();
      doubleOperandExpression0.setOperator("");
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      Integer integer0 = Integer.getInteger("net.segoia.util.calculator.operators.NaturalLogarithmOperator", (-3453));
      hashMap1.put("", integer0);
      Long long0 = Long.valueOf((-1919L));
      Long long1 = Long.getLong("qE0kX;(ny(\"'sIiy-O5", long0);
      hashMap1.put("30<$`>J4zn=", long1);
      // Undeclared exception!
      try { 
        doubleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      doubleOperandExpression0.setSecondOperand((Expression) null);
      Expression expression0 = doubleOperandExpression0.getSecondOperand();
      assertNull(expression0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        doubleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>(0);
      Object object0 = new Object();
      Integer.getInteger("2ptxHnFZ.fB+sF");
      Integer integer0 = new Integer((-1720));
      hashMap2.replace("2ptxHnFZ.fB+sF", (Integer) null, integer0);
      hashMap2.remove(object0);
      hashMap1.putAll(hashMap2);
      // Undeclared exception!
      try { 
        doubleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      String string0 = "";
      doubleOperandExpression0.setOperator("");
      doubleOperandExpression0.setOperator("hg,.Nu)Ii H?9");
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        doubleOperandExpression0.asString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      // Undeclared exception!
      try { 
        doubleOperandExpression0.asString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "net.segoia.util.calculator.operators.NaturalLogarithmOperator";
      ConstantExpression constantExpression0 = new ConstantExpression();
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression("net.segoia.util.calculator.operators.NaturalLogarithmOperator", constantExpression0);
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression(singleOperandExpression0, constantExpression0, "net.segoia.util.calculator.operators.NaturalLogarithmOperator");
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        singleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression(";ML!");
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression(constantExpression0, constantExpression0, ";ML!");
      assertEquals(";ML!", doubleOperandExpression0.getOperator());
  }
}
