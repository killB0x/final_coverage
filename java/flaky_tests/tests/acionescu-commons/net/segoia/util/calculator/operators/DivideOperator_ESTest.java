/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:13:16 GMT 2022
 */

package net.segoia.util.calculator.operators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.calculator.operators.DivideOperator;
import net.segoia.util.calculator.operators.OperatorInput;
import net.segoia.util.calculator.operators.OperatorOutput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DivideOperator_ESTest extends DivideOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DivideOperator divideOperator0 = new DivideOperator();
      Number[] numberArray0 = new Number[4];
      Double double0 = Double.valueOf((-1455.36132));
      numberArray0[0] = (Number) double0;
      numberArray0[1] = (Number) 2;
      OperatorInput operatorInput0 = new OperatorInput(numberArray0);
      OperatorOutput operatorOutput0 = divideOperator0.doOperation(operatorInput0);
      assertNotNull(operatorOutput0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DivideOperator divideOperator0 = new DivideOperator();
      Number[] numberArray0 = new Number[0];
      OperatorInput operatorInput0 = new OperatorInput(numberArray0);
      // Undeclared exception!
      try { 
        divideOperator0.doOperation(operatorInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.segoia.util.calculator.operators.OperatorInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DivideOperator divideOperator0 = new DivideOperator();
      // Undeclared exception!
      try { 
        divideOperator0.doOperation((OperatorInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.operators.DivideOperator", e);
      }
  }
}
