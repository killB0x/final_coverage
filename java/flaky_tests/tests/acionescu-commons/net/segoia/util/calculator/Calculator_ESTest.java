/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:34:34 GMT 2022
 */

package net.segoia.util.calculator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.NoSuchElementException;
import net.segoia.util.calculator.Calculator;
import net.segoia.util.calculator.ConstantExpression;
import net.segoia.util.calculator.DoubleOperandExpression;
import net.segoia.util.calculator.Expression;
import net.segoia.util.calculator.SingleOperandExpression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Calculator_ESTest extends Calculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      DoubleOperandExpression doubleOperandExpression1 = new DoubleOperandExpression(doubleOperandExpression0, doubleOperandExpression0, "sqrt");
      SingleOperandExpression singleOperandExpression0 = (SingleOperandExpression)Calculator.buildExpression("sqrt", doubleOperandExpression1, doubleOperandExpression0);
      assertEquals("sqrt", singleOperandExpression0.getOperator());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      ConstantExpression constantExpression0 = new ConstantExpression("^");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>(hashMap0);
      Number number0 = calculator0.calculate(constantExpression0, hashMap1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Calculator.parseExpression("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      HashMap<String, Number> hashMap0 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        calculator0.evaluate("", hashMap0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      Expression expression0 = Calculator.buildExpression("ln", doubleOperandExpression0, doubleOperandExpression0);
      doubleOperandExpression0.setFirstOperand(expression0);
      Calculator calculator0 = new Calculator();
      HashMap<String, Number> hashMap0 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        calculator0.calculate(doubleOperandExpression0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      ConstantExpression constantExpression0 = new ConstantExpression("");
      HashMap<String, Number> hashMap0 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        calculator0.calculate(constantExpression0, hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("net.segoia.util.parser.utils.MultivaluedTypeDefinition");
      // Undeclared exception!
      try { 
        Calculator.buildExpression("net.segoia.util.parser.utils.MultivaluedTypeDefinition", constantExpression0, constantExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("^");
      DoubleOperandExpression doubleOperandExpression0 = (DoubleOperandExpression)Calculator.buildExpression("^", constantExpression0, constantExpression0);
      assertEquals("^", doubleOperandExpression0.getOperator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        Calculator.parseExpression("+y^qi-");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse '+y^qi-'
         //
         verifyException("net.segoia.util.parser.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      HashMap<String, Number> hashMap0 = new HashMap<String, Number>();
      try { 
        calculator0.evaluate("^_ZO,:1&BL:-j", hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse '^_ZO,:1&BL:-j'
         //
         verifyException("net.segoia.util.parser.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      try { 
        Calculator.main(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse 'const(e)+e'
         //
         verifyException("net.segoia.util.parser.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      Calculator calculator0 = new Calculator();
      HashMap<String, Number> hashMap0 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        calculator0.calculate(doubleOperandExpression0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.DoubleOperandExpression", e);
      }
  }
}
