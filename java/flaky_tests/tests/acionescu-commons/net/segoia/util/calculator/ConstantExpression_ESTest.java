/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:11:52 GMT 2022
 */

package net.segoia.util.calculator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import net.segoia.util.calculator.ConstantExpression;
import net.segoia.util.calculator.ExpressionResult;
import net.segoia.util.calculator.operators.Operator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConstantExpression_ESTest extends ConstantExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression();
      String string0 = constantExpression0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("");
      String string0 = constantExpression0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("");
      String string0 = constantExpression0.asString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("");
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        constantExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      ConstantExpression constantExpression0 = new ConstantExpression();
      // Undeclared exception!
      try { 
        constantExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("e");
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      Integer integer0 = Integer.valueOf((-1416));
      hashMap1.put("e", integer0);
      ExpressionResult expressionResult0 = constantExpression0.calculate(hashMap0, hashMap1);
      assertNotNull(expressionResult0);
      assertTrue(expressionResult0.isNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("net.segoia.util.calculator.operators.SqrtOperator");
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      ExpressionResult expressionResult0 = constantExpression0.calculate(hashMap0, (Map<String, Number>) null);
      assertFalse(expressionResult0.isNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      ConstantExpression constantExpression0 = new ConstantExpression(".34");
      constantExpression0.calculate(hashMap0, hashMap1);
      ExpressionResult expressionResult0 = constantExpression0.calculate(hashMap0, hashMap1);
      assertTrue(expressionResult0.isNumber());
      assertNotNull(expressionResult0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression();
      String string0 = constantExpression0.asString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ConstantExpression.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("hv+{eR");
      String string0 = constantExpression0.asString();
      assertEquals("hv+{eR", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("hv+{eR");
      String string0 = constantExpression0.getValue();
      assertEquals("hv+{eR", string0);
  }
}
