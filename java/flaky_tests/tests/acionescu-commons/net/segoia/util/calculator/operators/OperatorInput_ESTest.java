/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:26:44 GMT 2022
 */

package net.segoia.util.calculator.operators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.calculator.operators.OperatorInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OperatorInput_ESTest extends OperatorInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      OperatorInput operatorInput0 = new OperatorInput(numberArray0);
      String[] stringArray0 = operatorInput0.getStringArguments();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Long long0 = Long.getLong("", 0L);
      OperatorInput operatorInput0 = new OperatorInput(long0, (String) null);
      String[] stringArray0 = operatorInput0.getStringArguments();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Long long0 = Long.getLong("", 0L);
      OperatorInput operatorInput0 = new OperatorInput(long0, (String) null);
      String string0 = operatorInput0.getStringArgument(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Gt9>tmAQkR OxC{|";
      OperatorInput operatorInput0 = new OperatorInput(stringArray0);
      String string0 = operatorInput0.getStringArgument(0);
      assertEquals("Gt9>tmAQkR OxC{|", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      OperatorInput operatorInput0 = new OperatorInput(stringArray0);
      String string0 = operatorInput0.getStringArgument(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      OperatorInput operatorInput0 = new OperatorInput(stringArray0);
      Number[] numberArray0 = operatorInput0.getArguments();
      assertNull(numberArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      String[] stringArray0 = new String[0];
      OperatorInput operatorInput0 = new OperatorInput(numberArray0, stringArray0);
      Number[] numberArray1 = operatorInput0.getArguments();
      assertSame(numberArray1, numberArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      OperatorInput operatorInput0 = new OperatorInput(numberArray0);
      // Undeclared exception!
      try { 
        operatorInput0.getStringArgument(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.operators.OperatorInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      OperatorInput operatorInput0 = new OperatorInput(stringArray0);
      // Undeclared exception!
      try { 
        operatorInput0.getArgument(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.operators.OperatorInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      OperatorInput operatorInput0 = new OperatorInput(numberArray0);
      // Undeclared exception!
      try { 
        operatorInput0.getArgument(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.segoia.util.calculator.operators.OperatorInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      String[] stringArray0 = new String[0];
      OperatorInput operatorInput0 = new OperatorInput(numberArray0, stringArray0);
      Number number0 = operatorInput0.getArgument(0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      String[] stringArray0 = new String[0];
      OperatorInput operatorInput0 = new OperatorInput(numberArray0, stringArray0);
      String[] stringArray1 = operatorInput0.getStringArguments();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      OperatorInput operatorInput0 = new OperatorInput(stringArray0);
      // Undeclared exception!
      try { 
        operatorInput0.getStringArgument(3632);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3632 out of bounds for length 0
         //
         verifyException("net.segoia.util.calculator.operators.OperatorInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      String[] stringArray0 = new String[0];
      OperatorInput operatorInput0 = new OperatorInput(numberArray0, stringArray0);
      Number[] numberArray1 = operatorInput0.getArguments();
      OperatorInput operatorInput1 = new OperatorInput(numberArray1);
      assertFalse(operatorInput1.equals((Object)operatorInput0));
  }
}
