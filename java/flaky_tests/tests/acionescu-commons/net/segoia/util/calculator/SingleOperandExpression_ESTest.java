/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:35:45 GMT 2022
 */

package net.segoia.util.calculator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import net.segoia.util.calculator.ConstantExpression;
import net.segoia.util.calculator.DoubleOperandExpression;
import net.segoia.util.calculator.Expression;
import net.segoia.util.calculator.SingleOperandExpression;
import net.segoia.util.calculator.operators.Operator;
import net.segoia.util.calculator.operators.SqrtOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SingleOperandExpression_ESTest extends SingleOperandExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      ConstantExpression constantExpression0 = new ConstantExpression("");
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression("", constantExpression0);
      HashMap<String, Number> hashMap0 = new HashMap<String, Number>();
      String string1 = "L!yi\"R\\dCm-}7";
      Short short0 = Short.valueOf((short) (-1593));
      hashMap0.put("L!yi\"RdCm-}7", short0);
      SqrtOperator sqrtOperator0 = new SqrtOperator();
      sqrtOperator0.setArgumentsCount((short) (-1593));
      singleOperandExpression0.asString();
      HashMap<String, Operator> hashMap1 = new HashMap<String, Operator>();
      // Undeclared exception!
      try { 
        singleOperandExpression0.calculate(hashMap1, hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression();
      assertNull(singleOperandExpression0.getOperator());
      
      singleOperandExpression0.setOperator("net.segoia.util.calculator.operators.DivideOperator");
      singleOperandExpression0.asString();
      SingleOperandExpression singleOperandExpression1 = new SingleOperandExpression("net.segoia.util.calculator.operators.DivideOperator(null)", singleOperandExpression0);
      singleOperandExpression0.setOperand(singleOperandExpression1);
      singleOperandExpression0.asString();
      singleOperandExpression0.asString();
      HashMap<String, Number> hashMap0 = new HashMap<String, Number>();
      HashMap<String, Operator> hashMap1 = new HashMap<String, Operator>();
      singleOperandExpression1.calculate(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("e");
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression("e", constantExpression0);
      Expression expression0 = singleOperandExpression0.getOperand();
      singleOperandExpression0.setOperand(expression0);
      HashMap<String, Number> hashMap0 = new HashMap<String, Number>();
      Integer integer0 = new Integer(0);
      Integer.getInteger("r`+zUoE#q<['M", integer0);
      hashMap0.put("e", integer0);
      constantExpression0.calculate((Map<String, Operator>) null, hashMap0);
      singleOperandExpression0.asString();
      HashMap<String, Operator> hashMap1 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap2 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        singleOperandExpression0.calculate(hashMap1, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "\\?h0/-ILh?7f]v^6S(";
      ConstantExpression constantExpression0 = new ConstantExpression("?h0/-ILh?7f]v^6S(");
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression("", constantExpression0);
      SingleOperandExpression singleOperandExpression1 = new SingleOperandExpression("", singleOperandExpression0);
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      String string1 = "L!yi\"R\\dCm-}7";
      Short short0 = Short.valueOf((short) (-1593));
      hashMap1.put("L!yi\"RdCm-}7", short0);
      SqrtOperator sqrtOperator0 = new SqrtOperator();
      singleOperandExpression1.asString();
      hashMap0.put("", sqrtOperator0);
      // Undeclared exception!
      try { 
        singleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.calculator.operators.OperatorInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("l");
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression("l", constantExpression0);
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        singleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression();
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression((String) null, constantExpression0);
      singleOperandExpression0.getOperand();
      DoubleOperandExpression doubleOperandExpression0 = new DoubleOperandExpression();
      singleOperandExpression0.setOperand(doubleOperandExpression0);
      assertNull(doubleOperandExpression0.getOperator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression();
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      // Undeclared exception!
      try { 
        singleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "A]X}GbYnog50jz:.w";
      stringArray0[1] = "A]X}GbYnog50jz:.w";
      stringArray0[2] = "A]X}GbYnog50jz:.w";
      stringArray0[3] = "r-~eY34u.5h'";
      stringArray0[4] = "A]X}GbYnog50jz:.w";
      ConstantExpression.main(stringArray0);
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression("A]X}GbYnog50jz:.w", constantExpression0);
      HashMap<String, Operator> hashMap0 = new HashMap<String, Operator>();
      HashMap<String, Number> hashMap1 = new HashMap<String, Number>();
      hashMap1.put("fVwA'`;]s3", (Number) null);
      // Undeclared exception!
      try { 
        singleOperandExpression0.calculate(hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression();
      Expression expression0 = singleOperandExpression0.getOperand();
      assertNull(expression0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression();
      String string0 = singleOperandExpression0.asString();
      assertEquals("null(null)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression();
      singleOperandExpression0.setOperator("'k?(Q4!:B4iFo@NJ");
      singleOperandExpression0.setOperator("");
      singleOperandExpression0.asString();
      Expression expression0 = singleOperandExpression0.getOperand();
      assertNull(expression0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantExpression constantExpression0 = new ConstantExpression("h8Kg%XS M");
      SingleOperandExpression singleOperandExpression0 = new SingleOperandExpression("h8Kg%XS M", constantExpression0);
      singleOperandExpression0.setOperand(constantExpression0);
      assertEquals("h8Kg%XS M", constantExpression0.getValue());
  }
}
