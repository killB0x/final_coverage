/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:52:06 GMT 2022
 */

package net.segoia.util.persistence;

import org.junit.Test;
import static org.junit.Assert.*;
import net.segoia.util.persistence.KeyNameType;
import net.segoia.util.persistence.PersistentValueType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KeyNameType_ESTest extends KeyNameType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KeyNameType keyNameType0 = new KeyNameType();
      PersistentValueType persistentValueType0 = PersistentValueType.LONG;
      keyNameType0.setType(persistentValueType0);
      PersistentValueType persistentValueType1 = keyNameType0.getType();
      assertSame(persistentValueType1, persistentValueType0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KeyNameType keyNameType0 = new KeyNameType();
      keyNameType0.setName(";.i>^=S{r-M%G95~h)");
      String string0 = keyNameType0.getName();
      assertEquals(";.i>^=S{r-M%G95~h)", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KeyNameType keyNameType0 = new KeyNameType();
      keyNameType0.setName("");
      String string0 = keyNameType0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KeyNameType keyNameType0 = new KeyNameType();
      keyNameType0.setKey("net.segoia.util.persistence.KeyNameType");
      String string0 = keyNameType0.getKey();
      assertEquals("net.segoia.util.persistence.KeyNameType", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      KeyNameType keyNameType0 = new KeyNameType();
      keyNameType0.setKey("");
      String string0 = keyNameType0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KeyNameType keyNameType0 = new KeyNameType();
      String string0 = keyNameType0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      KeyNameType keyNameType0 = new KeyNameType();
      PersistentValueType persistentValueType0 = PersistentValueType.STRING;
      keyNameType0.setType(persistentValueType0);
      PersistentValueType persistentValueType1 = keyNameType0.getType();
      assertEquals(PersistentValueType.STRING, persistentValueType1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      KeyNameType keyNameType0 = new KeyNameType();
      keyNameType0.getType();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      KeyNameType keyNameType0 = new KeyNameType();
      String string0 = keyNameType0.getName();
      assertNull(string0);
  }
}
