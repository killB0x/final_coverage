/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:19:56 GMT 2022
 */

package net.segoia.util.crypto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.NoSuchFileException;
import java.security.InvalidKeyException;
import java.security.InvalidParameterException;
import java.security.Key;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.SecretKey;
import net.segoia.util.crypto.CryptoUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CryptoUtil_ESTest extends CryptoUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      try { 
        CryptoUtil.getPublicKeyFromBase64EncodedString("", "Hello crypto!");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
         //
         // Hello crypto! KeyFactory not available
         //
         verifyException("java.security.KeyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        CryptoUtil.getPrivateKeyFromBase64EncodedString("+gOX4e86eadjQj+S5VcJKEjbwbu8Vur+XLdctnVuEvs=", "uX,m_1tsm$e<P;:B2I");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
         //
         // uX,m_1tsm$e<P;:B2I KeyFactory not available
         //
         verifyException("java.security.KeyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = CryptoUtil.saveKey(byteArray0, "PBKDF2WithHmacSHA256");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      SecretKey secretKey0 = CryptoUtil.pbkdf2ToKey("@\"uE5(v", byteArray0, (byte)86);
      assertNotNull(secretKey0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeyPair keyPair0 = CryptoUtil.generateKeyPair("RSA", 613);
      assertNotNull(keyPair0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = CryptoUtil.base64EncodeToBytes(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = CryptoUtil.base64Encode(byteArray0);
      assertEquals("AAAA", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = CryptoUtil.base64Encode(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = CryptoUtil.base64EncodeToBytes(byteArray0);
      byte[] byteArray2 = CryptoUtil.base64DecodeToBytes(byteArray1);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)103;
      String string0 = CryptoUtil.base64Decode(byteArray0);
      assertEquals("\uFFFD\u000F\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = CryptoUtil.base64Decode(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.base64Decode("+gOX4e86eadjQj+S5VcJKEjbwbu8Vur+XLdctnVuEvs=");
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.base64Decode("");
      byte[] byteArray1 = CryptoUtil.base64DecodeToBytes(byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        CryptoUtil.verifySignature((PublicKey) null, byteArray0, byteArray0, "SHA256WithRSA");
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        CryptoUtil.verifySignature((PublicKey) null, (byte[]) null, (byte[]) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null algorithm name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      try { 
        CryptoUtil.sign((PrivateKey) null, byteArray0, "");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
         //
         //  Signature not available
         //
         verifyException("java.security.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      try { 
        CryptoUtil.sign((PrivateKey) null, byteArray0, "SHA256WithRSA");
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.sha256((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.crypto.CryptoUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.saveKey((byte[]) null, "$", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      try { 
        CryptoUtil.saveKey(byteArray0, "", true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.saveKey((byte[]) null, "yIW2\";)Rk:v)Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        CryptoUtil.saveKey(byteArray0, "100000");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      try { 
        CryptoUtil.pbkdf2ToKey("hywt $P(%u5T*", (byte[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // the salt parameter must be non-null
         //
         verifyException("javax.crypto.spec.PBEKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        CryptoUtil.main((String[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.loadKeys((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        CryptoUtil.loadKeys("", "", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      try { 
        CryptoUtil.loadKeyFromFile("toS@<D>BHX.G9[')NrH");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.loadKeyFromFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      try { 
        CryptoUtil.getPublicKeyFromBase64EncodedString((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.crypto.CryptoUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      try { 
        CryptoUtil.getPublicKeyFromBase64EncodedString("\"$uc6.DS{fW}Hl|{~4o", "\"$uc6.DS{fW}Hl|{~4o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 22
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      try { 
        CryptoUtil.getPrivateKeyFromBase64EncodedString((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.crypto.CryptoUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      try { 
        CryptoUtil.getPrivateKeyFromBase64EncodedString("a,jXE4kRsav0L?_7]/[", "a,jXE4kRsav0L?_7]/[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 2c
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      try { 
        CryptoUtil.generateSecretkey("}O9oAc~vX", (-3080));
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
         //
         // }O9oAc~vX KeyGenerator not available
         //
         verifyException("javax.crypto.KeyGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.generateSecretkey((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null algorithm name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.generateKeyPair((String) null, 591);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null algorithm name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.generateAndSaveKeyPair((String) null, (-1242), (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null algorithm name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      try { 
        CryptoUtil.encrypt((Key) null, byteArray0, "r?,vFO:fof#\"<+{zs!");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
         //
         // Cannot find any provider supporting r?,vFO:fof#\"<+{zs!
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      try { 
        CryptoUtil.decrypt((Key) null, byteArray0, "De\"1 :j!qP^VX:>M");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
         //
         // Cannot find any provider supporting De\"1 :j!qP^VX:>M
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      try { 
        CryptoUtil.computeHash("}6RszN%>K,Q;?", "}6RszN%>K,Q;?");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.computeHash((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null algorithm name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.base64EncodeToBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        CryptoUtil.base64DecodeToBytes(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 0
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.base64Decode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.base64Decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.crypto.CryptoUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      try { 
        CryptoUtil.saveKey((byte[]) null, "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.saveKeyPair((KeyPair) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.crypto.CryptoUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      try { 
        CryptoUtil.decrypt((Key) null, byteArray0);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      try { 
        CryptoUtil.loadKeyFromFile("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      try { 
        CryptoUtil.generateAndSaveKeyPair("", 1018, "", "");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
         //
         //  KeyPairGenerator not available
         //
         verifyException("java.security.KeyPairGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.base64Encode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.base64Decode("Singature:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 3a
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      try { 
        CryptoUtil.encrypt((Key) null, "");
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      try { 
        CryptoUtil.generateKeyPair("", (-706));
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
         //
         //  KeyPairGenerator not available
         //
         verifyException("java.security.KeyPairGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = CryptoUtil.computeHash("SHA-256", "SHA-256");
      assertEquals("u9B8T8AsmblxJP6/Qse2O1ARwN8o1An7tIa1qdLmFeo=", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = CryptoUtil.saveKey(byteArray0, "net.segia.uil.crypt.CryptoUtil", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        CryptoUtil.saveKey(byteArray0, "100000", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      try { 
        CryptoUtil.verifySignature((PublicKey) null, byteArray0, byteArray0, "net.segia.uil.crypt.CryptoUtil");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
         //
         // net.segia.uil.crypt.CryptoUtil Signature not available
         //
         verifyException("java.security.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.encodePublicKeyToBase64String((PublicKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.crypto.CryptoUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CryptoUtil.base64Decode(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input byte[] should at least have 2 bytes for base64 bytes
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      try { 
        CryptoUtil.decrypt((Key) null, (byte[]) null, "AES");
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      try { 
        CryptoUtil.sign((PrivateKey) null, (byte[]) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null algorithm name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      try { 
        CryptoUtil.getPublicKeyFromBase64EncodedString("RSA", "RSA");
        fail("Expecting exception: InvalidKeySpecException");
      
      } catch(InvalidKeySpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.base64DecodeToBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.generateSecretkey("AES", 0);
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CryptoUtil cryptoUtil0 = new CryptoUtil();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CryptoUtil.generate6DigitsPasscode();
      String string0 = CryptoUtil.generate6DigitsPasscode();
      assertEquals("190000", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        CryptoUtil.pbkdf2ToKey("4Y0)Pq39/d;%r#z&xW", byteArray0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the salt parameter must not be empty
         //
         verifyException("javax.crypto.spec.PBEKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      try { 
        CryptoUtil.main((String[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.encodePrivateKeyToBase64String((PrivateKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.crypto.CryptoUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      try { 
        CryptoUtil.loadKeys("sI", "sI", "sI");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      try { 
        CryptoUtil.getPrivateKeyFromBase64EncodedString("RSA", "RSA");
        fail("Expecting exception: InvalidKeySpecException");
      
      } catch(InvalidKeySpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = CryptoUtil.sha256("sPuX");
      assertEquals("sjMjEwg/9HB7/ulUqwfPHa3RnSvleSFgxMeCjkr5D0g=", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      try { 
        CryptoUtil.encrypt((Key) null, (byte[]) null, "AES");
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }
}
