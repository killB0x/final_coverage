/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:43:46 GMT 2022
 */

package net.segoia.util.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.logging.LoggingLevel;
import net.segoia.util.logging.SystemOutLogger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SystemOutLogger_ESTest extends SystemOutLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("");
      // Undeclared exception!
      try { 
        systemOutLogger0.append((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("pxcJj *U#R");
      MockThrowable mockThrowable0 = new MockThrowable();
      LoggingLevel loggingLevel0 = LoggingLevel.TRACE;
      systemOutLogger0.append(loggingLevel0, (Object) null, (Throwable) mockThrowable0);
      assertEquals(LoggingLevel.INFO, systemOutLogger0.getLogLevel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger((String) null);
      LoggingLevel loggingLevel0 = LoggingLevel.FATAL;
      Object object0 = new Object();
      systemOutLogger0.append(loggingLevel0, object0, (Throwable) null);
      assertTrue(systemOutLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("net.segoia.util.logging.LoggingLevel");
      Object object0 = new Object();
      systemOutLogger0.append(object0);
      assertTrue(systemOutLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger((String) null);
      systemOutLogger0.warn((Object) null, (Throwable) null);
      assertFalse(systemOutLogger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger(" - ");
      Object object0 = new Object();
      systemOutLogger0.info(object0);
      assertFalse(systemOutLogger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger((String) null);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      Object object0 = new Object();
      systemOutLogger0.error(object0, (Throwable) mockThrowable0);
      assertTrue(systemOutLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("OQN{UH$k_");
      systemOutLogger0.fatal((Object) "OQN{UH$k_");
      assertTrue(systemOutLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("net.segoia.util.logging.LoggingLevel");
      systemOutLogger0.debug((Object) "net.segoia.util.logging.LoggingLevel");
      assertEquals(LoggingLevel.INFO, systemOutLogger0.getLogLevel());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("ERROR");
      systemOutLogger0.info((Object) "ERROR", (Throwable) null);
      assertFalse(systemOutLogger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("sU:i,jl()");
      Object object0 = new Object();
      systemOutLogger0.warn(object0);
      assertEquals(LoggingLevel.INFO, systemOutLogger0.getLogLevel());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger((String) null);
      LoggingLevel loggingLevel0 = LoggingLevel.FATAL;
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      systemOutLogger0.debug((Object) loggingLevel0, (Throwable) mockThrowable0);
      assertTrue(systemOutLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger((String) null);
      systemOutLogger0.error((Object) null);
      assertFalse(systemOutLogger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("z8{1082m!l==*jHk5z");
      Object object0 = new Object();
      systemOutLogger0.fatal(object0, (Throwable) null);
      assertEquals(LoggingLevel.INFO, systemOutLogger0.getLogLevel());
  }
}
