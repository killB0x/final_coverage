/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:09:29 GMT 2022
 */

package net.segoia.util.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.logging.LoggingLevel;
import net.segoia.util.logging.SystemOutLogger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractLogger_ESTest extends AbstractLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("");
      LoggingLevel loggingLevel0 = LoggingLevel.TRACE;
      systemOutLogger0.setLogLevel(loggingLevel0);
      boolean boolean0 = systemOutLogger0.isInfoEnabled();
      assertTrue(systemOutLogger0.isEnabled());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("");
      LoggingLevel loggingLevel0 = LoggingLevel.DEBUG;
      systemOutLogger0.setLogLevel(loggingLevel0);
      boolean boolean0 = systemOutLogger0.isDebugEnabled();
      assertTrue(boolean0);
      assertTrue(systemOutLogger0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("");
      LoggingLevel loggingLevel0 = systemOutLogger0.getLogLevel();
      Object object0 = new Object();
      MockThrowable mockThrowable0 = new MockThrowable();
      boolean boolean0 = systemOutLogger0.trace(loggingLevel0, object0, mockThrowable0);
      assertTrue(boolean0);
      assertTrue(systemOutLogger0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("X>s|3zzY(*.x(\":}");
      LoggingLevel loggingLevel0 = LoggingLevel.TRACE;
      boolean boolean0 = systemOutLogger0.trace(loggingLevel0, loggingLevel0, (Throwable) null);
      assertTrue(systemOutLogger0.isEnabled());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("");
      LoggingLevel loggingLevel0 = LoggingLevel.TRACE;
      systemOutLogger0.setLogLevel(loggingLevel0);
      systemOutLogger0.getLogLevel();
      assertTrue(systemOutLogger0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("#sR>K");
      LoggingLevel loggingLevel0 = LoggingLevel.INFO;
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("#sR>K", mockThrowable0);
      mockThrowable0.initCause(mockThrowable1);
      // Undeclared exception!
      systemOutLogger0.trace(loggingLevel0, loggingLevel0, mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("dV#)K=S5x9.d");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("dV#)K=S5x9.d");
      Object object0 = new Object();
      LoggingLevel loggingLevel0 = LoggingLevel.FATAL;
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        systemOutLogger0.trace(loggingLevel0, object0, mockThrowable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("WARN");
      // Undeclared exception!
      try { 
        systemOutLogger0.isLogLevelAllowed((LoggingLevel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.logging.AbstractLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("XU:y|+0y5luv i");
      systemOutLogger0.setLogLevel((LoggingLevel) null);
      // Undeclared exception!
      try { 
        systemOutLogger0.isDebugEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.logging.AbstractLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("X>s|3zzY(*.x(\":}");
      LoggingLevel loggingLevel0 = LoggingLevel.TRACE;
      boolean boolean0 = systemOutLogger0.isLogLevelAllowed(loggingLevel0);
      assertFalse(boolean0);
      assertTrue(systemOutLogger0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("");
      boolean boolean0 = systemOutLogger0.isInfoEnabled();
      assertTrue(boolean0);
      assertTrue(systemOutLogger0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger((String) null);
      assertTrue(systemOutLogger0.isInfoEnabled());
      
      LoggingLevel loggingLevel0 = LoggingLevel.FATAL;
      systemOutLogger0.setLogLevel(loggingLevel0);
      boolean boolean0 = systemOutLogger0.isInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("Ew;`EJ[D>m");
      LoggingLevel loggingLevel0 = LoggingLevel.TRACE;
      systemOutLogger0.setLogLevel(loggingLevel0);
      boolean boolean0 = systemOutLogger0.isDebugEnabled();
      assertTrue(boolean0);
      assertTrue(systemOutLogger0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("Ew;`EJ[D>m");
      boolean boolean0 = systemOutLogger0.isDebugEnabled();
      assertFalse(boolean0);
      assertTrue(systemOutLogger0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("XU:y|+0y5luv i");
      boolean boolean0 = systemOutLogger0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("");
      LoggingLevel loggingLevel0 = systemOutLogger0.getLogLevel();
      boolean boolean0 = systemOutLogger0.isLogLevelAllowed(loggingLevel0);
      assertTrue(systemOutLogger0.isEnabled());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemOutLogger systemOutLogger0 = new SystemOutLogger("");
      assertTrue(systemOutLogger0.isEnabled());
      
      systemOutLogger0.setEnabled(false);
      boolean boolean0 = systemOutLogger0.isEnabled();
      assertFalse(boolean0);
  }
}
