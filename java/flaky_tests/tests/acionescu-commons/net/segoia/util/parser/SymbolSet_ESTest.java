/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:04:45 GMT 2022
 */

package net.segoia.util.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.parser.Symbol;
import net.segoia.util.parser.SymbolSet;
import net.segoia.util.parser.SymbolType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SymbolSet_ESTest extends SymbolSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Symbol symbol0 = new Symbol();
      SymbolSet symbolSet0 = new SymbolSet();
      symbol0.setSequence("!pgU#");
      symbolSet0.add(symbol0);
      SymbolType symbolType0 = SymbolType.GROUP_END;
      Symbol symbol1 = new Symbol("`w", symbolType0);
      symbolSet0.add(symbol1);
      assertEquals(5, symbolSet0.getMaxSequeceLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SymbolSet symbolSet0 = new SymbolSet();
      symbolSet0.setCaseInsensitive(true);
      boolean boolean0 = symbolSet0.isCaseInsensitive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SymbolSet symbolSet0 = new SymbolSet();
      SymbolType symbolType0 = SymbolType.WORKER;
      Symbol symbol0 = new Symbol("\navailableStack: ", symbolType0, 0);
      symbolSet0.add("u", symbol0);
      symbolSet0.removeValue(symbol0);
      symbolSet0.getSymbolsForSequence("u");
      assertEquals(1, symbolSet0.getMaxSequeceLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SymbolSet symbolSet0 = new SymbolSet();
      int int0 = symbolSet0.getMaxSequeceLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SymbolSet symbolSet0 = new SymbolSet();
      SymbolType symbolType0 = SymbolType.WORKER;
      Symbol symbol0 = new Symbol("s3B.Z\"pgL_goSTt1?U", symbolType0, 0);
      symbolSet0.add(symbol0);
      int int0 = symbolSet0.getMaxSequeceLength();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SymbolSet symbolSet0 = new SymbolSet();
      symbolSet0.setCaseInsensitive(true);
      // Undeclared exception!
      try { 
        symbolSet0.getSymbolsForSequence((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.parser.SymbolSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SymbolSet symbolSet0 = new SymbolSet();
      Symbol symbol0 = new Symbol();
      // Undeclared exception!
      try { 
        symbolSet0.add((String) null, symbol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.parser.SymbolSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SymbolSet symbolSet0 = new SymbolSet();
      boolean boolean0 = symbolSet0.isCaseInsensitive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SymbolSet symbolSet0 = new SymbolSet();
      SymbolType symbolType0 = SymbolType.WORKER;
      Symbol symbol0 = new Symbol("\navailableStack: ", symbolType0, 0);
      symbolSet0.add("u", symbol0);
      symbolSet0.getSymbolsForSequence("u");
      assertEquals(1, symbolSet0.getMaxSequeceLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SymbolSet symbolSet0 = new SymbolSet();
      symbolSet0.setCaseInsensitive(true);
      symbolSet0.getSymbolsForSequence("");
      assertTrue(symbolSet0.isCaseInsensitive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Symbol symbol0 = new Symbol();
      SymbolSet symbolSet0 = new SymbolSet();
      symbol0.setSequence("!pgU#");
      symbolSet0.add(symbol0);
      symbolSet0.add(symbol0);
      assertEquals(5, symbolSet0.getMaxSequeceLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Symbol symbol0 = new Symbol();
      SymbolSet symbolSet0 = new SymbolSet();
      // Undeclared exception!
      try { 
        symbolSet0.add(symbol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.parser.SymbolSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SymbolSet symbolSet0 = new SymbolSet();
      Symbol symbol0 = Symbol.fromString("f`14Q1<%Uz0+");
      symbolSet0.add("f`14Q1<%Uz0+", symbol0);
      assertEquals(12, symbolSet0.getMaxSequeceLength());
  }
}
