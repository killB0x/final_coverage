/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:00:32 GMT 2022
 */

package net.segoia.util.parser.event;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashMap;
import net.segoia.util.parser.Symbol;
import net.segoia.util.parser.SymbolType;
import net.segoia.util.parser.event.AssociationEvent;
import net.segoia.util.parser.workers.StringConcatWorker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractParseEvent_ESTest extends AbstractParseEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AssociationEvent associationEvent0 = new AssociationEvent();
      SymbolType symbolType0 = SymbolType.WORKER;
      Symbol symbol0 = new Symbol("", symbolType0, 0);
      symbol0.setUseEscapeCharacterOn(true);
      associationEvent0.setSymbol(symbol0);
      Symbol symbol1 = associationEvent0.getSymbol();
      assertEquals(SymbolType.WORKER, symbol1.getType());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AssociationEvent associationEvent0 = new AssociationEvent();
      SymbolType symbolType0 = SymbolType.SEPARATE;
      Symbol symbol0 = new Symbol("", symbolType0);
      symbol0.setOverrideSuperContextConfig(true);
      associationEvent0.setSymbol(symbol0);
      Symbol symbol1 = associationEvent0.getSymbol();
      assertFalse(symbol1.isDocStartEventOn());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AssociationEvent associationEvent0 = new AssociationEvent();
      SymbolType symbolType0 = SymbolType.SEPARATE;
      Symbol symbol0 = new Symbol("F4<>on)(", symbolType0);
      symbol0.setDocStartEventOn(true);
      associationEvent0.setSymbol(symbol0);
      Symbol symbol1 = associationEvent0.getSymbol();
      assertTrue(symbol1.isDocStartEventOn());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AssociationEvent associationEvent0 = new AssociationEvent();
      Symbol symbol0 = Symbol.fromString("~d(}_\"BG1vv<");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      StringConcatWorker stringConcatWorker0 = new StringConcatWorker(hashMap0);
      symbol0.addWorker(stringConcatWorker0);
      associationEvent0.setSymbol(symbol0);
      Symbol symbol1 = associationEvent0.getSymbol();
      assertNull(symbol1.getType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AssociationEvent associationEvent0 = new AssociationEvent();
      SymbolType symbolType0 = SymbolType.GROUP_START;
      Symbol symbol0 = new Symbol("'", symbolType0, 111);
      associationEvent0.setSymbol(symbol0);
      Symbol symbol1 = associationEvent0.getSymbol();
      assertFalse(symbol1.isDocStartEventOn());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AssociationEvent associationEvent0 = new AssociationEvent();
      associationEvent0.setStartIndex(4246);
      int int0 = associationEvent0.getStartIndex();
      assertEquals(4246, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AssociationEvent associationEvent0 = new AssociationEvent();
      associationEvent0.setStartIndex((-1));
      int int0 = associationEvent0.getStartIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AssociationEvent associationEvent0 = new AssociationEvent();
      Symbol symbol0 = associationEvent0.getSymbol();
      assertNull(symbol0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AssociationEvent associationEvent0 = new AssociationEvent();
      int int0 = associationEvent0.getStartIndex();
      assertEquals(0, int0);
  }
}
