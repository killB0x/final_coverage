/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:23:43 GMT 2022
 */

package net.segoia.util.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.parser.Symbol;
import net.segoia.util.parser.SymbolType;
import net.segoia.util.parser.WaitInfo;
import net.segoia.util.parser.workers.ParseWorker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WaitInfo_ESTest extends WaitInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      WaitInfo waitInfo0 = new WaitInfo((Symbol) null, object0, (-2553));
      waitInfo0.getSymbol();
      assertEquals((-2553), waitInfo0.getAvailableStackIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SymbolType symbolType0 = SymbolType.SEPARATE;
      Symbol symbol0 = new Symbol("", symbolType0);
      Object object0 = new Object();
      symbol0.setUseEscapeCharacterOn(true);
      WaitInfo waitInfo0 = new WaitInfo(symbol0, object0, 0);
      waitInfo0.getSymbol();
      assertEquals(0, waitInfo0.getAvailableStackIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SymbolType symbolType0 = SymbolType.GROUP_END_START;
      Symbol symbol0 = new Symbol("cgYV_8~", symbolType0, 596);
      Object object0 = new Object();
      WaitInfo waitInfo0 = new WaitInfo(symbol0, object0, 2860);
      symbol0.setOverrideSuperContextConfig(true);
      waitInfo0.getSymbol();
      assertEquals(2860, waitInfo0.getAvailableStackIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Symbol symbol0 = Symbol.fromString(" at ");
      WaitInfo waitInfo0 = new WaitInfo(symbol0, symbol0, 3623);
      symbol0.configFromSymbol(symbol0);
      waitInfo0.getSymbol();
      assertEquals(3623, waitInfo0.getAvailableStackIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Symbol symbol0 = new Symbol();
      WaitInfo waitInfo0 = new WaitInfo(symbol0, (Object) null, 1776);
      symbol0.addWorker((ParseWorker) null);
      waitInfo0.getSymbol();
      assertEquals(1776, waitInfo0.getAvailableStackIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SymbolType symbolType0 = SymbolType.GROUP_END_START;
      Symbol symbol0 = new Symbol("g>5$wY2T@~|\"7N[z~", symbolType0, 0);
      WaitInfo waitInfo0 = new WaitInfo(symbol0, symbolType0, 0);
      waitInfo0.getSymbol();
      assertEquals(0, waitInfo0.getAvailableStackIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Symbol symbol0 = new Symbol();
      Object object0 = new Object();
      WaitInfo waitInfo0 = new WaitInfo(symbol0, object0, (-86));
      waitInfo0.getPreviousValue();
      assertEquals((-86), waitInfo0.getAvailableStackIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      WaitInfo waitInfo0 = new WaitInfo((Symbol) null, object0, (-2553));
      int int0 = waitInfo0.getFoundIndex();
      assertEquals(0, int0);
      assertEquals((-2553), waitInfo0.getAvailableStackIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Symbol symbol0 = Symbol.fromString(" at ");
      WaitInfo waitInfo0 = new WaitInfo(symbol0, symbol0, 3623);
      waitInfo0.setFoundIndex(3623);
      int int0 = waitInfo0.getFoundIndex();
      assertEquals(3623, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SymbolType symbolType0 = SymbolType.SEPARATE;
      Symbol symbol0 = new Symbol("", symbolType0);
      Object object0 = new Object();
      WaitInfo waitInfo0 = new WaitInfo(symbol0, object0, 0);
      waitInfo0.setFoundIndex((-2322));
      int int0 = waitInfo0.getFoundIndex();
      assertEquals((-2322), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Symbol symbol0 = Symbol.fromString("net.segoia.util.parser.workers.ParseWorker");
      Object object0 = new Object();
      WaitInfo waitInfo0 = new WaitInfo(symbol0, object0, 0);
      int int0 = waitInfo0.getAvailableStackIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Symbol symbol0 = Symbol.fromString(" at ");
      WaitInfo waitInfo0 = new WaitInfo(symbol0, symbol0, 3623);
      int int0 = waitInfo0.getAvailableStackIndex();
      assertEquals(3623, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Symbol symbol0 = Symbol.fromString("");
      Object object0 = new Object();
      WaitInfo waitInfo0 = new WaitInfo(symbol0, object0, 0);
      assertEquals(0, waitInfo0.getAvailableStackIndex());
      
      waitInfo0.setAvailableStackIndex((-1));
      int int0 = waitInfo0.getAvailableStackIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WaitInfo waitInfo0 = new WaitInfo((Symbol) null, (Object) null, (-1066));
      // Undeclared exception!
      try { 
        waitInfo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.parser.WaitInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Symbol symbol0 = Symbol.fromString(" at ");
      WaitInfo waitInfo0 = new WaitInfo(symbol0, symbol0, 3623);
      waitInfo0.setPreviousValue((Object) null);
      waitInfo0.getPreviousValue();
      assertEquals(3623, waitInfo0.getAvailableStackIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Symbol symbol0 = Symbol.fromString(" at ");
      WaitInfo waitInfo0 = new WaitInfo(symbol0, symbol0, 3623);
      String string0 = waitInfo0.toString();
      assertEquals(3623, waitInfo0.getAvailableStackIndex());
      assertEquals("null at 0", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Symbol symbol0 = Symbol.fromString(" at ");
      WaitInfo waitInfo0 = new WaitInfo(symbol0, symbol0, 3623);
      waitInfo0.setSymbol(symbol0);
      assertEquals(3623, waitInfo0.getAvailableStackIndex());
  }
}
