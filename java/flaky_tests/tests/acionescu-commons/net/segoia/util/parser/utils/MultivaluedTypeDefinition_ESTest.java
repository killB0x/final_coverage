/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:09:19 GMT 2022
 */

package net.segoia.util.parser.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import net.segoia.util.parser.utils.MultivaluedTypeDefinition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultivaluedTypeDefinition_ESTest extends MultivaluedTypeDefinition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultivaluedTypeDefinition<Integer, Integer> multivaluedTypeDefinition0 = new MultivaluedTypeDefinition<Integer, Integer>();
      Class<Integer> class0 = Integer.class;
      multivaluedTypeDefinition0.setNestedType(class0);
      Class<Integer> class1 = multivaluedTypeDefinition0.getNestedType();
      assertSame(class1, class0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultivaluedTypeDefinition<Integer, Integer> multivaluedTypeDefinition0 = new MultivaluedTypeDefinition<Integer, Integer>();
      Class<Integer> class0 = Integer.class;
      multivaluedTypeDefinition0.setMultivaluedType(class0);
      Class<Integer> class1 = multivaluedTypeDefinition0.getMultivaluedType();
      assertEquals("class java.lang.Integer", class1.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      MultivaluedTypeDefinition<Integer, Integer> multivaluedTypeDefinition0 = new MultivaluedTypeDefinition<Integer, Integer>((Class<Integer>) null, class0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultivaluedTypeDefinition<Integer, Integer> multivaluedTypeDefinition0 = new MultivaluedTypeDefinition<Integer, Integer>();
      Class<Integer> class0 = multivaluedTypeDefinition0.getMultivaluedType();
      multivaluedTypeDefinition0.setMultivaluedType(class0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultivaluedTypeDefinition<Integer, Integer> multivaluedTypeDefinition0 = new MultivaluedTypeDefinition<Integer, Integer>();
      Class<Integer> class0 = multivaluedTypeDefinition0.getNestedType();
      assertNull(class0);
  }
}
