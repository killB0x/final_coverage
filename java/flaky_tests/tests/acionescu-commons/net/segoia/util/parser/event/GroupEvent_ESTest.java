/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:34:05 GMT 2022
 */

package net.segoia.util.parser.event;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import net.segoia.util.parser.Symbol;
import net.segoia.util.parser.SymbolType;
import net.segoia.util.parser.event.GroupEvent;
import net.segoia.util.parser.workers.MapperWorker;
import net.segoia.util.parser.workers.StringConcatWorker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupEvent_ESTest extends GroupEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      SymbolType symbolType0 = SymbolType.GROUP_END_START;
      Symbol symbol0 = new Symbol("}Y}}SvX@f>fS{m", symbolType0);
      groupEvent0.setStartSymbol(symbol0);
      symbol0.setUseEscapeCharacterOn(true);
      Symbol symbol1 = groupEvent0.getStartSymbol();
      assertEquals((-1), symbol1.getPriority());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      Symbol symbol0 = new Symbol();
      groupEvent0.setStartSymbol(symbol0);
      symbol0.setOverrideSuperContextConfig(true);
      Symbol symbol1 = groupEvent0.getStartSymbol();
      assertNull(symbol1.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      Symbol symbol0 = Symbol.fromString("SIMPLE");
      symbol0.configFromSymbol(symbol0);
      groupEvent0.setStartSymbol(symbol0);
      Symbol symbol1 = groupEvent0.getStartSymbol();
      assertSame(symbol1, symbol0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      SymbolType symbolType0 = SymbolType.UNIQUE_GROUP_SEPARATOR;
      Symbol symbol0 = new Symbol("", symbolType0, 0);
      groupEvent0.setStartSymbol(symbol0);
      Symbol symbol1 = groupEvent0.getStartSymbol();
      assertEquals(SymbolType.UNIQUE_GROUP_SEPARATOR, symbol1.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      SymbolType symbolType0 = SymbolType.UNIQUE_GROUP_SEPARATOR;
      Symbol symbol0 = new Symbol("Dmb)~[L<`\"9>CSBJ)a", symbolType0, 1874);
      groupEvent0.setStartSymbol(symbol0);
      Symbol symbol1 = groupEvent0.getStartSymbol();
      assertFalse(symbol1.isDocStartEventOn());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      groupEvent0.setStartIndex(1874);
      int int0 = groupEvent0.getStartIndex();
      assertEquals(1874, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      groupEvent0.setStartIndex((-193));
      int int0 = groupEvent0.getStartIndex();
      assertEquals((-193), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      SymbolType symbolType0 = SymbolType.UNIQUE_GROUP_SEPARATOR;
      groupEvent0.setPrefixValue(symbolType0);
      Object object0 = groupEvent0.getPrefixValue();
      assertEquals(SymbolType.UNIQUE_GROUP_SEPARATOR, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) groupEvent0);
      groupEvent0.setObjects(linkedList0);
      List<?> list0 = groupEvent0.getObjects();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      SymbolType symbolType0 = SymbolType.GROUP_END;
      Symbol symbol0 = new Symbol("", symbolType0, 0);
      symbol0.setUseEscapeCharacterOn(true);
      groupEvent0.setEndSymbol(symbol0);
      Symbol symbol1 = groupEvent0.getEndSymbol();
      assertEquals(0, symbol1.getPriority());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      Symbol symbol0 = Symbol.fromString("");
      symbol0.setOverrideSuperContextConfig(true);
      groupEvent0.setEndSymbol(symbol0);
      Symbol symbol1 = groupEvent0.getEndSymbol();
      assertFalse(symbol1.isUseEscapeCharacterOn());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      Symbol symbol0 = Symbol.fromString("SIMPLE");
      groupEvent0.setEndSymbol(symbol0);
      symbol0.configFromSymbol(symbol0);
      Symbol symbol1 = groupEvent0.getEndSymbol();
      assertEquals("\\", symbol1.getEscapeCharacter());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      Symbol symbol0 = new Symbol();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapperWorker mapperWorker0 = new MapperWorker(hashMap0);
      symbol0.addWorker(mapperWorker0);
      groupEvent0.setEndSymbol(symbol0);
      Symbol symbol1 = groupEvent0.getEndSymbol();
      assertSame(symbol1, symbol0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      SymbolType symbolType0 = SymbolType.ASSOCIATE;
      Symbol symbol0 = new Symbol("REPEATABLE", symbolType0, 7);
      groupEvent0.setEndSymbol(symbol0);
      Symbol symbol1 = groupEvent0.getEndSymbol();
      assertFalse(symbol1.hasWorkers());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      Symbol symbol0 = groupEvent0.getStartSymbol();
      assertNull(symbol0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      SymbolType symbolType0 = SymbolType.SEPARATE;
      Symbol symbol0 = new Symbol("p?XO!g+(j", symbolType0);
      List<Symbol> list0 = symbol0.getPairSymbols();
      groupEvent0.setObjects(list0);
      List<?> list1 = groupEvent0.getObjects();
      assertFalse(list1.contains("p?XO!g+(j"));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      int int0 = groupEvent0.getStartIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      List<?> list0 = groupEvent0.getObjects();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      Symbol symbol0 = Symbol.fromString("");
      groupEvent0.setStartSymbol(symbol0);
      StringConcatWorker stringConcatWorker0 = new StringConcatWorker((Map<Object, Object>) null);
      symbol0.addWorker(stringConcatWorker0);
      Symbol symbol1 = groupEvent0.getStartSymbol();
      assertFalse(symbol1.isOverrideSuperContextConfig());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      groupEvent0.getPrefixValue();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GroupEvent groupEvent0 = new GroupEvent();
      Symbol symbol0 = groupEvent0.getEndSymbol();
      assertNull(symbol0);
  }
}
