/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:20:13 GMT 2022
 */

package net.segoia.util.execution.test.func;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.execution.ExecutionEntity;
import net.segoia.util.execution.ExecutionEntityWrapper;
import net.segoia.util.execution.test.ExecutionContext;
import net.segoia.util.execution.test.func.DelegatorEntity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DelegatorEntity_ESTest extends DelegatorEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DelegatorEntity<ExecutionContext<Integer, Integer>, Integer> delegatorEntity0 = new DelegatorEntity<ExecutionContext<Integer, Integer>, Integer>();
      ExecutionContext<Integer, Integer> executionContext0 = new ExecutionContext<Integer, Integer>();
      ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, Integer>> executionEntity0 = (ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, Integer>>) mock(ExecutionEntity.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(executionEntity0).execute(any(net.segoia.util.execution.test.ExecutionContext.class));
      ExecutionContext<ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, Integer>>> executionContext1 = new ExecutionContext<ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, Integer>>>(executionContext0, executionEntity0);
      try { 
        delegatorEntity0.execute(executionContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.execution.test.func.DelegatorEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DelegatorEntity<ExecutionContext<Integer, Integer>, ExecutionContext<Integer, Integer>> delegatorEntity0 = new DelegatorEntity<ExecutionContext<Integer, Integer>, ExecutionContext<Integer, Integer>>();
      ExecutionContext<Integer, Integer> executionContext0 = new ExecutionContext<Integer, Integer>();
      ExecutionEntityWrapper<ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionContext<Integer, Integer>>>, ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionContext<Integer, Integer>>> executionEntityWrapper0 = new ExecutionEntityWrapper<ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionContext<Integer, Integer>>>, ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionContext<Integer, Integer>>>();
      ExecutionContext<ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionContext<Integer, Integer>>>> executionContext1 = new ExecutionContext<ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionEntity<ExecutionContext<Integer, Integer>, ExecutionContext<Integer, Integer>>>>(executionContext0, executionEntityWrapper0);
      try { 
        delegatorEntity0.execute(executionContext1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GENERIC_EXECUTION_ERROR
         //
         verifyException("net.segoia.util.execution.ExecutionEntityWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DelegatorEntity<DelegatorEntity<Integer, Integer>, Integer> delegatorEntity0 = new DelegatorEntity<DelegatorEntity<Integer, Integer>, Integer>();
      DelegatorEntity<Integer, Integer> delegatorEntity1 = new DelegatorEntity<Integer, Integer>();
      ExecutionEntity<DelegatorEntity<Integer, Integer>, ExecutionEntity<DelegatorEntity<Integer, Integer>, Integer>> executionEntity0 = (ExecutionEntity<DelegatorEntity<Integer, Integer>, ExecutionEntity<DelegatorEntity<Integer, Integer>, Integer>>) mock(ExecutionEntity.class, new ViolatedAssumptionAnswer());
      ExecutionContext<DelegatorEntity<Integer, Integer>, ExecutionEntity<DelegatorEntity<Integer, Integer>, ExecutionEntity<DelegatorEntity<Integer, Integer>, Integer>>> executionContext0 = new ExecutionContext<DelegatorEntity<Integer, Integer>, ExecutionEntity<DelegatorEntity<Integer, Integer>, ExecutionEntity<DelegatorEntity<Integer, Integer>, Integer>>>(delegatorEntity1, executionEntity0);
      ExecutionEntity<DelegatorEntity<Integer, Integer>, Integer> executionEntity1 = (ExecutionEntity<DelegatorEntity<Integer, Integer>, Integer>) mock(ExecutionEntity.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(executionEntity1).execute(any(net.segoia.util.execution.test.func.DelegatorEntity.class));
      ExecutionEntity<DelegatorEntity<Integer, Integer>, ExecutionEntity<DelegatorEntity<Integer, Integer>, Integer>> executionEntity2 = (ExecutionEntity<DelegatorEntity<Integer, Integer>, ExecutionEntity<DelegatorEntity<Integer, Integer>, Integer>>) mock(ExecutionEntity.class, new ViolatedAssumptionAnswer());
      doReturn(executionEntity1).when(executionEntity2).execute(any(net.segoia.util.execution.test.func.DelegatorEntity.class));
      executionContext0.setConfig(executionEntity2);
      Integer integer0 = delegatorEntity0.execute(executionContext0);
      assertNull(integer0);
  }
}
