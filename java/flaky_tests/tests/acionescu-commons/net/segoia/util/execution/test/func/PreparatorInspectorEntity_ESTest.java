/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:39:04 GMT 2022
 */

package net.segoia.util.execution.test.func;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.util.execution.ExecutionEntity;
import net.segoia.util.execution.test.ExecutionContext;
import net.segoia.util.execution.test.func.PreparatorInspectorEntity;
import net.segoia.util.execution.test.func.PreparatorInspectorEntityConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PreparatorInspectorEntity_ESTest extends PreparatorInspectorEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PreparatorInspectorEntity<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>> preparatorInspectorEntity0 = new PreparatorInspectorEntity<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>();
      Integer integer0 = new Integer(128);
      PreparatorInspectorEntityConfiguration<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>> preparatorInspectorEntityConfiguration0 = new PreparatorInspectorEntityConfiguration<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>();
      ExecutionEntity<Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>> executionEntity0 = (ExecutionEntity<Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>>) mock(ExecutionEntity.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(executionEntity0).execute(anyInt());
      preparatorInspectorEntityConfiguration0.setExecutor(executionEntity0);
      ExecutionEntity<Integer, Integer> executionEntity1 = (ExecutionEntity<Integer, Integer>) mock(ExecutionEntity.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(executionEntity1).execute(anyInt());
      preparatorInspectorEntityConfiguration0.setPreparator(executionEntity1);
      ExecutionEntity<PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>> executionEntity2 = (ExecutionEntity<PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>) mock(ExecutionEntity.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(executionEntity2).execute(any(net.segoia.util.execution.test.func.PreparatorInspectorEntity.class));
      preparatorInspectorEntityConfiguration0.setInspector(executionEntity2);
      ExecutionContext<Integer, PreparatorInspectorEntityConfiguration<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>> executionContext0 = new ExecutionContext<Integer, PreparatorInspectorEntityConfiguration<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>>(integer0, preparatorInspectorEntityConfiguration0);
      PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer> preparatorInspectorEntityConfiguration1 = preparatorInspectorEntity0.execute(executionContext0);
      assertNull(preparatorInspectorEntityConfiguration1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PreparatorInspectorEntity<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>> preparatorInspectorEntity0 = new PreparatorInspectorEntity<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>();
      Integer integer0 = new Integer(128);
      PreparatorInspectorEntityConfiguration<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>> preparatorInspectorEntityConfiguration0 = new PreparatorInspectorEntityConfiguration<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>();
      ExecutionEntity<Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>> executionEntity0 = (ExecutionEntity<Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>>) mock(ExecutionEntity.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(executionEntity0).execute(anyInt());
      preparatorInspectorEntityConfiguration0.setExecutor(executionEntity0);
      ExecutionEntity<Integer, Integer> executionEntity1 = (ExecutionEntity<Integer, Integer>) mock(ExecutionEntity.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(executionEntity1).execute(anyInt());
      preparatorInspectorEntityConfiguration0.setPreparator(executionEntity1);
      PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer> preparatorInspectorEntityConfiguration1 = new PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>();
      ExecutionEntity<PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>> executionEntity2 = (ExecutionEntity<PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>) mock(ExecutionEntity.class, new ViolatedAssumptionAnswer());
      doReturn(preparatorInspectorEntityConfiguration1).when(executionEntity2).execute(any(net.segoia.util.execution.test.func.PreparatorInspectorEntity.class));
      preparatorInspectorEntityConfiguration0.setInspector(executionEntity2);
      ExecutionContext<Integer, PreparatorInspectorEntityConfiguration<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>> executionContext0 = new ExecutionContext<Integer, PreparatorInspectorEntityConfiguration<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>>(integer0, preparatorInspectorEntityConfiguration0);
      PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer> preparatorInspectorEntityConfiguration2 = preparatorInspectorEntity0.execute(executionContext0);
      assertSame(preparatorInspectorEntityConfiguration2, preparatorInspectorEntityConfiguration1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PreparatorInspectorEntity<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>> preparatorInspectorEntity0 = new PreparatorInspectorEntity<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>();
      Integer integer0 = new Integer(128);
      PreparatorInspectorEntityConfiguration<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>> preparatorInspectorEntityConfiguration0 = new PreparatorInspectorEntityConfiguration<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>();
      ExecutionContext<Integer, PreparatorInspectorEntityConfiguration<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>> executionContext0 = new ExecutionContext<Integer, PreparatorInspectorEntityConfiguration<Integer, Integer, PreparatorInspectorEntity<Integer, Integer, Integer, Integer>, PreparatorInspectorEntityConfiguration<Integer, Integer, Integer, Integer>>>(integer0, preparatorInspectorEntityConfiguration0);
      try { 
        preparatorInspectorEntity0.execute(executionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.util.execution.test.func.PreparatorInspectorEntity", e);
      }
  }
}
