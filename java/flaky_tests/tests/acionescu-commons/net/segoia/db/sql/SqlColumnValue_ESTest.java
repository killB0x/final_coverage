/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 06:50:17 GMT 2022
 */

package net.segoia.db.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.db.sql.SqlColumnValue;
import net.segoia.db.sql.SqlType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SqlColumnValue_ESTest extends SqlColumnValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SqlColumnValue sqlColumnValue0 = new SqlColumnValue();
      SqlType sqlType0 = SqlType.DATE;
      sqlColumnValue0.setSqlType(sqlType0);
      SqlType sqlType1 = sqlColumnValue0.getSqlType();
      assertSame(sqlType1, sqlType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      SqlType sqlType0 = SqlType.DATE;
      SqlColumnValue sqlColumnValue0 = SqlColumnValue.getSqlColumnValue("", object0, sqlType0);
      String string0 = sqlColumnValue0.getRawValue();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SqlColumnValue sqlColumnValue0 = new SqlColumnValue();
      sqlColumnValue0.setRawValue("");
      String string0 = sqlColumnValue0.getRawValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      SqlType sqlType0 = SqlType.DATE;
      SqlColumnValue sqlColumnValue0 = SqlColumnValue.getSqlColumnValue("", object0, sqlType0);
      sqlColumnValue0.setColumnName("7#rvC<C`q5y(byCO)");
      String string0 = sqlColumnValue0.getColumnName();
      assertEquals("7#rvC<C`q5y(byCO)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SqlColumnValue sqlColumnValue0 = new SqlColumnValue();
      sqlColumnValue0.setColumnName("");
      String string0 = sqlColumnValue0.getColumnName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SqlColumnValue sqlColumnValue0 = new SqlColumnValue();
      sqlColumnValue0.setRawValue("~x1s*1^");
      // Undeclared exception!
      try { 
        sqlColumnValue0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.db.sql.SqlColumnValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SqlColumnValue sqlColumnValue0 = new SqlColumnValue();
      sqlColumnValue0.setRawValue("#g9jf;A7V-k)l4St$");
      // Undeclared exception!
      try { 
        sqlColumnValue0.getSqlFragment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.segoia.db.sql.SqlColumnValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SqlType sqlType0 = SqlType.DATE;
      SqlColumnValue sqlColumnValue0 = SqlColumnValue.getSqlColumnValue("", "", sqlType0);
      String string0 = sqlColumnValue0.getValue();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SqlColumnValue sqlColumnValue0 = new SqlColumnValue();
      String string0 = sqlColumnValue0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SqlColumnValue sqlColumnValue0 = new SqlColumnValue();
      SqlType sqlType0 = SqlType.STRING;
      sqlColumnValue0.setSqlType(sqlType0);
      sqlColumnValue0.setRawValue("");
      String string0 = sqlColumnValue0.getValue();
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SqlColumnValue sqlColumnValue0 = new SqlColumnValue();
      SqlType sqlType0 = SqlType.NUMBER;
      sqlColumnValue0.setSqlType(sqlType0);
      sqlColumnValue0.setRawValue("");
      String string0 = sqlColumnValue0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SqlColumnValue sqlColumnValue0 = new SqlColumnValue();
      String string0 = sqlColumnValue0.getSqlFragment();
      assertEquals("null is null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SqlType sqlType0 = SqlType.DATE;
      SqlColumnValue sqlColumnValue0 = SqlColumnValue.getSqlColumnValue("", "", sqlType0);
      String string0 = sqlColumnValue0.getSqlFragment();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SqlType sqlType0 = SqlType.DATE;
      SqlColumnValue sqlColumnValue0 = SqlColumnValue.getSqlColumnValue("gD{nnxf:`g2T", (Object) null, sqlType0);
      assertEquals(SqlType.DATE, sqlColumnValue0.getSqlType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SqlColumnValue sqlColumnValue0 = new SqlColumnValue();
      sqlColumnValue0.getSqlType();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SqlColumnValue sqlColumnValue0 = new SqlColumnValue();
      String string0 = sqlColumnValue0.getColumnName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SqlColumnValue sqlColumnValue0 = new SqlColumnValue();
      String string0 = sqlColumnValue0.getRawValue();
      assertNull(string0);
  }
}
