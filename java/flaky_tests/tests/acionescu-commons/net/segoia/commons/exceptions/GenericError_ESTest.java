/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:42:22 GMT 2022
 */

package net.segoia.commons.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.segoia.commons.exceptions.GenericError;
import net.segoia.util.data.GenericNameValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericError_ESTest extends GenericError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenericNameValue[] genericNameValueArray0 = new GenericNameValue[4];
      GenericError<Object> genericError0 = new GenericError<Object>((Object) null, genericNameValueArray0);
      GenericNameValue[] genericNameValueArray1 = genericError0.getParams();
      assertSame(genericNameValueArray1, genericNameValueArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericNameValue[] genericNameValueArray0 = new GenericNameValue[4];
      GenericError<Object> genericError0 = new GenericError<Object>((Object) null, genericNameValueArray0);
      Object object0 = genericError0.getErrorType();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenericNameValue genericNameValue0 = new GenericNameValue("]:#.`sYxn:h:`[Q(&");
      genericNameValue0.setValue(genericNameValue0);
      GenericError<Object> genericError0 = new GenericError<Object>(genericNameValue0, (GenericNameValue[]) null);
      // Undeclared exception!
      try { 
        genericError0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(1705);
      GenericNameValue[] genericNameValueArray0 = new GenericNameValue[0];
      GenericError<Integer> genericError0 = new GenericError<Integer>(integer0, genericNameValueArray0);
      String string0 = genericError0.toString();
      assertEquals("1705[[]]", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(1705);
      GenericNameValue[] genericNameValueArray0 = new GenericNameValue[0];
      GenericError<Integer> genericError0 = new GenericError<Integer>(integer0, genericNameValueArray0);
      GenericNameValue[] genericNameValueArray1 = genericError0.getParams();
      GenericError<Object> genericError1 = new GenericError<Object>(integer0, genericNameValueArray0);
      genericError1.setParams(genericNameValueArray1);
      assertEquals(0, genericNameValueArray1.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(1705);
      GenericNameValue[] genericNameValueArray0 = new GenericNameValue[0];
      GenericError<Integer> genericError0 = new GenericError<Integer>(integer0, genericNameValueArray0);
      GenericError<Object> genericError1 = new GenericError<Object>(integer0, genericNameValueArray0);
      genericError1.setErrorType(genericError0);
      Object object0 = genericError1.getErrorType();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GenericError<Object> genericError0 = new GenericError<Object>((Object) null, (GenericNameValue[]) null);
      GenericNameValue[] genericNameValueArray0 = genericError0.getParams();
      assertNull(genericNameValueArray0);
  }
}
