/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 16:19:04 GMT 2022
 */

package org.sqlite;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.SQLiteLimits;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLiteLimits_ESTest extends SQLiteLimits_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SQLiteLimits[] sQLiteLimitsArray0 = SQLiteLimits.values();
      assertEquals(13, sQLiteLimitsArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SQLiteLimits sQLiteLimits0 = SQLiteLimits.valueOf("SQLITE_LIMIT_LENGTH");
      assertEquals(SQLiteLimits.SQLITE_LIMIT_LENGTH, sQLiteLimits0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SQLiteLimits sQLiteLimits0 = SQLiteLimits.valueOf("SQLITE_LIMIT_VDBE_OP");
      assertEquals(5, sQLiteLimits0.getId());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SQLiteLimits sQLiteLimits0 = SQLiteLimits.SQLITE_LIMIT_LENGTH;
      int int0 = sQLiteLimits0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SQLiteLimits sQLiteLimits0 = SQLiteLimits.SQLITE_LIMIT_ATTACHED;
      int int0 = sQLiteLimits0.getId();
      assertEquals(7, int0);
  }
}
