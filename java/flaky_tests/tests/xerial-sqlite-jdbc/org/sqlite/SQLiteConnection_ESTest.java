/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 15:39:55 GMT 2022
 */

package org.sqlite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLException;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sqlite.SQLiteConnection;
import org.sqlite.jdbc4.JDBC4Connection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLiteConnection_ESTest extends SQLiteConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      
      JDBC4Connection jDBC4Connection0 = null;
      try {
        jDBC4Connection0 = new JDBC4Connection(";DJJz[s%lZ", ";DJJz[s%lZ", properties0);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // opening db: ';DJJz[s%lZ': Simulated IOException
         //
         verifyException("org.sqlite.SQLiteConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      
      String string0 = SQLiteConnection.extractPragmasFromFilename("i?R<^", "i?R<^", properties0);
      assertEquals("i?R<^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Properties properties0 = new Properties();
          assertNotNull(properties0);
          
          JDBC4Connection jDBC4Connection0 = null;
          try {
            jDBC4Connection0 = new JDBC4Connection("8_esu", "F@(Q0e[ts?NtL&bd", properties0);
            fail("Expecting exception: SQLException");
          
          } catch(Throwable e) {
             //
             // Error opening connection
             //
             verifyException("org.sqlite.SQLiteConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Properties properties0 = new Properties();
          assertNotNull(properties0);
          
          JDBC4Connection jDBC4Connection0 = null;
          try {
            jDBC4Connection0 = new JDBC4Connection("41.b[qT", "&B6bbMv3(pdJ?", properties0);
            fail("Expecting exception: SQLException");
          
          } catch(Throwable e) {
             //
             // Error opening connection
             //
             verifyException("org.sqlite.SQLiteConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Zp6i;wjG)N23");
          boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "diMp5{Wd");
          assertTrue(boolean0);
          
          Properties properties0 = new Properties();
          assertNotNull(properties0);
          
          JDBC4Connection jDBC4Connection0 = null;
          try {
            jDBC4Connection0 = new JDBC4Connection("Zp6i;wjG)N23/Pww`h", "Zp6i;wjG)N23/Pww`h", properties0);
            fail("Expecting exception: SQLException");
          
          } catch(Throwable e) {
             //
             // Error opening connection
             //
             verifyException("org.sqlite.SQLiteConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      
      JDBC4Connection jDBC4Connection0 = null;
      try {
        jDBC4Connection0 = new JDBC4Connection("Zp6i;wjG)N23/Pww`h", "Zp6i;wjG)N23/Pww`h", properties0);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // path to 'Zp6i;wjG)N23/Pww`h': '/home/user/Zp6i;wjG)N23' does not exist
         //
         verifyException("org.sqlite.SQLiteConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Properties properties0 = new Properties();
          assertNotNull(properties0);
          
          JDBC4Connection jDBC4Connection0 = null;
          try {
            jDBC4Connection0 = new JDBC4Connection(":_esure:", "/", properties0);
            fail("Expecting exception: SQLException");
          
          } catch(Throwable e) {
             //
             // Error opening connection
             //
             verifyException("org.sqlite.SQLiteConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      
      JDBC4Connection jDBC4Connection0 = null;
      try {
        jDBC4Connection0 = new JDBC4Connection(":resource:(lrDpGJXz?{T~cq!|Vr", ":resource:(lrDpGJXz?{T~cq!|Vr", properties0);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // resource (lrDpGJXz?{T~cq!|Vr not found: java.net.MalformedURLException: no protocol: (lrDpGJXz?{T~cq!|Vr
         //
         verifyException("org.sqlite.SQLiteConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Properties properties0 = new Properties();
          assertNotNull(properties0);
          
          JDBC4Connection jDBC4Connection0 = null;
          try {
            jDBC4Connection0 = new JDBC4Connection("file:fYle:OV{=?=^", "mode=memory", properties0);
            fail("Expecting exception: SQLException");
          
          } catch(Throwable e) {
             //
             // Error opening connection
             //
             verifyException("org.sqlite.SQLiteConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Properties properties0 = new Properties();
          assertNotNull(properties0);
          
          JDBC4Connection jDBC4Connection0 = null;
          try {
            jDBC4Connection0 = new JDBC4Connection("file:hOV{=?=D^", "file:hOV{=?=D^", properties0);
            fail("Expecting exception: SQLException");
          
          } catch(Throwable e) {
             //
             // Error opening connection
             //
             verifyException("org.sqlite.SQLiteConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Properties properties0 = new Properties();
          JDBC4Connection jDBC4Connection0 = null;
          try {
            jDBC4Connection0 = new JDBC4Connection(":memory:", ":memory:", properties0);
            fail("Expecting exception: SQLException");
          
          } catch(Throwable e) {
             //
             // Error opening connection
             //
             verifyException("org.sqlite.SQLiteConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Properties properties0 = new Properties();
          JDBC4Connection jDBC4Connection0 = null;
          try {
            jDBC4Connection0 = new JDBC4Connection("", "", properties0);
            fail("Expecting exception: SQLException");
          
          } catch(Throwable e) {
             //
             // Error opening connection
             //
             verifyException("org.sqlite.SQLiteConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Properties properties0 = new Properties();
          JDBC4Connection jDBC4Connection0 = null;
          try {
            jDBC4Connection0 = new JDBC4Connection(":resource:", ":resource:", properties0);
            fail("Expecting exception: SQLException");
          
          } catch(Throwable e) {
             //
             // Error opening connection
             //
             verifyException("org.sqlite.SQLiteConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
