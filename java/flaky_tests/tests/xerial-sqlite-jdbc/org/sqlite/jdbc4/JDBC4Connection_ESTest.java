/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 16:16:57 GMT 2022
 */

package org.sqlite.jdbc4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLException;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.jdbc4.JDBC4Connection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDBC4Connection_ESTest extends JDBC4Connection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Properties properties0 = new Properties();
      JDBC4Connection jDBC4Connection0 = null;
      try {
        jDBC4Connection0 = new JDBC4Connection((String) null, (String) null, properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Properties properties0 = new Properties();
          JDBC4Connection jDBC4Connection0 = null;
          try {
            jDBC4Connection0 = new JDBC4Connection("org.sqlite.SQLiteCofig$Temptore", "", properties0);
            fail("Expecting exception: SQLException");
          
          } catch(Throwable e) {
             //
             // Error opening connection
             //
             verifyException("org.sqlite.SQLiteConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
