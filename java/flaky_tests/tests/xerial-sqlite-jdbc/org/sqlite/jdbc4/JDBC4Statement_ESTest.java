/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 16:08:46 GMT 2022
 */

package org.sqlite.jdbc4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.SQLiteConnection;
import org.sqlite.jdbc4.JDBC4Statement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDBC4Statement_ESTest extends JDBC4Statement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      Class<Object> class0 = Object.class;
      JDBC4Statement jDBC4Statement1 = (JDBC4Statement)jDBC4Statement0.unwrap(class0);
      assertEquals(0, jDBC4Statement1.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = jDBC4Statement0.isWrapperFor(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.close();
      boolean boolean0 = jDBC4Statement0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      Class<Integer> class0 = Integer.class;
      try { 
        jDBC4Statement0.unwrap(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.close();
      try { 
        jDBC4Statement0.isCloseOnCompletion();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // statement is closed
         //
         verifyException("org.sqlite.jdbc4.JDBC4Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      boolean boolean0 = jDBC4Statement0.isCloseOnCompletion();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      assertFalse(jDBC4Statement0.isClosed());
      
      jDBC4Statement0.closeOnCompletion();
      boolean boolean0 = jDBC4Statement0.isCloseOnCompletion();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      boolean boolean0 = jDBC4Statement0.isPoolable();
      assertFalse(boolean0);
      assertFalse(jDBC4Statement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      Class<Object> class0 = Object.class;
      jDBC4Statement0.isWrapperFor(class0);
      assertFalse(jDBC4Statement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setPoolable(true);
      assertFalse(jDBC4Statement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.unwrap((Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc4.JDBC4Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      boolean boolean0 = jDBC4Statement0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.close();
      try { 
        jDBC4Statement0.closeOnCompletion();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // statement is closed
         //
         verifyException("org.sqlite.jdbc4.JDBC4Statement", e);
      }
  }
}
