/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 15:46:31 GMT 2022
 */

package org.sqlite.jdbc3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.SQLiteConfig;
import org.sqlite.SQLiteConnection;
import org.sqlite.core.NativeDB;
import org.sqlite.core.SafeStmtPtr;
import org.sqlite.jdbc3.JDBC3Statement;
import org.sqlite.jdbc4.JDBC4Statement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDBC3Statement_ESTest extends JDBC3Statement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setMaxFieldSize(0);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setLargeMaxRows(0L);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setQueryTimeout(4515);
      assertEquals(4515, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setFetchDirection(1000);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setMaxFieldSize(1805);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setCursorName("not implemented by SQLite JDBC driver");
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.clearWarnings();
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("_zlf_Rq>,", "_zlf_Rq>,", sQLiteConfig0);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-990L));
      jDBC4Statement0.pointer = safeStmtPtr0;
      // Undeclared exception!
      try { 
        jDBC4Statement0.getMoreResults();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.CoreStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      try { 
        jDBC4Statement0.setQueryTimeout((-2));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // query timeout must be >= 0
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.getResultSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.CoreStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.getLargeUpdateCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.addBatch((String) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.executeBatch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("_zlf_Rq>,", "_zlf_Rq>,", sQLiteConfig0);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-990L));
      jDBC4Statement0.pointer = safeStmtPtr0;
      // Undeclared exception!
      try { 
        jDBC4Statement0.addBatch("yyyy-MM-dd HH:mm:ss.SSS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.CoreStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      try { 
        jDBC4Statement0.setLargeMaxRows((-12L));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // max row count must be >= 0
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setLargeMaxRows(1219L);
      assertEquals(1219, jDBC4Statement0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      long[] longArray0 = jDBC4Statement0.executeLargeBatch();
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.addBatch("");
      jDBC4Statement0.clearBatch();
      long[] longArray0 = jDBC4Statement0.executeLargeBatch();
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.executeLargeUpdate("E]nx~u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.getMoreResults(4815);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.CoreStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.execute("ChJPBFbO8A@A?d2S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setFetchDirection(1002);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setFetchDirection(1001);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      try { 
        jDBC4Statement0.setFetchDirection(64);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Unknown fetch direction 64. Must be one of FETCH_FORWARD, FETCH_REVERSE, or FETCH_UNKNOWN in java.sql.ResultSet
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      try { 
        jDBC4Statement0.setMaxFieldSize((-2055));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // max field size -2055 cannot be negative
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      try { 
        jDBC4Statement0.setMaxRows((-105));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // max row count must be >= 0
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setQueryTimeout(0);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.addBatch("J");
      // Undeclared exception!
      try { 
        jDBC4Statement0.executeLargeBatch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.addBatch(" cannot be negative");
      jDBC4Statement0.clearBatch();
      jDBC4Statement0.executeBatch();
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.clearBatch();
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.addBatch("SL~TE_COYRUP+_INDEX");
      jDBC4Statement0.addBatch("SL~TE_COYRUP+_INDEX");
      jDBC4Statement0.addBatch("SL~TE_COYRUP+_INDEX");
      jDBC4Statement0.addBatch("SL~TE_COYRUP+_INDEX");
      jDBC4Statement0.addBatch("SL~TE_COYRUP+_INDEX");
      jDBC4Statement0.addBatch("SL~TE_COYRUP+_INDEX");
      jDBC4Statement0.addBatch("SL~TE_COYRUP+_INDEX");
      jDBC4Statement0.addBatch("SL~TE_COYRUP+_INDEX");
      jDBC4Statement0.addBatch("SL~TE_COYRUP+_INDEX");
      jDBC4Statement0.addBatch("SL~TE_COYRUP+_INDEX");
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("_zlf_Rq>,", "\" does not match ", sQLiteConfig0);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-990L));
      jDBC4Statement0.pointer = safeStmtPtr0;
      // Undeclared exception!
      try { 
        jDBC4Statement0.getResultSet();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.column_count(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDBC3Statement.BackupObserver jDBC3Statement_BackupObserver0 = new JDBC3Statement.BackupObserver();
      jDBC3Statement_BackupObserver0.progress((-1541), (-1541));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      int int0 = jDBC4Statement0.getMaxFieldSize();
      assertEquals(0, int0);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      String[] stringArray0 = new String[7];
      try { 
        jDBC4Statement0.executeLargeUpdate("G=(", stringArray0);
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // not implemented by SQLite JDBC driver
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setFetchSize(2820);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.executeQuery("!*OYq1|", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.close();
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.getMaxRows();
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.executeUpdate("'v24e9[9xn<F", 1777);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.executeQuery("encoding");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      int int0 = jDBC4Statement0.getResultSetType();
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
      assertEquals(1003, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      String[] stringArray0 = new String[3];
      try { 
        jDBC4Statement0.executeUpdate("QxM!z:gQ", stringArray0);
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // not implemented by SQLite JDBC driver
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      String[] stringArray0 = new String[7];
      try { 
        jDBC4Statement0.execute("", stringArray0);
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // not implemented by SQLite JDBC driver
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.getGeneratedKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      int int0 = jDBC4Statement0.getResultSetHoldability();
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.getWarnings();
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      int[] intArray0 = new int[0];
      try { 
        jDBC4Statement0.executeLargeUpdate("", intArray0);
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // not implemented by SQLite JDBC driver
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      int int0 = jDBC4Statement0.getQueryTimeout();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setMaxRows(4618);
      int int0 = jDBC4Statement0.getMaxRows();
      assertEquals(4618L, jDBC4Statement0.getLargeMaxRows());
      assertEquals(4618, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.executeLargeUpdate("]5sV;M$ ", 964);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      int int0 = jDBC4Statement0.getFetchDirection();
      assertEquals(1000, int0);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setEscapeProcessing(true);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.getUpdateCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.cancel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      int int0 = jDBC4Statement0.getResultSetConcurrency();
      assertEquals(1007, int0);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.getLargeMaxRows();
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.getConnection();
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      try { 
        jDBC4Statement0.execute((String) null, (int[]) null);
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // not implemented by SQLite JDBC driver
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.execute((String) null, 520);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      int[] intArray0 = new int[3];
      try { 
        jDBC4Statement0.executeUpdate("", intArray0);
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // not implemented by SQLite JDBC driver
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.getFetchSize();
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        jDBC4Statement0.executeUpdate("FLe5-9a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3Statement", e);
      }
  }
}
