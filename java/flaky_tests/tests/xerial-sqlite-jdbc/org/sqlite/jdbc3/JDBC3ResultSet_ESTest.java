/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 15:33:06 GMT 2022
 */

package org.sqlite.jdbc3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.Calendar;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.sqlite.SQLiteConnection;
import org.sqlite.core.CoreStatement;
import org.sqlite.jdbc4.JDBC4ResultSet;
import org.sqlite.jdbc4.JDBC4Statement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDBC3ResultSet_ESTest extends JDBC3ResultSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getColumnName((-121));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTableName((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getCharacterStream(60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getLong(880);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getScale(1095);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      try { 
        jDBC4ResultSet0.setFetchDirection(2809);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // only FETCH_FORWARD direction supported
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setMaxRows(16384);
      jDBC4Statement0.setFetchSize(100);
      assertEquals(0, jDBC4Statement0.getQueryTimeout());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setFetchSize(0);
      assertEquals(1003, jDBC4Statement0.getResultSetType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      jDBC4ResultSet0.next();
      boolean boolean0 = jDBC4ResultSet0.isFirst();
      assertFalse(jDBC4ResultSet0.isBeforeFirst());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      int int0 = jDBC4ResultSet0.getType();
      assertEquals(1003, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      jDBC4Statement0.setMaxRows(100);
      Statement statement0 = jDBC4ResultSet0.getStatement();
      assertFalse(statement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      Statement statement0 = jDBC4ResultSet0.getStatement();
      assertSame(statement0, jDBC4Statement0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      String string0 = jDBC4ResultSet0.getSchemaName(4);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      jDBC4ResultSet0.next();
      int int0 = jDBC4ResultSet0.getRow();
      assertFalse(jDBC4ResultSet0.isBeforeFirst());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.setFetchSize(Integer.MAX_VALUE);
      int int0 = jDBC4ResultSet0.getFetchSize();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      int int0 = jDBC4ResultSet0.getFetchDirection();
      assertEquals(1000, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      String[] stringArray0 = new String[6];
      jDBC4ResultSet0.colsMeta = stringArray0;
      int int0 = jDBC4ResultSet0.getColumnCount();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.wasNull();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.wasNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.isSigned(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      String[] stringArray0 = new String[0];
      jDBC4ResultSet0.colsMeta = stringArray0;
      try { 
        jDBC4ResultSet0.isNullable(32);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // column 1 out of bounds [1,0]
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      String[] stringArray0 = new String[4];
      jDBC4ResultSet0.colsMeta = stringArray0;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.isNullable(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.isNullable(3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      String[] stringArray0 = new String[0];
      jDBC4ResultSet0.colsMeta = stringArray0;
      try { 
        jDBC4ResultSet0.isAutoIncrement((-1841414303));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // column 1 out of bounds [1,0]
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      String[] stringArray0 = new String[4];
      jDBC4ResultSet0.colsMeta = stringArray0;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.isAutoIncrement(1271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTimestamp("=}de<atqL]!:", calendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTimestamp("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      String[] stringArray0 = new String[4];
      jDBC4ResultSet0.colsMeta = stringArray0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, ".*?((.*?))");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTimestamp(4, (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTimestamp(14, calendar0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getTimestamp(3016);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      String[] stringArray0 = new String[4];
      jDBC4ResultSet0.colsMeta = stringArray0;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTimestamp(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTimestamp(2316);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTime("  NULL AS TYPE_CAT,", (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTime(",Q_bl8xW:>3v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getTime((-290), (Calendar) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Expected a calendar instance.
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      String[] stringArray0 = new String[4];
      jDBC4ResultSet0.colsMeta = stringArray0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 1757);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTime(4, (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTime((-2563), (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getTime((-1449));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTime((-1919));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getTableName(693);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getString("Z:2?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getShort("06$RSULyG^v@Li_;N");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getShort(421);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getPrecision((-271));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getObject("<N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getObject(4325);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      String[] stringArray0 = new String[4];
      jDBC4ResultSet0.colsMeta = stringArray0;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getObject(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getObject((-1959));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getLong("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getInt("N5kiu$6mj#W-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getFloat("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getFloat(96);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      String[] stringArray0 = new String[4];
      jDBC4ResultSet0.colsMeta = stringArray0;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getFloat(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getFloat(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getDouble("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      String[] stringArray0 = new String[4];
      stringArray0[2] = "";
      jDBC4ResultSet0.cols = stringArray0;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getDouble("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getDouble((-830));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      String[] stringArray0 = new String[4];
      jDBC4ResultSet0.colsMeta = stringArray0;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getDouble(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getDouble(2005);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getDate("", (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getDate("=@\"3)+tj4QGI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      String[] stringArray0 = new String[4];
      jDBC4ResultSet0.colsMeta = stringArray0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getDate(4, (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getDate(2601, (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getDate((-3941));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getDate((-2229));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getColumnTypeName(740);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getColumnType((-2163));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getColumnClassName(740);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      String[] stringArray0 = new String[4];
      jDBC4ResultSet0.colsMeta = stringArray0;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getColumnClassName(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getColumnClassName((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getCharacterStream("U6_uc<<?e^'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getBytes("i686");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getByte("LoNbdrs}u%=0tfB{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getBoolean("application_id");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getBinaryStream("kzg$<!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getBigDecimal("eYCTb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getBigDecimal(1810);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.findColumn("");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.findColumn("3_'T:e r;/sDx^z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getString((-2486));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getInt(16384);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getBytes((-2004));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getDate(2852, (Calendar) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Expected a calendar instance.
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      Calendar calendar0 = MockCalendar.getInstance();
      try { 
        jDBC4ResultSet0.getTimestamp(14, calendar0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      boolean boolean0 = jDBC4ResultSet0.isFirst();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      jDBC4ResultSet0.next();
      boolean boolean0 = jDBC4ResultSet0.isBeforeFirst();
      assertEquals(1, jDBC4ResultSet0.getRow());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      boolean boolean0 = jDBC4ResultSet0.isBeforeFirst();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.emptyResultSet = true;
      boolean boolean0 = jDBC4ResultSet0.isBeforeFirst();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      boolean boolean0 = jDBC4ResultSet0.isAfterLast();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      boolean boolean0 = jDBC4ResultSet0.isAfterLast();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      try { 
        jDBC4ResultSet0.setFetchDirection((-1));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // only FETCH_FORWARD direction supported
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      jDBC4ResultSet0.setFetchDirection(1000);
      assertFalse(jDBC4ResultSet0.rowUpdated());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      jDBC4Statement0.setMaxRows(100);
      jDBC4Statement0.setFetchSize(100);
      assertFalse(jDBC4Statement0.isPoolable());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.maxRows = (-1L);
      try { 
        jDBC4ResultSet0.setFetchSize(Integer.MAX_VALUE);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // fetch size 2147483647 out of bounds -1
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.setFetchSize((-2562));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // fetch size -2562 out of bounds 0
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.emptyResultSet = true;
      jDBC4ResultSet0.open = true;
      boolean boolean0 = jDBC4ResultSet0.next();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      jDBC4ResultSet0.next();
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      boolean boolean0 = jDBC4ResultSet0.next();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      String[] stringArray0 = new String[7];
      jDBC4ResultSet0.cols = stringArray0;
      try { 
        jDBC4ResultSet0.findColumn("j]");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // no such column: 'j]'
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      String[] stringArray0 = new String[6];
      stringArray0[2] = "]";
      jDBC4ResultSet0.cols = stringArray0;
      jDBC4ResultSet0.findColumn("]");
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getShort("]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getBinaryStream(1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      boolean boolean0 = jDBC4ResultSet0.isDefinitelyWritable(951);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      SQLWarning sQLWarning0 = jDBC4ResultSet0.getWarnings();
      assertNull(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      Calendar calendar0 = MockCalendar.getInstance();
      try { 
        jDBC4ResultSet0.getDate("", calendar0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      try { 
        jDBC4ResultSet0.getTimestamp("");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.isLast();
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // not supported by sqlite
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      boolean boolean0 = jDBC4ResultSet0.rowDeleted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      try { 
        jDBC4ResultSet0.getDouble("Error reading stream");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      try { 
        jDBC4ResultSet0.getBinaryStream("BEGIN IMMEDIATE; /* explicitly upgrade transaction */");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getBoolean("Yr2l=");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getLong("DATETIME");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getBytes("org.sqlite.core.SafeStmtPtr");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      boolean boolean0 = jDBC4ResultSet0.isWritable(44);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      Calendar calendar0 = MockCalendar.getInstance();
      try { 
        jDBC4ResultSet0.getTimestamp("=}de<atqL]!:", calendar0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getFetchDirection();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      int int0 = jDBC4ResultSet0.getConcurrency();
      assertEquals(1007, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getColumnCount();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      boolean boolean0 = jDBC4ResultSet0.isCaseSensitive(100);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getObject("");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      int int0 = jDBC4ResultSet0.getRow();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      boolean boolean0 = jDBC4ResultSet0.isCurrency((-618));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getFloat("``WdRk</'");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      try { 
        jDBC4ResultSet0.getTime("");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      Statement statement0 = jDBC4ResultSet0.getStatement();
      assertNull(statement0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getByte(3104);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      boolean boolean0 = jDBC4ResultSet0.rowUpdated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getLong(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      String string0 = jDBC4ResultSet0.getCursorName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getColumnLabel((-122));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      jDBC4ResultSet0.open = true;
      String[] stringArray0 = new String[4];
      jDBC4ResultSet0.colsMeta = stringArray0;
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getDate(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      int int0 = jDBC4ResultSet0.getFetchSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getString("Z:2?");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      boolean boolean0 = jDBC4ResultSet0.rowInserted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getCatalogName(228);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      boolean boolean0 = jDBC4ResultSet0.isSearchable(682);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getByte("LoNbdrs}u%=0tfB{");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      boolean boolean0 = jDBC4ResultSet0.isReadOnly((-3831));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      jDBC4ResultSet0.clearWarnings();
      assertFalse(jDBC4ResultSet0.isBeforeFirst());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.isAutoIncrement(4426);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SQLite JDBC: inconsistent internal state
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet(jDBC4Statement0);
      ResultSetMetaData resultSetMetaData0 = jDBC4ResultSet0.getMetaData();
      assertSame(jDBC4ResultSet0, resultSetMetaData0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      // Undeclared exception!
      try { 
        jDBC4ResultSet0.getBoolean(612);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.jdbc3.JDBC3ResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getCharacterStream("limit_variable_number");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getDate("");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      int int0 = jDBC4ResultSet0.getColumnDisplaySize(1701);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      TimeZone timeZone0 = TimeZone.getTimeZone("+>l)X:L4<xln9");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      try { 
        jDBC4ResultSet0.getTime("+>l)X:L4<xln9", calendar0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getInt("g/%&ybis7]iRs_CT=%");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JDBC4ResultSet jDBC4ResultSet0 = new JDBC4ResultSet((CoreStatement) null);
      try { 
        jDBC4ResultSet0.getBigDecimal("");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ResultSet closed
         //
         verifyException("org.sqlite.core.CoreResultSet", e);
      }
  }
}
