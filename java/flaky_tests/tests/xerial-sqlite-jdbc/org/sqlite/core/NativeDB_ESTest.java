/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 16:03:43 GMT 2022
 */

package org.sqlite.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.sql.SQLException;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sqlite.BusyHandler;
import org.sqlite.Collation;
import org.sqlite.Function;
import org.sqlite.ProgressHandler;
import org.sqlite.SQLiteConfig;
import org.sqlite.core.DB;
import org.sqlite.core.NativeDB;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NativeDB_ESTest extends NativeDB_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.create_function(".zRMUzkKv64n*", (Function) null, 2055, 255);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.create_function_utf8(byte[], org.sqlite.Function, int, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      String string0 = NativeDB.utf8ByteBufferToString(byteBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = NativeDB.stringToUtf8ByteArray((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = NativeDB.stringToUtf8ByteArray("The Android Project");
      assertEquals(19, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = NativeDB.stringToUtf8ByteArray("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.value_type((Function) null, 523);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.value_type(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Properties properties0 = new Properties();
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig(properties0);
      NativeDB nativeDB0 = new NativeDB("W2ivL\"2z9g)", "W2ivL\"2z9g)", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.value_text_utf8((Function) null, 766);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.value_text_utf8(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.value_long((Function) null, 99);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'long org.sqlite.core.NativeDB.value_long(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("pTqDFXF3", "select null as TABLE_CAT limit 0;", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.value_int((Function) null, 1);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.value_int(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "The Android Project", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.value_double((Function) null, (-1879048189));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'double org.sqlite.core.NativeDB.value_double(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("p", "F)+C Q+,$", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.value_blob((Function) null, 279);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'byte[] org.sqlite.core.NativeDB.value_blob(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.total_changes();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'long org.sqlite.core.NativeDB.total_changes()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB(" namQe: '", " namQe: '", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.step((-2267L));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.step(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.shared_cache(false);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.shared_cache(boolean)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.set_update_listener(true);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.set_update_listener(boolean)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.set_commit_listener(false);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.set_commit_listener(boolean)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        nativeDB0.result_text_utf8((-1L), byteArray0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_text_utf8(long, byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("\"seconds\": Read and store integer dates as seconds from the Unix Epoce (SQLite standard).\n\"milliseconds\": (DEFAULT)4ReaU and store integer dates as milliseconds from the Unix Epoch (Java standard).", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.result_null((-2147483648L));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_null(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("y--A{[WZ][wz0+", "y--A{[WZ][wz0+", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.result_long(1397L, 2011L);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_long(long, long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.result_int(0L, 686);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_int(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Properties properties0 = new Properties();
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig(properties0);
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, sQLiteConfig0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        nativeDB0.result_error_utf8(1506L, byteArray0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_error_utf8(long, byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Properties properties0 = new Properties();
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig(properties0);
      NativeDB nativeDB0 = new NativeDB("z[[)^wO", "z[[)^wO", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.result_double(1000L, 1000L);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_double(long, double)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("wq/W)$mwp[\" GBX", (String) null, (SQLiteConfig) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        nativeDB0.result_blob(0L, byteArray0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_blob(long, byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        nativeDB0.restore(byteArray0, byteArray0, (DB.ProgressObserver) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.restore(byte[], byte[], org.sqlite.core.DB$ProgressObserver)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.reset((-1865L));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.reset(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.register_progress_handler((-419), (ProgressHandler) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.register_progress_handler(int, org.sqlite.ProgressHandler)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.prepare_utf8((byte[]) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'long org.sqlite.core.NativeDB.prepare_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.limit((-1), 561);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.limit(int, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.libversion_utf8();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.libversion_utf8()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.interrupt();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.interrupt()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("from (", "from (", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.finalize((-1L));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.finalize(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("a\"z3x,4-X60C[m", "a\"z3x,4-X60C[m", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.errmsg_utf8();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.errmsg_utf8()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB(" raR8I", " raR8I", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.enable_load_extension(true);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.enable_load_extension(boolean)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Properties properties0 = new Properties();
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig(properties0);
      NativeDB nativeDB0 = new NativeDB("\"", "geNzad<MK9_", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.destroy_function_utf8((byte[]) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.destroy_function_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      try { 
        nativeDB0.destroy_function((String) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // invalid function name: 'null'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        nativeDB0.destroy_collation_utf8(byteArray0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.destroy_collation_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.destroy_collation("yyyy-MM-dd HH:mm:ss.SSS");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.destroy_collation_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "The Android Project", sQLiteConfig0);
      byte[] byteArray0 = new byte[2];
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nativeDB0.create_function_utf8(byteArray0, function0, (byte)0, (byte)2);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.create_function_utf8(byte[], org.sqlite.Function, int, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      try { 
        nativeDB0.create_function((String) null, function0, 2048, (-1577));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // invalid function name: 'null'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      Collation collation0 = mock(Collation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nativeDB0.create_collation_utf8((byte[]) null, collation0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.create_collation_utf8(byte[], org.sqlite.Collation)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "DriverManager [", sQLiteConfig0);
      try { 
        nativeDB0.create_collation((String) null, (Collation) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // invalid collation name: 'null'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("n%MQskUO", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_type((-1531L), 262);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.column_type(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_text_utf8(2812L, 0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.column_text_utf8(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_table_name_utf8(0L, (-2425));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.column_table_name_utf8(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_name_utf8((-2147483648L), 0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.column_name_utf8(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("EpF**:", "EpF**:", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_metadata(9);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'boolean[][] org.sqlite.core.NativeDB.column_metadata(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_long((-847L), (-575));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'long org.sqlite.core.NativeDB.column_long(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB((String) null, "-|`V.&%Fmsf", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_int((-2948L), (-2668));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.column_int(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_double((-5819L), (-44));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'double org.sqlite.core.NativeDB.column_double(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("p", "p", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_decltype_utf8((-476L), (-1));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.column_decltype_utf8(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_count(2201L);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.column_count(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_blob(0L, 1);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'byte[] org.sqlite.core.NativeDB.column_blob(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.clear_progress_handler();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.clear_progress_handler()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.clear_bindings(118L);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.clear_bindings(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB(",e\"Lb5DKTm", ",e\"Lb5DKTm", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.changes();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'long org.sqlite.core.NativeDB.changes()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.busy_timeout((-1994091956));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.busy_timeout(int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.busy_handler((BusyHandler) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.busy_handler(org.sqlite.BusyHandler)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("@9", "@9", sQLiteConfig0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        nativeDB0.bind_text_utf8(1101L, 2918, byteArray0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.bind_text_utf8(long, int, byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.bind_parameter_count(602L);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.bind_parameter_count(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.bind_null(0L, (-638));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.bind_null(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("z^=,", "z^=,", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.bind_long(3012, 3012, 3012);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.bind_long(long, int, long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.bind_int(1000L, 612, 612);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.bind_int(long, int, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.bind_double(14, (-5156), 14);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.bind_double(long, int, double)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("*v2Us2N", (String) null, sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.bind_blob(2861, 2861, (byte[]) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.bind_blob(long, int, byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        nativeDB0.backup(byteArray0, byteArray0, (DB.ProgressObserver) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.backup(byte[], byte[], org.sqlite.core.DB$ProgressObserver)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        nativeDB0._open_utf8(byteArray0, (-1396));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB._open_utf8(byte[], int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        nativeDB0._exec_utf8(byteArray0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB._exec_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "8<8uuDH;'Hw2-PV#Acc", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0._close();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB._close()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.result_error(1000L, "yyyy-MM-dd HH:mm:ss.SSS");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_error_utf8(long, byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = NativeDB.utf8ByteBufferToString((ByteBuffer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(65536);
      String string0 = NativeDB.utf8ByteBufferToString(byteBuffer0);
      assertNotNull(string0);
      assertEquals(0, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      try { 
        nativeDB0.destroy_collation("");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // invalid collation name: ''
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          try { 
            NativeDB.load();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/sqlite-3.39.3-00000000-0100-4000-8200-000003000000-libsqlitejdbc.so\" \"delete\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkDelete(SecurityManager.java:780)
             // java.base/java.io.File.deleteOnExit(File.java:1097)
             // org.sqlite.SQLiteJDBCLoader.extractAndLoadLibraryFile(SQLiteJDBCLoader.java:216)
             // org.sqlite.SQLiteJDBCLoader.loadSQLiteNativeLibrary(SQLiteJDBCLoader.java:350)
             // org.sqlite.SQLiteJDBCLoader.initialize(SQLiteJDBCLoader.java:68)
             // org.sqlite.core.NativeDB.load(NativeDB.java:63)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Properties properties0 = new Properties();
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig(properties0);
      NativeDB nativeDB0 = new NativeDB("Wb7~vdr91,[B7@mME", "Wb7~vdr91,[B7@mME", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.libversion();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.libversion_utf8()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("R3S\"3P5", "R3S\"3P5", sQLiteConfig0);
      long long0 = nativeDB0.getCommitListener();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("java.vm.vaendor", "java.vm.vaendor", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.bind_text((-2017L), 1989, "yyyy-MM-dd HH:mm:ss.SSS");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.bind_text_utf8(long, int, byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.value_text((Function) null, (-532));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.value_text_utf8(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB(" name: '", " name: '", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_name((-24L), (-1));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.column_name_utf8(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0._open("yyyy-MM-dd HH:mm:ss.SSS", 2866);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB._open_utf8(byte[], int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      long long0 = nativeDB0.getUpdateListener();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0._exec("yyyy-MM-dd HH:mm:ss.SSS");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB._exec_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("EpF**:", "EpF**:", sQLiteConfig0);
      long long0 = nativeDB0.getBusyHandler();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.backup("yyyy-MM-dd HH:mm:ss.SSS", (String) null, (DB.ProgressObserver) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.backup(byte[], byte[], org.sqlite.core.DB$ProgressObserver)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_decltype(758L, (-1968526675));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.column_decltype_utf8(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.result_text(0L, "yyyy-MM-dd HH:mm:ss.SSS");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_text_utf8(long, byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_table_name(1421L, (-1));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.column_table_name_utf8(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.destroy_function("yyyy-MM-dd HH:mm:ss.SSS");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.destroy_function_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.prepare("yyyy-MM-dd HH:mm:ss.SSS");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'long org.sqlite.core.NativeDB.prepare_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.errmsg();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.errmsg_utf8()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      try { 
        NativeDB.throwex("] [SQLite PREP] ");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // ] [SQLite PREP] 
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.create_collation("yyyy-MM-dd HH:mm:ss.SSS", (Collation) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.create_collation_utf8(byte[], org.sqlite.Collation)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      long long0 = nativeDB0.getProgressHandler();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("The Android Project", "The Android Project", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.restore("End of stream has been reached", "yyyy-MM-dd HH:mm:ss.SSS", (DB.ProgressObserver) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.restore(byte[], byte[], org.sqlite.core.DB$ProgressObserver)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("Set the 32-bit signed big-endian \"Application ID\" integer located at offset 68 into the database header. Applications that use SQLite as their application file-format should set the Application ID integer to a unique integer so that utilities such as file(1) can determine the specific file type rather than just reporting \"SQLite3 Database\"", "Set the 32-bit signed big-endian \"Application ID\" integer located at offset 68 into the database header. Applications that use SQLite as their application file-format should set the Application ID integer to a unique integer so that utilities such as file(1) can determine the specific file type rather than just reporting \"SQLite3 Database\"", sQLiteConfig0);
      try { 
        nativeDB0.destroy_collation("Set the 32-bit signed big-endian \"Application ID\" integer located at offset 68 into the database header. Applications that use SQLite as their application file-format should set the Application ID integer to a unique integer so that utilities such as file(1) can determine the specific file type rather than just reporting \"SQLite3 Database\"");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // invalid collation name: 'Set the 32-bit signed big-endian \"Application ID\" integer located at offset 68 into the database header. Applications that use SQLite as their application file-format should set the Application ID integer to a unique integer so that utilities such as file(1) can determine the specific file type rather than just reporting \"SQLite3 Database\"'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      NativeDB nativeDB0 = new NativeDB("yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS", sQLiteConfig0);
      // Undeclared exception!
      try { 
        nativeDB0.column_text((-1253), (-1253));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.column_text_utf8(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }
}
