/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 16:02:39 GMT 2022
 */

package org.sqlite.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.sqlite.SQLiteConfig;
import org.sqlite.core.DB;
import org.sqlite.core.NativeDB;
import org.sqlite.core.SafeStmtPtr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SafeStmtPtr_ESTest extends SafeStmtPtr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr((DB) null, 919L);
      SafeStmtPtr safeStmtPtr1 = new SafeStmtPtr((DB) null, (-1482L));
      boolean boolean0 = safeStmtPtr0.equals(safeStmtPtr1);
      assertFalse(safeStmtPtr1.equals((Object)safeStmtPtr0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-8L));
      try { 
        safeStmtPtr0.safeRunLong((SafeStmtPtr.SafePtrLongFunction<MockThrowable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.SafeStmtPtr", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, 2001L);
      try { 
        safeStmtPtr0.safeRunInt((SafeStmtPtr.SafePtrIntFunction<MockThrowable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.SafeStmtPtr", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-8L));
      try { 
        safeStmtPtr0.safeRunDouble((SafeStmtPtr.SafePtrDoubleFunction<MockThrowable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.SafeStmtPtr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-121L));
      try { 
        safeStmtPtr0.safeRun((SafeStmtPtr.SafePtrFunction<SafeStmtPtr, MockThrowable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.SafeStmtPtr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-8L));
      SafeStmtPtr.SafePtrLongFunction<MockThrowable> safeStmtPtr_SafePtrLongFunction0 = (SafeStmtPtr.SafePtrLongFunction<MockThrowable>) mock(SafeStmtPtr.SafePtrLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(safeStmtPtr_SafePtrLongFunction0).run(any(org.sqlite.core.DB.class) , anyLong());
      long long0 = safeStmtPtr0.safeRunLong(safeStmtPtr_SafePtrLongFunction0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-8L));
      SafeStmtPtr.SafePtrLongFunction<MockThrowable> safeStmtPtr_SafePtrLongFunction0 = (SafeStmtPtr.SafePtrLongFunction<MockThrowable>) mock(SafeStmtPtr.SafePtrLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(919L).when(safeStmtPtr_SafePtrLongFunction0).run(any(org.sqlite.core.DB.class) , anyLong());
      long long0 = safeStmtPtr0.safeRunLong(safeStmtPtr_SafePtrLongFunction0);
      assertEquals(919L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-1L));
      SafeStmtPtr.SafePtrIntFunction<MockThrowable> safeStmtPtr_SafePtrIntFunction0 = (SafeStmtPtr.SafePtrIntFunction<MockThrowable>) mock(SafeStmtPtr.SafePtrIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(safeStmtPtr_SafePtrIntFunction0).run(any(org.sqlite.core.DB.class) , anyLong());
      int int0 = safeStmtPtr0.safeRunInt(safeStmtPtr_SafePtrIntFunction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-1L));
      SafeStmtPtr.SafePtrIntFunction<MockThrowable> safeStmtPtr_SafePtrIntFunction0 = (SafeStmtPtr.SafePtrIntFunction<MockThrowable>) mock(SafeStmtPtr.SafePtrIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2579).when(safeStmtPtr_SafePtrIntFunction0).run(any(org.sqlite.core.DB.class) , anyLong());
      int int0 = safeStmtPtr0.safeRunInt(safeStmtPtr_SafePtrIntFunction0);
      assertEquals(2579, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-1L));
      SafeStmtPtr.SafePtrIntFunction<MockThrowable> safeStmtPtr_SafePtrIntFunction0 = (SafeStmtPtr.SafePtrIntFunction<MockThrowable>) mock(SafeStmtPtr.SafePtrIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2147086993)).when(safeStmtPtr_SafePtrIntFunction0).run(any(org.sqlite.core.DB.class) , anyLong());
      int int0 = safeStmtPtr0.safeRunInt(safeStmtPtr_SafePtrIntFunction0);
      assertEquals((-2147086993), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-8L));
      SafeStmtPtr.SafePtrDoubleFunction<MockThrowable> safeStmtPtr_SafePtrDoubleFunction0 = (SafeStmtPtr.SafePtrDoubleFunction<MockThrowable>) mock(SafeStmtPtr.SafePtrDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3716.13998).when(safeStmtPtr_SafePtrDoubleFunction0).run(any(org.sqlite.core.DB.class) , anyLong());
      double double0 = safeStmtPtr0.safeRunDouble(safeStmtPtr_SafePtrDoubleFunction0);
      assertEquals(3716.13998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-8L));
      SafeStmtPtr.SafePtrDoubleFunction<MockThrowable> safeStmtPtr_SafePtrDoubleFunction0 = (SafeStmtPtr.SafePtrDoubleFunction<MockThrowable>) mock(SafeStmtPtr.SafePtrDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-8L)).when(safeStmtPtr_SafePtrDoubleFunction0).run(any(org.sqlite.core.DB.class) , anyLong());
      double double0 = safeStmtPtr0.safeRunDouble(safeStmtPtr_SafePtrDoubleFunction0);
      assertEquals((-8.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-8L));
      SafeStmtPtr.SafePtrFunction<SafeStmtPtr, MockThrowable> safeStmtPtr_SafePtrFunction0 = (SafeStmtPtr.SafePtrFunction<SafeStmtPtr, MockThrowable>) mock(SafeStmtPtr.SafePtrFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(safeStmtPtr_SafePtrFunction0).run(any(org.sqlite.core.DB.class) , anyLong());
      SafeStmtPtr safeStmtPtr1 = safeStmtPtr0.safeRun(safeStmtPtr_SafePtrFunction0);
      assertNull(safeStmtPtr1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-8L));
      SafeStmtPtr.SafePtrFunction<SafeStmtPtr, MockThrowable> safeStmtPtr_SafePtrFunction0 = (SafeStmtPtr.SafePtrFunction<SafeStmtPtr, MockThrowable>) mock(SafeStmtPtr.SafePtrFunction.class, new ViolatedAssumptionAnswer());
      doReturn(safeStmtPtr0).when(safeStmtPtr_SafePtrFunction0).run(any(org.sqlite.core.DB.class) , anyLong());
      SafeStmtPtr safeStmtPtr1 = safeStmtPtr0.safeRun(safeStmtPtr_SafePtrFunction0);
      assertFalse(safeStmtPtr1.isClosed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr((DB) null, 86L);
      try { 
        safeStmtPtr0.safeRunConsume((SafeStmtPtr.SafePtrConsumer<MockThrowable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.SafeStmtPtr", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr((DB) null, 104L);
      // Undeclared exception!
      try { 
        safeStmtPtr0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.SafeStmtPtr", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr((DB) null, 978L);
      safeStmtPtr0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr((DB) null, 919L);
      SafeStmtPtr safeStmtPtr1 = new SafeStmtPtr((DB) null, 6332L);
      boolean boolean0 = safeStmtPtr0.equals(safeStmtPtr1);
      assertFalse(boolean0);
      assertFalse(safeStmtPtr1.equals((Object)safeStmtPtr0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SafeStmtPtr.SafePtrDoubleFunction<MockThrowable> safeStmtPtr_SafePtrDoubleFunction0 = (SafeStmtPtr.SafePtrDoubleFunction<MockThrowable>) mock(SafeStmtPtr.SafePtrDoubleFunction.class, new ViolatedAssumptionAnswer());
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr((DB) null, 1L);
      boolean boolean0 = safeStmtPtr0.equals(safeStmtPtr_SafePtrDoubleFunction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr((DB) null, 1L);
      boolean boolean0 = safeStmtPtr0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("}Ny$J@_", "}Ny$J@_", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-2239L));
      boolean boolean0 = safeStmtPtr0.equals(safeStmtPtr0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-8L));
      SafeStmtPtr safeStmtPtr1 = new SafeStmtPtr(nativeDB0, (-8L));
      boolean boolean0 = safeStmtPtr0.equals(safeStmtPtr1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("}Ny$J@_", "}Ny$J@_", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-2239L));
      SafeStmtPtr.SafePtrDoubleFunction<MockThrowable> safeStmtPtr_SafePtrDoubleFunction0 = (SafeStmtPtr.SafePtrDoubleFunction<MockThrowable>) mock(SafeStmtPtr.SafePtrDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(safeStmtPtr_SafePtrDoubleFunction0).run(any(org.sqlite.core.DB.class) , anyLong());
      double double0 = safeStmtPtr0.safeRunDouble(safeStmtPtr_SafePtrDoubleFunction0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("sqlite-jdbc-tmp-%d.db", "sqlite-jdbc-tmp-%d.db", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-8L));
      boolean boolean0 = safeStmtPtr0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("sqlite-jdbc-tmp-%d.db", "sqlite-jdbc-tmp-%d.db", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-8L));
      SafeStmtPtr.SafePtrConsumer<MockThrowable> safeStmtPtr_SafePtrConsumer0 = (SafeStmtPtr.SafePtrConsumer<MockThrowable>) mock(SafeStmtPtr.SafePtrConsumer.class, new ViolatedAssumptionAnswer());
      safeStmtPtr0.safeRunConsume(safeStmtPtr_SafePtrConsumer0);
      assertFalse(safeStmtPtr0.isClosed());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!\"'ZQ", "!\"'ZQ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-8L));
      SafeStmtPtr.SafePtrLongFunction<MockThrowable> safeStmtPtr_SafePtrLongFunction0 = (SafeStmtPtr.SafePtrLongFunction<MockThrowable>) mock(SafeStmtPtr.SafePtrLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-8L)).when(safeStmtPtr_SafePtrLongFunction0).run(any(org.sqlite.core.DB.class) , anyLong());
      long long0 = safeStmtPtr0.safeRunLong(safeStmtPtr_SafePtrLongFunction0);
      assertEquals((-8L), long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("}Ny$J@_", "}Ny$J@_", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-2239L));
      // Undeclared exception!
      try { 
        safeStmtPtr0.close();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.finalize(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }
}
