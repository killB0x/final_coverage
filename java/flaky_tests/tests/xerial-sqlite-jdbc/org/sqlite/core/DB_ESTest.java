/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 15:36:46 GMT 2022
 */

package org.sqlite.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.sqlite.BusyHandler;
import org.sqlite.Collation;
import org.sqlite.Function;
import org.sqlite.ProgressHandler;
import org.sqlite.SQLiteCommitListener;
import org.sqlite.SQLiteConfig;
import org.sqlite.SQLiteConnection;
import org.sqlite.SQLiteException;
import org.sqlite.SQLiteUpdateListener;
import org.sqlite.core.CoreStatement;
import org.sqlite.core.DB;
import org.sqlite.core.NativeDB;
import org.sqlite.core.SafeStmtPtr;
import org.sqlite.jdbc4.JDBC4Statement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DB_ESTest extends DB_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, (SQLiteConfig) null);
      SQLiteUpdateListener sQLiteUpdateListener0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        nativeDB0.executeUpdate((CoreStatement) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.DB", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, "_", (SQLiteConfig) null);
      String string0 = " when 'SET NULL' then ";
      // Undeclared exception!
      try { 
        nativeDB0.execute("_", true);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB._exec_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("Cl(-hNr@e9Q85;:", "", (SQLiteConfig) null);
      long long0 = 1000L;
      // Undeclared exception!
      try { 
        nativeDB0.exec("", false);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'long org.sqlite.core.NativeDB.prepare_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLiteException sQLiteException0 = DB.newSQLException(0, (String) null);
      assertEquals("org.sqlite.SQLiteException: [SQLITE_OK] Successful result (null)", sQLiteException0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, "E", (SQLiteConfig) null);
      String string0 = nativeDB0.getUrl();
      assertTrue(nativeDB0.isClosed());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("'J", "'J", (SQLiteConfig) null);
      nativeDB0.getUrl();
      assertTrue(nativeDB0.isClosed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("", "", (SQLiteConfig) null);
      nativeDB0.getUrl();
      assertTrue(nativeDB0.isClosed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("5Gm*)|u?LVS4DrQ'e", "5Gm*)|u?LVS4DrQ'e", (SQLiteConfig) null);
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nativeDB0.value_type(function0, 2000);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.value_type(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("H0;", "H0;", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.value_text((Function) null, 4549);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.value_text_utf8(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB(";", ";", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.value_long((Function) null, 0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'long org.sqlite.core.NativeDB.value_long(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("select null as TABLE_CAT, null as TABLE_SCHEM, '", "select null as TABLE_CAT, null as TABLE_SCHEM, '", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.value_int((Function) null, (-1));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.value_int(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("query returns results", "arb;=]Wxp9/u", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.value_double((Function) null, 100);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'double org.sqlite.core.NativeDB.value_double(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB(")", "A UNIQUE constraint failed", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.value_blob((Function) null, (-594));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'byte[] org.sqlite.core.NativeDB.value_blob(org.sqlite.Function, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("", "", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.total_changes();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'long org.sqlite.core.NativeDB.total_changes()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("", "", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.step(0L);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.step(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("When secure_delete is on, SQLite overwrites deleted content with zeros", "When secure_delete is on, SQLite overwrites deleted content with zeros", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.shared_cache(true);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.shared_cache(boolean)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("**6`]i;iio", "**6`]i;iio", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.result_text(0L, "**6`]i;iio");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_text_utf8(long, byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("wvE=sx", "wvE=sx", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.result_null((-918L));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_null(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("DriverManager [", "DriverManager [", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.result_long(423L, (-558L));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_long(long, long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("Qusl", "Qusl", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.result_int(0L, 483);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_int(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("jei16)", "jei16)", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.result_error(1L, "_E?wLgH%\"");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_error_utf8(long, byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("Cl(-hNr@e9Q85;:", (String) null, (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.result_double((-7L), (-7L));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_double(long, double)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, (SQLiteConfig) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        nativeDB0.result_blob(1943L, byteArray0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.result_blob(long, byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("Already added pointer to statements set", "Already added pointer to statements set", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.restore("Hf*HQ", "Hf*HQ", (DB.ProgressObserver) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.restore(byte[], byte[], org.sqlite.core.DB$ProgressObserver)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("unexpected param type: ", "unexpected param type: ", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.reset(4135L);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.reset(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("L", "L", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.register_progress_handler((-2491), (ProgressHandler) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.register_progress_handler(int, org.sqlite.ProgressHandler)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("8h)axE8Ig8", "8h)axE8Ig8", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.prepare((CoreStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.DB", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("musl", "musl", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.open("musl", (-24));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB._open_utf8(byte[], int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("^=tU]DkiWAQ< X", "^=tU]DkiWAQ< X", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.limit((-692), (-692));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.limit(int, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("", "", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.libversion();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.libversion_utf8()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("h<a,", "h<a,", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.interrupt();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.interrupt()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("0-#<2Q8Y $j.@,/e", "0-#<2Q8Y $j.@,/e", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.finalize((SafeStmtPtr) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("0*4*e]", "0*4*e]", (SQLiteConfig) null);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        nativeDB0.executeBatch((SafeStmtPtr) null, (-2327), objectArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.DB", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      NativeDB nativeDB0 = new NativeDB("_^BD,\"TYCrA->51kZW", "_^BD,\"TYCrA->51kZW", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.execute(jDBC4Statement0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.DB", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("0-#<2Q8 $.@,/e", "0-#<2Q8 $.@,/e", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.enable_load_extension(true);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.enable_load_extension(boolean)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, (SQLiteConfig) null);
      try { 
        nativeDB0.destroy_function("");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // invalid function name: ''
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("'J", "'J", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.destroy_function("'J");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.destroy_function_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("", "", (SQLiteConfig) null);
      try { 
        nativeDB0.destroy_collation("");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // invalid collation name: ''
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.destroy_collation("t(R!Q0]RNkuX[a1");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.destroy_collation_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("", "", (SQLiteConfig) null);
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      try { 
        nativeDB0.create_function("", function0, 2576, 2576);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // invalid function name: ''
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("yL&_$nAz0 yT", "yL&_$nAz0 yT", (SQLiteConfig) null);
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nativeDB0.create_function("yL&_$nAz0 yT", function0, 2048, 2048);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.create_function_utf8(byte[], org.sqlite.Function, int, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("", "", (SQLiteConfig) null);
      try { 
        nativeDB0.create_collation("", (Collation) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // invalid collation name: ''
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB(";", ";", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.create_collation(";", (Collation) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.create_collation_utf8(byte[], org.sqlite.Collation)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("J", "J", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.column_type(0L, (-1103));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.column_type(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("q%`VO>:q", "q%`VO>:q", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.column_text((-492), (-492));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.column_text_utf8(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("default_cache_size", "default_cache_size", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.column_table_name((-2759L), (-294));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.column_table_name_utf8(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.column_names((-1042L));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.column_count(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("&^i|iICb<K", "&^i|iICb<K", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.column_name((-57L), (-1));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.column_name_utf8(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("default_cache_size", "default_cache_size", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.column_long((-1L), 264);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'long org.sqlite.core.NativeDB.column_long(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB(")bgz='r06fvX.7@5%", ")bgz='r06fvX.7@5%", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.column_int(1312L, 481);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.column_int(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("assertion failure: param count (", "assertion failure: param count (", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.column_double(1L, (-2311));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'double org.sqlite.core.NativeDB.column_double(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("Un5Iknon tye: ", "Un5Iknon tye: ", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.column_decltype((-1321L), 1803);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.column_decltype_utf8(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("*T'H{eAH.5~>x}D6Y4x", "*T'H{eAH.5~>x}D6Y4x", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.column_count((-574L));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.column_count(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB(";", ";", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.column_blob((-1938L), 42);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'byte[] org.sqlite.core.NativeDB.column_blob(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("m1!W", "m1!W", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.clear_progress_handler();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.clear_progress_handler()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("J", "J", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.clear_bindings((-179L));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.clear_bindings(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("default_cache_size", "default_cache_size", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.changes();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'long org.sqlite.core.NativeDB.changes()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.busy_timeout(0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.busy_timeout(int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("begin;", "begin;", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.busy_handler((BusyHandler) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.busy_handler(org.sqlite.BusyHandler)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("Unknon tye: ", "Unknon tye: ", (SQLiteConfig) null);
      DB.ProgressObserver dB_ProgressObserver0 = mock(DB.ProgressObserver.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nativeDB0.backup("Unknon tye: ", "Unknon tye: ", dB_ProgressObserver0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.backup(byte[], byte[], org.sqlite.core.DB$ProgressObserver)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("d<a~", "d<a~", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0._exec("d<a~");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB._exec_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLiteException sQLiteException0 = DB.newSQLException(13, ": query returns results");
      assertEquals("[SQLITE_FULL] Insertion failed because database is full (: query returns results)", sQLiteException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLiteException sQLiteException0 = DB.newSQLException((-1128), "~jZsSipyz)B");
      assertEquals("[UNKNOWN_ERROR] unknown error:-1128 (~jZsSipyz)B)", sQLiteException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, (SQLiteConfig) null);
      nativeDB0.removeUpdateListener((SQLiteUpdateListener) null);
      assertTrue(nativeDB0.isClosed());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, 122L);
      Object[] objectArray0 = new Object[3];
      try { 
        nativeDB0.executeBatch(safeStmtPtr0, 0, objectArray0, false);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // count (0) < 1
         //
         verifyException("org.sqlite.core.DB", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, (String) null, (SQLiteConfig) null);
      SQLiteUpdateListener sQLiteUpdateListener0 = mock(SQLiteUpdateListener.class, new ViolatedAssumptionAnswer());
      JDBC4Statement jDBC4Statement0 = new JDBC4Statement((SQLiteConnection) null);
      // Undeclared exception!
      try { 
        nativeDB0.prepare(jDBC4Statement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.core.DB", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "}cENEA!O";
      NativeDB nativeDB0 = new NativeDB("}cENEA!O", "fu", (SQLiteConfig) null);
      int int0 = (-2620);
      // Undeclared exception!
      try { 
        nativeDB0.throwex((-2620));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.errmsg_utf8()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("J", "J", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, 510L);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        nativeDB0.executeBatch(safeStmtPtr0, 489, objectArray0, true);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.bind_parameter_count(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("Cl(-hNr@e9Q85;:", "", (SQLiteConfig) null);
      nativeDB0.ensureAutoCommit(false);
      long long0 = 0L;
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("!{", "!{", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.ensureAutoCommit(true);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'long org.sqlite.core.NativeDB.prepare_utf8(byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("J", "$VALUES", (SQLiteConfig) null);
      nativeDB0.onUpdate(0, "unexpected param type: ", "J", 0);
      SQLiteUpdateListener sQLiteUpdateListener0 = mock(SQLiteUpdateListener.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, "_", (SQLiteConfig) null);
      SQLiteCommitListener sQLiteCommitListener0 = mock(SQLiteCommitListener.class, new ViolatedAssumptionAnswer());
      nativeDB0.removeCommitListener(sQLiteCommitListener0);
      String string0 = "yq%6poKJ";
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("J", "J", (SQLiteConfig) null);
      long long0 = 0L;
      SQLiteCommitListener sQLiteCommitListener0 = mock(SQLiteCommitListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nativeDB0.addCommitListener(sQLiteCommitListener0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.set_commit_listener(boolean)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "_";
      NativeDB nativeDB0 = new NativeDB((String) null, "_", (SQLiteConfig) null);
      SQLiteUpdateListener sQLiteUpdateListener0 = mock(SQLiteUpdateListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nativeDB0.addUpdateListener(sQLiteUpdateListener0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB.set_update_listener(boolean)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("default_cache_size", "default_cache_size", (SQLiteConfig) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      try { 
        nativeDB0.sqlbind(19, 19, mockThrowable0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // unexpected param type: class org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.sqlite.core.DB", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("", "", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.sqlbind((-804), (-804), (Object) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.bind_null(long, int)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("begin;", "begin;", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.sqlbind((-2289), (-2289), "begin;");
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.bind_text_utf8(long, int, byte[])'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("default_cache_size", "default_cache_size", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-1L));
      nativeDB0.commit = safeStmtPtr0;
      // Undeclared exception!
      try { 
        nativeDB0.close();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.finalize(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("unexpected param type: ", "unexpected param type: ", (SQLiteConfig) null);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, (-2921L));
      nativeDB0.begin = safeStmtPtr0;
      // Undeclared exception!
      try { 
        nativeDB0.close();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.finalize(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB((String) null, "z", (SQLiteConfig) null);
      long long0 = 3654L;
      // Undeclared exception!
      try { 
        nativeDB0.close();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'void org.sqlite.core.NativeDB._close()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "z";
      NativeDB nativeDB0 = new NativeDB("Cl(-hNr@e9Q85;:", "z", (SQLiteConfig) null);
      nativeDB0.onCommit(false);
      SafeStmtPtr safeStmtPtr0 = new SafeStmtPtr(nativeDB0, 1000L);
      // Undeclared exception!
      try { 
        nativeDB0.finalize(safeStmtPtr0, (-1420L));
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.finalize(long)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("Unknon tye: ", "Unknon tye: ", (SQLiteConfig) null);
      boolean boolean0 = nativeDB0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "z";
      try { 
        DB.throwex(0, "");
        fail("Expecting exception: SQLiteException");
      
      } catch(SQLiteException e) {
         //
         // [SQLITE_OK] Successful result ()
         //
         verifyException("org.sqlite.core.DB", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("J", "$VALUES", (SQLiteConfig) null);
      // Undeclared exception!
      try { 
        nativeDB0.throwex();
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'java.nio.ByteBuffer org.sqlite.core.NativeDB.errmsg_utf8()'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      NativeDB nativeDB0 = new NativeDB("Unknon tye: ", "Unknon tye: ", (SQLiteConfig) null);
      nativeDB0.getConfig();
      assertTrue(nativeDB0.isClosed());
  }
}
