/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 16:19:45 GMT 2022
 */

package org.sqlite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.SQLiteErrorCode;
import org.sqlite.SQLiteException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLiteException_ESTest extends SQLiteException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SQLiteException sQLiteException0 = null;
      try {
        sQLiteException0 = new SQLiteException((String) null, (SQLiteErrorCode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SQLiteErrorCode sQLiteErrorCode0 = SQLiteErrorCode.SQLITE_NOTICE_RECOVER_WAL;
      SQLiteException sQLiteException0 = new SQLiteException("9.,>h~f&gxMHPa+p+=", sQLiteErrorCode0);
      SQLiteErrorCode sQLiteErrorCode1 = sQLiteException0.getResultCode();
      assertSame(sQLiteErrorCode0, sQLiteErrorCode1);
  }
}
