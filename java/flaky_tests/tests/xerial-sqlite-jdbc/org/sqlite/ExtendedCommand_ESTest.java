/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 15:59:22 GMT 2022
 */

package org.sqlite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLException;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.ExtendedCommand;
import org.sqlite.SQLiteConfig;
import org.sqlite.core.DB;
import org.sqlite.core.NativeDB;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExtendedCommand_ESTest extends ExtendedCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExtendedCommand.RestoreCommand extendedCommand_RestoreCommand0 = new ExtendedCommand.RestoreCommand("", "select null as TABLE_SCHEM, null as TABLE_CATALOG limit 0;");
      Properties properties0 = new Properties();
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig(properties0);
      NativeDB nativeDB0 = new NativeDB((String) null, "q8", sQLiteConfig0);
      // Undeclared exception!
      try { 
        extendedCommand_RestoreCommand0.execute(nativeDB0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // 'int org.sqlite.core.NativeDB.restore(byte[], byte[], org.sqlite.core.DB$ProgressObserver)'
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExtendedCommand.SQLExtension extendedCommand_SQLExtension0 = ExtendedCommand.parse("gb0^jk");
      assertNull(extendedCommand_SQLExtension0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExtendedCommand.SQLExtension extendedCommand_SQLExtension0 = ExtendedCommand.parse("");
      assertNull(extendedCommand_SQLExtension0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = ExtendedCommand.removeQuotation("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      try { 
        ExtendedCommand.RestoreCommand.parse("\"'GAsL0%LbUWsXGn=7");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // syntax error: \"'GAsL0%LbUWsXGn=7
         //
         verifyException("org.sqlite.ExtendedCommand$RestoreCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        ExtendedCommand.BackupCommand.parse("Maximum number of bytes that are set aside for memory-mapped I/O on a single database");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // syntax error: Maximum number of bytes that are set aside for memory-mapped I/O on a single database
         //
         verifyException("org.sqlite.ExtendedCommand$BackupCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        ExtendedCommand.RestoreCommand.parse((String) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // syntax error: null
         //
         verifyException("org.sqlite.ExtendedCommand$RestoreCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        ExtendedCommand.BackupCommand.parse((String) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // syntax error: null
         //
         verifyException("org.sqlite.ExtendedCommand$BackupCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = ExtendedCommand.removeQuotation("' t' wsUp>n '");
      assertEquals(" t' wsUp>n ", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExtendedCommand.removeQuotation("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = ExtendedCommand.removeQuotation("\"'GAsL0LbUWsXGn=7");
      assertEquals("\"'GAsL0LbUWsXGn=7", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = ExtendedCommand.removeQuotation((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = ExtendedCommand.removeQuotation("'GAsL0%LbUWsXGn=7");
      assertEquals("'GAsL0%LbUWsXGn=7", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        ExtendedCommand.parse("restore");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // syntax error: restore
         //
         verifyException("org.sqlite.ExtendedCommand$RestoreCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        ExtendedCommand.parse("backup");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // syntax error: backup
         //
         verifyException("org.sqlite.ExtendedCommand$BackupCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExtendedCommand.SQLExtension extendedCommand_SQLExtension0 = ExtendedCommand.parse("*N/Rp");
      assertNull(extendedCommand_SQLExtension0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExtendedCommand.SQLExtension extendedCommand_SQLExtension0 = ExtendedCommand.parse((String) null);
      assertNull(extendedCommand_SQLExtension0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExtendedCommand.SQLExtension extendedCommand_SQLExtension0 = ExtendedCommand.parse("Maximum number of bytes that are set aside for memory-mapped I/O on a single database");
      assertNull(extendedCommand_SQLExtension0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExtendedCommand extendedCommand0 = new ExtendedCommand();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExtendedCommand.BackupCommand extendedCommand_BackupCommand0 = new ExtendedCommand.BackupCommand("\"'GAsL0LbUWsXGn=7", "\"'GAsL0LbUWsXGn=7");
      // Undeclared exception!
      try { 
        extendedCommand_BackupCommand0.execute((DB) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.ExtendedCommand$BackupCommand", e);
      }
  }
}
