/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 16:07:04 GMT 2022
 */

package org.sqlite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.DriverPropertyInfo;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.JDBC;
import org.sqlite.SQLiteConnection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDBC_ESTest extends JDBC_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = JDBC.extractAddress("#K8!0eOtQ<7LxsZa>2n");
      assertEquals("xsZa>2n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = JDBC.extractAddress("jdbc:sqlite:");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDBC jDBC0 = new JDBC();
      boolean boolean0 = jDBC0.acceptsURL("jdbc:sqlite:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDBC.extractAddress(">}2gwff!+r5");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDBC.extractAddress((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.JDBC", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Properties properties0 = new Properties();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(properties0, integer0);
      properties0.putAll(hashMap0);
      // Undeclared exception!
      try { 
        JDBC.createConnection("jdbc:sqlite:page_size", properties0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDBC.createConnection("jdbc:sqlite:", (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDBC jDBC0 = new JDBC();
      // Undeclared exception!
      try { 
        jDBC0.connect("jdbc:sqlite:jdbc:sqljte:drg.sqlt=.d", (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Properties properties0 = new Properties();
      SQLiteConnection sQLiteConnection0 = JDBC.createConnection((String) null, properties0);
      assertNull(sQLiteConnection0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Properties properties0 = new Properties();
          try { 
            JDBC.createConnection("jdbc:sqlite:", properties0);
            fail("Expecting exception: SQLException");
          
          } catch(SQLException e) {
             //
             // Error opening connection
             //
             verifyException("org.sqlite.SQLiteConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = JDBC.isValidURL("w_-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = JDBC.isValidURL("jdbc:sqlite:org.sqlite.jdbc");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = JDBC.isValidURL((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDBC jDBC0 = new JDBC();
      Properties properties0 = new Properties();
      Connection connection0 = jDBC0.connect("ommR$\"uPHyhO>,ook", properties0);
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDBC jDBC0 = new JDBC();
      boolean boolean0 = jDBC0.jdbcCompliant();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDBC jDBC0 = new JDBC();
      Properties properties0 = new Properties();
      DriverPropertyInfo[] driverPropertyInfoArray0 = jDBC0.getPropertyInfo("ommR$\"uPHyhO>,ook", properties0);
      assertEquals(52, driverPropertyInfoArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDBC jDBC0 = new JDBC();
      int int0 = jDBC0.getMinorVersion();
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          JDBC jDBC0 = new JDBC();
          Properties properties0 = new Properties();
          try { 
            jDBC0.connect("jdbc:sqlite:nbi2\"9jyte0xl,o?*y", properties0);
            fail("Expecting exception: SQLException");
          
          } catch(SQLException e) {
             //
             // Error opening connection
             //
             verifyException("org.sqlite.SQLiteConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDBC jDBC0 = new JDBC();
      boolean boolean0 = jDBC0.acceptsURL((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDBC jDBC0 = new JDBC();
      Logger logger0 = jDBC0.getParentLogger();
      assertNull(logger0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDBC jDBC0 = new JDBC();
      int int0 = jDBC0.getMajorVersion();
      assertEquals(3, int0);
  }
}
