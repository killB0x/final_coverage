/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 15:48:28 GMT 2022
 */

package org.sqlite.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.util.OSInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OSInfo_ESTest extends OSInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = OSInfo.translateOSNameToFolderName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = OSInfo.translateArchNameToFolderName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = OSInfo.getHardwareName();
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        OSInfo.translateOSNameToFolderName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.util.OSInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        OSInfo.translateArchNameToFolderName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.util.OSInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        OSInfo.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.util.OSInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = OSInfo.getArchName();
      assertEquals("x86_64", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = OSInfo.isMusl();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = OSInfo.isAndroid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = OSInfo.getOSName();
      assertEquals("Linux", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = OSInfo.translateOSNameToFolderName("arm");
      assertEquals("arm", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = OSInfo.translateOSNameToFolderName("AIX");
      assertEquals("AIX", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = OSInfo.translateOSNameToFolderName("Darwin");
      assertEquals("Mac", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = OSInfo.translateOSNameToFolderName("Mac");
      assertEquals("Mac", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = OSInfo.translateOSNameToFolderName("Windows");
      assertEquals("Windows", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "--arch";
      OSInfo.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "--os";
      OSInfo.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      OSInfo.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[0];
      OSInfo.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = OSInfo.resolveArmArchType();
      assertEquals("arm", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = OSInfo.getNativeLibFolderPathForCurrentOS();
      assertEquals("Linux/x86_64", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = OSInfo.translateArchNameToFolderName("arm");
      assertEquals("arm", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OSInfo oSInfo0 = new OSInfo();
  }
}
