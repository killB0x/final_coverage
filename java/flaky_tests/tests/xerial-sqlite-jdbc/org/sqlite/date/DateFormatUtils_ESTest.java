/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 16:21:47 GMT 2022
 */

package org.sqlite.date;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.sqlite.date.DateFormatUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateFormatUtils_ESTest extends DateFormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1634, 1015, 0);
      Locale locale0 = Locale.CANADA;
      String string0 = DateFormatUtils.formatUTC((Date) mockDate0, "S", locale0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      String string0 = DateFormatUtils.formatUTC(853L, "6& ", locale0);
      assertEquals("6& ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(69, (-3501), (-1183), (-481), (-481), 14);
      Locale locale0 = Locale.JAPAN;
      String string0 = DateFormatUtils.format((Date) mockDate0, "'T'HH:mm:ss", (TimeZone) null, locale0);
      assertEquals("T14:59:14", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-2690), 0, 0, 1266);
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = DateFormatUtils.format((Date) mockDate0, "Z", timeZone0);
      assertEquals("+0000", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = new Locale("3 %1%\"", "{");
      String string0 = DateFormatUtils.format((Date) mockDate0, "'T'HH:mm:ss", locale0);
      assertEquals("T20:21:21", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = DateFormatUtils.format((Calendar) null, "+0000", timeZone0, (Locale) null);
      assertEquals("+0000", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(19, "yyyy-MM-dd");
      String string0 = DateFormatUtils.format(calendar0, "yyyy-MM-dd", (TimeZone) simpleTimeZone0);
      assertEquals("2014-02-14", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = new Locale("y)vSMYOH'CA 8");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      String string0 = DateFormatUtils.format((Calendar) mockGregorianCalendar0, "yyyy-MM-ddZZ", locale0);
      assertEquals("2014-02-14+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = DateFormatUtils.format(1L, "EEE, dd MMM yyyy HH:mm:ss Z", timeZone0);
      assertEquals("Thu, 01 Jan 1970 00:00:00 +0000", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = DateFormatUtils.format((-2480L), ",", locale0);
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC((Date) null, "*|K]", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.forLanguageTag("org.sqlite.date.FastDatePrinter$TwoDigitYearField");
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC((Date) mockDate0, (String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC((Date) mockDate0, "Unparseable date: \"", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC((Date) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC((Date) null, "EEE, dd MMM yyyy HH:mm:ss Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC((Date) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC((Date) null, "DL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC(872L, "", locale0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC(1994L, (String) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC((-1319L), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC((-1L), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC((-3065L), "org.sqlite.date.FastDatePrinter$TwentyFourHourField");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(715, "");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) null, "", (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) null, "(Z|(?:[+-]d{2}))", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1007L);
      Locale locale0 = new Locale(">CZHT)5z^XZ)b78&", ">CZHT)5z^XZ)b78&", ">CZHT)5z^XZ)b78&");
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) mockDate0, ">CZHT)5z^XZ)b78&", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ZZ");
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) null, "ZZ", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "`&q5};", 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 16);
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) mockDate0, (String) null, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("j)%gyIk[0/UJ");
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) null, "j)%gyIk[0/UJ", timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) mockDate0, "", locale0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) null, "yyyy-MM-dd'T'HH:mm:ss", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) mockDate0, ">q=A", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) mockDate0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) null, "<$h14$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) null, "o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Calendar) mockGregorianCalendar0, "", timeZone0, locale0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("w");
      Locale locale0 = Locale.KOREAN;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      // Undeclared exception!
      try { 
        DateFormatUtils.format(calendar0, (String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, (-1), 858);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Calendar) mockGregorianCalendar0, "", timeZone0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Calendar) null, "yyyy-MM-ddZZ", timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.date.FastDatePrinter$PaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(182, (-1), 182);
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Calendar) mockGregorianCalendar0, (String) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Calendar) mockGregorianCalendar0, "", locale0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Calendar) null, (String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        DateFormatUtils.format(calendar0, "9 Qb1ZI><pziu9k%B)", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        DateFormatUtils.format(calendar0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Calendar) null, "'T'HH:mm:ss");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.date.FastDatePrinter$TwoDigitNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Calendar) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        DateFormatUtils.format(calendar0, "}A+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        DateFormatUtils.format(1L, "", timeZone0, locale0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        DateFormatUtils.format(1L, (String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\" does not match ");
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        DateFormatUtils.format(0L, "\" does not match ", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        DateFormatUtils.format((-13L), (String) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        DateFormatUtils.format(0L, "\"/HBHM L", timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      // Undeclared exception!
      try { 
        DateFormatUtils.format((-496L), "", locale0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        DateFormatUtils.format(0L, "&GMT", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.format(1811L, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.format(1243L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.format(0L, "e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.US;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      // Undeclared exception!
      try { 
        DateFormatUtils.format(calendar0, "QmvAoBU=?+Oz", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 1, 1, 1);
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) mockDate0, (String) null, (TimeZone) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) mockDate0, "", (TimeZone) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        DateFormatUtils.format(calendar0, "@`/iAGN8Fs85xo;Wc", timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      String string0 = DateFormatUtils.format((Date) mockDate0, "yyyy-MM-dd'T'HH:mm:ss");
      assertEquals("1899-12-31T00:00:00", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = DateFormatUtils.format((Calendar) mockGregorianCalendar0, "yyyy-MM-dd'T'HH:mm:ss");
      assertEquals("2014-02-14T20:21:21", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC(877L, "Z[Bm{5f", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.sqlite.date.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtils.format((long) 69, "", (TimeZone) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateFormatUtils dateFormatUtils0 = new DateFormatUtils();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Calendar) null, "EEE, dd MMM yyyy HH:mm:ss Z", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.date.FastDatePrinter$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        DateFormatUtils.format((Date) mockDate0, (String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = DateFormatUtils.formatUTC(0L, "yyyy-MM-dd'T'HH:mm:ss");
      assertEquals("1970-01-01T00:00:00", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2480L));
      String string0 = DateFormatUtils.formatUTC((Date) mockDate0, ",");
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        DateFormatUtils.format(0L, (String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.sqlite.date.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        DateFormatUtils.formatUTC((Date) null, "", locale0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K");
      String string0 = DateFormatUtils.format(784L, "K", timeZone0, (Locale) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = DateFormatUtils.format(0L, "EEE, dd MMM yyyy HH:mm:ss Z");
      assertEquals("Thu, 01 Jan 1970 00:00:00 +0000", string0);
  }
}
