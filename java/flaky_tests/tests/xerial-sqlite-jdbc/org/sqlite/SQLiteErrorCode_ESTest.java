/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 16:12:51 GMT 2022
 */

package org.sqlite;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.SQLiteErrorCode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLiteErrorCode_ESTest extends SQLiteErrorCode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SQLiteErrorCode[] sQLiteErrorCodeArray0 = SQLiteErrorCode.values();
      assertEquals(106, sQLiteErrorCodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SQLiteErrorCode sQLiteErrorCode0 = SQLiteErrorCode.valueOf("SQLITE_IOERR_VNODE");
      assertEquals(SQLiteErrorCode.SQLITE_IOERR_VNODE, sQLiteErrorCode0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SQLiteErrorCode sQLiteErrorCode0 = SQLiteErrorCode.getErrorCode(0);
      assertEquals(SQLiteErrorCode.SQLITE_OK, sQLiteErrorCode0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SQLiteErrorCode sQLiteErrorCode0 = SQLiteErrorCode.getErrorCode(1596);
      assertEquals(SQLiteErrorCode.UNKNOWN_ERROR, sQLiteErrorCode0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SQLiteErrorCode sQLiteErrorCode0 = SQLiteErrorCode.SQLITE_CORRUPT_INDEX;
      String string0 = sQLiteErrorCode0.toString();
      assertEquals("[SQLITE_CORRUPT_INDEX] SQLite detected an entry is or was missing from an index", string0);
  }
}
