/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 16:12:01 GMT 2022
 */

package org.sqlite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.sql.SQLFeatureNotSupportedException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.SQLiteConfig;
import org.sqlite.SQLiteDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLiteDataSource_ESTest extends SQLiteDataSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      Class<Object> class0 = Object.class;
      sQLiteDataSource0.isWrapperFor(class0);
      assertEquals("jdbc:sqlite:", sQLiteDataSource0.getUrl());
      assertEquals(1, sQLiteDataSource0.getLoginTimeout());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.getConnection("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setLockingMode("|%GxU]1je");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.sqlite.SQLiteConfig.LockingMode.|%GxU]1je
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setIncrementalVacuum(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setEncoding((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteConfig$Encoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setJournalSizeLimit(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      sQLiteDataSource0.setLoginTimeout(1941);
      assertEquals(1941, sQLiteDataSource0.getLoginTimeout());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setUserVersion((-1017));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setFullSync(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setRecursiveTriggers(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setPageSize(342);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setCountChanges(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      sQLiteDataSource0.setDatabaseName("org.sqlite.SQLiteDataSource");
      assertEquals(1, sQLiteDataSource0.getLoginTimeout());
      assertEquals("jdbc:sqlite:", sQLiteDataSource0.getUrl());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setDefaultCacheSize((-2262));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setCacheSize(2369);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      int int0 = sQLiteDataSource0.getLoginTimeout();
      assertEquals("jdbc:sqlite:", sQLiteDataSource0.getUrl());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      sQLiteDataSource0.getConfig();
      assertEquals(1, sQLiteDataSource0.getLoginTimeout());
      assertEquals("jdbc:sqlite:", sQLiteDataSource0.getUrl());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      sQLiteDataSource0.getLogWriter();
      assertEquals("jdbc:sqlite:", sQLiteDataSource0.getUrl());
      assertEquals(1, sQLiteDataSource0.getLoginTimeout());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setTempStore("Bc}8b?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.sqlite.SQLiteConfig.TempStore.Bc}8b?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setLegacyFileFormat(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setReverseUnorderedSelects(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setReadUncommited(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setFullColumnNames(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      assertEquals("jdbc:sqlite:", sQLiteDataSource0.getUrl());
      
      sQLiteDataSource0.setUrl("Oa");
      assertEquals(1, sQLiteDataSource0.getLoginTimeout());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setEnforceForeignKeys(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      String string0 = sQLiteDataSource0.getUrl();
      assertEquals(1, sQLiteDataSource0.getLoginTimeout());
      assertEquals("jdbc:sqlite:", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      Class<Object> class0 = Object.class;
      SQLiteDataSource sQLiteDataSource1 = (SQLiteDataSource)sQLiteDataSource0.unwrap(class0);
      assertEquals("jdbc:sqlite:", sQLiteDataSource1.getUrl());
      assertEquals(1, sQLiteDataSource1.getLoginTimeout());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setTempStoreDirectory("B'&y*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      Class<Integer> class0 = Integer.class;
      sQLiteDataSource0.isWrapperFor(class0);
      assertEquals(1, sQLiteDataSource0.getLoginTimeout());
      assertEquals("jdbc:sqlite:", sQLiteDataSource0.getUrl());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setSynchronous((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      try { 
        sQLiteDataSource0.getParentLogger();
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // getParentLogger
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setLoadExtension(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      sQLiteDataSource0.getDatabaseName();
      assertEquals("jdbc:sqlite:", sQLiteDataSource0.getUrl());
      assertEquals(1, sQLiteDataSource0.getLoginTimeout());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setCaseSensitiveLike(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      sQLiteDataSource0.setConfig((SQLiteConfig) null);
      assertEquals(1, sQLiteDataSource0.getLoginTimeout());
      assertEquals("jdbc:sqlite:", sQLiteDataSource0.getUrl());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
      assertEquals("jdbc:sqlite:", sQLiteDataSource0.getUrl());
      assertEquals(1, sQLiteDataSource0.getLoginTimeout());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setTransactionMode("wQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setReadOnly(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setMaxPageCount(63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setJournalMode("WuLfNPGQ)Lx<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.sqlite.SQLiteConfig.JournalMode.WuLfNPGQ)Lx<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      sQLiteDataSource0.setLogWriter((PrintWriter) null);
      assertEquals(1, sQLiteDataSource0.getLoginTimeout());
      assertEquals("jdbc:sqlite:", sQLiteDataSource0.getUrl());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setSharedCache(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource((SQLiteConfig) null);
      // Undeclared exception!
      try { 
        sQLiteDataSource0.setShortColumnNames(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sqlite.SQLiteDataSource", e);
      }
  }
}
