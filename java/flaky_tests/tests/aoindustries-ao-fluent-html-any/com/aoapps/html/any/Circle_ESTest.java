/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 19:23:15 GMT 2022
 */

package com.aoapps.html.any;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aoapps.html.any.Circle;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.PathIterator;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Circle_ESTest extends Circle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Circle circle0 = new Circle(1052087, 2136, 2136);
      boolean boolean0 = circle0.intersects((-535.582767648), (-535.582767648), (double) 1052087, (double) 1052087);
      assertEquals(1052087, circle0.getX());
      assertEquals(2136, circle0.getY());
      assertEquals(2136, circle0.getRadius());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Circle circle0 = new Circle((-5625), 0, 0);
      circle0.contains(2691.0, (-129.0));
      assertEquals(0, circle0.getY());
      assertEquals((-5625), circle0.getX());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Circle circle0 = new Circle(7, 7, (-341));
      Circle circle1 = new Circle(7, 7, 7);
      boolean boolean0 = circle1.equals(circle0);
      assertEquals(7, circle1.getRadius());
      assertEquals(7, circle0.getY());
      assertEquals(7, circle1.getX());
      assertFalse(circle0.equals((Object)circle1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Circle circle0 = new Circle(0, 0, 2504);
      Circle circle1 = new Circle(0, 2117, 0);
      boolean boolean0 = circle1.equals(circle0);
      assertFalse(boolean0);
      assertEquals(2117, circle1.getY());
      assertEquals(0, circle1.getRadius());
      assertEquals(0, circle1.getX());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Circle circle0 = new Circle(2405, 2405, 2405);
      Circle circle1 = new Circle(3079, 3079, 3079);
      circle0.equals(circle1);
      assertEquals(3079, circle1.getY());
      assertEquals(3079, circle1.getX());
      assertEquals(3079, circle1.getRadius());
      assertEquals(2405, circle0.getY());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Circle circle0 = new Circle((-1), (-1), (-1));
      circle0.hashCode();
      assertEquals((-1), circle0.getX());
      assertEquals((-1), circle0.getY());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Circle circle0 = new Circle(524288, 1, 524288);
      assertEquals(524288, circle0.getX());
      assertEquals(524288, circle0.getRadius());
      assertEquals(1, circle0.getY());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Circle circle0 = new Circle(2618, 1048576, 0);
      assertEquals(1048576, circle0.getY());
      assertEquals(0, circle0.getRadius());
      assertEquals(2618, circle0.getX());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Circle circle0 = new Circle(1701016, (-2022), 1701016);
      assertEquals(1701016, circle0.getX());
      assertEquals(1701016, circle0.getRadius());
      assertEquals((-2022), circle0.getY());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Circle circle0 = new Circle(0, 2618, (-1048576));
      assertEquals(2618, circle0.getY());
      assertEquals((-1048576), circle0.getRadius());
      assertEquals(0, circle0.getX());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Circle circle0 = new Circle(0, 2374, 1);
      Rectangle2D rectangle2D0 = circle0.getBounds2D();
      boolean boolean0 = circle0.intersects(rectangle2D0);
      assertEquals(2375.0, rectangle2D0.getMaxY(), 0.01);
      assertEquals(1, circle0.getRadius());
      assertEquals(1.0, rectangle2D0.getMaxX(), 0.01);
      assertEquals(2374, circle0.getY());
      assertEquals(0, circle0.getX());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Circle circle0 = new Circle(0, 0, 37);
      circle0.intersects((double) 0, 98.0, 0.0, (double) 37);
      assertEquals(37, circle0.getRadius());
      assertEquals(0, circle0.getY());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Circle circle0 = new Circle(1825, 1825, 3581);
      int int0 = circle0.getY();
      assertEquals(1825, int0);
      assertEquals(1825, circle0.getX());
      assertEquals(3581, circle0.getRadius());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Circle circle0 = new Circle(3511, (-1579), 0);
      int int0 = circle0.getY();
      assertEquals(0, circle0.getRadius());
      assertEquals(3511, circle0.getX());
      assertEquals((-1579), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Circle circle0 = new Circle(0, 1, 0);
      int int0 = circle0.getX();
      assertEquals(1, circle0.getY());
      assertEquals(0, circle0.getRadius());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Circle circle0 = new Circle((-1329), 43, (-2582));
      int int0 = circle0.getX();
      assertEquals(43, circle0.getY());
      assertEquals((-1329), int0);
      assertEquals((-2582), circle0.getRadius());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Circle circle0 = new Circle(2, 0, 0);
      circle0.getRadius();
      assertEquals(0, circle0.getY());
      assertEquals(2, circle0.getX());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Circle circle0 = new Circle((-1703), (-1703), (-1703));
      int int0 = circle0.getRadius();
      assertEquals((-1703), int0);
      assertEquals((-1703), circle0.getX());
      assertEquals((-1703), circle0.getY());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Circle circle0 = new Circle((-3087), 839, (-3087));
      AffineTransform affineTransform0 = new AffineTransform(3166.3F, 3166.3F, (-1797.8F), 1.0F, 0.0F, (float) 0);
      PathIterator pathIterator0 = circle0.getPathIterator(affineTransform0, (double) 3926.0F);
      assertEquals(839, circle0.getY());
      assertTrue(pathIterator0.isDone());
      assertEquals((-3087), circle0.getRadius());
      assertEquals((-3087), circle0.getX());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Circle circle0 = new Circle(2405, 2405, 2405);
      PathIterator pathIterator0 = circle0.getPathIterator((AffineTransform) null, (double) 2405);
      assertFalse(pathIterator0.isDone());
      assertEquals(2405, circle0.getRadius());
      assertEquals(2405, circle0.getX());
      assertEquals(2405, circle0.getY());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Circle circle0 = new Circle(1048576, 702, 4272);
      Ellipse2D ellipse2D0 = circle0.getEllipse();
      assertEquals(1052848.0, ellipse2D0.getMaxX(), 0.01);
      assertEquals(1048576, circle0.getX());
      assertEquals(4974.0, ellipse2D0.getMaxY(), 0.01);
      assertEquals(702, circle0.getY());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Circle circle0 = new Circle(839, 1909, 1909);
      Ellipse2D ellipse2D0 = circle0.getEllipse();
      assertEquals(3818.0, ellipse2D0.getMaxY(), 0.01);
      assertEquals(2748.0, ellipse2D0.getMaxX(), 0.01);
      assertEquals(1909, circle0.getY());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Circle circle0 = new Circle((-3087), (-53), (-3087));
      Ellipse2D ellipse2D0 = circle0.getEllipse();
      assertEquals((-3087), circle0.getRadius());
      assertEquals((-3140.0), ellipse2D0.getMaxY(), 0.01);
      assertEquals((-53), circle0.getY());
      assertEquals((-3087.0), ellipse2D0.getCenterX(), 0.01);
      assertEquals((-3087), circle0.getX());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Circle circle0 = new Circle(0, 0, 0);
      Ellipse2D ellipse2D0 = circle0.getEllipse();
      assertEquals(0.0, ellipse2D0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Circle circle0 = new Circle(0, (-940), 0);
      Rectangle2D rectangle2D0 = circle0.getBounds2D();
      assertEquals((-940.0), rectangle2D0.getMaxY(), 0.01);
      assertEquals((-940), circle0.getY());
      assertEquals(0, circle0.getX());
      assertEquals(0.0, rectangle2D0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Circle circle0 = new Circle((-5625), 0, 0);
      Rectangle2D rectangle2D0 = circle0.getBounds2D();
      assertEquals(0.0, rectangle2D0.getCenterY(), 0.01);
      assertEquals((-5625), circle0.getX());
      assertEquals((-5625.0), rectangle2D0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Circle circle0 = new Circle((-3386), (-3386), (-524288));
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)circle0.getBounds2D();
      assertEquals((-3386), circle0.getX());
      assertEquals((-3386), circle0.getY());
      assertEquals((-524288), circle0.getRadius());
      assertEquals(520902.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-527674.0), rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Circle circle0 = new Circle(397, 397, 0);
      Rectangle rectangle0 = circle0.getBounds();
      assertEquals(397, circle0.getX());
      assertEquals(397.0, rectangle0.getMaxY(), 0.01);
      assertEquals(397.0, rectangle0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Circle circle0 = new Circle(2, 0, 0);
      Rectangle rectangle0 = circle0.getBounds();
      boolean boolean0 = circle0.intersects((Rectangle2D) rectangle0);
      assertEquals(0, circle0.getRadius());
      assertEquals(0, circle0.getY());
      assertEquals(0, rectangle0.y);
      assertEquals(2, circle0.getX());
      assertEquals(2.0, rectangle0.getMaxX(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Circle circle0 = new Circle((-3087), (-3087), 839);
      Rectangle rectangle0 = circle0.getBounds();
      assertEquals((-3087), circle0.getX());
      assertEquals((-3087), circle0.getY());
      assertEquals((-2248.0), rectangle0.getMaxY(), 0.01);
      assertEquals(839, circle0.getRadius());
      assertEquals((-2248.0), rectangle0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Circle circle0 = new Circle(0, 0, 0);
      Rectangle rectangle0 = circle0.getBounds();
      assertEquals(0, circle0.getRadius());
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Circle circle0 = new Circle(0, 0, 37);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      boolean boolean0 = circle0.contains((Rectangle2D) rectangle0);
      assertEquals(0, circle0.getY());
      assertEquals(0, circle0.getX());
      assertTrue(boolean0);
      assertEquals(37, circle0.getRadius());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Circle circle0 = new Circle(2419, 2419, 2419);
      Rectangle2D rectangle2D0 = circle0.getBounds2D();
      circle0.contains(rectangle2D0);
      assertEquals(2419, circle0.getRadius());
      assertEquals(4838.0, rectangle2D0.getMaxY(), 0.01);
      assertEquals(4838.0, rectangle2D0.getMaxX(), 0.01);
      assertEquals(2419, circle0.getY());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Circle circle0 = new Circle(5013, 5013, 5013);
      Point point0 = new Point(5013, 1);
      boolean boolean0 = circle0.contains((Point2D) point0);
      assertEquals(5013, circle0.getY());
      assertTrue(boolean0);
      assertEquals(5013, circle0.getRadius());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Circle circle0 = new Circle(432023, 432023, 432023);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      circle0.contains((Point2D) point2D_Double0);
      assertEquals(432023, circle0.getY());
      assertEquals(432023, circle0.getX());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Circle circle0 = new Circle((-253), (-253), 26578);
      boolean boolean0 = circle0.contains((double) (-253), (double) (-253), (-3160.6), 0.0);
      assertEquals((-253), circle0.getX());
      assertTrue(boolean0);
      assertEquals(26578, circle0.getRadius());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Circle circle0 = new Circle(2, 2, 2);
      int int0 = circle0.getX();
      assertEquals(2, circle0.getY());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Circle circle0 = new Circle(0, 0, 0);
      int int0 = circle0.getY();
      assertEquals(0, circle0.getRadius());
      assertEquals(0, int0);
      assertEquals(0, circle0.getX());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Circle circle0 = new Circle(0, 0, 90);
      int int0 = circle0.getRadius();
      assertEquals(0, circle0.getY());
      assertEquals(90, int0);
      assertEquals(0, circle0.getX());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Circle circle0 = new Circle(0, 0, 0);
      Circle circle1 = new Circle(0, 0, 0);
      boolean boolean0 = circle0.equals(circle1);
      assertTrue(boolean0);
      assertEquals(0, circle1.getRadius());
      assertEquals(0, circle1.getX());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Circle circle0 = new Circle(7, 7, 7);
      Circle circle1 = new Circle(7, 0, 7);
      boolean boolean0 = circle1.equals(circle0);
      assertEquals(7, circle1.getRadius());
      assertEquals(7, circle0.getY());
      assertEquals(7, circle1.getX());
      assertFalse(boolean0);
      assertEquals(0, circle1.getY());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Circle circle0 = new Circle((-1874), (-341), (-341));
      Circle circle1 = new Circle((-1048576), (-1), 0);
      boolean boolean0 = circle0.equals(circle1);
      assertEquals((-1), circle1.getY());
      assertEquals(0, circle1.getRadius());
      assertFalse(boolean0);
      assertEquals((-1048576), circle1.getX());
      assertEquals((-341), circle0.getRadius());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Circle circle0 = new Circle(2405, 2405, 2405);
      boolean boolean0 = circle0.equals((Object) null);
      assertEquals(2405, circle0.getRadius());
      assertEquals(2405, circle0.getY());
      assertEquals(2405, circle0.getX());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Circle circle0 = new Circle(2403, 2403, 2403);
      circle0.equals(circle0);
      assertEquals(2403, circle0.getY());
      assertEquals(2403, circle0.getX());
      assertEquals(2403, circle0.getRadius());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Circle circle0 = new Circle(1701016, 1701016, 1701016);
      assertEquals(1701016, circle0.getY());
      assertEquals(1701016, circle0.getRadius());
      assertEquals(1701016, circle0.getX());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Circle circle0 = new Circle((-1048615), (-1048615), (-1048615));
      assertEquals((-1048615), circle0.getY());
      assertEquals((-1048615), circle0.getX());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Circle circle0 = new Circle((-1048576), 1966, (-1048576));
      assertEquals(1966, circle0.getY());
      assertEquals((-1048576), circle0.getRadius());
      assertEquals((-1048576), circle0.getX());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Circle circle0 = new Circle((-1048917), 26578, 26578);
      assertEquals(26578, circle0.getY());
      assertEquals((-1048917), circle0.getX());
      assertEquals(26578, circle0.getRadius());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Circle circle0 = new Circle(2405, 2405, 2405);
      String string0 = circle0.toString();
      assertEquals("com.aoapps.html.any.Circle[x=2405,y=2405,radius=2405]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Circle circle0 = new Circle(4, 4, 4);
      // Undeclared exception!
      try { 
        circle0.contains((Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Circle circle0 = new Circle(2419, 2419, 2419);
      // Undeclared exception!
      try { 
        circle0.intersects((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Circle circle0 = new Circle(0, (-1048576), 0);
      AffineTransform affineTransform0 = new AffineTransform();
      PathIterator pathIterator0 = circle0.getPathIterator(affineTransform0);
      assertEquals(0, circle0.getX());
      assertEquals((-1048576), circle0.getY());
      assertFalse(pathIterator0.isDone());
      assertEquals(0, circle0.getRadius());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Circle circle0 = new Circle(2419, 2419, 2419);
      // Undeclared exception!
      try { 
        circle0.contains((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Circle circle0 = new Circle(2361, 0, 0);
      circle0.contains((double) 2361, 28.450626, (-1.0), (-3425.1557));
      assertEquals(2361, circle0.getX());
      assertEquals(0, circle0.getY());
      assertEquals(0, circle0.getRadius());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Circle circle0 = new Circle(2405, 2405, 2405);
      boolean boolean0 = circle0.contains((double) 2405, (double) 2405);
      assertTrue(boolean0);
      assertEquals(2405, circle0.getY());
      assertEquals(2405, circle0.getRadius());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Circle circle0 = new Circle(0, 0, (-341));
      Circle circle1 = new Circle(0, 0, 0);
      boolean boolean0 = circle0.equals(circle1);
      assertEquals((-341), circle0.getRadius());
      assertEquals(0, circle1.getX());
      assertFalse(boolean0);
      assertEquals(0, circle0.getY());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Circle circle0 = new Circle((-3765), (-3765), (-3765));
      // Undeclared exception!
      try { 
        circle0.getPathIterator((AffineTransform) null, (double) (-3765));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // flatness must be >= 0
         //
         verifyException("java.awt.geom.FlatteningPathIterator", e);
      }
  }
}
