/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 12:41:06 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleAdditionOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.DoubleVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider;
import java.lang.reflect.Array;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericAdditionOperator_ESTest extends GenericAdditionOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Double double0 = new Double((-997.8876646969215));
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 2);
      termArray0[0] = (Term<Double>) constantTerm0;
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("dV9c5[vCF^#S");
      termArray0[1] = (Term<Double>) genericVariable0;
      DoubleAdditionOperator doubleAdditionOperator0 = new DoubleAdditionOperator(constantTerm0, termArray0);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        doubleAdditionOperator0.evaluate(doubleVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 'null' parameter found for operation/function '+' and parameters 'java.lang.Double@0000000007', 'null'
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Double double0 = new Double((-3262.5870975925736));
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 2);
      DoubleAdditionOperator doubleAdditionOperator0 = new DoubleAdditionOperator(constantTerm0, termArray0);
      String string0 = doubleAdditionOperator0.getOperatorName();
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Double double0 = new Double((-997.8876646969215));
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 2);
      termArray0[0] = (Term<Double>) constantTerm0;
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("dV9c5[vCF^#S");
      termArray0[1] = (Term<Double>) genericVariable0;
      DoubleAdditionOperator doubleAdditionOperator0 = new DoubleAdditionOperator(constantTerm0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = formulaEvaluatorConfiguration0.setPlusMinusNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>(hashMap0);
      Double double1 = doubleAdditionOperator0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration1);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Double double0 = new Double((-3262.5870975925736));
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 2);
      termArray0[0] = (Term<Double>) constantTerm0;
      termArray0[1] = (Term<Double>) constantTerm0;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = formulaEvaluatorConfiguration0.setPlusMinusNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>(hashMap0);
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("com.github.dkellenb.formulaevaluator.term.operator.GenericMultiplicationOperation");
      DoubleAdditionOperator doubleAdditionOperator0 = new DoubleAdditionOperator(genericVariable0, termArray0);
      Double double1 = doubleAdditionOperator0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration1);
      assertEquals((-6525.174195185147), (double)double1, 0.01);
      assertNotNull(double1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("");
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 1);
      termArray0[0] = (Term<Double>) genericVariable0;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      DoubleAdditionOperator doubleAdditionOperator0 = new DoubleAdditionOperator(genericVariable0, termArray0);
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      formulaEvaluatorConfiguration0.setPlusMinusNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>(hashMap0);
      Double double0 = doubleAdditionOperator0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration0);
      assertNull(double0);
  }
}
