/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:11:34 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.definition;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.dkellenb.formulaevaluator.definition.Operator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Operator_ESTest extends Operator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Operator operator0 = new Operator((String) null, 199, true);
      boolean boolean0 = operator0.isLeftAssoc();
      assertTrue(boolean0);
      assertEquals(199, operator0.getPrecedence());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Operator operator0 = new Operator((String) null, 199, true);
      int int0 = operator0.getPrecedence();
      assertTrue(operator0.isLeftAssoc());
      assertEquals(199, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Operator operator0 = new Operator("", (-2303), false);
      int int0 = operator0.getPrecedence();
      assertEquals((-2303), int0);
      assertFalse(operator0.isLeftAssoc());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Operator operator0 = new Operator((String) null, 199, true);
      operator0.getOperatorName();
      assertEquals(199, operator0.getPrecedence());
      assertTrue(operator0.isLeftAssoc());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Operator operator0 = new Operator("", (-2303), false);
      operator0.getOperatorName();
      assertEquals((-2303), operator0.getPrecedence());
      assertFalse(operator0.isLeftAssoc());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Operator operator0 = new Operator("", (-2303), false);
      boolean boolean0 = operator0.MINUS.equals(operator0);
      assertEquals((-2303), operator0.getPrecedence());
      assertFalse(operator0.isLeftAssoc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Operator operator0 = new Operator("%", 0, false);
      boolean boolean0 = operator0.GREATER_EQUAL.equals((Object) null);
      assertEquals(0, operator0.getPrecedence());
      assertFalse(operator0.isLeftAssoc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Operator operator0 = new Operator("6\"R", 0, false);
      Operator operator1 = Operator.GREATER_EQUAL;
      boolean boolean0 = operator0.GREATER_EQUAL.equals(operator1);
      assertFalse(operator0.isLeftAssoc());
      assertTrue(boolean0);
      assertFalse(operator1.equals((Object)operator0));
      assertEquals(0, operator0.getPrecedence());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Operator operator0 = new Operator("6\"R", 0, false);
      boolean boolean0 = operator0.MULTIPLY.equals("6\"R");
      assertFalse(boolean0);
      assertEquals(0, operator0.getPrecedence());
      assertFalse(operator0.isLeftAssoc());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Operator operator0 = new Operator("6\"R", 0, false);
      int int0 = operator0.getPrecedence();
      assertEquals(0, int0);
      assertFalse(operator0.isLeftAssoc());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Operator operator0 = new Operator("6\"R", 0, false);
      operator0.SMALLER_EQUAL.hashCode();
      assertFalse(operator0.isLeftAssoc());
      assertEquals(0, operator0.getPrecedence());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Operator operator0 = new Operator("6\"R", 0, false);
      boolean boolean0 = operator0.isLeftAssoc();
      assertFalse(boolean0);
      assertEquals(0, operator0.getPrecedence());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Operator operator0 = new Operator("iJ3>GIos'jCF>i/{g", (-1711), false);
      operator0.getOperatorName();
      assertEquals((-1711), operator0.getPrecedence());
      assertFalse(operator0.isLeftAssoc());
  }
}
