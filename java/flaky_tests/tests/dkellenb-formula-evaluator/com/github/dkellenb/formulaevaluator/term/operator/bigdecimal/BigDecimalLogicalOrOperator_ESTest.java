/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 12:51:45 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.bigdecimal;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalLogicalOrOperator;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigDecimalLogicalOrOperator_ESTest extends BigDecimalLogicalOrOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("w`07tie");
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 7);
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal0 = new BigDecimal(1830);
      Integer integer0 = Integer.getInteger("rMoUc^DGh#!OdbX3Mo", 0);
      bigDecimalVariableValueProvider0.with("w`07tie", integer0);
      BigDecimal bigDecimal1 = genericVariable0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
      BigDecimalLogicalOrOperator bigDecimalLogicalOrOperator0 = new BigDecimalLogicalOrOperator(genericVariable0, termArray0);
      BigDecimal bigDecimal2 = bigDecimalLogicalOrOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal1, bigDecimal0);
      assertEquals((byte)1, bigDecimal2.byteValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 6);
      BigDecimalLogicalOrOperator bigDecimalLogicalOrOperator0 = new BigDecimalLogicalOrOperator(termArray0[2], termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = bigDecimalLogicalOrOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 3);
      BigDecimalLogicalOrOperator bigDecimalLogicalOrOperator0 = new BigDecimalLogicalOrOperator(termArray0[2], termArray0);
      String string0 = bigDecimalLogicalOrOperator0.getOperatorName();
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 4);
      BigDecimalLogicalOrOperator bigDecimalLogicalOrOperator0 = new BigDecimalLogicalOrOperator(termArray0[2], termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = bigDecimalLogicalOrOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
  }
}
