/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 12:44:08 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSubtractionOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleSubtractionOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.DoubleVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericSubtractionOperator_ESTest extends GenericSubtractionOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = new Double(1761.77730371);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 4);
      termArray0[0] = (Term<Double>) constantTerm0;
      termArray0[1] = (Term<Double>) constantTerm0;
      termArray0[2] = (Term<Double>) constantTerm0;
      termArray0[3] = (Term<Double>) constantTerm0;
      DoubleSubtractionOperator doubleSubtractionOperator0 = new DoubleSubtractionOperator(constantTerm0, termArray0);
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      Double double1 = doubleSubtractionOperator0.evaluate(doubleVariableValueProvider0, formulaEvaluatorConfiguration0);
      assertEquals((-5285.331911130001), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("e");
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 8);
      BigDecimalSubtractionOperator bigDecimalSubtractionOperator0 = new BigDecimalSubtractionOperator(genericVariable0, termArray0);
      String string0 = bigDecimalSubtractionOperator0.getOperatorName();
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = formulaEvaluatorConfiguration0.setPlusMinusNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("e");
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 8);
      termArray0[0] = (Term<BigDecimal>) genericVariable0;
      termArray0[1] = (Term<BigDecimal>) genericVariable0;
      termArray0[2] = (Term<BigDecimal>) genericVariable0;
      termArray0[3] = (Term<BigDecimal>) genericVariable0;
      termArray0[4] = (Term<BigDecimal>) genericVariable0;
      BigDecimal bigDecimal0 = new BigDecimal(2272L);
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      termArray0[5] = (Term<BigDecimal>) constantTerm0;
      termArray0[6] = (Term<BigDecimal>) genericVariable0;
      termArray0[7] = (Term<BigDecimal>) genericVariable0;
      BigDecimalSubtractionOperator bigDecimalSubtractionOperator0 = new BigDecimalSubtractionOperator(genericVariable0, termArray0);
      GenericInitOnlyVariableValueProvider<BigDecimal> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<BigDecimal>(hashMap0);
      BigDecimal bigDecimal1 = bigDecimalSubtractionOperator0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration1);
      assertNotNull(bigDecimal1);
      assertEquals((short) (-2272), bigDecimal1.shortValue());
  }
}
