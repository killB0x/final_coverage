/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 14:14:46 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.doubletype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleAdditionOperator;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleAdditionOperator_ESTest extends DoubleAdditionOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 7);
      DoubleAdditionOperator doubleAdditionOperator0 = new DoubleAdditionOperator((Term<Double>) null, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = new Double((-5889.72992));
      Double double1 = doubleAdditionOperator0.zero();
      Double double2 = doubleAdditionOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double1);
      assertEquals((-5889.72992), (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("com.github.dkellenb.formulaevaluator.term.value.ConstantTerm");
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 1);
      DoubleAdditionOperator doubleAdditionOperator0 = new DoubleAdditionOperator(genericVariable0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = new Double(0.0);
      Double double1 = doubleAdditionOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("?3o>2dq%o)cu");
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 3);
      DoubleAdditionOperator doubleAdditionOperator0 = new DoubleAdditionOperator(genericVariable0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = doubleAdditionOperator0.one();
      Double double1 = doubleAdditionOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double0);
      assertEquals(2.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 7);
      DoubleAdditionOperator doubleAdditionOperator0 = new DoubleAdditionOperator(termArray0[2], termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        doubleAdditionOperator0.calculateDefault(formulaEvaluatorConfiguration0, (Double) null, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleAdditionOperator", e);
      }
  }
}
