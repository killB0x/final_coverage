/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:11:16 GMT 2022
 */

package com.github.dkellenb.formulaevaluator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormulaEvaluatorConfiguration_ESTest extends FormulaEvaluatorConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(true);
      formulaEvaluatorConfiguration0.setResultPrecision(3);
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      formulaEvaluatorConfiguration0.setCalculationPrecision(0);
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(true);
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
      
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      formulaEvaluatorConfiguration0.setResultScale(0);
      formulaEvaluatorConfiguration0.setPlusMinusNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      assertEquals(0, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      formulaEvaluatorConfiguration0.setResultScale((-2973));
      formulaEvaluatorConfiguration0.setPlusMinusNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      assertEquals((-2973), formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(true);
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = formulaEvaluatorConfiguration0.getPlusMinusNullHandling();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
      
      formulaEvaluatorConfiguration0.setResultScale(0);
      formulaEvaluatorConfiguration0.setMultiplicationNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      assertEquals(0, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      formulaEvaluatorConfiguration0.setResultScale((-126));
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = formulaEvaluatorConfiguration0.getPlusMinusNullHandling();
      formulaEvaluatorConfiguration0.setMultiplicationNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      assertEquals((-126), formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      formulaEvaluatorConfiguration0.setResultScale((-406));
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      formulaEvaluatorConfiguration0.setDivisionNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      assertEquals((-406), formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
      
      formulaEvaluatorConfiguration0.setResultScale(0);
      FormulaEvaluatorConfiguration.DivisionByZeroHandling formulaEvaluatorConfiguration_DivisionByZeroHandling0 = FormulaEvaluatorConfiguration.DivisionByZeroHandling.NULL;
      formulaEvaluatorConfiguration0.setDivisionByZeroHandling(formulaEvaluatorConfiguration_DivisionByZeroHandling0);
      assertEquals(0, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      formulaEvaluatorConfiguration0.setResultScale((-23));
      FormulaEvaluatorConfiguration.DivisionByZeroHandling formulaEvaluatorConfiguration_DivisionByZeroHandling0 = FormulaEvaluatorConfiguration.DivisionByZeroHandling.NULL;
      formulaEvaluatorConfiguration0.setDivisionByZeroHandling(formulaEvaluatorConfiguration_DivisionByZeroHandling0);
      assertEquals((-23), formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
      
      formulaEvaluatorConfiguration0.setResultScale(0);
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.ZERO;
      formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      assertEquals(0, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      formulaEvaluatorConfiguration0.setResultScale((-23));
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.ZERO;
      formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      assertEquals((-23), formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
      
      formulaEvaluatorConfiguration0.setResultScale(0);
      Class<? extends Number> class0 = formulaEvaluatorConfiguration0.getBaseType();
      formulaEvaluatorConfiguration0.setBaseCalculationType(class0);
      assertEquals(0, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      formulaEvaluatorConfiguration0.isModifiable();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(false);
      formulaEvaluatorConfiguration0.isModifiable();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
      
      formulaEvaluatorConfiguration0.setResultScale(0);
      int int0 = formulaEvaluatorConfiguration0.getResultScale();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
      
      formulaEvaluatorConfiguration0.setResultScale((-1));
      int int0 = formulaEvaluatorConfiguration0.getResultScale();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(false);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setRoundingMode(roundingMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to modify an unmodifiable evaluator configuration
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setResultPrecision((-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Digits < 0
         //
         verifyException("java.math.MathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(false);
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setPrecision((-3908));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to modify an unmodifiable evaluator configuration
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setPrecision((-1498));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Digits < 0
         //
         verifyException("java.math.MathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      formulaEvaluatorConfiguration0.setUnmodifiable();
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.INHERIT;
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setPlusMinusNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to modify an unmodifiable evaluator configuration
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(false);
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.INHERIT;
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setMultiplicationNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to modify an unmodifiable evaluator configuration
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      formulaEvaluatorConfiguration0.setUnmodifiable();
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = formulaEvaluatorConfiguration0.getDivisionNullHandling();
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setDivisionNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to modify an unmodifiable evaluator configuration
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(false);
      FormulaEvaluatorConfiguration.DivisionByZeroHandling formulaEvaluatorConfiguration_DivisionByZeroHandling0 = FormulaEvaluatorConfiguration.DivisionByZeroHandling.ONE;
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setDivisionByZeroHandling(formulaEvaluatorConfiguration_DivisionByZeroHandling0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to modify an unmodifiable evaluator configuration
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(false);
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.EXCEPTION;
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to modify an unmodifiable evaluator configuration
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(false);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setBaseCalculationType(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to modify an unmodifiable evaluator configuration
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = null;
      try {
        formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration((FormulaEvaluatorConfiguration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(true);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setBaseCalculationType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only BigDecimal or Double as base calculation types are supported
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(true);
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = formulaEvaluatorConfiguration0.setDivisionNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      assertEquals(7, formulaEvaluatorConfiguration1.getResultScale());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      formulaEvaluatorConfiguration0.getResultMathContext();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(true);
      formulaEvaluatorConfiguration0.setPrecision(0);
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      formulaEvaluatorConfiguration0.setUnmodifiable();
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setCalculationPrecision((-1546));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to modify an unmodifiable evaluator configuration
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(true);
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = formulaEvaluatorConfiguration0.getPlusMinusNullHandling();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
      
      formulaEvaluatorConfiguration0.setResultScale(0);
      formulaEvaluatorConfiguration0.setDivisionNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      assertEquals(0, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.DivisionByZeroHandling formulaEvaluatorConfiguration_DivisionByZeroHandling0 = FormulaEvaluatorConfiguration.DivisionByZeroHandling.NULL;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = formulaEvaluatorConfiguration0.setDivisionByZeroHandling(formulaEvaluatorConfiguration_DivisionByZeroHandling0);
      assertEquals(7, formulaEvaluatorConfiguration1.getResultScale());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      formulaEvaluatorConfiguration0.setResultScale((-23));
      Class<? extends Number> class0 = formulaEvaluatorConfiguration0.getBaseType();
      formulaEvaluatorConfiguration0.setBaseCalculationType(class0);
      assertEquals((-23), formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Class<? extends Number> class0 = formulaEvaluatorConfiguration0.getBaseType();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = formulaEvaluatorConfiguration0.setBaseCalculationType(class0);
      assertEquals(7, formulaEvaluatorConfiguration1.getResultScale());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = new FormulaEvaluatorConfiguration(formulaEvaluatorConfiguration0);
      assertEquals(7, formulaEvaluatorConfiguration1.getResultScale());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      formulaEvaluatorConfiguration0.getDivisionByZeroHandling();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(true);
      formulaEvaluatorConfiguration0.getCalculationMathContext();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.ZERO;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      assertEquals(7, formulaEvaluatorConfiguration1.getResultScale());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      int int0 = formulaEvaluatorConfiguration0.getResultScale();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(false);
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setResultPrecision((-1065));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to modify an unmodifiable evaluator configuration
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(true);
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = formulaEvaluatorConfiguration0.setMultiplicationNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      assertEquals(7, formulaEvaluatorConfiguration1.getResultScale());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(true);
      formulaEvaluatorConfiguration0.getDefaultNullHandling();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        formulaEvaluatorConfiguration0.setCalculationPrecision((-1546));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Digits < 0
         //
         verifyException("java.math.MathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.INHERIT;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = formulaEvaluatorConfiguration0.setPlusMinusNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      assertEquals(7, formulaEvaluatorConfiguration1.getResultScale());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(true);
      formulaEvaluatorConfiguration0.getMultiplicationNullHandling();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(true);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      formulaEvaluatorConfiguration0.setRoundingMode(roundingMode0);
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
  }
}
