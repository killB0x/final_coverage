/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 14:05:31 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.doubletype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleMultiplicationOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleMultiplicationOperator_ESTest extends DoubleMultiplicationOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Double double0 = new Double(0.0);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 7);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      DoubleMultiplicationOperator doubleMultiplicationOperator0 = new DoubleMultiplicationOperator(constantTerm0, termArray0);
      Double double1 = doubleMultiplicationOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("");
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 5);
      Double double0 = new Double(1.0);
      DoubleMultiplicationOperator doubleMultiplicationOperator0 = new DoubleMultiplicationOperator(genericVariable0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double1 = doubleMultiplicationOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double0);
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Double double0 = new Double(0.0);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 7);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      DoubleMultiplicationOperator doubleMultiplicationOperator0 = new DoubleMultiplicationOperator(constantTerm0, termArray0);
      Double double1 = new Double((-1955.114876631));
      Double double2 = new Double(3584.2192169225427);
      Double double3 = doubleMultiplicationOperator0.calculateDefault(formulaEvaluatorConfiguration0, double1, double2);
      assertEquals((-7007560.312111977), (double)double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 10);
      DoubleMultiplicationOperator doubleMultiplicationOperator0 = new DoubleMultiplicationOperator(termArray0[0], termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        doubleMultiplicationOperator0.calculateDefault(formulaEvaluatorConfiguration0, (Double) null, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleMultiplicationOperator", e);
      }
  }
}
