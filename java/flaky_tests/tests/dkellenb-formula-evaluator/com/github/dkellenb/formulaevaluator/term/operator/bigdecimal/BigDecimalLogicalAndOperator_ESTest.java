/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 12:58:21 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.bigdecimal;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalLogicalAndOperator;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigDecimalLogicalAndOperator_ESTest extends BigDecimalLogicalAndOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 4);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(termArray0[1], termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      BigDecimal bigDecimal2 = bigDecimalLogicalAndOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal1);
      assertEquals((short)0, bigDecimal2.shortValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 10);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(termArray0[1], termArray0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = bigDecimalLogicalAndOperator0.calculateDefault((FormulaEvaluatorConfiguration) null, bigDecimal0, bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 6);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(termArray0[1], termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = bigDecimalLogicalAndOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 5);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(termArray0[1], termArray0);
      String string0 = bigDecimalLogicalAndOperator0.getOperatorName();
      assertEquals("&&", string0);
  }
}
