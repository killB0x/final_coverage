/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:24:40 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.bigdecimal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalModuloOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigDecimalModuloOperator_ESTest extends BigDecimalModuloOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-2517.5704484688044));
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      BigDecimalModuloOperator bigDecimalModuloOperator0 = new BigDecimalModuloOperator(constantTerm0, constantTerm0);
      boolean boolean0 = bigDecimalModuloOperator0.isZero(bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalModuloOperator bigDecimalModuloOperator0 = new BigDecimalModuloOperator(genericVariable0, genericVariable0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal1 = new BigDecimal(685.3017362904297);
      BigDecimal bigDecimal2 = bigDecimalModuloOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal1);
      assertEquals((short)1, bigDecimal2.shortValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>(".6DC!ycpxK");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      BigDecimalModuloOperator bigDecimalModuloOperator0 = new BigDecimalModuloOperator(genericVariable0, constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal1 = new BigDecimal((-1));
      BigDecimal bigDecimal2 = new BigDecimal((long) 20);
      BigDecimal bigDecimal3 = bigDecimalModuloOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal1, bigDecimal2);
      assertEquals((byte) (-1), bigDecimal3.byteValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalModuloOperator bigDecimalModuloOperator0 = new BigDecimalModuloOperator(genericVariable0, genericVariable0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal1 = bigDecimalModuloOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      // Undeclared exception!
      try { 
        bigDecimalModuloOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal1, bigDecimal1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Division undefined
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalModuloOperator bigDecimalModuloOperator0 = new BigDecimalModuloOperator(genericVariable0, genericVariable0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal1 = bigDecimalModuloOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      boolean boolean0 = bigDecimalModuloOperator0.isZero(bigDecimal1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalModuloOperator bigDecimalModuloOperator0 = new BigDecimalModuloOperator(genericVariable0, genericVariable0);
      boolean boolean0 = bigDecimalModuloOperator0.isZero(bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>((BigDecimal) null);
      BigDecimalModuloOperator bigDecimalModuloOperator0 = new BigDecimalModuloOperator(constantTerm0, constantTerm0);
      boolean boolean0 = bigDecimalModuloOperator0.isZero((BigDecimal) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      BigDecimalModuloOperator bigDecimalModuloOperator0 = new BigDecimalModuloOperator(constantTerm0, constantTerm0);
      // Undeclared exception!
      try { 
        bigDecimalModuloOperator0.calculateDefault((FormulaEvaluatorConfiguration) null, bigDecimal0, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalModuloOperator", e);
      }
  }
}
