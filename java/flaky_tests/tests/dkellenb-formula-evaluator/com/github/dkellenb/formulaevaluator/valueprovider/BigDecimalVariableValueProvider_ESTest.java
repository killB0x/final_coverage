/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 14:07:32 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.valueprovider;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigDecimalVariableValueProvider_ESTest extends BigDecimalVariableValueProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0, mathContext0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      hashMap0.put("", bigDecimal0);
      BigDecimal bigDecimal1 = bigDecimalVariableValueProvider0.getValue("");
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      Double double0 = new Double(893L);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider1 = bigDecimalVariableValueProvider0.with("rn#^i2[crXh8!!$O%", double0);
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider1.getValue("rn#^i2[crXh8!!$O%");
      assertEquals((short)893, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      Integer integer0 = new Integer((-1));
      bigDecimalVariableValueProvider0.with("%vsvVunu@:!H+?hir", integer0);
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.getValue("%vsvVunu@:!H+?hir");
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert((BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      Double double0 = new Double((-1941.92645));
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert(double0);
      BigDecimal bigDecimal1 = bigDecimalVariableValueProvider0.convert(bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      hashMap0.put("", bigDecimal0);
      BigDecimal bigDecimal1 = hashMap0.put("", bigDecimal0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0, mathContext0);
      BigDecimal bigDecimal2 = bigDecimalVariableValueProvider0.convert(bigDecimal1);
      assertEquals((byte)0, bigDecimal2.byteValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      Long long0 = new Long((-2678L));
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert(long0);
      assertEquals((short) (-2678), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      Long long0 = new Long(0L);
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert(long0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      Long long0 = new Long(30L);
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert(long0);
      assertEquals((short)30, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      Long long0 = new Long(1960L);
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert(long0);
      BigDecimal bigDecimal1 = bigDecimalVariableValueProvider0.convert(bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0, mathContext0);
      Integer integer0 = new Integer((-513));
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert(integer0);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      Integer integer0 = new Integer(0);
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert(integer0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0, mathContext0);
      Integer integer0 = new Integer(556);
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert(integer0);
      assertEquals((short)556, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      Double double0 = new Double(0.0);
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert(double0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      Double double0 = new Double(44.60753075823);
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert(double0);
      BigDecimal bigDecimal1 = bigDecimalVariableValueProvider0.convert(bigDecimal0);
      assertEquals((byte)44, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      Double double0 = new Double((-1));
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert(double0);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      // Undeclared exception!
      try { 
        bigDecimalVariableValueProvider0.convert((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      // Undeclared exception!
      try { 
        bigDecimalVariableValueProvider0.convert((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      // Undeclared exception!
      try { 
        bigDecimalVariableValueProvider0.convert((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0, mathContext0);
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.getValue("");
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
  }
}
