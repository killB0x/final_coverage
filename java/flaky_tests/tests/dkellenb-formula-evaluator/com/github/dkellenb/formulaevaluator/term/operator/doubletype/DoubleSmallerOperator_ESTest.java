/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:39:06 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.doubletype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleSmallerOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleSmallerOperator_ESTest extends DoubleSmallerOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Double double0 = new Double(0.0);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleSmallerOperator doubleSmallerOperator0 = new DoubleSmallerOperator(constantTerm0, constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double1 = new Double((-289.17911366));
      Double double2 = doubleSmallerOperator0.calculateDefault(formulaEvaluatorConfiguration0, double1, double0);
      assertEquals(1.0, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Double double0 = new Double(0.0);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleSmallerOperator doubleSmallerOperator0 = new DoubleSmallerOperator(constantTerm0, constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double1 = doubleSmallerOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Double double0 = new Double(0.0);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleSmallerOperator doubleSmallerOperator0 = new DoubleSmallerOperator(constantTerm0, constantTerm0);
      String string0 = doubleSmallerOperator0.getOperatorName();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleSmallerOperator doubleSmallerOperator0 = new DoubleSmallerOperator((Term<Double>) null, (Term<Double>) null);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        doubleSmallerOperator0.calculateDefault(formulaEvaluatorConfiguration0, (Double) null, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleSmallerOperator", e);
      }
  }
}
