/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:58:44 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.bigdecimal;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalGreaterEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalGreaterOperator;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigDecimalOperator_ESTest extends BigDecimalOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalEqualOperator");
      BigDecimalGreaterEqualOperator bigDecimalGreaterEqualOperator0 = new BigDecimalGreaterEqualOperator(genericVariable0, genericVariable0);
      BigDecimalEqualOperator bigDecimalEqualOperator0 = new BigDecimalEqualOperator(bigDecimalGreaterEqualOperator0, genericVariable0);
      BigDecimal bigDecimal0 = bigDecimalEqualOperator0.zero();
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BigDecimalGreaterEqualOperator bigDecimalGreaterEqualOperator0 = new BigDecimalGreaterEqualOperator((Term<BigDecimal>) null, (Term<BigDecimal>) null);
      Class<BigDecimal> class0 = bigDecimalGreaterEqualOperator0.getResultClass();
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BigDecimalGreaterOperator bigDecimalGreaterOperator0 = new BigDecimalGreaterOperator((Term<BigDecimal>) null, (Term<BigDecimal>) null);
      BigDecimal bigDecimal0 = bigDecimalGreaterOperator0.one();
      assertEquals((short)1, bigDecimal0.shortValue());
  }
}
