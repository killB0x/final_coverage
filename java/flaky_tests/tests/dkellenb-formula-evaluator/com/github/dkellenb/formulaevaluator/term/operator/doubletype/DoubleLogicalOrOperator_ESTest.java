/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:00:27 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.doubletype;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleLogicalOrOperator;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleLogicalOrOperator_ESTest extends DoubleLogicalOrOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 10);
      DoubleLogicalOrOperator doubleLogicalOrOperator0 = new DoubleLogicalOrOperator(termArray0[1], termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = doubleLogicalOrOperator0.zero();
      Double double1 = doubleLogicalOrOperator0.one();
      Double double2 = doubleLogicalOrOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double1);
      assertEquals(1.0, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 4);
      DoubleLogicalOrOperator doubleLogicalOrOperator0 = new DoubleLogicalOrOperator(termArray0[3], termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = doubleLogicalOrOperator0.calculateDefault(formulaEvaluatorConfiguration0, (Double) null, (Double) null);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 5);
      DoubleLogicalOrOperator doubleLogicalOrOperator0 = new DoubleLogicalOrOperator(termArray0[3], termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = doubleLogicalOrOperator0.zero();
      Double double1 = doubleLogicalOrOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 6);
      DoubleLogicalOrOperator doubleLogicalOrOperator0 = new DoubleLogicalOrOperator(termArray0[1], termArray0);
      String string0 = doubleLogicalOrOperator0.getOperatorName();
      assertEquals("||", string0);
  }
}
