/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:14:46 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.doubletype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleModuloOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleModuloOperator_ESTest extends DoubleModuloOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Double double0 = new Double((-1238.755769961909));
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(constantTerm0, constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double1 = doubleModuloOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double0);
      assertEquals(-0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Double double0 = new Double((-1238.755769961909));
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(constantTerm0, constantTerm0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>(hashMap0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double1 = doubleModuloOperator0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration0);
      Double double2 = doubleModuloOperator0.calculateDefault(formulaEvaluatorConfiguration0, double1, double1);
      assertEquals(Double.NaN, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Double double0 = new Double((-1238.755769961909));
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(constantTerm0, constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double1 = new Double((-2290.7));
      Double double2 = doubleModuloOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double1);
      assertEquals((-1238.755769961909), (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("1/(");
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(genericVariable0, genericVariable0);
      Double double0 = doubleModuloOperator0.zero();
      boolean boolean0 = doubleModuloOperator0.isZero(double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Double double0 = new Double((-1238.755769961909));
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(constantTerm0, constantTerm0);
      boolean boolean0 = doubleModuloOperator0.isZero(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>((Double) null);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(constantTerm0, constantTerm0);
      boolean boolean0 = doubleModuloOperator0.isZero((Double) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>((Double) null);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(constantTerm0, constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        doubleModuloOperator0.calculateDefault(formulaEvaluatorConfiguration0, (Double) null, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleModuloOperator", e);
      }
  }
}
