/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 14:19:13 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.value;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericVariable_ESTest extends GenericVariable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenericVariable<Integer> genericVariable0 = new GenericVariable<Integer>((String) null);
      String string0 = genericVariable0.printFormula();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericVariable<Integer> genericVariable0 = new GenericVariable<Integer>("");
      String string0 = genericVariable0.printFormula();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenericVariable<Object> genericVariable0 = new GenericVariable<Object>("hG8C/H7uC3KL_!");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("hG8C/H7uC3KL_!", "hG8C/H7uC3KL_!");
      GenericInitOnlyVariableValueProvider<Object> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Object>(hashMap0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Object object0 = genericVariable0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration0);
      assertEquals("hG8C/H7uC3KL_!", object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GenericVariable<String> genericVariable0 = new GenericVariable<String>("[h'r=v0OX2");
      GenericInitOnlyVariableValueProvider<String> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<String>((Map<String, String>) null);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        genericVariable0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.GenericVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GenericVariable<Integer> genericVariable0 = new GenericVariable<Integer>("[h'r=v0OX2");
      String string0 = genericVariable0.printFormula();
      assertEquals("[h'r=v0OX2", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GenericVariable<Integer> genericVariable0 = new GenericVariable<Integer>("");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      GenericInitOnlyVariableValueProvider<Integer> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Integer>(hashMap0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Integer integer0 = genericVariable0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration0);
      assertNull(integer0);
  }
}
