/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:19:00 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.doubletype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleDivisionOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleDivisionOperator_ESTest extends DoubleDivisionOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("'B;F9SO>=0R'}");
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 1);
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator(genericVariable0, termArray0);
      Double double0 = new Double(2758.8618);
      Double double1 = doubleDivisionOperator0.calculateDefault((FormulaEvaluatorConfiguration) null, double0, double0);
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("");
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 9);
      Double double0 = new Double(0.0);
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator(genericVariable0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double1 = new Double((-2647.836));
      Double double2 = doubleDivisionOperator0.calculateDefault(formulaEvaluatorConfiguration0, double1, double0);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double2, 0.01);
      
      Double double3 = doubleDivisionOperator0.calculateDefault(formulaEvaluatorConfiguration0, double1, double2);
      assertEquals(0.0, (double)double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 0);
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator((Term<Double>) null, termArray0);
      Double double0 = new Double(0.0);
      boolean boolean0 = doubleDivisionOperator0.isZero(double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator((Term<Double>) null, (Term<Double>[]) null);
      Double double0 = new Double((-1234.093947));
      boolean boolean0 = doubleDivisionOperator0.isZero(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>((Double) null);
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator(constantTerm0, (Term<Double>[]) null);
      boolean boolean0 = doubleDivisionOperator0.isZero((Double) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 7);
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator(termArray0[4], termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        doubleDivisionOperator0.calculateDefault(formulaEvaluatorConfiguration0, (Double) null, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleDivisionOperator", e);
      }
  }
}
