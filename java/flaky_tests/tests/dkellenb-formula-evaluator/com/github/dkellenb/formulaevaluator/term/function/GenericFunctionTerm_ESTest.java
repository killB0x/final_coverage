/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 12:26:56 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.VariableValueProvider;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalAbsoluteFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalCeilingFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalDegreesFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalHyperbolicTangentFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalMaxFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalMinFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalNaturalLogarithmFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalNotFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalRadiansFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalRandomFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalRoundFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalSinusFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalSquareRootFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.doubletype.DoubleRandomFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.doubletype.DoubleRoundFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.function.doubletype.DoubleSquareRootFunctionTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.DoubleVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider;
import java.math.BigDecimal;
import java.math.MathContext;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericFunctionTerm_ESTest extends GenericFunctionTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("p1I0Cc/{:>>`JfKC");
      BigDecimalRoundFunctionTerm bigDecimalRoundFunctionTerm0 = new BigDecimalRoundFunctionTerm(genericVariable0, genericVariable0);
      BigDecimalHyperbolicTangentFunctionTerm bigDecimalHyperbolicTangentFunctionTerm0 = new BigDecimalHyperbolicTangentFunctionTerm(bigDecimalRoundFunctionTerm0);
      BigDecimalAbsoluteFunctionTerm bigDecimalAbsoluteFunctionTerm0 = new BigDecimalAbsoluteFunctionTerm(bigDecimalHyperbolicTangentFunctionTerm0);
      String string0 = bigDecimalAbsoluteFunctionTerm0.getName();
      assertEquals("ABS", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigDecimalRandomFunctionTerm bigDecimalRandomFunctionTerm0 = new BigDecimalRandomFunctionTerm();
      BigDecimalCeilingFunctionTerm bigDecimalCeilingFunctionTerm0 = new BigDecimalCeilingFunctionTerm(bigDecimalRandomFunctionTerm0);
      BigDecimalDegreesFunctionTerm bigDecimalDegreesFunctionTerm0 = new BigDecimalDegreesFunctionTerm(bigDecimalCeilingFunctionTerm0);
      BigDecimalNotFunctionTerm bigDecimalNotFunctionTerm0 = new BigDecimalNotFunctionTerm(bigDecimalDegreesFunctionTerm0);
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>(2);
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0, mathContext0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal0 = bigDecimalNotFunctionTerm0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleSquareRootFunctionTerm doubleSquareRootFunctionTerm0 = new DoubleSquareRootFunctionTerm((Term<Double>) null);
      // Undeclared exception!
      try { 
        doubleSquareRootFunctionTerm0.printFormula();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleRandomFunctionTerm doubleRandomFunctionTerm0 = new DoubleRandomFunctionTerm();
      // Undeclared exception!
      try { 
        doubleRandomFunctionTerm0.evaluate((VariableValueProvider<Double>) null, (FormulaEvaluatorConfiguration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.function.GenericFunctionTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("");
      DoubleRoundFunctionTerm doubleRoundFunctionTerm0 = new DoubleRoundFunctionTerm(genericVariable0, genericVariable0);
      DoubleSquareRootFunctionTerm doubleSquareRootFunctionTerm0 = new DoubleSquareRootFunctionTerm(doubleRoundFunctionTerm0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>(hashMap0);
      Double double0 = new Double((-554.97116127));
      hashMap0.put("", double0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        doubleSquareRootFunctionTerm0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Places >= 0 expected
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.function.doubletype.DoubleRoundFunctionTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigDecimalRandomFunctionTerm bigDecimalRandomFunctionTerm0 = new BigDecimalRandomFunctionTerm();
      BigDecimalMinFunctionTerm bigDecimalMinFunctionTerm0 = new BigDecimalMinFunctionTerm(bigDecimalRandomFunctionTerm0, bigDecimalRandomFunctionTerm0);
      BigDecimalMaxFunctionTerm bigDecimalMaxFunctionTerm0 = new BigDecimalMaxFunctionTerm(bigDecimalRandomFunctionTerm0, bigDecimalMinFunctionTerm0);
      BigDecimalNaturalLogarithmFunctionTerm bigDecimalNaturalLogarithmFunctionTerm0 = new BigDecimalNaturalLogarithmFunctionTerm(bigDecimalMaxFunctionTerm0);
      BigDecimalSquareRootFunctionTerm bigDecimalSquareRootFunctionTerm0 = new BigDecimalSquareRootFunctionTerm(bigDecimalNaturalLogarithmFunctionTerm0);
      BigDecimalRadiansFunctionTerm bigDecimalRadiansFunctionTerm0 = new BigDecimalRadiansFunctionTerm(bigDecimalSquareRootFunctionTerm0);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        bigDecimalRadiansFunctionTerm0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Argument to SQRT() function must not be negative
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.function.bigdecimal.BigDecimalSquareRootFunctionTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>(", but expected ");
      BigDecimalSinusFunctionTerm bigDecimalSinusFunctionTerm0 = new BigDecimalSinusFunctionTerm(genericVariable0);
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        bigDecimalSinusFunctionTerm0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 'null' parameter found for operation/function 'SIN' and parameters 'null'
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.function.GenericFunctionTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleRandomFunctionTerm doubleRandomFunctionTerm0 = new DoubleRandomFunctionTerm();
      DoubleSquareRootFunctionTerm doubleSquareRootFunctionTerm0 = new DoubleSquareRootFunctionTerm(doubleRandomFunctionTerm0);
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>((Map<String, Double>) null);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.ZERO;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      Double double0 = doubleSquareRootFunctionTerm0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration1);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleRandomFunctionTerm doubleRandomFunctionTerm0 = new DoubleRandomFunctionTerm();
      DoubleSquareRootFunctionTerm doubleSquareRootFunctionTerm0 = new DoubleSquareRootFunctionTerm(doubleRandomFunctionTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.NULL;
      formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      Double double0 = doubleSquareRootFunctionTerm0.evaluate((VariableValueProvider<Double>) null, formulaEvaluatorConfiguration0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.ZERO;
      formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("");
      DoubleSquareRootFunctionTerm doubleSquareRootFunctionTerm0 = new DoubleSquareRootFunctionTerm(genericVariable0);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      Double double0 = doubleSquareRootFunctionTerm0.evaluate(doubleVariableValueProvider0, formulaEvaluatorConfiguration0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("(z");
      DoubleRoundFunctionTerm doubleRoundFunctionTerm0 = new DoubleRoundFunctionTerm(genericVariable0, genericVariable0);
      DoubleSquareRootFunctionTerm doubleSquareRootFunctionTerm0 = new DoubleSquareRootFunctionTerm(doubleRoundFunctionTerm0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>(hashMap0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.NULL;
      formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      Double double0 = doubleSquareRootFunctionTerm0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("");
      DoubleSquareRootFunctionTerm doubleSquareRootFunctionTerm0 = new DoubleSquareRootFunctionTerm(genericVariable0);
      String string0 = doubleSquareRootFunctionTerm0.printFormula();
      assertEquals("SQRT()", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigDecimalRandomFunctionTerm bigDecimalRandomFunctionTerm0 = new BigDecimalRandomFunctionTerm();
      BigDecimalNaturalLogarithmFunctionTerm bigDecimalNaturalLogarithmFunctionTerm0 = new BigDecimalNaturalLogarithmFunctionTerm(bigDecimalRandomFunctionTerm0);
      BigDecimalSinusFunctionTerm bigDecimalSinusFunctionTerm0 = new BigDecimalSinusFunctionTerm(bigDecimalNaturalLogarithmFunctionTerm0);
      BigDecimalRadiansFunctionTerm bigDecimalRadiansFunctionTerm0 = new BigDecimalRadiansFunctionTerm(bigDecimalSinusFunctionTerm0);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        bigDecimalRadiansFunctionTerm0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Infinite or NaN
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
