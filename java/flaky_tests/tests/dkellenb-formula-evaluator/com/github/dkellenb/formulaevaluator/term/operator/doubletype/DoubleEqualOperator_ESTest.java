/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:04:00 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.doubletype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleEqualOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleEqualOperator_ESTest extends DoubleEqualOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("i");
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator(genericVariable0, genericVariable0);
      String string0 = doubleEqualOperator0.getOperatorName();
      assertEquals("==", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("i");
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>(hashMap0);
      Double double0 = new Double(3064.05846225);
      hashMap0.put("i", double0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double1 = genericVariable0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration0);
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator(genericVariable0, genericVariable0);
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.NULL;
      formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      Double double2 = doubleEqualOperator0.calculate(formulaEvaluatorConfiguration0, double1, (Double) null);
      assertNull(double2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator((Term<Double>) null, (Term<Double>) null);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        doubleEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, (Double) null, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleEqualOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator((Term<Double>) null, (Term<Double>) null);
      Double double0 = doubleEqualOperator0.zero();
      // Undeclared exception!
      try { 
        doubleEqualOperator0.calculate((FormulaEvaluatorConfiguration) null, double0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator((Term<Double>) null, (Term<Double>) null);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = doubleEqualOperator0.zero();
      Double double1 = doubleEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double0);
      Double double2 = doubleEqualOperator0.calculate(formulaEvaluatorConfiguration0, double0, double1);
      assertNotEquals((double)double2, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("i");
      Double double0 = new Double(3064.05846225);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator(genericVariable0, genericVariable0);
      Double double1 = new Double(1214.8672762371);
      Double double2 = doubleEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double1);
      assertEquals(0.0, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>((Double) null);
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator(constantTerm0, constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = doubleEqualOperator0.calculate(formulaEvaluatorConfiguration0, (Double) null, (Double) null);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("i");
      Double double0 = new Double(3064.05846225);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator(genericVariable0, genericVariable0);
      // Undeclared exception!
      try { 
        doubleEqualOperator0.calculate(formulaEvaluatorConfiguration0, (Double) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 'null' parameter found for operation/function '==' and parameters 'null', 'java.lang.Double@0000000004'
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericOperatorTerm", e);
      }
  }
}
