/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:41:12 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.valueprovider;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.DoubleVariableValueProvider;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleVariableValueProvider_ESTest extends DoubleVariableValueProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      Set<String> set0 = doubleVariableValueProvider0.getVariables();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimalVariableValueProvider0.with(".]-#[8@Wo", bigDecimal0);
      Double double0 = doubleVariableValueProvider0.getValue(".]-#[8@Wo");
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      Integer integer0 = Integer.getInteger("", (-397));
      bigDecimalVariableValueProvider0.with("", integer0);
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      Double double0 = doubleVariableValueProvider0.getValue("");
      assertEquals((-397.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider((BigDecimalVariableValueProvider) null);
      // Undeclared exception!
      try { 
        doubleVariableValueProvider0.getValue("^cRJ++K]6fYh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.DoubleVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      Double double0 = doubleVariableValueProvider0.getValue((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      Integer integer0 = new Integer(0);
      bigDecimalVariableValueProvider0.with((String) null, integer0);
      Double double0 = doubleVariableValueProvider0.getValue((String) null);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider((BigDecimalVariableValueProvider) null);
      // Undeclared exception!
      try { 
        doubleVariableValueProvider0.getVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.DoubleVariableValueProvider", e);
      }
  }
}
