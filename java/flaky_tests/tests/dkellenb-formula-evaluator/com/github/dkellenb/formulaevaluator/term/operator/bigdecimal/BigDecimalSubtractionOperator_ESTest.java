/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 14:09:34 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.bigdecimal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSubtractionOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigDecimalSubtractionOperator_ESTest extends BigDecimalSubtractionOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(8);
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 0);
      BigDecimalSubtractionOperator bigDecimalSubtractionOperator0 = new BigDecimalSubtractionOperator(constantTerm0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal1 = bigDecimalSubtractionOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal2 = bigDecimalSubtractionOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal1);
      assertEquals((short)8, bigDecimal2.shortValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(8);
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 0);
      BigDecimalSubtractionOperator bigDecimalSubtractionOperator0 = new BigDecimalSubtractionOperator(constantTerm0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal1 = bigDecimalSubtractionOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal2 = bigDecimalSubtractionOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal1, bigDecimal0);
      assertEquals((byte) (-8), bigDecimal2.byteValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3771L);
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 1);
      BigDecimalSubtractionOperator bigDecimalSubtractionOperator0 = new BigDecimalSubtractionOperator(constantTerm0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      formulaEvaluatorConfiguration0.setRoundingMode(roundingMode0);
      BigDecimal bigDecimal1 = BigDecimal.valueOf(3771L, 114);
      // Undeclared exception!
      try { 
        bigDecimalSubtractionOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal1, bigDecimal0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 11);
      BigDecimalSubtractionOperator bigDecimalSubtractionOperator0 = new BigDecimalSubtractionOperator(termArray0[0], termArray0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        bigDecimalSubtractionOperator0.calculateDefault((FormulaEvaluatorConfiguration) null, bigDecimal0, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSubtractionOperator", e);
      }
  }
}
