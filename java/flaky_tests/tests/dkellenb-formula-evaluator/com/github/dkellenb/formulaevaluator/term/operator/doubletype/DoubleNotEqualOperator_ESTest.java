/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:02:14 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.doubletype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleNotEqualOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.DoubleVariableValueProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleNotEqualOperator_ESTest extends DoubleNotEqualOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("");
      DoubleNotEqualOperator doubleNotEqualOperator0 = new DoubleNotEqualOperator(genericVariable0, genericVariable0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = Double.valueOf(856.5308);
      Double double1 = doubleNotEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double0);
      Double double2 = doubleNotEqualOperator0.calculate(formulaEvaluatorConfiguration0, double0, double1);
      assertNotEquals((double)double2, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Double double0 = new Double((-1.0));
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleNotEqualOperator doubleNotEqualOperator0 = new DoubleNotEqualOperator(constantTerm0, constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.NULL;
      formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      Double double1 = doubleNotEqualOperator0.calculate(formulaEvaluatorConfiguration0, (Double) null, double0);
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("");
      DoubleNotEqualOperator doubleNotEqualOperator0 = new DoubleNotEqualOperator(genericVariable0, genericVariable0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = Double.valueOf(856.5308);
      // Undeclared exception!
      try { 
        doubleNotEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, (Double) null, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleNotEqualOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleNotEqualOperator doubleNotEqualOperator0 = new DoubleNotEqualOperator((Term<Double>) null, (Term<Double>) null);
      Double double0 = doubleNotEqualOperator0.zero();
      // Undeclared exception!
      try { 
        doubleNotEqualOperator0.calculate((FormulaEvaluatorConfiguration) null, double0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleNotEqualOperator doubleNotEqualOperator0 = new DoubleNotEqualOperator((Term<Double>) null, (Term<Double>) null);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = doubleNotEqualOperator0.one();
      Double double1 = doubleNotEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double0);
      Double double2 = doubleNotEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, double1, double0);
      assertNotEquals((double)double2, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>(";1lJElO92]");
      DoubleNotEqualOperator doubleNotEqualOperator0 = new DoubleNotEqualOperator(genericVariable0, genericVariable0);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = doubleNotEqualOperator0.evaluate(doubleVariableValueProvider0, formulaEvaluatorConfiguration0);
      Double double1 = doubleNotEqualOperator0.calculate(formulaEvaluatorConfiguration0, double0, double0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleNotEqualOperator doubleNotEqualOperator0 = new DoubleNotEqualOperator((Term<Double>) null, (Term<Double>) null);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double0 = doubleNotEqualOperator0.zero();
      // Undeclared exception!
      try { 
        doubleNotEqualOperator0.calculate(formulaEvaluatorConfiguration0, (Double) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 'null' parameter found for operation/function '!=' and parameters 'null', 'java.lang.Double@0000000003'
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleNotEqualOperator doubleNotEqualOperator0 = new DoubleNotEqualOperator((Term<Double>) null, (Term<Double>) null);
      String string0 = doubleNotEqualOperator0.getOperatorName();
      assertEquals("!=", string0);
  }
}
