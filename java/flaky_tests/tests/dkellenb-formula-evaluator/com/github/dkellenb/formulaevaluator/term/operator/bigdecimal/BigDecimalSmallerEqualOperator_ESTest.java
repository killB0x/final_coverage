/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:32:23 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.bigdecimal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSmallerEqualOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigDecimalSmallerEqualOperator_ESTest extends BigDecimalSmallerEqualOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      BigDecimalSmallerEqualOperator bigDecimalSmallerEqualOperator0 = new BigDecimalSmallerEqualOperator(constantTerm0, constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal1 = bigDecimal0.divideToIntegralValue(bigDecimal0);
      BigDecimal bigDecimal2 = bigDecimalSmallerEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal1, bigDecimal0);
      assertEquals((byte)1, bigDecimal2.byteValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BigDecimalSmallerEqualOperator bigDecimalSmallerEqualOperator0 = new BigDecimalSmallerEqualOperator((Term<BigDecimal>) null, (Term<BigDecimal>) null);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        bigDecimalSmallerEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, (BigDecimal) null, (BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSmallerEqualOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      BigDecimalSmallerEqualOperator bigDecimalSmallerEqualOperator0 = new BigDecimalSmallerEqualOperator(constantTerm0, constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal1 = bigDecimalSmallerEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal2 = bigDecimalSmallerEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BigDecimalSmallerEqualOperator bigDecimalSmallerEqualOperator0 = new BigDecimalSmallerEqualOperator((Term<BigDecimal>) null, (Term<BigDecimal>) null);
      String string0 = bigDecimalSmallerEqualOperator0.getOperatorName();
      assertEquals("<=", string0);
  }
}
