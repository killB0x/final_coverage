/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:51:50 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.bigdecimal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalAdditionOperator;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigDecimalAdditionOperator_ESTest extends BigDecimalAdditionOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("mj0yV");
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 4);
      BigDecimalAdditionOperator bigDecimalAdditionOperator0 = new BigDecimalAdditionOperator(genericVariable0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)102;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = bigDecimalAdditionOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("JtQ`^PZk");
      BigDecimalAdditionOperator bigDecimalAdditionOperator0 = new BigDecimalAdditionOperator(genericVariable0, (Term<BigDecimal>[]) null);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = bigDecimalAdditionOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("JtQ`^PZk");
      BigDecimalAdditionOperator bigDecimalAdditionOperator0 = new BigDecimalAdditionOperator(genericVariable0, (Term<BigDecimal>[]) null);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = bigDecimalAdditionOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal2 = bigDecimalAdditionOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal1);
      assertEquals((short)30, bigDecimal2.shortValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("mj0yV");
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 4);
      BigDecimalAdditionOperator bigDecimalAdditionOperator0 = new BigDecimalAdditionOperator(genericVariable0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)74;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = bigDecimalAdditionOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      assertEquals((short)148, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 9);
      BigDecimalAdditionOperator bigDecimalAdditionOperator0 = new BigDecimalAdditionOperator(termArray0[2], termArray0);
      // Undeclared exception!
      try { 
        bigDecimalAdditionOperator0.calculateDefault((FormulaEvaluatorConfiguration) null, (BigDecimal) null, (BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalAdditionOperator", e);
      }
  }
}
