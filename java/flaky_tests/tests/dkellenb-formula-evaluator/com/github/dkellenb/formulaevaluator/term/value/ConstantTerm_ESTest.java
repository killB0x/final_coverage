/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:40:09 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.value;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.VariableValueProvider;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConstantTerm_ESTest extends ConstantTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      ConstantTerm<Object> constantTerm0 = new ConstantTerm<Object>(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      GenericInitOnlyVariableValueProvider<Object> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Object>(hashMap0);
      Object object1 = constantTerm0.evaluate(genericInitOnlyVariableValueProvider0, (FormulaEvaluatorConfiguration) null);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantTerm<String> constantTerm0 = new ConstantTerm<String>((String) null);
      String string0 = constantTerm0.printFormula();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantTerm<Object> constantTerm0 = new ConstantTerm<Object>("pp7!]^:t{VCm)");
      String string0 = constantTerm0.printFormula();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      ConstantTerm<Integer> constantTerm0 = new ConstantTerm<Integer>((Integer) null);
      Integer integer0 = constantTerm0.evaluate((VariableValueProvider<Integer>) null, formulaEvaluatorConfiguration0);
      assertNull(integer0);
  }
}
