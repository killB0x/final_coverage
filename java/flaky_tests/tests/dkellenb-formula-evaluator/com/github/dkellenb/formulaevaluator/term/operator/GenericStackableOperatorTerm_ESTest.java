/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 12:47:32 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.VariableValueProvider;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalAdditionOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalDivisionOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalGreaterEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalGreaterOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalLogicalAndOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalLogicalOrOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalModuloOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalMultiplicationOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalNotEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSmallerEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSmallerOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleExponentiationOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleGreaterOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleLogicalAndOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleLogicalOrOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleModuloOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleNotEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleSmallerEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleSmallerOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleSubtractionOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.DoubleVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericStackableOperatorTerm_ESTest extends GenericStackableOperatorTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("]");
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 0);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(genericVariable0, termArray0);
      String string0 = bigDecimalLogicalAndOperator0.printFormula();
      assertEquals("(])", string0);
      
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      bigDecimalLogicalAndOperator0.evaluate(bigDecimalVariableValueProvider0, (FormulaEvaluatorConfiguration) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 4);
      termArray0[0] = (Term<BigDecimal>) constantTerm0;
      termArray0[1] = (Term<BigDecimal>) constantTerm0;
      termArray0[2] = (Term<BigDecimal>) constantTerm0;
      termArray0[3] = (Term<BigDecimal>) constantTerm0;
      BigDecimalAdditionOperator bigDecimalAdditionOperator0 = new BigDecimalAdditionOperator(termArray0[3], termArray0);
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator(termArray0[2], constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      bigDecimalAdditionOperator0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(termArray0[3], termArray0);
      bigDecimalLogicalAndOperator0.printFormula();
      BigDecimalEqualOperator bigDecimalEqualOperator0 = new BigDecimalEqualOperator(bigDecimalAdditionOperator0, bigDecimalAdditionOperator0);
      bigDecimalEqualOperator0.getOperatorName();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider1 = new BigDecimalVariableValueProvider();
      bigDecimalEqualOperator0.evaluate(bigDecimalVariableValueProvider1, formulaEvaluatorConfiguration0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>((String) null);
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 0);
      DoubleSubtractionOperator doubleSubtractionOperator0 = new DoubleSubtractionOperator(genericVariable0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = new FormulaEvaluatorConfiguration(formulaEvaluatorConfiguration0);
      DoubleNotEqualOperator doubleNotEqualOperator0 = new DoubleNotEqualOperator(genericVariable0, doubleSubtractionOperator0);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(doubleSubtractionOperator0, doubleSubtractionOperator0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration2 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration3 = new FormulaEvaluatorConfiguration(formulaEvaluatorConfiguration2);
      DoubleSmallerEqualOperator doubleSmallerEqualOperator0 = new DoubleSmallerEqualOperator(doubleModuloOperator0, doubleModuloOperator0);
      Double double0 = new Double(2014.9963);
      doubleNotEqualOperator0.getOperatorName();
      Double double1 = doubleSmallerEqualOperator0.zero();
      Double double2 = doubleSubtractionOperator0.calculateDefault(formulaEvaluatorConfiguration3, double0, double1);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      Double double3 = new Double(2014.9963);
      bigDecimalVariableValueProvider0.with((String) null, double3);
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      doubleSmallerEqualOperator0.evaluate(doubleVariableValueProvider0, formulaEvaluatorConfiguration3);
      doubleSmallerEqualOperator0.calculateDefault(formulaEvaluatorConfiguration2, double0, double2);
      GenericVariable<BigDecimal> genericVariable1 = new GenericVariable<BigDecimal>((String) null);
      BigDecimalGreaterOperator bigDecimalGreaterOperator0 = new BigDecimalGreaterOperator(genericVariable1, genericVariable1);
      Term<BigDecimal>[] termArray1 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 8);
      termArray1[0] = (Term<BigDecimal>) genericVariable1;
      termArray1[1] = (Term<BigDecimal>) genericVariable1;
      termArray1[2] = (Term<BigDecimal>) bigDecimalGreaterOperator0;
      termArray1[3] = (Term<BigDecimal>) genericVariable1;
      termArray1[4] = (Term<BigDecimal>) genericVariable1;
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      bigDecimalGreaterOperator0.calculateDefault(formulaEvaluatorConfiguration3, bigDecimal0, bigDecimal0);
      termArray1[5] = (Term<BigDecimal>) genericVariable1;
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(termArray1[5], termArray1);
      termArray1[6] = (Term<BigDecimal>) bigDecimalLogicalAndOperator0;
      termArray1[7] = (Term<BigDecimal>) genericVariable1;
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator1 = new BigDecimalLogicalAndOperator(bigDecimalGreaterOperator0, termArray1);
      // Undeclared exception!
      bigDecimalLogicalAndOperator1.printFormula();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("]");
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 0);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(genericVariable0, termArray0);
      // Undeclared exception!
      try { 
        bigDecimalLogicalAndOperator0.evaluate((VariableValueProvider<BigDecimal>) null, (FormulaEvaluatorConfiguration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.value.GenericVariable", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Term<Double> term0 = null;
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 0);
      DoubleLogicalOrOperator doubleLogicalOrOperator0 = new DoubleLogicalOrOperator((Term<Double>) null, termArray0);
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0, mathContext0);
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        doubleLogicalOrOperator0.evaluate(doubleVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericStackableOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator((Term<BigDecimal>) null, (Term<BigDecimal>[]) null);
      BigDecimalLogicalOrOperator bigDecimalLogicalOrOperator0 = new BigDecimalLogicalOrOperator(bigDecimalLogicalAndOperator0, (Term<BigDecimal>[]) null);
      BigDecimalGreaterEqualOperator bigDecimalGreaterEqualOperator0 = new BigDecimalGreaterEqualOperator(bigDecimalLogicalOrOperator0, (Term<BigDecimal>) null);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        bigDecimalGreaterEqualOperator0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericStackableOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 4);
      termArray0[0] = (Term<BigDecimal>) constantTerm0;
      termArray0[1] = (Term<BigDecimal>) constantTerm0;
      termArray0[2] = (Term<BigDecimal>) constantTerm0;
      termArray0[3] = (Term<BigDecimal>) constantTerm0;
      BigDecimalAdditionOperator bigDecimalAdditionOperator0 = new BigDecimalAdditionOperator(constantTerm0, termArray0);
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator(constantTerm0, bigDecimalAdditionOperator0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      BigDecimal bigDecimal1 = bigDecimalAdditionOperator0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = new FormulaEvaluatorConfiguration(formulaEvaluatorConfiguration0);
      BigDecimalSmallerEqualOperator bigDecimalSmallerEqualOperator0 = new BigDecimalSmallerEqualOperator(termArray0[3], termArray0[3]);
      bigDecimalSmallerEqualOperator0.getOperatorName();
      bigDecimalSmallerEqualOperator0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
      bigDecimalSmallerEqualOperator0.calculateDefault(formulaEvaluatorConfiguration1, bigDecimal1, bigDecimal1);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(constantTerm0, termArray0);
      bigDecimalLogicalAndOperator0.printFormula();
      assertNotSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("]");
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(genericVariable0, (Term<BigDecimal>[]) null);
      // Undeclared exception!
      try { 
        bigDecimalLogicalAndOperator0.printFormula();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("]");
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 1);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(genericVariable0, termArray0);
      // Undeclared exception!
      try { 
        bigDecimalLogicalAndOperator0.printFormula();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double(576.106108317465);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleSmallerOperator doubleSmallerOperator0 = new DoubleSmallerOperator(constantTerm0, constantTerm0);
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 8);
      termArray0[0] = (Term<Double>) doubleSmallerOperator0;
      DoubleGreaterOperator doubleGreaterOperator0 = new DoubleGreaterOperator(constantTerm0, doubleSmallerOperator0);
      termArray0[1] = (Term<Double>) doubleGreaterOperator0;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double1 = new Double(237.0);
      doubleGreaterOperator0.printFormula();
      doubleGreaterOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double1);
      termArray0[2] = (Term<Double>) constantTerm0;
      termArray0[3] = (Term<Double>) constantTerm0;
      termArray0[4] = (Term<Double>) constantTerm0;
      doubleGreaterOperator0.getOperatorName();
      termArray0[5] = (Term<Double>) constantTerm0;
      termArray0[6] = (Term<Double>) doubleSmallerOperator0;
      termArray0[7] = (Term<Double>) constantTerm0;
      DoubleSubtractionOperator doubleSubtractionOperator0 = new DoubleSubtractionOperator(doubleSmallerOperator0, termArray0);
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator((Term<BigDecimal>) null, (Term<BigDecimal>) null);
      BigDecimalGreaterOperator bigDecimalGreaterOperator0 = new BigDecimalGreaterOperator(bigDecimalNotEqualOperator0, bigDecimalNotEqualOperator0);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(bigDecimalGreaterOperator0, (Term<BigDecimal>[]) null);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = new FormulaEvaluatorConfiguration(formulaEvaluatorConfiguration0);
      BigDecimal bigDecimal0 = null;
      bigDecimalLogicalAndOperator0.calculateDefault(formulaEvaluatorConfiguration1, (BigDecimal) null, (BigDecimal) null);
      bigDecimalLogicalAndOperator0.getOperatorName();
      BigDecimalSmallerEqualOperator bigDecimalSmallerEqualOperator0 = new BigDecimalSmallerEqualOperator(bigDecimalGreaterOperator0, bigDecimalLogicalAndOperator0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration2 = new FormulaEvaluatorConfiguration(formulaEvaluatorConfiguration1);
      // Undeclared exception!
      try { 
        bigDecimalSmallerEqualOperator0.evaluate((VariableValueProvider<BigDecimal>) null, formulaEvaluatorConfiguration2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericStackableOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Term<BigDecimal> term0 = null;
      BigDecimalModuloOperator bigDecimalModuloOperator0 = new BigDecimalModuloOperator((Term<BigDecimal>) null, (Term<BigDecimal>) null);
      BigDecimalSmallerOperator bigDecimalSmallerOperator0 = new BigDecimalSmallerOperator(bigDecimalModuloOperator0, (Term<BigDecimal>) null);
      // Undeclared exception!
      try { 
        bigDecimalModuloOperator0.printFormula();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 4);
      termArray0[0] = (Term<BigDecimal>) constantTerm0;
      termArray0[1] = (Term<BigDecimal>) constantTerm0;
      termArray0[2] = (Term<BigDecimal>) constantTerm0;
      termArray0[3] = (Term<BigDecimal>) constantTerm0;
      BigDecimalAdditionOperator bigDecimalAdditionOperator0 = new BigDecimalAdditionOperator(constantTerm0, termArray0);
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator(constantTerm0, bigDecimalAdditionOperator0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      BigDecimal bigDecimal1 = bigDecimalAdditionOperator0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      bigDecimalNotEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal2, bigDecimal0);
      BigDecimalLogicalOrOperator bigDecimalLogicalOrOperator0 = new BigDecimalLogicalOrOperator(constantTerm0, termArray0);
      bigDecimalLogicalOrOperator0.getOperatorName();
      assertNotSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("jK8#SC-Vx4");
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 7);
      termArray0[0] = (Term<BigDecimal>) genericVariable0;
      termArray0[1] = (Term<BigDecimal>) genericVariable0;
      termArray0[2] = (Term<BigDecimal>) genericVariable0;
      termArray0[3] = (Term<BigDecimal>) genericVariable0;
      termArray0[4] = (Term<BigDecimal>) genericVariable0;
      termArray0[5] = (Term<BigDecimal>) genericVariable0;
      termArray0[6] = (Term<BigDecimal>) genericVariable0;
      BigDecimalMultiplicationOperator bigDecimalMultiplicationOperator0 = new BigDecimalMultiplicationOperator(genericVariable0, termArray0);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = new FormulaEvaluatorConfiguration(formulaEvaluatorConfiguration0);
      genericVariable0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration1);
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      GenericInitOnlyVariableValueProvider<BigDecimal> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<BigDecimal>(hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      hashMap0.put("jK8#SC-Vx4", bigDecimal0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration2 = null;
      // Undeclared exception!
      try { 
        bigDecimalMultiplicationOperator0.evaluate(genericInitOnlyVariableValueProvider0, (FormulaEvaluatorConfiguration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericMultiplicationOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("]");
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 9);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(genericVariable0, termArray0);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = new FormulaEvaluatorConfiguration(formulaEvaluatorConfiguration0);
      // Undeclared exception!
      try { 
        bigDecimalLogicalAndOperator0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericStackableOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 2);
      termArray0[0] = (Term<BigDecimal>) constantTerm0;
      termArray0[1] = (Term<BigDecimal>) constantTerm0;
      BigDecimalAdditionOperator bigDecimalAdditionOperator0 = new BigDecimalAdditionOperator(constantTerm0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider();
      bigDecimalAdditionOperator0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(bigDecimalAdditionOperator0, termArray0);
      String string0 = bigDecimalLogicalAndOperator0.printFormula();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("]");
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 1);
      BigDecimalLogicalAndOperator bigDecimalLogicalAndOperator0 = new BigDecimalLogicalAndOperator(genericVariable0, termArray0);
      // Undeclared exception!
      try { 
        bigDecimalLogicalAndOperator0.evaluate((VariableValueProvider<BigDecimal>) null, (FormulaEvaluatorConfiguration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.value.GenericVariable", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(1403.009027);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator(constantTerm0, constantTerm0);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(doubleEqualOperator0, doubleEqualOperator0);
      DoubleExponentiationOperator doubleExponentiationOperator0 = new DoubleExponentiationOperator(doubleModuloOperator0, doubleEqualOperator0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = new FormulaEvaluatorConfiguration(formulaEvaluatorConfiguration0);
      Double double1 = new Double(0.0);
      doubleExponentiationOperator0.calculateDefault(formulaEvaluatorConfiguration1, double1, double0);
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 3);
      termArray0[0] = (Term<Double>) doubleExponentiationOperator0;
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>(hashMap0);
      doubleModuloOperator0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration0);
      termArray0[1] = (Term<Double>) constantTerm0;
      termArray0[2] = (Term<Double>) constantTerm0;
      DoubleLogicalAndOperator doubleLogicalAndOperator0 = new DoubleLogicalAndOperator(doubleExponentiationOperator0, termArray0);
      formulaEvaluatorConfiguration1.setUnmodifiable();
      Double double2 = new Double(0.0);
      doubleLogicalAndOperator0.calculateDefault(formulaEvaluatorConfiguration1, double2, double2);
      DoubleGreaterOperator doubleGreaterOperator0 = new DoubleGreaterOperator(termArray0[1], termArray0[2]);
      doubleGreaterOperator0.getOperatorName();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)124;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      ConstantTerm<BigDecimal> constantTerm1 = new ConstantTerm<BigDecimal>(bigDecimal0);
      BigDecimalGreaterEqualOperator bigDecimalGreaterEqualOperator0 = new BigDecimalGreaterEqualOperator(constantTerm1, constantTerm1);
      BigDecimalSmallerOperator bigDecimalSmallerOperator0 = new BigDecimalSmallerOperator(bigDecimalGreaterEqualOperator0, constantTerm1);
      String string0 = bigDecimalSmallerOperator0.getOperatorName();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double((-653.2802317289794));
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleSmallerEqualOperator doubleSmallerEqualOperator0 = new DoubleSmallerEqualOperator(constantTerm0, constantTerm0);
      DoubleSubtractionOperator doubleSubtractionOperator0 = new DoubleSubtractionOperator(doubleSmallerEqualOperator0, (Term<Double>[]) null);
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator(doubleSubtractionOperator0, constantTerm0);
      DoubleLogicalOrOperator doubleLogicalOrOperator0 = new DoubleLogicalOrOperator(doubleSubtractionOperator0, (Term<Double>[]) null);
      DoubleSmallerOperator doubleSmallerOperator0 = new DoubleSmallerOperator(doubleLogicalOrOperator0, doubleSubtractionOperator0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Double double1 = doubleSmallerOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double0);
      BigDecimalModuloOperator bigDecimalModuloOperator0 = new BigDecimalModuloOperator((Term<BigDecimal>) null, (Term<BigDecimal>) null);
      BigDecimalSmallerOperator bigDecimalSmallerOperator0 = new BigDecimalSmallerOperator(bigDecimalModuloOperator0, bigDecimalModuloOperator0);
      BigDecimalDivisionOperator bigDecimalDivisionOperator0 = new BigDecimalDivisionOperator(bigDecimalSmallerOperator0, (Term<BigDecimal>[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)69;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalDivisionOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      doubleSubtractionOperator0.calculateDefault(formulaEvaluatorConfiguration0, double0, double1);
      DoubleNotEqualOperator doubleNotEqualOperator0 = new DoubleNotEqualOperator(constantTerm0, doubleSmallerOperator0);
      String string0 = doubleNotEqualOperator0.getOperatorName();
      assertEquals("!=", string0);
  }
}
