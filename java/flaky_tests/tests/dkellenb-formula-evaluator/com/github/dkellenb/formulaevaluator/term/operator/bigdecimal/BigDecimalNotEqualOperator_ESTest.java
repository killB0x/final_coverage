/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:13:20 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.bigdecimal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalNotEqualOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigDecimalNotEqualOperator_ESTest extends BigDecimalNotEqualOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>((BigDecimal) null);
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator(constantTerm0, constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.NULL;
      formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      BigDecimal bigDecimal0 = bigDecimalNotEqualOperator0.calculate(formulaEvaluatorConfiguration0, (BigDecimal) null, (BigDecimal) null);
      BigDecimal bigDecimal1 = bigDecimalNotEqualOperator0.calculate(formulaEvaluatorConfiguration0, bigDecimal0, (BigDecimal) null);
      assertNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("#");
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator(genericVariable0, genericVariable0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      BigDecimal bigDecimal0 = bigDecimalNotEqualOperator0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal2 = bigDecimalNotEqualOperator0.calculate(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal1);
      assertEquals((short)1, bigDecimal2.shortValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>((BigDecimal) null);
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator(constantTerm0, constantTerm0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        bigDecimalNotEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, (BigDecimal) null, (BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalNotEqualOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator((Term<BigDecimal>) null, (Term<BigDecimal>) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        bigDecimalNotEqualOperator0.calculate((FormulaEvaluatorConfiguration) null, bigDecimal0, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("#");
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator(genericVariable0, genericVariable0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      BigDecimal bigDecimal0 = bigDecimalNotEqualOperator0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal2 = bigDecimalNotEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal1, bigDecimal0);
      assertEquals((byte)1, bigDecimal2.byteValue());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GenericVariable<BigDecimal> genericVariable0 = new GenericVariable<BigDecimal>("#");
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator(genericVariable0, genericVariable0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      BigDecimal bigDecimal0 = bigDecimalNotEqualOperator0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
      BigDecimal bigDecimal1 = bigDecimalNotEqualOperator0.calculateDefault(formulaEvaluatorConfiguration0, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator((Term<BigDecimal>) null, (Term<BigDecimal>) null);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimal bigDecimal0 = bigDecimalNotEqualOperator0.one();
      // Undeclared exception!
      try { 
        bigDecimalNotEqualOperator0.calculate(formulaEvaluatorConfiguration0, (BigDecimal) null, bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 'null' parameter found for operation/function '!=' and parameters 'null', 'java.math.BigDecimal@0000000003'
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator((Term<BigDecimal>) null, (Term<BigDecimal>) null);
      String string0 = bigDecimalNotEqualOperator0.getOperatorName();
      assertEquals("!=", string0);
  }
}
