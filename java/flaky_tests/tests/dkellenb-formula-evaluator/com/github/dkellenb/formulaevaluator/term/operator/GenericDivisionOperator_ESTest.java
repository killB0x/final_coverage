/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 12:22:51 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.VariableValueProvider;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleDivisionOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleModuloOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.DoubleVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericDivisionOperator_ESTest extends GenericDivisionOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Double double0 = new Double(0.0);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      formulaEvaluatorConfiguration0.setDivisionNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      FormulaEvaluatorConfiguration.DivisionByZeroHandling formulaEvaluatorConfiguration_DivisionByZeroHandling0 = FormulaEvaluatorConfiguration.DivisionByZeroHandling.ONE;
      formulaEvaluatorConfiguration0.setDivisionByZeroHandling(formulaEvaluatorConfiguration_DivisionByZeroHandling0);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(constantTerm0, constantTerm0);
      Double double1 = doubleModuloOperator0.evaluate((VariableValueProvider<Double>) null, formulaEvaluatorConfiguration0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("");
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.DivisionByZeroHandling formulaEvaluatorConfiguration_DivisionByZeroHandling0 = FormulaEvaluatorConfiguration.DivisionByZeroHandling.NULL;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = formulaEvaluatorConfiguration0.setDivisionByZeroHandling(formulaEvaluatorConfiguration_DivisionByZeroHandling0);
      Double double0 = new Double((-405.7659));
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(constantTerm0, genericVariable0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>(hashMap0);
      // Undeclared exception!
      try { 
        doubleModuloOperator0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 'null' parameter found for operation/function '%' and parameters 'java.lang.Double@0000000006', 'null'
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Double double0 = new Double(1.0);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(constantTerm0, constantTerm0);
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 9);
      termArray0[0] = (Term<Double>) doubleModuloOperator0;
      termArray0[1] = (Term<Double>) constantTerm0;
      termArray0[2] = (Term<Double>) constantTerm0;
      termArray0[3] = (Term<Double>) constantTerm0;
      termArray0[4] = (Term<Double>) doubleModuloOperator0;
      termArray0[5] = (Term<Double>) constantTerm0;
      termArray0[6] = (Term<Double>) constantTerm0;
      termArray0[7] = (Term<Double>) constantTerm0;
      termArray0[8] = (Term<Double>) doubleModuloOperator0;
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator(doubleModuloOperator0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.DivisionByZeroHandling formulaEvaluatorConfiguration_DivisionByZeroHandling0 = FormulaEvaluatorConfiguration.DivisionByZeroHandling.ONE;
      formulaEvaluatorConfiguration0.setDivisionByZeroHandling(formulaEvaluatorConfiguration_DivisionByZeroHandling0);
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider((BigDecimalVariableValueProvider) null);
      Double double1 = doubleDivisionOperator0.evaluate(doubleVariableValueProvider0, formulaEvaluatorConfiguration0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Double double0 = new Double(0.0);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(constantTerm0, constantTerm0);
      String string0 = doubleModuloOperator0.getOperatorName();
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration1 = formulaEvaluatorConfiguration0.setDivisionNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("com.github.dkellenb.formulaevaluator.term.operator.GenericDivisionOperator");
      GenericVariable<Double> genericVariable1 = new GenericVariable<Double>("");
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(genericVariable0, genericVariable1);
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      Long long0 = new Long(946L);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider1 = bigDecimalVariableValueProvider0.with("com.github.dkellenb.formulaevaluator.term.operator.GenericDivisionOperator", long0);
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider1);
      Double double0 = doubleModuloOperator0.evaluate(doubleVariableValueProvider0, formulaEvaluatorConfiguration1);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      formulaEvaluatorConfiguration0.setDivisionNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>((Double) null);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(constantTerm0, constantTerm0);
      Double double0 = doubleModuloOperator0.evaluate((VariableValueProvider<Double>) null, formulaEvaluatorConfiguration0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("Af!=w");
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 2);
      termArray0[0] = (Term<Double>) genericVariable0;
      termArray0[1] = (Term<Double>) genericVariable0;
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator(genericVariable0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluatorConfiguration.DivisionByZeroHandling formulaEvaluatorConfiguration_DivisionByZeroHandling0 = FormulaEvaluatorConfiguration.DivisionByZeroHandling.NULL;
      formulaEvaluatorConfiguration0.setDivisionByZeroHandling(formulaEvaluatorConfiguration_DivisionByZeroHandling0);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(doubleDivisionOperator0, genericVariable0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put("Af!=w", double0);
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>(hashMap0);
      Double double1 = doubleModuloOperator0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration0);
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Double double0 = new Double(1.0);
      ConstantTerm<Double> constantTerm0 = new ConstantTerm<Double>(double0);
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(constantTerm0, constantTerm0);
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 9);
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator(doubleModuloOperator0, termArray0);
      // Undeclared exception!
      try { 
        doubleDivisionOperator0.printFormula();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericStackableOperatorTerm", e);
      }
  }
}
