/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 12:34:59 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalAdditionOperator;
import com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalNotEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleDivisionOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleGreaterEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleGreaterOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleModuloOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleSmallerEqualOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleSmallerOperator;
import com.github.dkellenb.formulaevaluator.term.value.ConstantTerm;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.DoubleVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericOperatorTerm_ESTest extends GenericOperatorTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ConstantTerm<BigDecimal> constantTerm0 = new ConstantTerm<BigDecimal>(bigDecimal0);
      BigDecimalNotEqualOperator bigDecimalNotEqualOperator0 = new BigDecimalNotEqualOperator(constantTerm0, constantTerm0);
      Term<BigDecimal>[] termArray0 = (Term<BigDecimal>[]) Array.newInstance(Term.class, 3);
      termArray0[0] = (Term<BigDecimal>) bigDecimalNotEqualOperator0;
      termArray0[1] = (Term<BigDecimal>) constantTerm0;
      termArray0[2] = (Term<BigDecimal>) bigDecimalNotEqualOperator0;
      BigDecimalAdditionOperator bigDecimalAdditionOperator0 = new BigDecimalAdditionOperator(bigDecimalNotEqualOperator0, termArray0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      BigDecimal bigDecimal1 = bigDecimalAdditionOperator0.evaluate(bigDecimalVariableValueProvider0, formulaEvaluatorConfiguration0);
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("==");
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(genericVariable0, genericVariable0);
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator(genericVariable0, doubleModuloOperator0);
      DoubleGreaterEqualOperator doubleGreaterEqualOperator0 = new DoubleGreaterEqualOperator(doubleEqualOperator0, doubleModuloOperator0);
      DoubleSmallerOperator doubleSmallerOperator0 = new DoubleSmallerOperator(doubleGreaterEqualOperator0, doubleEqualOperator0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 9);
      termArray0[0] = (Term<Double>) doubleEqualOperator0;
      termArray0[1] = (Term<Double>) genericVariable0;
      termArray0[2] = (Term<Double>) doubleEqualOperator0;
      termArray0[3] = (Term<Double>) genericVariable0;
      termArray0[4] = (Term<Double>) doubleSmallerOperator0;
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.ZERO;
      formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator(doubleSmallerOperator0, termArray0);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      // Undeclared exception!
      try { 
        doubleDivisionOperator0.evaluate(doubleVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericStackableOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("==");
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(genericVariable0, genericVariable0);
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator(genericVariable0, doubleModuloOperator0);
      DoubleGreaterEqualOperator doubleGreaterEqualOperator0 = new DoubleGreaterEqualOperator(doubleEqualOperator0, doubleModuloOperator0);
      DoubleSmallerOperator doubleSmallerOperator0 = new DoubleSmallerOperator(doubleGreaterEqualOperator0, doubleEqualOperator0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 9);
      termArray0[0] = (Term<Double>) doubleEqualOperator0;
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.NULL;
      formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator(doubleSmallerOperator0, termArray0);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalVariableValueProvider0.with("==", bigDecimal0);
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      // Undeclared exception!
      try { 
        doubleDivisionOperator0.evaluate(doubleVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericStackableOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("r(bfh_b^,");
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator(genericVariable0, genericVariable0);
      DoubleSmallerEqualOperator doubleSmallerEqualOperator0 = new DoubleSmallerEqualOperator(doubleEqualOperator0, genericVariable0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>(hashMap0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        doubleSmallerEqualOperator0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 'null' parameter found for operation/function '<=' and parameters 'java.lang.Double@0000000006', 'null'
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("==");
      DoubleModuloOperator doubleModuloOperator0 = new DoubleModuloOperator(genericVariable0, genericVariable0);
      DoubleEqualOperator doubleEqualOperator0 = new DoubleEqualOperator(genericVariable0, doubleModuloOperator0);
      DoubleGreaterEqualOperator doubleGreaterEqualOperator0 = new DoubleGreaterEqualOperator(doubleEqualOperator0, doubleModuloOperator0);
      DoubleSmallerOperator doubleSmallerOperator0 = new DoubleSmallerOperator(doubleGreaterEqualOperator0, doubleEqualOperator0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 9);
      termArray0[0] = (Term<Double>) doubleEqualOperator0;
      termArray0[1] = (Term<Double>) genericVariable0;
      termArray0[2] = (Term<Double>) doubleEqualOperator0;
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.NULL;
      formulaEvaluatorConfiguration0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      termArray0[3] = (Term<Double>) genericVariable0;
      termArray0[4] = (Term<Double>) doubleSmallerOperator0;
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator(doubleSmallerOperator0, termArray0);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      DoubleVariableValueProvider doubleVariableValueProvider0 = new DoubleVariableValueProvider(bigDecimalVariableValueProvider0);
      // Undeclared exception!
      try { 
        doubleDivisionOperator0.evaluate(doubleVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericStackableOperatorTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("");
      DoubleGreaterOperator doubleGreaterOperator0 = new DoubleGreaterOperator(genericVariable0, genericVariable0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      GenericInitOnlyVariableValueProvider<Double> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Double>(hashMap0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      // Undeclared exception!
      try { 
        doubleGreaterOperator0.evaluate(genericInitOnlyVariableValueProvider0, formulaEvaluatorConfiguration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 'null' parameter found for operation/function '>' and parameters 'null', 'null'
         //
         verifyException("com.github.dkellenb.formulaevaluator.term.operator.GenericOperatorTerm", e);
      }
  }
}
