/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:56:41 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.term.operator.doubletype;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.dkellenb.formulaevaluator.term.Term;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleDivisionOperator;
import com.github.dkellenb.formulaevaluator.term.operator.doubletype.DoubleGreaterEqualOperator;
import com.github.dkellenb.formulaevaluator.term.value.GenericVariable;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleOperator_ESTest extends DoubleOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenericVariable<Double> genericVariable0 = new GenericVariable<Double>("j9+GJo");
      Term<Double>[] termArray0 = (Term<Double>[]) Array.newInstance(Term.class, 2);
      DoubleDivisionOperator doubleDivisionOperator0 = new DoubleDivisionOperator(genericVariable0, termArray0);
      Double double0 = doubleDivisionOperator0.zero();
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleGreaterEqualOperator doubleGreaterEqualOperator0 = new DoubleGreaterEqualOperator((Term<Double>) null, (Term<Double>) null);
      Class<Double> class0 = doubleGreaterEqualOperator0.getResultClass();
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleGreaterEqualOperator doubleGreaterEqualOperator0 = new DoubleGreaterEqualOperator((Term<Double>) null, (Term<Double>) null);
      Double double0 = doubleGreaterEqualOperator0.one();
      assertEquals(1.0, (double)double0, 0.01);
  }
}
