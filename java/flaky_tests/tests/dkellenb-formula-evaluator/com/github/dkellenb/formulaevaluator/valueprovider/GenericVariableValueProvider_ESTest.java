/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 12:54:10 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.valueprovider;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.valueprovider.BigDecimalVariableValueProvider;
import com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericVariableValueProvider_ESTest extends GenericVariableValueProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      Double double0 = new Double((-812.432628));
      bigDecimalVariableValueProvider0.with("", double0);
      String string0 = bigDecimalVariableValueProvider0.toString();
      assertEquals("=-812.4326280000000224390532821416855", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      Integer integer0 = new Integer(8);
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.convert(integer0);
      HashMap<String, BigDecimalVariableValueProvider> hashMap1 = new HashMap<String, BigDecimalVariableValueProvider>();
      GenericInitOnlyVariableValueProvider<BigDecimalVariableValueProvider> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<BigDecimalVariableValueProvider>(hashMap1);
      // Undeclared exception!
      try { 
        genericInitOnlyVariableValueProvider0.with((String) null, bigDecimal0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, BigDecimalVariableValueProvider> hashMap0 = new HashMap<String, BigDecimalVariableValueProvider>();
      GenericInitOnlyVariableValueProvider<BigDecimalVariableValueProvider> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<BigDecimalVariableValueProvider>(hashMap0);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        genericInitOnlyVariableValueProvider0.with("=", long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenericInitOnlyVariableValueProvider<Object> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Object>((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        genericInitOnlyVariableValueProvider0.with((String) null, (Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.GenericVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, BigDecimalVariableValueProvider> hashMap0 = new HashMap<String, BigDecimalVariableValueProvider>();
      GenericInitOnlyVariableValueProvider<BigDecimalVariableValueProvider> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<BigDecimalVariableValueProvider>(hashMap0);
      Integer integer0 = Integer.getInteger("YDG8s", (-1012));
      // Undeclared exception!
      try { 
        genericInitOnlyVariableValueProvider0.with("YDG8s", integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      GenericInitOnlyVariableValueProvider<String> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<String>(hashMap0);
      Double double0 = new Double((-1.0));
      // Undeclared exception!
      try { 
        genericInitOnlyVariableValueProvider0.with("yX+Ga*:hW.th", double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenericInitOnlyVariableValueProvider<BigDecimalVariableValueProvider> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<BigDecimalVariableValueProvider>((Map<String, BigDecimalVariableValueProvider>) null);
      // Undeclared exception!
      try { 
        genericInitOnlyVariableValueProvider0.with((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.GenericVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      GenericInitOnlyVariableValueProvider<Object> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<Object>(hashMap0);
      hashMap0.put("", genericInitOnlyVariableValueProvider0);
      // Undeclared exception!
      try { 
        genericInitOnlyVariableValueProvider0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenericInitOnlyVariableValueProvider<BigDecimalVariableValueProvider> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<BigDecimalVariableValueProvider>((Map<String, BigDecimalVariableValueProvider>) null);
      // Undeclared exception!
      try { 
        genericInitOnlyVariableValueProvider0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenericInitOnlyVariableValueProvider<BigDecimalVariableValueProvider> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<BigDecimalVariableValueProvider>((Map<String, BigDecimalVariableValueProvider>) null);
      // Undeclared exception!
      try { 
        genericInitOnlyVariableValueProvider0.getVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.GenericVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider((Map<String, BigDecimal>) null);
      // Undeclared exception!
      try { 
        bigDecimalVariableValueProvider0.with("&*}%6>.2aG", (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.GenericVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      Integer integer0 = new Integer((-1));
      bigDecimalVariableValueProvider0.with("ZtTiv%Vq", integer0);
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.getStoredValue("ZtTiv%Vq");
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider(hashMap0);
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider1 = bigDecimalVariableValueProvider0.with((String) null, (Long) null);
      assertSame(bigDecimalVariableValueProvider0, bigDecimalVariableValueProvider1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenericInitOnlyVariableValueProvider<String> genericInitOnlyVariableValueProvider0 = new GenericInitOnlyVariableValueProvider<String>((Map<String, String>) null);
      // Undeclared exception!
      try { 
        genericInitOnlyVariableValueProvider0.with("", (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.GenericVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider1 = bigDecimalVariableValueProvider0.with("", (BigDecimal) null);
      assertSame(bigDecimalVariableValueProvider1, bigDecimalVariableValueProvider0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = new BigDecimalVariableValueProvider((Map<String, BigDecimal>) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        bigDecimalVariableValueProvider0.with("com.github.dkellenb.formulaevaluator.valueprovider.GenericInitOnlyVariableValueProvider", bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.valueprovider.GenericVariableValueProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      BigDecimal bigDecimal0 = bigDecimalVariableValueProvider0.getStoredValue("ZtTiv%Vq");
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      String string0 = bigDecimalVariableValueProvider0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider1 = bigDecimalVariableValueProvider0.with("");
      assertSame(bigDecimalVariableValueProvider1, bigDecimalVariableValueProvider0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigDecimalVariableValueProvider bigDecimalVariableValueProvider0 = BigDecimalVariableValueProvider.createValueProvider();
      Set<String> set0 = bigDecimalVariableValueProvider0.getVariables();
      assertTrue(set0.isEmpty());
  }
}
