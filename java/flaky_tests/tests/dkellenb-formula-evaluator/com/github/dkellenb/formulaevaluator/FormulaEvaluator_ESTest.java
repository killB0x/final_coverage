/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 12:31:18 GMT 2022
 */

package com.github.dkellenb.formulaevaluator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.FormulaEvaluator;
import com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.EmptyStackException;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormulaEvaluator_ESTest extends FormulaEvaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("Unsupp*ortd consant ");
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setMultiplicationNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      assertSame(formulaEvaluator1, formulaEvaluator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create((String) null);
      String string0 = formulaEvaluator0.getFormula();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("");
      String string0 = formulaEvaluator0.getFormula();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("");
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setResultScale(0);
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = formulaEvaluator1.getConfiguration();
      assertEquals(0, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("]=V6q$3M^");
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setResultScale((-759));
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = formulaEvaluator1.getConfiguration();
      assertEquals((-759), formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("0");
      BigDecimal bigDecimal0 = formulaEvaluator0.evalRoundedAndScaled();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("com.github.dkellenb.formulaevaluator.DoubleCachedFormulaCompiler");
      Integer integer0 = new Integer((-1006));
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.and("com.github.dkellenb.formulaevaluator.DoubleCachedFormulaCompiler", integer0);
      BigDecimal bigDecimal0 = formulaEvaluator1.evalRoundedAndScaled();
      assertEquals((byte)18, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("com.github.dkellenb.formulaevaluator.DoubleCachedFormulaCompiler");
      Integer integer0 = new Integer((-1688));
      formulaEvaluator0.and("com.github.dkellenb.formulaevaluator.DoubleCachedFormulaCompiler", integer0);
      BigDecimal bigDecimal0 = formulaEvaluator0.evalRounded();
      assertEquals((byte)104, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("com.github.dkellenb.formulaevaluator.DoubleCachedFormulaCompiler");
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      BiFunction<BigDecimal, Object, BigDecimal> biFunction0 = (BiFunction<BigDecimal, Object, BigDecimal>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("com.github.dkellenb.formulaevaluator.DoubleCachedFormulaCompiler", bigDecimal0, biFunction0);
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.with((Map<String, BigDecimal>) hashMap0);
      BigDecimal bigDecimal1 = formulaEvaluator1.evalRounded();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("1");
      BigDecimal bigDecimal0 = formulaEvaluator0.evalRounded();
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSmallerEqualOperator");
      BigDecimal bigDecimal0 = new BigDecimal((-1472));
      formulaEvaluator0.and("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSmallerEqualOperator", bigDecimal0);
      BigDecimal bigDecimal1 = formulaEvaluator0.evalPrecise();
      assertEquals((short) (-1472), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("com.github.dkellenb.formulaevaluator.DoubleCachedFormulaCompiler");
      Integer integer0 = new Integer(0);
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.and("com.github.dkellenb.formulaevaluator.DoubleCachedFormulaCompiler", integer0);
      BigDecimal bigDecimal0 = formulaEvaluator1.evalPrecise();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((long) 671);
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("IDENTITY");
      formulaEvaluator0.with("IDENTITY", bigDecimal0);
      BigDecimal bigDecimal1 = formulaEvaluator0.evalPrecise();
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator(":<!*sQl/H LA_fccR ");
      // Undeclared exception!
      try { 
        formulaEvaluator0.with((Map<String, BigDecimal>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("");
      // Undeclared exception!
      try { 
        formulaEvaluator0.setRoundingMode((RoundingMode) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RoundingMode cannot be null
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("");
      // Undeclared exception!
      try { 
        formulaEvaluator0.setResultPrecision((-3612));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Digits < 0
         //
         verifyException("java.math.MathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("VG$_");
      // Undeclared exception!
      try { 
        formulaEvaluator0.setPrecision((-2052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Digits < 0
         //
         verifyException("java.math.MathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("");
      // Undeclared exception!
      try { 
        formulaEvaluator0.setPlusMinusNullHandling((FormulaEvaluatorConfiguration.BasicOperationsNullHandling) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Handling is not allowed to be undefined
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("|Ly2?");
      // Undeclared exception!
      try { 
        formulaEvaluator0.setDivisionNullHandling((FormulaEvaluatorConfiguration.BasicOperationsNullHandling) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Handling is not allowed to be undefined
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("Handling is not allowed to be undefined");
      // Undeclared exception!
      try { 
        formulaEvaluator0.setDivisionByZeroHandling((FormulaEvaluatorConfiguration.DivisionByZeroHandling) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Handling is not allowed to be undefined
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("]ubGC=+");
      // Undeclared exception!
      try { 
        formulaEvaluator0.setDefaultNullHandling((FormulaEvaluatorConfiguration.DefaultNullHandling) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Handling is not allowed to be undefined
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator((String) null);
      // Undeclared exception!
      try { 
        formulaEvaluator0.setConfiguration((FormulaEvaluatorConfiguration) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula evaluator configuration should never be null
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("-{o?");
      // Undeclared exception!
      try { 
        formulaEvaluator0.setCalculationPrecision((-1051));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Digits < 0
         //
         verifyException("java.math.MathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        formulaEvaluator0.setBaseCalculationType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only BigDecimal or Double as base calculation types are supported
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("*dmRl");
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalRoundedAndScaled();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown operator '' at position 5
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaCompiler$Tokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("");
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalRoundedAndScaled();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("/7Roua ");
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalRoundedAndScaled();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator((String) null);
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalRoundedAndScaled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaCompiler$Tokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator(":");
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalRounded();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown operator ':' at position 1
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaCompiler$Tokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("");
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalRounded();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("4 ");
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalRounded();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("Ydt");
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalRounded();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown operator, function or unregistered variable: Ydt
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator((String) null);
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalRounded();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaCompiler$Tokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("com.github.dkellenb.formulaevaluator.FormulaEvaluatorConfiguration$DefaultNullHandling");
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalPrecise();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown operator '$' at position 67
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaCompiler$Tokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("");
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalPrecise();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("4 ");
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalPrecise();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create((String) null);
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalPrecise();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaCompiler$Tokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("Ydt");
      formulaEvaluator0.getConfiguration();
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = formulaEvaluator0.getConfiguration();
      assertEquals(7, formulaEvaluatorConfiguration0.getResultScale());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("");
      Integer integer0 = new Integer(663);
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.with("", integer0);
      assertSame(formulaEvaluator0, formulaEvaluator1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("NULL");
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.and("NULL", (Integer) null);
      BigDecimal bigDecimal0 = formulaEvaluator1.evalPrecise();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSmallerEqualOperator");
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalPrecise();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown operator, function or unregistered variable: com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSmallerEqualOperator
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSmallerEqualOperator");
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration();
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setConfiguration(formulaEvaluatorConfiguration0);
      assertSame(formulaEvaluator0, formulaEvaluator1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("rJBhzdnJX");
      FormulaEvaluatorConfiguration formulaEvaluatorConfiguration0 = new FormulaEvaluatorConfiguration(false);
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setConfiguration(formulaEvaluatorConfiguration0);
      assertEquals("rJBhzdnJX", formulaEvaluator1.getFormula());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("CEILING");
      FormulaEvaluatorConfiguration.DivisionByZeroHandling formulaEvaluatorConfiguration_DivisionByZeroHandling0 = FormulaEvaluatorConfiguration.DivisionByZeroHandling.ONE;
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setDivisionByZeroHandling(formulaEvaluatorConfiguration_DivisionByZeroHandling0);
      // Undeclared exception!
      try { 
        formulaEvaluator1.evalRoundedAndScaled();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown operator, function or unregistered variable: CEILING
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("B");
      formulaEvaluator0.with("B", (BigDecimal) null);
      BigDecimal bigDecimal0 = formulaEvaluator0.evalRoundedAndScaled();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(3784);
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("CEILING");
      formulaEvaluator0.and("CEILING", integer0);
      BigDecimal bigDecimal0 = formulaEvaluator0.evalRoundedAndScaled();
      assertEquals((short)3784, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("Pi");
      formulaEvaluator0.with("Pi", (Integer) null);
      BigDecimal bigDecimal0 = formulaEvaluator0.evalRounded();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("com.github.dkellenb.formulaevaluator.DoubleCachedFormulaCompiler");
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.INHERIT;
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setDivisionNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      assertSame(formulaEvaluator1, formulaEvaluator0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSmallerEqualOperator");
      FormulaEvaluatorConfiguration.BasicOperationsNullHandling formulaEvaluatorConfiguration_BasicOperationsNullHandling0 = FormulaEvaluatorConfiguration.BasicOperationsNullHandling.IDENTITY;
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setPlusMinusNullHandling(formulaEvaluatorConfiguration_BasicOperationsNullHandling0);
      assertSame(formulaEvaluator1, formulaEvaluator0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("dt");
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setRoundingMode(roundingMode0);
      assertSame(formulaEvaluator1, formulaEvaluator0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("");
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setPrecision(0);
      assertSame(formulaEvaluator0, formulaEvaluator1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("com.github.dkellenb.formulaevaluator.DoubleCachedFormulaCompiler");
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setCalculationPrecision(1);
      Integer integer0 = new Integer(1718);
      FormulaEvaluator formulaEvaluator2 = formulaEvaluator1.and("com.github.dkellenb.formulaevaluator.DoubleCachedFormulaCompiler", integer0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      formulaEvaluator2.setRoundingMode(roundingMode0);
      // Undeclared exception!
      try { 
        formulaEvaluator0.evalRounded();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("i8");
      String string0 = formulaEvaluator0.getFormula();
      assertEquals("i8", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("dt");
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setResultPrecision(1165);
      assertSame(formulaEvaluator0, formulaEvaluator1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSmallerEqualOperator");
      Class<BigDecimal> class0 = BigDecimal.class;
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setBaseCalculationType(class0);
      assertEquals("com.github.dkellenb.formulaevaluator.term.operator.bigdecimal.BigDecimalSmallerEqualOperator", formulaEvaluator1.getFormula());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(3784);
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("CEILING");
      formulaEvaluator0.and("CEILING", integer0);
      BigDecimal bigDecimal0 = formulaEvaluator0.evalRounded();
      assertEquals((byte) (-56), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = FormulaEvaluator.create("com.github.dkellenb.formulaevaluator.DoubleCachedFormulaCompiler");
      FormulaEvaluatorConfiguration.DefaultNullHandling formulaEvaluatorConfiguration_DefaultNullHandling0 = FormulaEvaluatorConfiguration.DefaultNullHandling.ZERO;
      FormulaEvaluator formulaEvaluator1 = formulaEvaluator0.setDefaultNullHandling(formulaEvaluatorConfiguration_DefaultNullHandling0);
      assertSame(formulaEvaluator1, formulaEvaluator0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FormulaEvaluator formulaEvaluator0 = new FormulaEvaluator("");
      // Undeclared exception!
      try { 
        formulaEvaluator0.setMultiplicationNullHandling((FormulaEvaluatorConfiguration.BasicOperationsNullHandling) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Handling is not allowed to be undefined
         //
         verifyException("com.github.dkellenb.formulaevaluator.FormulaEvaluator", e);
      }
  }
}
