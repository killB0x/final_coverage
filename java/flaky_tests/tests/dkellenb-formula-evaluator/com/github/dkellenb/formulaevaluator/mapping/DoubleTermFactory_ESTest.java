/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:16:09 GMT 2022
 */

package com.github.dkellenb.formulaevaluator.mapping;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.dkellenb.formulaevaluator.mapping.DoubleTermFactory;
import com.github.dkellenb.formulaevaluator.term.Term;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleTermFactory_ESTest extends DoubleTermFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleTermFactory doubleTermFactory0 = DoubleTermFactory.getInstance();
      Term<Double> term0 = doubleTermFactory0.createFixedValueTerm("3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679");
      assertNotNull(term0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleTermFactory doubleTermFactory0 = DoubleTermFactory.getInstance();
      // Undeclared exception!
      try { 
        doubleTermFactory0.createFixedValueTerm((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleTermFactory doubleTermFactory0 = DoubleTermFactory.getInstance();
      DoubleTermFactory doubleTermFactory1 = DoubleTermFactory.getInstance();
      assertSame(doubleTermFactory1, doubleTermFactory0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleTermFactory doubleTermFactory0 = DoubleTermFactory.getInstance();
      // Undeclared exception!
      try { 
        doubleTermFactory0.createFixedValueTerm("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
