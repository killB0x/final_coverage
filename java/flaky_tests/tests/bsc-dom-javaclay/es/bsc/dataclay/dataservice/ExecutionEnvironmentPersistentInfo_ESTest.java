/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 14:05:39 GMT 2022
 */

package es.bsc.dataclay.dataservice;

import org.junit.Test;
import static org.junit.Assert.*;
import es.bsc.dataclay.dataservice.ExecutionEnvironmentPersistentInfo;
import es.bsc.dataclay.util.ids.ExecutionEnvironmentID;
import es.bsc.dataclay.util.ids.StorageLocationID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutionEnvironmentPersistentInfo_ESTest extends ExecutionEnvironmentPersistentInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StorageLocationID storageLocationID0 = new StorageLocationID();
      ExecutionEnvironmentPersistentInfo executionEnvironmentPersistentInfo0 = new ExecutionEnvironmentPersistentInfo((ExecutionEnvironmentID) null, storageLocationID0);
      StorageLocationID storageLocationID1 = executionEnvironmentPersistentInfo0.getStorageLocationID();
      assertSame(storageLocationID1, storageLocationID0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StorageLocationID storageLocationID0 = new StorageLocationID();
      ExecutionEnvironmentPersistentInfo executionEnvironmentPersistentInfo0 = new ExecutionEnvironmentPersistentInfo((ExecutionEnvironmentID) null, storageLocationID0);
      ExecutionEnvironmentID executionEnvironmentID0 = executionEnvironmentPersistentInfo0.getExecutionEnvironmentID();
      assertNull(executionEnvironmentID0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StorageLocationID storageLocationID0 = new StorageLocationID();
      ExecutionEnvironmentPersistentInfo executionEnvironmentPersistentInfo0 = new ExecutionEnvironmentPersistentInfo((ExecutionEnvironmentID) null, storageLocationID0);
      executionEnvironmentPersistentInfo0.setExecutionEnvironmentID((ExecutionEnvironmentID) null);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StorageLocationID storageLocationID0 = new StorageLocationID();
      ExecutionEnvironmentPersistentInfo executionEnvironmentPersistentInfo0 = new ExecutionEnvironmentPersistentInfo((ExecutionEnvironmentID) null, storageLocationID0);
      executionEnvironmentPersistentInfo0.setStorageLocationID(storageLocationID0);
      assertEquals("00000000-0100-4000-8200-000003000000", storageLocationID0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExecutionEnvironmentID executionEnvironmentID0 = new ExecutionEnvironmentID();
      ExecutionEnvironmentPersistentInfo executionEnvironmentPersistentInfo0 = new ExecutionEnvironmentPersistentInfo(executionEnvironmentID0, (StorageLocationID) null);
      StorageLocationID storageLocationID0 = executionEnvironmentPersistentInfo0.getStorageLocationID();
      assertNull(storageLocationID0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExecutionEnvironmentID executionEnvironmentID0 = new ExecutionEnvironmentID();
      StorageLocationID storageLocationID0 = new StorageLocationID(executionEnvironmentID0.id);
      ExecutionEnvironmentPersistentInfo executionEnvironmentPersistentInfo0 = new ExecutionEnvironmentPersistentInfo(executionEnvironmentID0, storageLocationID0);
      ExecutionEnvironmentID executionEnvironmentID1 = executionEnvironmentPersistentInfo0.getExecutionEnvironmentID();
      assertSame(executionEnvironmentID1, executionEnvironmentID0);
  }
}
