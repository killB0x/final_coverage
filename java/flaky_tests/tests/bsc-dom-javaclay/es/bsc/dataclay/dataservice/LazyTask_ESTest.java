/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 14:16:38 GMT 2022
 */

package es.bsc.dataclay.dataservice;

import org.junit.Test;
import static org.junit.Assert.*;
import es.bsc.dataclay.dataservice.LazyTask;
import es.bsc.dataclay.util.ids.ImplementationID;
import es.bsc.dataclay.util.ids.MetaClassID;
import es.bsc.dataclay.util.ids.ObjectID;
import es.bsc.dataclay.util.ids.SessionID;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LazyTask_ESTest extends LazyTask_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SessionID sessionID0 = new SessionID((String) null);
      ObjectID objectID0 = new ObjectID((String) null);
      ImplementationID implementationID0 = new ImplementationID();
      MetaClassID metaClassID0 = new MetaClassID((String) null);
      LazyTask lazyTask0 = new LazyTask(sessionID0, objectID0, implementationID0, metaClassID0);
      SessionID sessionID1 = lazyTask0.getSessionID();
      assertEquals("00000000-0100-4000-8200-000003000000", sessionID1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      SessionID sessionID0 = new SessionID(uUID0);
      ObjectID objectID0 = new ObjectID();
      ImplementationID implementationID0 = new ImplementationID(objectID0.id);
      MetaClassID metaClassID0 = new MetaClassID();
      LazyTask lazyTask0 = new LazyTask(sessionID0, objectID0, implementationID0, metaClassID0);
      ObjectID objectID1 = lazyTask0.getObjectID();
      assertSame(objectID1, objectID0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SessionID sessionID0 = new SessionID();
      ObjectID objectID0 = new ObjectID(sessionID0.id);
      ImplementationID implementationID0 = new ImplementationID(sessionID0.id);
      MetaClassID metaClassID0 = new MetaClassID("");
      LazyTask lazyTask0 = new LazyTask(sessionID0, objectID0, implementationID0, metaClassID0);
      ImplementationID implementationID1 = lazyTask0.getImplementationID();
      assertSame(implementationID1, implementationID0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      SessionID sessionID0 = new SessionID(uUID0);
      ObjectID objectID0 = new ObjectID(sessionID0.id);
      ImplementationID implementationID0 = new ImplementationID("B");
      LazyTask lazyTask0 = new LazyTask(sessionID0, objectID0, implementationID0, (MetaClassID) null);
      MetaClassID metaClassID0 = lazyTask0.getClassID();
      assertNull(metaClassID0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      SessionID sessionID0 = new SessionID(uUID0);
      ObjectID objectID0 = new ObjectID();
      ImplementationID implementationID0 = new ImplementationID(objectID0.id);
      MetaClassID metaClassID0 = new MetaClassID();
      LazyTask lazyTask0 = new LazyTask(sessionID0, objectID0, implementationID0, metaClassID0);
      lazyTask0.setSessionID(sessionID0);
      assertEquals("00000000-0100-4000-8200-000003000000", sessionID0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImplementationID implementationID0 = new ImplementationID();
      MetaClassID metaClassID0 = new MetaClassID();
      LazyTask lazyTask0 = new LazyTask((SessionID) null, (ObjectID) null, implementationID0, metaClassID0);
      ObjectID objectID0 = lazyTask0.getObjectID();
      assertNull(objectID0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImplementationID implementationID0 = new ImplementationID();
      MetaClassID metaClassID0 = new MetaClassID();
      LazyTask lazyTask0 = new LazyTask((SessionID) null, (ObjectID) null, implementationID0, metaClassID0);
      SessionID sessionID0 = lazyTask0.getSessionID();
      assertNull(sessionID0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SessionID sessionID0 = new SessionID();
      ObjectID objectID0 = new ObjectID("");
      ImplementationID implementationID0 = new ImplementationID();
      MetaClassID metaClassID0 = new MetaClassID("");
      LazyTask lazyTask0 = new LazyTask(sessionID0, objectID0, implementationID0, metaClassID0);
      lazyTask0.setObjectID(objectID0);
      assertEquals("04000000-0500-4000-8600-000007000000", objectID0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      SessionID sessionID0 = new SessionID(uUID0);
      ObjectID objectID0 = new ObjectID();
      ImplementationID implementationID0 = new ImplementationID(objectID0.id);
      MetaClassID metaClassID0 = new MetaClassID();
      LazyTask lazyTask0 = new LazyTask(sessionID0, objectID0, implementationID0, metaClassID0);
      lazyTask0.setImplementationID(implementationID0);
      assertEquals("04000000-0500-4000-8600-000007000000", implementationID0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SessionID sessionID0 = new SessionID();
      ObjectID objectID0 = new ObjectID();
      ImplementationID implementationID0 = new ImplementationID("");
      MetaClassID metaClassID0 = new MetaClassID("");
      LazyTask lazyTask0 = new LazyTask(sessionID0, objectID0, implementationID0, metaClassID0);
      MetaClassID metaClassID1 = lazyTask0.getClassID();
      assertSame(metaClassID1, metaClassID0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SessionID sessionID0 = new SessionID();
      ObjectID objectID0 = new ObjectID();
      MetaClassID metaClassID0 = new MetaClassID(objectID0.id);
      LazyTask lazyTask0 = new LazyTask(sessionID0, objectID0, (ImplementationID) null, metaClassID0);
      ImplementationID implementationID0 = lazyTask0.getImplementationID();
      assertNull(implementationID0);
  }
}
