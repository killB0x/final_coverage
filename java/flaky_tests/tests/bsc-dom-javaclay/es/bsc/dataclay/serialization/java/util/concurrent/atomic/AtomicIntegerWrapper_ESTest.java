/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:52:00 GMT 2022
 */

package es.bsc.dataclay.serialization.java.util.concurrent.atomic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.DataClayObject;
import es.bsc.dataclay.serialization.buffer.DataClayByteBuffer;
import es.bsc.dataclay.serialization.buffer.GrpcByteBuffer;
import es.bsc.dataclay.serialization.buffer.JavaByteBuffer;
import es.bsc.dataclay.serialization.java.util.concurrent.atomic.AtomicIntegerWrapper;
import es.bsc.dataclay.util.DataClayObjectMetaData;
import es.bsc.dataclay.util.ReferenceCounting;
import es.bsc.dataclay.util.ids.MetaClassID;
import java.nio.BufferUnderflowException;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.ListIterator;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicIntegerWrapper_ESTest extends AtomicIntegerWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper();
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      atomicIntegerWrapper0.setAtomicInteger(atomicInteger0);
      byte[] byteArray0 = new byte[0];
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      IdentityHashMap<Object, Integer> identityHashMap1 = new IdentityHashMap<Object, Integer>();
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      atomicIntegerWrapper0.serialize(javaByteBuffer0, true, identityHashMap0, identityHashMap1, listIterator0, referenceCounting0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper(atomicInteger0);
      AtomicInteger atomicInteger1 = atomicIntegerWrapper0.getJavaObject();
      assertEquals("0", atomicInteger1.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper();
      AtomicInteger atomicInteger0 = new AtomicInteger((-1082));
      atomicIntegerWrapper0.setAtomicInteger(atomicInteger0);
      atomicInteger0.getAndSet(7);
      AtomicInteger atomicInteger1 = atomicIntegerWrapper0.getJavaObject();
      assertEquals(7.0, atomicInteger1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-382));
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper(atomicInteger0);
      AtomicInteger atomicInteger1 = atomicIntegerWrapper0.getJavaObject();
      assertEquals((-382), atomicInteger1.intValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper();
      AtomicInteger atomicInteger0 = atomicIntegerWrapper0.getAtomicInteger();
      assertNull(atomicInteger0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper();
      AtomicInteger atomicInteger0 = new AtomicInteger((-1082));
      atomicIntegerWrapper0.setAtomicInteger(atomicInteger0);
      atomicInteger0.getAndSet(7);
      AtomicInteger atomicInteger1 = atomicIntegerWrapper0.getAtomicInteger();
      assertEquals(7.0F, atomicInteger1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-382));
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper(atomicInteger0);
      AtomicInteger atomicInteger1 = atomicIntegerWrapper0.getAtomicInteger();
      assertEquals("-382", atomicInteger1.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper();
      byte[] byteArray0 = new byte[0];
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      IdentityHashMap<Integer, Object> identityHashMap0 = new IdentityHashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        atomicIntegerWrapper0.deserialize(javaByteBuffer0, hashMap0, (DataClayObjectMetaData) null, identityHashMap0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      IdentityHashMap<Integer, Object> identityHashMap1 = new IdentityHashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        atomicIntegerWrapper0.deserialize((DataClayByteBuffer) null, identityHashMap0, (DataClayObjectMetaData) null, identityHashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.java.util.concurrent.atomic.AtomicIntegerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper();
      boolean boolean0 = atomicIntegerWrapper0.isNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper();
      AtomicInteger atomicInteger0 = new AtomicInteger((-1472));
      atomicIntegerWrapper0.setAtomicInteger(atomicInteger0);
      boolean boolean0 = atomicIntegerWrapper0.isNull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger();
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper(atomicInteger0);
      AtomicInteger atomicInteger1 = atomicIntegerWrapper0.getAtomicInteger();
      assertEquals("0", atomicInteger1.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper();
      byte[] byteArray0 = new byte[0];
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      IdentityHashMap<Object, Integer> identityHashMap1 = new IdentityHashMap<Object, Integer>();
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      // Undeclared exception!
      try { 
        atomicIntegerWrapper0.serialize(javaByteBuffer0, true, identityHashMap0, identityHashMap1, listIterator0, referenceCounting0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.java.util.concurrent.atomic.AtomicIntegerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper();
      AtomicInteger atomicInteger0 = atomicIntegerWrapper0.getJavaObject();
      assertNull(atomicInteger0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper();
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      atomicIntegerWrapper0.deserialize(grpcByteBuffer0, identityHashMap0, (DataClayObjectMetaData) null, hashMap0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AtomicIntegerWrapper atomicIntegerWrapper0 = new AtomicIntegerWrapper();
      boolean boolean0 = atomicIntegerWrapper0.isImmutable();
      assertFalse(boolean0);
  }
}
