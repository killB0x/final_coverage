/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:16:53 GMT 2022
 */

package es.bsc.dataclay.serialization.java.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.DataClayObject;
import es.bsc.dataclay.serialization.buffer.DataClayByteBuffer;
import es.bsc.dataclay.serialization.buffer.JavaByteBuffer;
import es.bsc.dataclay.serialization.java.lang.ByteWrapper;
import es.bsc.dataclay.util.DataClayObjectMetaData;
import es.bsc.dataclay.util.ReferenceCounting;
import es.bsc.dataclay.util.ids.MetaClassID;
import java.nio.BufferUnderflowException;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.ListIterator;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteWrapper_ESTest extends ByteWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper();
      ByteWrapper byteWrapper1 = new ByteWrapper();
      // Undeclared exception!
      try { 
        byteWrapper1.equals(byteWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.java.lang.ByteWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper();
      Byte byte0 = new Byte((byte) (-5));
      byteWrapper0.setByte(byte0);
      byteWrapper0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper();
      Byte byte0 = new Byte((byte)82);
      byteWrapper0.setByte(byte0);
      boolean boolean0 = byteWrapper0.equals(byteWrapper0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper();
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer();
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      // Undeclared exception!
      try { 
        byteWrapper0.serialize(javaByteBuffer0, false, hashMap0, identityHashMap0, (ListIterator<DataClayObject>) null, referenceCounting0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.java.lang.ByteWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper();
      byte[] byteArray0 = new byte[0];
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        byteWrapper0.deserialize(javaByteBuffer0, identityHashMap0, (DataClayObjectMetaData) null, hashMap0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        byteWrapper0.deserialize((DataClayByteBuffer) null, identityHashMap0, (DataClayObjectMetaData) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.java.lang.ByteWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper();
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer();
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        byteWrapper0.deserialize(javaByteBuffer0, hashMap0, (DataClayObjectMetaData) null, hashMap1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/protobuf/InvalidProtocolBufferException
         //
         verifyException("es.bsc.dataclay.serialization.java.lang.ByteWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper();
      boolean boolean0 = byteWrapper0.isNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper();
      Byte byte0 = new Byte((byte) (-5));
      byteWrapper0.setByte(byte0);
      boolean boolean0 = byteWrapper0.isNull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper();
      UUID uUID0 = MockUUID.randomUUID();
      MetaClassID metaClassID0 = new MetaClassID(uUID0);
      boolean boolean0 = byteWrapper0.equals(metaClassID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper();
      // Undeclared exception!
      try { 
        byteWrapper0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.java.lang.ByteWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper();
      boolean boolean0 = byteWrapper0.isImmutable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteWrapper byteWrapper0 = new ByteWrapper((Byte) null);
      Object object0 = byteWrapper0.getJavaObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      ByteWrapper byteWrapper0 = new ByteWrapper(byte0);
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer();
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>((byte)1, (byte)1);
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      // Undeclared exception!
      try { 
        byteWrapper0.serialize(javaByteBuffer0, true, hashMap0, identityHashMap0, (ListIterator<DataClayObject>) null, referenceCounting0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class es.bsc.dataclay.serialization.lib.DataClaySerializationLib
         //
         verifyException("es.bsc.dataclay.serialization.java.lang.ByteWrapper", e);
      }
  }
}
