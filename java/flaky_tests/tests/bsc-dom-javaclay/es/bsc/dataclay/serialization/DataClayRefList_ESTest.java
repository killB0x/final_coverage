/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:24:06 GMT 2022
 */

package es.bsc.dataclay.serialization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.DataClayObject;
import es.bsc.dataclay.serialization.DataClayRefList;
import es.bsc.dataclay.serialization.buffer.DataClayByteBuffer;
import es.bsc.dataclay.serialization.buffer.GrpcByteBuffer;
import es.bsc.dataclay.serialization.buffer.JavaByteBuffer;
import es.bsc.dataclay.util.DataClayObjectMetaData;
import es.bsc.dataclay.util.ReferenceCounting;
import es.bsc.dataclay.util.ids.ExecutionEnvironmentID;
import es.bsc.dataclay.util.ids.MetaClassID;
import es.bsc.dataclay.util.ids.ObjectID;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataClayRefList_ESTest extends DataClayRefList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      ObjectID objectID0 = new ObjectID();
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)79;
      byteArray0[3] = (byte)79;
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      IdentityHashMap<Object, Integer> identityHashMap1 = new IdentityHashMap<Object, Integer>();
      DataClayRefList dataClayRefList0 = new DataClayRefList(linkedList0);
      DataClayObjectMetaData dataClayObjectMetaData0 = null;
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap2 = new IdentityHashMap<MetaClassID, byte[]>();
      // Undeclared exception!
      try { 
        dataClayRefList0.deserialize(javaByteBuffer0, identityHashMap2, (DataClayObjectMetaData) null, hashMap0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      Integer integer0 = new Integer(10);
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      linkedList0.clone();
      ReferenceCounting referenceCounting1 = new ReferenceCounting();
      DataClayRefList dataClayRefList0 = new DataClayRefList(linkedList0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      IdentityHashMap<Integer, Object> identityHashMap1 = new IdentityHashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        dataClayRefList0.deserialize((DataClayByteBuffer) null, identityHashMap0, (DataClayObjectMetaData) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.DataClayRefList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      String string0 = "";
      ObjectID objectID0 = new ObjectID("");
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      boolean boolean0 = true;
      Map<MetaClassID, byte[]> map0 = null;
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      Integer integer0 = new Integer(10);
      identityHashMap0.putIfAbsent(objectID0, integer0);
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      objectID0.serialize(grpcByteBuffer0, true, (Map<MetaClassID, byte[]>) null, identityHashMap0, listIterator0, referenceCounting0);
      linkedList0.clone();
      linkedList0.add(objectID0);
      DataClayRefList dataClayRefList0 = new DataClayRefList(linkedList0);
      dataClayRefList0.getReferences();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer1 = new Integer(739);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>(10);
      hashMap1.put((Integer) null, objectID0);
      dataClayRefList0.deserialize(grpcByteBuffer0, (Map<MetaClassID, byte[]>) null, (DataClayObjectMetaData) null, hashMap0);
      dataClayRefList0.getReferences();
      IdentityHashMap<Integer, ObjectID> identityHashMap1 = new IdentityHashMap<Integer, ObjectID>();
      DataClayObjectMetaData dataClayObjectMetaData0 = null;
      try {
        dataClayObjectMetaData0 = new DataClayObjectMetaData();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataClayRefList dataClayRefList0 = new DataClayRefList();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap1 = new IdentityHashMap<MetaClassID, byte[]>();
      // Undeclared exception!
      try { 
        dataClayRefList0.deserialize(javaByteBuffer0, identityHashMap1, (DataClayObjectMetaData) null, hashMap0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataClayRefList dataClayRefList0 = new DataClayRefList();
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      linkedList0.spliterator();
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-27);
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      DataClayObjectMetaData dataClayObjectMetaData0 = null;
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Map<MetaClassID, byte[]> map0 = null;
      // Undeclared exception!
      try { 
        dataClayRefList0.deserialize(javaByteBuffer0, (Map<MetaClassID, byte[]>) null, (DataClayObjectMetaData) null, hashMap0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataClayRefList dataClayRefList0 = new DataClayRefList();
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      linkedList0.spliterator();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-27);
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      DataClayRefList dataClayRefList1 = new DataClayRefList(linkedList0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap1 = new IdentityHashMap<MetaClassID, byte[]>();
      // Undeclared exception!
      try { 
        dataClayRefList1.deserialize(javaByteBuffer0, identityHashMap1, (DataClayObjectMetaData) null, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -437918464
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      String string0 = "";
      ObjectID objectID0 = new ObjectID("");
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      Map<MetaClassID, byte[]> map0 = null;
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      Integer integer0 = new Integer(10);
      identityHashMap0.putIfAbsent(objectID0, integer0);
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      objectID0.serialize(grpcByteBuffer0, true, (Map<MetaClassID, byte[]>) null, identityHashMap0, listIterator0, referenceCounting0);
      linkedList0.clone();
      linkedList0.add(objectID0);
      DataClayRefList dataClayRefList0 = new DataClayRefList(linkedList0);
      dataClayRefList0.getReferences();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer1 = new Integer(10);
      hashMap0.put(integer1, objectID0);
      dataClayRefList0.deserialize(grpcByteBuffer0, (Map<MetaClassID, byte[]>) null, (DataClayObjectMetaData) null, hashMap0);
      dataClayRefList0.getReferences();
      boolean boolean0 = true;
      IdentityHashMap<Integer, ObjectID> identityHashMap1 = new IdentityHashMap<Integer, ObjectID>();
      DataClayObjectMetaData dataClayObjectMetaData0 = null;
      try {
        dataClayObjectMetaData0 = new DataClayObjectMetaData();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataClayRefList dataClayRefList0 = new DataClayRefList();
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      linkedList0.spliterator();
      Integer integer0 = new Integer((-650));
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)10;
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      ReferenceCounting referenceCounting1 = new ReferenceCounting();
      Object object0 = linkedList0.clone();
      DataClayRefList dataClayRefList1 = new DataClayRefList(linkedList0);
      dataClayRefList0.getReferences();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer1 = new Integer(773);
      hashMap0.put(integer1, object0);
      HashMap<MetaClassID, byte[]> hashMap1 = new HashMap<MetaClassID, byte[]>();
      // Undeclared exception!
      try { 
        dataClayRefList0.deserialize(javaByteBuffer0, hashMap1, (DataClayObjectMetaData) null, hashMap0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      ObjectID objectID0 = new ObjectID("");
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      Integer integer0 = new Integer(10);
      identityHashMap0.putIfAbsent(objectID0, integer0);
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      objectID0.serialize(grpcByteBuffer0, true, (Map<MetaClassID, byte[]>) null, identityHashMap0, listIterator0, referenceCounting0);
      linkedList0.clone();
      linkedList0.add(objectID0);
      DataClayRefList dataClayRefList0 = new DataClayRefList(linkedList0);
      dataClayRefList0.getReferences();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      dataClayRefList0.deserialize(grpcByteBuffer0, (Map<MetaClassID, byte[]>) null, (DataClayObjectMetaData) null, hashMap0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      linkedList0.clone();
      DataClayRefList dataClayRefList0 = new DataClayRefList(linkedList0);
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      IdentityHashMap<Integer, Object> identityHashMap1 = new IdentityHashMap<Integer, Object>();
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer();
      dataClayRefList0.deserialize(javaByteBuffer0, identityHashMap0, (DataClayObjectMetaData) null, identityHashMap1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      DataClayRefList dataClayRefList0 = new DataClayRefList(linkedList0);
      ObjectID objectID0 = new ObjectID();
      UUID uUID0 = MockUUID.randomUUID();
      objectID0.setId(uUID0);
      objectID0.id = uUID0;
      linkedList0.add(objectID0);
      dataClayRefList0.setReferences(linkedList0);
      dataClayRefList0.getReferences();
      dataClayRefList0.getReferences();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)1;
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      String string0 = "";
      boolean boolean0 = true;
      HashMap<Integer, ObjectID> hashMap0 = new HashMap<Integer, ObjectID>();
      DataClayObjectMetaData dataClayObjectMetaData0 = null;
      try {
        dataClayObjectMetaData0 = new DataClayObjectMetaData();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataClayRefList dataClayRefList0 = new DataClayRefList();
      List<ObjectID> list0 = dataClayRefList0.getReferences();
      assertNull(list0);
      
      // Undeclared exception!
      try { 
        dataClayRefList0.setReferences((List<ObjectID>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // References cannot be null
         //
         verifyException("es.bsc.dataclay.serialization.DataClayRefList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataClayRefList dataClayRefList0 = new DataClayRefList();
      dataClayRefList0.getReferences();
      // Undeclared exception!
      try { 
        dataClayRefList0.setReferences((List<ObjectID>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // References cannot be null
         //
         verifyException("es.bsc.dataclay.serialization.DataClayRefList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataClayRefList dataClayRefList0 = new DataClayRefList();
      dataClayRefList0.getReferences();
      DataClayRefList dataClayRefList1 = null;
      try {
        dataClayRefList1 = new DataClayRefList((List<ObjectID>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // References cannot be null
         //
         verifyException("es.bsc.dataclay.serialization.DataClayRefList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      ObjectID[] objectIDArray0 = new ObjectID[7];
      ObjectID objectID0 = new ObjectID((UUID) null);
      objectIDArray0[0] = objectID0;
      ObjectID objectID1 = new ObjectID();
      objectIDArray0[1] = objectID1;
      UUID uUID0 = MockUUID.randomUUID();
      ObjectID objectID2 = new ObjectID(uUID0);
      objectIDArray0[2] = objectID2;
      ObjectID objectID3 = new ObjectID("");
      objectIDArray0[3] = objectID3;
      ObjectID objectID4 = new ObjectID();
      objectIDArray0[4] = objectID4;
      ObjectID objectID5 = new ObjectID();
      objectIDArray0[5] = objectID5;
      UUID uUID1 = MockUUID.fromString((String) null);
      ObjectID objectID6 = new ObjectID(uUID1);
      objectIDArray0[6] = objectID6;
      linkedList0.toArray(objectIDArray0);
      DataClayRefList dataClayRefList0 = new DataClayRefList(linkedList0);
      List<ObjectID> list0 = dataClayRefList0.getReferences();
      linkedList0.containsAll(list0);
      DataClayRefList dataClayRefList1 = new DataClayRefList(linkedList0);
      dataClayRefList1.setReferences(linkedList0);
      assertFalse(linkedList0.contains(objectID3));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataClayRefList dataClayRefList0 = new DataClayRefList();
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      IdentityHashMap<Object, Integer> identityHashMap1 = new IdentityHashMap<Object, Integer>();
      ListIterator<DataClayObject> listIterator0 = null;
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      // Undeclared exception!
      try { 
        dataClayRefList0.serialize(javaByteBuffer0, true, identityHashMap0, identityHashMap1, (ListIterator<DataClayObject>) null, referenceCounting0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.DataClayRefList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataClayRefList dataClayRefList0 = new DataClayRefList();
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      boolean boolean0 = false;
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      DataClayObjectMetaData dataClayObjectMetaData0 = null;
      try {
        dataClayObjectMetaData0 = new DataClayObjectMetaData();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      ObjectID objectID0 = new ObjectID("");
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      Integer integer0 = new Integer(10);
      identityHashMap0.putIfAbsent(objectID0, integer0);
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      objectID0.serialize(grpcByteBuffer0, true, (Map<MetaClassID, byte[]>) null, identityHashMap0, listIterator0, referenceCounting0);
      linkedList0.clone();
      linkedList0.add(objectID0);
      DataClayRefList dataClayRefList0 = new DataClayRefList(linkedList0);
      ListIterator<DataClayObject> listIterator1 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      ReferenceCounting referenceCounting1 = new ReferenceCounting();
      dataClayRefList0.serialize(grpcByteBuffer0, true, (Map<MetaClassID, byte[]>) null, identityHashMap0, listIterator1, referenceCounting1);
      dataClayRefList0.getReferences();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      DataClayRefList dataClayRefList0 = new DataClayRefList(linkedList0);
      List<ObjectID> list0 = dataClayRefList0.getReferences();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataClayRefList dataClayRefList0 = new DataClayRefList();
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      linkedList0.spliterator();
      dataClayRefList0.setReferences(linkedList0);
      GrpcByteBuffer grpcByteBuffer1 = new GrpcByteBuffer();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap1 = new IdentityHashMap<MetaClassID, byte[]>();
      IdentityHashMap<Object, Integer> identityHashMap2 = new IdentityHashMap<Object, Integer>();
      ReferenceCounting referenceCounting1 = new ReferenceCounting();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1480);
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteBuffer0);
      dataClayRefList0.serialize(javaByteBuffer0, false, identityHashMap1, identityHashMap0, (ListIterator<DataClayObject>) null, referenceCounting0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<ObjectID> linkedList0 = new LinkedList<ObjectID>();
      DataClayRefList dataClayRefList0 = new DataClayRefList(linkedList0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1903);
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteBuffer0);
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      dataClayRefList0.serialize(javaByteBuffer0, true, identityHashMap0, (IdentityHashMap<Object, Integer>) null, listIterator0, referenceCounting0);
      UUID uUID0 = MockUUID.randomUUID();
      MetaClassID metaClassID0 = new MetaClassID(uUID0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-54);
      identityHashMap0.replace(metaClassID0, byteArray0);
      ListIterator<DataClayObject> listIterator1 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      dataClayRefList0.serialize(javaByteBuffer0, false, identityHashMap0, (IdentityHashMap<Object, Integer>) null, listIterator1, referenceCounting0);
      dataClayRefList0.getReferences();
      DataClayObjectMetaData dataClayObjectMetaData0 = null;
      try {
        dataClayObjectMetaData0 = new DataClayObjectMetaData();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }
}
