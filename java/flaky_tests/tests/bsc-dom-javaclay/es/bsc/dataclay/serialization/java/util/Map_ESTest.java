/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 14:09:27 GMT 2022
 */

package es.bsc.dataclay.serialization.java.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.DataClayObject;
import es.bsc.dataclay.serialization.buffer.GrpcByteBuffer;
import es.bsc.dataclay.serialization.buffer.JavaByteBuffer;
import es.bsc.dataclay.serialization.java.util.Map;
import es.bsc.dataclay.util.DataClayObjectMetaData;
import es.bsc.dataclay.util.ReferenceCounting;
import es.bsc.dataclay.util.ids.MetaClassID;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Map_ESTest extends Map_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Map.EntryWrapper map_EntryWrapper0 = new Map.EntryWrapper();
      Map.EntryWrapper map_EntryWrapper1 = new Map.EntryWrapper();
      // Undeclared exception!
      try { 
        map_EntryWrapper1.equals(map_EntryWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.java.util.Map$EntryWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Map.EntryWrapper map_EntryWrapper0 = new Map.EntryWrapper();
      java.util.Map.Entry map_Entry0 = map_EntryWrapper0.getJavaObject();
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Map.EntryWrapper map_EntryWrapper0 = new Map.EntryWrapper();
      boolean boolean0 = map_EntryWrapper0.isNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Map.EntryWrapper map_EntryWrapper0 = new Map.EntryWrapper();
      Object object0 = new Object();
      Integer integer0 = new Integer(35);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(object0, integer0);
      map_EntryWrapper0.setEntry(abstractMap_SimpleEntry0);
      boolean boolean0 = map_EntryWrapper0.isNull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Map.EntryWrapper map_EntryWrapper0 = new Map.EntryWrapper();
      Object object0 = new Object();
      boolean boolean0 = map_EntryWrapper0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Map.EntryWrapper map_EntryWrapper0 = new Map.EntryWrapper();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      IdentityHashMap<Integer, Object> identityHashMap1 = new IdentityHashMap<Integer, Object>();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      // Undeclared exception!
      try { 
        map_EntryWrapper0.deserialize(javaByteBuffer0, identityHashMap0, (DataClayObjectMetaData) null, identityHashMap1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/protobuf/InvalidProtocolBufferException
         //
         verifyException("es.bsc.dataclay.serialization.java.lang.ObjectWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Map.EntryWrapper map_EntryWrapper0 = new Map.EntryWrapper();
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      Integer integer0 = new Integer(23);
      IdentityHashMap<Object, Integer> identityHashMap1 = new IdentityHashMap<Object, Integer>();
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      AbstractMap.SimpleImmutableEntry<byte[], Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<byte[], Integer>((byte[]) null, integer0);
      map_EntryWrapper0.setEntry(abstractMap_SimpleImmutableEntry0);
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        map_EntryWrapper0.serialize(grpcByteBuffer0, false, identityHashMap0, identityHashMap1, listIterator0, referenceCounting0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/logging/log4j/LogManager
         //
         verifyException("es.bsc.dataclay.util.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Map.EntryWrapper map_EntryWrapper0 = new Map.EntryWrapper();
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      IdentityHashMap<Integer, Object> identityHashMap1 = new IdentityHashMap<Integer, Object>();
      map_EntryWrapper0.deserialize(grpcByteBuffer0, identityHashMap0, (DataClayObjectMetaData) null, identityHashMap1);
      IdentityHashMap<Object, Integer> identityHashMap2 = new IdentityHashMap<Object, Integer>();
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      map_EntryWrapper0.serialize(grpcByteBuffer0, false, identityHashMap0, identityHashMap2, listIterator0, referenceCounting0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Map.EntryWrapper map_EntryWrapper0 = new Map.EntryWrapper();
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(object0, object0);
      map_EntryWrapper0.setEntry(abstractMap_SimpleEntry0);
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer();
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      // Undeclared exception!
      try { 
        map_EntryWrapper0.serialize(javaByteBuffer0, false, hashMap0, (IdentityHashMap<Object, Integer>) null, (ListIterator<DataClayObject>) null, referenceCounting0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class es.bsc.dataclay.serialization.lib.DataClaySerializationLib
         //
         verifyException("es.bsc.dataclay.serialization.java.lang.ObjectWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Map map0 = new Map();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Map.EntryWrapper map_EntryWrapper0 = new Map.EntryWrapper();
      boolean boolean0 = map_EntryWrapper0.isImmutable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(object0, object0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      Map.EntryWrapper map_EntryWrapper0 = new Map.EntryWrapper(abstractMap_SimpleEntry0);
      assertFalse(map_EntryWrapper0.isNull());
  }
}
