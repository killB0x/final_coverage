/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:00:17 GMT 2022
 */

package es.bsc.dataclay.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.api.CallbackEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CallbackEvent_ESTest extends CallbackEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.SUCCESS;
      CallbackEvent callbackEvent0 = new CallbackEvent("", callbackEvent_EventType0, "$FS!B#dfI.TJ9!2dN");
      String string0 = callbackEvent0.getRequestID();
      assertEquals("$FS!B#dfI.TJ9!2dN", callbackEvent0.getMessage());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.SUCCESS;
      CallbackEvent callbackEvent0 = new CallbackEvent("", callbackEvent_EventType0, "$FS!B#dfI.TJ9!2dN");
      callbackEvent0.setOperationSignature("+X+OQ=^E<X7BRZNb");
      callbackEvent0.getOperationSignature();
      assertEquals("$FS!B#dfI.TJ9!2dN", callbackEvent0.getMessage());
      assertEquals("", callbackEvent0.getRequestID());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.SUCCESS;
      CallbackEvent callbackEvent0 = new CallbackEvent("", callbackEvent_EventType0, "$FS!B#dfI.TJ9!2dN");
      callbackEvent0.setOperationSignature("");
      callbackEvent0.getOperationSignature();
      assertEquals("", callbackEvent0.getRequestID());
      assertEquals("$FS!B#dfI.TJ9!2dN", callbackEvent0.getMessage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.FAIL;
      CallbackEvent callbackEvent0 = new CallbackEvent("", callbackEvent_EventType0, callbackEvent_EventType0, "?[QD HXPRKLR{I%U", "J9XKV|U@W)r]K3");
      callbackEvent0.getMessage();
      assertEquals("J9XKV|U@W)r]K3", callbackEvent0.getOperationSignature());
      assertEquals("", callbackEvent0.getRequestID());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.FAIL;
      CallbackEvent callbackEvent0 = new CallbackEvent("", callbackEvent_EventType0, "");
      String string0 = callbackEvent0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.FAIL;
      CallbackEvent callbackEvent0 = new CallbackEvent("|jS^9LA\"cSW7", callbackEvent_EventType0, "0,|E)Lw:>('xc\"@w%V");
      callbackEvent0.getContent();
      assertEquals("|jS^9LA\"cSW7", callbackEvent0.getRequestID());
      assertEquals("0,|E)Lw:>('xc\"@w%V", callbackEvent0.getMessage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.SUCCESS;
      CallbackEvent callbackEvent0 = new CallbackEvent("", callbackEvent_EventType0, "$FS!B#dfI.TJ9!2dN");
      callbackEvent0.setClassNameOfMethod("+dCSrMT1");
      callbackEvent0.getClassNameOfMethod();
      assertEquals("$FS!B#dfI.TJ9!2dN", callbackEvent0.getMessage());
      assertEquals("", callbackEvent0.getRequestID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.FAIL;
      CallbackEvent callbackEvent0 = new CallbackEvent("*[)&;s'a*}b$", callbackEvent_EventType0, "SUCCESS");
      // Undeclared exception!
      try { 
        callbackEvent0.setClassNameOfMethod((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // classNameOfMethod cannot be null or empty
         //
         verifyException("es.bsc.dataclay.api.CallbackEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.SUCCESS;
      Object object0 = new Object();
      CallbackEvent callbackEvent0 = new CallbackEvent("", callbackEvent_EventType0, object0, "e|!pPbG6&;SX", "");
      callbackEvent0.setType(callbackEvent_EventType0);
      assertEquals("", callbackEvent0.getOperationSignature());
      assertEquals("", callbackEvent0.getRequestID());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.FAIL;
      CallbackEvent callbackEvent0 = new CallbackEvent("2 )>b^", callbackEvent_EventType0, "2 )>b^");
      // Undeclared exception!
      try { 
        callbackEvent0.setType((CallbackEvent.EventType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type cannot be null
         //
         verifyException("es.bsc.dataclay.api.CallbackEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.FAIL;
      CallbackEvent callbackEvent0 = new CallbackEvent("es.bsc.dataclay.api.CallbackEvent$EventType", callbackEvent_EventType0, "es.bsc.dataclay.api.CallbackEvent$EventType");
      callbackEvent0.setRequestID("es.bsc.dataclay.api.CallbackEvent$EventType");
      assertNull(callbackEvent0.getClassNameOfMethod());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.SUCCESS;
      CallbackEvent callbackEvent0 = new CallbackEvent("", callbackEvent_EventType0, "$FS!B#dfI.TJ9!2dN");
      assertEquals("$FS!B#dfI.TJ9!2dN", callbackEvent0.getMessage());
      
      callbackEvent0.setMessage("requestID cannot be null");
      assertEquals("", callbackEvent0.getRequestID());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.SUCCESS;
      CallbackEvent callbackEvent0 = new CallbackEvent("", callbackEvent_EventType0, "$FS!B#dfI.TJ9!2dN");
      callbackEvent0.setContent(callbackEvent_EventType0);
      assertEquals("", callbackEvent0.getRequestID());
      assertEquals("$FS!B#dfI.TJ9!2dN", callbackEvent0.getMessage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.FAIL;
      CallbackEvent callbackEvent0 = new CallbackEvent("P", callbackEvent_EventType0, callbackEvent_EventType0, "P", "P");
      // Undeclared exception!
      try { 
        callbackEvent0.setOperationSignature((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // operationSignature cannot be null
         //
         verifyException("es.bsc.dataclay.api.CallbackEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.FAIL;
      CallbackEvent callbackEvent0 = new CallbackEvent("es.bsc.dataclay.api.CallbackEvent$EventType", callbackEvent_EventType0, "es.bsc.dataclay.api.CallbackEvent$EventType");
      // Undeclared exception!
      try { 
        callbackEvent0.setClassNameOfMethod("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // classNameOfMethod cannot be null or empty
         //
         verifyException("es.bsc.dataclay.api.CallbackEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.SUCCESS;
      CallbackEvent callbackEvent0 = null;
      try {
        callbackEvent0 = new CallbackEvent("P", callbackEvent_EventType0, "P", (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // classNameOfMethod cannot be null or empty
         //
         verifyException("es.bsc.dataclay.api.CallbackEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CallbackEvent callbackEvent0 = null;
      try {
        callbackEvent0 = new CallbackEvent("I", (CallbackEvent.EventType) null, "I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type cannot be null
         //
         verifyException("es.bsc.dataclay.api.CallbackEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.SUCCESS;
      Object object0 = new Object();
      CallbackEvent callbackEvent0 = new CallbackEvent("FAIL", callbackEvent_EventType0, object0, "FAIL", "classNameOfMethod cannot be null or empty");
      // Undeclared exception!
      try { 
        callbackEvent0.setRequestID((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requestID cannot be null
         //
         verifyException("es.bsc.dataclay.api.CallbackEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.SUCCESS;
      CallbackEvent callbackEvent0 = new CallbackEvent("", callbackEvent_EventType0, "$FS!B#dfI.TJ9!2dN");
      callbackEvent0.getClassNameOfMethod();
      assertEquals("", callbackEvent0.getRequestID());
      assertEquals("$FS!B#dfI.TJ9!2dN", callbackEvent0.getMessage());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.SUCCESS;
      CallbackEvent callbackEvent0 = new CallbackEvent("", callbackEvent_EventType0, "$FS!B#dfI.TJ9!2dN");
      callbackEvent0.getOperationSignature();
      assertEquals("$FS!B#dfI.TJ9!2dN", callbackEvent0.getMessage());
      assertEquals("", callbackEvent0.getRequestID());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.FAIL;
      CallbackEvent callbackEvent0 = new CallbackEvent("Y(#\"$P)8i8FN$Ku", callbackEvent_EventType0, callbackEvent_EventType0, "Y(#\"$P)8i8FN$Ku", "Y(#\"$P)8i8FN$Ku");
      Object object0 = callbackEvent0.getContent();
      assertEquals(CallbackEvent.EventType.FAIL, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.FAIL;
      CallbackEvent callbackEvent0 = new CallbackEvent("es.bsc.dataclay.api.CallbackEvent$EventType", callbackEvent_EventType0, "es.bsc.dataclay.api.CallbackEvent$EventType");
      String string0 = callbackEvent0.getMessage();
      assertEquals("es.bsc.dataclay.api.CallbackEvent$EventType", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.SUCCESS;
      CallbackEvent callbackEvent0 = new CallbackEvent("", callbackEvent_EventType0, "$FS!B#dfI.TJ9!2dN");
      callbackEvent0.getType();
      assertEquals("", callbackEvent0.getRequestID());
      assertEquals("$FS!B#dfI.TJ9!2dN", callbackEvent0.getMessage());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CallbackEvent.EventType callbackEvent_EventType0 = CallbackEvent.EventType.FAIL;
      CallbackEvent callbackEvent0 = new CallbackEvent("Y(#\"$P)8i8FN$Ku", callbackEvent_EventType0, callbackEvent_EventType0, "Y(#\"$P)8i8FN$Ku", "Y(#\"$P)8i8FN$Ku");
      String string0 = callbackEvent0.getRequestID();
      assertEquals("Y(#\"$P)8i8FN$Ku", string0);
  }
}
