/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:30:17 GMT 2022
 */

package es.bsc.dataclay.util.management.classmgr.features;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.management.classmgr.features.CPUFeature;
import es.bsc.dataclay.util.management.classmgr.features.MemoryFeature;
import es.bsc.dataclay.util.management.classmgr.features.QuantitativeFeature;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MemoryFeature_ESTest extends MemoryFeature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      memoryFeature0.setCapacityInMB(5);
      MemoryFeature memoryFeature1 = new MemoryFeature();
      boolean boolean0 = memoryFeature1.equals(memoryFeature0);
      assertEquals(5, memoryFeature0.getCapacityInMB());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemoryFeature memoryFeature0 = null;
      try {
        memoryFeature0 = new MemoryFeature(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad capacity in MB : 0 (must be > 0)
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.features.MemoryFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(2010);
      MemoryFeature memoryFeature0 = new MemoryFeature();
      UUID uUID0 = MockUUID.fromString("iI;");
      memoryFeature0.setId(uUID0);
      UUID uUID1 = memoryFeature0.getId();
      assertEquals((-7203789075247595520L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      UUID uUID0 = MockUUID.fromString("BU4/=wAd=XG0aAh3");
      memoryFeature0.setId(uUID0);
      UUID uUID1 = memoryFeature0.getId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      memoryFeature0.setCapacityInMB(3783);
      int int0 = memoryFeature0.getCapacityInMB();
      assertEquals(3783, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      MemoryFeature memoryFeature1 = new MemoryFeature();
      memoryFeature1.setCapacityInMB(2379);
      int int0 = memoryFeature0.compareTo((QuantitativeFeature) memoryFeature1);
      assertEquals(2379, memoryFeature1.getCapacityInMB());
      assertEquals((-2379), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      // Undeclared exception!
      try { 
        memoryFeature0.compareTo((QuantitativeFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.features.MemoryFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      CPUFeature cPUFeature0 = new CPUFeature();
      // Undeclared exception!
      try { 
        memoryFeature0.compareTo((QuantitativeFeature) cPUFeature0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class es.bsc.dataclay.util.management.classmgr.features.CPUFeature cannot be cast to class es.bsc.dataclay.util.management.classmgr.features.MemoryFeature (es.bsc.dataclay.util.management.classmgr.features.CPUFeature and es.bsc.dataclay.util.management.classmgr.features.MemoryFeature are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7fdfac9)
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.features.MemoryFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      memoryFeature0.setCapacityInMB(5);
      MemoryFeature memoryFeature1 = new MemoryFeature();
      int int0 = memoryFeature0.compareTo((QuantitativeFeature) memoryFeature1);
      assertEquals(5, memoryFeature0.getCapacityInMB());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      // Undeclared exception!
      try { 
        memoryFeature0.setCapacityInMB((-563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad capacity in MB : -563 (must be > 0)
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.features.MemoryFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      int int0 = memoryFeature0.getCapacityInMB();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      MemoryFeature memoryFeature1 = new MemoryFeature(1114);
      boolean boolean0 = memoryFeature1.equals(memoryFeature0);
      assertEquals(1114, memoryFeature1.getCapacityInMB());
      assertFalse(memoryFeature0.equals((Object)memoryFeature1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      boolean boolean0 = memoryFeature0.equals(memoryFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = memoryFeature0.equals(uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      // Undeclared exception!
      try { 
        memoryFeature0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/representer/Representer
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.features.MemoryFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      memoryFeature0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      UUID uUID0 = memoryFeature0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MemoryFeature memoryFeature0 = new MemoryFeature();
      int int0 = memoryFeature0.compareTo((QuantitativeFeature) memoryFeature0);
      assertEquals(0, int0);
  }
}
