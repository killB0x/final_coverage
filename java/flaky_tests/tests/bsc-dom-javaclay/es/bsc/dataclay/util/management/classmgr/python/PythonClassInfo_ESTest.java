/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:39:25 GMT 2022
 */

package es.bsc.dataclay.util.management.classmgr.python;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.management.classmgr.python.PythonClassInfo;
import java.util.LinkedList;
import java.util.List;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PythonClassInfo_ESTest extends PythonClassInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PythonClassInfo pythonClassInfo0 = new PythonClassInfo();
      List<String> list0 = pythonClassInfo0.getImports();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PythonClassInfo pythonClassInfo0 = new PythonClassInfo(linkedList0);
      linkedList0.offerLast("bBGLle+;,yQq");
      List<String> list0 = pythonClassInfo0.getImports();
      assertTrue(list0.contains("bBGLle+;,yQq"));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Random.setNextRandom(1721);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PythonClassInfo pythonClassInfo0 = new PythonClassInfo(linkedList0);
      UUID uUID0 = MockUUID.randomUUID();
      pythonClassInfo0.setId(uUID0);
      UUID uUID1 = pythonClassInfo0.getId();
      assertEquals((-4970285135602253824L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PythonClassInfo pythonClassInfo0 = new PythonClassInfo(linkedList0);
      UUID uUID0 = MockUUID.fromString("");
      pythonClassInfo0.setId(uUID0);
      UUID uUID1 = pythonClassInfo0.getId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PythonClassInfo pythonClassInfo0 = new PythonClassInfo(linkedList0);
      pythonClassInfo0.setImports(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PythonClassInfo pythonClassInfo0 = null;
      try {
        pythonClassInfo0 = new PythonClassInfo((List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imports cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.python.PythonClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PythonClassInfo pythonClassInfo0 = new PythonClassInfo();
      // Undeclared exception!
      try { 
        pythonClassInfo0.setImports((List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imports cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.python.PythonClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PythonClassInfo pythonClassInfo0 = new PythonClassInfo(linkedList0);
      UUID uUID0 = pythonClassInfo0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PythonClassInfo pythonClassInfo0 = new PythonClassInfo(linkedList0);
      List<String> list0 = pythonClassInfo0.getImports();
      assertEquals(0, list0.size());
  }
}
