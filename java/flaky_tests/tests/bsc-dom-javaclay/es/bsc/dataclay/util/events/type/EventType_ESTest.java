/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 14:27:03 GMT 2022
 */

package es.bsc.dataclay.util.events.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.logic.api.LogicModuleAPI;
import es.bsc.dataclay.serialization.lib.ImmutableParamOrReturn;
import es.bsc.dataclay.serialization.lib.LanguageParamOrReturn;
import es.bsc.dataclay.serialization.lib.ObjectWithDataParamOrReturn;
import es.bsc.dataclay.serialization.lib.PersistentParamOrReturn;
import es.bsc.dataclay.serialization.lib.SerializedParametersOrReturn;
import es.bsc.dataclay.util.events.EventTypeOuter;
import es.bsc.dataclay.util.events.message.EventMessage;
import es.bsc.dataclay.util.events.type.DeletedObjEventType;
import es.bsc.dataclay.util.events.type.PersistedObjEventType;
import es.bsc.dataclay.util.events.type.UpdatedObjEventType;
import es.bsc.dataclay.util.ids.AccountID;
import es.bsc.dataclay.util.ids.MetaClassID;
import es.bsc.dataclay.util.ids.ObjectID;
import es.bsc.dataclay.util.management.accountmgr.PasswordCredential;
import java.util.IdentityHashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EventType_ESTest extends EventType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PersistedObjEventType persistedObjEventType0 = new PersistedObjEventType();
      EventTypeOuter.EventTypeEnum eventTypeOuter_EventTypeEnum0 = EventTypeOuter.EventTypeEnum.UPDATED_OBJ;
      persistedObjEventType0.setEventTypeEnum(eventTypeOuter_EventTypeEnum0);
      assertNull(persistedObjEventType0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      MetaClassID metaClassID0 = new MetaClassID(uUID0);
      PersistedObjEventType persistedObjEventType0 = new PersistedObjEventType(metaClassID0);
      int int0 = persistedObjEventType0.getPriority();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      MetaClassID metaClassID0 = new MetaClassID(uUID0);
      PersistedObjEventType persistedObjEventType0 = new PersistedObjEventType(metaClassID0);
      EventTypeOuter.EventTypeEnum eventTypeOuter_EventTypeEnum0 = persistedObjEventType0.getEventTypeEnum();
      assertEquals(EventTypeOuter.EventTypeEnum.PERSISTED_OBJ, eventTypeOuter_EventTypeEnum0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      MetaClassID metaClassID0 = new MetaClassID(uUID0);
      PersistedObjEventType persistedObjEventType0 = new PersistedObjEventType(metaClassID0);
      IdentityHashMap<Integer, LanguageParamOrReturn> identityHashMap0 = new IdentityHashMap<Integer, LanguageParamOrReturn>();
      IdentityHashMap<Integer, ObjectWithDataParamOrReturn> identityHashMap1 = new IdentityHashMap<Integer, ObjectWithDataParamOrReturn>();
      IdentityHashMap<Integer, PersistentParamOrReturn> identityHashMap2 = new IdentityHashMap<Integer, PersistentParamOrReturn>();
      SerializedParametersOrReturn serializedParametersOrReturn0 = new SerializedParametersOrReturn((-835), (Map<Integer, ImmutableParamOrReturn>) null, identityHashMap0, identityHashMap1, identityHashMap2);
      ObjectID objectID0 = new ObjectID(metaClassID0.id);
      EventMessage eventMessage0 = new EventMessage(objectID0, persistedObjEventType0, serializedParametersOrReturn0);
      boolean boolean0 = persistedObjEventType0.checkIsEventType(eventMessage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PersistedObjEventType persistedObjEventType0 = new PersistedObjEventType("ZUSQB)Qb4A", "");
      EventMessage eventMessage0 = new EventMessage();
      boolean boolean0 = persistedObjEventType0.checkIsEventType(eventMessage0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UpdatedObjEventType updatedObjEventType0 = new UpdatedObjEventType();
      AccountID accountID0 = new AccountID("7sk}");
      PasswordCredential passwordCredential0 = new PasswordCredential();
      // Undeclared exception!
      try { 
        updatedObjEventType0.init(accountID0, passwordCredential0, "7sk}", (LogicModuleAPI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.events.type.UpdatedObjEventType", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PersistedObjEventType persistedObjEventType0 = new PersistedObjEventType();
      // Undeclared exception!
      try { 
        persistedObjEventType0.getPriority();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.events.type.EventType", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DeletedObjEventType deletedObjEventType0 = new DeletedObjEventType();
      deletedObjEventType0.getEventTypeEnum();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UpdatedObjEventType updatedObjEventType0 = new UpdatedObjEventType();
      EventMessage eventMessage0 = new EventMessage();
      eventMessage0.setEventType(updatedObjEventType0);
      // Undeclared exception!
      try { 
        updatedObjEventType0.checkIsEventType(eventMessage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.events.type.UpdatedObjEventType", e);
      }
  }
}
