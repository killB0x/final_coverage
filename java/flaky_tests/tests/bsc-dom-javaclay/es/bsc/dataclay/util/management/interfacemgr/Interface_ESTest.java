/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 12:47:12 GMT 2022
 */

package es.bsc.dataclay.util.management.interfacemgr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.ids.AccountID;
import es.bsc.dataclay.util.ids.MetaClassID;
import es.bsc.dataclay.util.ids.NamespaceID;
import es.bsc.dataclay.util.ids.OperationID;
import es.bsc.dataclay.util.ids.PropertyID;
import es.bsc.dataclay.util.management.interfacemgr.Interface;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Interface_ESTest extends Interface_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("Q", "Q", "Q", "Q", linkedHashSet0, linkedHashSet0);
      Interface interface1 = new Interface("Q", "Q", "Q", "Q", linkedHashSet0, linkedHashSet0);
      boolean boolean0 = interface0.equals(interface1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("", "", "", "", linkedHashSet0, (Set<String>) null);
      assertEquals("", interface0.getClassName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interface interface0 = new Interface();
      interface0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("Atyt]u", "Atyt]u", "Atyt]u", "#,t2bd\".F", linkedHashSet0, linkedHashSet0);
      String string0 = interface0.getProviderAccountName();
      assertEquals("Atyt]u", interface0.getClassNamespace());
      assertEquals("#,t2bd\".F", interface0.getClassName());
      assertEquals("Atyt]u", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interface interface0 = new Interface("", "", "", "&E'\"5csJ>(qK$G^&6'", (Set<String>) null, (Set<String>) null);
      String string0 = interface0.getProviderAccountName();
      assertEquals("", interface0.getClassNamespace());
      assertEquals("&E'\"5csJ>(qK$G^&6'", interface0.getClassName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface((String) null, "9fA%>z~@[$nU$yxfx", (String) null, "7nd!kkj%+tI;C6IZ@c", linkedHashSet0, linkedHashSet0);
      AccountID accountID0 = new AccountID();
      interface0.setProviderAccountID(accountID0);
      AccountID accountID1 = interface0.getProviderAccountID();
      assertEquals("00000000-0100-4000-8200-000003000000", accountID1.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("Atyt]u", "Atyt]u", "Atyt]u", "#,t2bd\".F", linkedHashSet0, linkedHashSet0);
      interface0.getPropertiesInIface();
      assertEquals("#,t2bd\".F", interface0.getClassName());
      assertEquals("Atyt]u", interface0.getClassNamespace());
      assertEquals("Atyt]u", interface0.getProviderAccountName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("Atyt]u", "Atyt]u", "Atyt]u", "#,t2bd\".F", linkedHashSet0, linkedHashSet0);
      linkedHashSet0.add("");
      interface0.getPropertiesInIface();
      assertEquals("#,t2bd\".F", interface0.getClassName());
      assertEquals("Atyt]u", interface0.getClassNamespace());
      assertEquals("Atyt]u", interface0.getProviderAccountName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interface interface0 = new Interface();
      LinkedHashSet<PropertyID> linkedHashSet0 = new LinkedHashSet<PropertyID>();
      UUID uUID0 = MockUUID.fromString("|ad89nBb");
      PropertyID propertyID0 = new PropertyID(uUID0);
      linkedHashSet0.add(propertyID0);
      interface0.setPropertiesIDs(linkedHashSet0);
      Set<PropertyID> set0 = interface0.getPropertiesIDs();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("R", "R", "R", "R", linkedHashSet0, linkedHashSet0);
      Set<String> set0 = interface0.getOperationsSignatureInIface();
      assertFalse(set0.contains("R"));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("wW,.]DM?e{j| r]", "wW,.]DM?e{j| r]", "wW,.]DM?e{j| r]", "&E'\"5csJ>(qK$G^&6'", linkedHashSet0, linkedHashSet0);
      linkedHashSet0.add("&E'\"5csJ>(qK$G^&6'");
      interface0.getOperationsSignatureInIface();
      assertEquals("wW,.]DM?e{j| r]", interface0.getProviderAccountName());
      assertEquals("wW,.]DM?e{j| r]", interface0.getClassNamespace());
      assertEquals("&E'\"5csJ>(qK$G^&6'", interface0.getClassName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Interface interface0 = new Interface("[==GetByAlias==] Creating instance from alias ", "wW,.]D?qQBe{j| r]", "[==JUMP==] Request execution to  ", "wW,.]D?qQBe{j| r]", (Set<String>) null, (Set<String>) null);
      LinkedHashSet<OperationID> linkedHashSet0 = new LinkedHashSet<OperationID>(6, 1704.9132F);
      interface0.setOperationsIDs(linkedHashSet0);
      interface0.getOperationsIDs();
      assertEquals("wW,.]D?qQBe{j| r]", interface0.getClassName());
      assertEquals("[==GetByAlias==] Creating instance from alias ", interface0.getProviderAccountName());
      assertEquals("wW,.]D?qQBe{j| r]", interface0.getNamespace());
      assertEquals("[==JUMP==] Request execution to  ", interface0.getClassNamespace());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interface interface0 = new Interface("[==GetByAlias==] Creating instance from alias ", "wW,.]D?qQBe{j| r]", "[==JUMP==] Request execution to  ", "wW,.]D?qQBe{j| r]", (Set<String>) null, (Set<String>) null);
      LinkedHashSet<OperationID> linkedHashSet0 = new LinkedHashSet<OperationID>(6, 1704.9132F);
      OperationID operationID0 = new OperationID("wW,.]D?qQBe{j| r]");
      linkedHashSet0.add(operationID0);
      interface0.setOperationsIDs(linkedHashSet0);
      interface0.getOperationsIDs();
      assertEquals("[==GetByAlias==] Creating instance from alias ", interface0.getProviderAccountName());
      assertEquals("[==JUMP==] Request execution to  ", interface0.getClassNamespace());
      assertEquals("wW,.]D?qQBe{j| r]", interface0.getNamespace());
      assertEquals("wW,.]D?qQBe{j| r]", interface0.getClassName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Interface interface0 = new Interface();
      interface0.setNamespace("u i Av}W}_`");
      String string0 = interface0.getNamespace();
      assertEquals("u i Av}W}_`", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Interface interface0 = new Interface("", "", "", "&E'\"5csJ>(qK$G^&6'", (Set<String>) null, (Set<String>) null);
      interface0.getNamespace();
      assertEquals("", interface0.getClassNamespace());
      assertEquals("", interface0.getProviderAccountName());
      assertEquals("&E'\"5csJ>(qK$G^&6'", interface0.getClassName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("5", "&.EP8)ua=f", "=uDwfF%kpBeI,ca/", "&.EP8)ua=f", linkedHashSet0, linkedHashSet0);
      MetaClassID metaClassID0 = new MetaClassID("~Z|G5\"f,73%.!Gu^A~");
      interface0.setMetaClassID(metaClassID0);
      interface0.getMetaClassID();
      assertEquals("=uDwfF%kpBeI,ca/", interface0.getClassNamespace());
      assertEquals("5", interface0.getProviderAccountName());
      assertEquals("&.EP8)ua=f", interface0.getClassName());
      assertEquals("&.EP8)ua=f", interface0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("namespace cannot be null", "namespace cannot be null", "8T_AQ]?z", (String) null, linkedHashSet0, linkedHashSet0);
      NamespaceID namespaceID0 = new NamespaceID("namespace cannot be null");
      interface0.setClassNamespaceID(namespaceID0);
      interface0.getClassNamespaceID();
      assertEquals("namespace cannot be null", interface0.getNamespace());
      assertEquals("namespace cannot be null", interface0.getProviderAccountName());
      assertEquals("8T_AQ]?z", interface0.getClassNamespace());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interface interface0 = new Interface("namespace cannot be null", "namespace cannot be null", "namespace cannot be null", "", (Set<String>) null, (Set<String>) null);
      String string0 = interface0.getClassNamespace();
      assertEquals("namespace cannot be null", interface0.getProviderAccountName());
      assertEquals("", interface0.getClassName());
      assertEquals("namespace cannot be null", interface0.getNamespace());
      assertEquals("namespace cannot be null", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Interface interface0 = new Interface("", "1m8`6AV", "", "fQMV", (Set<String>) null, (Set<String>) null);
      String string0 = interface0.getClassNamespace();
      assertEquals("1m8`6AV", interface0.getNamespace());
      assertEquals("fQMV", interface0.getClassName());
      assertEquals("", string0);
      assertEquals("", interface0.getProviderAccountName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("5", "&.EP8)ua=f", "=uDwfF%kpBeI,ca/", "&.EP8)ua=f", linkedHashSet0, linkedHashSet0);
      String string0 = interface0.getClassName();
      assertEquals("&.EP8)ua=f", string0);
      assertEquals("=uDwfF%kpBeI,ca/", interface0.getClassNamespace());
      assertEquals("5", interface0.getProviderAccountName());
      assertEquals("&.EP8)ua=f", interface0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Interface interface0 = new Interface("", "", "gloal.properies", "", (Set<String>) null, (Set<String>) null);
      String string0 = interface0.getClassName();
      assertEquals("", string0);
      assertEquals("gloal.properies", interface0.getClassNamespace());
      assertEquals("", interface0.getNamespace());
      assertEquals("", interface0.getProviderAccountName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Interface interface0 = new Interface();
      // Undeclared exception!
      try { 
        interface0.setNamespace((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // namespace cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.interfacemgr.Interface", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("vz", "vz", "vz", "[Deserialization] --> Master location most bytes deserialized: data=", linkedHashSet0, linkedHashSet0);
      interface0.setPropertiesInIface(linkedHashSet0);
      assertEquals("[Deserialization] --> Master location most bytes deserialized: data=", interface0.getClassName());
      assertEquals("vz", interface0.getProviderAccountName());
      assertEquals("vz", interface0.getClassNamespace());
      assertEquals("vz", interface0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Interface interface0 = new Interface();
      interface0.setClassName("&E'\"5csJ>(qK$G^&6'");
      assertNull(interface0.getProviderAccountName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Interface interface0 = new Interface();
      interface0.setClassNamespace("namespace cannot be null");
      assertNull(interface0.getProviderAccountName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Interface interface0 = new Interface();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      interface0.setOperationsSignatureInIface(linkedHashSet0);
      assertNull(interface0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Interface interface0 = new Interface("G", "G", "G", "G", (Set<String>) null, (Set<String>) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface1 = new Interface("G", "G", "G", "G", linkedHashSet0, linkedHashSet0);
      boolean boolean0 = interface0.equals(interface1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("R", "R", "R", "R", linkedHashSet0, linkedHashSet0);
      Interface interface1 = new Interface("R", "R", "R", "#6", linkedHashSet0, linkedHashSet0);
      boolean boolean0 = interface1.equals(interface0);
      assertEquals("R", interface1.getNamespace());
      assertFalse(boolean0);
      assertEquals("R", interface1.getClassNamespace());
      assertEquals("R", interface1.getProviderAccountName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("Q", "Q", "Q", "Q", linkedHashSet0, linkedHashSet0);
      Interface interface1 = new Interface("Q", "T", "Q", "T", linkedHashSet0, linkedHashSet0);
      boolean boolean0 = interface0.equals(interface1);
      assertEquals("T", interface1.getNamespace());
      assertFalse(boolean0);
      assertEquals("Q", interface1.getClassNamespace());
      assertEquals("Q", interface1.getProviderAccountName());
      assertEquals("T", interface1.getClassName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("j|j}g", "j|j}g", "j|j}g", "j|j}g", linkedHashSet0, linkedHashSet0);
      Interface interface1 = new Interface("j|j}g", "j|j}g", "es.bsc.dataclay.util.management.interfacemgr.Interface", "j|j}g", linkedHashSet0, linkedHashSet0);
      boolean boolean0 = interface0.equals(interface1);
      assertEquals("j|j}g", interface1.getNamespace());
      assertFalse(boolean0);
      assertEquals("j|j}g", interface1.getClassName());
      assertEquals("j|j}g", interface1.getProviderAccountName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Interface interface0 = new Interface("G", "G", "G", "G", (Set<String>) null, (Set<String>) null);
      // Undeclared exception!
      try { 
        interface0.equals(interface0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.interfacemgr.Interface", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Interface interface0 = new Interface();
      Interface interface1 = new Interface("", "", "", "&E'\"5csJ>(qK$G^&6'", (Set<String>) null, (Set<String>) null);
      interface0.setProviderAccountName("Stopping thread pool");
      boolean boolean0 = interface1.equals(interface0);
      assertEquals("&E'\"5csJ>(qK$G^&6'", interface1.getClassName());
      assertFalse(boolean0);
      assertEquals("", interface1.getProviderAccountName());
      assertEquals("", interface1.getClassNamespace());
      assertEquals("", interface1.getNamespace());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Interface interface0 = new Interface();
      Object object0 = new Object();
      boolean boolean0 = interface0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = null;
      try {
        interface0 = new Interface((String) null, (String) null, (String) null, (String) null, linkedHashSet0, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // namespace cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.interfacemgr.Interface", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Interface interface0 = new Interface();
      Set<String> set0 = interface0.getOperationsSignatureInIface();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("vz", "vz", "vz", "[Deserialization] --> Master location most bytes deserialized: data=", linkedHashSet0, linkedHashSet0);
      interface0.getNamespaceID();
      assertEquals("vz", interface0.getNamespace());
      assertEquals("[Deserialization] --> Master location most bytes deserialized: data=", interface0.getClassName());
      assertEquals("vz", interface0.getProviderAccountName());
      assertEquals("vz", interface0.getClassNamespace());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Interface interface0 = new Interface();
      Set<OperationID> set0 = interface0.getOperationsIDs();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("vz", "vz", "vz", "[Deserialization] --> Master location most bytes deserialized: data=", linkedHashSet0, linkedHashSet0);
      interface0.getClassNamespaceID();
      assertEquals("vz", interface0.getNamespace());
      assertEquals("[Deserialization] --> Master location most bytes deserialized: data=", interface0.getClassName());
      assertEquals("vz", interface0.getClassNamespace());
      assertEquals("vz", interface0.getProviderAccountName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Interface interface0 = new Interface();
      AccountID accountID0 = interface0.getProviderAccountID();
      assertNull(accountID0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("vz", "vz", "vz", "[Deserialization] --> Master location most bytes deserialized: data=", linkedHashSet0, linkedHashSet0);
      MetaClassID metaClassID0 = new MetaClassID();
      NamespaceID namespaceID0 = new NamespaceID(metaClassID0.id);
      interface0.setNamespaceID(namespaceID0);
      interface0.getNamespaceID();
      assertEquals("vz", interface0.getNamespace());
      assertEquals("[Deserialization] --> Master location most bytes deserialized: data=", interface0.getClassName());
      assertEquals("vz", interface0.getClassNamespace());
      assertEquals("vz", interface0.getProviderAccountName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Interface interface0 = new Interface();
      Set<String> set0 = interface0.getPropertiesInIface();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Interface interface0 = new Interface();
      Set<PropertyID> set0 = interface0.getPropertiesIDs();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Interface interface0 = new Interface();
      String string0 = interface0.getNamespace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Interface interface0 = new Interface();
      String string0 = interface0.getClassNamespace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Interface interface0 = new Interface();
      String string0 = interface0.getProviderAccountName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Interface interface0 = new Interface();
      LinkedHashSet<PropertyID> linkedHashSet0 = new LinkedHashSet<PropertyID>();
      interface0.setPropertiesIDs(linkedHashSet0);
      Set<PropertyID> set0 = interface0.getPropertiesIDs();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Interface interface0 = new Interface();
      MetaClassID metaClassID0 = interface0.getMetaClassID();
      assertNull(metaClassID0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Interface interface0 = new Interface();
      // Undeclared exception!
      try { 
        interface0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/representer/Representer
         //
         verifyException("es.bsc.dataclay.util.management.interfacemgr.Interface", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Interface interface0 = new Interface();
      String string0 = interface0.getClassName();
      assertNull(string0);
  }
}
