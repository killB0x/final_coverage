/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:58:09 GMT 2022
 */

package es.bsc.dataclay.util.management.classmgr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.ids.ImplementationID;
import es.bsc.dataclay.util.ids.MetaClassID;
import es.bsc.dataclay.util.management.classmgr.PrefetchingInformation;
import es.bsc.dataclay.util.management.classmgr.Property;
import java.util.LinkedList;
import java.util.List;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrefetchingInformation_ESTest extends PrefetchingInformation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      MetaClassID metaClassID0 = new MetaClassID("es.bsc.dataclay.util.management.classmgr.java.JavaAnnotationInfo");
      prefetchingInformation0.setPrefetchingClassID(metaClassID0);
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      ImplementationID implementationID0 = new ImplementationID("#'yuXf\"3,E{ ");
      prefetchingInformation0.setPrefetchingImplementationID(implementationID0);
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      LinkedList<List<Property>> linkedList0 = new LinkedList<List<Property>>();
      linkedList0.add((List<Property>) null);
      prefetchingInformation0.setPropertiesToPrefetch(linkedList0);
      prefetchingInformation0.getPropertiesToPrefetch();
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.setPrefetchingNameSpace("]t[9I");
      prefetchingInformation0.getPrefetchingNameSpace();
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.setPrefetchingMethodSignature("#'yuXf\"3,E{ ");
      prefetchingInformation0.getPrefetchingMethodSignature();
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      ImplementationID implementationID0 = new ImplementationID();
      prefetchingInformation0.prefetchingImplementationID = implementationID0;
      prefetchingInformation0.getPrefetchingImplementationID();
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.setPrefetchingClassName("~iDD6<`T?Y0o");
      prefetchingInformation0.getPrefetchingClassName();
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      MetaClassID metaClassID0 = new MetaClassID((UUID) null);
      prefetchingInformation0.prefetchingClassID = metaClassID0;
      prefetchingInformation0.getPrefetchingClassID();
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
      
      prefetchingInformation0.setInjectPrefetchingCall(true);
      boolean boolean0 = prefetchingInformation0.getInjectPrefetchingCall();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Random.setNextRandom((-1751));
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      ImplementationID implementationID0 = new ImplementationID();
      prefetchingInformation0.setId(implementationID0.id);
      prefetchingInformation0.getId();
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      ImplementationID implementationID0 = new ImplementationID("#'yuXf\"3,E{ ");
      prefetchingInformation0.setId(implementationID0.id);
      prefetchingInformation0.getId();
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
      
      prefetchingInformation0.setDisableDynamicPrefetching(true);
      boolean boolean0 = prefetchingInformation0.getDisableDynamicPrefetching();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      // Undeclared exception!
      try { 
        prefetchingInformation0.setPropertiesToPrefetch((List<List<Property>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // propertiesToPrefetch cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.PrefetchingInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      // Undeclared exception!
      try { 
        prefetchingInformation0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/representer/Representer
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.PrefetchingInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.getPrefetchingClassID();
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.setPrefetchingNameSpace((String) null);
      prefetchingInformation0.getPrefetchingNameSpace();
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.getPrefetchingImplementationID();
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.getPrefetchingMethodSignature();
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.hashCode();
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.setPrefetchingClassName((String) null);
      prefetchingInformation0.getPrefetchingClassName();
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.getPrefetchingNameSpace();
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      boolean boolean0 = prefetchingInformation0.getInjectPrefetchingCall();
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.getPropertiesToPrefetch();
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.getPrefetchingClassName();
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.setPrefetchingMethodSignature((String) null);
      prefetchingInformation0.getPrefetchingMethodSignature();
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      boolean boolean0 = prefetchingInformation0.getDisableDynamicPrefetching();
      assertFalse(boolean0);
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PrefetchingInformation prefetchingInformation0 = new PrefetchingInformation();
      prefetchingInformation0.getId();
      assertFalse(prefetchingInformation0.getInjectPrefetchingCall());
      assertFalse(prefetchingInformation0.getDisableDynamicPrefetching());
  }
}
