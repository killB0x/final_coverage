/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 14:11:04 GMT 2022
 */

package es.bsc.dataclay.util.management.sessionmgr;

import org.junit.Test;
import static org.junit.Assert.*;
import es.bsc.dataclay.util.ids.ContractID;
import es.bsc.dataclay.util.ids.InterfaceID;
import es.bsc.dataclay.util.ids.MetaClassID;
import es.bsc.dataclay.util.management.sessionmgr.SessionContract;
import es.bsc.dataclay.util.management.sessionmgr.SessionInterface;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SessionContract_ESTest extends SessionContract_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SessionContract sessionContract0 = new SessionContract();
      IdentityHashMap<InterfaceID, SessionInterface> identityHashMap0 = new IdentityHashMap<InterfaceID, SessionInterface>();
      sessionContract0.setSessionInterfaces(identityHashMap0);
      Map<InterfaceID, SessionInterface> map0 = sessionContract0.getSessionInterfaces();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ContractID contractID0 = new ContractID("Xk");
      SessionContract sessionContract0 = new SessionContract(contractID0);
      HashMap<InterfaceID, SessionInterface> hashMap0 = new HashMap<InterfaceID, SessionInterface>();
      InterfaceID interfaceID0 = new InterfaceID();
      MetaClassID metaClassID0 = new MetaClassID();
      SessionInterface sessionInterface0 = new SessionInterface(interfaceID0, metaClassID0);
      hashMap0.put(interfaceID0, sessionInterface0);
      sessionContract0.setSessionInterfaces(hashMap0);
      Map<InterfaceID, SessionInterface> map0 = sessionContract0.getSessionInterfaces();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Random.setNextRandom((-505));
      SessionContract sessionContract0 = new SessionContract();
      UUID uUID0 = MockUUID.fromString("");
      sessionContract0.setId(uUID0);
      UUID uUID1 = sessionContract0.getId();
      assertEquals("f9010000-fa01-4000-bb01-0000fc010000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SessionContract sessionContract0 = new SessionContract();
      UUID uUID0 = MockUUID.randomUUID();
      ContractID contractID0 = new ContractID(uUID0);
      sessionContract0.setContractID(contractID0);
      ContractID contractID1 = sessionContract0.getContractID();
      assertSame(contractID1, contractID0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SessionContract sessionContract0 = new SessionContract();
      ContractID contractID0 = sessionContract0.getContractID();
      assertNull(contractID0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SessionContract sessionContract0 = new SessionContract();
      Map<InterfaceID, SessionInterface> map0 = sessionContract0.getSessionInterfaces();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SessionContract sessionContract0 = new SessionContract();
      UUID uUID0 = sessionContract0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SessionContract sessionContract0 = new SessionContract();
      UUID uUID0 = MockUUID.fromString("");
      sessionContract0.setId(uUID0);
      UUID uUID1 = sessionContract0.getId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }
}
