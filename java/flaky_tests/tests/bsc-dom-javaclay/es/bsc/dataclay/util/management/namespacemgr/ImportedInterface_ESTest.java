/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 12:19:42 GMT 2022
 */

package es.bsc.dataclay.util.management.namespacemgr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.DataClayObject;
import es.bsc.dataclay.serialization.buffer.DataClayByteBuffer;
import es.bsc.dataclay.serialization.buffer.GrpcByteBuffer;
import es.bsc.dataclay.serialization.buffer.JavaByteBuffer;
import es.bsc.dataclay.util.DataClayObjectMetaData;
import es.bsc.dataclay.util.ReferenceCounting;
import es.bsc.dataclay.util.ids.ContractID;
import es.bsc.dataclay.util.ids.ImplementationID;
import es.bsc.dataclay.util.ids.InterfaceID;
import es.bsc.dataclay.util.ids.MetaClassID;
import es.bsc.dataclay.util.ids.NamespaceID;
import es.bsc.dataclay.util.ids.OperationID;
import es.bsc.dataclay.util.ids.PropertyID;
import es.bsc.dataclay.util.management.namespacemgr.ImportedInterface;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IdentityHashMap;
import java.util.LinkedHashSet;
import java.util.ListIterator;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImportedInterface_ESTest extends ImportedInterface_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID("");
      MetaClassID metaClassID0 = new MetaClassID(interfaceID0.id);
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      ImportedInterface importedInterface1 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      boolean boolean0 = importedInterface0.equals(importedInterface1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID("");
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID("");
      NamespaceID namespaceID0 = new NamespaceID(contractID0.id);
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      importedInterface0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID("");
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID("");
      NamespaceID namespaceID0 = new NamespaceID(contractID0.id);
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      importedInterface0.removeSubClassUsingImport(metaClassID0);
      assertFalse(importedInterface0.inUse());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID();
      NamespaceID namespaceID0 = new NamespaceID(metaClassID0.id);
      ImportedInterface importedInterface0 = new ImportedInterface("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", interfaceID0, contractID0, metaClassID0, namespaceID0);
      PropertyID propertyID0 = new PropertyID(namespaceID0.id);
      importedInterface0.removePropertyUsingImport(propertyID0);
      assertEquals("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", importedInterface0.getImportedClassName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID("");
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID(contractID0.id);
      NamespaceID namespaceID0 = new NamespaceID((String) null);
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      OperationID operationID0 = new OperationID("Found location ");
      importedInterface0.removeOperationUsingImport(operationID0);
      assertFalse(importedInterface0.inUse());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID("0");
      ContractID contractID0 = new ContractID(interfaceID0.id);
      MetaClassID metaClassID0 = new MetaClassID(contractID0.id);
      NamespaceID namespaceID0 = new NamespaceID("0");
      ImportedInterface importedInterface0 = new ImportedInterface("0", interfaceID0, contractID0, metaClassID0, namespaceID0);
      importedInterface0.removeImplementationUsingImport((ImplementationID) null);
      assertEquals("0", importedInterface0.getImportedClassName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      HashSet<MetaClassID> hashSet0 = importedInterface0.getSubClassesOfImport();
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID("");
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID("");
      NamespaceID namespaceID0 = new NamespaceID(contractID0.id);
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      importedInterface0.addSubClassUsingImport(metaClassID0);
      HashSet<MetaClassID> hashSet0 = importedInterface0.getSubClassesOfImport();
      assertEquals(1, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      InterfaceID interfaceID0 = new InterfaceID(uUID0);
      ContractID contractID0 = new ContractID(uUID0);
      MetaClassID metaClassID0 = new MetaClassID(interfaceID0.id);
      NamespaceID namespaceID0 = new NamespaceID("");
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      HashSet<PropertyID> hashSet0 = importedInterface0.getPropertiesUsingImports();
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID(interfaceID0.id);
      MetaClassID metaClassID0 = new MetaClassID("propertiesUsingImports cannot be null");
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("propertiesUsingImports cannot be null", interfaceID0, contractID0, metaClassID0, namespaceID0);
      PropertyID propertyID0 = new PropertyID("propertiesUsingImports cannot be null");
      importedInterface0.addPropertyUsingImport(propertyID0);
      HashSet<PropertyID> hashSet0 = importedInterface0.getPropertiesUsingImports();
      assertEquals(1, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      HashSet<OperationID> hashSet0 = importedInterface0.getOperationsUsingImports();
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID("");
      MetaClassID metaClassID0 = new MetaClassID();
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      OperationID operationID0 = new OperationID(namespaceID0.id);
      importedInterface0.addOperationUsingImport(operationID0);
      HashSet<OperationID> hashSet0 = importedInterface0.getOperationsUsingImports();
      assertFalse(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamespaceID namespaceID0 = new NamespaceID("");
      MetaClassID metaClassID0 = new MetaClassID();
      InterfaceID interfaceID0 = new InterfaceID("");
      ContractID contractID0 = new ContractID("");
      ImportedInterface importedInterface0 = new ImportedInterface("classOfImportID cannot be null", interfaceID0, contractID0, metaClassID0, namespaceID0);
      NamespaceID namespaceID1 = importedInterface0.getNamespaceIDofClass();
      assertEquals("00000000-0100-4000-8200-000003000000", namespaceID1.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID(interfaceID0.id);
      MetaClassID metaClassID0 = new MetaClassID("propertiesUsingImports cannot be null");
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("propertiesUsingImports cannot be null", interfaceID0, contractID0, metaClassID0, namespaceID0);
      InterfaceID interfaceID1 = importedInterface0.getInterfaceID();
      assertEquals("00000000-0100-4000-8200-000003000000", interfaceID1.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID();
      NamespaceID namespaceID0 = new NamespaceID("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface");
      ImportedInterface importedInterface0 = new ImportedInterface("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", interfaceID0, contractID0, metaClassID0, namespaceID0);
      String string0 = importedInterface0.getImportedClassName();
      assertEquals("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID("");
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID(contractID0.id);
      NamespaceID namespaceID0 = new NamespaceID((String) null);
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      String string0 = importedInterface0.getImportedClassName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID("");
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID("");
      NamespaceID namespaceID0 = new NamespaceID(contractID0.id);
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      HashSet<ImplementationID> hashSet0 = importedInterface0.getImplementationsUsingImports();
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID(interfaceID0.id);
      MetaClassID metaClassID0 = new MetaClassID("propertiesUsingImports cannot be null");
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("propertiesUsingImports cannot be null", interfaceID0, contractID0, metaClassID0, namespaceID0);
      ImplementationID implementationID0 = new ImplementationID();
      importedInterface0.addImplementationUsingImport(implementationID0);
      HashSet<ImplementationID> hashSet0 = importedInterface0.getImplementationsUsingImports();
      assertEquals(1, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ContractID contractID0 = new ContractID();
      ImportedInterface importedInterface0 = new ImportedInterface();
      importedInterface0.setId(contractID0.id);
      UUID uUID0 = importedInterface0.getId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      ContractID contractID0 = importedInterface0.getContractID();
      assertNull(contractID0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID("");
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID("");
      NamespaceID namespaceID0 = new NamespaceID(contractID0.id);
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      MetaClassID metaClassID1 = importedInterface0.getClassOfImportID();
      assertEquals("08000000-0900-4000-8a00-00000b000000", metaClassID1.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer();
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      // Undeclared exception!
      try { 
        importedInterface0.serialize(javaByteBuffer0, false, hashMap0, identityHashMap0, (ListIterator<DataClayObject>) null, referenceCounting0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.buffer.JavaByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.inUse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.equals(importedInterface0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      byte[] byteArray0 = new byte[0];
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      // Undeclared exception!
      try { 
        importedInterface0.deserialize(javaByteBuffer0, hashMap0, (DataClayObjectMetaData) null, (Map<Integer, Object>) null);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      IdentityHashMap<Integer, Object> identityHashMap0 = new IdentityHashMap<Integer, Object>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      // Undeclared exception!
      importedInterface0.deserialize(javaByteBuffer0, hashMap0, (DataClayObjectMetaData) null, identityHashMap0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      IdentityHashMap<Integer, Object> identityHashMap0 = new IdentityHashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        importedInterface0.deserialize((DataClayByteBuffer) null, hashMap0, (DataClayObjectMetaData) null, identityHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer();
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      // Undeclared exception!
      try { 
        importedInterface0.deserialize(javaByteBuffer0, hashMap0, (DataClayObjectMetaData) null, (Map<Integer, Object>) null);
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // 'java.util.UUID org.evosuite.runtime.mock.java.util.MockUUID.UUID(long, long)'
         //
         verifyException("es.bsc.dataclay.util.ids.ID", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      IdentityHashMap<Integer, Object> identityHashMap0 = new IdentityHashMap<Integer, Object>();
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-3);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        importedInterface0.deserialize(javaByteBuffer0, hashMap0, (DataClayObjectMetaData) null, identityHashMap0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -50331648
         //
         verifyException("es.bsc.dataclay.serialization.buffer.JavaByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.addSubClassUsingImport((MetaClassID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      PropertyID propertyID0 = new PropertyID();
      // Undeclared exception!
      try { 
        importedInterface0.addPropertyUsingImport(propertyID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.addOperationUsingImport((OperationID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      ImplementationID implementationID0 = new ImplementationID();
      // Undeclared exception!
      try { 
        importedInterface0.addImplementationUsingImport(implementationID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface");
      MetaClassID metaClassID0 = new MetaClassID();
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = null;
      try {
        importedInterface0 = new ImportedInterface("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", interfaceID0, (ContractID) null, metaClassID0, namespaceID0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // contractID cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      NamespaceID namespaceID0 = new NamespaceID("");
      importedInterface0.setNamespaceIDofClass(namespaceID0);
      assertNull(importedInterface0.getImportedClassName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      MetaClassID metaClassID0 = new MetaClassID();
      importedInterface0.setClassOfImportID(metaClassID0);
      assertEquals("00000000-0100-4000-8200-000003000000", metaClassID0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      ContractID contractID0 = new ContractID();
      importedInterface0.setContractID(contractID0);
      assertNull(importedInterface0.getImportedClassName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      importedInterface0.setImportedClassName("lp,5zU2");
      assertEquals("lp,5zU2", importedInterface0.getImportedClassName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      LinkedHashSet<MetaClassID> linkedHashSet0 = new LinkedHashSet<MetaClassID>();
      importedInterface0.setSubClassesOfImport(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      HashSet<ImplementationID> hashSet0 = new HashSet<ImplementationID>();
      importedInterface0.setImplementationsUsingImports(hashSet0);
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      HashSet<OperationID> hashSet0 = new HashSet<OperationID>();
      importedInterface0.setOperationsUsingImports(hashSet0);
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      LinkedHashSet<PropertyID> linkedHashSet0 = new LinkedHashSet<PropertyID>();
      importedInterface0.setPropertiesUsingImports(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      MetaClassID metaClassID0 = importedInterface0.getClassOfImportID();
      assertNull(metaClassID0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      String string0 = importedInterface0.getImportedClassName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID();
      NamespaceID namespaceID0 = new NamespaceID("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface");
      ImportedInterface importedInterface0 = new ImportedInterface("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", interfaceID0, contractID0, metaClassID0, namespaceID0);
      ContractID contractID1 = importedInterface0.getContractID();
      assertSame(contractID0, contractID1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      InterfaceID interfaceID0 = importedInterface0.getInterfaceID();
      assertNull(interfaceID0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      NamespaceID namespaceID0 = importedInterface0.getNamespaceIDofClass();
      assertNull(namespaceID0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer();
      InterfaceID interfaceID0 = new InterfaceID("P>y8rZ/");
      MetaClassID metaClassID0 = new MetaClassID("P>y8rZ/");
      NamespaceID namespaceID0 = new NamespaceID(interfaceID0.id);
      ContractID contractID0 = new ContractID("Ma]YAmdW1K 9wmuYOl");
      ImportedInterface importedInterface0 = new ImportedInterface("P>y8rZ/", interfaceID0, contractID0, metaClassID0, namespaceID0);
      importedInterface0.addSubClassUsingImport(metaClassID0);
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      importedInterface0.serialize(javaByteBuffer0, true, hashMap0, (IdentityHashMap<Object, Integer>) null, (ListIterator<DataClayObject>) null, referenceCounting0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer();
      MetaClassID metaClassID0 = new MetaClassID("");
      ContractID contractID0 = new ContractID();
      NamespaceID namespaceID0 = new NamespaceID();
      InterfaceID interfaceID0 = new InterfaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      ImplementationID implementationID0 = new ImplementationID();
      importedInterface0.addImplementationUsingImport(implementationID0);
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap1 = new IdentityHashMap<MetaClassID, byte[]>();
      importedInterface0.serialize(javaByteBuffer0, true, identityHashMap1, identityHashMap0, (ListIterator<DataClayObject>) null, referenceCounting0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID("Alias");
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID();
      NamespaceID namespaceID0 = new NamespaceID("Alias");
      ImportedInterface importedInterface0 = new ImportedInterface("[==PerfetchingInfo==] Object Hit Ratio: ", interfaceID0, contractID0, metaClassID0, namespaceID0);
      OperationID operationID0 = new OperationID(namespaceID0.id);
      importedInterface0.addOperationUsingImport(operationID0);
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      importedInterface0.serialize(grpcByteBuffer0, true, hashMap0, identityHashMap0, (ListIterator<DataClayObject>) null, referenceCounting0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID(".s");
      MetaClassID metaClassID0 = new MetaClassID(interfaceID0.id);
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("t]&s\"_/`o\"kq)GG(&", interfaceID0, contractID0, metaClassID0, namespaceID0);
      PropertyID propertyID0 = new PropertyID("t]&s\"_/`o\"kq)GG(&");
      importedInterface0.addPropertyUsingImport(propertyID0);
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      importedInterface0.serialize(grpcByteBuffer0, false, hashMap0, identityHashMap0, listIterator0, referenceCounting0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID("");
      MetaClassID metaClassID0 = new MetaClassID(interfaceID0.id);
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      ImportedInterface importedInterface1 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      assertTrue(importedInterface1.equals((Object)importedInterface0));
      
      InterfaceID interfaceID1 = new InterfaceID();
      importedInterface1.setInterfaceID(interfaceID1);
      boolean boolean0 = importedInterface0.equals(importedInterface1);
      assertFalse(importedInterface1.equals((Object)importedInterface0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID(")");
      NamespaceID namespaceID0 = new NamespaceID(metaClassID0.id);
      ImportedInterface importedInterface0 = new ImportedInterface(")", interfaceID0, contractID0, metaClassID0, namespaceID0);
      ImportedInterface importedInterface1 = new ImportedInterface();
      boolean boolean0 = importedInterface1.equals(importedInterface0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MetaClassID metaClassID0 = new MetaClassID("");
      ContractID contractID0 = new ContractID();
      NamespaceID namespaceID0 = new NamespaceID();
      InterfaceID interfaceID0 = new InterfaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      boolean boolean0 = importedInterface0.equals(metaClassID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.setNamespaceIDofClass((NamespaceID) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // namespaceIDofClass cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.setClassOfImportID((MetaClassID) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // classOfImportID cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.setContractID((ContractID) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // contractID cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.setInterfaceID((InterfaceID) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // interfaceID cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.setImportedClassName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // importedClassName cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID("");
      MetaClassID metaClassID0 = new MetaClassID();
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      boolean boolean0 = importedInterface0.inUse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MetaClassID metaClassID0 = new MetaClassID("");
      ContractID contractID0 = new ContractID(metaClassID0.id);
      NamespaceID namespaceID0 = new NamespaceID();
      InterfaceID interfaceID0 = new InterfaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      ImplementationID implementationID0 = new ImplementationID(namespaceID0.id);
      importedInterface0.addImplementationUsingImport(implementationID0);
      boolean boolean0 = importedInterface0.inUse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.setSubClassesOfImport((HashSet<MetaClassID>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SubClasses of import cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.setImplementationsUsingImports((HashSet<ImplementationID>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // implementationsUsingImports cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.setOperationsUsingImports((HashSet<OperationID>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // operationsUsingImports cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.setPropertiesUsingImports((HashSet<PropertyID>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // propertiesUsingImports cannot be null
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      HashSet<ImplementationID> hashSet0 = importedInterface0.getImplementationsUsingImports();
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.removePropertyUsingImport((PropertyID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID(interfaceID0.id);
      MetaClassID metaClassID0 = new MetaClassID(contractID0.id);
      NamespaceID namespaceID0 = new NamespaceID("");
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      assertFalse(importedInterface0.inUse());
      
      PropertyID propertyID0 = new PropertyID();
      importedInterface0.addPropertyUsingImport(propertyID0);
      boolean boolean0 = importedInterface0.inUse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID(interfaceID0.id);
      MetaClassID metaClassID0 = new MetaClassID();
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      assertFalse(importedInterface0.inUse());
      
      importedInterface0.addSubClassUsingImport(metaClassID0);
      boolean boolean0 = importedInterface0.inUse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID("");
      MetaClassID metaClassID0 = new MetaClassID();
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      assertFalse(importedInterface0.inUse());
      
      OperationID operationID0 = new OperationID(namespaceID0.id);
      importedInterface0.addOperationUsingImport(operationID0);
      boolean boolean0 = importedInterface0.inUse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      OperationID operationID0 = new OperationID((String) null);
      // Undeclared exception!
      try { 
        importedInterface0.removeOperationUsingImport(operationID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      // Undeclared exception!
      try { 
        importedInterface0.removeSubClassUsingImport((MetaClassID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID("");
      MetaClassID metaClassID0 = new MetaClassID();
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      HashSet<OperationID> hashSet0 = importedInterface0.getOperationsUsingImports();
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      ImplementationID implementationID0 = new ImplementationID("_XddYX/hSan");
      // Undeclared exception!
      try { 
        importedInterface0.removeImplementationUsingImport(implementationID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.namespacemgr.ImportedInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      ContractID contractID0 = new ContractID("");
      MetaClassID metaClassID0 = new MetaClassID(interfaceID0.id);
      NamespaceID namespaceID0 = new NamespaceID();
      ImportedInterface importedInterface0 = new ImportedInterface("", interfaceID0, contractID0, metaClassID0, namespaceID0);
      UUID uUID0 = importedInterface0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ImportedInterface importedInterface0 = new ImportedInterface();
      HashSet<PropertyID> hashSet0 = importedInterface0.getPropertiesUsingImports();
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID("Alias");
      ContractID contractID0 = new ContractID();
      MetaClassID metaClassID0 = new MetaClassID();
      NamespaceID namespaceID0 = new NamespaceID("Alias");
      ImportedInterface importedInterface0 = new ImportedInterface("[==PerfetchingInfo==] Object Hit Ratio: ", interfaceID0, contractID0, metaClassID0, namespaceID0);
      HashSet<MetaClassID> hashSet0 = importedInterface0.getSubClassesOfImport();
      assertEquals(0, hashSet0.size());
  }
}
