/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 14:22:12 GMT 2022
 */

package es.bsc.dataclay.util.management.sessionmgr;

import org.junit.Test;
import static org.junit.Assert.*;
import es.bsc.dataclay.util.ids.InterfaceID;
import es.bsc.dataclay.util.ids.MetaClassID;
import es.bsc.dataclay.util.ids.OperationID;
import es.bsc.dataclay.util.ids.PropertyID;
import es.bsc.dataclay.util.management.sessionmgr.SessionInterface;
import es.bsc.dataclay.util.management.sessionmgr.SessionOperation;
import es.bsc.dataclay.util.management.sessionmgr.SessionProperty;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SessionInterface_ESTest extends SessionInterface_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      HashMap<PropertyID, SessionProperty> hashMap0 = new HashMap<PropertyID, SessionProperty>();
      sessionInterface0.setSessionProperties(hashMap0);
      Map<PropertyID, SessionProperty> map0 = sessionInterface0.getSessionProperties();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      UUID uUID0 = MockUUID.fromString("oJaBT#Ivv ;@x");
      HashMap<PropertyID, SessionProperty> hashMap0 = new HashMap<PropertyID, SessionProperty>(1);
      PropertyID propertyID0 = new PropertyID(uUID0);
      SessionProperty sessionProperty0 = new SessionProperty(propertyID0);
      hashMap0.put(propertyID0, sessionProperty0);
      sessionInterface0.setSessionProperties(hashMap0);
      Map<PropertyID, SessionProperty> map0 = sessionInterface0.getSessionProperties();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      IdentityHashMap<OperationID, SessionOperation> identityHashMap0 = new IdentityHashMap<OperationID, SessionOperation>();
      sessionInterface0.setSessionOperations(identityHashMap0);
      Map<OperationID, SessionOperation> map0 = sessionInterface0.getSessionOperations();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      HashMap<OperationID, SessionOperation> hashMap0 = new HashMap<OperationID, SessionOperation>();
      OperationID operationID0 = new OperationID();
      SessionOperation sessionOperation0 = new SessionOperation();
      hashMap0.put(operationID0, sessionOperation0);
      sessionInterface0.setSessionOperations(hashMap0);
      Map<OperationID, SessionOperation> map0 = sessionInterface0.getSessionOperations();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      InterfaceID interfaceID0 = new InterfaceID();
      sessionInterface0.setInterfaceID(interfaceID0);
      InterfaceID interfaceID1 = sessionInterface0.getInterfaceID();
      assertSame(interfaceID1, interfaceID0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      InterfaceID interfaceID0 = new InterfaceID();
      sessionInterface0.setImportOfInterface(interfaceID0);
      InterfaceID interfaceID1 = sessionInterface0.getImportOfInterface();
      assertSame(interfaceID1, interfaceID0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom(236);
      SessionInterface sessionInterface0 = new SessionInterface();
      UUID uUID0 = MockUUID.fromString("=SJ`CUD<K.c&L[uF");
      sessionInterface0.setId(uUID0);
      UUID uUID1 = sessionInterface0.getId();
      assertEquals((-1441151876782342144L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      SessionInterface sessionInterface0 = new SessionInterface();
      sessionInterface0.setId(uUID0);
      UUID uUID1 = sessionInterface0.getId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterfaceID interfaceID0 = new InterfaceID();
      MetaClassID metaClassID0 = new MetaClassID("");
      SessionInterface sessionInterface0 = new SessionInterface(interfaceID0, metaClassID0);
      MetaClassID metaClassID1 = sessionInterface0.getClassOfInterface();
      assertSame(metaClassID0, metaClassID1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      sessionInterface0.setClassOfInterface((MetaClassID) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      UUID uUID0 = sessionInterface0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      MetaClassID metaClassID0 = sessionInterface0.getClassOfInterface();
      assertNull(metaClassID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      InterfaceID interfaceID0 = sessionInterface0.getImportOfInterface();
      assertNull(interfaceID0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      Map<OperationID, SessionOperation> map0 = sessionInterface0.getSessionOperations();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      InterfaceID interfaceID0 = sessionInterface0.getInterfaceID();
      assertNull(interfaceID0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SessionInterface sessionInterface0 = new SessionInterface();
      Map<PropertyID, SessionProperty> map0 = sessionInterface0.getSessionProperties();
      assertNull(map0);
  }
}
