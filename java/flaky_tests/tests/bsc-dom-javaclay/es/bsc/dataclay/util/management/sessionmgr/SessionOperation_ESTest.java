/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 14:17:27 GMT 2022
 */

package es.bsc.dataclay.util.management.sessionmgr;

import org.junit.Test;
import static org.junit.Assert.*;
import es.bsc.dataclay.util.ids.AccountID;
import es.bsc.dataclay.util.ids.ImplementationID;
import es.bsc.dataclay.util.ids.NamespaceID;
import es.bsc.dataclay.util.ids.OperationID;
import es.bsc.dataclay.util.management.sessionmgr.SessionImplementation;
import es.bsc.dataclay.util.management.sessionmgr.SessionOperation;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SessionOperation_ESTest extends SessionOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OperationID operationID0 = new OperationID((UUID) null);
      ImplementationID implementationID0 = new ImplementationID((UUID) null);
      NamespaceID namespaceID0 = new NamespaceID((UUID) null);
      AccountID accountID0 = new AccountID((UUID) null);
      SessionImplementation sessionImplementation0 = new SessionImplementation(implementationID0, namespaceID0, accountID0);
      SessionImplementation sessionImplementation1 = new SessionImplementation();
      SessionOperation sessionOperation0 = new SessionOperation(operationID0, sessionImplementation0, sessionImplementation1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OperationID operationID0 = new OperationID((UUID) null);
      SessionImplementation sessionImplementation0 = new SessionImplementation();
      SessionOperation sessionOperation0 = new SessionOperation(operationID0, sessionImplementation0, sessionImplementation0);
      SessionImplementation sessionImplementation1 = sessionOperation0.getSessionRemoteImplementation();
      assertSame(sessionImplementation0, sessionImplementation1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(";YsF^fLH");
      OperationID operationID0 = new OperationID(uUID0);
      SessionImplementation sessionImplementation0 = new SessionImplementation();
      SessionOperation sessionOperation0 = new SessionOperation(operationID0, sessionImplementation0, sessionImplementation0);
      OperationID operationID1 = sessionOperation0.getOperationID();
      assertSame(operationID0, operationID1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(684);
      SessionOperation sessionOperation0 = new SessionOperation();
      UUID uUID0 = MockUUID.randomUUID();
      sessionOperation0.setId(uUID0);
      UUID uUID1 = sessionOperation0.getId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(";YsF^fLH");
      OperationID operationID0 = new OperationID(uUID0);
      SessionImplementation sessionImplementation0 = new SessionImplementation();
      SessionOperation sessionOperation0 = new SessionOperation(operationID0, sessionImplementation0, sessionImplementation0);
      sessionOperation0.setId(uUID0);
      UUID uUID1 = sessionOperation0.getId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(";YsF^fLH");
      OperationID operationID0 = new OperationID(uUID0);
      SessionImplementation sessionImplementation0 = new SessionImplementation();
      SessionOperation sessionOperation0 = new SessionOperation(operationID0, sessionImplementation0, sessionImplementation0);
      sessionOperation0.setSessionLocalImplementation(sessionImplementation0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SessionOperation sessionOperation0 = new SessionOperation();
      OperationID operationID0 = new OperationID((UUID) null);
      sessionOperation0.setOperationID(operationID0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SessionOperation sessionOperation0 = new SessionOperation();
      SessionImplementation sessionImplementation0 = new SessionImplementation();
      sessionOperation0.setSessionRemoteImplementation(sessionImplementation0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SessionOperation sessionOperation0 = new SessionOperation();
      SessionImplementation sessionImplementation0 = sessionOperation0.getSessionRemoteImplementation();
      assertNull(sessionImplementation0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SessionOperation sessionOperation0 = new SessionOperation();
      OperationID operationID0 = sessionOperation0.getOperationID();
      assertNull(operationID0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OperationID operationID0 = new OperationID((UUID) null);
      SessionImplementation sessionImplementation0 = new SessionImplementation();
      SessionOperation sessionOperation0 = new SessionOperation(operationID0, sessionImplementation0, sessionImplementation0);
      SessionImplementation sessionImplementation1 = sessionOperation0.getSessionLocalImplementation();
      assertSame(sessionImplementation1, sessionImplementation0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SessionOperation sessionOperation0 = new SessionOperation();
      UUID uUID0 = sessionOperation0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SessionOperation sessionOperation0 = new SessionOperation();
      SessionImplementation sessionImplementation0 = sessionOperation0.getSessionLocalImplementation();
      assertNull(sessionImplementation0);
  }
}
