/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 12:39:30 GMT 2022
 */

package es.bsc.dataclay.util.management.datacontractmgr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.ids.AccountID;
import es.bsc.dataclay.util.ids.DataSetID;
import es.bsc.dataclay.util.management.datacontractmgr.DataContract;
import java.time.Clock;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TimeZone;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataContract_ESTest extends DataContract_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccountID accountID0 = new AccountID();
      DataSetID dataSetID0 = new DataSetID(accountID0.id);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, mockGregorianCalendar0, mockGregorianCalendar0);
      Set<AccountID> set0 = dataContract0.getApplicantsAccountsIDs();
      DataContract dataContract1 = new DataContract(dataSetID0, accountID0, set0, mockGregorianCalendar0, mockGregorianCalendar0, false);
      boolean boolean0 = dataContract1.equals(dataContract0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      DataSetID dataSetID0 = new DataSetID(uUID0);
      AccountID accountID0 = new AccountID();
      LinkedHashSet<AccountID> linkedHashSet0 = new LinkedHashSet<AccountID>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-47), (-47), 1, 3, 3);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, linkedHashSet0, mockGregorianCalendar0, mockGregorianCalendar0);
      boolean boolean0 = dataContract0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      AccountID accountID0 = new AccountID(uUID0);
      LinkedHashSet<AccountID> linkedHashSet0 = new LinkedHashSet<AccountID>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DataSetID dataSetID0 = new DataSetID(uUID0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 0, 1657);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, linkedHashSet0, mockGregorianCalendar0, mockGregorianCalendar1, false);
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      UUID uUID0 = MockUUID.randomUUID();
      AccountID accountID0 = new AccountID(uUID0);
      LinkedHashSet<AccountID> linkedHashSet0 = new LinkedHashSet<AccountID>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-81), (-2716), 0);
      DataSetID dataSetID0 = new DataSetID();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, linkedHashSet0, mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataSetID dataSetID0 = new DataSetID("");
      AccountID accountID0 = new AccountID(dataSetID0.id);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, calendar0, mockGregorianCalendar0);
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      dataContract0.setPublicAvailable(true);
      boolean boolean0 = dataContract0.isPublicAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataSetID dataSetID0 = new DataSetID((String) null);
      AccountID accountID0 = new AccountID(dataSetID0.id);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, mockGregorianCalendar0, mockGregorianCalendar0);
      dataContract0.getProviderDataSetID();
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      UUID uUID0 = MockUUID.fromString("es.bsc.dataclay.util.management.datacontractmgr.DataContract");
      AccountID accountID0 = new AccountID(uUID0);
      dataContract0.setProviderAccountID(accountID0);
      AccountID accountID1 = dataContract0.getProviderAccountID();
      assertEquals("00000000-0100-4000-8200-000003000000", accountID1.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      Calendar calendar0 = dataContract0.getEndDate();
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccountID accountID0 = new AccountID();
      DataSetID dataSetID0 = new DataSetID();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, mockGregorianCalendar0, mockGregorianCalendar0);
      dataContract0.getEndDate();
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccountID accountID0 = new AccountID();
      DataSetID dataSetID0 = new DataSetID((String) null);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, gregorianCalendar0, gregorianCalendar0);
      gregorianCalendar0.setFirstDayOfWeek((-2945));
      dataContract0.getEndDate();
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      Calendar calendar0 = dataContract0.getBeginDate();
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataSetID dataSetID0 = new DataSetID();
      AccountID accountID0 = new AccountID();
      LinkedHashSet<AccountID> linkedHashSet0 = new LinkedHashSet<AccountID>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1947), 1, 1, 4096, 3, (-1947));
      mockGregorianCalendar0.setLenient(false);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, linkedHashSet0, mockGregorianCalendar0, mockGregorianCalendar0);
      Calendar calendar0 = dataContract0.getBeginDate();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1947,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=4096,HOUR_OF_DAY=4096,MINUTE=3,SECOND=-1947,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      DataSetID dataSetID0 = new DataSetID(uUID0);
      AccountID accountID0 = new AccountID("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1124), (-1124), (-1124));
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, mockGregorianCalendar0, mockGregorianCalendar0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((byte) (-128));
      dataContract0.getBeginDate();
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccountID accountID0 = new AccountID();
      DataSetID dataSetID0 = new DataSetID();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, mockGregorianCalendar0, mockGregorianCalendar0);
      dataContract0.getBeginDate();
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataSetID dataSetID0 = new DataSetID("!");
      AccountID accountID0 = new AccountID(dataSetID0.id);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setFirstDayOfWeek((-1636));
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, (Set<AccountID>) null, mockGregorianCalendar0, mockGregorianCalendar0, false);
      dataContract0.getBeginDate();
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      Set<AccountID> set0 = dataContract0.getApplicantsAccountsIDs();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccountID accountID0 = new AccountID();
      DataSetID dataSetID0 = new DataSetID((String) null);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      LinkedHashSet<AccountID> linkedHashSet0 = new LinkedHashSet<AccountID>();
      linkedHashSet0.add(accountID0);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, linkedHashSet0, gregorianCalendar0, gregorianCalendar0, false);
      dataContract0.getApplicantsAccountsIDs();
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      // Undeclared exception!
      try { 
        dataContract0.setEndDate((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.datacontractmgr.DataContract", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      // Undeclared exception!
      try { 
        dataContract0.setBeginDate((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.datacontractmgr.DataContract", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      // Undeclared exception!
      try { 
        dataContract0.isActive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.datacontractmgr.DataContract", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      // Undeclared exception!
      try { 
        dataContract0.equals(dataContract0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.datacontractmgr.DataContract", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DataSetID dataSetID0 = new DataSetID();
      AccountID accountID0 = new AccountID();
      DataContract dataContract0 = null;
      try {
        dataContract0 = new DataContract(dataSetID0, accountID0, (Set<AccountID>) null, (Calendar) null, (Calendar) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.datacontractmgr.DataContract", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DataSetID dataSetID0 = new DataSetID();
      AccountID accountID0 = new AccountID();
      DataContract dataContract0 = null;
      try {
        dataContract0 = new DataContract(dataSetID0, accountID0, (Set<AccountID>) null, (Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.datacontractmgr.DataContract", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataSetID dataSetID0 = new DataSetID();
      AccountID accountID0 = new AccountID();
      DataContract dataContract0 = null;
      try {
        dataContract0 = new DataContract(dataSetID0, accountID0, (Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.datacontractmgr.DataContract", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      LinkedHashSet<AccountID> linkedHashSet0 = new LinkedHashSet<AccountID>();
      dataContract0.setApplicantsAccountsIDs(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      boolean boolean0 = dataContract0.isPublicAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      dataContract0.setBeginDate(gregorianCalendar0);
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataSetID dataSetID0 = new DataSetID((String) null);
      AccountID accountID0 = new AccountID(dataSetID0.id);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, mockGregorianCalendar0, mockGregorianCalendar0);
      dataContract0.setEndDate(mockGregorianCalendar0);
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DataSetID dataSetID0 = new DataSetID("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DataContract dataContract0 = new DataContract(dataSetID0, (AccountID) null, mockGregorianCalendar0, mockGregorianCalendar0);
      dataContract0.setProviderDataSetID(dataSetID0);
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AccountID accountID0 = new AccountID();
      DataSetID dataSetID0 = new DataSetID(accountID0.id);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, gregorianCalendar0, gregorianCalendar0);
      DataContract dataContract1 = new DataContract();
      boolean boolean0 = dataContract0.equals(dataContract1);
      assertFalse(boolean0);
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      DataSetID dataSetID0 = new DataSetID(uUID0);
      AccountID accountID0 = new AccountID();
      LinkedHashSet<AccountID> linkedHashSet0 = new LinkedHashSet<AccountID>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DataContract dataContract0 = new DataContract();
      DataContract dataContract1 = new DataContract(dataSetID0, accountID0, linkedHashSet0, mockGregorianCalendar0, mockGregorianCalendar0);
      assertTrue(dataContract1.isPublicAvailable());
      
      boolean boolean0 = dataContract0.equals(dataContract1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      DataSetID dataSetID0 = new DataSetID(uUID0);
      AccountID accountID0 = new AccountID();
      LinkedHashSet<AccountID> linkedHashSet0 = new LinkedHashSet<AccountID>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, linkedHashSet0, mockGregorianCalendar0, mockGregorianCalendar0);
      LinkedHashSet<AccountID> linkedHashSet1 = new LinkedHashSet<AccountID>();
      linkedHashSet1.add(accountID0);
      DataContract dataContract1 = new DataContract(dataSetID0, accountID0, linkedHashSet1, mockGregorianCalendar0, mockGregorianCalendar0);
      boolean boolean0 = dataContract1.equals(dataContract0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AccountID accountID0 = new AccountID();
      DataSetID dataSetID0 = new DataSetID((String) null);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      DataContract dataContract0 = new DataContract((DataSetID) null, accountID0, (Set<AccountID>) null, gregorianCalendar0, gregorianCalendar0);
      DataContract dataContract1 = new DataContract(dataSetID0, accountID0, (Set<AccountID>) null, gregorianCalendar0, gregorianCalendar0, true);
      boolean boolean0 = dataContract1.equals(dataContract0);
      assertTrue(dataContract1.isPublicAvailable());
      assertTrue(dataContract0.isPublicAvailable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AccountID accountID0 = new AccountID();
      DataSetID dataSetID0 = new DataSetID((String) null);
      AccountID accountID1 = new AccountID((String) null);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      DataContract dataContract0 = new DataContract((DataSetID) null, accountID0, (Set<AccountID>) null, gregorianCalendar0, gregorianCalendar0);
      DataContract dataContract1 = new DataContract(dataSetID0, accountID1, (Set<AccountID>) null, gregorianCalendar0, gregorianCalendar0, true);
      boolean boolean0 = dataContract1.equals(dataContract0);
      assertTrue(dataContract1.isPublicAvailable());
      assertTrue(dataContract0.isPublicAvailable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      DataSetID dataSetID0 = new DataSetID(uUID0);
      AccountID accountID0 = new AccountID();
      LinkedHashSet<AccountID> linkedHashSet0 = new LinkedHashSet<AccountID>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, linkedHashSet0, mockGregorianCalendar0, mockGregorianCalendar0);
      boolean boolean0 = dataContract0.equals(dataContract0);
      assertTrue(boolean0);
      assertTrue(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      DataSetID dataSetID0 = new DataSetID(uUID0);
      AccountID accountID0 = new AccountID();
      LinkedHashSet<AccountID> linkedHashSet0 = new LinkedHashSet<AccountID>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DataContract dataContract0 = new DataContract();
      DataContract dataContract1 = new DataContract(dataSetID0, accountID0, linkedHashSet0, mockGregorianCalendar0, mockGregorianCalendar0);
      boolean boolean0 = dataContract1.equals(dataContract0);
      assertTrue(dataContract1.isPublicAvailable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AccountID accountID0 = new AccountID();
      DataSetID dataSetID0 = new DataSetID((String) null);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, gregorianCalendar0, gregorianCalendar0);
      Object object0 = new Object();
      boolean boolean0 = dataContract0.equals(object0);
      assertFalse(dataContract0.isPublicAvailable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AccountID accountID0 = new AccountID();
      DataSetID dataSetID0 = new DataSetID((String) null);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, gregorianCalendar0, gregorianCalendar0);
      boolean boolean0 = dataContract0.isActive();
      assertFalse(dataContract0.isPublicAvailable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AccountID accountID0 = new AccountID();
      DataSetID dataSetID0 = new DataSetID((String) null);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, gregorianCalendar0, gregorianCalendar0);
      System.setCurrentTimeMillis((-1843L));
      boolean boolean0 = dataContract0.isActive();
      assertFalse(dataContract0.isPublicAvailable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AccountID accountID0 = new AccountID();
      DataSetID dataSetID0 = new DataSetID((String) null);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      DataContract dataContract0 = new DataContract(dataSetID0, accountID0, gregorianCalendar0, gregorianCalendar0);
      dataContract0.getEndDate();
      assertFalse(dataContract0.isPublicAvailable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      DataSetID dataSetID0 = dataContract0.getProviderDataSetID();
      assertNull(dataSetID0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      dataContract0.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DataContract dataContract0 = new DataContract();
      AccountID accountID0 = dataContract0.getProviderAccountID();
      assertNull(accountID0);
  }
}
