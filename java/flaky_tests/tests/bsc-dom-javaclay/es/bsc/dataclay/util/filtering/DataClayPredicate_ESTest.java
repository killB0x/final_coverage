/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 12:30:11 GMT 2022
 */

package es.bsc.dataclay.util.filtering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.DataClayObject;
import es.bsc.dataclay.serialization.buffer.GrpcByteBuffer;
import es.bsc.dataclay.serialization.buffer.JavaByteBuffer;
import es.bsc.dataclay.util.DataClayObjectMetaData;
import es.bsc.dataclay.util.ReferenceCounting;
import es.bsc.dataclay.util.filtering.DataClayPredicate;
import es.bsc.dataclay.util.ids.MetaClassID;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.ListIterator;
import java.util.Map;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataClayPredicate_ESTest extends DataClayPredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DataClayPredicate dataClayPredicate0 = new DataClayPredicate((String) null, "Xl=SM^dW", (String) null);
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      dataClayPredicate0.serialize(grpcByteBuffer0, true, (Map<MetaClassID, byte[]>) null, identityHashMap0, listIterator0, referenceCounting0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DataClayPredicate dataClayPredicate0 = new DataClayPredicate("", "", "");
      String string0 = dataClayPredicate0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DataClayPredicate dataClayPredicate0 = new DataClayPredicate("NfOvK6 kg#m<N;", "~IzpS*!P,Xn ", "x68rD[~|`<G");
      Object object0 = new Object();
      boolean boolean0 = dataClayPredicate0.test(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DataClayPredicate dataClayPredicate0 = new DataClayPredicate("", "", "");
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteBuffer0);
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      IdentityHashMap<Integer, Object> identityHashMap0 = new IdentityHashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        dataClayPredicate0.deserialize(javaByteBuffer0, hashMap0, (DataClayObjectMetaData) null, identityHashMap0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DataClayPredicate dataClayPredicate0 = new DataClayPredicate((String) null, "IC*&<;ItnN<akk", "IC*&<;ItnN<akk");
      Predicate predicate0 = dataClayPredicate0.negate();
      DataClayPredicate dataClayPredicate1 = dataClayPredicate0.and(predicate0);
      assertNull(dataClayPredicate1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DataClayPredicate dataClayPredicate0 = new DataClayPredicate("NfOvK6 kg#m<N;", "~IzpS*!P,Xn ", "x68rD[~|`<G");
      String string0 = dataClayPredicate0.toString();
      assertEquals("NfOvK6 kg#m<N;~IzpS*!P,Xn x68rD[~|`<G", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Predicate predicate0 = DataClayPredicate.build("NfOvK6 kg#m<N;", "x68rD[~|`<G", "CONTAINS");
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DataClayPredicate dataClayPredicate0 = new DataClayPredicate("NfOvK6 kg#m<N;", "~IzpS*!P,Xn ", "x68rD[~|`<G");
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      IdentityHashMap<Integer, Object> identityHashMap1 = new IdentityHashMap<Integer, Object>();
      dataClayPredicate0.deserialize(grpcByteBuffer0, identityHashMap0, (DataClayObjectMetaData) null, identityHashMap1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DataClayPredicate dataClayPredicate0 = new DataClayPredicate((String) null, "IC*&<;ItnN<akk", "IC*&<;ItnN<akk");
      byte[] byteArray0 = new byte[0];
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      // Undeclared exception!
      try { 
        dataClayPredicate0.serialize(javaByteBuffer0, false, hashMap0, (IdentityHashMap<Object, Integer>) null, (ListIterator<DataClayObject>) null, referenceCounting0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.buffer.JavaByteBuffer", e);
      }
  }
}
