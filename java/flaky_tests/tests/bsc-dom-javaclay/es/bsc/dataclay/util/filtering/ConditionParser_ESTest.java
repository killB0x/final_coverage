/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 12:33:41 GMT 2022
 */

package es.bsc.dataclay.util.filtering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.filtering.Condition;
import es.bsc.dataclay.util.filtering.ConditionParser;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConditionParser_ESTest extends ConditionParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate predicate0 = ConditionParser.asAndPredicate("[==MOVE==] Moving object ");
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionParser.asOrOfAndsPredicate("Q)and(E");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionParser.asOrOfAndsPredicate("Q)or(E");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionParser.parseOrsOfAnds("Q)and(E");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionParser.parseOrsOfAnds("Q)or(E");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<List<Condition>> list0 = ConditionParser.parseOrsOfAnds(")or(");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Condition> list0 = ConditionParser.parseAnds(")and(");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Predicate predicate0 = ConditionParser.asOrOfAndsPredicate(")or(");
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate predicate0 = ConditionParser.asAndPredicate(")and(");
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionParser.parseOrsOfAnds((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.filtering.ConditionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionParser.parseAnds((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.filtering.ConditionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionParser.asOrOfAndsPredicate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.filtering.ConditionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionParser.asAndPredicate("es.bsc.dataclay.util.filtering.Condition$ConditionOp");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionParser.asAndPredicate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.filtering.ConditionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List<Condition> list0 = ConditionParser.parseAnds("Miss Jump==] MISS. The object))");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionParser.parseAnds("qV;nwf;W\"?p]d<K");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Predicate predicate0 = ConditionParser.asAndPredicate("v='|h|Q");
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Predicate predicate0 = ConditionParser.asOrOfAndsPredicate("GzM4YP'`=f;@' ,");
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Predicate predicate0 = ConditionParser.asOrOfAndsPredicate("Q+Bv8>3l\"");
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<List<Condition>> list0 = ConditionParser.parseOrsOfAnds("(-<`N");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConditionParser conditionParser0 = new ConditionParser();
  }
}
