/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 12:42:50 GMT 2022
 */

package es.bsc.dataclay.util.events.listeners;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.serialization.lib.ObjectWithDataParamOrReturn;
import es.bsc.dataclay.serialization.lib.SerializedParametersOrReturn;
import es.bsc.dataclay.util.events.EventTypeOuter;
import es.bsc.dataclay.util.events.listeners.ECA;
import es.bsc.dataclay.util.events.message.EventMessage;
import es.bsc.dataclay.util.events.type.DeletedObjEventType;
import es.bsc.dataclay.util.events.type.EventType;
import es.bsc.dataclay.util.events.type.PersistedObjEventType;
import es.bsc.dataclay.util.events.type.UpdatedObjEventType;
import es.bsc.dataclay.util.ids.ECAID;
import es.bsc.dataclay.util.ids.MetaClassID;
import es.bsc.dataclay.util.ids.ObjectID;
import es.bsc.dataclay.util.ids.OperationID;
import java.util.LinkedList;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ECA_ESTest extends ECA_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MetaClassID metaClassID0 = new MetaClassID((String) null);
      PersistedObjEventType persistedObjEventType0 = new PersistedObjEventType(metaClassID0);
      OperationID operationID0 = new OperationID("");
      OperationID operationID1 = new OperationID();
      ECA eCA0 = new ECA(persistedObjEventType0, metaClassID0, operationID0, operationID1);
      assertNull(eCA0.getActionSignature());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ECA eCA0 = new ECA();
      MetaClassID metaClassID0 = eCA0.getTargetClass();
      assertNull(metaClassID0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ECA eCA0 = new ECA();
      ECAID eCAID0 = eCA0.getId();
      assertNull(eCAID0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PersistedObjEventType persistedObjEventType0 = new PersistedObjEventType("", "");
      ECA eCA0 = new ECA(persistedObjEventType0, " Implementation with ID ", "es.bsc.dataclay.util.events.listeners.ECA");
      String string0 = eCA0.getFilterMethodSignature();
      assertEquals("es.bsc.dataclay.util.events.listeners.ECA", eCA0.getActionSignature());
      assertEquals(" Implementation with ID ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UpdatedObjEventType updatedObjEventType0 = new UpdatedObjEventType("V<lY", "");
      MetaClassID metaClassID0 = new MetaClassID("");
      OperationID operationID0 = new OperationID("V<lY");
      ECA eCA0 = new ECA(updatedObjEventType0, metaClassID0, operationID0, operationID0);
      eCA0.setFilterMethodSignature("");
      String string0 = eCA0.getFilterMethodSignature();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ECA eCA0 = new ECA();
      UUID uUID0 = MockUUID.randomUUID();
      OperationID operationID0 = new OperationID(uUID0);
      eCA0.setFilterMethod(operationID0);
      OperationID operationID1 = eCA0.getFilterMethod();
      assertSame(operationID1, operationID0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MetaClassID metaClassID0 = new MetaClassID((String) null);
      DeletedObjEventType deletedObjEventType0 = new DeletedObjEventType(metaClassID0);
      ECA eCA0 = new ECA(deletedObjEventType0, (String) null, (String) null);
      DeletedObjEventType deletedObjEventType1 = (DeletedObjEventType)eCA0.getEventType();
      assertNull(deletedObjEventType1.getNamespace());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PersistedObjEventType persistedObjEventType0 = new PersistedObjEventType();
      ECA eCA0 = new ECA(persistedObjEventType0, "", "ia");
      String string0 = eCA0.getActionSignature();
      assertEquals("", eCA0.getFilterMethodSignature());
      assertEquals("ia", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UpdatedObjEventType updatedObjEventType0 = new UpdatedObjEventType("", "");
      MetaClassID metaClassID0 = new MetaClassID();
      OperationID operationID0 = new OperationID(metaClassID0.id);
      ECA eCA0 = new ECA(updatedObjEventType0, metaClassID0, operationID0, operationID0);
      eCA0.setActionSignature("");
      String string0 = eCA0.getActionSignature();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UpdatedObjEventType updatedObjEventType0 = new UpdatedObjEventType("V<lY", "");
      MetaClassID metaClassID0 = new MetaClassID("");
      OperationID operationID0 = new OperationID("V<lY");
      ECA eCA0 = new ECA(updatedObjEventType0, metaClassID0, operationID0, operationID0);
      OperationID operationID1 = eCA0.getAction();
      assertSame(operationID1, operationID0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MetaClassID metaClassID0 = new MetaClassID((String) null);
      DeletedObjEventType deletedObjEventType0 = new DeletedObjEventType(metaClassID0);
      ECA eCA0 = new ECA(deletedObjEventType0, (String) null, (String) null);
      PersistedObjEventType persistedObjEventType0 = new PersistedObjEventType(metaClassID0);
      ECA eCA1 = new ECA(persistedObjEventType0, (String) null, ":nz3e|:-#BPn#jlQS");
      int int0 = eCA0.compareTo(eCA1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PersistedObjEventType persistedObjEventType0 = new PersistedObjEventType();
      EventTypeOuter.EventTypeEnum eventTypeOuter_EventTypeEnum0 = EventTypeOuter.EventTypeEnum.DELETED_OBJ;
      persistedObjEventType0.setEventTypeEnum(eventTypeOuter_EventTypeEnum0);
      OperationID operationID0 = new OperationID((String) null);
      MetaClassID metaClassID0 = new MetaClassID((String) null);
      ECA eCA0 = new ECA(persistedObjEventType0, metaClassID0, operationID0, operationID0);
      PersistedObjEventType persistedObjEventType1 = new PersistedObjEventType(metaClassID0);
      ECA eCA1 = new ECA(persistedObjEventType1, "", "");
      int int0 = eCA1.compareTo(eCA0);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("?SXVv_S&u@yL");
      MetaClassID metaClassID0 = new MetaClassID(uUID0);
      UpdatedObjEventType updatedObjEventType0 = new UpdatedObjEventType(metaClassID0);
      ECA eCA0 = new ECA(updatedObjEventType0, "Ad[JQ^^j?$gtD7C1 `", "?SXVv_S&u@yL");
      ObjectID objectID0 = new ObjectID(metaClassID0.id);
      LinkedList<ObjectWithDataParamOrReturn> linkedList0 = new LinkedList<ObjectWithDataParamOrReturn>();
      SerializedParametersOrReturn serializedParametersOrReturn0 = new SerializedParametersOrReturn(linkedList0);
      EventMessage eventMessage0 = new EventMessage(objectID0, updatedObjEventType0, serializedParametersOrReturn0);
      eCA0.checkIsEventType(eventMessage0);
      assertEquals("?SXVv_S&u@yL", eCA0.getActionSignature());
      assertEquals("Ad[JQ^^j?$gtD7C1 `", eCA0.getFilterMethodSignature());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UpdatedObjEventType updatedObjEventType0 = new UpdatedObjEventType("", "");
      MetaClassID metaClassID0 = new MetaClassID();
      OperationID operationID0 = new OperationID(metaClassID0.id);
      ECA eCA0 = new ECA(updatedObjEventType0, metaClassID0, operationID0, operationID0);
      EventMessage eventMessage0 = new EventMessage();
      boolean boolean0 = eCA0.checkIsEventType(eventMessage0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ECA eCA0 = new ECA();
      // Undeclared exception!
      try { 
        eCA0.compareTo(eCA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.events.listeners.ECA", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ECA eCA0 = new ECA();
      EventType eventType0 = eCA0.getEventType();
      assertNull(eventType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ECA eCA0 = new ECA((EventType) null, "es.bsc.dataclay.util.events.listeners.ECA", "es.bsc.dataclay.util.events.listeners.ECA");
      OperationID operationID0 = eCA0.getAction();
      assertNull(operationID0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ECA eCA0 = new ECA();
      eCA0.setEventType((EventType) null);
      assertNull(eCA0.getActionSignature());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ECA eCA0 = new ECA();
      MetaClassID metaClassID0 = new MetaClassID();
      eCA0.setTargetClass(metaClassID0);
      assertEquals("00000000-0100-4000-8200-000003000000", metaClassID0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("?SXVv_S&u@yL");
      MetaClassID metaClassID0 = new MetaClassID(uUID0);
      UpdatedObjEventType updatedObjEventType0 = new UpdatedObjEventType(metaClassID0);
      ECA eCA0 = new ECA(updatedObjEventType0, "Ad[JQ^^j?$gtD7C1 `", "?SXVv_S&u@yL");
      ECAID eCAID0 = new ECAID();
      eCA0.setId(eCAID0);
      assertEquals("?SXVv_S&u@yL", eCA0.getActionSignature());
      assertEquals("Ad[JQ^^j?$gtD7C1 `", eCA0.getFilterMethodSignature());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ECA eCA0 = new ECA();
      OperationID operationID0 = eCA0.getFilterMethod();
      assertNull(operationID0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ECA eCA0 = new ECA();
      // Undeclared exception!
      try { 
        eCA0.compareTo((ECA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.events.listeners.ECA", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MetaClassID metaClassID0 = new MetaClassID();
      DeletedObjEventType deletedObjEventType0 = new DeletedObjEventType(metaClassID0);
      ECA eCA0 = new ECA(deletedObjEventType0, (String) null, (String) null);
      int int0 = eCA0.compareTo(eCA0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MetaClassID metaClassID0 = new MetaClassID();
      DeletedObjEventType deletedObjEventType0 = new DeletedObjEventType(metaClassID0);
      ECA eCA0 = new ECA(deletedObjEventType0, (String) null, (String) null);
      ECA eCA1 = new ECA(deletedObjEventType0, (String) null, "");
      OperationID operationID0 = new OperationID();
      eCA0.setAction(operationID0);
      boolean boolean0 = eCA1.equals(eCA0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ECA eCA0 = new ECA();
      PersistedObjEventType persistedObjEventType0 = new PersistedObjEventType();
      ECA eCA1 = new ECA(persistedObjEventType0, "", "");
      boolean boolean0 = eCA0.equals(eCA1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ECA eCA0 = new ECA();
      DeletedObjEventType deletedObjEventType0 = new DeletedObjEventType();
      MetaClassID metaClassID0 = new MetaClassID();
      OperationID operationID0 = new OperationID(metaClassID0.id);
      ECA eCA1 = new ECA(deletedObjEventType0, metaClassID0, operationID0, operationID0);
      boolean boolean0 = eCA0.equals(eCA1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MetaClassID metaClassID0 = new MetaClassID();
      DeletedObjEventType deletedObjEventType0 = new DeletedObjEventType(metaClassID0);
      OperationID operationID0 = new OperationID("^\"wIv*^nh|5u&");
      ECA eCA0 = new ECA(deletedObjEventType0, metaClassID0, operationID0, operationID0);
      boolean boolean0 = eCA0.equals(eCA0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ECA eCA0 = new ECA();
      Object object0 = new Object();
      boolean boolean0 = eCA0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ECA eCA0 = new ECA();
      boolean boolean0 = eCA0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ECA eCA0 = new ECA();
      eCA0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ECA eCA0 = new ECA();
      String string0 = eCA0.getFilterMethodSignature();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UpdatedObjEventType updatedObjEventType0 = new UpdatedObjEventType("", "");
      MetaClassID metaClassID0 = new MetaClassID();
      OperationID operationID0 = new OperationID(metaClassID0.id);
      ECA eCA0 = new ECA(updatedObjEventType0, metaClassID0, operationID0, operationID0);
      MetaClassID metaClassID1 = eCA0.getTargetClass();
      assertSame(metaClassID0, metaClassID1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MetaClassID metaClassID0 = new MetaClassID();
      DeletedObjEventType deletedObjEventType0 = new DeletedObjEventType(metaClassID0);
      OperationID operationID0 = new OperationID("^\"wIv*^nh|5u&");
      ECA eCA0 = new ECA(deletedObjEventType0, metaClassID0, operationID0, operationID0);
      // Undeclared exception!
      try { 
        eCA0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/representer/Representer
         //
         verifyException("es.bsc.dataclay.util.events.listeners.ECA", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MetaClassID metaClassID0 = new MetaClassID();
      DeletedObjEventType deletedObjEventType0 = new DeletedObjEventType(metaClassID0);
      ECA eCA0 = new ECA(deletedObjEventType0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        eCA0.equals(eCA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.events.listeners.ECA", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UpdatedObjEventType updatedObjEventType0 = new UpdatedObjEventType("", "");
      MetaClassID metaClassID0 = new MetaClassID();
      OperationID operationID0 = new OperationID(metaClassID0.id);
      ECA eCA0 = new ECA(updatedObjEventType0, metaClassID0, operationID0, operationID0);
      ECAID eCAID0 = eCA0.getId();
      assertEquals("04000000-0500-4000-8600-000007000000", eCAID0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ECA eCA0 = new ECA();
      String string0 = eCA0.getActionSignature();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ECA eCA0 = new ECA();
      EventMessage eventMessage0 = new EventMessage();
      // Undeclared exception!
      try { 
        eCA0.checkIsEventType(eventMessage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.events.listeners.ECA", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ECA eCA0 = new ECA();
      OperationID operationID0 = new OperationID();
      eCA0.setFilterMethod(operationID0);
      ECA eCA1 = new ECA();
      boolean boolean0 = eCA0.equals(eCA1);
      assertFalse(boolean0);
  }
}
