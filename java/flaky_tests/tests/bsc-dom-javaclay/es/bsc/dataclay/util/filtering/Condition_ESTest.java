/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 12:06:35 GMT 2022
 */

package es.bsc.dataclay.util.filtering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.filtering.Condition;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Condition_ESTest extends Condition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[][] stringArray0 = new String[2][9];
      Condition.ConditionOp[][] condition_ConditionOpArray0 = new Condition.ConditionOp[2][3];
      String[][] stringArray1 = new String[2][9];
      String string0 = Condition.buildMultiOrMultiAndCondition(stringArray0, condition_ConditionOpArray0, stringArray1);
      assertEquals("null)or(null)or(null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[][] stringArray0 = new String[2][9];
      Condition.ConditionOp[][] condition_ConditionOpArray0 = new Condition.ConditionOp[2][3];
      String[][] stringArray1 = new String[17][3];
      String string0 = Condition.buildMultiOrMultiAndCondition(stringArray0, condition_ConditionOpArray0, stringArray1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[][] stringArray0 = new String[5][0];
      Condition.ConditionOp[][] condition_ConditionOpArray0 = new Condition.ConditionOp[2][7];
      String string0 = Condition.buildMultiOrMultiAndCondition(stringArray0, condition_ConditionOpArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Condition.ConditionOp[] condition_ConditionOpArray0 = new Condition.ConditionOp[3];
      String[] stringArray1 = new String[0];
      String string0 = Condition.buildMultiAndCondition(stringArray0, condition_ConditionOpArray0, stringArray1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Condition.ConditionOp[] condition_ConditionOpArray0 = new Condition.ConditionOp[4];
      String string0 = Condition.buildMultiAndCondition(stringArray0, condition_ConditionOpArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.GREATER;
      String string0 = Condition.buildStringCondition("~<", condition_ConditionOp0, "");
      assertEquals("~<>", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.fromString("^=");
      assertEquals(Condition.ConditionOp.PREFIX, condition_ConditionOp0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.PREFIX;
      Condition condition0 = new Condition("LESS", condition_ConditionOp0, "LESS");
      // Undeclared exception!
      try { 
        condition0.valueAsObject(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"LESS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[][] stringArray0 = new String[10][0];
      // Undeclared exception!
      try { 
        Condition.buildMultiOrMultiAndCondition(stringArray0, (Condition.ConditionOp[][]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.filtering.Condition", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Condition.ConditionOp[] condition_ConditionOpArray0 = new Condition.ConditionOp[0];
      // Undeclared exception!
      try { 
        Condition.buildMultiAndCondition(stringArray0, condition_ConditionOpArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("es.bsc.dataclay.util.filtering.Condition", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Condition.ConditionValueType.fromClass(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class es.bsc.dataclay.exceptions.DataClayException
         //
         verifyException("es.bsc.dataclay.util.filtering.Condition$ConditionValueType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Condition.ConditionValueType condition_ConditionValueType0 = Condition.ConditionValueType.fromClass(class0);
      assertEquals(Condition.ConditionValueType.INTCLASS, condition_ConditionValueType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.PREFIX;
      Condition condition0 = new Condition("Invalid condition for a predicate. Message: ", condition_ConditionOp0, "Invalid condition for a predicate. Message: ");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        condition0.valueAsObject(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class es.bsc.dataclay.exceptions.DataClayException
         //
         verifyException("es.bsc.dataclay.util.filtering.Condition$ConditionValueType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.GREATER;
      String string0 = condition_ConditionOp0.getOp();
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Condition.ConditionOp[] condition_ConditionOpArray0 = new Condition.ConditionOp[5];
      // Undeclared exception!
      try { 
        Condition.buildStringCondition((String) null, condition_ConditionOpArray0[0], (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.filtering.Condition", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[][] stringArray0 = new String[6][4];
      Condition.ConditionOp[][] condition_ConditionOpArray0 = new Condition.ConditionOp[6][0];
      String[][] stringArray1 = new String[0][1];
      String string0 = Condition.buildMultiOrMultiAndCondition(stringArray0, condition_ConditionOpArray0, stringArray1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[][] stringArray0 = new String[0][2];
      Condition.ConditionOp[][] condition_ConditionOpArray0 = new Condition.ConditionOp[0][9];
      // Undeclared exception!
      try { 
        Condition.buildMultiOrMultiAndCondition(stringArray0, condition_ConditionOpArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("es.bsc.dataclay.util.filtering.Condition", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[][] stringArray0 = new String[1][4];
      Condition.ConditionOp[][] condition_ConditionOpArray0 = new Condition.ConditionOp[14][0];
      String string0 = Condition.buildMultiOrMultiAndCondition(stringArray0, condition_ConditionOpArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.EQUALS;
      String[] stringArray0 = new String[6];
      Condition.ConditionOp[] condition_ConditionOpArray0 = new Condition.ConditionOp[6];
      condition_ConditionOpArray0[0] = condition_ConditionOp0;
      // Undeclared exception!
      try { 
        Condition.buildMultiAndCondition(stringArray0, condition_ConditionOpArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.filtering.Condition", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.EQUALS;
      String[] stringArray0 = new String[1];
      Condition.ConditionOp[] condition_ConditionOpArray0 = new Condition.ConditionOp[1];
      condition_ConditionOpArray0[0] = condition_ConditionOp0;
      String string0 = Condition.buildMultiAndCondition(stringArray0, condition_ConditionOpArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("null=null", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Condition.ConditionOp[] condition_ConditionOpArray0 = new Condition.ConditionOp[1];
      String[] stringArray1 = new String[4];
      String string0 = Condition.buildMultiAndCondition(stringArray0, condition_ConditionOpArray0, stringArray1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Condition.ConditionOp.fromString("?H'd[a");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class es.bsc.dataclay.exceptions.DataClayException
         //
         verifyException("es.bsc.dataclay.util.filtering.Condition$ConditionOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.EQUALS;
      Condition condition0 = new Condition("", condition_ConditionOp0, "[dataClay] ERROR: Trying to execute remotely but not initialized/found. Please, check initialization of StorageItf or ClientManagementLib  was successfull or contact administrator.");
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        condition0.valueAsObject(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[dataClay] ERROR: Trying to execute remotely but not initialized/found. Please, check initialization of StorageItf or ClientManagementLib  was successfull or contact administrator.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.LESS_EQUALS;
      Condition condition0 = new Condition("/", condition_ConditionOp0, "/");
      boolean boolean0 = condition0.matches("Jrq(lJD2_Q0>\b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.LESS;
      Condition condition0 = new Condition("", condition_ConditionOp0, "{;.o");
      boolean boolean0 = condition0.matches("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.GREATER_EQUALS;
      Condition condition0 = new Condition("", condition_ConditionOp0, "n(B");
      boolean boolean0 = condition0.matches("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.GREATER;
      Condition condition0 = new Condition("", condition_ConditionOp0, "");
      boolean boolean0 = condition0.matches("/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.EQUALS;
      Condition condition0 = new Condition("", condition_ConditionOp0, "");
      boolean boolean0 = condition0.matches("/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.DIFFERENT;
      Condition condition0 = new Condition("", condition_ConditionOp0, "");
      boolean boolean0 = condition0.matches("/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.LESS_EQUALS;
      Condition condition0 = new Condition("", condition_ConditionOp0, "");
      boolean boolean0 = condition0.matches("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.LESS;
      Condition condition0 = new Condition("", condition_ConditionOp0, "");
      boolean boolean0 = condition0.matches("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.GREATER_EQUALS;
      Condition condition0 = new Condition("", condition_ConditionOp0, "");
      boolean boolean0 = condition0.matches("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.EQUALS;
      Condition condition0 = new Condition("", condition_ConditionOp0, "[dataClay] ERROR: Trying to execute remotely but not initialized/found. Please, check initialization of StorageItf or ClientManagementLib  was successfull or contact administrator.");
      boolean boolean0 = condition0.matches("[dataClay] ERROR: Trying to execute remotely but not initialized/found. Please, check initialization of StorageItf or ClientManagementLib  was successfull or contact administrator.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.DIFFERENT;
      Condition condition0 = new Condition("", condition_ConditionOp0, "");
      boolean boolean0 = condition0.matches("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.PREFIX;
      Condition condition0 = new Condition("", condition_ConditionOp0, "");
      boolean boolean0 = condition0.matches("");
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.CONTAINS;
      Condition condition0 = new Condition("", condition_ConditionOp0, "");
      boolean boolean0 = condition0.matches("");
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.LESS_EQUALS;
      Condition condition0 = new Condition("", condition_ConditionOp0, "");
      // Undeclared exception!
      try { 
        condition0.matches(condition_ConditionOp0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class es.bsc.dataclay.exceptions.DataClayException
         //
         verifyException("es.bsc.dataclay.util.filtering.Condition$ConditionValueType", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.CONTAINS;
      Condition condition0 = new Condition("", condition_ConditionOp0, "");
      boolean boolean0 = condition0.matches(condition0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.LESS_EQUALS;
      Condition condition0 = new Condition("&", condition_ConditionOp0, "&");
      // Undeclared exception!
      try { 
        condition0.matches(condition_ConditionOp0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class es.bsc.dataclay.exceptions.DataClayException
         //
         verifyException("es.bsc.dataclay.util.filtering.Condition", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.GREATER;
      Condition condition0 = new Condition("", condition_ConditionOp0, "");
      boolean boolean0 = condition0.matches("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Condition.ConditionOp[] condition_ConditionOpArray0 = Condition.ConditionOp.getBooleanOps();
      assertEquals(2, condition_ConditionOpArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Condition.ConditionOp[] condition_ConditionOpArray0 = Condition.ConditionOp.getNumericOps();
      assertEquals(6, condition_ConditionOpArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.fromString(">=");
      assertEquals(Condition.ConditionOp.GREATER_EQUALS, condition_ConditionOp0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Condition.ConditionOp condition_ConditionOp0 = Condition.ConditionOp.GREATER_EQUALS;
      Condition condition0 = new Condition("Agdav@_qpg\"rM{&k`ZN", condition_ConditionOp0, "Agdav@_qpg\"rM{&k`ZN");
      Predicate predicate0 = condition0.asPredicate();
      assertNotNull(predicate0);
  }
}
