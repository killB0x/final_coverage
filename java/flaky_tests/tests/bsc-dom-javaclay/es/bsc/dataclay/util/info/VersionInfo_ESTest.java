/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:02:41 GMT 2022
 */

package es.bsc.dataclay.util.info;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.ids.ExecutionEnvironmentID;
import es.bsc.dataclay.util.ids.ObjectID;
import es.bsc.dataclay.util.info.VersionInfo;
import es.bsc.dataclay.util.management.metadataservice.MetaDataInfo;
import java.util.ConcurrentModificationException;
import java.util.IdentityHashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VersionInfo_ESTest extends VersionInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VersionInfo versionInfo0 = new VersionInfo();
      UUID uUID0 = MockUUID.randomUUID();
      ExecutionEnvironmentID executionEnvironmentID0 = new ExecutionEnvironmentID(uUID0);
      versionInfo0.setLocID(executionEnvironmentID0);
      ExecutionEnvironmentID executionEnvironmentID1 = versionInfo0.getLocID();
      assertEquals("00000000-0100-4000-8200-000003000000", executionEnvironmentID1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VersionInfo versionInfo0 = new VersionInfo();
      ObjectID objectID0 = new ObjectID();
      versionInfo0.addVersionedObject(objectID0, (ObjectID) null);
      versionInfo0.addVersionedObject((ObjectID) null, objectID0);
      objectID0.id = null;
      Map<ObjectID, ObjectID> map0 = versionInfo0.getVersionsMapping();
      // Undeclared exception!
      try { 
        versionInfo0.setVersionsMapping(map0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VersionInfo versionInfo0 = new VersionInfo();
      // Undeclared exception!
      try { 
        versionInfo0.setVersionsMapping((Map<ObjectID, ObjectID>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VersionInfo versionInfo0 = new VersionInfo();
      // Undeclared exception!
      try { 
        versionInfo0.setOriginalMD((Map<ObjectID, MetaDataInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VersionInfo versionInfo0 = new VersionInfo();
      IdentityHashMap<ObjectID, MetaDataInfo> identityHashMap0 = new IdentityHashMap<ObjectID, MetaDataInfo>();
      MetaDataInfo metaDataInfo0 = new MetaDataInfo();
      identityHashMap0.put((ObjectID) null, metaDataInfo0);
      versionInfo0.setOriginalMD(identityHashMap0);
      Map<ObjectID, MetaDataInfo> map0 = versionInfo0.getOriginalMD();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VersionInfo versionInfo0 = new VersionInfo();
      Map<ObjectID, ObjectID> map0 = versionInfo0.getVersionsMapping();
      versionInfo0.setVersionsMapping(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VersionInfo versionInfo0 = new VersionInfo();
      String string0 = versionInfo0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VersionInfo versionInfo0 = new VersionInfo();
      UUID uUID0 = MockUUID.fromString("e-=0T-Qt_/T6(qQ(");
      ObjectID objectID0 = new ObjectID(uUID0);
      versionInfo0.setVersionOID(objectID0);
      ObjectID objectID1 = versionInfo0.getVersionOID();
      assertEquals("00000000-0100-4000-8200-000003000000", objectID1.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VersionInfo versionInfo0 = new VersionInfo();
      ExecutionEnvironmentID executionEnvironmentID0 = versionInfo0.getLocID();
      assertNull(executionEnvironmentID0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VersionInfo versionInfo0 = new VersionInfo();
      Map<ObjectID, MetaDataInfo> map0 = versionInfo0.getOriginalMD();
      versionInfo0.setOriginalMD(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VersionInfo versionInfo0 = new VersionInfo();
      ObjectID objectID0 = versionInfo0.getVersionOID();
      assertNull(objectID0);
  }
}
