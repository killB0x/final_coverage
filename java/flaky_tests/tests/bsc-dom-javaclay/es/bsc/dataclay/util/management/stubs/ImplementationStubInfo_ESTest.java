/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 14:02:16 GMT 2022
 */

package es.bsc.dataclay.util.management.stubs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.ids.AccountID;
import es.bsc.dataclay.util.ids.ContractID;
import es.bsc.dataclay.util.ids.ImplementationID;
import es.bsc.dataclay.util.ids.InterfaceID;
import es.bsc.dataclay.util.ids.NamespaceID;
import es.bsc.dataclay.util.ids.OperationID;
import es.bsc.dataclay.util.management.classmgr.Type;
import es.bsc.dataclay.util.management.stubs.ImplementationStubInfo;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImplementationStubInfo_ESTest extends ImplementationStubInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Type> hashMap0 = new HashMap<String, Type>();
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      Type type0 = new Type("n", "", "");
      OperationID operationID0 = new OperationID("");
      ContractID contractID0 = new ContractID(operationID0.id);
      InterfaceID interfaceID0 = new InterfaceID(operationID0.id);
      AccountID accountID0 = new AccountID();
      NamespaceID namespaceID0 = new NamespaceID(accountID0.id);
      ImplementationStubInfo implementationStubInfo1 = new ImplementationStubInfo("n", "n", "", hashMap0, (List<String>) null, type0, operationID0, (ImplementationID) null, (ImplementationID) null, contractID0, interfaceID0, accountID0, namespaceID0, 10);
      // Undeclared exception!
      try { 
        implementationStubInfo1.equals(implementationStubInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.stubs.ImplementationStubInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Type type0 = new Type();
      OperationID operationID0 = new OperationID("");
      ImplementationID implementationID0 = new ImplementationID(operationID0.id);
      ImplementationID implementationID1 = new ImplementationID((String) null);
      ContractID contractID0 = new ContractID(implementationID0.id);
      InterfaceID interfaceID0 = new InterfaceID();
      AccountID accountID0 = new AccountID(implementationID0.id);
      NamespaceID namespaceID0 = new NamespaceID(" is not initialized well, hint missing or not exist");
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("HY7$qR#ts 1tv%_", "HY7$qR#ts 1tv%_", "HY7$qR#ts 1tv%_", (Map<String, Type>) null, linkedList0, type0, operationID0, implementationID0, implementationID1, contractID0, interfaceID0, accountID0, namespaceID0, 0);
      assertEquals(0, implementationStubInfo0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Type> hashMap0 = new HashMap<String, Type>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Type type0 = new Type();
      OperationID operationID0 = new OperationID();
      ImplementationID implementationID0 = new ImplementationID("=jNCh_e");
      ContractID contractID0 = new ContractID();
      InterfaceID interfaceID0 = new InterfaceID("zT{nk");
      AccountID accountID0 = new AccountID(interfaceID0.id);
      NamespaceID namespaceID0 = new NamespaceID(operationID0.id);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("es.bsc.dataclay.util.management.stubs.ImplementationStubInfo", (String) null, (String) null, hashMap0, linkedList0, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 0);
      implementationStubInfo0.hashCode();
      assertEquals(0, implementationStubInfo0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IdentityHashMap<String, Type> identityHashMap0 = new IdentityHashMap<String, Type>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Type type0 = new Type("*", "Uc{urN/H?i-w+@", "");
      OperationID operationID0 = new OperationID((UUID) null);
      ImplementationID implementationID0 = new ImplementationID();
      ContractID contractID0 = new ContractID();
      InterfaceID interfaceID0 = new InterfaceID();
      AccountID accountID0 = new AccountID(implementationID0.id);
      NamespaceID namespaceID0 = new NamespaceID(contractID0.id);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("7)DK@R4y=", "", "*", identityHashMap0, linkedList0, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 0);
      String string0 = implementationStubInfo0.getSignature();
      assertEquals("*", string0);
      assertEquals("7)DK@R4y=", implementationStubInfo0.getNamespace());
      assertEquals(0, implementationStubInfo0.getImplPosition());
      assertEquals("", implementationStubInfo0.getClassName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IdentityHashMap<String, Type> identityHashMap0 = new IdentityHashMap<String, Type>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Type type0 = new Type("*<", "", "Uc{urN/H?i-w+@");
      OperationID operationID0 = new OperationID((UUID) null);
      ImplementationID implementationID0 = new ImplementationID();
      ContractID contractID0 = new ContractID();
      InterfaceID interfaceID0 = new InterfaceID();
      AccountID accountID0 = new AccountID((UUID) null);
      NamespaceID namespaceID0 = new NamespaceID((UUID) null);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("*<", (String) null, "", identityHashMap0, linkedList0, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 4096);
      String string0 = implementationStubInfo0.getSignature();
      assertEquals("", string0);
      assertEquals("*<", implementationStubInfo0.getNamespace());
      assertNotNull(string0);
      assertEquals(4096, implementationStubInfo0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = new Type(";;UvsrX-QZ3G+", ")8D8`<rBxC", "As]q1='");
      ImplementationID implementationID0 = new ImplementationID();
      ContractID contractID0 = new ContractID(implementationID0.id);
      InterfaceID interfaceID0 = new InterfaceID(contractID0.id);
      AccountID accountID0 = new AccountID();
      NamespaceID namespaceID0 = new NamespaceID();
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo(")8D8`<rBxC", "", "", (Map<String, Type>) null, (List<String>) null, type0, (OperationID) null, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 1057);
      implementationStubInfo0.getReturnType();
      assertEquals(")8D8`<rBxC", implementationStubInfo0.getNamespace());
      assertEquals("", implementationStubInfo0.getClassName());
      assertEquals(1057, implementationStubInfo0.getImplPosition());
      assertEquals("", implementationStubInfo0.getSignature());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      AccountID accountID0 = implementationStubInfo0.getResponsibleRemoteAccountID();
      assertNull(accountID0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      ImplementationID implementationID0 = implementationStubInfo0.getRemoteImplID();
      assertNull(implementationID0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IdentityHashMap<String, Type> identityHashMap0 = new IdentityHashMap<String, Type>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Type type0 = new Type("", "", "");
      OperationID operationID0 = new OperationID("");
      ContractID contractID0 = new ContractID(operationID0.id);
      InterfaceID interfaceID0 = new InterfaceID("");
      NamespaceID namespaceID0 = new NamespaceID(interfaceID0.id);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("", "", "", identityHashMap0, linkedList0, type0, operationID0, (ImplementationID) null, (ImplementationID) null, contractID0, interfaceID0, (AccountID) null, namespaceID0, (-1562));
      implementationStubInfo0.getParamsOrder();
      assertEquals((-1562), implementationStubInfo0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Type> hashMap0 = new HashMap<String, Type>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Type type0 = new Type();
      OperationID operationID0 = new OperationID();
      ImplementationID implementationID0 = new ImplementationID("=jNCh_e");
      ContractID contractID0 = new ContractID();
      InterfaceID interfaceID0 = new InterfaceID("zT{nk");
      AccountID accountID0 = new AccountID(interfaceID0.id);
      NamespaceID namespaceID0 = new NamespaceID(operationID0.id);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("es.bsc.dataclay.util.management.stubs.ImplementationStubInfo", (String) null, (String) null, hashMap0, linkedList0, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 0);
      implementationStubInfo0.getParams();
      assertEquals(0, implementationStubInfo0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      HashMap<String, Type> hashMap0 = new HashMap<String, Type>();
      Type type0 = new Type();
      hashMap0.put("^? VgUq$#HrjF7]", type0);
      implementationStubInfo0.setParams(hashMap0);
      Map<String, Type> map0 = implementationStubInfo0.getParams();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      OperationID operationID0 = implementationStubInfo0.getOperationID();
      assertNull(operationID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IdentityHashMap<String, Type> identityHashMap0 = new IdentityHashMap<String, Type>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AccountID accountID0 = new AccountID(">`'`mIF&ud");
      Type type0 = new Type("t|3wm|4cz.]#=f<i_H@", "", "");
      OperationID operationID0 = new OperationID(accountID0.id);
      ImplementationID implementationID0 = new ImplementationID(operationID0.id);
      ContractID contractID0 = new ContractID();
      InterfaceID interfaceID0 = new InterfaceID(implementationID0.id);
      NamespaceID namespaceID0 = new NamespaceID();
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("(z??dP#S.8", "", "(z??dP#S.8", identityHashMap0, linkedList0, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, (-685));
      implementationStubInfo0.getNamespaceID();
      assertEquals((-685), implementationStubInfo0.getImplPosition());
      assertEquals("(z??dP#S.8", implementationStubInfo0.getSignature());
      assertEquals("", implementationStubInfo0.getClassName());
      assertEquals("(z??dP#S.8", implementationStubInfo0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Type type0 = new Type();
      OperationID operationID0 = new OperationID();
      ImplementationID implementationID0 = new ImplementationID();
      ContractID contractID0 = new ContractID((String) null);
      InterfaceID interfaceID0 = new InterfaceID("*:AMAJc");
      AccountID accountID0 = new AccountID(interfaceID0.id);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("es.bsc.dataclay.util.management.stubs.ImplementationStubInfo", "ZQQF[n;X}<I*Jn", "", (Map<String, Type>) null, linkedList0, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, (NamespaceID) null, (-1));
      String string0 = implementationStubInfo0.getNamespace();
      assertEquals("", implementationStubInfo0.getSignature());
      assertEquals("ZQQF[n;X}<I*Jn", implementationStubInfo0.getClassName());
      assertEquals("es.bsc.dataclay.util.management.stubs.ImplementationStubInfo", string0);
      assertEquals((-1), implementationStubInfo0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      implementationStubInfo0.setNamespace("");
      String string0 = implementationStubInfo0.getNamespace();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      ImplementationID implementationID0 = new ImplementationID("");
      implementationStubInfo0.setLocalImplID(implementationID0);
      ImplementationID implementationID1 = implementationStubInfo0.getLocalImplID();
      assertSame(implementationID1, implementationID0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      InterfaceID interfaceID0 = implementationStubInfo0.getInterfaceID();
      assertNull(interfaceID0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IdentityHashMap<String, Type> identityHashMap0 = new IdentityHashMap<String, Type>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Type type0 = new Type("*", "Uc{urN/H?i-w+@", "");
      OperationID operationID0 = new OperationID((UUID) null);
      ImplementationID implementationID0 = new ImplementationID();
      ContractID contractID0 = new ContractID();
      InterfaceID interfaceID0 = new InterfaceID();
      AccountID accountID0 = new AccountID(implementationID0.id);
      NamespaceID namespaceID0 = new NamespaceID(contractID0.id);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("", "B?", "", identityHashMap0, linkedList0, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 2687);
      int int0 = implementationStubInfo0.getImplPosition();
      assertEquals("", implementationStubInfo0.getSignature());
      assertEquals("", implementationStubInfo0.getNamespace());
      assertEquals(2687, int0);
      assertEquals("B?", implementationStubInfo0.getClassName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      implementationStubInfo0.setImplPosition((-369));
      int int0 = implementationStubInfo0.getImplPosition();
      assertEquals((-369), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Type type0 = new Type(";;UvsrX-QZ3G+", ")8D8`<rBxC", "As]q1='");
      ImplementationID implementationID0 = new ImplementationID();
      ContractID contractID0 = new ContractID(implementationID0.id);
      InterfaceID interfaceID0 = new InterfaceID(contractID0.id);
      AccountID accountID0 = new AccountID();
      NamespaceID namespaceID0 = new NamespaceID();
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo(")8D8`<rBxC", "", "", (Map<String, Type>) null, (List<String>) null, type0, (OperationID) null, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 1057);
      implementationStubInfo0.getContractID();
      assertEquals(1057, implementationStubInfo0.getImplPosition());
      assertEquals("", implementationStubInfo0.getClassName());
      assertEquals(")8D8`<rBxC", implementationStubInfo0.getNamespace());
      assertEquals("", implementationStubInfo0.getSignature());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Type type0 = new Type("4':1}2D>xlly|f+U5'", "", "");
      UUID uUID0 = MockUUID.fromString("VDgA/x8'E>5Sl\".^K");
      OperationID operationID0 = new OperationID(uUID0);
      ImplementationID implementationID0 = new ImplementationID(operationID0.id);
      ContractID contractID0 = new ContractID();
      InterfaceID interfaceID0 = new InterfaceID(contractID0.id);
      AccountID accountID0 = new AccountID();
      NamespaceID namespaceID0 = new NamespaceID(accountID0.id);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("Found alias reference : ", "Found alias reference : ", "Found alias reference : ", (Map<String, Type>) null, (List<String>) null, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 4287);
      implementationStubInfo0.getClassName();
      assertEquals(4287, implementationStubInfo0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IdentityHashMap<String, Type> identityHashMap0 = new IdentityHashMap<String, Type>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Type type0 = new Type("*", "Uc{urN/H?i-w+@", "");
      OperationID operationID0 = new OperationID((UUID) null);
      ImplementationID implementationID0 = new ImplementationID();
      ContractID contractID0 = new ContractID();
      InterfaceID interfaceID0 = new InterfaceID();
      AccountID accountID0 = new AccountID(implementationID0.id);
      NamespaceID namespaceID0 = new NamespaceID(contractID0.id);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("7)DK@R4y=", "", "*", identityHashMap0, linkedList0, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 0);
      String string0 = implementationStubInfo0.getClassName();
      assertEquals(0, implementationStubInfo0.getImplPosition());
      assertEquals("7)DK@R4y=", implementationStubInfo0.getNamespace());
      assertEquals("", string0);
      assertEquals("*", implementationStubInfo0.getSignature());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      ContractID contractID0 = new ContractID();
      implementationStubInfo0.setContractID(contractID0);
      assertNull(implementationStubInfo0.getClassName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Type> hashMap0 = new HashMap<String, Type>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Type type0 = new Type();
      OperationID operationID0 = new OperationID();
      ImplementationID implementationID0 = new ImplementationID("=jNCh_e");
      ContractID contractID0 = new ContractID();
      InterfaceID interfaceID0 = new InterfaceID("zT{nk");
      AccountID accountID0 = new AccountID(interfaceID0.id);
      NamespaceID namespaceID0 = new NamespaceID(operationID0.id);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("es.bsc.dataclay.util.management.stubs.ImplementationStubInfo", (String) null, (String) null, hashMap0, linkedList0, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 0);
      implementationStubInfo0.getOperationID();
      assertEquals(0, implementationStubInfo0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      InterfaceID interfaceID0 = new InterfaceID();
      implementationStubInfo0.setInterfaceID(interfaceID0);
      assertNull(implementationStubInfo0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      implementationStubInfo0.setSignature("");
      assertNull(implementationStubInfo0.getClassName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      OperationID operationID0 = new OperationID();
      implementationStubInfo0.setOperationID(operationID0);
      assertNull(implementationStubInfo0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      NamespaceID namespaceID0 = new NamespaceID();
      implementationStubInfo0.setNamespaceID(namespaceID0);
      assertNull(implementationStubInfo0.getSignature());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      implementationStubInfo0.setClassName("g");
      assertNull(implementationStubInfo0.getSignature());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      AccountID accountID0 = new AccountID();
      implementationStubInfo0.setResponsibleRemoteAccountID(accountID0);
      assertEquals(0, implementationStubInfo0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      Type type0 = new Type();
      implementationStubInfo0.setReturnType(type0);
      assertNull(type0.getDescriptor());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      ImplementationID implementationID0 = new ImplementationID();
      implementationStubInfo0.setRemoteImplID(implementationID0);
      assertEquals(0, implementationStubInfo0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      implementationStubInfo0.setParamsOrder(linkedList0);
      linkedList0.add("QR");
      List<String> list0 = implementationStubInfo0.getParamsOrder();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      Type type0 = new Type();
      boolean boolean0 = implementationStubInfo0.equals(type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IdentityHashMap<String, Type> identityHashMap0 = new IdentityHashMap<String, Type>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Type type0 = new Type("*", "Uc{urN/H?i-w+@", "");
      OperationID operationID0 = new OperationID((UUID) null);
      ImplementationID implementationID0 = new ImplementationID();
      ContractID contractID0 = new ContractID();
      InterfaceID interfaceID0 = new InterfaceID();
      AccountID accountID0 = new AccountID(implementationID0.id);
      NamespaceID namespaceID0 = new NamespaceID(contractID0.id);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("", "B?", "", identityHashMap0, linkedList0, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 2687);
      implementationStubInfo0.getRemoteImplID();
      assertEquals("B?", implementationStubInfo0.getClassName());
      assertEquals("", implementationStubInfo0.getSignature());
      assertEquals("", implementationStubInfo0.getNamespace());
      assertEquals(2687, implementationStubInfo0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Type> hashMap0 = new HashMap<String, Type>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UUID uUID0 = MockUUID.fromString("N4S<");
      OperationID operationID0 = new OperationID(uUID0);
      ImplementationID implementationID0 = new ImplementationID("N4S<");
      Type type0 = new Type("", "XJ!-+O<T2AOWYhb{h}", "");
      ContractID contractID0 = new ContractID();
      InterfaceID interfaceID0 = new InterfaceID();
      AccountID accountID0 = new AccountID(contractID0.id);
      NamespaceID namespaceID0 = new NamespaceID(interfaceID0.id);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("oI`&.)`8j\"u", " instead of ", (String) null, hashMap0, linkedList0, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 0);
      implementationStubInfo0.getInterfaceID();
      assertEquals(0, implementationStubInfo0.getImplPosition());
      assertEquals("oI`&.)`8j\"u", implementationStubInfo0.getNamespace());
      assertEquals(" instead of ", implementationStubInfo0.getClassName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      List<String> list0 = implementationStubInfo0.getParamsOrder();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      ContractID contractID0 = implementationStubInfo0.getContractID();
      assertNull(contractID0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      ImplementationID implementationID0 = implementationStubInfo0.getLocalImplID();
      assertNull(implementationID0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      NamespaceID namespaceID0 = implementationStubInfo0.getNamespaceID();
      assertNull(namespaceID0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      Map<String, Type> map0 = implementationStubInfo0.getParams();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      String string0 = implementationStubInfo0.getNamespace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      Type type0 = implementationStubInfo0.getReturnType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      String string0 = implementationStubInfo0.getSignature();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      // Undeclared exception!
      try { 
        implementationStubInfo0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.stubs.ImplementationStubInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      int int0 = implementationStubInfo0.getImplPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo();
      String string0 = implementationStubInfo0.getClassName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IdentityHashMap<String, Type> identityHashMap0 = new IdentityHashMap<String, Type>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Type type0 = new Type("*", "Uc{urN/H?i-w+@", "");
      OperationID operationID0 = new OperationID((UUID) null);
      ImplementationID implementationID0 = new ImplementationID();
      ContractID contractID0 = new ContractID();
      InterfaceID interfaceID0 = new InterfaceID();
      AccountID accountID0 = new AccountID(implementationID0.id);
      NamespaceID namespaceID0 = new NamespaceID(contractID0.id);
      ImplementationStubInfo implementationStubInfo0 = new ImplementationStubInfo("", "B?", "", identityHashMap0, linkedList0, type0, operationID0, implementationID0, implementationID0, contractID0, interfaceID0, accountID0, namespaceID0, 2687);
      implementationStubInfo0.getResponsibleRemoteAccountID();
      assertEquals("B?", implementationStubInfo0.getClassName());
      assertEquals(2687, implementationStubInfo0.getImplPosition());
      assertEquals("", implementationStubInfo0.getSignature());
      assertEquals("", implementationStubInfo0.getNamespace());
  }
}
