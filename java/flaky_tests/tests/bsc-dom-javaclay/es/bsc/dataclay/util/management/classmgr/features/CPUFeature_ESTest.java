/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:26:07 GMT 2022
 */

package es.bsc.dataclay.util.management.classmgr.features;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.management.classmgr.features.CPUFeature;
import es.bsc.dataclay.util.management.classmgr.features.MemoryFeature;
import es.bsc.dataclay.util.management.classmgr.features.QuantitativeFeature;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CPUFeature_ESTest extends CPUFeature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature(6);
      CPUFeature cPUFeature1 = new CPUFeature();
      boolean boolean0 = cPUFeature1.equals(cPUFeature0);
      assertFalse(boolean0);
      assertFalse(cPUFeature0.equals((Object)cPUFeature1));
      assertEquals(6, cPUFeature0.getAmount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature();
      // Undeclared exception!
      try { 
        cPUFeature0.setAmount(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad amount of CPUs specified: 0(must be > 0)
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.features.CPUFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(1981);
      CPUFeature cPUFeature0 = new CPUFeature();
      UUID uUID0 = MockUUID.fromString("gt2ph},_wn5");
      cPUFeature0.setId(uUID0);
      UUID uUID1 = cPUFeature0.getId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature(6);
      UUID uUID0 = MockUUID.randomUUID();
      cPUFeature0.setId(uUID0);
      cPUFeature0.getId();
      assertEquals(6, cPUFeature0.getAmount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature(5);
      int int0 = cPUFeature0.getAmount();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature();
      CPUFeature cPUFeature1 = new CPUFeature(362);
      int int0 = cPUFeature1.compareTo((QuantitativeFeature) cPUFeature0);
      assertEquals(362, cPUFeature1.getAmount());
      assertEquals(362, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature();
      CPUFeature cPUFeature1 = new CPUFeature(126);
      int int0 = cPUFeature0.compareTo((QuantitativeFeature) cPUFeature1);
      assertEquals((-126), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature();
      // Undeclared exception!
      try { 
        cPUFeature0.compareTo((QuantitativeFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.features.CPUFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature();
      MemoryFeature memoryFeature0 = new MemoryFeature();
      // Undeclared exception!
      try { 
        cPUFeature0.compareTo((QuantitativeFeature) memoryFeature0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class es.bsc.dataclay.util.management.classmgr.features.MemoryFeature cannot be cast to class es.bsc.dataclay.util.management.classmgr.features.CPUFeature (es.bsc.dataclay.util.management.classmgr.features.MemoryFeature and es.bsc.dataclay.util.management.classmgr.features.CPUFeature are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @84c8b31)
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.features.CPUFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CPUFeature cPUFeature0 = null;
      try {
        cPUFeature0 = new CPUFeature((-3422));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad amount of CPUs specified: -3422(must be > 0)
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.features.CPUFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature(6);
      cPUFeature0.setAmount(6);
      assertEquals(6, cPUFeature0.getAmount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature();
      int int0 = cPUFeature0.getAmount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature();
      CPUFeature cPUFeature1 = new CPUFeature(362);
      boolean boolean0 = cPUFeature1.equals(cPUFeature0);
      assertEquals(362, cPUFeature1.getAmount());
      assertFalse(boolean0);
      assertFalse(cPUFeature0.equals((Object)cPUFeature1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature();
      boolean boolean0 = cPUFeature0.equals(cPUFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature(6);
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = cPUFeature0.equals(uUID0);
      assertEquals(6, cPUFeature0.getAmount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature();
      cPUFeature0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature(6);
      // Undeclared exception!
      try { 
        cPUFeature0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/representer/Representer
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.features.CPUFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature();
      int int0 = cPUFeature0.compareTo((QuantitativeFeature) cPUFeature0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CPUFeature cPUFeature0 = new CPUFeature();
      UUID uUID0 = cPUFeature0.getId();
      assertNull(uUID0);
  }
}
