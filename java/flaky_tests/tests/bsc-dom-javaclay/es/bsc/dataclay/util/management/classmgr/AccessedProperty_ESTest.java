/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 12:41:01 GMT 2022
 */

package es.bsc.dataclay.util.management.classmgr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.ids.PropertyID;
import es.bsc.dataclay.util.management.classmgr.AccessedProperty;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccessedProperty_ESTest extends AccessedProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty(">i2sEG l`vvIK", "T`[~*L=,\"IC5", "T`[~*L=,\"IC5");
      UUID uUID0 = MockUUID.randomUUID();
      PropertyID propertyID0 = new PropertyID(uUID0);
      accessedProperty0.setPropertyID(propertyID0);
      accessedProperty0.getPropertyID();
      assertEquals(">i2sEG l`vvIK", accessedProperty0.getNamespace());
      assertEquals("T`[~*L=,\"IC5", accessedProperty0.getClassName());
      assertEquals("T`[~*L=,\"IC5", accessedProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty();
      String string0 = accessedProperty0.getNamespace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty("", (String) null, "");
      String string0 = accessedProperty0.getNamespace();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty(">tfm%?F/r", ">tfm%?F/r", ">tfm%?F/r");
      String string0 = accessedProperty0.getName();
      assertEquals(">tfm%?F/r", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty();
      accessedProperty0.setName("");
      String string0 = accessedProperty0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-2200));
      AccessedProperty accessedProperty0 = new AccessedProperty((String) null, "4[Y'f:", "&S3Ov;64k");
      UUID uUID0 = MockUUID.randomUUID();
      accessedProperty0.setId(uUID0);
      accessedProperty0.getId();
      assertEquals("&S3Ov;64k", accessedProperty0.getName());
      assertEquals("4[Y'f:", accessedProperty0.getClassName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty((String) null, "4[Y'f:", "&S3Ov;64k");
      UUID uUID0 = MockUUID.randomUUID();
      accessedProperty0.setId(uUID0);
      accessedProperty0.getId();
      assertEquals("&S3Ov;64k", accessedProperty0.getName());
      assertEquals("4[Y'f:", accessedProperty0.getClassName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty();
      String string0 = accessedProperty0.getClassName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty("", "", "");
      String string0 = accessedProperty0.getClassName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty((String) null, "<x", "");
      String string0 = accessedProperty0.getClassName();
      assertNotNull(string0);
      assertEquals("", accessedProperty0.getName());
      assertEquals("<x", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty();
      String string0 = accessedProperty0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty("<", "<", "<");
      String string0 = accessedProperty0.getNamespace();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty();
      accessedProperty0.setNamespace("");
      AccessedProperty accessedProperty1 = new AccessedProperty();
      boolean boolean0 = accessedProperty1.equals(accessedProperty0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty();
      accessedProperty0.setNamespace("");
      AccessedProperty accessedProperty1 = new AccessedProperty();
      boolean boolean0 = accessedProperty0.equals(accessedProperty1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty();
      accessedProperty0.setClassName("");
      AccessedProperty accessedProperty1 = new AccessedProperty("", "", "");
      boolean boolean0 = accessedProperty0.equals(accessedProperty1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty("<", "<", "<");
      AccessedProperty accessedProperty1 = new AccessedProperty();
      boolean boolean0 = accessedProperty1.equals(accessedProperty0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty("es.bsc.dataclay.util.Configuration", "es.bsc.dataclay.util.Configuration", "es.bsc.dataclay.util.Configuration");
      AccessedProperty accessedProperty1 = new AccessedProperty();
      boolean boolean0 = accessedProperty0.equals(accessedProperty1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty((String) null, (String) null, (String) null);
      boolean boolean0 = accessedProperty0.equals(accessedProperty0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty("<", "<", "<");
      boolean boolean0 = accessedProperty0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty("o_1Bbo08", "=\"dU!!`JPqZkM{K", "o_1Bbo08");
      accessedProperty0.getPropertyID();
      assertEquals("=\"dU!!`JPqZkM{K", accessedProperty0.getClassName());
      assertEquals("o_1Bbo08", accessedProperty0.getNamespace());
      assertEquals("o_1Bbo08", accessedProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty("<", "<", "<");
      accessedProperty0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty();
      accessedProperty0.setName("h");
      AccessedProperty accessedProperty1 = new AccessedProperty();
      boolean boolean0 = accessedProperty0.equals(accessedProperty1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty("<", "<", "<");
      UUID uUID0 = accessedProperty0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty((String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        accessedProperty0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/representer/Representer
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.AccessedProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccessedProperty accessedProperty0 = new AccessedProperty("M", "M", "M");
      boolean boolean0 = accessedProperty0.equals(accessedProperty0);
      assertTrue(boolean0);
  }
}
