/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 12:45:49 GMT 2022
 */

package es.bsc.dataclay.util.management.contractmgr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.ids.ImplementationID;
import es.bsc.dataclay.util.ids.InterfaceID;
import es.bsc.dataclay.util.ids.OperationID;
import es.bsc.dataclay.util.management.contractmgr.InterfaceInContract;
import es.bsc.dataclay.util.management.contractmgr.OpImplementations;
import es.bsc.dataclay.util.management.interfacemgr.Interface;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InterfaceInContract_ESTest extends InterfaceInContract_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      InterfaceID interfaceID0 = new InterfaceID();
      interfaceInContract0.setInterfaceID(interfaceID0);
      assertEquals("00000000-0100-4000-8200-000003000000", interfaceID0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      InterfaceID interfaceID0 = new InterfaceID();
      interfaceInContract0.interfaceID = interfaceID0;
      InterfaceID interfaceID1 = interfaceInContract0.getInterfaceID();
      assertEquals("00000000-0100-4000-8200-000003000000", interfaceID1.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interface interface0 = new Interface();
      LinkedHashSet<OpImplementations> linkedHashSet0 = new LinkedHashSet<OpImplementations>();
      InterfaceInContract interfaceInContract0 = new InterfaceInContract(interface0, linkedHashSet0);
      Set<OpImplementations> set0 = interfaceInContract0.getImplementationsSpecPerOperation();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<OperationID, OpImplementations> hashMap0 = new HashMap<OperationID, OpImplementations>();
      OperationID operationID0 = new OperationID("1)>+H,");
      BiFunction<Object, OpImplementations, OpImplementations> biFunction0 = (BiFunction<Object, OpImplementations, OpImplementations>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      OpImplementations opImplementations0 = hashMap0.computeIfPresent(operationID0, biFunction0);
      Interface interface0 = new Interface();
      LinkedHashSet<OpImplementations> linkedHashSet0 = new LinkedHashSet<OpImplementations>();
      InterfaceInContract interfaceInContract0 = new InterfaceInContract(interface0, linkedHashSet0);
      linkedHashSet0.add(opImplementations0);
      Set<OpImplementations> set0 = interfaceInContract0.getImplementationsSpecPerOperation();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interface interface0 = new Interface();
      LinkedHashSet<OpImplementations> linkedHashSet0 = new LinkedHashSet<OpImplementations>();
      InterfaceInContract interfaceInContract0 = new InterfaceInContract(interface0, linkedHashSet0);
      Interface interface1 = interfaceInContract0.getIface();
      assertNull(interface1.getProviderAccountName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(425);
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      UUID uUID0 = MockUUID.randomUUID();
      interfaceInContract0.setId(uUID0);
      UUID uUID1 = interfaceInContract0.getId();
      assertEquals("a9010000-aa01-4000-ab01-0000ac010000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      HashMap<OperationID, OpImplementations> hashMap0 = new HashMap<OperationID, OpImplementations>();
      interfaceInContract0.setAccessibleImplementations(hashMap0);
      Map<OperationID, OpImplementations> map0 = interfaceInContract0.getAccessibleImplementations();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      HashMap<OperationID, OpImplementations> hashMap0 = new HashMap<OperationID, OpImplementations>();
      interfaceInContract0.setAccessibleImplementations(hashMap0);
      OpImplementations opImplementations0 = new OpImplementations();
      hashMap0.put((OperationID) null, opImplementations0);
      Map<OperationID, OpImplementations> map0 = interfaceInContract0.getAccessibleImplementations();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      HashMap<OperationID, OpImplementations> hashMap0 = new HashMap<OperationID, OpImplementations>();
      OperationID operationID0 = new OperationID((UUID) null);
      OpImplementations opImplementations0 = new OpImplementations();
      hashMap0.put(operationID0, opImplementations0);
      // Undeclared exception!
      try { 
        interfaceInContract0.setAccessibleImplementations(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.ids.ID", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<OpImplementations> linkedHashSet0 = new LinkedHashSet<OpImplementations>();
      InterfaceInContract interfaceInContract0 = null;
      try {
        interfaceInContract0 = new InterfaceInContract((Interface) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.contractmgr.InterfaceInContract", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      interfaceInContract0.setImplementationsSpecPerOperation((Set<OpImplementations>) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      HashMap<OperationID, OpImplementations> hashMap0 = new HashMap<OperationID, OpImplementations>();
      interfaceInContract0.setAccessibleImplementations(hashMap0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("", "", "p-Z>g[VH3]", "r-#C~", linkedHashSet0, linkedHashSet0);
      interfaceInContract0.setIface(interface0);
      boolean boolean0 = interfaceInContract0.equals(interfaceInContract0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      HashMap<OperationID, OpImplementations> hashMap0 = new HashMap<OperationID, OpImplementations>();
      interfaceInContract0.setAccessibleImplementations(hashMap0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("", "", "p-Z>g[VH3]", "r-#C~", linkedHashSet0, linkedHashSet0);
      LinkedHashSet<OpImplementations> linkedHashSet1 = new LinkedHashSet<OpImplementations>();
      InterfaceInContract interfaceInContract1 = new InterfaceInContract(interface0, linkedHashSet1);
      interfaceInContract0.setIface(interface0);
      boolean boolean0 = interfaceInContract0.equals(interfaceInContract1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Interface interface0 = new Interface("", "", "p-Z>g[VH3]", "r-#C~", linkedHashSet0, linkedHashSet0);
      interfaceInContract0.setIface(interface0);
      // Undeclared exception!
      try { 
        interfaceInContract0.equals(interfaceInContract0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.contractmgr.InterfaceInContract", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      Interface interface0 = new Interface();
      InterfaceInContract interfaceInContract1 = new InterfaceInContract(interface0, (Set<OpImplementations>) null);
      boolean boolean0 = interfaceInContract1.equals(interfaceInContract0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      Object object0 = new Object();
      boolean boolean0 = interfaceInContract0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      HashMap<OperationID, OpImplementations> hashMap0 = new HashMap<OperationID, OpImplementations>();
      interfaceInContract0.setAccessibleImplementations(hashMap0);
      OperationID operationID0 = new OperationID("");
      OpImplementations opImplementations0 = new OpImplementations();
      ImplementationID implementationID0 = new ImplementationID();
      opImplementations0.setRemoteImplementationID(implementationID0);
      opImplementations0.setLocalImplementationID(implementationID0);
      hashMap0.put(operationID0, opImplementations0);
      interfaceInContract0.setAccessibleImplementations(interfaceInContract0.accessibleImplementations);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      HashMap<OperationID, OpImplementations> hashMap0 = new HashMap<OperationID, OpImplementations>();
      interfaceInContract0.setAccessibleImplementations(hashMap0);
      OperationID operationID0 = new OperationID("");
      OpImplementations opImplementations0 = new OpImplementations();
      ImplementationID implementationID0 = new ImplementationID();
      opImplementations0.setLocalImplementationID(implementationID0);
      hashMap0.put(operationID0, opImplementations0);
      // Undeclared exception!
      try { 
        interfaceInContract0.setAccessibleImplementations(interfaceInContract0.accessibleImplementations);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing remote implementation for the op: 00000000-0100-4000-8200-000003000000
         //
         verifyException("es.bsc.dataclay.util.management.contractmgr.InterfaceInContract", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      IdentityHashMap<OperationID, OpImplementations> identityHashMap0 = new IdentityHashMap<OperationID, OpImplementations>();
      OperationID operationID0 = new OperationID();
      identityHashMap0.put(operationID0, (OpImplementations) null);
      // Undeclared exception!
      try { 
        interfaceInContract0.setAccessibleImplementations(identityHashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No implementations provided for the op: 00000000-0100-4000-8200-000003000000
         //
         verifyException("es.bsc.dataclay.util.management.contractmgr.InterfaceInContract", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      interfaceInContract0.setAccessibleImplementations((Map<OperationID, OpImplementations>) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      Map<OperationID, OpImplementations> map0 = interfaceInContract0.getAccessibleImplementations();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      Set<OpImplementations> set0 = interfaceInContract0.getImplementationsSpecPerOperation();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      UUID uUID0 = interfaceInContract0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      UUID uUID0 = MockUUID.randomUUID();
      interfaceInContract0.setId(uUID0);
      UUID uUID1 = interfaceInContract0.getId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      interfaceInContract0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      Interface interface0 = interfaceInContract0.getIface();
      assertNull(interface0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InterfaceInContract interfaceInContract0 = new InterfaceInContract();
      InterfaceID interfaceID0 = interfaceInContract0.getInterfaceID();
      assertNull(interfaceID0);
  }
}
