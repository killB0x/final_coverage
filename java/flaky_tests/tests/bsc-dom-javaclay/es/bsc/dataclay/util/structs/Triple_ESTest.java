/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:20:18 GMT 2022
 */

package es.bsc.dataclay.util.structs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.structs.Triple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Triple_ESTest extends Triple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Triple<Triple<Integer, Integer, Integer>, Integer, Integer> triple0 = new Triple<Triple<Integer, Integer, Integer>, Integer, Integer>();
      Integer integer0 = triple0.getThird();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(423);
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>();
      Triple<Integer, Integer, Triple<Integer, Integer, Integer>> triple1 = new Triple<Integer, Integer, Triple<Integer, Integer, Integer>>(integer0, integer0, triple0);
      Triple<Integer, Integer, Integer> triple2 = triple1.getThird();
      assertSame(triple2, triple0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Triple<Triple<Integer, Integer, Integer>, Integer, Triple<Integer, Integer, Integer>> triple0 = new Triple<Triple<Integer, Integer, Integer>, Integer, Triple<Integer, Integer, Integer>>();
      Integer integer0 = triple0.getSecond();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>();
      Integer integer0 = triple0.getFirst();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>();
      // Undeclared exception!
      try { 
        triple0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Triple<Triple<Integer, Integer, Integer>, Integer, Integer> triple0 = new Triple<Triple<Integer, Integer, Integer>, Integer, Integer>();
      // Undeclared exception!
      try { 
        triple0.equals(triple0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.structs.Triple", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(3378);
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>(integer0, integer0, integer0);
      triple0.setThird(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>();
      Integer integer0 = new Integer(0);
      Triple<Integer, Triple<Integer, Integer, Integer>, Integer> triple1 = new Triple<Integer, Triple<Integer, Integer, Integer>, Integer>(integer0, triple0, integer0);
      Triple<Integer, Integer, Integer> triple2 = triple1.getSecond();
      assertSame(triple2, triple0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-335));
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>(integer0, integer0, integer0);
      triple0.setSecond(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>(integer0, integer0, integer0);
      boolean boolean0 = triple0.equals(triple0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>(integer0, integer0, integer0);
      Triple<Integer, Triple<Integer, Integer, Integer>, Integer> triple1 = new Triple<Integer, Triple<Integer, Integer, Integer>, Integer>(integer0, triple0, integer0);
      boolean boolean0 = triple1.equals(triple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Triple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Integer> triple0 = new Triple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Integer>();
      Triple<Integer, Integer, Integer> triple1 = new Triple<Integer, Integer, Integer>();
      triple0.setFirst(triple1);
      Triple<Triple<Integer, Integer, Integer>, Integer, Triple<Integer, Integer, Integer>> triple2 = new Triple<Triple<Integer, Integer, Integer>, Integer, Triple<Integer, Integer, Integer>>();
      boolean boolean0 = triple2.equals(triple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>(integer0, integer0, integer0);
      Triple<Integer, Integer, Triple<Integer, Integer, Integer>> triple1 = new Triple<Integer, Integer, Triple<Integer, Integer, Integer>>(integer0, integer0, triple0);
      Triple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>> triple2 = new Triple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>>(triple0, triple0, triple0);
      Object object0 = triple2.getFirst();
      boolean boolean0 = triple1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-335));
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>(integer0, integer0, integer0);
      Triple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Integer> triple1 = new Triple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Integer>(triple0, triple0, integer0);
      boolean boolean0 = triple1.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Triple<Integer, Triple<Integer, Integer, Integer>, Integer> triple0 = new Triple<Integer, Triple<Integer, Integer, Integer>, Integer>();
      triple0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = new Triple<Integer, Integer, Integer>();
      Triple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>> triple1 = new Triple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>>(triple0, triple0, triple0);
      String string0 = triple1.toString();
      assertNotNull(string0);
  }
}
