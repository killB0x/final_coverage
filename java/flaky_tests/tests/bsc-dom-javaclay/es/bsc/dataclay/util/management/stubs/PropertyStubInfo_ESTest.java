/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:46:17 GMT 2022
 */

package es.bsc.dataclay.util.management.stubs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.ids.NamespaceID;
import es.bsc.dataclay.util.ids.OperationID;
import es.bsc.dataclay.util.ids.PropertyID;
import es.bsc.dataclay.util.management.classmgr.Type;
import es.bsc.dataclay.util.management.stubs.PropertyStubInfo;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyStubInfo_ESTest extends PropertyStubInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      PropertyID propertyID0 = new PropertyID();
      Type type0 = new Type("j3c`sCs;54", "QI-E Zx]uK", "VA4xzuR1(&");
      OperationID operationID0 = new OperationID(propertyID0.id);
      NamespaceID namespaceID0 = new NamespaceID("VA4xzuR1(&");
      PropertyStubInfo propertyStubInfo1 = new PropertyStubInfo(propertyID0, "", type0, operationID0, operationID0, "", namespaceID0, "VA4xzuR1(&", "{+OB9b]<PIr9]", false);
      propertyStubInfo0.equals(propertyStubInfo1);
      assertEquals("VA4xzuR1(&", propertyStubInfo1.getBeforeUpdate());
      assertFalse(propertyStubInfo1.getInMaster());
      assertEquals("", propertyStubInfo1.getNamespace());
      assertEquals("{+OB9b]<PIr9]", propertyStubInfo1.getAfterUpdate());
      assertEquals("", propertyStubInfo1.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyID propertyID0 = new PropertyID("");
      Type type0 = new Type();
      OperationID operationID0 = new OperationID(propertyID0.id);
      OperationID operationID1 = new OperationID((String) null);
      NamespaceID namespaceID0 = new NamespaceID("\"C(_");
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo(propertyID0, "Z|", type0, operationID0, operationID1, (String) null, namespaceID0, "I*yrVmy", "\"C(_", false);
      assertEquals("I*yrVmy", propertyStubInfo0.getBeforeUpdate());
      assertEquals("\"C(_", propertyStubInfo0.getAfterUpdate());
      assertFalse(propertyStubInfo0.getInMaster());
      assertEquals("Z|", propertyStubInfo0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyID propertyID0 = new PropertyID("");
      Type type0 = new Type();
      OperationID operationID0 = new OperationID(propertyID0.id);
      NamespaceID namespaceID0 = new NamespaceID("\"C(_");
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo(propertyID0, "Z|", type0, operationID0, operationID0, (String) null, namespaceID0, "I*yrVmy", "\"C(_", false);
      propertyStubInfo0.hashCode();
      assertFalse(propertyStubInfo0.getInMaster());
      assertEquals("I*yrVmy", propertyStubInfo0.getBeforeUpdate());
      assertEquals("\"C(_", propertyStubInfo0.getAfterUpdate());
      assertEquals("Z|", propertyStubInfo0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      OperationID operationID0 = new OperationID("E5/5Z");
      propertyStubInfo0.setSetterOperationID(operationID0);
      OperationID operationID1 = propertyStubInfo0.getSetterOperationID();
      assertSame(operationID1, operationID0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      Type type0 = new Type();
      propertyStubInfo0.setPropertyType(type0);
      Type type1 = propertyStubInfo0.getPropertyType();
      assertNull(type1.getSignatureOrDescriptor());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      String string0 = propertyStubInfo0.getPropertyName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyID propertyID0 = new PropertyID("");
      Type type0 = new Type();
      OperationID operationID0 = new OperationID(propertyID0.id);
      NamespaceID namespaceID0 = new NamespaceID("\"C(_");
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo(propertyID0, "", type0, operationID0, operationID0, (String) null, namespaceID0, "I*yrVmy", "\"C(_", false);
      String string0 = propertyStubInfo0.getPropertyName();
      assertFalse(propertyStubInfo0.getInMaster());
      assertEquals("I*yrVmy", propertyStubInfo0.getBeforeUpdate());
      assertNotNull(string0);
      assertEquals("\"C(_", propertyStubInfo0.getAfterUpdate());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      PropertyID propertyID0 = propertyStubInfo0.getPropertyID();
      assertNull(propertyID0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyID propertyID0 = new PropertyID((UUID) null);
      OperationID operationID0 = new OperationID((UUID) null);
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo(propertyID0, "vq2b", (Type) null, operationID0, operationID0, "vq2b", (NamespaceID) null, "", "gQ.jQmQ'`wC9\"", true);
      String string0 = propertyStubInfo0.getNamespace();
      assertEquals("vq2b", string0);
      assertEquals("gQ.jQmQ'`wC9\"", propertyStubInfo0.getAfterUpdate());
      assertTrue(propertyStubInfo0.getInMaster());
      assertEquals("", propertyStubInfo0.getBeforeUpdate());
      assertEquals("vq2b", propertyStubInfo0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyID propertyID0 = new PropertyID("[==Hint==] Setting hint (Retry remote execution) on instance ");
      Type type0 = new Type();
      NamespaceID namespaceID0 = new NamespaceID(propertyID0.id);
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo(propertyID0, "[==Hint==] Setting hint (Retry remote execution) on instance ", type0, (OperationID) null, (OperationID) null, "", namespaceID0, (String) null, "es.bsc.dataclay.util.management.stubs.PropertyStubInfo", false);
      String string0 = propertyStubInfo0.getNamespace();
      assertEquals("es.bsc.dataclay.util.management.stubs.PropertyStubInfo", propertyStubInfo0.getAfterUpdate());
      assertEquals("[==Hint==] Setting hint (Retry remote execution) on instance ", propertyStubInfo0.getPropertyName());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(propertyStubInfo0.getInMaster());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyID propertyID0 = new PropertyID((String) null);
      Type type0 = new Type((String) null, (String) null, (String) null);
      OperationID operationID0 = new OperationID(propertyID0.id);
      NamespaceID namespaceID0 = new NamespaceID();
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo(propertyID0, (String) null, type0, operationID0, operationID0, (String) null, namespaceID0, "", "", false);
      propertyStubInfo0.getGetterOperationID();
      assertFalse(propertyStubInfo0.getInMaster());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyID propertyID0 = new PropertyID("wN:MGF");
      Type type0 = new Type();
      OperationID operationID0 = new OperationID(propertyID0.id);
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo(propertyID0, "", type0, operationID0, operationID0, (String) null, (NamespaceID) null, "FR..#Fi;|j,@", (String) null, true);
      String string0 = propertyStubInfo0.getBeforeUpdate();
      assertTrue(propertyStubInfo0.getInMaster());
      assertEquals("", propertyStubInfo0.getPropertyName());
      assertEquals("FR..#Fi;|j,@", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      String string0 = propertyStubInfo0.getAfterUpdate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      propertyStubInfo0.setAfterUpdate("%r9osRU");
      String string0 = propertyStubInfo0.getAfterUpdate();
      assertEquals("%r9osRU", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyID propertyID0 = new PropertyID("");
      Type type0 = new Type("", "", "");
      OperationID operationID0 = new OperationID();
      NamespaceID namespaceID0 = new NamespaceID(propertyID0.id);
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo(propertyID0, "", type0, operationID0, operationID0, "", namespaceID0, ", ", "j#5(9W1", true);
      propertyStubInfo0.equals(propertyStubInfo0);
      assertEquals("", propertyStubInfo0.getNamespace());
      assertEquals("j#5(9W1", propertyStubInfo0.getAfterUpdate());
      assertTrue(propertyStubInfo0.getInMaster());
      assertEquals("", propertyStubInfo0.getPropertyName());
      assertEquals(", ", propertyStubInfo0.getBeforeUpdate());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      OperationID operationID0 = new OperationID("$$IsStub");
      propertyStubInfo0.setGetterOperationID(operationID0);
      assertNull(propertyStubInfo0.getBeforeUpdate());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      propertyStubInfo0.setBeforeUpdate("");
      String string0 = propertyStubInfo0.getBeforeUpdate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      propertyStubInfo0.setPropertyName("qGC\"Ic% fV");
      assertNull(propertyStubInfo0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      UUID uUID0 = MockUUID.fromString("+_,?4n6D");
      PropertyID propertyID0 = new PropertyID(uUID0);
      propertyStubInfo0.setPropertyID(propertyID0);
      assertNull(propertyStubInfo0.getAfterUpdate());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      propertyStubInfo0.setNamespace("i");
      assertEquals("i", propertyStubInfo0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      propertyStubInfo0.setInMaster(true);
      boolean boolean0 = propertyStubInfo0.getInMaster();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      // Undeclared exception!
      try { 
        propertyStubInfo0.equals(propertyStubInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.stubs.PropertyStubInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      Object object0 = new Object();
      boolean boolean0 = propertyStubInfo0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      OperationID operationID0 = propertyStubInfo0.getSetterOperationID();
      assertNull(operationID0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      boolean boolean0 = propertyStubInfo0.getInMaster();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      OperationID operationID0 = propertyStubInfo0.getGetterOperationID();
      assertNull(operationID0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      String string0 = propertyStubInfo0.getBeforeUpdate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      // Undeclared exception!
      try { 
        propertyStubInfo0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.management.stubs.PropertyStubInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyID propertyID0 = new PropertyID("=~7a/o@JgxP");
      Type type0 = new Type("e/Z", "es.bsc.dataclay.util.management.stubs.PropertyStubInfo", "es.bsc.dataclay.util.management.stubs.PropertyStubInfo");
      OperationID operationID0 = new OperationID(propertyID0.id);
      NamespaceID namespaceID0 = new NamespaceID("es.bsc.dataclay.util.management.stubs.PropertyStubInfo");
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo(propertyID0, "~P}=1_.aFZhx", type0, operationID0, operationID0, "\nMSG: ", namespaceID0, "$dgJWlkmr^", "", false);
      String string0 = propertyStubInfo0.getAfterUpdate();
      assertEquals("~P}=1_.aFZhx", propertyStubInfo0.getPropertyName());
      assertEquals("\nMSG: ", propertyStubInfo0.getNamespace());
      assertFalse(propertyStubInfo0.getInMaster());
      assertEquals("", string0);
      assertEquals("$dgJWlkmr^", propertyStubInfo0.getBeforeUpdate());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyID propertyID0 = new PropertyID((UUID) null);
      Type type0 = new Type("", "", "");
      OperationID operationID0 = new OperationID((UUID) null);
      NamespaceID namespaceID0 = new NamespaceID((UUID) null);
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo(propertyID0, "", type0, operationID0, operationID0, "es.bsc.dataclay.util.management.stubs.PropertyStubInfo", namespaceID0, "es.bsc.dataclay.util.management.stubs.PropertyStubInfo", "[==Hint==] Setting hint (moveObject) on instance ", true);
      propertyStubInfo0.setNamespaceID(namespaceID0);
      propertyStubInfo0.getNamespaceID();
      assertEquals("", propertyStubInfo0.getPropertyName());
      assertEquals("es.bsc.dataclay.util.management.stubs.PropertyStubInfo", propertyStubInfo0.getNamespace());
      assertEquals("es.bsc.dataclay.util.management.stubs.PropertyStubInfo", propertyStubInfo0.getBeforeUpdate());
      assertEquals("[==Hint==] Setting hint (moveObject) on instance ", propertyStubInfo0.getAfterUpdate());
      assertTrue(propertyStubInfo0.getInMaster());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyID propertyID0 = new PropertyID("=~7a/o@JgxP");
      Type type0 = new Type("e/Z", "es.bsc.dataclay.util.management.stubs.PropertyStubInfo", "es.bsc.dataclay.util.management.stubs.PropertyStubInfo");
      OperationID operationID0 = new OperationID(propertyID0.id);
      NamespaceID namespaceID0 = new NamespaceID("es.bsc.dataclay.util.management.stubs.PropertyStubInfo");
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo(propertyID0, "~P}=1_.aFZhx", type0, operationID0, operationID0, "\nMSG: ", namespaceID0, "$dgJWlkmr^", "", false);
      String string0 = propertyStubInfo0.getPropertyName();
      assertFalse(propertyStubInfo0.getInMaster());
      assertEquals("$dgJWlkmr^", propertyStubInfo0.getBeforeUpdate());
      assertEquals("~P}=1_.aFZhx", string0);
      assertEquals("", propertyStubInfo0.getAfterUpdate());
      assertEquals("\nMSG: ", propertyStubInfo0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      Type type0 = propertyStubInfo0.getPropertyType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      NamespaceID namespaceID0 = propertyStubInfo0.getNamespaceID();
      assertNull(namespaceID0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyID propertyID0 = new PropertyID("=~7a/o@JgxP");
      Type type0 = new Type("e/Z", "es.bsc.dataclay.util.management.stubs.PropertyStubInfo", "es.bsc.dataclay.util.management.stubs.PropertyStubInfo");
      OperationID operationID0 = new OperationID(propertyID0.id);
      NamespaceID namespaceID0 = new NamespaceID("es.bsc.dataclay.util.management.stubs.PropertyStubInfo");
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo(propertyID0, "~P}=1_.aFZhx", type0, operationID0, operationID0, "\nMSG: ", namespaceID0, "$dgJWlkmr^", "", false);
      propertyStubInfo0.getPropertyID();
      assertEquals("~P}=1_.aFZhx", propertyStubInfo0.getPropertyName());
      assertFalse(propertyStubInfo0.getInMaster());
      assertEquals("$dgJWlkmr^", propertyStubInfo0.getBeforeUpdate());
      assertEquals("\nMSG: ", propertyStubInfo0.getNamespace());
      assertEquals("", propertyStubInfo0.getAfterUpdate());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyStubInfo propertyStubInfo0 = new PropertyStubInfo();
      String string0 = propertyStubInfo0.getNamespace();
      assertNull(string0);
  }
}
