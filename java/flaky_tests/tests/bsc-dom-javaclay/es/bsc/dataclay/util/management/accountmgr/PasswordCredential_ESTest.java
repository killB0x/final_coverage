/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:34:37 GMT 2022
 */

package es.bsc.dataclay.util.management.accountmgr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.DataClayObject;
import es.bsc.dataclay.serialization.buffer.GrpcByteBuffer;
import es.bsc.dataclay.serialization.buffer.JavaByteBuffer;
import es.bsc.dataclay.util.DataClayObjectMetaData;
import es.bsc.dataclay.util.ReferenceCounting;
import es.bsc.dataclay.util.ids.CredentialID;
import es.bsc.dataclay.util.ids.MetaClassID;
import es.bsc.dataclay.util.management.accountmgr.PasswordCredential;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.ListIterator;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PasswordCredential_ESTest extends PasswordCredential_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential(":");
      PasswordCredential passwordCredential1 = new PasswordCredential(":");
      boolean boolean0 = passwordCredential0.equals(passwordCredential1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential(":");
      GrpcByteBuffer grpcByteBuffer0 = new GrpcByteBuffer();
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      ListIterator<DataClayObject> listIterator0 = (ListIterator<DataClayObject>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      passwordCredential0.serialize(grpcByteBuffer0, false, hashMap0, identityHashMap0, listIterator0, referenceCounting0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential("'QS(?QbzUp81rR2XB");
      String string0 = passwordCredential0.getPassword();
      assertEquals("'QS(?QbzUp81rR2XB", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential("");
      String string0 = passwordCredential0.getPassword();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential();
      CredentialID credentialID0 = new CredentialID((UUID) null);
      passwordCredential0.setDataClayID(credentialID0);
      // Undeclared exception!
      try { 
        passwordCredential0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.util.ids.ID", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential((String) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4);
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteBuffer0);
      IdentityHashMap<MetaClassID, byte[]> identityHashMap0 = new IdentityHashMap<MetaClassID, byte[]>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      passwordCredential0.deserialize(javaByteBuffer0, identityHashMap0, (DataClayObjectMetaData) null, hashMap0);
      // Undeclared exception!
      try { 
        passwordCredential0.deserialize(javaByteBuffer0, identityHashMap0, (DataClayObjectMetaData) null, hashMap0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      IdentityHashMap<Integer, Object> identityHashMap0 = new IdentityHashMap<Integer, Object>();
      // Undeclared exception!
      passwordCredential0.deserialize(javaByteBuffer0, hashMap0, (DataClayObjectMetaData) null, identityHashMap0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-39);
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer(byteArray0);
      IdentityHashMap<Integer, Object> identityHashMap0 = new IdentityHashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        passwordCredential0.deserialize(javaByteBuffer0, (Map<MetaClassID, byte[]>) null, (DataClayObjectMetaData) null, identityHashMap0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -654311424
         //
         verifyException("es.bsc.dataclay.serialization.buffer.JavaByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential((String) null);
      boolean boolean0 = passwordCredential0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential();
      // Undeclared exception!
      try { 
        passwordCredential0.equals(passwordCredential0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential((String) null);
      passwordCredential0.setPassword("5|QTiP");
      assertEquals("5|QTiP", passwordCredential0.getPassword());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential();
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer();
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      IdentityHashMap<Object, Integer> identityHashMap0 = new IdentityHashMap<Object, Integer>();
      ReferenceCounting referenceCounting0 = new ReferenceCounting();
      // Undeclared exception!
      try { 
        passwordCredential0.serialize(javaByteBuffer0, false, hashMap0, identityHashMap0, (ListIterator<DataClayObject>) null, referenceCounting0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.buffer.JavaByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential();
      String string0 = passwordCredential0.toString();
      assertEquals("null:null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential();
      passwordCredential0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential();
      JavaByteBuffer javaByteBuffer0 = new JavaByteBuffer((ByteBuffer) null);
      HashMap<MetaClassID, byte[]> hashMap0 = new HashMap<MetaClassID, byte[]>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        passwordCredential0.deserialize(javaByteBuffer0, hashMap0, (DataClayObjectMetaData) null, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.bsc.dataclay.serialization.buffer.JavaByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential();
      String string0 = passwordCredential0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PasswordCredential passwordCredential0 = new PasswordCredential("grpc-");
      Integer integer0 = new Integer(1579);
      boolean boolean0 = passwordCredential0.equals(integer0);
      assertFalse(boolean0);
  }
}
