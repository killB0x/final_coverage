/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 12:56:40 GMT 2022
 */

package es.bsc.dataclay.util.management.classmgr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.bsc.dataclay.util.ids.ImplementationID;
import es.bsc.dataclay.util.management.classmgr.AccessedImplementation;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccessedImplementation_ESTest extends AccessedImplementation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("s", "_Fc", "s", 0);
      AccessedImplementation accessedImplementation1 = new AccessedImplementation("K%{", "_Fc", "s", (-2547));
      assertEquals("K%{", accessedImplementation1.getNamespace());
      
      accessedImplementation1.setNamespace("s");
      boolean boolean0 = accessedImplementation1.equals(accessedImplementation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      accessedImplementation0.setOpSignature("+gKo*b?Do$2v]kZHup");
      String string0 = accessedImplementation0.getOpSignature();
      assertEquals("+gKo*b?Do$2v]kZHup", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("", "", "", 0);
      accessedImplementation0.getOpSignature();
      assertEquals(0, accessedImplementation0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("[==Serialization==] Deserializing return", "[==Serialization==] Deserializing return", "[==Serialization==] Deserializing return", 0);
      accessedImplementation0.getNamespace();
      assertEquals(0, accessedImplementation0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("", "", "", 0);
      accessedImplementation0.getNamespace();
      assertEquals(0, accessedImplementation0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      ImplementationID implementationID0 = new ImplementationID((UUID) null);
      accessedImplementation0.setImplementationID(implementationID0);
      ImplementationID implementationID1 = accessedImplementation0.getImplementationID();
      assertSame(implementationID1, implementationID0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("es.bsc.dataclay.util.management.classmgr.AccessedImplementation", "es.bsc.dataclay.util.management.classmgr.AccessedImplementation", "es.bsc.dataclay.util.management.classmgr.AccessedImplementation", 433);
      int int0 = accessedImplementation0.getImplPosition();
      assertEquals(433, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("p0C,g,X=dEd@#", "Bg", "es.bsc.dataclay.util.management.classmgr.AccessedImplementation", (-1627));
      int int0 = accessedImplementation0.getImplPosition();
      assertEquals("es.bsc.dataclay.util.management.classmgr.AccessedImplementation", accessedImplementation0.getOpSignature());
      assertEquals((-1627), int0);
      assertEquals("Bg", accessedImplementation0.getClassName());
      assertEquals("p0C,g,X=dEd@#", accessedImplementation0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom(1994);
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      UUID uUID0 = MockUUID.randomUUID();
      accessedImplementation0.setId(uUID0);
      UUID uUID1 = accessedImplementation0.getId();
      assertEquals((-8356710580122877952L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("es.bsc.dataclay.util.management.classmgr.AccessedImplementation", "es.bsc.dataclay.util.management.classmgr.AccessedImplementation", "es.bsc.dataclay.util.management.classmgr.AccessedImplementation", 433);
      UUID uUID0 = MockUUID.fromString("");
      accessedImplementation0.setId(uUID0);
      accessedImplementation0.getId();
      assertEquals(433, accessedImplementation0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      String string0 = accessedImplementation0.getClassName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("es.bsc.dataclay.util.management.classmgr.AccessedImplementation", "es.bsc.dataclay.util.management.classmgr.AccessedImplementation", "Gjg[%N", 2634);
      String string0 = accessedImplementation0.getClassName();
      assertEquals("es.bsc.dataclay.util.management.classmgr.AccessedImplementation", accessedImplementation0.getNamespace());
      assertEquals("Gjg[%N", accessedImplementation0.getOpSignature());
      assertEquals(2634, accessedImplementation0.getImplPosition());
      assertEquals("es.bsc.dataclay.util.management.classmgr.AccessedImplementation", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      // Undeclared exception!
      try { 
        accessedImplementation0.equals(accessedImplementation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("", "", "", 0);
      accessedImplementation0.getClassName();
      assertEquals(0, accessedImplementation0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      accessedImplementation0.setClassName("");
      assertNull(accessedImplementation0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      accessedImplementation0.setImplPosition((-1885));
      assertEquals((-1885), accessedImplementation0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      String string0 = accessedImplementation0.getOpSignature();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      int int0 = accessedImplementation0.getImplPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      String string0 = accessedImplementation0.getNamespace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("s", "s", "s", 0);
      AccessedImplementation accessedImplementation1 = new AccessedImplementation("s", "s", "s", 7);
      boolean boolean0 = accessedImplementation1.equals(accessedImplementation0);
      assertEquals(7, accessedImplementation1.getImplPosition());
      assertFalse(accessedImplementation0.equals((Object)accessedImplementation1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("s", "s", "s", 0);
      AccessedImplementation accessedImplementation1 = new AccessedImplementation("s", "s", "d", 0);
      boolean boolean0 = accessedImplementation1.equals(accessedImplementation0);
      assertEquals("s", accessedImplementation1.getClassName());
      assertFalse(boolean0);
      assertEquals("s", accessedImplementation1.getNamespace());
      assertEquals(0, accessedImplementation1.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("Uj\".zz]Sh", "Uj\".zz]Sh", "Uj\".zz]Sh", 3837);
      AccessedImplementation accessedImplementation1 = new AccessedImplementation("Uj\".zz]Sh", "NUt3Q<a=<", "Uj\".zz]Sh", 3837);
      boolean boolean0 = accessedImplementation1.equals(accessedImplementation0);
      assertEquals("Uj\".zz]Sh", accessedImplementation1.getOpSignature());
      assertEquals(3837, accessedImplementation1.getImplPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      accessedImplementation0.setNamespace("");
      AccessedImplementation accessedImplementation1 = new AccessedImplementation("&l-GCH>-V^$C\"5rlh", "", "&l-GCH>-V^$C\"5rlh", 676);
      assertEquals("&l-GCH>-V^$C\"5rlh", accessedImplementation1.getNamespace());
      
      boolean boolean0 = accessedImplementation0.equals(accessedImplementation1);
      assertEquals("", accessedImplementation1.getClassName());
      assertEquals("&l-GCH>-V^$C\"5rlh", accessedImplementation1.getOpSignature());
      assertEquals(676, accessedImplementation1.getImplPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      Object object0 = new Object();
      boolean boolean0 = accessedImplementation0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("", "Uv\".zz]Sh", "Uv\".zz]Sh", (-1296));
      // Undeclared exception!
      try { 
        accessedImplementation0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/representer/Representer
         //
         verifyException("es.bsc.dataclay.util.management.classmgr.AccessedImplementation", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      accessedImplementation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      ImplementationID implementationID0 = accessedImplementation0.getImplementationID();
      assertNull(implementationID0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation();
      UUID uUID0 = accessedImplementation0.getId();
      accessedImplementation0.setId(uUID0);
      assertEquals(0, accessedImplementation0.getImplPosition());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AccessedImplementation accessedImplementation0 = new AccessedImplementation("s", "s", "s", 0);
      boolean boolean0 = accessedImplementation0.equals(accessedImplementation0);
      assertTrue(boolean0);
      assertEquals(0, accessedImplementation0.getImplPosition());
  }
}
