/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 12:32:12 GMT 2022
 */

package net.spy.memcached.ops;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Set;
import net.spy.memcached.ops.CASOperation;
import net.spy.memcached.ops.ConcatenationOperation;
import net.spy.memcached.ops.ConcatenationType;
import net.spy.memcached.ops.DeleteOperation;
import net.spy.memcached.ops.GetAndTouchOperation;
import net.spy.memcached.ops.GetlOperation;
import net.spy.memcached.ops.GetsOperation;
import net.spy.memcached.ops.KeyedOperation;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.Mutator;
import net.spy.memcached.ops.MutatorOperation;
import net.spy.memcached.ops.ObserveOperation;
import net.spy.memcached.ops.Operation;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.ReplicaGetOperation;
import net.spy.memcached.ops.ReplicaGetsOperation;
import net.spy.memcached.ops.StatsOperation;
import net.spy.memcached.ops.StoreOperation;
import net.spy.memcached.ops.StoreType;
import net.spy.memcached.ops.TouchOperation;
import net.spy.memcached.protocol.ascii.AsciiOperationFactory;
import net.spy.memcached.protocol.binary.BinaryOperationFactory;
import net.spy.memcached.protocol.binary.GetAndTouchOperationImpl;
import net.spy.memcached.protocol.binary.GetlOperationImpl;
import net.spy.memcached.protocol.binary.GetsOperationImpl;
import net.spy.memcached.protocol.binary.KeyStatsOperationImpl;
import net.spy.memcached.protocol.binary.MultiGetOperationImpl;
import net.spy.memcached.protocol.binary.ReplicaGetsOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseOperationFactory_ESTest extends BaseOperationFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("]=", 2244, (GetAndTouchOperation.Callback) null);
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.clone(getAndTouchOperationImpl0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Get and touch is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      // Undeclared exception!
      try { 
        binaryOperationFactory0.clone((KeyedOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.ops.BaseOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 2147483645);
      MultiGetOperationImpl multiGetOperationImpl0 = new MultiGetOperationImpl(set0, multiReplicaGetOperationCallback0);
      // Undeclared exception!
      try { 
        binaryOperationFactory0.clone(multiGetOperationImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.spy.memcached.protocol.binary.MultiGetOperationImpl cannot be cast to class net.spy.memcached.protocol.binary.ReplicaGetOperationImpl (net.spy.memcached.protocol.binary.MultiGetOperationImpl and net.spy.memcached.protocol.binary.ReplicaGetOperationImpl are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @683f4d15)
         //
         verifyException("net.spy.memcached.protocol.binary.BinaryOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      KeyStatsOperationImpl keyStatsOperationImpl0 = new KeyStatsOperationImpl("", (StatsOperation.Callback) null);
      // Undeclared exception!
      try { 
        binaryOperationFactory0.clone(keyStatsOperationImpl0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Unhandled operation type: class net.spy.memcached.protocol.binary.KeyStatsOperationImpl
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      GetlOperationImpl getlOperationImpl0 = new GetlOperationImpl((String) null, 345, (GetlOperation.Callback) null);
      Collection<Operation> collection0 = binaryOperationFactory0.clone(getlOperationImpl0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      TouchOperation touchOperation0 = binaryOperationFactory0.touch("xn9)T=z6}]\n(", 0, (OperationCallback) null);
      Collection<Operation> collection0 = binaryOperationFactory0.clone(touchOperation0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("net.spy.memcached.ops.BaseOperationFactory", 0, (GetAndTouchOperation.Callback) null);
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      Collection<Operation> collection0 = binaryOperationFactory0.clone(getAndTouchOperationImpl0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ConcatenationType concatenationType0 = ConcatenationType.append;
      ConcatenationOperation concatenationOperation0 = binaryOperationFactory0.cat(concatenationType0, 10L, "Unhandled operation type: ", (byte[]) null, (OperationCallback) null);
      Collection<Operation> collection0 = binaryOperationFactory0.clone(concatenationOperation0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      StoreType storeType0 = StoreType.set;
      StoreOperation storeOperation0 = asciiOperationFactory0.store(storeType0, "", 629, 629, (byte[]) null, (StoreOperation.Callback) null);
      Collection<Operation> collection0 = asciiOperationFactory0.clone(storeOperation0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      Mutator mutator0 = Mutator.decr;
      MutatorOperation mutatorOperation0 = binaryOperationFactory0.mutate(mutator0, "3@_W.r:JCMX=;Fj", 1L, 1L, 1713, (OperationCallback) null);
      Collection<Operation> collection0 = binaryOperationFactory0.clone(mutatorOperation0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      DeleteOperation deleteOperation0 = binaryOperationFactory0.delete("8!w6c;-9jd", (DeleteOperation.Callback) null);
      Collection<Operation> collection0 = binaryOperationFactory0.clone(deleteOperation0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      StoreType storeType0 = StoreType.replace;
      byte[] byteArray0 = new byte[7];
      CASOperation cASOperation0 = binaryOperationFactory0.cas(storeType0, "+i*gK3k#S217", (-1708L), 1, 1, byteArray0, (StoreOperation.Callback) null);
      Collection<Operation> collection0 = binaryOperationFactory0.clone(cASOperation0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      GetsOperationImpl getsOperationImpl0 = new GetsOperationImpl((String) null, (GetsOperation.Callback) null);
      Collection<Operation> collection0 = binaryOperationFactory0.clone(getsOperationImpl0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("',;+(6 -s(CsU", (-3797), (ReplicaGetsOperation.Callback) null);
      Collection<Operation> collection0 = binaryOperationFactory0.clone(replicaGetsOperationImpl0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ReplicaGetOperation replicaGetOperation0 = binaryOperationFactory0.replicaGet("MUTATION", 797, (ReplicaGetOperation.Callback) null);
      Collection<Operation> collection0 = binaryOperationFactory0.clone(replicaGetOperation0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ReplicaGetsOperation.Callback replicaGetsOperation_Callback0 = mock(ReplicaGetsOperation.Callback.class, new ViolatedAssumptionAnswer());
      ReplicaGetsOperation replicaGetsOperation0 = binaryOperationFactory0.replicaGets("0XAd[`?.>4_o/LE%w", (-906), replicaGetsOperation_Callback0);
      replicaGetsOperation0.cancel();
      // Undeclared exception!
      try { 
        binaryOperationFactory0.clone(replicaGetsOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Attempted to clone a canceled op
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      KeyStatsOperationImpl keyStatsOperationImpl0 = new KeyStatsOperationImpl("N|8", (StatsOperation.Callback) null);
      keyStatsOperationImpl0.writing();
      // Undeclared exception!
      try { 
        binaryOperationFactory0.clone(keyStatsOperationImpl0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Who passed me an operation in the WRITINGstate?
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ObserveOperation observeOperation0 = binaryOperationFactory0.observe("", 12, 0, (ObserveOperation.Callback) null);
      Collection<Operation> collection0 = binaryOperationFactory0.clone(observeOperation0);
      assertNotNull(collection0);
  }
}
