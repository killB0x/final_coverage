/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 12:44:41 GMT 2022
 */

package net.spy.memcached.ops;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.ops.StatusCode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StatusCode_ESTest extends StatusCode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StatusCode[] statusCodeArray0 = StatusCode.values();
      assertEquals(18, statusCodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.valueOf("ERR_TEMP_FAIL");
      assertEquals(StatusCode.ERR_TEMP_FAIL, statusCode0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatusCode.fromAsciiLine((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromAsciiLine("CLIENT_ERROR");
      assertEquals(StatusCode.ERR_INTERNAL, statusCode0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromAsciiLine("ERROR");
      assertEquals(StatusCode.ERR_INTERNAL, statusCode0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromAsciiLine("NOT_FOUND");
      assertEquals(StatusCode.ERR_NOT_FOUND, statusCode0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromAsciiLine("EXISTS");
      assertEquals(StatusCode.ERR_EXISTS, statusCode0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromAsciiLine("NOT_STORED");
      assertEquals(StatusCode.ERR_NOT_STORED, statusCode0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromAsciiLine("DELETED");
      assertEquals(StatusCode.SUCCESS, statusCode0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromAsciiLine("ERR_INVAL");
      assertEquals(StatusCode.ERR_CLIENT, statusCode0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromAsciiLine("STORED");
      assertEquals(StatusCode.SUCCESS, statusCode0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(4083);
      assertEquals(StatusCode.ERR_CLIENT, statusCode0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(134);
      assertEquals(StatusCode.ERR_TEMP_FAIL, statusCode0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(132);
      assertEquals(StatusCode.ERR_INTERNAL, statusCode0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(131);
      assertEquals(StatusCode.ERR_NOT_SUPPORTED, statusCode0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(130);
      assertEquals(StatusCode.ERR_NO_MEM, statusCode0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(129);
      assertEquals(StatusCode.ERR_UNKNOWN_COMMAND, statusCode0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(7);
      assertEquals(StatusCode.ERR_NOT_MY_VBUCKET, statusCode0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(6);
      assertEquals(StatusCode.ERR_DELTA_BADVAL, statusCode0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(5);
      assertEquals(StatusCode.ERR_NOT_STORED, statusCode0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(4);
      assertEquals(StatusCode.ERR_INVAL, statusCode0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(3);
      assertEquals(StatusCode.ERR_2BIG, statusCode0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(2);
      assertEquals(StatusCode.ERR_EXISTS, statusCode0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(1);
      assertEquals(StatusCode.ERR_NOT_FOUND, statusCode0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(133);
      assertEquals(StatusCode.ERR_BUSY, statusCode0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StatusCode statusCode0 = StatusCode.fromBinaryCode(0);
      assertEquals(StatusCode.SUCCESS, statusCode0);
  }
}
