/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:23:37 GMT 2022
 */

package net.spy.memcached.transcoders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.CachedData;
import net.spy.memcached.transcoders.IntegerTranscoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntegerTranscoder_ESTest extends IntegerTranscoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntegerTranscoder integerTranscoder0 = new IntegerTranscoder();
      byte[] byteArray0 = new byte[0];
      CachedData cachedData0 = new CachedData(49, byteArray0, 49);
      Integer integer0 = integerTranscoder0.decode(cachedData0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IntegerTranscoder integerTranscoder0 = new IntegerTranscoder();
      Integer integer0 = new Integer(512);
      CachedData cachedData0 = integerTranscoder0.encode(integer0);
      Integer integer1 = integerTranscoder0.decode(cachedData0);
      assertEquals(20971520, integerTranscoder0.getMaxSize());
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IntegerTranscoder integerTranscoder0 = new IntegerTranscoder();
      Integer integer0 = new Integer((-1756));
      CachedData cachedData0 = integerTranscoder0.encode(integer0);
      Integer integer1 = integerTranscoder0.decode(cachedData0);
      assertEquals(20971520, integerTranscoder0.getMaxSize());
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IntegerTranscoder integerTranscoder0 = new IntegerTranscoder();
      // Undeclared exception!
      try { 
        integerTranscoder0.decode((CachedData) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.transcoders.IntegerTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IntegerTranscoder integerTranscoder0 = new IntegerTranscoder();
      int int0 = integerTranscoder0.getMaxSize();
      assertEquals(20971520, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IntegerTranscoder integerTranscoder0 = new IntegerTranscoder();
      byte[] byteArray0 = new byte[6];
      CachedData cachedData0 = new CachedData(655, byteArray0, 1043);
      Integer integer0 = integerTranscoder0.decode(cachedData0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IntegerTranscoder integerTranscoder0 = new IntegerTranscoder();
      Integer integer0 = new Integer(0);
      CachedData cachedData0 = integerTranscoder0.encode(integer0);
      Integer integer1 = integerTranscoder0.decode(cachedData0);
      assertEquals(20971520, integerTranscoder0.getMaxSize());
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IntegerTranscoder integerTranscoder0 = new IntegerTranscoder();
      boolean boolean0 = integerTranscoder0.asyncDecode((CachedData) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      IntegerTranscoder integerTranscoder0 = new IntegerTranscoder();
      // Undeclared exception!
      try { 
        integerTranscoder0.encode((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.transcoders.IntegerTranscoder", e);
      }
  }
}
