/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 12:29:02 GMT 2022
 */

package net.spy.memcached.transcoders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.HijrahDate;
import net.spy.memcached.CachedData;
import net.spy.memcached.transcoders.SerializingTranscoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializingTranscoder_ESTest extends SerializingTranscoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      CachedData cachedData0 = serializingTranscoder0.encode(hijrahDate0);
      assertEquals(20971520, CachedData.MAX_SIZE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      serializingTranscoder0.charset = "";
      // Undeclared exception!
      try { 
        serializingTranscoder0.encode("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: 
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      serializingTranscoder0.charset = null;
      // Undeclared exception!
      try { 
        serializingTranscoder0.encode("X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      // Undeclared exception!
      try { 
        serializingTranscoder0.encode((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't serialize null
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      CachedData cachedData0 = serializingTranscoder0.encode(")0xGs}g");
      serializingTranscoder0.charset = ")0xGs}g";
      // Undeclared exception!
      try { 
        serializingTranscoder0.decode(cachedData0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: )0xGs}g
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      // Undeclared exception!
      try { 
        serializingTranscoder0.decode((CachedData) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.transcoders.SerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      byte[] byteArray0 = new byte[0];
      CachedData cachedData0 = new CachedData(400, byteArray0, 16384);
      // Undeclared exception!
      try { 
        serializingTranscoder0.decode(cachedData0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.spy.memcached.transcoders.TranscoderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      // Undeclared exception!
      try { 
        serializingTranscoder0.asyncDecode((CachedData) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.transcoders.SerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      MockDate mockDate0 = new MockDate();
      serializingTranscoder0.compressionThreshold = (-1617);
      // Undeclared exception!
      try { 
        serializingTranscoder0.encode(mockDate0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder(1516);
      byte[] byteArray0 = new byte[6];
      CachedData cachedData0 = new CachedData(1536, byteArray0, 199);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      CachedData cachedData1 = serializingTranscoder0.encode(object0);
      assertEquals(1536, cachedData1.getFlags());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder(1516);
      byte[] byteArray0 = new byte[6];
      CachedData cachedData0 = serializingTranscoder0.encode(byteArray0[1]);
      assertEquals(1280, cachedData0.getFlags());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        serializingTranscoder0.encode(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-serializable object
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      Boolean boolean0 = Boolean.TRUE;
      CachedData cachedData0 = serializingTranscoder0.encode(boolean0);
      assertEquals(256, cachedData0.getFlags());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      CachedData cachedData0 = serializingTranscoder0.encode(16384);
      assertEquals(512, cachedData0.getFlags());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      CachedData cachedData0 = serializingTranscoder0.encode("{CachedData flags=0 data=[69, 74, 106, 68, 100, 73, 66, 42, 115, 114, 126, 118, 125, 53, 99, 81]}");
      assertEquals(0, cachedData0.getFlags());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      byte[] byteArray0 = new byte[0];
      CachedData cachedData0 = new CachedData(16384, byteArray0, 16384);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      byte[] byteArray0 = new byte[6];
      CachedData cachedData0 = new CachedData(2048, byteArray0, (byte)21);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      CachedData cachedData1 = serializingTranscoder0.encode(object0);
      assertEquals(2048, cachedData1.getFlags());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder(1624);
      CachedData cachedData0 = new CachedData(1792, byteArray0, 16384);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      assertNotNull(object0);
      
      CachedData cachedData1 = serializingTranscoder0.encode(object0);
      assertEquals(1792, cachedData1.getFlags());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder(1516);
      byte[] byteArray0 = new byte[6];
      CachedData cachedData0 = new CachedData(1516, byteArray0, 1624);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      assertNotNull(object0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      byte[] byteArray0 = new byte[9];
      CachedData cachedData0 = new CachedData(792, byteArray0, (byte)12);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      assertNotNull(object0);
      
      CachedData cachedData1 = serializingTranscoder0.encode(object0);
      assertEquals(768, cachedData1.getFlags());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      byte[] byteArray0 = new byte[4];
      CachedData cachedData0 = new CachedData(512, byteArray0, 16384);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      assertEquals(0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      byte[] byteArray0 = new byte[2];
      CachedData cachedData0 = new CachedData(256, byteArray0, (byte)8);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      MockDate mockDate0 = new MockDate(777, (byte)81, (byte) (-27));
      CachedData cachedData0 = serializingTranscoder0.encode(mockDate0);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      assertTrue(object0.equals((Object)mockDate0));
      assertEquals(1024, cachedData0.getFlags());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      byte[] byteArray0 = new byte[4];
      CachedData cachedData0 = new CachedData((-1), byteArray0, 1536);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      byte[] byteArray0 = new byte[7];
      CachedData cachedData0 = new CachedData((byte)81, byteArray0, (byte)81);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      byte[] byteArray0 = new byte[7];
      CachedData cachedData0 = new CachedData((byte)81, byteArray0, (byte)81);
      boolean boolean0 = serializingTranscoder0.asyncDecode(cachedData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      byte[] byteArray0 = new byte[1];
      CachedData cachedData0 = new CachedData(1624, byteArray0, 3204);
      boolean boolean0 = serializingTranscoder0.asyncDecode(cachedData0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      byte[] byteArray0 = new byte[4];
      CachedData cachedData0 = new CachedData((-1), byteArray0, 1536);
      boolean boolean0 = serializingTranscoder0.asyncDecode(cachedData0);
      assertTrue(boolean0);
  }
}
