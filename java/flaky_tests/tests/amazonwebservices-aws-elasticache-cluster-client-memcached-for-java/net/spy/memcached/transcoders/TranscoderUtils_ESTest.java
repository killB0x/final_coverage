/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 12:58:33 GMT 2022
 */

package net.spy.memcached.transcoders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.transcoders.TranscoderUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TranscoderUtils_ESTest extends TranscoderUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      boolean boolean0 = transcoderUtils0.decodeBoolean(byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = transcoderUtils0.encodeInt(449);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-63)}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = transcoderUtils0.encodeLong(0L);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = transcoderUtils0.encodeInt((byte)0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      long long0 = transcoderUtils0.decodeLong(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-72057594037927936L), long0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = transcoderUtils0.decodeInt(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      byte byte0 = transcoderUtils0.decodeByte(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)86, byte0);
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      byte byte0 = transcoderUtils0.decodeByte(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte) (-100), byte0);
      assertArrayEquals(new byte[] {(byte) (-100)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      // Undeclared exception!
      transcoderUtils0.encodeNum(0L, 51991);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      // Undeclared exception!
      try { 
        transcoderUtils0.encodeNum((-1118), (-1118));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1118
         //
         verifyException("net.spy.memcached.transcoders.TranscoderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = transcoderUtils0.encodeNum((byte)0, 9996);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      transcoderUtils0.encodeInt(9996);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      // Undeclared exception!
      try { 
        transcoderUtils0.decodeLong((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.transcoders.TranscoderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(false);
      assertNotNull(transcoderUtils0);
      
      // Undeclared exception!
      try { 
        transcoderUtils0.decodeInt((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.transcoders.TranscoderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(false);
      assertNotNull(transcoderUtils0);
      
      // Undeclared exception!
      try { 
        transcoderUtils0.decodeBoolean((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.transcoders.TranscoderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-78);
      long long0 = transcoderUtils0.decodeLong(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2986344448L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = new byte[5];
      long long0 = transcoderUtils0.decodeLong(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = transcoderUtils0.encodeNum((-1298L), 27);
      assertEquals(27, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = transcoderUtils0.encodeBoolean(false);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = transcoderUtils0.decodeBoolean(byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        transcoderUtils0.decodeBoolean(byteArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Wrong length for a boolean
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = transcoderUtils0.encodeBoolean(true);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)49}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = transcoderUtils0.decodeBoolean(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)49}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = new byte[0];
      byte byte0 = transcoderUtils0.decodeByte(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((byte)0, byte0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(false);
      assertNotNull(transcoderUtils0);
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        transcoderUtils0.decodeByte(byteArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Too long for a byte
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(false);
      assertNotNull(transcoderUtils0);
      
      // Undeclared exception!
      try { 
        transcoderUtils0.decodeByte((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.transcoders.TranscoderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      byte[] byteArray0 = new byte[17];
      // Undeclared exception!
      try { 
        transcoderUtils0.decodeInt(byteArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Too long to be an int (17) bytes
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      byte[] byteArray0 = transcoderUtils0.encodeBoolean(false);
      int int0 = transcoderUtils0.decodeInt(byteArray0);
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      transcoderUtils0.encodeNum((byte)0, 9995);
      // Undeclared exception!
      transcoderUtils0.encodeLong(9995);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(false);
      byte[] byteArray0 = transcoderUtils0.encodeNum(0L, 1595);
      assertEquals(1595, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      byte[] byteArray0 = transcoderUtils0.encodeLong(9995);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)11}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(true);
      byte[] byteArray0 = transcoderUtils0.encodeInt((byte) (-15));
      int int0 = transcoderUtils0.decodeInt(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TranscoderUtils transcoderUtils0 = new TranscoderUtils(false);
      byte[] byteArray0 = transcoderUtils0.encodeByte((byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }
}
