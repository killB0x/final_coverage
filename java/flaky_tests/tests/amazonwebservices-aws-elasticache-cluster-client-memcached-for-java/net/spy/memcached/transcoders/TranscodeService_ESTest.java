/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:06:45 GMT 2022
 */

package net.spy.memcached.transcoders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Future;
import net.spy.memcached.CachedData;
import net.spy.memcached.transcoders.SerializingTranscoder;
import net.spy.memcached.transcoders.TranscodeService;
import net.spy.memcached.transcoders.Transcoder;
import net.spy.memcached.transcoders.WhalinTranscoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TranscodeService_ESTest extends TranscodeService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TranscodeService transcodeService0 = new TranscodeService(false);
      transcodeService0.shutdown();
      boolean boolean0 = transcodeService0.isShutdown();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TranscodeService transcodeService0 = new TranscodeService(false);
      Transcoder<TranscodeService> transcoder0 = (Transcoder<TranscodeService>) mock(Transcoder.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(transcoder0).asyncDecode(any(net.spy.memcached.CachedData.class));
      Future<TranscodeService> future0 = transcodeService0.decode(transcoder0, (CachedData) null);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TranscodeService transcodeService0 = new TranscodeService(true);
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      Future<Object> future0 = transcodeService0.decode((Transcoder<Object>) whalinTranscoder0, (CachedData) null);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TranscodeService transcodeService0 = new TranscodeService(true);
      boolean boolean0 = transcodeService0.isShutdown();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TranscodeService transcodeService0 = new TranscodeService(true);
      transcodeService0.shutdown();
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      // Undeclared exception!
      try { 
        transcodeService0.decode((Transcoder<Object>) serializingTranscoder0, (CachedData) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Pool has already shut down.
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TranscodeService transcodeService0 = new TranscodeService(false);
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      // Undeclared exception!
      try { 
        transcodeService0.decode((Transcoder<Object>) serializingTranscoder0, (CachedData) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.transcoders.SerializingTranscoder", e);
      }
  }
}
