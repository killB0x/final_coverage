/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 12:14:33 GMT 2022
 */

package net.spy.memcached.transcoders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.JapaneseDate;
import net.spy.memcached.CachedData;
import net.spy.memcached.transcoders.WhalinV1Transcoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WhalinV1Transcoder_ESTest extends WhalinV1Transcoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      CachedData cachedData0 = new CachedData(20971520, byteArray0, 256);
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode(cachedData0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Wrong length for a boolean
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      CachedData cachedData0 = new CachedData(1, byteArray0, 8);
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode(cachedData0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Wrong length for a double
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      CachedData cachedData0 = new CachedData(1, byteArray0, 6);
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode(cachedData0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Wrong length for a float
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      CachedData cachedData0 = new CachedData(4, byteArray0, 9044);
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode(cachedData0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Wrong length for an int
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      CachedData cachedData0 = new CachedData((byte)1, byteArray0, 6);
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode(cachedData0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Wrong length for a byte
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      CachedData cachedData0 = whalinV1Transcoder0.encode(japaneseDate0);
      assertEquals(8, cachedData0.getFlags());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      whalinV1Transcoder0.charset = "Xac }JUJTb";
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.encode("Xac }JUJTb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: Xac }JUJTb
         //
         verifyException("net.spy.memcached.transcoders.WhalinV1Transcoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      whalinV1Transcoder0.charset = null;
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.encode("{B4/c~pLo,769,B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.encode((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't serialize null
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      CachedData cachedData0 = whalinV1Transcoder0.encode("");
      whalinV1Transcoder0.charset = "";
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode(cachedData0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: 
         //
         verifyException("net.spy.memcached.transcoders.WhalinV1Transcoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode((CachedData) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.transcoders.WhalinV1Transcoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[0];
      CachedData cachedData0 = new CachedData(1, byteArray0, 8);
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode(cachedData0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.spy.memcached.transcoders.WhalinV1Transcoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      Boolean boolean0 = Boolean.TRUE;
      CachedData cachedData0 = whalinV1Transcoder0.encode(boolean0);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      assertEquals(0, cachedData0.getFlags());
      assertNotNull(object0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      CachedData cachedData0 = new CachedData(1, byteArray0, 5);
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode(cachedData0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Wrong length for a boolean
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)10;
      CachedData cachedData0 = new CachedData(97, byteArray0, 1903);
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode(cachedData0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Wrong length for a double
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      CachedData cachedData0 = new CachedData(16384, byteArray0, 11);
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode(cachedData0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Wrong length for a float
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      CachedData cachedData0 = new CachedData(4, byteArray0, 16384);
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode(cachedData0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Wrong length for an int
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      CachedData cachedData0 = new CachedData((byte)1, byteArray0, 6);
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.decode(cachedData0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Wrong length for a byte
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[5];
      CachedData cachedData0 = new CachedData(4, byteArray0, (byte)10);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      MockDate mockDate0 = new MockDate();
      CachedData cachedData0 = whalinV1Transcoder0.encode(mockDate0);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      assertTrue(object0.equals((Object)mockDate0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      CachedData cachedData0 = new CachedData(1, byteArray0, 49);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      assertNotNull(object0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[5];
      CachedData cachedData0 = new CachedData(11, byteArray0, 9);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      whalinV1Transcoder0.compressionThreshold = 3;
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.encode("UTF-8");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.encode(whalinV1Transcoder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-serializable object
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      MockDate mockDate0 = new MockDate(7, 12, 2);
      CachedData cachedData0 = whalinV1Transcoder0.encode(mockDate0);
      assertEquals(0, cachedData0.getFlags());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      Boolean boolean0 = Boolean.FALSE;
      CachedData cachedData0 = whalinV1Transcoder0.encode(boolean0);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      assertEquals(0, cachedData0.getFlags());
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      CachedData cachedData0 = whalinV1Transcoder0.encode(whalinV1Transcoder0.SPECIAL_BYTE);
      assertEquals(0, cachedData0.getFlags());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      CachedData cachedData0 = whalinV1Transcoder0.encode("{");
      assertEquals(0, cachedData0.getFlags());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      CachedData cachedData0 = whalinV1Transcoder0.encode("UTF-8");
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      assertEquals(0, cachedData0.getFlags());
      assertEquals("UTF-8", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      StringBuffer stringBuffer0 = new StringBuffer(7);
      CachedData cachedData0 = whalinV1Transcoder0.encode(stringBuffer0);
      StringBuffer stringBuffer1 = (StringBuffer)whalinV1Transcoder0.decode(cachedData0);
      assertNotNull(stringBuffer1);
      assertEquals(0, cachedData0.getFlags());
      assertEquals(0, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      CachedData cachedData0 = whalinV1Transcoder0.encode((byte)0);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      assertEquals(0, cachedData0.getFlags());
      assertNotNull(object0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      CachedData cachedData0 = new CachedData(5, byteArray0, (byte)10);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      assertEquals(0.0, object0);
      
      CachedData cachedData1 = whalinV1Transcoder0.encode(object0);
      assertEquals(0, cachedData1.getFlags());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      CachedData cachedData0 = new CachedData(1, byteArray0, 8);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      CachedData cachedData1 = whalinV1Transcoder0.encode(object0);
      assertEquals(0, cachedData1.getFlags());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      CachedData cachedData0 = new CachedData((byte)5, byteArray0, 6);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      CachedData cachedData1 = whalinV1Transcoder0.encode(object0);
      assertNotSame(cachedData1, cachedData0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      CachedData cachedData0 = new CachedData(16384, byteArray0, 5);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      CachedData cachedData1 = whalinV1Transcoder0.encode(object0);
      assertEquals(20971520, CachedData.MAX_SIZE);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      Long long0 = new Long(9);
      CachedData cachedData0 = whalinV1Transcoder0.encode(long0);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      assertEquals(9L, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      CachedData cachedData0 = new CachedData(16384, byteArray0, 5);
      Object object0 = whalinV1Transcoder0.decode(cachedData0);
      assertNotNull(object0);
      
      CachedData cachedData1 = whalinV1Transcoder0.encode(object0);
      assertEquals(0, cachedData1.getFlags());
  }
}
