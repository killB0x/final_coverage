/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:23:31 GMT 2022
 */

package net.spy.memcached.transcoders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.CachedData;
import net.spy.memcached.transcoders.SerializingTranscoder;
import net.spy.memcached.transcoders.WhalinTranscoder;
import net.spy.memcached.transcoders.WhalinV1Transcoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSerializingTranscoder_ESTest extends BaseSerializingTranscoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder(6);
      serializingTranscoder0.setCharset("UTF-8");
      assertEquals(6, serializingTranscoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      serializingTranscoder0.serialize("&8IF");
      assertEquals(20971520, serializingTranscoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder(0);
      int int0 = serializingTranscoder0.getMaxSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      int int0 = whalinTranscoder0.getMaxSize();
      assertEquals(20971520, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder((-2944));
      int int0 = serializingTranscoder0.getMaxSize();
      assertEquals((-2944), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      byte[] byteArray0 = whalinTranscoder0.encodeString("");
      assertEquals(20971520, whalinTranscoder0.getMaxSize());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      String string0 = whalinTranscoder0.decodeString((byte[]) null);
      assertNull(string0);
      assertEquals(20971520, whalinTranscoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      byte[] byteArray0 = new byte[0];
      String string0 = whalinTranscoder0.decodeString(byteArray0);
      assertEquals("", string0);
      assertEquals(20971520, whalinTranscoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      CachedData cachedData0 = new CachedData(5, byteArray0, 16384);
      serializingTranscoder0.asyncDecode(cachedData0);
      assertEquals(20971520, serializingTranscoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      // Undeclared exception!
      try { 
        serializingTranscoder0.setCharset((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.serialize((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't serialize null
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.serialize(whalinV1Transcoder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-serializable object
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      whalinV1Transcoder0.charset = "Wrong length for a float";
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.encodeString("}T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: Wrong length for a float
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      // Undeclared exception!
      try { 
        whalinTranscoder0.encodeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      whalinTranscoder0.charset = "";
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        whalinTranscoder0.decodeString(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: 
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      byte[] byteArray0 = new byte[8];
      whalinTranscoder0.charset = null;
      // Undeclared exception!
      try { 
        whalinTranscoder0.decodeString(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      // Undeclared exception!
      try { 
        serializingTranscoder0.asyncDecode((CachedData) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.transcoders.SerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      String string0 = whalinV1Transcoder0.decodeString(byteArray0);
      assertEquals(20971520, whalinV1Transcoder0.getMaxSize());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      byte[] byteArray0 = whalinTranscoder0.encodeBoolean(false);
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder(16384);
      CachedData cachedData0 = new CachedData((-746), byteArray0, 11);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      assertNull(object0);
      assertEquals(20971520, whalinTranscoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      whalinTranscoder0.decompress(byteArray0);
      assertEquals(20971520, whalinTranscoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      whalinTranscoder0.decompress((byte[]) null);
      assertEquals(20971520, whalinTranscoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      // Undeclared exception!
      try { 
        whalinV1Transcoder0.compress((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't compress null
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      // Undeclared exception!
      try { 
        whalinTranscoder0.compress(byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      whalinTranscoder0.deserialize(byteArray0);
      assertEquals(20971520, whalinTranscoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      whalinTranscoder0.deserialize((byte[]) null);
      assertEquals(20971520, whalinTranscoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      Character character0 = whalinTranscoder0.decodeCharacter(byteArray0);
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      CachedData cachedData0 = serializingTranscoder0.encode(character0);
      Object object0 = serializingTranscoder0.decode(cachedData0);
      assertEquals(20971520, serializingTranscoder0.getMaxSize());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      whalinTranscoder0.setCompressionThreshold(0);
      assertEquals(20971520, whalinTranscoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      byte[] byteArray0 = new byte[8];
      CachedData cachedData0 = new CachedData(0, byteArray0, 12);
      boolean boolean0 = serializingTranscoder0.asyncDecode(cachedData0);
      assertFalse(boolean0);
      assertEquals(20971520, serializingTranscoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WhalinV1Transcoder whalinV1Transcoder0 = new WhalinV1Transcoder();
      byte[] byteArray0 = whalinV1Transcoder0.encodeString("Logger name may not be null.");
      assertEquals(28, byteArray0.length);
      assertEquals(20971520, whalinV1Transcoder0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SerializingTranscoder serializingTranscoder0 = new SerializingTranscoder();
      // Undeclared exception!
      try { 
        serializingTranscoder0.setCharset("k)\"*?m{ZsJ0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: k)\"*?m{ZsJ0
         //
         verifyException("net.spy.memcached.transcoders.BaseSerializingTranscoder", e);
      }
  }
}
