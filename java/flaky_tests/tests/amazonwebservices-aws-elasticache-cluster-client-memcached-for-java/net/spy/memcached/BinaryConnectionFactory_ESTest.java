/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:25:58 GMT 2022
 */

package net.spy.memcached;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.SocketChannel;
import net.spy.memcached.BinaryConnectionFactory;
import net.spy.memcached.ClientMode;
import net.spy.memcached.DefaultConnectionFactory;
import net.spy.memcached.HashAlgorithm;
import net.spy.memcached.MemcachedNode;
import net.spy.memcached.OperationFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BinaryConnectionFactory_ESTest extends BinaryConnectionFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(998);
      MemcachedNode memcachedNode0 = binaryConnectionFactory0.createMemcachedNode(mockInetSocketAddress0, (SocketChannel) null, 16384);
      assertEquals(0, memcachedNode0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0, 1, 67);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(179, (-2866));
      String string0 = binaryConnectionFactory0.getName();
      assertEquals("BinaryConnectionFactory", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(3, 3, (HashAlgorithm) null);
      assertFalse(binaryConnectionFactory0.shouldOptimize());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(179, (-2866));
      OperationFactory operationFactory0 = binaryConnectionFactory0.getOperationFactory();
      assertNotNull(operationFactory0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClientMode clientMode0 = ClientMode.Dynamic;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      BinaryConnectionFactory binaryConnectionFactory1 = new BinaryConnectionFactory(binaryConnectionFactory0.DEFAULT_CLIENT_MODE, 16384, 16384, binaryConnectionFactory0.DEFAULT_HASH);
      assertFalse(binaryConnectionFactory1.equals((Object)binaryConnectionFactory0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(16384);
      // Undeclared exception!
      try { 
        binaryConnectionFactory0.createMemcachedNode(mockInetSocketAddress0, (SocketChannel) null, (-4203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-4203 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
