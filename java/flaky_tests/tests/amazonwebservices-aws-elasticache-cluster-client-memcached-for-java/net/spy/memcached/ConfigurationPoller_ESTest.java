/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 12:51:05 GMT 2022
 */

package net.spy.memcached;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.util.LinkedList;
import java.util.List;
import net.spy.memcached.BinaryConnectionFactory;
import net.spy.memcached.ClientMode;
import net.spy.memcached.ConfigurationPoller;
import net.spy.memcached.DefaultConnectionFactory;
import net.spy.memcached.KetamaConnectionFactory;
import net.spy.memcached.MemcachedClient;
import net.spy.memcached.MemcachedConnection;
import net.spy.memcached.MemcachedNode;
import net.spy.memcached.TapConnectionProvider;
import net.spy.memcached.config.NodeEndPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConfigurationPoller_ESTest extends ConfigurationPoller_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConfigurationPoller configurationPoller0 = new ConfigurationPoller((MemcachedClient) null);
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0, 124, 124);
      LinkedList<InetSocketAddress> linkedList0 = new LinkedList<InetSocketAddress>();
      ConfigurationPoller configurationPoller1 = new ConfigurationPoller((MemcachedClient) null, 2500L, false);
      ClientMode clientMode1 = ClientMode.Static;
      DefaultConnectionFactory defaultConnectionFactory0 = new DefaultConnectionFactory(clientMode1, 907, 1053, binaryConnectionFactory0.DEFAULT_HASH);
      TapConnectionProvider tapConnectionProvider0 = null;
      try {
        tapConnectionProvider0 = new TapConnectionProvider(defaultConnectionFactory0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // You must have at least one server to connect to
         //
         verifyException("net.spy.memcached.TapConnectionProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConfigurationPoller configurationPoller0 = new ConfigurationPoller((MemcachedClient) null);
      ConfigurationPoller configurationPoller1 = new ConfigurationPoller((MemcachedClient) null);
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0, 3038, 124);
      LinkedList<InetSocketAddress> linkedList0 = new LinkedList<InetSocketAddress>();
      BinaryConnectionFactory binaryConnectionFactory1 = new BinaryConnectionFactory();
      MemcachedConnection memcachedConnection0 = binaryConnectionFactory1.createConnection(linkedList0);
      memcachedConnection0.checkState();
      configurationPoller0.subscribeForClusterConfiguration(memcachedConnection0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConfigurationPoller configurationPoller0 = new ConfigurationPoller((MemcachedClient) null);
      KetamaConnectionFactory ketamaConnectionFactory0 = new KetamaConnectionFactory(2431, 2431, 0L);
      LinkedList<NodeEndPoint> linkedList0 = new LinkedList<NodeEndPoint>();
      configurationPoller0.shutdown();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0, 124, 124);
      LinkedList<InetSocketAddress> linkedList0 = new LinkedList<InetSocketAddress>();
      linkedList0.spliterator();
      binaryConnectionFactory0.createConnection(linkedList0);
      binaryConnectionFactory0.createConnection(linkedList0);
      ConfigurationPoller configurationPoller0 = new ConfigurationPoller((MemcachedClient) null, 998, false);
      configurationPoller0.run();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConfigurationPoller configurationPoller0 = new ConfigurationPoller((MemcachedClient) null);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = configurationPoller0.getUncaughtExceptionHandler();
      configurationPoller0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      configurationPoller0.shutdown();
      configurationPoller0.run();
      configurationPoller0.shutdown();
      ClientMode clientMode0 = ClientMode.Dynamic;
      configurationPoller0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0, (-1644), 1671);
      LinkedList<InetSocketAddress> linkedList0 = new LinkedList<InetSocketAddress>();
      binaryConnectionFactory0.getDefaultTranscoder();
      MemcachedConnection memcachedConnection0 = binaryConnectionFactory0.createConnection(linkedList0);
      LinkedList<MemcachedNode> linkedList1 = new LinkedList<MemcachedNode>();
      binaryConnectionFactory0.createLocator(linkedList1);
      linkedList1.removeLastOccurrence(linkedList0);
      memcachedConnection0.nodesToDelete = (List<MemcachedNode>) linkedList1;
      configurationPoller0.subscribeForClusterConfiguration(memcachedConnection0);
      configurationPoller0.shutdown();
      configurationPoller0.shutdown();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConfigurationPoller configurationPoller0 = new ConfigurationPoller((MemcachedClient) null);
      KetamaConnectionFactory ketamaConnectionFactory0 = new KetamaConnectionFactory(2431, 2431, 60000L);
      LinkedList<NodeEndPoint> linkedList0 = new LinkedList<NodeEndPoint>();
      // Undeclared exception!
      try { 
        MockThread.enumerate((Thread[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.ThreadGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConfigurationPoller configurationPoller0 = null;
      try {
        configurationPoller0 = new ConfigurationPoller((MemcachedClient) null, (-1L), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }
}
