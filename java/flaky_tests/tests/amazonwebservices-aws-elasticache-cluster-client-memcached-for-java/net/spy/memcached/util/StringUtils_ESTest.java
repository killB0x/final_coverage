/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 12:53:30 GMT 2022
 */

package net.spy.memcached.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import net.spy.memcached.util.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Uc,EVh]psh7_");
      String string0 = StringUtils.join(linkedList0, "");
      assertEquals("Uc,EVh]psh7_", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.validateKey((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.KeyUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.join((Collection<String>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.validateKey("{{{{{{{{{{{{{{{{{{{{{h{{{[[[[[Key must contain at Pe'st one char?@ter.[^-?dw+492%OW&-jj fiQR0R7[^-?Vw!G92NOW&-j{VfiQ)0RQ[^-?bdw+G=L~og0[^-?dw+GjLcog0[^-Lmw+GKzy must contain$at least on< character.[^-zdw+GKey must Pontaic at leastXon0 charact/r.", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key contains invalid characters:  ``{{{{{{{{{{{{{{{{{{{{{h{{{[[[[[Key must contain at Pe'st one char?@ter.[^-?dw+492%OW&-jj fiQR0R7[^-?Vw!G92NOW&-j{VfiQ)0RQ[^-?bdw+G=L~og0[^-?dw+GjLcog0[^-Lmw+GKzy must contain$at least on< character.[^-zdw+GKey must Pontaic at leastXon0 charact/r.''
         //
         verifyException("net.spy.memcached.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringUtils.validateKey("{CB!{(^t,j", true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.validateKey("", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key must contain at least one character.
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.validateKey("znet.spy.memcached.KeyUtilm*w@Wk4(ir22/Wuqj+net.spy.memcached.KeyUtilznet.spy.memcached.KeyUtilm*w@Wk4(ir22/Wuqj+net.spy.memcached.KeyUtilznet.spy.memcached.KeyUtilznet.spy.memcached.KeyUtilXd4&h2_X7FW$8net.spy.memcached.KeyUtilznet.spy.memcached.KeyUtil$k0?cHh1Rnet.spy.memcached.KeyUtil$k0?cHh1R", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key is too long (maxlen = 250)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringUtils.validateKey("null", false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = StringUtils.isJsonObject("7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = StringUtils.isJsonObject("null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = StringUtils.isJsonObject("false");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = StringUtils.isJsonObject("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = StringUtils.isJsonObject("[[W5#>!}DU=qfe7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = StringUtils.isJsonObject("{;zeDnw");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = StringUtils.isJsonObject("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = StringUtils.isJsonObject(")3$7OvJ{;J*d:8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = StringUtils.isJsonObject((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("");
      String string0 = StringUtils.join(linkedList0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = StringUtils.join(linkedList0, "~");
      assertEquals("", string0);
  }
}
