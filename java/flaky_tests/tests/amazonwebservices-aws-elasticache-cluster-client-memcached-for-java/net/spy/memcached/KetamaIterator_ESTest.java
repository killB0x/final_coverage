/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:03:45 GMT 2022
 */

package net.spy.memcached;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.nio.channels.SocketChannel;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.TreeMap;
import net.spy.memcached.BinaryConnectionFactory;
import net.spy.memcached.DefaultConnectionFactory;
import net.spy.memcached.DefaultHashAlgorithm;
import net.spy.memcached.HashAlgorithm;
import net.spy.memcached.KetamaIterator;
import net.spy.memcached.KetamaNodeLocator;
import net.spy.memcached.MemcachedNode;
import net.spy.memcached.util.DefaultKetamaNodeLocatorConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KetamaIterator_ESTest extends KetamaIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<MemcachedNode> linkedList0 = new LinkedList<MemcachedNode>();
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.CRC_HASH;
      HashMap<InetSocketAddress, Integer> hashMap0 = new HashMap<InetSocketAddress, Integer>();
      DefaultKetamaNodeLocatorConfiguration defaultKetamaNodeLocatorConfiguration0 = new DefaultKetamaNodeLocatorConfiguration();
      KetamaNodeLocator ketamaNodeLocator0 = new KetamaNodeLocator(linkedList0, defaultHashAlgorithm0, hashMap0, defaultKetamaNodeLocatorConfiguration0);
      TreeMap<Long, MemcachedNode> treeMap0 = ketamaNodeLocator0.getKetamaNodes();
      KetamaIterator ketamaIterator0 = new KetamaIterator("_$dsgA/Q?Gq'j2g|", 0, treeMap0, defaultHashAlgorithm0);
      boolean boolean0 = ketamaIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TreeMap<Long, MemcachedNode> treeMap0 = new TreeMap<Long, MemcachedNode>();
      Long long0 = new Long(0L);
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(998);
      MemcachedNode memcachedNode0 = binaryConnectionFactory0.createMemcachedNode(mockInetSocketAddress0, (SocketChannel) null, 8);
      treeMap0.put(long0, memcachedNode0);
      DefaultHashAlgorithm defaultHashAlgorithm0 = (DefaultHashAlgorithm)DefaultConnectionFactory.DEFAULT_HASH;
      KetamaIterator ketamaIterator0 = new KetamaIterator("remove not supported", 256, treeMap0, defaultHashAlgorithm0);
      MemcachedNode memcachedNode1 = ketamaIterator0.next();
      assertNotNull(memcachedNode1);
      assertTrue(ketamaIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.CRC_HASH;
      KetamaIterator ketamaIterator0 = new KetamaIterator("aL,ndtU7_IQf\"", (-1924), (TreeMap<Long, MemcachedNode>) null, defaultHashAlgorithm0);
      // Undeclared exception!
      try { 
        ketamaIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.KetamaIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TreeMap<Long, MemcachedNode> treeMap0 = new TreeMap<Long, MemcachedNode>();
      KetamaIterator ketamaIterator0 = null;
      try {
        ketamaIterator0 = new KetamaIterator("", (-7846), treeMap0, (HashAlgorithm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.KetamaIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TreeMap<Long, MemcachedNode> treeMap0 = new TreeMap<Long, MemcachedNode>();
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.CRC_HASH;
      Long long0 = new Long(32767L);
      treeMap0.put(long0, (MemcachedNode) null);
      KetamaIterator ketamaIterator0 = new KetamaIterator("{>", 17, treeMap0, defaultHashAlgorithm0);
      ketamaIterator0.next();
      assertTrue(ketamaIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TreeMap<Long, MemcachedNode> treeMap0 = new TreeMap<Long, MemcachedNode>();
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.CRC_HASH;
      Long long0 = new Long(0L);
      treeMap0.put(long0, (MemcachedNode) null);
      KetamaIterator ketamaIterator0 = new KetamaIterator("", 64, treeMap0, defaultHashAlgorithm0);
      ketamaIterator0.next();
      assertTrue(ketamaIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.CRC_HASH;
      KetamaIterator ketamaIterator0 = new KetamaIterator("", 634, (TreeMap<Long, MemcachedNode>) null, defaultHashAlgorithm0);
      boolean boolean0 = ketamaIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TreeMap<Long, MemcachedNode> treeMap0 = new TreeMap<Long, MemcachedNode>();
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.CRC_HASH;
      KetamaIterator ketamaIterator0 = new KetamaIterator("ji@{\"*)!Zg\"x|U", (-163), treeMap0, defaultHashAlgorithm0);
      boolean boolean0 = ketamaIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TreeMap<Long, MemcachedNode> treeMap0 = new TreeMap<Long, MemcachedNode>();
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.CRC_HASH;
      KetamaIterator ketamaIterator0 = new KetamaIterator("{>", 17, treeMap0, defaultHashAlgorithm0);
      // Undeclared exception!
      try { 
        ketamaIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove not supported
         //
         verifyException("net.spy.memcached.KetamaIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TreeMap<Long, MemcachedNode> treeMap0 = new TreeMap<Long, MemcachedNode>();
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.CRC_HASH;
      KetamaIterator ketamaIterator0 = new KetamaIterator("", 64, treeMap0, defaultHashAlgorithm0);
      // Undeclared exception!
      try { 
        ketamaIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }
}
