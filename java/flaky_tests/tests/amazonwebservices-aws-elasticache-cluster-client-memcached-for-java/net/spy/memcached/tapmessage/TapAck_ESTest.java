/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:53:34 GMT 2022
 */

package net.spy.memcached.tapmessage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.nio.channels.SocketChannel;
import net.spy.memcached.BinaryConnectionFactory;
import net.spy.memcached.MemcachedNode;
import net.spy.memcached.MemcachedNodeROImpl;
import net.spy.memcached.TapConnectionProvider;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.tapmessage.TapAck;
import net.spy.memcached.tapmessage.TapOpcode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TapAck_ESTest extends TapAck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-1));
      TapAck tapAck0 = new TapAck((TapConnectionProvider) null, (MemcachedNode) null, (TapOpcode) null, 0, multiGetOperationCallback0);
      tapAck0.getOpcode();
      assertEquals(0, tapAck0.getOpaque());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(129, 0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("Xc<C1rgyLuBh7bV3Z2", 0);
      SocketChannel socketChannel0 = SocketChannel.open();
      MemcachedNode memcachedNode0 = binaryConnectionFactory0.createMemcachedNode(mockInetSocketAddress0, socketChannel0, 0);
      TapOpcode tapOpcode0 = TapOpcode.OPAQUE;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 0);
      TapAck tapAck0 = new TapAck((TapConnectionProvider) null, memcachedNode0, tapOpcode0, 0, multiGetsOperationCallback0);
      int int0 = tapAck0.getOpaque();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.NOOP;
      TapAck tapAck0 = new TapAck((TapConnectionProvider) null, (MemcachedNode) null, tapOpcode0, 16384, (OperationCallback) null);
      int int0 = tapAck0.getOpaque();
      assertEquals(16384, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(129, 0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("Xc<C1rgyLuBh7bV3Z2", 0);
      SocketChannel socketChannel0 = SocketChannel.open();
      MemcachedNode memcachedNode0 = binaryConnectionFactory0.createMemcachedNode(mockInetSocketAddress0, socketChannel0, 0);
      MemcachedNodeROImpl memcachedNodeROImpl0 = new MemcachedNodeROImpl(memcachedNode0);
      TapOpcode tapOpcode0 = TapOpcode.OPAQUE;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 0);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 16384);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 0);
      TapAck tapAck0 = new TapAck((TapConnectionProvider) null, memcachedNodeROImpl0, tapOpcode0, 16384, multiGetOperationCallback0);
      tapAck0.getNode();
      assertEquals(16384, tapAck0.getOpaque());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.DELETE;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 16384);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 0);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, (-1256));
      TapAck tapAck0 = new TapAck((TapConnectionProvider) null, (MemcachedNode) null, tapOpcode0, (-1256), multiReplicaGetOperationCallback0);
      tapAck0.getCallback();
      assertEquals((-1256), tapAck0.getOpaque());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.MUTATION;
      TapAck tapAck0 = new TapAck((TapConnectionProvider) null, (MemcachedNode) null, tapOpcode0, 0, (OperationCallback) null);
      tapAck0.getCallback();
      assertEquals(0, tapAck0.getOpaque());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.MUTATION;
      TapAck tapAck0 = new TapAck((TapConnectionProvider) null, (MemcachedNode) null, tapOpcode0, (-1), (OperationCallback) null);
      tapAck0.getOpcode();
      assertEquals((-1), tapAck0.getOpaque());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.MUTATION;
      TapAck tapAck0 = new TapAck((TapConnectionProvider) null, (MemcachedNode) null, tapOpcode0, (-1), (OperationCallback) null);
      tapAck0.getNode();
      assertEquals((-1), tapAck0.getOpaque());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.MUTATION;
      TapAck tapAck0 = new TapAck((TapConnectionProvider) null, (MemcachedNode) null, tapOpcode0, (-1), (OperationCallback) null);
      int int0 = tapAck0.getOpaque();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.MUTATION;
      TapAck tapAck0 = new TapAck((TapConnectionProvider) null, (MemcachedNode) null, tapOpcode0, (-1), (OperationCallback) null);
      tapAck0.getConn();
      assertEquals((-1), tapAck0.getOpaque());
  }
}
