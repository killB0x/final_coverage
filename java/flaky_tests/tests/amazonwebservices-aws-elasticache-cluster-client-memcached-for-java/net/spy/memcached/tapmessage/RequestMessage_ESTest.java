/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:07:04 GMT 2022
 */

package net.spy.memcached.tapmessage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.util.HashMap;
import java.util.Map;
import net.spy.memcached.tapmessage.RequestMessage;
import net.spy.memcached.tapmessage.TapMagic;
import net.spy.memcached.tapmessage.TapOpcode;
import net.spy.memcached.tapmessage.TapRequestFlag;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RequestMessage_ESTest extends RequestMessage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      TapMagic tapMagic0 = TapMagic.PROTOCOL_BINARY_RES;
      requestMessage0.magic = tapMagic0;
      TapOpcode tapOpcode0 = TapOpcode.VBUCKETSET;
      requestMessage0.setOpcode(tapOpcode0);
      TapRequestFlag tapRequestFlag0 = TapRequestFlag.LIST_VBUCKETS;
      requestMessage0.setFlags(tapRequestFlag0);
      TapRequestFlag tapRequestFlag1 = TapRequestFlag.CHECKPOINT;
      requestMessage0.setFlags(tapRequestFlag1);
      requestMessage0.getBytes();
      assertEquals((byte)4, requestMessage0.getExtralength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.totalbody = 575;
      requestMessage0.setName("~[/:z8J-~");
      assertEquals(572, requestMessage0.getMessageLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>();
      Short short0 = new Short((short)33);
      Long long0 = new Long(24);
      hashMap0.put(short0, long0);
      requestMessage0.setvBucketCheckpoints(hashMap0);
      requestMessage0.setvBucketCheckpoints(hashMap0);
      assertEquals(46, requestMessage0.getTotalbody());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      TapRequestFlag tapRequestFlag0 = TapRequestFlag.BACKFILL;
      requestMessage0.datatype = (byte) (-44);
      requestMessage0.setFlags(tapRequestFlag0);
      assertEquals(72, requestMessage0.getMessageLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        requestMessage0.setvBucketCheckpoints((Map<Short, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.RequestMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        requestMessage0.setVbucketlist((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.RequestMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        requestMessage0.setName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.RequestMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        requestMessage0.setFlags((TapRequestFlag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.RequestMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.setTotalbody(24);
      TapMagic tapMagic0 = TapMagic.PROTOCOL_BINARY_RES;
      requestMessage0.magic = tapMagic0;
      TapOpcode tapOpcode0 = TapOpcode.OPAQUE;
      requestMessage0.setOpcode(tapOpcode0);
      // Undeclared exception!
      try { 
        requestMessage0.getBytes();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        requestMessage0.getBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.RequestMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.totalbody = (-1952);
      // Undeclared exception!
      try { 
        requestMessage0.getBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-1928 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      TapMagic tapMagic0 = TapMagic.PROTOCOL_BINARY_RES;
      requestMessage0.magic = tapMagic0;
      TapOpcode tapOpcode0 = TapOpcode.VBUCKETSET;
      requestMessage0.setOpcode(tapOpcode0);
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>();
      Short short0 = new Short((short) (-38));
      Long long0 = new Long(24);
      hashMap0.put(short0, long0);
      requestMessage0.setvBucketCheckpoints(hashMap0);
      TapRequestFlag tapRequestFlag0 = TapRequestFlag.CHECKPOINT;
      requestMessage0.setFlags(tapRequestFlag0);
      requestMessage0.getBytes();
      assertEquals((byte)4, requestMessage0.getExtralength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      TapMagic tapMagic0 = TapMagic.PROTOCOL_BINARY_REQ;
      requestMessage0.magic = tapMagic0;
      short[] shortArray0 = new short[2];
      requestMessage0.setVbucketlist(shortArray0);
      TapOpcode tapOpcode0 = TapOpcode.VBUCKETSET;
      requestMessage0.setOpcode(tapOpcode0);
      TapRequestFlag tapRequestFlag0 = TapRequestFlag.TAKEOVER_VBUCKETS;
      requestMessage0.setFlags(tapRequestFlag0);
      requestMessage0.getBytes();
      assertEquals((byte)4, requestMessage0.getExtralength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      TapMagic tapMagic0 = TapMagic.PROTOCOL_BINARY_RES;
      requestMessage0.magic = tapMagic0;
      TapOpcode tapOpcode0 = TapOpcode.VBUCKETSET;
      requestMessage0.setOpcode(tapOpcode0);
      TapRequestFlag tapRequestFlag0 = TapRequestFlag.BACKFILL;
      requestMessage0.setFlags(tapRequestFlag0);
      requestMessage0.getBytes();
      assertEquals(72, requestMessage0.getMessageLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      TapRequestFlag tapRequestFlag0 = TapRequestFlag.BACKFILL;
      requestMessage0.setFlags(tapRequestFlag0);
      requestMessage0.getFlags();
      assertEquals((byte)4, requestMessage0.getExtralength());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      TapRequestFlag tapRequestFlag0 = TapRequestFlag.LIST_VBUCKETS;
      requestMessage0.setFlags(tapRequestFlag0);
      requestMessage0.setFlags(tapRequestFlag0);
      assertEquals((byte)4, requestMessage0.getExtralength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.getFlags();
      assertEquals(36, requestMessage0.getTotalbody());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.setBackfill(2272L);
      assertEquals(36, requestMessage0.getTotalbody());
  }
}
