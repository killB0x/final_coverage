/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:50:35 GMT 2022
 */

package net.spy.memcached.tapmessage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.tapmessage.RequestMessage;
import net.spy.memcached.tapmessage.ResponseMessage;
import net.spy.memcached.tapmessage.TapMagic;
import net.spy.memcached.tapmessage.TapOpcode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseMessage_ESTest extends BaseMessage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-32);
      // Undeclared exception!
      try { 
        requestMessage0.decodeLong(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.spy.memcached.tapmessage.BaseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)81;
      // Undeclared exception!
      try { 
        requestMessage0.decodeLong(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.spy.memcached.tapmessage.BaseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-123);
      // Undeclared exception!
      try { 
        requestMessage0.decodeLong(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.spy.memcached.tapmessage.BaseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)40;
      // Undeclared exception!
      try { 
        requestMessage0.decodeLong(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.spy.memcached.tapmessage.BaseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-23);
      // Undeclared exception!
      try { 
        requestMessage0.decodeLong(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.spy.memcached.tapmessage.BaseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)49;
      int int0 = requestMessage0.decodeIntHostOrder(byteArray0, 0);
      assertEquals(3211264, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        requestMessage0.decodeIntHostOrder(byteArray0, (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.spy.memcached.tapmessage.BaseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-128);
      int int0 = requestMessage0.decodeInt(byteArray0, 0);
      assertEquals(32768, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte) (-128);
      ResponseMessage responseMessage0 = null;
      try {
        responseMessage0 = new ResponseMessage(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.ResponseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.vbucket = (short)32;
      short short0 = requestMessage0.getVbucket();
      assertEquals((short)32, short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.setVbucket((short) (-1211));
      short short0 = requestMessage0.getVbucket();
      assertEquals((short) (-1211), short0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      assertEquals(60, requestMessage0.getMessageLength());
      
      requestMessage0.setTotalbody(0);
      int int0 = requestMessage0.getTotalbody();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      int int0 = requestMessage0.getTotalbody();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.totalbody = (-376);
      int int0 = requestMessage0.getTotalbody();
      assertEquals((-376), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.setOpaque(937);
      int int0 = requestMessage0.getOpaque();
      assertEquals(937, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.opaque = (-3047);
      int int0 = requestMessage0.getOpaque();
      assertEquals((-3047), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      TapMagic tapMagic0 = TapMagic.PROTOCOL_BINARY_RES;
      requestMessage0.magic = tapMagic0;
      TapMagic tapMagic1 = requestMessage0.getMagic();
      assertEquals(TapMagic.PROTOCOL_BINARY_RES, tapMagic1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.keylength = (short)0;
      short short0 = requestMessage0.getKeylength();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.setExtralength((byte)28);
      byte byte0 = requestMessage0.getExtralength();
      assertEquals((byte)28, byte0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.extralength = (byte) (-128);
      byte byte0 = requestMessage0.getExtralength();
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.datatype = (byte) (-103);
      byte byte0 = requestMessage0.getDatatype();
      assertEquals((byte) (-103), byte0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.setCas(327L);
      long long0 = requestMessage0.getCas();
      assertEquals(327L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.cas = (long) (byte) (-128);
      long long0 = requestMessage0.getCas();
      assertEquals((-128L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      short short0 = requestMessage0.decodeShort(byteArray0, 0);
      assertEquals((short)4096, short0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-128);
      RequestMessage requestMessage0 = new RequestMessage();
      short short0 = requestMessage0.decodeShort(byteArray0, 0);
      assertEquals((short) (-32768), short0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-118);
      long long0 = requestMessage0.decodeLong(byteArray0, (byte)0);
      assertEquals(2315255808L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-128);
      RequestMessage requestMessage0 = new RequestMessage();
      long long0 = requestMessage0.decodeLong(byteArray0, 0);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)3;
      RequestMessage requestMessage0 = new RequestMessage();
      int int0 = requestMessage0.decodeIntHostOrder(byteArray0, (byte)0);
      assertEquals(768, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-13);
      int int0 = requestMessage0.decodeIntHostOrder(byteArray0, 0);
      assertEquals((-218103808), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-128);
      int int0 = requestMessage0.decodeInt(byteArray0, 0);
      assertEquals(8388608, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-128);
      RequestMessage requestMessage0 = new RequestMessage();
      int int0 = requestMessage0.decodeInt(byteArray0, 0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        requestMessage0.getBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.RequestMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.totalbody = (-606);
      // Undeclared exception!
      try { 
        requestMessage0.getBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-582 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        requestMessage0.decodeShort((byte[]) null, 155);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.BaseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        requestMessage0.decodeShort(byteArray0, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 24 out of bounds for length 3
         //
         verifyException("net.spy.memcached.tapmessage.BaseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        requestMessage0.decodeLong((byte[]) null, (-830));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.BaseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        requestMessage0.decodeIntHostOrder((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.BaseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        requestMessage0.decodeInt((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.BaseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        requestMessage0.decodeInt(byteArray0, 1180);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1180 out of bounds for length 33
         //
         verifyException("net.spy.memcached.tapmessage.BaseMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      short short0 = requestMessage0.getVbucket();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      RequestMessage requestMessage0 = new RequestMessage();
      int int0 = requestMessage0.decodeIntHostOrder(byteArray0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.setDatatype((byte)92);
      byte byte0 = requestMessage0.getDatatype();
      assertEquals((byte)92, byte0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      short short0 = requestMessage0.getKeylength();
      assertEquals((short)36, short0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte byte0 = requestMessage0.getExtralength();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      int int0 = requestMessage0.getMessageLength();
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      long long0 = requestMessage0.getCas();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      TapOpcode tapOpcode0 = TapOpcode.OPAQUE;
      requestMessage0.setOpcode(tapOpcode0);
      TapOpcode tapOpcode1 = requestMessage0.getOpcode();
      assertEquals(TapOpcode.OPAQUE, tapOpcode1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      RequestMessage requestMessage0 = new RequestMessage();
      int int0 = requestMessage0.decodeInt(byteArray0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      byte byte0 = requestMessage0.getDatatype();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.getOpcode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      RequestMessage requestMessage0 = new RequestMessage();
      long long0 = requestMessage0.decodeLong(byteArray0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      TapMagic tapMagic0 = TapMagic.PROTOCOL_BINARY_RES;
      requestMessage0.setMagic(tapMagic0);
      assertEquals(36, requestMessage0.getTotalbody());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.setTotalbody(1489);
      assertEquals(1489, requestMessage0.getTotalbody());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      requestMessage0.getMagic();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      RequestMessage requestMessage0 = new RequestMessage();
      short short0 = requestMessage0.decodeShort(byteArray0, 0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      int int0 = requestMessage0.getOpaque();
      assertEquals(0, int0);
  }
}
