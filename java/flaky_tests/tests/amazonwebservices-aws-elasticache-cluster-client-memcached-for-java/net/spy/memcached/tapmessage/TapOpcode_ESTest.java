/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:16:50 GMT 2022
 */

package net.spy.memcached.tapmessage;

import org.junit.Test;
import static org.junit.Assert.*;
import net.spy.memcached.tapmessage.TapOpcode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TapOpcode_ESTest extends TapOpcode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TapOpcode.getOpcodeByByte((byte)120);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TapOpcode[] tapOpcodeArray0 = TapOpcode.values();
      assertEquals(11, tapOpcodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.valueOf("MUTATION");
      assertEquals(TapOpcode.MUTATION, tapOpcode0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TapOpcode.getOpcodeByByte((byte) (-128));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.getOpcodeByByte((byte)70);
      assertEquals(TapOpcode.START_CHECKPOINT, tapOpcode0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.getOpcodeByByte((byte)71);
      assertEquals(TapOpcode.END_CHECKPOINT, tapOpcode0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.getOpcodeByByte((byte)69);
      assertEquals(TapOpcode.VBUCKETSET, tapOpcode0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.getOpcodeByByte((byte)33);
      assertEquals(TapOpcode.SASLAUTH, tapOpcode0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.getOpcodeByByte((byte)64);
      assertEquals(TapOpcode.REQUEST, tapOpcode0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.getOpcodeByByte((byte)68);
      assertEquals(TapOpcode.OPAQUE, tapOpcode0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.getOpcodeByByte((byte)10);
      assertEquals(TapOpcode.NOOP, tapOpcode0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.getOpcodeByByte((byte)65);
      assertEquals(TapOpcode.MUTATION, tapOpcode0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.getOpcodeByByte((byte)67);
      assertEquals(TapOpcode.DELETE, tapOpcode0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.getOpcodeByByte((byte)66);
      assertEquals(TapOpcode.DELETE, tapOpcode0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TapOpcode tapOpcode0 = TapOpcode.getOpcodeByByte((byte)32);
      byte byte0 = tapOpcode0.getOpcode();
      assertEquals((byte)32, byte0);
  }
}
