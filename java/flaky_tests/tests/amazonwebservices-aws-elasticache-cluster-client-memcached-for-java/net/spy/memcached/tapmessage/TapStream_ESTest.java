/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:35:45 GMT 2022
 */

package net.spy.memcached.tapmessage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.OperationState;
import net.spy.memcached.ops.TapOperation;
import net.spy.memcached.protocol.binary.BinaryOperationFactory;
import net.spy.memcached.tapmessage.RequestMessage;
import net.spy.memcached.tapmessage.TapOpcode;
import net.spy.memcached.tapmessage.TapStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TapStream_ESTest extends TapStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TapStream tapStream0 = new TapStream();
      tapStream0.addOp((TapOperation) null);
      // Undeclared exception!
      try { 
        tapStream0.isCompleted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.TapStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TapStream tapStream0 = new TapStream();
      tapStream0.addOp((TapOperation) null);
      // Undeclared exception!
      try { 
        tapStream0.isCancelled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.TapStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TapStream tapStream0 = new TapStream();
      tapStream0.addOp((TapOperation) null);
      // Undeclared exception!
      try { 
        tapStream0.hasErrored();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.TapStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TapStream tapStream0 = new TapStream();
      tapStream0.addOp((TapOperation) null);
      // Undeclared exception!
      try { 
        tapStream0.cancel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.TapStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TapStream tapStream0 = new TapStream();
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      RequestMessage requestMessage0 = new RequestMessage();
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 272);
      TapOperation tapOperation0 = binaryOperationFactory0.tapCustom("", requestMessage0, multiGetsOperationCallback0);
      tapStream0.addOp(tapOperation0);
      boolean boolean0 = tapStream0.hasErrored();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TapStream tapStream0 = new TapStream();
      boolean boolean0 = tapStream0.hasErrored();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TapStream tapStream0 = new TapStream();
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      RequestMessage requestMessage0 = new RequestMessage();
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 272);
      TapOperation tapOperation0 = binaryOperationFactory0.tapCustom("", requestMessage0, multiGetsOperationCallback0);
      tapStream0.addOp(tapOperation0);
      boolean boolean0 = tapStream0.isCancelled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TapStream tapStream0 = new TapStream();
      boolean boolean0 = tapStream0.isCancelled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      TapOpcode tapOpcode0 = TapOpcode.OPAQUE;
      TapOperation tapOperation0 = binaryOperationFactory0.tapAck(tapOpcode0, (-1630), operationCallback0);
      OperationState operationState0 = OperationState.COMPLETE;
      tapOperation0.streamClosed(operationState0);
      TapStream tapStream0 = new TapStream();
      tapStream0.addOp(tapOperation0);
      boolean boolean0 = tapStream0.isCompleted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TapStream tapStream0 = new TapStream();
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      RequestMessage requestMessage0 = new RequestMessage();
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 272);
      TapOperation tapOperation0 = binaryOperationFactory0.tapCustom("", requestMessage0, multiGetsOperationCallback0);
      tapStream0.addOp(tapOperation0);
      boolean boolean0 = tapStream0.isCompleted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TapStream tapStream0 = new TapStream();
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      RequestMessage requestMessage0 = new RequestMessage();
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 272);
      TapOperation tapOperation0 = binaryOperationFactory0.tapCustom("", requestMessage0, multiGetsOperationCallback0);
      tapStream0.addOp(tapOperation0);
      tapStream0.cancel();
      boolean boolean0 = tapStream0.isCancelled();
      assertTrue(boolean0);
  }
}
