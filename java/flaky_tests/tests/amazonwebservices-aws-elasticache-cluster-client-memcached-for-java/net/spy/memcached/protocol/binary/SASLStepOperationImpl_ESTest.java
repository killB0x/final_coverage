/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:34:52 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import javax.security.auth.callback.CallbackHandler;
import javax.security.sasl.SaslClient;
import net.spy.memcached.auth.PlainCallbackHandler;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.protocol.binary.SASLStepOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SASLStepOperationImpl_ESTest extends SASLStepOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("", "");
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 17);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 17);
      SASLStepOperationImpl sASLStepOperationImpl0 = new SASLStepOperationImpl(stringArray0, (byte[]) null, "", hashMap0, plainCallbackHandler0, multiGetOperationCallback0);
      SaslClient saslClient0 = mock(SaslClient.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(saslClient0).evaluateChallenge(any(byte[].class));
      byte[] byteArray0 = sASLStepOperationImpl0.buildResponse(saslClient0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("", "");
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 17);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 17);
      SASLStepOperationImpl sASLStepOperationImpl0 = new SASLStepOperationImpl(stringArray0, (byte[]) null, "", hashMap0, plainCallbackHandler0, multiGetOperationCallback0);
      byte[] byteArray0 = new byte[0];
      SaslClient saslClient0 = mock(SaslClient.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(saslClient0).evaluateChallenge(any(byte[].class));
      byte[] byteArray1 = sASLStepOperationImpl0.buildResponse(saslClient0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SASLStepOperationImpl sASLStepOperationImpl0 = new SASLStepOperationImpl(stringArray0, (byte[]) null, "rGMLsffYoCEt\"Qh", hashMap0, (CallbackHandler) null, (OperationCallback) null);
      // Undeclared exception!
      try { 
        sASLStepOperationImpl0.buildResponse((SaslClient) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.SASLStepOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("", "");
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 17);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 17);
      SASLStepOperationImpl sASLStepOperationImpl0 = new SASLStepOperationImpl(stringArray0, (byte[]) null, "", hashMap0, plainCallbackHandler0, multiGetOperationCallback0);
      byte[] byteArray0 = new byte[7];
      SaslClient saslClient0 = mock(SaslClient.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(saslClient0).evaluateChallenge(any(byte[].class));
      byte[] byteArray1 = sASLStepOperationImpl0.buildResponse(saslClient0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[1];
      SASLStepOperationImpl sASLStepOperationImpl0 = new SASLStepOperationImpl(stringArray0, (byte[]) null, stringArray0[0], hashMap0, (CallbackHandler) null, (OperationCallback) null);
      String string0 = sASLStepOperationImpl0.toString();
      assertEquals("SASL steps operation", string0);
  }
}
