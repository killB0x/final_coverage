/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:17:51 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import javax.security.auth.callback.CallbackHandler;
import javax.security.sasl.SaslClient;
import net.spy.memcached.auth.PlainCallbackHandler;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.protocol.binary.SASLAuthOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SASLAuthOperationImpl_ESTest extends SASLAuthOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("<[*oQ'>^Rr1<z", "+b< Q cYQ/P`j>%R#");
      SASLAuthOperationImpl sASLAuthOperationImpl0 = new SASLAuthOperationImpl((String[]) null, "+b< Q cYQ/P`j>%R#", map0, plainCallbackHandler0, (OperationCallback) null);
      byte[] byteArray0 = new byte[9];
      SaslClient saslClient0 = mock(SaslClient.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(saslClient0).evaluateChallenge(any(byte[].class));
      doReturn(true).when(saslClient0).hasInitialResponse();
      byte[] byteArray1 = sASLAuthOperationImpl0.buildResponse(saslClient0);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("<[*oQ'>^Rr1<z", "+b< Q cYQ/P`j>%R#");
      SASLAuthOperationImpl sASLAuthOperationImpl0 = new SASLAuthOperationImpl((String[]) null, "+b< Q cYQ/P`j>%R#", map0, plainCallbackHandler0, (OperationCallback) null);
      // Undeclared exception!
      try { 
        sASLAuthOperationImpl0.buildResponse((SaslClient) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.SASLAuthOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, (-383));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 348);
      SASLAuthOperationImpl sASLAuthOperationImpl0 = new SASLAuthOperationImpl(stringArray0, "", hashMap0, (CallbackHandler) null, multiGetOperationCallback0);
      SaslClient saslClient0 = mock(SaslClient.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(saslClient0).evaluateChallenge(any(byte[].class));
      doReturn(true).when(saslClient0).hasInitialResponse();
      byte[] byteArray0 = sASLAuthOperationImpl0.buildResponse(saslClient0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, (-383));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 348);
      SASLAuthOperationImpl sASLAuthOperationImpl0 = new SASLAuthOperationImpl(stringArray0, "", hashMap0, (CallbackHandler) null, multiGetOperationCallback0);
      SaslClient saslClient0 = mock(SaslClient.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(saslClient0).hasInitialResponse();
      byte[] byteArray0 = sASLAuthOperationImpl0.buildResponse(saslClient0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, (-383));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 348);
      SASLAuthOperationImpl sASLAuthOperationImpl0 = new SASLAuthOperationImpl(stringArray0, "", hashMap0, (CallbackHandler) null, multiGetOperationCallback0);
      String string0 = sASLAuthOperationImpl0.toString();
      assertEquals("SASL auth operation", string0);
  }
}
