/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:40:01 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.ops.StoreOperation;
import net.spy.memcached.ops.StoreType;
import net.spy.memcached.protocol.binary.StoreOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StoreOperationImpl_ESTest extends StoreOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StoreType storeType0 = StoreType.replace;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "flush_all\r\n", (-1854), (-2556), (byte[]) null, (-1854), (StoreOperation.Callback) null);
      // Undeclared exception!
      try { 
        storeOperationImpl0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.StoreOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StoreType storeType0 = StoreType.add;
      byte[] byteArray0 = new byte[2];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "PC,0b(an{", 2018, 2018, byteArray0, 0L, storeOperation_Callback0);
      storeOperationImpl0.decodePayload(byteArray0);
      assertEquals(2018, storeOperationImpl0.getExpiration());
      assertEquals(2018, storeOperationImpl0.getFlags());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StoreType storeType0 = StoreType.replace;
      byte[] byteArray0 = new byte[0];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "]r~b", 263, 263, byteArray0, 1792L, storeOperation_Callback0);
      storeOperationImpl0.initialize();
      assertEquals(263, storeOperationImpl0.getExpiration());
      assertEquals(1792L, storeOperationImpl0.getCasValue());
      assertEquals(263, storeOperationImpl0.getFlags());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StoreType storeType0 = StoreType.add;
      byte[] byteArray0 = new byte[2];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "PC,0b(an{", 2018, 2018, byteArray0, 0L, storeOperation_Callback0);
      String string0 = storeOperationImpl0.toString();
      assertEquals("Cmd: 2 Opaque: 1301 Key: PC,0b(an{ Cas: 0 Exp: 2018 Flags: 2018 Data Length: 2", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StoreType storeType0 = StoreType.replace;
      byte[] byteArray0 = new byte[8];
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, (String) null, 0, 0, byteArray0, (byte)8, (StoreOperation.Callback) null);
      int int0 = storeOperationImpl0.getFlags();
      assertEquals(0, int0);
      assertEquals(0, storeOperationImpl0.getExpiration());
      assertEquals(8L, storeOperationImpl0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StoreType storeType0 = StoreType.add;
      byte[] byteArray0 = new byte[2];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "PC,0b(an{", 2018, 2018, byteArray0, 0L, storeOperation_Callback0);
      int int0 = storeOperationImpl0.getFlags();
      assertEquals(2018, storeOperationImpl0.getExpiration());
      assertEquals(2018, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StoreType storeType0 = StoreType.add;
      byte[] byteArray0 = new byte[3];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "voZ.V", 0, 0, byteArray0, (byte)78, storeOperation_Callback0);
      int int0 = storeOperationImpl0.getExpiration();
      assertEquals(78L, storeOperationImpl0.getCasValue());
      assertEquals(0, int0);
      assertEquals(0, storeOperationImpl0.getFlags());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StoreType storeType0 = StoreType.replace;
      byte[] byteArray0 = new byte[0];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "]r~b", 263, 263, byteArray0, 1792L, storeOperation_Callback0);
      int int0 = storeOperationImpl0.getExpiration();
      assertEquals(263, int0);
      assertEquals(263, storeOperationImpl0.getFlags());
      assertEquals(1792L, storeOperationImpl0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StoreType storeType0 = StoreType.add;
      byte[] byteArray0 = new byte[2];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "PC,0b(an{", 2018, 2018, byteArray0, 0L, storeOperation_Callback0);
      byte[] byteArray1 = storeOperationImpl0.getData();
      assertEquals(2018, storeOperationImpl0.getExpiration());
      assertEquals(2018, storeOperationImpl0.getFlags());
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StoreType storeType0 = StoreType.replace;
      byte[] byteArray0 = new byte[0];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "]r~b", 263, 263, byteArray0, 1792L, storeOperation_Callback0);
      byte[] byteArray1 = storeOperationImpl0.getData();
      assertEquals(263, storeOperationImpl0.getExpiration());
      assertSame(byteArray1, byteArray0);
      assertEquals(263, storeOperationImpl0.getFlags());
      assertEquals(1792L, storeOperationImpl0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StoreType storeType0 = StoreType.add;
      byte[] byteArray0 = new byte[2];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "PC,0b(an{", 2018, 2018, byteArray0, 0L, storeOperation_Callback0);
      storeOperationImpl0.getCasValue();
      assertEquals(2018, storeOperationImpl0.getFlags());
      assertEquals(2018, storeOperationImpl0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StoreType storeType0 = StoreType.set;
      byte[] byteArray0 = new byte[6];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "Unhandled store type:  ", 326, 0, byteArray0, (byte) (-30), storeOperation_Callback0);
      long long0 = storeOperationImpl0.getCasValue();
      assertEquals((-30L), long0);
      assertEquals(326, storeOperationImpl0.getFlags());
      assertEquals(0, storeOperationImpl0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StoreOperationImpl storeOperationImpl0 = null;
      try {
        storeOperationImpl0 = new StoreOperationImpl((StoreType) null, " umkV", 0, 0, (byte[]) null, 0, (StoreOperation.Callback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.StoreOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StoreType storeType0 = StoreType.set;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "", 4070, 4070, (byte[]) null, 4070, (StoreOperation.Callback) null);
      storeOperationImpl0.getStoreType();
      assertEquals(4070, storeOperationImpl0.getExpiration());
      assertEquals(4070, storeOperationImpl0.getFlags());
      assertEquals(4070L, storeOperationImpl0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StoreType storeType0 = StoreType.replace;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "flush_all\r\n", (-1854), (-2556), (byte[]) null, (-1854), (StoreOperation.Callback) null);
      int int0 = storeOperationImpl0.getFlags();
      assertEquals((-2556), storeOperationImpl0.getExpiration());
      assertEquals((-1854L), storeOperationImpl0.getCasValue());
      assertEquals((-1854), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StoreType storeType0 = StoreType.add;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "", 130, 130, (byte[]) null, (-1107L), (StoreOperation.Callback) null);
      byte[] byteArray0 = storeOperationImpl0.getData();
      assertEquals((-1107L), storeOperationImpl0.getCasValue());
      assertNull(byteArray0);
      assertEquals(130, storeOperationImpl0.getExpiration());
      assertEquals(130, storeOperationImpl0.getFlags());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StoreType storeType0 = StoreType.set;
      byte[] byteArray0 = new byte[2];
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "1j", (-1165), (-125), byteArray0, (-1165), (StoreOperation.Callback) null);
      int int0 = storeOperationImpl0.getExpiration();
      assertEquals((-1165), storeOperationImpl0.getFlags());
      assertEquals((-125), int0);
      assertEquals((-1165L), storeOperationImpl0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StoreType storeType0 = StoreType.set;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "net.spy.memcached.internal.OperationFuture", (byte)69, 17, (byte[]) null, (byte)69, (StoreOperation.Callback) null);
      // Undeclared exception!
      try { 
        storeOperationImpl0.decodePayload((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      StoreType storeType0 = StoreType.replace;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, (String) null, 8192, (byte)0, byteArray0, 3536L, (StoreOperation.Callback) null);
      long long0 = storeOperationImpl0.getCasValue();
      assertEquals(8192, storeOperationImpl0.getFlags());
      assertEquals(3536L, long0);
      assertEquals(0, storeOperationImpl0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StoreType storeType0 = StoreType.set;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "}4KxcK`:R7!ms", 0, 0, (byte[]) null, 0, (StoreOperation.Callback) null);
      // Undeclared exception!
      try { 
        storeOperationImpl0.initialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }
}
