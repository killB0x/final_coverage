/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:04:54 GMT 2022
 */

package net.spy.memcached.protocol;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.time.ZoneId;
import java.util.Locale;
import java.util.Set;
import net.spy.memcached.MemcachedNode;
import net.spy.memcached.MemcachedNodeROImpl;
import net.spy.memcached.ops.GetAndTouchOperation;
import net.spy.memcached.ops.GetlOperation;
import net.spy.memcached.ops.GetsOperation;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.Mutator;
import net.spy.memcached.ops.MutatorOperation;
import net.spy.memcached.ops.Operation;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.ReplicaGetsOperation;
import net.spy.memcached.ops.StatsOperation;
import net.spy.memcached.protocol.ascii.AsciiOperationFactory;
import net.spy.memcached.protocol.ascii.GetAndTouchOperationImpl;
import net.spy.memcached.protocol.ascii.RefreshCertOperationImpl;
import net.spy.memcached.protocol.binary.GetlOperationImpl;
import net.spy.memcached.protocol.binary.GetsOperationImpl;
import net.spy.memcached.protocol.binary.KeyStatsOperationImpl;
import net.spy.memcached.protocol.binary.MultiGetOperationImpl;
import net.spy.memcached.protocol.binary.ReplicaGetOperationImpl;
import net.spy.memcached.protocol.binary.ReplicaGetsOperationImpl;
import net.spy.memcached.protocol.binary.StatsOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseOperationImpl_ESTest extends BaseOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 0);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, 2042);
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("1SBgfnxM,p\"%OO55 ", 0, multiReplicaGetOperationCallback0);
      boolean boolean0 = replicaGetOperationImpl0.isTimedOut((long) 0);
      assertFalse(replicaGetOperationImpl0.isCancelled());
      assertFalse(replicaGetOperationImpl0.isTimedOutUnsent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 925);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 925);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 2147483627);
      MultiGetOperationImpl multiGetOperationImpl0 = new MultiGetOperationImpl(set0, multiGetsOperationCallback0);
      System.setCurrentTimeMillis((-755L));
      boolean boolean0 = multiGetOperationImpl0.isTimedOut((long) 925);
      assertFalse(multiGetOperationImpl0.isTimedOutUnsent());
      assertFalse(multiGetOperationImpl0.isCancelled());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, (-110));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, (-110));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, (-110));
      GetsOperationImpl getsOperationImpl0 = new GetsOperationImpl("rT0hSB/=pHxkUo.#i|", multiGetsOperationCallback0);
      getsOperationImpl0.timeOut();
      assertTrue(getsOperationImpl0.isTimedOut());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GetlOperationImpl getlOperationImpl0 = new GetlOperationImpl("[}T9*", 0, (GetlOperation.Callback) null);
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      getlOperationImpl0.readFromBuffer(byteBuffer0);
      assertFalse(getlOperationImpl0.isCancelled());
      assertFalse(getlOperationImpl0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, (-110));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, (-110));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, (-110));
      GetsOperationImpl getsOperationImpl0 = new GetsOperationImpl("rT0hSB/=pHxkUo.#i|", multiGetsOperationCallback0);
      getsOperationImpl0.writing();
      assertFalse(getsOperationImpl0.isTimedOutUnsent());
      assertFalse(getsOperationImpl0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 0);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, 2042);
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("1SBgfnxM,p\"%OO55 ", 0, multiReplicaGetOperationCallback0);
      replicaGetOperationImpl0.writeComplete();
      assertFalse(replicaGetOperationImpl0.isTimedOutUnsent());
      assertFalse(replicaGetOperationImpl0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GetlOperationImpl getlOperationImpl0 = new GetlOperationImpl("[}T9*", 0, (GetlOperation.Callback) null);
      MemcachedNodeROImpl memcachedNodeROImpl0 = new MemcachedNodeROImpl((MemcachedNode) null);
      getlOperationImpl0.setHandlingNode(memcachedNodeROImpl0);
      assertFalse(getlOperationImpl0.isTimedOutUnsent());
      assertFalse(getlOperationImpl0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("*:z</>N<Dr/('<m", statsOperation_Callback0);
      statsOperationImpl0.setCloneCount(14);
      assertEquals(14, statsOperationImpl0.getCloneCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      KeyStatsOperationImpl keyStatsOperationImpl0 = new KeyStatsOperationImpl("tA[KtYh_!\"5 K1xX8", statsOperation_Callback0);
      assertFalse(keyStatsOperationImpl0.isCancelled());
      
      keyStatsOperationImpl0.cancel();
      assertTrue(keyStatsOperationImpl0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("net.spy.memcached.protocol.BaseOperationImpl", (StatsOperation.Callback) null);
      statsOperationImpl0.addClone((Operation) null);
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
      assertFalse(statsOperationImpl0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, 0);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, (-3744));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 1875);
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("Checked the selectors.", 898, multiReplicaGetOperationCallback0);
      boolean boolean0 = replicaGetOperationImpl0.isTimedOut((-1L));
      assertTrue(replicaGetOperationImpl0.isTimedOut());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, (-2438));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 476);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 476);
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("nngQ0HlA=Ciy^9", 476, multiReplicaGetOperationCallback0);
      replicaGetOperationImpl0.timeOut();
      boolean boolean0 = replicaGetOperationImpl0.isTimedOut();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      KeyStatsOperationImpl keyStatsOperationImpl0 = new KeyStatsOperationImpl(";WU;cF}7`EgYiZ", statsOperation_Callback0);
      keyStatsOperationImpl0.writeComplete();
      long long0 = keyStatsOperationImpl0.getWriteCompleteTimestamp();
      assertEquals(1392409281320000L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KeyStatsOperationImpl keyStatsOperationImpl0 = new KeyStatsOperationImpl("Flush completed successfully", (StatsOperation.Callback) null);
      keyStatsOperationImpl0.getCallback();
      assertFalse(keyStatsOperationImpl0.isCancelled());
      assertFalse(keyStatsOperationImpl0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ReplicaGetsOperation.Callback replicaGetsOperation_Callback0 = mock(ReplicaGetsOperation.Callback.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(replicaGetsOperation_Callback0).toString();
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("", 0, replicaGetsOperation_Callback0);
      replicaGetsOperationImpl0.getCallback();
      assertFalse(replicaGetsOperationImpl0.isCancelled());
      assertFalse(replicaGetsOperationImpl0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GetsOperationImpl getsOperationImpl0 = new GetsOperationImpl("*:z</>N<Dr/('<m", (GetsOperation.Callback) null);
      // Undeclared exception!
      try { 
        getsOperationImpl0.timeOut();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.BaseOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RefreshCertOperationImpl refreshCertOperationImpl0 = new RefreshCertOperationImpl((OperationCallback) null);
      // Undeclared exception!
      try { 
        refreshCertOperationImpl0.readFromBuffer((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.ascii.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      MultiGetOperationImpl multiGetOperationImpl0 = new MultiGetOperationImpl(set0, (OperationCallback) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2554);
      // Undeclared exception!
      try { 
        multiGetOperationImpl0.readFromBuffer(byteBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RefreshCertOperationImpl refreshCertOperationImpl0 = new RefreshCertOperationImpl((OperationCallback) null);
      // Undeclared exception!
      try { 
        refreshCertOperationImpl0.isTimedOut((-948L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.BaseOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("#)7ZB", 0, getAndTouchOperation_Callback0, "");
      // Undeclared exception!
      try { 
        getAndTouchOperationImpl0.initialize();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReplicaGetsOperation.Callback replicaGetsOperation_Callback0 = mock(ReplicaGetsOperation.Callback.class, new ViolatedAssumptionAnswer());
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl((String) null, (-2744), replicaGetsOperation_Callback0);
      // Undeclared exception!
      try { 
        replicaGetsOperationImpl0.initialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.KeyUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("Ikwa9EQw:]b", statsOperation_Callback0);
      statsOperationImpl0.isTimedOut((-1L));
      boolean boolean0 = statsOperationImpl0.isTimedOutUnsent();
      assertTrue(statsOperationImpl0.isTimedOut());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KeyStatsOperationImpl keyStatsOperationImpl0 = new KeyStatsOperationImpl(" remaining, got ", (StatsOperation.Callback) null);
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      Mutator mutator0 = Mutator.incr;
      MutatorOperation mutatorOperation0 = asciiOperationFactory0.mutate(mutator0, "", (-649000000L), (-649000000L), 188, (OperationCallback) null);
      keyStatsOperationImpl0.addClone(mutatorOperation0);
      // Undeclared exception!
      try { 
        keyStatsOperationImpl0.timeOut();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.BaseOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("Ikwa9EQw:]b", statsOperation_Callback0);
      // Undeclared exception!
      try { 
        statsOperationImpl0.handleRead((ByteBuffer) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      KeyStatsOperationImpl keyStatsOperationImpl0 = new KeyStatsOperationImpl("3TYX=A2l<", statsOperation_Callback0);
      keyStatsOperationImpl0.initialize();
      assertFalse(keyStatsOperationImpl0.isTimedOutUnsent());
      assertFalse(keyStatsOperationImpl0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KeyStatsOperationImpl keyStatsOperationImpl0 = new KeyStatsOperationImpl((String) null, (StatsOperation.Callback) null);
      keyStatsOperationImpl0.addClone((Operation) null);
      // Undeclared exception!
      try { 
        keyStatsOperationImpl0.cancel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.BaseOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      KeyStatsOperationImpl keyStatsOperationImpl0 = new KeyStatsOperationImpl("3TYX=A2l<", statsOperation_Callback0);
      boolean boolean0 = keyStatsOperationImpl0.hasErrored();
      assertFalse(boolean0);
      assertFalse(keyStatsOperationImpl0.isCancelled());
      assertFalse(keyStatsOperationImpl0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, (-2438));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 476);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 476);
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("nngQ0HlA=Ciy^9", 476, multiReplicaGetOperationCallback0);
      replicaGetOperationImpl0.isTimedOut();
      assertFalse(replicaGetOperationImpl0.isCancelled());
      assertFalse(replicaGetOperationImpl0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 2147481500);
      RefreshCertOperationImpl refreshCertOperationImpl0 = new RefreshCertOperationImpl(multiGetsOperationCallback0);
      refreshCertOperationImpl0.handleLine("");
      assertFalse(refreshCertOperationImpl0.isCancelled());
      assertFalse(refreshCertOperationImpl0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      KeyStatsOperationImpl keyStatsOperationImpl0 = new KeyStatsOperationImpl("3TYX=A2l<", statsOperation_Callback0);
      boolean boolean0 = keyStatsOperationImpl0.isCancelled();
      assertFalse(keyStatsOperationImpl0.isTimedOutUnsent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 925);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 925);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 2147483627);
      MultiGetOperationImpl multiGetOperationImpl0 = new MultiGetOperationImpl(set0, multiGetsOperationCallback0);
      multiGetOperationImpl0.getWriteCompleteTimestamp();
      assertFalse(multiGetOperationImpl0.isCancelled());
      assertFalse(multiGetOperationImpl0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 925);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 925);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 2147483627);
      MultiGetOperationImpl multiGetOperationImpl0 = new MultiGetOperationImpl(set0, multiGetsOperationCallback0);
      multiGetOperationImpl0.getState();
      assertFalse(multiGetOperationImpl0.isTimedOutUnsent());
      assertFalse(multiGetOperationImpl0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RefreshCertOperationImpl refreshCertOperationImpl0 = new RefreshCertOperationImpl((OperationCallback) null);
      int int0 = refreshCertOperationImpl0.getCloneCount();
      assertEquals(0, int0);
      assertFalse(refreshCertOperationImpl0.isCancelled());
      assertFalse(refreshCertOperationImpl0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("Ikwa9EQw:]b", statsOperation_Callback0);
      boolean boolean0 = statsOperationImpl0.isTimedOutUnsent();
      assertFalse(statsOperationImpl0.isCancelled());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      KeyStatsOperationImpl keyStatsOperationImpl0 = new KeyStatsOperationImpl("3TYX=A2l<", statsOperation_Callback0);
      assertFalse(keyStatsOperationImpl0.isCancelled());
      
      keyStatsOperationImpl0.cancel();
      boolean boolean0 = keyStatsOperationImpl0.isCancelled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 925);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 925);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 2147483627);
      MultiGetOperationImpl multiGetOperationImpl0 = new MultiGetOperationImpl(set0, multiGetsOperationCallback0);
      multiGetOperationImpl0.getBuffer();
      assertFalse(multiGetOperationImpl0.isTimedOutUnsent());
      assertFalse(multiGetOperationImpl0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RefreshCertOperationImpl refreshCertOperationImpl0 = new RefreshCertOperationImpl((OperationCallback) null);
      refreshCertOperationImpl0.getException();
      assertFalse(refreshCertOperationImpl0.isCancelled());
      assertFalse(refreshCertOperationImpl0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RefreshCertOperationImpl refreshCertOperationImpl0 = new RefreshCertOperationImpl((OperationCallback) null);
      refreshCertOperationImpl0.getHandlingNode();
      assertFalse(refreshCertOperationImpl0.isTimedOutUnsent());
      assertFalse(refreshCertOperationImpl0.isCancelled());
  }
}
