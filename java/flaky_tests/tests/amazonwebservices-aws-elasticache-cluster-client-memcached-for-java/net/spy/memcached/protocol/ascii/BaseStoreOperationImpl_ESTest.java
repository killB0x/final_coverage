/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:59:41 GMT 2022
 */

package net.spy.memcached.protocol.ascii;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import net.spy.memcached.ops.ConcatenationType;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.StoreType;
import net.spy.memcached.protocol.ascii.ConcatenationOperationImpl;
import net.spy.memcached.protocol.ascii.StoreOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseStoreOperationImpl_ESTest extends BaseStoreOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      StoreType storeType0 = StoreType.add;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "", (-1158), 2767, byteArray0, (OperationCallback) null);
      String string0 = storeOperationImpl0.toString();
      assertEquals("Cmd: add Key:  Flags: -1158 Exp: 2767 Data Length: 0", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 2659);
      StoreType storeType0 = StoreType.replace;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "", 16777216, 16777216, byteArray0, multiReplicaGetOperationCallback0);
      storeOperationImpl0.initialize();
      assertEquals(16777216, storeOperationImpl0.getExpiration());
      assertEquals(16777216, storeOperationImpl0.getFlags());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      byte[] byteArray0 = new byte[0];
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, ", Opertion Factry: ", byteArray0, (OperationCallback) null);
      concatenationOperationImpl0.initialize();
      assertFalse(concatenationOperationImpl0.hasErrored());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StoreType storeType0 = StoreType.replace;
      byte[] byteArray0 = new byte[6];
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, (byte) (-53));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, (byte)0);
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "zHG7o", 5, 0, byteArray0, multiGetsOperationCallback0);
      storeOperationImpl0.wasCancelled();
      assertEquals(5, storeOperationImpl0.getFlags());
      assertEquals(0, storeOperationImpl0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ConcatenationType concatenationType0 = ConcatenationType.append;
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "LINE", byteArray0, (OperationCallback) null);
      Collection<String> collection0 = concatenationOperationImpl0.getKeys();
      assertTrue(collection0.contains("LINE"));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StoreType storeType0 = StoreType.set;
      byte[] byteArray0 = new byte[7];
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "", 2769, 927, byteArray0, (OperationCallback) null);
      int int0 = storeOperationImpl0.getFlags();
      assertEquals(927, storeOperationImpl0.getExpiration());
      assertEquals(2769, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StoreType storeType0 = StoreType.replace;
      byte[] byteArray0 = new byte[2];
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "STORED", (-1550), 2, byteArray0, (OperationCallback) null);
      int int0 = storeOperationImpl0.getFlags();
      assertEquals((-1550), int0);
      assertEquals(2, storeOperationImpl0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StoreType storeType0 = StoreType.set;
      byte[] byteArray0 = new byte[5];
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 2891);
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "fi3Fs(CD[PX6V2vIb", (-655), 25, byteArray0, multiReplicaGetOperationCallback0);
      int int0 = storeOperationImpl0.getExpiration();
      assertEquals(25, int0);
      assertEquals((-655), storeOperationImpl0.getFlags());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StoreType storeType0 = StoreType.set;
      byte[] byteArray0 = new byte[5];
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, (-859));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, (byte)0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, (-6648));
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "fi3Fs(CD[PX6V2vIb", (-859), (-859), byteArray0, multiGetOperationCallback0);
      int int0 = storeOperationImpl0.getExpiration();
      assertEquals((-859), int0);
      assertEquals((-859), storeOperationImpl0.getFlags());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 0);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 0);
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "G+", (byte[]) null, multiGetOperationCallback0);
      byte[] byteArray0 = concatenationOperationImpl0.getData();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      byte[] byteArray0 = new byte[8];
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 65);
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, (String) null, byteArray0, multiReplicaGetOperationCallback0);
      byte[] byteArray1 = concatenationOperationImpl0.getData();
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StoreType storeType0 = StoreType.set;
      byte[] byteArray0 = new byte[9];
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, " Data Length: ", 0, 0, byteArray0, (OperationCallback) null);
      // Undeclared exception!
      try { 
        storeOperationImpl0.wasCancelled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.ascii.BaseStoreOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-1194));
      StoreType storeType0 = StoreType.add;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, " not contained in operation", (byte) (-21), 6, (byte[]) null, multiGetOperationCallback0);
      // Undeclared exception!
      try { 
        storeOperationImpl0.initialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.ascii.BaseStoreOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "PERFORMANCE", byteArray0, (OperationCallback) null);
      concatenationOperationImpl0.writeComplete();
      // Undeclared exception!
      try { 
        concatenationOperationImpl0.handleLine("PERFORMANCE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.ascii.BaseStoreOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      StoreType storeType0 = StoreType.replace;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, " Data Length: ", 16777226, 16777226, byteArray0, (OperationCallback) null);
      // Undeclared exception!
      try { 
        storeOperationImpl0.initialize();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Not enough room in buffer, need another 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-1194));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, (-910));
      StoreType storeType0 = StoreType.add;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "xKMhCPD9$@1", (byte) (-21), (byte)0, byteArray0, multiGetsOperationCallback0);
      storeOperationImpl0.initialize();
      assertEquals(0, storeOperationImpl0.getExpiration());
      assertEquals((-21), storeOperationImpl0.getFlags());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-1194));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, (-910));
      StoreType storeType0 = StoreType.add;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "xKMhCPD9$@1", (byte) (-21), (byte)0, byteArray0, multiGetsOperationCallback0);
      storeOperationImpl0.writeComplete();
      storeOperationImpl0.handleLine("`+tTr)r\"\"ph");
      assertEquals(0, storeOperationImpl0.getExpiration());
      assertEquals((-21), storeOperationImpl0.getFlags());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-1194));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, (-910));
      StoreType storeType0 = StoreType.add;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "xKMhCPD9$@1", (byte) (-21), (byte)0, byteArray0, multiGetsOperationCallback0);
      // Undeclared exception!
      try { 
        storeOperationImpl0.handleLine("`+tTr)r\"\"ph");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Read ```+tTr)r\"\"ph'' when in WRITE_QUEUED state
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      byte[] byteArray0 = new byte[0];
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 5302);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 5302);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 5302);
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "PERFORMANCE", byteArray0, multiGetOperationCallback0);
      byte[] byteArray1 = concatenationOperationImpl0.getData();
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "", (byte[]) null, (OperationCallback) null);
      // Undeclared exception!
      try { 
        concatenationOperationImpl0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.ascii.BaseStoreOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-1194));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, (-910));
      StoreType storeType0 = StoreType.add;
      StoreOperationImpl storeOperationImpl0 = new StoreOperationImpl(storeType0, "xKMhCPD9$@1", (byte) (-21), (byte)0, byteArray0, multiGetsOperationCallback0);
      int int0 = storeOperationImpl0.getExpiration();
      assertEquals((-21), storeOperationImpl0.getFlags());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      byte[] byteArray0 = new byte[0];
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 5302);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 5302);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 5302);
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "PERFORMANCE", byteArray0, multiGetOperationCallback0);
      int int0 = concatenationOperationImpl0.getFlags();
      assertEquals(0, int0);
  }
}
