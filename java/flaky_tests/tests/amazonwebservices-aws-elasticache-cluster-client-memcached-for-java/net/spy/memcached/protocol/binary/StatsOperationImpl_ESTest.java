/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:08:05 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.ops.OperationState;
import net.spy.memcached.ops.StatsOperation;
import net.spy.memcached.protocol.binary.StatsOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StatsOperationImpl_ESTest extends StatsOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("Key ", statsOperation_Callback0);
      statsOperationImpl0.errorCode = 2732;
      byte[] byteArray0 = new byte[3];
      statsOperationImpl0.finishedPayload(byteArray0);
      assertEquals(OperationState.COMPLETE, statsOperationImpl0.getState());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl((String) null, statsOperation_Callback0);
      byte[] byteArray0 = new byte[13];
      statsOperationImpl0.keyLen = 0;
      statsOperationImpl0.keyLen = (int) (byte)1;
      statsOperationImpl0.finishedPayload(byteArray0);
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("", statsOperation_Callback0);
      byte[] byteArray0 = new byte[7];
      statsOperationImpl0.keyLen = (-1850);
      statsOperationImpl0.finishedPayload(byteArray0);
      assertFalse(statsOperationImpl0.hasErrored());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl((String) null, statsOperation_Callback0);
      byte[] byteArray0 = new byte[13];
      statsOperationImpl0.keyLen = 0;
      statsOperationImpl0.keyLen = (int) (byte)46;
      // Undeclared exception!
      try { 
        statsOperationImpl0.finishedPayload(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -33
         //
         verifyException("net.spy.memcached.protocol.binary.StatsOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl((String) null, statsOperation_Callback0);
      byte[] byteArray0 = new byte[13];
      statsOperationImpl0.keyLen = (int) (byte)5;
      statsOperationImpl0.finishedPayload(byteArray0);
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("", (StatsOperation.Callback) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        statsOperationImpl0.finishedPayload(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.StatsOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl((String) null, statsOperation_Callback0);
      statsOperationImpl0.initialize();
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
  }
}
