/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:43:51 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.ops.ConcatenationType;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.protocol.binary.ConcatenationOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConcatenationOperationImpl_ESTest extends ConcatenationOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      byte[] byteArray0 = new byte[9];
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, (byte) (-45));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, (byte)94);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 216);
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "iKco)R{", byteArray0, (byte)14, multiGetOperationCallback0);
      String string0 = concatenationOperationImpl0.toString();
      assertEquals("Cmd: 15 Opaque: 283 Key: iKco)R{ Cas: 14 Data Length: 9", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, 0);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 0);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 0);
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, (String) null, (byte[]) null, 129L, multiReplicaGetOperationCallback0);
      // Undeclared exception!
      try { 
        concatenationOperationImpl0.initialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.KeyUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.append;
      byte[] byteArray0 = new byte[1];
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "", byteArray0, (byte)0, (OperationCallback) null);
      concatenationOperationImpl0.initialize();
      assertEquals(0L, concatenationOperationImpl0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, (-142));
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, (-142));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, (-142));
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, (String) null, (byte[]) null, 3069L, multiGetsOperationCallback0);
      byte[] byteArray0 = concatenationOperationImpl0.getData();
      assertNull(byteArray0);
      assertEquals(3069L, concatenationOperationImpl0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      byte[] byteArray0 = new byte[0];
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 613);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 613);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, (-1701));
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "8[&_7T(!&\"NS\"wK@", byteArray0, (-1548L), multiGetOperationCallback0);
      byte[] byteArray1 = concatenationOperationImpl0.getData();
      assertEquals((-1548L), concatenationOperationImpl0.getCasValue());
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, 0);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 0);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 0);
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, (String) null, (byte[]) null, 129L, multiReplicaGetOperationCallback0);
      long long0 = concatenationOperationImpl0.getCasValue();
      assertEquals(129L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      byte[] byteArray0 = new byte[2];
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, (byte)0);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 141);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 15);
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "[Z;mEJbVAb!A;(Wp", byteArray0, (-320L), multiReplicaGetOperationCallback0);
      long long0 = concatenationOperationImpl0.getCasValue();
      assertEquals((-320L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcatenationOperationImpl concatenationOperationImpl0 = null;
      try {
        concatenationOperationImpl0 = new ConcatenationOperationImpl((ConcatenationType) null, "Uhandled peration factorytype ", (byte[]) null, 1697L, (OperationCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.ConcatenationOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "", (byte[]) null, 0L, (OperationCallback) null);
      // Undeclared exception!
      try { 
        concatenationOperationImpl0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.ConcatenationOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.append;
      byte[] byteArray0 = new byte[1];
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "", byteArray0, (byte)0, (OperationCallback) null);
      byte[] byteArray1 = concatenationOperationImpl0.getData();
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, 0);
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, (String) null, (byte[]) null, 0L, multiGetOperationCallback0);
      long long0 = concatenationOperationImpl0.getCasValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      byte[] byteArray0 = new byte[1];
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "", byteArray0, (byte)0, (OperationCallback) null);
      ConcatenationType concatenationType1 = concatenationOperationImpl0.getStoreType();
      assertSame(concatenationType0, concatenationType1);
  }
}
