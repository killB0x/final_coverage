/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:58:19 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.ReplicaGetOperation;
import net.spy.memcached.protocol.binary.ReplicaGetOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReplicaGetOperationImpl_ESTest extends ReplicaGetOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-1));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, (-1));
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("", 403, multiReplicaGetOperationCallback0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      // Undeclared exception!
      try { 
        replicaGetOperationImpl0.decodePayload(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.ops.MultiReplicaGetOperationCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-1));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, (-1));
      byte[] byteArray0 = new byte[7];
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("OBSERVE_TIMEOUT", (-1), multiReplicaGetOperationCallback0);
      replicaGetOperationImpl0.keyLen = 2;
      // Undeclared exception!
      try { 
        replicaGetOperationImpl0.decodePayload(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.ops.MultiReplicaGetOperationCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReplicaGetOperation.Callback replicaGetOperation_Callback0 = mock(ReplicaGetOperation.Callback.class, new ViolatedAssumptionAnswer());
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("!w7E'9+=-;&0Y;", 555, replicaGetOperation_Callback0);
      byte[] byteArray0 = new byte[9];
      replicaGetOperationImpl0.decodePayload(byteArray0);
      assertEquals(555, replicaGetOperationImpl0.getReplicaIndex());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("This operation doesn't returna cas value.", 0, (ReplicaGetOperation.Callback) null);
      int int0 = replicaGetOperationImpl0.getReplicaIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ReplicaGetOperation.Callback replicaGetOperation_Callback0 = mock(ReplicaGetOperation.Callback.class, new ViolatedAssumptionAnswer());
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("!w7E'9+=-;&0Y;", 555, replicaGetOperation_Callback0);
      OperationCallback operationCallback0 = replicaGetOperationImpl0.getCallback();
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 555);
      ReplicaGetOperationImpl replicaGetOperationImpl1 = new ReplicaGetOperationImpl("!w7E'9+=-;&0Y;", (-125), multiReplicaGetOperationCallback0);
      int int0 = replicaGetOperationImpl1.getReplicaIndex();
      assertEquals((-125), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 403);
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("4mJRX>\"'%*", 403, multiReplicaGetOperationCallback0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        replicaGetOperationImpl0.decodePayload(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 0);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, 0);
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("Using SASL auth mechanism: ", 0, multiReplicaGetOperationCallback0);
      replicaGetOperationImpl0.initialize();
      assertEquals(0, replicaGetOperationImpl0.getReplicaIndex());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ReplicaGetOperation.Callback replicaGetOperation_Callback0 = mock(ReplicaGetOperation.Callback.class, new ViolatedAssumptionAnswer());
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("!w7E'9+=-;&0Y;", 555, replicaGetOperation_Callback0);
      int int0 = replicaGetOperationImpl0.getReplicaIndex();
      assertEquals(555, int0);
  }
}
