/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:42:36 GMT 2022
 */

package net.spy.memcached.protocol;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.ops.GetOperation;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.OperationStatus;
import net.spy.memcached.protocol.GetCallbackWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GetCallbackWrapper_ESTest extends GetCallbackWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GetOperation.Callback getOperation_Callback0 = mock(GetOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetCallbackWrapper getCallbackWrapper0 = new GetCallbackWrapper(1771, getOperation_Callback0);
      getCallbackWrapper0.gotData("ip>", 1771, (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GetCallbackWrapper getCallbackWrapper0 = new GetCallbackWrapper((-3644), (GetOperation.Callback) null);
      // Undeclared exception!
      try { 
        getCallbackWrapper0.receivedStatus((OperationStatus) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.GetCallbackWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GetCallbackWrapper getCallbackWrapper0 = new GetCallbackWrapper(0, (GetOperation.Callback) null);
      // Undeclared exception!
      try { 
        getCallbackWrapper0.gotData("H~>a<d`U&O&t", 0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.GetCallbackWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, 658);
      GetCallbackWrapper getCallbackWrapper0 = new GetCallbackWrapper(658, multiGetOperationCallback0);
      // Undeclared exception!
      try { 
        getCallbackWrapper0.gotData("D5Y", 658, (byte[]) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.spy.memcached.ops.OperationCallback$MockitoMock$1897791646 cannot be cast to class net.spy.memcached.ops.GetOperation$Callback (net.spy.memcached.ops.OperationCallback$MockitoMock$1897791646 and net.spy.memcached.ops.GetOperation$Callback are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5ca526da)
         //
         verifyException("net.spy.memcached.ops.MultiGetOperationCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GetCallbackWrapper getCallbackWrapper0 = new GetCallbackWrapper(1771, (GetOperation.Callback) null);
      // Undeclared exception!
      try { 
        getCallbackWrapper0.complete();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.GetCallbackWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GetOperation.Callback getOperation_Callback0 = mock(GetOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetCallbackWrapper getCallbackWrapper0 = new GetCallbackWrapper(1, getOperation_Callback0);
      OperationStatus operationStatus0 = new OperationStatus(false, "");
      getCallbackWrapper0.receivedStatus(operationStatus0);
      assertEquals("", operationStatus0.getMessage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GetOperation.Callback getOperation_Callback0 = mock(GetOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetCallbackWrapper getCallbackWrapper0 = new GetCallbackWrapper(1, getOperation_Callback0);
      getCallbackWrapper0.complete();
      // Undeclared exception!
      try { 
        getCallbackWrapper0.complete();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GetOperation.Callback getOperation_Callback0 = mock(GetOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetCallbackWrapper getCallbackWrapper0 = new GetCallbackWrapper(1, getOperation_Callback0);
      getCallbackWrapper0.complete();
      OperationStatus operationStatus0 = new OperationStatus(false, "");
      getCallbackWrapper0.receivedStatus(operationStatus0);
      assertEquals("", operationStatus0.getMessage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GetOperation.Callback getOperation_Callback0 = mock(GetOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetCallbackWrapper getCallbackWrapper0 = new GetCallbackWrapper(1, getOperation_Callback0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(getCallbackWrapper0, 0);
      GetCallbackWrapper getCallbackWrapper1 = new GetCallbackWrapper(0, multiGetOperationCallback0);
      byte[] byteArray0 = new byte[0];
      getCallbackWrapper1.gotData("", 1, byteArray0);
      assertFalse(getCallbackWrapper0.equals((Object)getCallbackWrapper1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, 5);
      GetCallbackWrapper getCallbackWrapper0 = new GetCallbackWrapper(5, multiGetOperationCallback0);
      getCallbackWrapper0.complete();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        getCallbackWrapper0.gotData((String) null, 5, byteArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Got data for a completed wrapped op
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GetOperation.Callback getOperation_Callback0 = mock(GetOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetCallbackWrapper getCallbackWrapper0 = new GetCallbackWrapper(1, getOperation_Callback0);
      byte[] byteArray0 = new byte[6];
      getCallbackWrapper0.gotData("", 1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }
}
