/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:38:38 GMT 2022
 */

package net.spy.memcached.protocol.ascii;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.nio.channels.SocketChannel;
import java.util.Collection;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import net.spy.memcached.ClientMode;
import net.spy.memcached.DefaultConnectionFactory;
import net.spy.memcached.KetamaConnectionFactory;
import net.spy.memcached.config.NodeEndPoint;
import net.spy.memcached.ops.GetOperation;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.Operation;
import net.spy.memcached.protocol.ProxyCallback;
import net.spy.memcached.protocol.ascii.AsciiMemcachedNodeImpl;
import net.spy.memcached.protocol.ascii.AsciiOperationFactory;
import net.spy.memcached.protocol.ascii.TouchOperationImpl;
import net.spy.memcached.protocol.binary.MultiGetOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AsciiMemcachedNodeImpl_ESTest extends AsciiMemcachedNodeImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NodeEndPoint nodeEndPoint0 = new NodeEndPoint("4m)", "4m)", 346);
      InetSocketAddress inetSocketAddress0 = nodeEndPoint0.getInetSocketAddress();
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      KetamaConnectionFactory ketamaConnectionFactory0 = new KetamaConnectionFactory();
      AsciiMemcachedNodeImpl asciiMemcachedNodeImpl0 = new AsciiMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 16384, linkedBlockingQueue0, (BlockingQueue<Operation>) null, (BlockingQueue<Operation>) null, (Long) 10000L, 2500L, 0L, ketamaConnectionFactory0);
      // Undeclared exception!
      try { 
        asciiMemcachedNodeImpl0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiMemcachedNodeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NodeEndPoint nodeEndPoint0 = new NodeEndPoint("4m)", "4m)", 346);
      InetSocketAddress inetSocketAddress0 = nodeEndPoint0.getInetSocketAddress();
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      DefaultConnectionFactory defaultConnectionFactory0 = new DefaultConnectionFactory();
      AsciiMemcachedNodeImpl asciiMemcachedNodeImpl0 = new AsciiMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 680, linkedBlockingQueue0, linkedBlockingQueue0, linkedBlockingQueue0, (Long) 2500L, 1157L, 186L, defaultConnectionFactory0);
      ProxyCallback proxyCallback0 = new ProxyCallback();
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(proxyCallback0, 998);
      TouchOperationImpl touchOperationImpl0 = new TouchOperationImpl("4m)", 0, proxyCallback0);
      Collection<String> collection0 = touchOperationImpl0.getKeys();
      MultiGetOperationImpl multiGetOperationImpl0 = new MultiGetOperationImpl(collection0, multiGetOperationCallback0);
      linkedBlockingQueue0.offer((Operation) multiGetOperationImpl0);
      asciiMemcachedNodeImpl0.insertOp(multiGetOperationImpl0);
      // Undeclared exception!
      try { 
        asciiMemcachedNodeImpl0.optimize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.spy.memcached.protocol.binary.MultiGetOperationImpl cannot be cast to class net.spy.memcached.protocol.ascii.GetOperationImpl (net.spy.memcached.protocol.binary.MultiGetOperationImpl and net.spy.memcached.protocol.ascii.GetOperationImpl are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5c33c326)
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiMemcachedNodeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClientMode clientMode0 = ClientMode.Dynamic;
      KetamaConnectionFactory ketamaConnectionFactory0 = new KetamaConnectionFactory(clientMode0, 627, 627, 5000L);
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("Uh2 ZU73SRSq0S", 16384);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedBlockingDeque<Operation> linkedBlockingDeque0 = new LinkedBlockingDeque<Operation>();
      AsciiMemcachedNodeImpl asciiMemcachedNodeImpl0 = null;
      try {
        asciiMemcachedNodeImpl0 = new AsciiMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 0, linkedBlockingDeque0, linkedBlockingDeque0, linkedBlockingDeque0, (Long) null, 998, 998, ketamaConnectionFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiMemcachedNodeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NodeEndPoint nodeEndPoint0 = new NodeEndPoint("Qm)", 346);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      InetSocketAddress inetSocketAddress0 = nodeEndPoint0.getInetSocketAddress();
      KetamaConnectionFactory ketamaConnectionFactory0 = new KetamaConnectionFactory(346, 346, 346);
      AsciiMemcachedNodeImpl asciiMemcachedNodeImpl0 = null;
      try {
        asciiMemcachedNodeImpl0 = new AsciiMemcachedNodeImpl(inetSocketAddress0, socketChannel0, (-2121), linkedBlockingQueue0, linkedBlockingQueue0, linkedBlockingQueue0, (Long) ketamaConnectionFactory0.DEFAULT_MAX_RECONNECT_DELAY, 2594L, 1000L, ketamaConnectionFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-2121 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NodeEndPoint nodeEndPoint0 = new NodeEndPoint("4m)", "4m)", 346);
      InetSocketAddress inetSocketAddress0 = nodeEndPoint0.getInetSocketAddress();
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      Long long0 = new Long(346);
      DefaultConnectionFactory defaultConnectionFactory0 = new DefaultConnectionFactory();
      AsciiMemcachedNodeImpl asciiMemcachedNodeImpl0 = new AsciiMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 346, linkedBlockingQueue0, linkedBlockingQueue0, linkedBlockingQueue0, long0, 346, 346, defaultConnectionFactory0);
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      ProxyCallback proxyCallback0 = new ProxyCallback();
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(proxyCallback0, 16384);
      GetOperation getOperation0 = asciiOperationFactory0.get("4m)", (GetOperation.Callback) multiGetOperationCallback0);
      linkedBlockingQueue0.offer((Operation) getOperation0);
      getOperation0.cancel();
      asciiMemcachedNodeImpl0.insertOp(getOperation0);
      asciiMemcachedNodeImpl0.optimize();
      assertEquals(0, asciiMemcachedNodeImpl0.getContinuousTimeout());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NodeEndPoint nodeEndPoint0 = new NodeEndPoint("4m)", "4m)", 346);
      InetSocketAddress inetSocketAddress0 = nodeEndPoint0.getInetSocketAddress();
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      Long long0 = new Long(346);
      DefaultConnectionFactory defaultConnectionFactory0 = new DefaultConnectionFactory();
      AsciiMemcachedNodeImpl asciiMemcachedNodeImpl0 = new AsciiMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 346, linkedBlockingQueue0, linkedBlockingQueue0, linkedBlockingQueue0, long0, 346, 346, defaultConnectionFactory0);
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      ProxyCallback proxyCallback0 = new ProxyCallback();
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(proxyCallback0, 16384);
      GetOperation getOperation0 = asciiOperationFactory0.get("4m)", (GetOperation.Callback) multiGetOperationCallback0);
      linkedBlockingQueue0.offer((Operation) getOperation0);
      asciiMemcachedNodeImpl0.insertOp(getOperation0);
      asciiMemcachedNodeImpl0.optimize();
      assertEquals(0, asciiMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NodeEndPoint nodeEndPoint0 = new NodeEndPoint("4m)", "4m)", 346);
      InetSocketAddress inetSocketAddress0 = nodeEndPoint0.getInetSocketAddress();
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      Long long0 = new Long(346);
      DefaultConnectionFactory defaultConnectionFactory0 = new DefaultConnectionFactory();
      AsciiMemcachedNodeImpl asciiMemcachedNodeImpl0 = new AsciiMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 346, linkedBlockingQueue0, linkedBlockingQueue0, linkedBlockingQueue0, long0, 346, 346, defaultConnectionFactory0);
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      ProxyCallback proxyCallback0 = new ProxyCallback();
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(proxyCallback0, 16384);
      GetOperation getOperation0 = asciiOperationFactory0.get("4m)", (GetOperation.Callback) multiGetOperationCallback0);
      linkedBlockingQueue0.offer((Operation) getOperation0);
      asciiMemcachedNodeImpl0.optimize();
      assertEquals(0, asciiMemcachedNodeImpl0.getContinuousTimeout());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NodeEndPoint nodeEndPoint0 = new NodeEndPoint("4m)", "4m)", 346);
      InetSocketAddress inetSocketAddress0 = nodeEndPoint0.getInetSocketAddress();
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      Long long0 = new Long(346);
      DefaultConnectionFactory defaultConnectionFactory0 = new DefaultConnectionFactory();
      AsciiMemcachedNodeImpl asciiMemcachedNodeImpl0 = new AsciiMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 346, linkedBlockingQueue0, linkedBlockingQueue0, linkedBlockingQueue0, long0, 346, 346, defaultConnectionFactory0);
      asciiMemcachedNodeImpl0.optimize();
      assertFalse(asciiMemcachedNodeImpl0.isActive());
  }
}
