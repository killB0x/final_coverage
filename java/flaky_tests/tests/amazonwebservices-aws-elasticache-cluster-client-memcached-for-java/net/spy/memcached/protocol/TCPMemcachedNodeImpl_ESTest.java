/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 12:04:09 GMT 2022
 */

package net.spy.memcached.protocol;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SelectionKey;
import java.nio.channels.SocketChannel;
import java.util.Collection;
import java.util.NoSuchElementException;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import net.spy.memcached.BinaryConnectionFactory;
import net.spy.memcached.ClientMode;
import net.spy.memcached.DefaultConnectionFactory;
import net.spy.memcached.FailureMode;
import net.spy.memcached.KetamaConnectionFactory;
import net.spy.memcached.KetamaNodeKeyFormatter;
import net.spy.memcached.MemcachedConnection;
import net.spy.memcached.MemcachedNode;
import net.spy.memcached.config.NodeEndPoint;
import net.spy.memcached.ops.GetAndTouchOperation;
import net.spy.memcached.ops.GetOperation;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.Mutator;
import net.spy.memcached.ops.MutatorOperation;
import net.spy.memcached.ops.ObserveOperation;
import net.spy.memcached.ops.Operation;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.OperationState;
import net.spy.memcached.ops.ReplicaGetOperation;
import net.spy.memcached.ops.ReplicaGetsOperation;
import net.spy.memcached.ops.StatsOperation;
import net.spy.memcached.ops.TapOperation;
import net.spy.memcached.protocol.ascii.AsciiMemcachedNodeImpl;
import net.spy.memcached.protocol.ascii.AsciiOperationFactory;
import net.spy.memcached.protocol.ascii.GetAndTouchOperationImpl;
import net.spy.memcached.protocol.binary.BinaryMemcachedNodeImpl;
import net.spy.memcached.protocol.binary.BinaryOperationFactory;
import net.spy.memcached.protocol.binary.ReplicaGetOperationImpl;
import net.spy.memcached.protocol.binary.ReplicaGetsOperationImpl;
import net.spy.memcached.protocol.binary.StatsOperationImpl;
import net.spy.memcached.tapmessage.TapOpcode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TCPMemcachedNodeImpl_ESTest extends TCPMemcachedNodeImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(blockingQueue0);
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      assertNotNull(linkedBlockingQueue0);
      
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 16384);
      assertNotNull(multiReplicaGetOperationCallback0);
      
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 16384);
      assertNotNull(multiGetOperationCallback0);
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, blockingQueue0, blockingQueue0, linkedBlockingQueue0, (Long) 30L, false, 998, 1000L, binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      assertNotNull(asciiOperationFactory0);
      
      LinkedBlockingQueue<String> linkedBlockingQueue1 = new LinkedBlockingQueue<String>();
      assertNotNull(linkedBlockingQueue1);
      
      GetOperation getOperation0 = asciiOperationFactory0.get((Collection<String>) linkedBlockingQueue1, (GetOperation.Callback) multiGetOperationCallback0);
      assertNotNull(getOperation0);
      assertFalse(getOperation0.isCancelled());
      assertFalse(getOperation0.hasErrored());
      assertFalse(getOperation0.isTimedOut());
      assertFalse(getOperation0.isTimedOutUnsent());
      assertEquals(0L, getOperation0.getWriteCompleteTimestamp());
      assertEquals(0, getOperation0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, getOperation0.getState());
      
      binaryMemcachedNodeImpl0.addOp(getOperation0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(getOperation0.isCancelled());
      assertFalse(getOperation0.hasErrored());
      assertFalse(getOperation0.isTimedOut());
      assertFalse(getOperation0.isTimedOutUnsent());
      assertEquals(0L, getOperation0.getWriteCompleteTimestamp());
      assertEquals(0, getOperation0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, getOperation0.getState());
      
      String string0 = binaryMemcachedNodeImpl0.toString();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals("{QA sa=/192.168.1.42:0, #Rops=0, #Wops=0, #iq=1, topRop=null, topWop=null, toWrite=0, interested=0}", string0);
      assertNotNull(string0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(blockingQueue0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      
      BlockingQueue<Operation> blockingQueue1 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotSame(blockingQueue1, blockingQueue0);
      assertNotNull(blockingQueue1);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(blockingQueue1.equals((Object)blockingQueue0));
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 998, blockingQueue0, blockingQueue1, blockingQueue1, (Long) 30L, false, 1L, 30L, binaryConnectionFactory0);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(blockingQueue0.equals((Object)blockingQueue1));
      assertFalse(blockingQueue1.equals((Object)blockingQueue0));
      
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      assertNotNull(binaryOperationFactory0);
      
      TapOpcode tapOpcode0 = TapOpcode.SASLAUTH;
      TapOperation tapOperation0 = binaryOperationFactory0.tapAck(tapOpcode0, 16384, (OperationCallback) null);
      assertNotNull(tapOperation0);
      assertFalse(tapOperation0.isCancelled());
      assertFalse(tapOperation0.hasErrored());
      assertFalse(tapOperation0.isTimedOut());
      assertFalse(tapOperation0.isTimedOutUnsent());
      assertEquals(0L, tapOperation0.getWriteCompleteTimestamp());
      assertEquals(0, tapOperation0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, tapOperation0.getState());
      
      binaryMemcachedNodeImpl0.addOp(tapOperation0);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotSame(blockingQueue0, blockingQueue1);
      assertNotSame(blockingQueue1, blockingQueue0);
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(tapOperation0.isCancelled());
      assertFalse(tapOperation0.hasErrored());
      assertFalse(tapOperation0.isTimedOut());
      assertFalse(tapOperation0.isTimedOutUnsent());
      assertEquals(0L, tapOperation0.getWriteCompleteTimestamp());
      assertEquals(0, tapOperation0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, tapOperation0.getState());
      assertFalse(blockingQueue0.equals((Object)blockingQueue1));
      assertFalse(blockingQueue1.equals((Object)blockingQueue0));
      
      String string0 = binaryMemcachedNodeImpl0.toString();
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals("{QA sa=/192.168.1.42:19, #Rops=0, #Wops=1, #iq=1, topRop=null, topWop=Cmd: tap ack Opcode: SASLAUTH Opaque: 16384, toWrite=0, interested=0}", string0);
      assertNotSame(blockingQueue0, blockingQueue1);
      assertNotSame(blockingQueue1, blockingQueue0);
      assertNotNull(string0);
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(blockingQueue0.equals((Object)blockingQueue1));
      assertFalse(blockingQueue1.equals((Object)blockingQueue0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      //  // Unstable assertion: assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      //  // Unstable assertion: assertNotNull(socketChannel0);
      //  // Unstable assertion: assertFalse(socketChannel0.isConnectionPending());
      //  // Unstable assertion: assertEquals(13, socketChannel0.validOps());
      //  // Unstable assertion: assertTrue(socketChannel0.isBlocking());
      //  // Unstable assertion: assertTrue(socketChannel0.isOpen());
      //  // Unstable assertion: assertFalse(socketChannel0.isRegistered());
      //  // Unstable assertion: assertFalse(socketChannel0.isConnected());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      //  // Unstable assertion: assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      //  // Unstable assertion: assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      //  // Unstable assertion: assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      //  // Unstable assertion: assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      //  // Unstable assertion: assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      //  // Unstable assertion: assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      //  // Unstable assertion: assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      //  // Unstable assertion: assertNotNull(binaryConnectionFactory0);
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      //  // Unstable assertion: assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      //  // Unstable assertion: assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      //  // Unstable assertion: assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      //  // Unstable assertion: assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      //  // Unstable assertion: assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.isDaemon());
      //  // Unstable assertion: assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      //  // Unstable assertion: assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      //  // Unstable assertion: assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      //  // Unstable assertion: assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      //  // Unstable assertion: assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.getKeepAlive());
      //  // Unstable assertion: assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      //  // Unstable assertion: assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.shouldOptimize());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      //  // Unstable assertion: assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      //  // Unstable assertion: assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      //  // Unstable assertion: assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      //  // Unstable assertion: assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      //  // Unstable assertion: assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      //  // Unstable assertion: assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      //  // Unstable assertion: assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      //  // Unstable assertion: assertNotNull(blockingQueue0);
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      //  // Unstable assertion: assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      //  // Unstable assertion: assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      //  // Unstable assertion: assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      //  // Unstable assertion: assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      //  // Unstable assertion: assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.isDaemon());
      //  // Unstable assertion: assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      //  // Unstable assertion: assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      //  // Unstable assertion: assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      //  // Unstable assertion: assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      //  // Unstable assertion: assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.getKeepAlive());
      //  // Unstable assertion: assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      //  // Unstable assertion: assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.shouldOptimize());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 924, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 924, 2500L, binaryConnectionFactory0);
      //  // Unstable assertion: assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      //  // Unstable assertion: assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      //  // Unstable assertion: assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      //  // Unstable assertion: assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      //  // Unstable assertion: assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      //  // Unstable assertion: assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      //  // Unstable assertion: assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      //  // Unstable assertion: assertNotNull(binaryMemcachedNodeImpl0);
      //  // Unstable assertion: assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      //  // Unstable assertion: assertEquals(0, mockInetSocketAddress0.getPort());
      //  // Unstable assertion: assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      //  // Unstable assertion: assertFalse(mockInetSocketAddress0.isUnresolved());
      //  // Unstable assertion: assertFalse(socketChannel0.isConnectionPending());
      //  // Unstable assertion: assertEquals(13, socketChannel0.validOps());
      //  // Unstable assertion: assertTrue(socketChannel0.isBlocking());
      //  // Unstable assertion: assertTrue(socketChannel0.isOpen());
      //  // Unstable assertion: assertFalse(socketChannel0.isRegistered());
      //  // Unstable assertion: assertFalse(socketChannel0.isConnected());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      //  // Unstable assertion: assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      //  // Unstable assertion: assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      //  // Unstable assertion: assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      //  // Unstable assertion: assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      //  // Unstable assertion: assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.isDaemon());
      //  // Unstable assertion: assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      //  // Unstable assertion: assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      //  // Unstable assertion: assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      //  // Unstable assertion: assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      //  // Unstable assertion: assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.getKeepAlive());
      //  // Unstable assertion: assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      //  // Unstable assertion: assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.shouldOptimize());
      //  // Unstable assertion: assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      //  // Unstable assertion: assertFalse(binaryMemcachedNodeImpl0.isActive());
      //  // Unstable assertion: assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      //  // Unstable assertion: assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("G1mj}q.d,gD9Bxrf9", statsOperation_Callback0);
      //  // Unstable assertion: assertNotNull(statsOperationImpl0);
      //  // Unstable assertion: assertFalse(statsOperationImpl0.hasErrored());
      //  // Unstable assertion: assertFalse(statsOperationImpl0.isCancelled());
      //  // Unstable assertion: assertEquals(0, statsOperationImpl0.getCloneCount());
      //  // Unstable assertion: assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      //  // Unstable assertion: assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      //  // Unstable assertion: assertFalse(statsOperationImpl0.isTimedOut());
      //  // Unstable assertion: assertFalse(statsOperationImpl0.isTimedOutUnsent());
      
      binaryMemcachedNodeImpl0.addOp(statsOperationImpl0);
      //  // Unstable assertion: assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      //  // Unstable assertion: assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      //  // Unstable assertion: assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      //  // Unstable assertion: assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      //  // Unstable assertion: assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      //  // Unstable assertion: assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      //  // Unstable assertion: assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      //  // Unstable assertion: assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      //  // Unstable assertion: assertEquals(0, mockInetSocketAddress0.getPort());
      //  // Unstable assertion: assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      //  // Unstable assertion: assertFalse(mockInetSocketAddress0.isUnresolved());
      //  // Unstable assertion: assertFalse(socketChannel0.isConnectionPending());
      //  // Unstable assertion: assertEquals(13, socketChannel0.validOps());
      //  // Unstable assertion: assertTrue(socketChannel0.isBlocking());
      //  // Unstable assertion: assertTrue(socketChannel0.isOpen());
      //  // Unstable assertion: assertFalse(socketChannel0.isRegistered());
      //  // Unstable assertion: assertFalse(socketChannel0.isConnected());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      //  // Unstable assertion: assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      //  // Unstable assertion: assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      //  // Unstable assertion: assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      //  // Unstable assertion: assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      //  // Unstable assertion: assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.isDaemon());
      //  // Unstable assertion: assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      //  // Unstable assertion: assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      //  // Unstable assertion: assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      //  // Unstable assertion: assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      //  // Unstable assertion: assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.getKeepAlive());
      //  // Unstable assertion: assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      //  // Unstable assertion: assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.shouldOptimize());
      //  // Unstable assertion: assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      //  // Unstable assertion: assertFalse(binaryMemcachedNodeImpl0.isActive());
      //  // Unstable assertion: assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      //  // Unstable assertion: assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      //  // Unstable assertion: assertFalse(statsOperationImpl0.hasErrored());
      //  // Unstable assertion: assertFalse(statsOperationImpl0.isCancelled());
      //  // Unstable assertion: assertEquals(0, statsOperationImpl0.getCloneCount());
      //  // Unstable assertion: assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      //  // Unstable assertion: assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      //  // Unstable assertion: assertFalse(statsOperationImpl0.isTimedOut());
      //  // Unstable assertion: assertFalse(statsOperationImpl0.isTimedOutUnsent());
      
      String string0 = binaryMemcachedNodeImpl0.toString();
      //  // Unstable assertion: assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      //  // Unstable assertion: assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      //  // Unstable assertion: assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      //  // Unstable assertion: assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      //  // Unstable assertion: assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      //  // Unstable assertion: assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      //  // Unstable assertion: assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      //  // Unstable assertion: assertEquals("{QA sa=/192.168.1.42:0, #Rops=1, #Wops=1, #iq=1, topRop=Cmd: 16 Opaque: 370, topWop=Cmd: 16 Opaque: 370, toWrite=0, interested=0}", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      //  // Unstable assertion: assertEquals(0, mockInetSocketAddress0.getPort());
      //  // Unstable assertion: assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      //  // Unstable assertion: assertFalse(mockInetSocketAddress0.isUnresolved());
      //  // Unstable assertion: assertFalse(socketChannel0.isConnectionPending());
      //  // Unstable assertion: assertEquals(13, socketChannel0.validOps());
      //  // Unstable assertion: assertTrue(socketChannel0.isBlocking());
      //  // Unstable assertion: assertTrue(socketChannel0.isOpen());
      //  // Unstable assertion: assertFalse(socketChannel0.isRegistered());
      //  // Unstable assertion: assertFalse(socketChannel0.isConnected());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      //  // Unstable assertion: assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      //  // Unstable assertion: assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      //  // Unstable assertion: assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      //  // Unstable assertion: assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      //  // Unstable assertion: assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.isDaemon());
      //  // Unstable assertion: assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      //  // Unstable assertion: assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      //  // Unstable assertion: assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      //  // Unstable assertion: assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      //  // Unstable assertion: assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.getKeepAlive());
      //  // Unstable assertion: assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      //  // Unstable assertion: assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      //  // Unstable assertion: assertFalse(binaryConnectionFactory0.shouldOptimize());
      //  // Unstable assertion: assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      //  // Unstable assertion: assertFalse(binaryMemcachedNodeImpl0.isActive());
      //  // Unstable assertion: assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      //  // Unstable assertion: assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals(0, inetSocketAddress0.getPort());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      
      LinkedBlockingDeque<Operation> linkedBlockingDeque0 = new LinkedBlockingDeque<Operation>();
      assertNotNull(linkedBlockingDeque0);
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 782, linkedBlockingDeque0, blockingQueue0, linkedBlockingDeque0, (Long) binaryConnectionFactory0.DEFAULT_AUTH_WAIT_TIME, false, 998, (-300L), binaryConnectionFactory0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals(0, inetSocketAddress0.getPort());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.insertOp((Operation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals(0, inetSocketAddress0.getPort());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isBlocking());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      assertNotNull(linkedTransferQueue0);
      
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      assertNotNull(linkedBlockingQueue0);
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 998, linkedTransferQueue0, linkedBlockingQueue0, linkedTransferQueue0, (Long) 10000L, true, 1L, 0, binaryConnectionFactory0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("", statsOperation_Callback0);
      assertNotNull(statsOperationImpl0);
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
      assertEquals(0, statsOperationImpl0.getCloneCount());
      assertFalse(statsOperationImpl0.isTimedOut());
      assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(statsOperationImpl0.hasErrored());
      assertFalse(statsOperationImpl0.isCancelled());
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.addOp(statsOperationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.TCPMemcachedNodeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      
      BlockingQueue<Operation> blockingQueue1 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotSame(blockingQueue1, blockingQueue0);
      assertNotNull(blockingQueue1);
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(blockingQueue1.equals((Object)blockingQueue0));
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 16384, blockingQueue1, blockingQueue0, blockingQueue0, (Long) binaryConnectionFactory0.DEFAULT_OPERATION_TIMEOUT, true, (-1L), 2500L, binaryConnectionFactory0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(blockingQueue0.equals((Object)blockingQueue1));
      assertFalse(blockingQueue1.equals((Object)blockingQueue0));
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.removeCurrentReadOp();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(blockingQueue0);
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      
      BlockingQueue<Operation> blockingQueue1 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(blockingQueue1);
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(blockingQueue1.equals((Object)blockingQueue0));
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, blockingQueue1, blockingQueue1, blockingQueue0, (Long) binaryConnectionFactory0.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME, true, 0L, 1000L, binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(blockingQueue0.equals((Object)blockingQueue1));
      assertFalse(blockingQueue1.equals((Object)blockingQueue0));
      
      Collection<Operation> collection0 = binaryMemcachedNodeImpl0.destroyInputQueue();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(collection0);
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(blockingQueue0.equals((Object)blockingQueue1));
      assertFalse(blockingQueue1.equals((Object)blockingQueue0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertEquals(0, inetSocketAddress0.getPort());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      
      MemcachedNode memcachedNode0 = binaryConnectionFactory0.createMemcachedNode(inetSocketAddress0, socketChannel0, 2321);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(memcachedNode0);
      assertEquals(0, inetSocketAddress0.getPort());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(1, memcachedNode0.getReconnectCount());
      assertEquals(0, memcachedNode0.getContinuousTimeout());
      assertFalse(memcachedNode0.isActive());
      assertEquals(0, memcachedNode0.getBytesRemainingToWrite());
      
      memcachedNode0.copyInputQueue();
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(0, inetSocketAddress0.getPort());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(1, memcachedNode0.getReconnectCount());
      assertEquals(0, memcachedNode0.getContinuousTimeout());
      assertFalse(memcachedNode0.isActive());
      assertEquals(0, memcachedNode0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      assertNotNull(linkedTransferQueue0);
      
      ClientMode clientMode0 = ClientMode.Dynamic;
      KetamaConnectionFactory ketamaConnectionFactory0 = new KetamaConnectionFactory(clientMode0, 19, 0, 924);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(ketamaConnectionFactory0);
      assertFalse(ketamaConnectionFactory0.shouldOptimize());
      assertEquals(0, ketamaConnectionFactory0.getReadBufSize());
      assertTrue(ketamaConnectionFactory0.isDefaultExecutorService());
      assertFalse(ketamaConnectionFactory0.isDaemon());
      assertEquals(998, ketamaConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(ketamaConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, ketamaConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Dynamic, ketamaConnectionFactory0.getClientMode());
      assertEquals(30L, ketamaConnectionFactory0.getMaxReconnectDelay());
      assertFalse(ketamaConnectionFactory0.useNagleAlgorithm());
      assertEquals(19, ketamaConnectionFactory0.getOpQueueLen());
      assertEquals(1000L, ketamaConnectionFactory0.getAuthWaitTime());
      assertNull(ketamaConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, ketamaConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(KetamaNodeKeyFormatter.Format.SPYMEMCACHED, ketamaConnectionFactory0.getKetamaNodeKeyFormat());
      assertEquals(2500L, ketamaConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, ketamaConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(ketamaConnectionFactory0.skipTlsHostnameVerification());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = null;
      try {
        binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, (-2103), linkedTransferQueue0, (BlockingQueue<Operation>) null, (BlockingQueue<Operation>) null, (Long) ketamaConnectionFactory0.DEFAULT_AUTH_WAIT_TIME, true, 998, 19, ketamaConnectionFactory0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid buffer size: -2103
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 924, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 924, 2500L, binaryConnectionFactory0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      assertNotNull(binaryOperationFactory0);
      
      Mutator mutator0 = Mutator.decr;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 0);
      assertNotNull(multiReplicaGetOperationCallback0);
      
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, 256);
      assertNotNull(multiGetsOperationCallback0);
      
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 16384);
      assertNotNull(multiGetOperationCallback0);
      
      MutatorOperation mutatorOperation0 = binaryOperationFactory0.mutate(mutator0, "", (-1264L), 2500L, 924, multiGetOperationCallback0);
      assertNotNull(mutatorOperation0);
      assertEquals((-1264L), mutatorOperation0.getBy());
      assertEquals(924, mutatorOperation0.getExpiration());
      assertEquals(0L, mutatorOperation0.getWriteCompleteTimestamp());
      assertEquals(2500L, mutatorOperation0.getDefault());
      assertEquals(0, mutatorOperation0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, mutatorOperation0.getState());
      assertFalse(mutatorOperation0.hasErrored());
      assertFalse(mutatorOperation0.isTimedOut());
      assertFalse(mutatorOperation0.isTimedOutUnsent());
      assertFalse(mutatorOperation0.isCancelled());
      assertEquals(Mutator.decr, mutatorOperation0.getType());
      
      binaryMemcachedNodeImpl0.insertOp(mutatorOperation0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals((-1264L), mutatorOperation0.getBy());
      assertEquals(924, mutatorOperation0.getExpiration());
      assertEquals(0L, mutatorOperation0.getWriteCompleteTimestamp());
      assertEquals(2500L, mutatorOperation0.getDefault());
      assertEquals(0, mutatorOperation0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, mutatorOperation0.getState());
      assertFalse(mutatorOperation0.hasErrored());
      assertFalse(mutatorOperation0.isTimedOut());
      assertFalse(mutatorOperation0.isTimedOutUnsent());
      assertFalse(mutatorOperation0.isCancelled());
      assertEquals(Mutator.decr, mutatorOperation0.getType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory((ClientMode) null);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryConnectionFactory0);
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(blockingQueue0);
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      assertNotNull(linkedBlockingQueue0);
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, blockingQueue0, linkedBlockingQueue0, linkedBlockingQueue0, (Long) 10000L, false, 10000L, 10000L, binaryConnectionFactory0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      assertNotNull(binaryOperationFactory0);
      
      TapOpcode tapOpcode0 = TapOpcode.END_CHECKPOINT;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 16384);
      assertNotNull(multiReplicaGetOperationCallback0);
      
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 16384);
      assertNotNull(multiGetOperationCallback0);
      
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 16384);
      assertNotNull(multiGetsOperationCallback0);
      
      TapOperation tapOperation0 = binaryOperationFactory0.tapAck(tapOpcode0, 924, multiGetsOperationCallback0);
      assertNotNull(tapOperation0);
      assertFalse(tapOperation0.isCancelled());
      assertFalse(tapOperation0.isTimedOutUnsent());
      assertEquals(0, tapOperation0.getCloneCount());
      assertEquals(0L, tapOperation0.getWriteCompleteTimestamp());
      assertFalse(tapOperation0.isTimedOut());
      assertEquals(OperationState.WRITE_QUEUED, tapOperation0.getState());
      assertFalse(tapOperation0.hasErrored());
      
      binaryMemcachedNodeImpl0.addOp(tapOperation0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(tapOperation0.isCancelled());
      assertFalse(tapOperation0.isTimedOutUnsent());
      assertEquals(0, tapOperation0.getCloneCount());
      assertEquals(0L, tapOperation0.getWriteCompleteTimestamp());
      assertFalse(tapOperation0.isTimedOut());
      assertEquals(OperationState.WRITE_QUEUED, tapOperation0.getState());
      assertFalse(tapOperation0.hasErrored());
      
      Operation operation0 = binaryMemcachedNodeImpl0.removeCurrentWriteOp();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertSame(operation0, tapOperation0);
      assertNotNull(operation0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0L, operation0.getWriteCompleteTimestamp());
      assertEquals(OperationState.WRITE_QUEUED, operation0.getState());
      assertFalse(operation0.isCancelled());
      assertFalse(operation0.hasErrored());
      assertEquals(0, operation0.getCloneCount());
      assertFalse(operation0.isTimedOut());
      assertFalse(operation0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("", 998, getAndTouchOperation_Callback0, "");
      assertNotNull(getAndTouchOperationImpl0);
      assertFalse(getAndTouchOperationImpl0.isTimedOut());
      assertEquals(0L, getAndTouchOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(getAndTouchOperationImpl0.isTimedOutUnsent());
      assertEquals(998, getAndTouchOperationImpl0.getExpiration());
      assertEquals(0, getAndTouchOperationImpl0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, getAndTouchOperationImpl0.getState());
      assertFalse(getAndTouchOperationImpl0.isCancelled());
      assertFalse(getAndTouchOperationImpl0.hasErrored());
      
      getAndTouchOperationImpl0.setCloneCount(1280);
      assertFalse(getAndTouchOperationImpl0.isTimedOut());
      assertEquals(0L, getAndTouchOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(getAndTouchOperationImpl0.isTimedOutUnsent());
      assertEquals(998, getAndTouchOperationImpl0.getExpiration());
      assertEquals(1280, getAndTouchOperationImpl0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, getAndTouchOperationImpl0.getState());
      assertFalse(getAndTouchOperationImpl0.isCancelled());
      assertFalse(getAndTouchOperationImpl0.hasErrored());
      
      LinkedBlockingDeque<Operation> linkedBlockingDeque0 = new LinkedBlockingDeque<Operation>();
      assertNotNull(linkedBlockingDeque0);
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 2598, linkedBlockingDeque0, linkedBlockingDeque0, linkedBlockingDeque0, (Long) binaryConnectionFactory0.DEFAULT_AUTH_WAIT_TIME, false, 16384, 1000L, binaryConnectionFactory0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      
      binaryMemcachedNodeImpl0.addOp(getAndTouchOperationImpl0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(getAndTouchOperationImpl0.isTimedOut());
      assertEquals(0L, getAndTouchOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(getAndTouchOperationImpl0.isTimedOutUnsent());
      assertEquals(998, getAndTouchOperationImpl0.getExpiration());
      assertEquals(1280, getAndTouchOperationImpl0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, getAndTouchOperationImpl0.getState());
      assertFalse(getAndTouchOperationImpl0.isCancelled());
      assertFalse(getAndTouchOperationImpl0.hasErrored());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      
      GetAndTouchOperationImpl getAndTouchOperationImpl1 = (GetAndTouchOperationImpl)binaryMemcachedNodeImpl0.removeCurrentWriteOp();
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertSame(getAndTouchOperationImpl1, getAndTouchOperationImpl0);
      assertNotNull(getAndTouchOperationImpl1);
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(getAndTouchOperationImpl1.hasErrored());
      assertEquals(0L, getAndTouchOperationImpl1.getWriteCompleteTimestamp());
      assertFalse(getAndTouchOperationImpl1.isTimedOutUnsent());
      assertFalse(getAndTouchOperationImpl1.isTimedOut());
      assertEquals(1280, getAndTouchOperationImpl1.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, getAndTouchOperationImpl1.getState());
      assertEquals(998, getAndTouchOperationImpl1.getExpiration());
      assertFalse(getAndTouchOperationImpl1.isCancelled());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      assertNotNull(linkedBlockingQueue0);
      
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      assertNotNull(binaryOperationFactory0);
      
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 16384);
      assertNotNull(multiReplicaGetOperationCallback0);
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 2, linkedBlockingQueue0, linkedBlockingQueue0, linkedBlockingQueue0, (Long) 30L, true, 924, 16384, binaryConnectionFactory0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      ReplicaGetOperation replicaGetOperation0 = binaryOperationFactory0.replicaGet(">wtVbT[:\fQX", 998, multiReplicaGetOperationCallback0);
      assertNotNull(replicaGetOperation0);
      assertFalse(replicaGetOperation0.isTimedOut());
      assertEquals(0L, replicaGetOperation0.getWriteCompleteTimestamp());
      assertEquals(0, replicaGetOperation0.getCloneCount());
      assertEquals(998, replicaGetOperation0.getReplicaIndex());
      assertFalse(replicaGetOperation0.isTimedOutUnsent());
      assertFalse(replicaGetOperation0.hasErrored());
      assertFalse(replicaGetOperation0.isCancelled());
      assertEquals(OperationState.WRITE_QUEUED, replicaGetOperation0.getState());
      
      boolean boolean0 = linkedBlockingQueue0.add(replicaGetOperation0);
      assertTrue(boolean0);
      assertFalse(replicaGetOperation0.isTimedOut());
      assertEquals(0L, replicaGetOperation0.getWriteCompleteTimestamp());
      assertEquals(0, replicaGetOperation0.getCloneCount());
      assertEquals(998, replicaGetOperation0.getReplicaIndex());
      assertFalse(replicaGetOperation0.isTimedOutUnsent());
      assertFalse(replicaGetOperation0.hasErrored());
      assertFalse(replicaGetOperation0.isCancelled());
      assertEquals(OperationState.WRITE_QUEUED, replicaGetOperation0.getState());
      
      ReplicaGetOperationImpl replicaGetOperationImpl0 = (ReplicaGetOperationImpl)binaryMemcachedNodeImpl0.removeCurrentReadOp();
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertSame(replicaGetOperationImpl0, replicaGetOperation0);
      assertNotNull(replicaGetOperationImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(replicaGetOperationImpl0.hasErrored());
      assertEquals(OperationState.WRITE_QUEUED, replicaGetOperationImpl0.getState());
      assertFalse(replicaGetOperationImpl0.isCancelled());
      assertEquals(0L, replicaGetOperationImpl0.getWriteCompleteTimestamp());
      assertEquals(0, replicaGetOperationImpl0.getCloneCount());
      assertEquals(998, replicaGetOperationImpl0.getReplicaIndex());
      assertFalse(replicaGetOperationImpl0.isTimedOutUnsent());
      assertFalse(replicaGetOperationImpl0.isTimedOut());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory((ClientMode) null);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(binaryConnectionFactory0);
      assertNull(binaryConnectionFactory0.getClientMode());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(blockingQueue0);
      assertNull(binaryConnectionFactory0.getClientMode());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      assertNotNull(linkedBlockingQueue0);
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, blockingQueue0, linkedBlockingQueue0, linkedBlockingQueue0, (Long) 10000L, false, 10000L, 10000L, binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertNull(binaryConnectionFactory0.getClientMode());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      assertNotNull(binaryOperationFactory0);
      
      TapOpcode tapOpcode0 = TapOpcode.END_CHECKPOINT;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 16384);
      assertNotNull(multiReplicaGetOperationCallback0);
      
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 16384);
      assertNotNull(multiGetOperationCallback0);
      
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 16384);
      assertNotNull(multiGetsOperationCallback0);
      
      TapOperation tapOperation0 = binaryOperationFactory0.tapAck(tapOpcode0, 924, multiGetsOperationCallback0);
      assertNotNull(tapOperation0);
      assertFalse(tapOperation0.isTimedOutUnsent());
      assertFalse(tapOperation0.isCancelled());
      assertEquals(OperationState.WRITE_QUEUED, tapOperation0.getState());
      assertFalse(tapOperation0.hasErrored());
      assertEquals(0L, tapOperation0.getWriteCompleteTimestamp());
      assertFalse(tapOperation0.isTimedOut());
      assertEquals(0, tapOperation0.getCloneCount());
      
      binaryMemcachedNodeImpl0.addOp(tapOperation0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertNull(binaryConnectionFactory0.getClientMode());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertFalse(tapOperation0.isTimedOutUnsent());
      assertFalse(tapOperation0.isCancelled());
      assertEquals(OperationState.WRITE_QUEUED, tapOperation0.getState());
      assertFalse(tapOperation0.hasErrored());
      assertEquals(0L, tapOperation0.getWriteCompleteTimestamp());
      assertFalse(tapOperation0.isTimedOut());
      assertEquals(0, tapOperation0.getCloneCount());
      
      Operation operation0 = binaryMemcachedNodeImpl0.getCurrentWriteOp();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertSame(operation0, tapOperation0);
      assertNotNull(operation0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertNull(binaryConnectionFactory0.getClientMode());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertFalse(operation0.isCancelled());
      assertFalse(operation0.isTimedOutUnsent());
      assertEquals(OperationState.WRITE_QUEUED, operation0.getState());
      assertFalse(operation0.hasErrored());
      assertEquals(0L, operation0.getWriteCompleteTimestamp());
      assertFalse(operation0.isTimedOut());
      assertEquals(0, operation0.getCloneCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 924, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 924, 2500L, binaryConnectionFactory0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("G1mj}q.d,gD9Bxrf9", statsOperation_Callback0);
      assertNotNull(statsOperationImpl0);
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      assertEquals(0, statsOperationImpl0.getCloneCount());
      assertFalse(statsOperationImpl0.isCancelled());
      assertFalse(statsOperationImpl0.hasErrored());
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
      assertFalse(statsOperationImpl0.isTimedOut());
      assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      
      binaryMemcachedNodeImpl0.addOp(statsOperationImpl0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      assertEquals(0, statsOperationImpl0.getCloneCount());
      assertFalse(statsOperationImpl0.isCancelled());
      assertFalse(statsOperationImpl0.hasErrored());
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
      assertFalse(statsOperationImpl0.isTimedOut());
      assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      
      Operation operation0 = binaryMemcachedNodeImpl0.getCurrentReadOp();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertSame(operation0, statsOperationImpl0);
      assertNotNull(operation0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(operation0.hasErrored());
      assertFalse(operation0.isCancelled());
      assertEquals(OperationState.WRITE_QUEUED, operation0.getState());
      assertEquals(0, operation0.getCloneCount());
      assertEquals(0L, operation0.getWriteCompleteTimestamp());
      assertFalse(operation0.isTimedOut());
      assertFalse(operation0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(blockingQueue0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, true, 19, 16384, binaryConnectionFactory0);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.writeSome();
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNotNull(blockingQueue0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      
      socketChannel0.close();
      assertFalse(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 272, blockingQueue0, blockingQueue0, blockingQueue0, (Long) binaryConnectionFactory0.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME, true, 1000L, 10000L, binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      
      try { 
        binaryMemcachedNodeImpl0.writeSome();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 2500L, false, 998, 30L, binaryConnectionFactory0);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.transitionWriteItem();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNotNull(blockingQueue0);
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 924, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 924, 2500L, binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.setNodeEndPoint((NodeEndPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.TCPMemcachedNodeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      
      LinkedBlockingDeque<Operation> linkedBlockingDeque0 = new LinkedBlockingDeque<Operation>();
      assertNotNull(linkedBlockingDeque0);
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, linkedBlockingDeque0, linkedBlockingDeque0, linkedBlockingDeque0, (Long) 10000L, true, (-43L), 16384, binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      
      NodeEndPoint nodeEndPoint0 = new NodeEndPoint((String) null, 4);
      assertNotNull(nodeEndPoint0);
      assertNull(nodeEndPoint0.getHostName());
      assertEquals(4, nodeEndPoint0.getPort());
      assertNull(nodeEndPoint0.getIpAddress());
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.setNodeEndPoint(nodeEndPoint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(6);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      
      SynchronousQueue<Operation> synchronousQueue0 = new SynchronousQueue<Operation>(true);
      assertNotNull(synchronousQueue0);
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 741, synchronousQueue0, synchronousQueue0, synchronousQueue0, (Long) binaryConnectionFactory0.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME, true, 16384, (-751L), binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(6, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:6", mockInetSocketAddress0.toString());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      
      ReplicaGetsOperation.Callback replicaGetsOperation_Callback0 = mock(ReplicaGetsOperation.Callback.class, new ViolatedAssumptionAnswer());
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("null", 6, replicaGetsOperation_Callback0);
      assertNotNull(replicaGetsOperationImpl0);
      assertFalse(replicaGetsOperationImpl0.hasErrored());
      assertEquals(OperationState.WRITE_QUEUED, replicaGetsOperationImpl0.getState());
      assertEquals(6, replicaGetsOperationImpl0.getReplicaIndex());
      assertFalse(replicaGetsOperationImpl0.isCancelled());
      assertEquals(0L, replicaGetsOperationImpl0.getWriteCompleteTimestamp());
      assertEquals(0, replicaGetsOperationImpl0.getCloneCount());
      assertFalse(replicaGetsOperationImpl0.isTimedOut());
      assertFalse(replicaGetsOperationImpl0.isTimedOutUnsent());
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.insertOp(replicaGetsOperationImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue full
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      
      PriorityBlockingQueue<Operation> priorityBlockingQueue0 = new PriorityBlockingQueue<Operation>();
      assertNotNull(priorityBlockingQueue0);
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 2, priorityBlockingQueue0, priorityBlockingQueue0, priorityBlockingQueue0, (Long) 10000L, false, 10000L, 10000L, binaryConnectionFactory0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, 8);
      assertNotNull(multiGetOperationCallback0);
      
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      assertNotNull(asciiOperationFactory0);
      
      GetOperation getOperation0 = asciiOperationFactory0.get("", (GetOperation.Callback) multiGetOperationCallback0);
      assertNotNull(getOperation0);
      assertFalse(getOperation0.isTimedOutUnsent());
      assertFalse(getOperation0.hasErrored());
      assertFalse(getOperation0.isCancelled());
      assertFalse(getOperation0.isTimedOut());
      assertEquals(0L, getOperation0.getWriteCompleteTimestamp());
      assertEquals(OperationState.WRITE_QUEUED, getOperation0.getState());
      assertEquals(0, getOperation0.getCloneCount());
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.addOp(getOperation0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.spy.memcached.protocol.ascii.GetOperationImpl cannot be cast to class java.lang.Comparable (net.spy.memcached.protocol.ascii.GetOperationImpl is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @a4d4408; java.lang.Comparable is in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.concurrent.PriorityBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(blockingQueue0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, true, 19, 16384, binaryConnectionFactory0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      
      binaryMemcachedNodeImpl0.setupForAuth();
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(12);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertNotNull(blockingQueue0);
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 12, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 12, 16384, binaryConnectionFactory0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(12, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:12", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      
      binaryMemcachedNodeImpl0.setupForAuth();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(12, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:12", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(blockingQueue0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      
      socketChannel0.close();
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 272, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 30L, true, 1000L, 10000L, binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      
      binaryMemcachedNodeImpl0.setChannel(socketChannel0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertNotNull(blockingQueue0);
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 30L, true, 16384, 998, binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.setChannel(socketChannel0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Attempting to overwrite channel
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertEquals(0, inetSocketAddress0.getPort());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryConnectionFactory0);
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(blockingQueue0);
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 926, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 926, 2500L, binaryConnectionFactory0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(0, inetSocketAddress0.getPort());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      boolean boolean0 = binaryMemcachedNodeImpl0.isActive();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertFalse(boolean0);
      assertEquals(0, inetSocketAddress0.getPort());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(blockingQueue0);
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 1000L, false, 16384, 10000L, binaryConnectionFactory0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl((String) null, statsOperation_Callback0);
      assertNotNull(statsOperationImpl0);
      assertEquals(0, statsOperationImpl0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(statsOperationImpl0.hasErrored());
      assertFalse(statsOperationImpl0.isCancelled());
      assertFalse(statsOperationImpl0.isTimedOut());
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
      
      binaryMemcachedNodeImpl0.addOp(statsOperationImpl0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, statsOperationImpl0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(statsOperationImpl0.hasErrored());
      assertFalse(statsOperationImpl0.isCancelled());
      assertFalse(statsOperationImpl0.isTimedOut());
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
      
      boolean boolean0 = binaryMemcachedNodeImpl0.hasWriteOp();
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertTrue(boolean0);
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 926, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 926, 2500L, binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      boolean boolean0 = binaryMemcachedNodeImpl0.hasWriteOp();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertFalse(boolean0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 10);
      assertNotNull(inetSocketAddress0);
      assertEquals(10, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9:10", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryConnectionFactory0);
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(blockingQueue0);
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 926, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 926, 2500L, binaryConnectionFactory0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(10, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9:10", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      
      boolean boolean0 = binaryMemcachedNodeImpl0.hasReadOp();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertFalse(boolean0);
      assertEquals(10, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9:10", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 924, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 924, 2500L, binaryConnectionFactory0);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("G1mj}q.d,gD9Bxrf9", statsOperation_Callback0);
      assertNotNull(statsOperationImpl0);
      assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(statsOperationImpl0.isTimedOut());
      assertFalse(statsOperationImpl0.hasErrored());
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
      assertFalse(statsOperationImpl0.isCancelled());
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      assertEquals(0, statsOperationImpl0.getCloneCount());
      
      binaryMemcachedNodeImpl0.addOp(statsOperationImpl0);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(statsOperationImpl0.isTimedOut());
      assertFalse(statsOperationImpl0.hasErrored());
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
      assertFalse(statsOperationImpl0.isCancelled());
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      assertEquals(0, statsOperationImpl0.getCloneCount());
      
      boolean boolean0 = binaryMemcachedNodeImpl0.hasReadOp();
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertTrue(boolean0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(blockingQueue0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, true, 19, 16384, binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.removeCurrentWriteOp();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(blockingQueue0);
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 926, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 926, 2500L, binaryConnectionFactory0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      Operation operation0 = binaryMemcachedNodeImpl0.getCurrentWriteOp();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNull(operation0);
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 2500L, false, 998, 30L, binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      assertNotNull(binaryOperationFactory0);
      
      ObserveOperation observeOperation0 = binaryOperationFactory0.observe("%qfmo:)tV[];E{N6", 19, 16384, (ObserveOperation.Callback) null);
      assertNotNull(observeOperation0);
      assertEquals(0, observeOperation0.getCloneCount());
      assertFalse(observeOperation0.isTimedOutUnsent());
      assertEquals(0L, observeOperation0.getWriteCompleteTimestamp());
      assertEquals(OperationState.WRITE_QUEUED, observeOperation0.getState());
      assertFalse(observeOperation0.isCancelled());
      assertFalse(observeOperation0.isTimedOut());
      assertEquals(16384, observeOperation0.getIndex());
      assertEquals(19L, observeOperation0.getCasValue());
      assertFalse(observeOperation0.hasErrored());
      
      binaryMemcachedNodeImpl0.addOp(observeOperation0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, observeOperation0.getCloneCount());
      assertFalse(observeOperation0.isTimedOutUnsent());
      assertEquals(0L, observeOperation0.getWriteCompleteTimestamp());
      assertEquals(OperationState.WRITE_QUEUED, observeOperation0.getState());
      assertFalse(observeOperation0.isCancelled());
      assertFalse(observeOperation0.isTimedOut());
      assertEquals(16384, observeOperation0.getIndex());
      assertEquals(19L, observeOperation0.getCasValue());
      assertFalse(observeOperation0.hasErrored());
      
      binaryMemcachedNodeImpl0.transitionWriteItem();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(blockingQueue0);
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 1919, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 30L, true, 0L, 1198L, binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("%DO:0;ytXG>i=bkLFrM", (StatsOperation.Callback) null);
      assertNotNull(statsOperationImpl0);
      assertFalse(statsOperationImpl0.isCancelled());
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      assertFalse(statsOperationImpl0.hasErrored());
      assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(statsOperationImpl0.isTimedOut());
      assertEquals(0, statsOperationImpl0.getCloneCount());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl1 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 0L, 3799L, binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryMemcachedNodeImpl1);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(1, binaryMemcachedNodeImpl1.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl1.isActive());
      assertEquals(0, binaryMemcachedNodeImpl1.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl1.getBytesRemainingToWrite());
      assertFalse(binaryMemcachedNodeImpl1.equals((Object)binaryMemcachedNodeImpl0));
      
      binaryMemcachedNodeImpl1.addOp(statsOperationImpl0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotSame(binaryMemcachedNodeImpl1, binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(statsOperationImpl0.isCancelled());
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      assertFalse(statsOperationImpl0.hasErrored());
      assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(statsOperationImpl0.isTimedOut());
      assertEquals(0, statsOperationImpl0.getCloneCount());
      assertEquals(1, binaryMemcachedNodeImpl1.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl1.isActive());
      assertEquals(0, binaryMemcachedNodeImpl1.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl1.getBytesRemainingToWrite());
      assertFalse(binaryMemcachedNodeImpl1.equals((Object)binaryMemcachedNodeImpl0));
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.setupResend();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.BaseOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryConnectionFactory0);
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(blockingQueue0);
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, true, 19, 16384, binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      
      binaryMemcachedNodeImpl0.setupResend();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("", 2328);
      assertNotNull(inetSocketAddress0);
      assertEquals(":2328", inetSocketAddress0.toString());
      assertEquals(2328, inetSocketAddress0.getPort());
      assertEquals("", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(2253, 2253);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2253, binaryConnectionFactory0.getOpQueueLen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2253, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      assertNotNull(linkedBlockingQueue0);
      
      AsciiMemcachedNodeImpl asciiMemcachedNodeImpl0 = new AsciiMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 2321, linkedBlockingQueue0, linkedBlockingQueue0, linkedBlockingQueue0, (Long) binaryConnectionFactory0.DEFAULT_AUTH_WAIT_TIME, 2253, 3057L, binaryConnectionFactory0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(asciiMemcachedNodeImpl0);
      assertEquals(":2328", inetSocketAddress0.toString());
      assertEquals(2328, inetSocketAddress0.getPort());
      assertEquals("", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2253, binaryConnectionFactory0.getOpQueueLen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2253, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(asciiMemcachedNodeImpl0.isActive());
      assertEquals(0, asciiMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, asciiMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, asciiMemcachedNodeImpl0.getReconnectCount());
      
      ByteBuffer byteBuffer0 = asciiMemcachedNodeImpl0.getRbuf();
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(byteBuffer0);
      assertEquals(":2328", inetSocketAddress0.toString());
      assertEquals(2328, inetSocketAddress0.getPort());
      assertEquals("", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(2253, binaryConnectionFactory0.getOpQueueLen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2253, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(asciiMemcachedNodeImpl0.isActive());
      assertEquals(0, asciiMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, asciiMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, asciiMemcachedNodeImpl0.getReconnectCount());
      assertEquals(2321, byteBuffer0.remaining());
      assertEquals(2321, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=2321 cap=2321]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(2321, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("", 10);
      assertNotNull(inetSocketAddress0);
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals(":10", inetSocketAddress0.toString());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(10, inetSocketAddress0.getPort());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 926, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 1000L, false, (-1719L), (-1719L), binaryConnectionFactory0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals(":10", inetSocketAddress0.toString());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(10, inetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      SocketChannel socketChannel1 = binaryMemcachedNodeImpl0.getChannel();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertSame(socketChannel0, socketChannel1);
      assertSame(socketChannel1, socketChannel0);
      assertNotNull(socketChannel1);
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals(":10", inetSocketAddress0.toString());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(10, inetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(socketChannel1.isConnectionPending());
      assertTrue(socketChannel1.isBlocking());
      assertEquals(13, socketChannel1.validOps());
      assertTrue(socketChannel1.isOpen());
      assertFalse(socketChannel1.isRegistered());
      assertFalse(socketChannel1.isConnected());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(blockingQueue0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 926, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 926, 2500L, binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      
      SelectionKey selectionKey0 = binaryMemcachedNodeImpl0.getSk();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNull(selectionKey0);
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertEquals(0, inetSocketAddress0.getPort());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 924, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 924, 2500L, binaryConnectionFactory0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(0, inetSocketAddress0.getPort());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      
      InetSocketAddress inetSocketAddress1 = (InetSocketAddress)binaryMemcachedNodeImpl0.getSocketAddress();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertSame(inetSocketAddress0, inetSocketAddress1);
      assertSame(inetSocketAddress1, inetSocketAddress0);
      assertNotNull(inetSocketAddress1);
      assertEquals(0, inetSocketAddress0.getPort());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertTrue(inetSocketAddress1.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress1.getHostString());
      assertEquals(0, inetSocketAddress1.getPort());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress1.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      assertNotNull(linkedBlockingQueue0);
      
      KetamaConnectionFactory ketamaConnectionFactory0 = new KetamaConnectionFactory(13, 998, 16384);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(ketamaConnectionFactory0);
      assertEquals(60000L, ketamaConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(ketamaConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, ketamaConnectionFactory0.getFailureMode());
      assertEquals(KetamaNodeKeyFormatter.Format.SPYMEMCACHED, ketamaConnectionFactory0.getKetamaNodeKeyFormat());
      assertEquals(ClientMode.Dynamic, ketamaConnectionFactory0.getClientMode());
      assertEquals(30L, ketamaConnectionFactory0.getMaxReconnectDelay());
      assertEquals(10000L, ketamaConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(ketamaConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(ketamaConnectionFactory0.isDaemon());
      assertEquals(1000L, ketamaConnectionFactory0.getAuthWaitTime());
      assertNull(ketamaConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, ketamaConnectionFactory0.getReadBufSize());
      assertEquals(998, ketamaConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, ketamaConnectionFactory0.getOperationTimeout());
      assertEquals(13, ketamaConnectionFactory0.getOpQueueLen());
      assertFalse(ketamaConnectionFactory0.shouldOptimize());
      assertFalse(ketamaConnectionFactory0.useNagleAlgorithm());
      assertTrue(ketamaConnectionFactory0.isDefaultExecutorService());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 13, linkedBlockingQueue0, linkedBlockingQueue0, linkedBlockingQueue0, (Long) 1000L, true, (-2866L), 10000L, ketamaConnectionFactory0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertEquals(60000L, ketamaConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(ketamaConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, ketamaConnectionFactory0.getFailureMode());
      assertEquals(KetamaNodeKeyFormatter.Format.SPYMEMCACHED, ketamaConnectionFactory0.getKetamaNodeKeyFormat());
      assertEquals(ClientMode.Dynamic, ketamaConnectionFactory0.getClientMode());
      assertEquals(30L, ketamaConnectionFactory0.getMaxReconnectDelay());
      assertEquals(10000L, ketamaConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(ketamaConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(ketamaConnectionFactory0.isDaemon());
      assertEquals(1000L, ketamaConnectionFactory0.getAuthWaitTime());
      assertNull(ketamaConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, ketamaConnectionFactory0.getReadBufSize());
      assertEquals(998, ketamaConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, ketamaConnectionFactory0.getOperationTimeout());
      assertEquals(13, ketamaConnectionFactory0.getOpQueueLen());
      assertFalse(ketamaConnectionFactory0.shouldOptimize());
      assertFalse(ketamaConnectionFactory0.useNagleAlgorithm());
      assertTrue(ketamaConnectionFactory0.isDefaultExecutorService());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      
      binaryMemcachedNodeImpl0.setSk((SelectionKey) null);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertEquals(60000L, ketamaConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(ketamaConnectionFactory0.getKeepAlive());
      assertEquals(FailureMode.Redistribute, ketamaConnectionFactory0.getFailureMode());
      assertEquals(KetamaNodeKeyFormatter.Format.SPYMEMCACHED, ketamaConnectionFactory0.getKetamaNodeKeyFormat());
      assertEquals(ClientMode.Dynamic, ketamaConnectionFactory0.getClientMode());
      assertEquals(30L, ketamaConnectionFactory0.getMaxReconnectDelay());
      assertEquals(10000L, ketamaConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(ketamaConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(ketamaConnectionFactory0.isDaemon());
      assertEquals(1000L, ketamaConnectionFactory0.getAuthWaitTime());
      assertNull(ketamaConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, ketamaConnectionFactory0.getReadBufSize());
      assertEquals(998, ketamaConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, ketamaConnectionFactory0.getOperationTimeout());
      assertEquals(13, ketamaConnectionFactory0.getOpQueueLen());
      assertFalse(ketamaConnectionFactory0.shouldOptimize());
      assertFalse(ketamaConnectionFactory0.useNagleAlgorithm());
      assertTrue(ketamaConnectionFactory0.isDefaultExecutorService());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryConnectionFactory0);
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(blockingQueue0);
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 926, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 926, 2500L, binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      
      Operation operation0 = binaryMemcachedNodeImpl0.getCurrentReadOp();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertNull(operation0);
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      
      ClientMode clientMode0 = ClientMode.Dynamic;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl((String) null, 998, (GetAndTouchOperation.Callback) null, "");
      assertNotNull(getAndTouchOperationImpl0);
      assertEquals(0, getAndTouchOperationImpl0.getCloneCount());
      assertEquals(998, getAndTouchOperationImpl0.getExpiration());
      assertEquals(OperationState.WRITE_QUEUED, getAndTouchOperationImpl0.getState());
      assertFalse(getAndTouchOperationImpl0.isCancelled());
      assertFalse(getAndTouchOperationImpl0.hasErrored());
      assertFalse(getAndTouchOperationImpl0.isTimedOut());
      assertEquals(0L, getAndTouchOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(getAndTouchOperationImpl0.isTimedOutUnsent());
      
      LinkedBlockingDeque<Operation> linkedBlockingDeque0 = new LinkedBlockingDeque<Operation>();
      assertNotNull(linkedBlockingDeque0);
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 1, blockingQueue0, blockingQueue0, linkedBlockingDeque0, (Long) 10000L, true, 900L, 0, binaryConnectionFactory0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      
      boolean boolean0 = linkedBlockingDeque0.add(getAndTouchOperationImpl0);
      assertTrue(boolean0);
      assertEquals(0, getAndTouchOperationImpl0.getCloneCount());
      assertEquals(998, getAndTouchOperationImpl0.getExpiration());
      assertEquals(OperationState.WRITE_QUEUED, getAndTouchOperationImpl0.getState());
      assertFalse(getAndTouchOperationImpl0.isCancelled());
      assertFalse(getAndTouchOperationImpl0.hasErrored());
      assertFalse(getAndTouchOperationImpl0.isTimedOut());
      assertEquals(0L, getAndTouchOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(getAndTouchOperationImpl0.isTimedOutUnsent());
      
      binaryMemcachedNodeImpl0.setupForAuth();
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(blockingQueue0);
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 272, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 30L, true, 1000L, 10000L, binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      binaryMemcachedNodeImpl0.authComplete();
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isConnected());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNotNull(binaryConnectionFactory0);
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNotNull(blockingQueue0);
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 19, 16384, binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      
      binaryMemcachedNodeImpl0.fixupOps();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isRegistered());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 19, 16384, binaryConnectionFactory0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      binaryMemcachedNodeImpl0.setContinuousTimeout(false);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnectionPending());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnected());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      assertNotNull(inetSocketAddress0);
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 926, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 926, 2500L, binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      
      boolean boolean0 = binaryMemcachedNodeImpl0.isAuthenticated();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertTrue(boolean0);
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("G1mj}q.d,gD9Bxrf9:0", inetSocketAddress0.toString());
      assertEquals("G1mj}q.d,gD9Bxrf9", inetSocketAddress0.getHostString());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(blockingQueue0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 998, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, true, 924, 924, binaryConnectionFactory0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      boolean boolean0 = binaryMemcachedNodeImpl0.isAuthenticated();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertFalse(boolean0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertFalse(socketChannel0.isRegistered());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnected());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(blockingQueue0);
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, true, 19, 16384, binaryConnectionFactory0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      binaryMemcachedNodeImpl0.setContinuousTimeout(true);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isOpen());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, true, 19, 16384, binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertEquals(13, socketChannel0.validOps());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.doTlsHandshake(10000L);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // SSLContext should be present in connectionFactory for TLS connection
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      assertNotNull(mockInetSocketAddress0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(blockingQueue0);
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 998, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 30L, true, 1000L, 1L, binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertNotNull(binaryMemcachedNodeImpl0);
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
      
      int int0 = binaryMemcachedNodeImpl0.getSelectionOps();
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(8, int0);
      assertEquals(19, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:19", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertFalse(socketChannel0.isRegistered());
      assertFalse(socketChannel0.isConnectionPending());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertFalse(binaryMemcachedNodeImpl0.isActive());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      SynchronousQueue<Operation> synchronousQueue0 = new SynchronousQueue<Operation>();
      Long long0 = new Long(924);
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 1, synchronousQueue0, synchronousQueue0, synchronousQueue0, long0, false, 0, 1798L, binaryConnectionFactory0);
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl((String) null, statsOperation_Callback0);
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.addOp(statsOperationImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Timed out waiting to add Cmd: 16 Opaque: 423(max wait=924ms)
         //
         verifyException("net.spy.memcached.protocol.TCPMemcachedNodeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 924, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 924, 2500L, binaryConnectionFactory0);
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(getAndTouchOperation_Callback0, 16384);
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      TapOpcode tapOpcode0 = TapOpcode.MUTATION;
      TapOperation tapOperation0 = binaryOperationFactory0.tapAck(tapOpcode0, 16384, multiReplicaGetOperationCallback0);
      binaryMemcachedNodeImpl0.addOp(tapOperation0);
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.fillWriteBuffer(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Didn't get a write buffer from Cmd: tap ack Opcode: MUTATION Opaque: 16384
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      ClientMode clientMode0 = ClientMode.Dynamic;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 998, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 1000L, false, (-1512L), 1L, binaryConnectionFactory0);
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 5);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 18);
      GetOperation getOperation0 = asciiOperationFactory0.get("k=Yf\"TLB@Uh\"~x.", (GetOperation.Callback) multiGetOperationCallback0);
      binaryMemcachedNodeImpl0.addOp(getOperation0);
      binaryMemcachedNodeImpl0.fillWriteBuffer(false);
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 2500L, false, 998, 30L, binaryConnectionFactory0);
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("", 16384, getAndTouchOperation_Callback0, "");
      binaryMemcachedNodeImpl0.addOp(getAndTouchOperationImpl0);
      getAndTouchOperationImpl0.cancel();
      binaryMemcachedNodeImpl0.fillWriteBuffer(false);
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("", 998, getAndTouchOperation_Callback0, "");
      getAndTouchOperationImpl0.initialize();
      LinkedBlockingDeque<Operation> linkedBlockingDeque0 = new LinkedBlockingDeque<Operation>();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 2598, linkedBlockingDeque0, linkedBlockingDeque0, linkedBlockingDeque0, (Long) binaryConnectionFactory0.DEFAULT_OPERATION_TIMEOUT, false, 16384, 1000L, binaryConnectionFactory0);
      binaryMemcachedNodeImpl0.addOp(getAndTouchOperationImpl0);
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.fillWriteBuffer(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory((ClientMode) null);
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, blockingQueue0, linkedBlockingQueue0, linkedBlockingQueue0, (Long) 10000L, false, 10000L, 10000L, binaryConnectionFactory0);
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl((String) null, (StatsOperation.Callback) null);
      binaryMemcachedNodeImpl0.addOp(statsOperationImpl0);
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.fillWriteBuffer(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Didn't get a write buffer from Cmd: 16 Opaque: 425
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      ClientMode clientMode0 = ClientMode.Dynamic;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      SynchronousQueue<Operation> synchronousQueue0 = new SynchronousQueue<Operation>();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, synchronousQueue0, synchronousQueue0, synchronousQueue0, (Long) 30L, true, 16384, 998, binaryConnectionFactory0);
      binaryMemcachedNodeImpl0.fillWriteBuffer(true);
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("", 5, getAndTouchOperation_Callback0, "");
      getAndTouchOperationImpl0.initialize();
      LinkedBlockingDeque<Operation> linkedBlockingDeque0 = new LinkedBlockingDeque<Operation>();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 2598, linkedBlockingDeque0, linkedBlockingDeque0, linkedBlockingDeque0, (Long) binaryConnectionFactory0.DEFAULT_OPERATION_TIMEOUT, false, 16384, 1000L, binaryConnectionFactory0);
      binaryMemcachedNodeImpl0.addOp(getAndTouchOperationImpl0);
      GetAndTouchOperation.Callback getAndTouchOperation_Callback1 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl1 = new GetAndTouchOperationImpl("", 16384, getAndTouchOperation_Callback1, "");
      linkedBlockingDeque0.add(getAndTouchOperationImpl1);
      getAndTouchOperationImpl1.cancel();
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.fillWriteBuffer(false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      SocketChannel socketChannel0 = SocketChannel.open();
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 998, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 30L, 16384, binaryConnectionFactory0);
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl((String) null, statsOperation_Callback0);
      binaryMemcachedNodeImpl0.addOp(statsOperationImpl0);
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      BlockingQueue<Operation> blockingQueue1 = binaryConnectionFactory0.createReadOperationQueue();
      LinkedBlockingDeque<Operation> linkedBlockingDeque0 = new LinkedBlockingDeque<Operation>();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl1 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 4, blockingQueue1, blockingQueue0, linkedBlockingDeque0, (Long) 30L, true, 1L, 1L, binaryConnectionFactory0);
      assertEquals(0, binaryMemcachedNodeImpl1.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl1.getReconnectCount());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      ClientMode clientMode0 = ClientMode.Dynamic;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 924, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 924, 2500L, binaryConnectionFactory0);
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("G1mj}q.d,gD9Bxrf9", statsOperation_Callback0);
      binaryMemcachedNodeImpl0.addOp(statsOperationImpl0);
      binaryMemcachedNodeImpl0.addOp(statsOperationImpl0);
      binaryMemcachedNodeImpl0.addOp(statsOperationImpl0);
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      binaryMemcachedNodeImpl0.setupResend();
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      LinkedBlockingDeque<Operation> linkedBlockingDeque0 = new LinkedBlockingDeque<Operation>();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, linkedBlockingDeque0, linkedBlockingDeque0, linkedBlockingDeque0, (Long) binaryConnectionFactory0.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME, false, 30L, 2500L, binaryConnectionFactory0);
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("G>O]#5=~}(Oij_VG`.", statsOperation_Callback0);
      statsOperationImpl0.initialize();
      binaryMemcachedNodeImpl0.addOp(statsOperationImpl0);
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      
      binaryMemcachedNodeImpl0.setupResend();
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      LinkedBlockingDeque<Operation> linkedBlockingDeque0 = new LinkedBlockingDeque<Operation>();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = null;
      try {
        binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 1655, linkedBlockingDeque0, linkedBlockingDeque0, (BlockingQueue<Operation>) null, (Long) 10000L, true, 1000L, 10000L, binaryConnectionFactory0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No input queue
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = null;
      try {
        binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 512, blockingQueue0, (BlockingQueue<Operation>) null, blockingQueue0, (Long) 1000L, false, 16384, 1L, binaryConnectionFactory0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation write queue
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = null;
      try {
        binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, (BlockingQueue<Operation>) null, (BlockingQueue<Operation>) null, (BlockingQueue<Operation>) null, (Long) binaryConnectionFactory0.DEFAULT_MAX_RECONNECT_DELAY, true, 16384, 998, binaryConnectionFactory0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation read queue
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = null;
      try {
        binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 0, linkedTransferQueue0, linkedTransferQueue0, linkedTransferQueue0, (Long) 10000L, true, 0, 16384, binaryConnectionFactory0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid buffer size: 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = null;
      try {
        binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, (SocketChannel) null, 16384, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 2500L, false, 0L, 1000L, binaryConnectionFactory0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No SocketChannel
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = null;
      try {
        binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl((SocketAddress) null, socketChannel0, 2, blockingQueue0, blockingQueue0, blockingQueue0, (Long) binaryConnectionFactory0.DEFAULT_OPERATION_TIMEOUT, false, 998, 998, binaryConnectionFactory0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No SocketAddress
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      ClientMode clientMode0 = ClientMode.Dynamic;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      SynchronousQueue<Operation> synchronousQueue0 = new SynchronousQueue<Operation>();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, synchronousQueue0, synchronousQueue0, synchronousQueue0, (Long) 30L, true, 16384, 998, binaryConnectionFactory0);
      ByteBuffer byteBuffer0 = binaryMemcachedNodeImpl0.getWbuf();
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.decryptNextTLSDataRecord(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.TCPMemcachedNodeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, true, 19, 16384, binaryConnectionFactory0);
      binaryMemcachedNodeImpl0.getConnection();
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, true, 19, 16384, binaryConnectionFactory0);
      binaryMemcachedNodeImpl0.setConnection((MemcachedConnection) null);
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      socketChannel0.close();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 272, blockingQueue0, blockingQueue0, blockingQueue0, (Long) binaryConnectionFactory0.DEFAULT_MAX_RECONNECT_DELAY, true, 1000L, 10000L, binaryConnectionFactory0);
      binaryMemcachedNodeImpl0.registerChannel(socketChannel0, (SelectionKey) null);
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1772);
      SocketChannel socketChannel0 = SocketChannel.open();
      ClientMode clientMode0 = ClientMode.Dynamic;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      SynchronousQueue<Operation> synchronousQueue0 = new SynchronousQueue<Operation>();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 16384, synchronousQueue0, synchronousQueue0, synchronousQueue0, (Long) 30L, true, 16384, 998, binaryConnectionFactory0);
      binaryMemcachedNodeImpl0.getNodeEndPoint();
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(6);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 6, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, true, 6, 16384, binaryConnectionFactory0);
      int int0 = binaryMemcachedNodeImpl0.getBytesRemainingToWrite();
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, int0);
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 272, blockingQueue0, blockingQueue0, blockingQueue0, (Long) binaryConnectionFactory0.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME, true, 1000L, 10000L, binaryConnectionFactory0);
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.registerChannel(socketChannel0, (SelectionKey) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Attempting to overwrite channel
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, true, 19, 16384, binaryConnectionFactory0);
      NodeEndPoint nodeEndPoint0 = new NodeEndPoint("", 19);
      binaryMemcachedNodeImpl0.setNodeEndPoint(nodeEndPoint0);
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("G1mj}q.d,gD9Bxrf9", 0);
      SocketChannel socketChannel0 = SocketChannel.open();
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 926, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 926, 2500L, binaryConnectionFactory0);
      int int0 = binaryMemcachedNodeImpl0.getReconnectCount();
      assertEquals(1, int0);
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 272, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 30L, true, 1000L, 10000L, binaryConnectionFactory0);
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      
      binaryMemcachedNodeImpl0.connected();
      boolean boolean0 = binaryMemcachedNodeImpl0.isActive();
      assertEquals(0, binaryMemcachedNodeImpl0.getReconnectCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("", 2321);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(2321, 2321);
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createWriteOperationQueue();
      LinkedBlockingQueue<Operation> linkedBlockingQueue0 = new LinkedBlockingQueue<Operation>();
      AsciiMemcachedNodeImpl asciiMemcachedNodeImpl0 = new AsciiMemcachedNodeImpl(inetSocketAddress0, socketChannel0, 16384, linkedBlockingQueue0, blockingQueue0, linkedBlockingQueue0, (Long) binaryConnectionFactory0.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME, 2500L, 0L, binaryConnectionFactory0);
      int int0 = asciiMemcachedNodeImpl0.getContinuousTimeout();
      assertEquals(1, asciiMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, asciiMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, false, 19, 16384, binaryConnectionFactory0);
      binaryMemcachedNodeImpl0.completedRead();
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(19);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 19, linkedTransferQueue0, linkedTransferQueue0, linkedTransferQueue0, (Long) 10000L, false, 19, 16384, binaryConnectionFactory0);
      long long0 = binaryMemcachedNodeImpl0.lastReadDelta();
      assertEquals(0L, long0);
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
      assertEquals(1, binaryMemcachedNodeImpl0.getReconnectCount());
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(6);
      SocketChannel socketChannel0 = SocketChannel.open();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BlockingQueue<Operation> blockingQueue0 = binaryConnectionFactory0.createReadOperationQueue();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 6, blockingQueue0, blockingQueue0, blockingQueue0, (Long) 10000L, true, 6, 16384, binaryConnectionFactory0);
      binaryMemcachedNodeImpl0.reconnecting();
      assertEquals(2, binaryMemcachedNodeImpl0.getReconnectCount());
  }
}
