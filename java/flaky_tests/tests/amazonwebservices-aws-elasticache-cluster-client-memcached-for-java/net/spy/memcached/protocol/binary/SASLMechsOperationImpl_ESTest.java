/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:36:15 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.protocol.binary.SASLMechsOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SASLMechsOperationImpl_ESTest extends SASLMechsOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SASLMechsOperationImpl sASLMechsOperationImpl0 = new SASLMechsOperationImpl((OperationCallback) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        sASLMechsOperationImpl0.decodePayload(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.SASLMechsOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, (-143));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, (-143));
      SASLMechsOperationImpl sASLMechsOperationImpl0 = new SASLMechsOperationImpl(multiReplicaGetOperationCallback0);
      byte[] byteArray0 = new byte[1];
      sASLMechsOperationImpl0.decodePayload(byteArray0);
      assertFalse(sASLMechsOperationImpl0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, (-143));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, (-143));
      SASLMechsOperationImpl sASLMechsOperationImpl0 = new SASLMechsOperationImpl(multiReplicaGetOperationCallback0);
      sASLMechsOperationImpl0.initialize();
      assertFalse(sASLMechsOperationImpl0.hasErrored());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SASLMechsOperationImpl sASLMechsOperationImpl0 = new SASLMechsOperationImpl((OperationCallback) null);
      String string0 = sASLMechsOperationImpl0.toString();
      assertEquals("SASL mechs operation", string0);
  }
}
