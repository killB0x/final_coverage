/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 15:02:26 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.protocol.binary.UnlockOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnlockOperationImpl_ESTest extends UnlockOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnlockOperationImpl unlockOperationImpl0 = new UnlockOperationImpl((String) null, 2452L, (OperationCallback) null);
      // Undeclared exception!
      try { 
        unlockOperationImpl0.initialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.KeyUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnlockOperationImpl unlockOperationImpl0 = new UnlockOperationImpl("03|jvA#$OcUhriwy", (byte)14, (OperationCallback) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        unlockOperationImpl0.decodePayload(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.UnlockOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, (-1));
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 4);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, (-1));
      UnlockOperationImpl unlockOperationImpl0 = new UnlockOperationImpl("Cancelled", 3634L, multiGetsOperationCallback0);
      String string0 = unlockOperationImpl0.toString();
      assertEquals("Cmd: -107 Opaque: 12 Key: Cancelled Cas: 3634", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, (-1));
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 4);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, (-1));
      UnlockOperationImpl unlockOperationImpl0 = new UnlockOperationImpl("Cancelled", 3634L, multiGetsOperationCallback0);
      byte[] byteArray0 = new byte[9];
      unlockOperationImpl0.decodePayload(byteArray0);
      assertFalse(unlockOperationImpl0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnlockOperationImpl unlockOperationImpl0 = new UnlockOperationImpl("w8UTazk+^", 0, (OperationCallback) null);
      unlockOperationImpl0.initialize();
      assertFalse(unlockOperationImpl0.isTimedOutUnsent());
  }
}
