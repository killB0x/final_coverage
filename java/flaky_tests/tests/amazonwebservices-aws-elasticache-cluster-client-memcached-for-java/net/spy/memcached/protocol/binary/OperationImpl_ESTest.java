/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 12:09:50 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.ByteBuffer;
import net.spy.memcached.CASResponse;
import net.spy.memcached.ops.CASOperationStatus;
import net.spy.memcached.ops.ConcatenationType;
import net.spy.memcached.ops.ConfigurationType;
import net.spy.memcached.ops.DeleteOperation;
import net.spy.memcached.ops.GetConfigOperation;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.Mutator;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.OperationState;
import net.spy.memcached.ops.OperationStatus;
import net.spy.memcached.ops.ReplicaGetOperation;
import net.spy.memcached.ops.ReplicaGetsOperation;
import net.spy.memcached.ops.StatsOperation;
import net.spy.memcached.ops.StatusCode;
import net.spy.memcached.protocol.binary.ConcatenationOperationImpl;
import net.spy.memcached.protocol.binary.DeleteConfigOperationImpl;
import net.spy.memcached.protocol.binary.DeleteOperationImpl;
import net.spy.memcached.protocol.binary.GetConfigOperationImpl;
import net.spy.memcached.protocol.binary.GetsOperationImpl;
import net.spy.memcached.protocol.binary.KeyStatsOperationImpl;
import net.spy.memcached.protocol.binary.MutatorOperationImpl;
import net.spy.memcached.protocol.binary.ObserveOperationImpl;
import net.spy.memcached.protocol.binary.OperationImpl;
import net.spy.memcached.protocol.binary.ReplicaGetOperationImpl;
import net.spy.memcached.protocol.binary.ReplicaGetsOperationImpl;
import net.spy.memcached.protocol.binary.StatsOperationImpl;
import net.spy.memcached.protocol.binary.TapCustomOperationImpl;
import net.spy.memcached.protocol.binary.TapDumpOperationImpl;
import net.spy.memcached.protocol.binary.VersionOperationImpl;
import net.spy.memcached.tapmessage.RequestMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OperationImpl_ESTest extends OperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Mutator mutator0 = Mutator.decr;
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-991));
      MutatorOperationImpl mutatorOperationImpl0 = new MutatorOperationImpl(mutator0, "", (byte) (-12), 129, 80, multiGetOperationCallback0);
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-12);
      mutatorOperationImpl0.decodePayload(byteArray0);
      assertFalse(mutatorOperationImpl0.hasErrored());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Mutator mutator0 = Mutator.decr;
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-991));
      MutatorOperationImpl mutatorOperationImpl0 = new MutatorOperationImpl(mutator0, "", (byte) (-12), 129, 80, multiGetOperationCallback0);
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-12);
      mutatorOperationImpl0.decodePayload(byteArray0);
      assertFalse(mutatorOperationImpl0.hasErrored());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte) (-77);
      long long0 = OperationImpl.decodeLong(byteArray0, (byte)1);
      assertEquals(3003121664L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Mutator mutator0 = Mutator.decr;
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-991));
      MutatorOperationImpl mutatorOperationImpl0 = new MutatorOperationImpl(mutator0, "", (byte) (-12), 129, 80, multiGetOperationCallback0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-12);
      mutatorOperationImpl0.decodePayload(byteArray0);
      assertEquals(OperationState.WRITE_QUEUED, mutatorOperationImpl0.getState());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Mutator mutator0 = Mutator.decr;
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-991));
      MutatorOperationImpl mutatorOperationImpl0 = new MutatorOperationImpl(mutator0, "", (byte) (-12), 129, 80, multiGetOperationCallback0);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-12);
      mutatorOperationImpl0.decodePayload(byteArray0);
      assertEquals((-12L), mutatorOperationImpl0.getBy());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-49);
      long long0 = OperationImpl.decodeLong(byteArray0, (byte)1);
      assertEquals(58265320179105792L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)83;
      long long0 = OperationImpl.decodeUnsignedInt(byteArray0, (byte)0);
      assertEquals(21248L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)24;
      long long0 = OperationImpl.decodeUnsignedInt(byteArray0, (byte)0);
      assertEquals(1572864L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReplicaGetsOperation.Callback replicaGetsOperation_Callback0 = mock(ReplicaGetsOperation.Callback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(replicaGetsOperation_Callback0, 1639);
      GetsOperationImpl getsOperationImpl0 = new GetsOperationImpl("", multiGetsOperationCallback0);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)14;
      // Undeclared exception!
      try { 
        getsOperationImpl0.decodePayload(byteArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.spy.memcached.ops.ReplicaGetsOperation$Callback$MockitoMock$1705394423 cannot be cast to class net.spy.memcached.ops.GetsOperation$Callback (net.spy.memcached.ops.ReplicaGetsOperation$Callback$MockitoMock$1705394423 and net.spy.memcached.ops.GetsOperation$Callback are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @4d1c799a)
         //
         verifyException("net.spy.memcached.ops.MultiGetsOperationCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("", 3, (ReplicaGetsOperation.Callback) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-124);
      // Undeclared exception!
      try { 
        replicaGetsOperationImpl0.decodePayload(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.ReplicaGetsOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-31);
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, (byte) (-31));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, (-127));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, 800);
      ObserveOperationImpl observeOperationImpl0 = new ObserveOperationImpl("", (byte) (-31), (byte) (-31), multiGetsOperationCallback0);
      // Undeclared exception!
      try { 
        observeOperationImpl0.finishedPayload(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -7932 out of bounds for length 6
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("", 15, (ReplicaGetsOperation.Callback) null);
      replicaGetsOperationImpl0.responseOpaque = 998;
      replicaGetsOperationImpl0.opaqueIsValid();
      byte[] byteArray0 = new byte[10];
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      int int0 = 31;
      Object[] objectArray1 = null;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, 15, 15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, (-253));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 16);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 0);
      TapDumpOperationImpl tapDumpOperationImpl0 = new TapDumpOperationImpl("f|T)+` ", multiReplicaGetOperationCallback0);
      byte[] byteArray0 = new byte[0];
      OperationStatus operationStatus0 = tapDumpOperationImpl0.getStatusForErrorCode((-253), byteArray0);
      assertNull(operationStatus0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(32);
      byteBuffer0.putLong((long) 32);
      byteBuffer0.get();
      ReplicaGetsOperation.Callback replicaGetsOperation_Callback0 = mock(ReplicaGetsOperation.Callback.class, new ViolatedAssumptionAnswer());
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("", 32, replicaGetsOperation_Callback0);
      replicaGetsOperationImpl0.readFromBuffer(byteBuffer0);
      replicaGetsOperationImpl0.readFromBuffer(byteBuffer0);
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(32, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, 130);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 16777216);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, (-1260));
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl(multiReplicaGetOperationCallback0);
      byte[] byteArray0 = new byte[1];
      versionOperationImpl0.decodePayload(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeleteOperationImpl deleteOperationImpl0 = new DeleteOperationImpl("", (DeleteOperation.Callback) null);
      deleteOperationImpl0.resetInput();
      assertFalse(deleteOperationImpl0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 982);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, 1747);
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      DeleteConfigOperationImpl deleteConfigOperationImpl0 = new DeleteConfigOperationImpl(configurationType0, multiGetsOperationCallback0);
      byte[] byteArray0 = new byte[0];
      deleteConfigOperationImpl0.finishedPayload(byteArray0);
      assertFalse(deleteConfigOperationImpl0.hasErrored());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, 130);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 16777216);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, (-1260));
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl(multiReplicaGetOperationCallback0);
      String string0 = versionOperationImpl0.toString();
      //  // Unstable assertion: assertEquals("Cmd: 11 Opaque: 3405", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("CONFIG", 2009, (ReplicaGetsOperation.Callback) null);
      byte[] byteArray0 = new byte[2];
      OperationStatus operationStatus0 = replicaGetsOperationImpl0.getStatusForErrorCode(2009, byteArray0);
      assertNull(operationStatus0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 1759);
      TapDumpOperationImpl tapDumpOperationImpl0 = new TapDumpOperationImpl("2j", multiGetsOperationCallback0);
      OperationStatus operationStatus0 = tapDumpOperationImpl0.getStatusForErrorCode(0, byteArray0);
      assertEquals("OK", operationStatus0.getMessage());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("CONFIG", 2009, (ReplicaGetsOperation.Callback) null);
      byte[] byteArray0 = new byte[2];
      OperationStatus operationStatus0 = replicaGetsOperationImpl0.getStatusForErrorCode(133, byteArray0);
      assertEquals(StatusCode.ERR_BUSY, operationStatus0.getStatusCode());
      assertNotNull(operationStatus0);
      assertEquals("\u0000\u0000", operationStatus0.getMessage());
      
      byte[] byteArray1 = replicaGetsOperationImpl0.getErrorMsg();
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = OperationImpl.generateOpaque();
      //  // Unstable assertion: assertEquals(3100, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      long long0 = OperationImpl.decodeUnsignedInt(byteArray0, (byte)0);
      assertEquals(100663296L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-34);
      int int0 = OperationImpl.decodeShort(byteArray0, 0);
      assertEquals(222, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      long long0 = OperationImpl.decodeLong(byteArray0, (byte)0);
      assertEquals(6485183463413514240L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-119);
      long long0 = OperationImpl.decodeLong(byteArray0, (byte)1);
      assertEquals((-8574853690513424384L), long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = OperationImpl.decodeInt(byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      int int0 = OperationImpl.decodeInt(byteArray0, (byte)0);
      assertEquals(100663296, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-15);
      int int0 = OperationImpl.decodeInt(byteArray0, (byte)1);
      assertEquals((-251658240), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = OperationImpl.decodeByte(byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-1);
      int int0 = OperationImpl.decodeByte(byteArray0, 6);
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("9a{1Mrq", (StatsOperation.Callback) null);
      // Undeclared exception!
      try { 
        statsOperationImpl0.readFromBuffer((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, 16777216);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 134);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 24);
      TapCustomOperationImpl tapCustomOperationImpl0 = new TapCustomOperationImpl((String) null, requestMessage0, multiReplicaGetOperationCallback0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(134);
      // Undeclared exception!
      try { 
        tapCustomOperationImpl0.readFromBuffer(byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad magic value
         //
         verifyException("net.spy.memcached.tapmessage.TapMagic", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl((String) null, (StatsOperation.Callback) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(36);
      // Undeclared exception!
      try { 
        statsOperationImpl0.readFromBuffer(byteBuffer0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid magic:  0
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("", 4548, (ReplicaGetsOperation.Callback) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) replicaGetsOperationImpl0;
      // Undeclared exception!
      try { 
        replicaGetsOperationImpl0.prepareBuffer("", 4548, byteArray0, objectArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Unhandled extra header type:  class net.spy.memcached.protocol.binary.ReplicaGetsOperationImpl
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl((OperationCallback) null);
      // Undeclared exception!
      try { 
        versionOperationImpl0.getStatusForErrorCode(210, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("", 74, (ReplicaGetsOperation.Callback) null);
      replicaGetsOperationImpl0.keyLen = 70;
      // Undeclared exception!
      try { 
        replicaGetsOperationImpl0.finishedPayload(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -64
         //
         verifyException("net.spy.memcached.protocol.binary.ReplicaGetsOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        OperationImpl.decodeUnsignedInt((byte[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        OperationImpl.decodeUnsignedInt(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        OperationImpl.decodeShort((byte[]) null, 354);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        OperationImpl.decodeShort(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      GetConfigOperationImpl getConfigOperationImpl0 = new GetConfigOperationImpl(configurationType0, (GetConfigOperation.Callback) null);
      // Undeclared exception!
      try { 
        getConfigOperationImpl0.decodePayload((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      KeyStatsOperationImpl keyStatsOperationImpl0 = new KeyStatsOperationImpl("Q3", (StatsOperation.Callback) null);
      // Undeclared exception!
      try { 
        keyStatsOperationImpl0.decodePayload(byteArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Payload has bytes, but decode isn't overridden
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 0);
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl(" Port:", 0, multiReplicaGetOperationCallback0);
      // Undeclared exception!
      try { 
        replicaGetOperationImpl0.decodePayload(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        OperationImpl.decodeLong((byte[]) null, 215);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        OperationImpl.decodeLong(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        OperationImpl.decodeInt((byte[]) null, (-1421));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        OperationImpl.decodeInt(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        OperationImpl.decodeByte((byte[]) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[55];
      // Undeclared exception!
      try { 
        OperationImpl.decodeByte(byteArray0, 2431);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2431 out of bounds for length 55
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      DeleteConfigOperationImpl deleteConfigOperationImpl0 = new DeleteConfigOperationImpl(configurationType0, (OperationCallback) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        deleteConfigOperationImpl0.finishedPayload(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl(" exwp: ", (-722), (ReplicaGetsOperation.Callback) null);
      byte[] byteArray0 = new byte[1];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        replicaGetsOperationImpl0.prepareBuffer(" exwp: ", (-722), byteArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Mutator mutator0 = Mutator.decr;
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 2483);
      MutatorOperationImpl mutatorOperationImpl0 = new MutatorOperationImpl(mutator0, "Opaque is not valid", 2483, 2483, 2483, multiGetsOperationCallback0);
      mutatorOperationImpl0.initialize();
      assertEquals(2483L, mutatorOperationImpl0.getDefault());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ReplicaGetsOperation.Callback replicaGetsOperation_Callback0 = mock(ReplicaGetsOperation.Callback.class, new ViolatedAssumptionAnswer());
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl(";w/KxRN*$_s%_", (-1267), replicaGetsOperation_Callback0);
      byte[] byteArray0 = new byte[2];
      Object[] objectArray0 = new Object[0];
      replicaGetsOperationImpl0.prepareBuffer("net.spy.memcached.DefaultConnectionFactory", 1373, byteArray0, objectArray0);
      assertEquals(0L, replicaGetsOperationImpl0.getWriteCompleteTimestamp());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, 17);
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      DeleteConfigOperationImpl deleteConfigOperationImpl0 = new DeleteConfigOperationImpl(configurationType0, multiGetOperationCallback0);
      // Undeclared exception!
      try { 
        deleteConfigOperationImpl0.finishedPayload(byteArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Payload has bytes, but decode isn't overridden
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("Max retry attempt reached for config call. Stopping the current poll cycle.", (-1642), (ReplicaGetsOperation.Callback) null);
      byte[] byteArray0 = new byte[7];
      OperationStatus operationStatus0 = replicaGetsOperationImpl0.getStatusForErrorCode(134, byteArray0);
      assertFalse(operationStatus0.isSuccess());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", operationStatus0.getMessage());
      assertNotNull(operationStatus0);
      assertEquals(StatusCode.ERR_TEMP_FAIL, operationStatus0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ObserveOperationImpl observeOperationImpl0 = new ObserveOperationImpl("#", 17, 17, (OperationCallback) null);
      observeOperationImpl0.errorCode = 133;
      // Undeclared exception!
      try { 
        observeOperationImpl0.finishedPayload(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 818);
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("", 818, multiReplicaGetOperationCallback0);
      byte[] byteArray0 = new byte[8];
      try { 
        replicaGetOperationImpl0.getStatusForErrorCode(132, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("net.spy.memcached.protocol.BaseOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Mutator mutator0 = Mutator.incr;
      MutatorOperationImpl mutatorOperationImpl0 = new MutatorOperationImpl(mutator0, "", 17, 0L, 70, (OperationCallback) null);
      OperationStatus operationStatus0 = mutatorOperationImpl0.getStatusForErrorCode(131, byteArray0);
      assertEquals(StatusCode.ERR_NOT_SUPPORTED, operationStatus0.getStatusCode());
      assertFalse(operationStatus0.isSuccess());
      assertNotNull(operationStatus0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", operationStatus0.getMessage());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl(" exwp: ", (-722), (ReplicaGetsOperation.Callback) null);
      byte[] byteArray0 = new byte[1];
      OperationStatus operationStatus0 = replicaGetsOperationImpl0.getStatusForErrorCode(130, byteArray0);
      assertFalse(operationStatus0.isSuccess());
      assertNotNull(operationStatus0);
      assertEquals(StatusCode.ERR_NO_MEM, operationStatus0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      DeleteConfigOperationImpl deleteConfigOperationImpl0 = new DeleteConfigOperationImpl(configurationType0, (OperationCallback) null);
      deleteConfigOperationImpl0.errorCode = 129;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        deleteConfigOperationImpl0.finishedPayload(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("", 17, (ReplicaGetsOperation.Callback) null);
      byte[] byteArray0 = new byte[10];
      OperationStatus operationStatus0 = replicaGetsOperationImpl0.getStatusForErrorCode(6, byteArray0);
      assertEquals(StatusCode.ERR_DELTA_BADVAL, operationStatus0.getStatusCode());
      assertNotNull(operationStatus0);
      assertFalse(operationStatus0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("Max retry attempt reached for config call. Stopping the current poll cycle.", (-1642), (ReplicaGetsOperation.Callback) null);
      byte[] byteArray0 = new byte[7];
      OperationStatus operationStatus0 = replicaGetsOperationImpl0.getStatusForErrorCode(4, byteArray0);
      assertEquals(StatusCode.ERR_INVAL, operationStatus0.getStatusCode());
      assertFalse(operationStatus0.isSuccess());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", operationStatus0.getMessage());
      assertNotNull(operationStatus0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ReplicaGetOperationImpl replicaGetOperationImpl0 = new ReplicaGetOperationImpl("XM/tBcv,+yqHAJ", 3, (ReplicaGetOperation.Callback) null);
      OperationStatus operationStatus0 = replicaGetOperationImpl0.getStatusForErrorCode(3, byteArray0);
      assertEquals(StatusCode.ERR_2BIG, operationStatus0.getStatusCode());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", operationStatus0.getMessage());
      assertNotNull(operationStatus0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("", 16, (ReplicaGetsOperation.Callback) null);
      byte[] byteArray0 = new byte[1];
      CASOperationStatus cASOperationStatus0 = (CASOperationStatus)replicaGetsOperationImpl0.getStatusForErrorCode(2, byteArray0);
      assertEquals(StatusCode.ERR_EXISTS, cASOperationStatus0.getStatusCode());
      assertNotNull(cASOperationStatus0);
      assertEquals(CASResponse.EXISTS, cASOperationStatus0.getCASResponse());
      assertFalse(cASOperationStatus0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Mutator mutator0 = Mutator.incr;
      MutatorOperationImpl mutatorOperationImpl0 = new MutatorOperationImpl(mutator0, "", 1, 0L, 1, (OperationCallback) null);
      CASOperationStatus cASOperationStatus0 = (CASOperationStatus)mutatorOperationImpl0.getStatusForErrorCode(1, byteArray0);
      assertEquals(StatusCode.ERR_NOT_FOUND, cASOperationStatus0.getStatusCode());
      assertEquals(CASResponse.NOT_FOUND, cASOperationStatus0.getCASResponse());
      assertFalse(cASOperationStatus0.isSuccess());
      assertNotNull(cASOperationStatus0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      DeleteConfigOperationImpl deleteConfigOperationImpl0 = new DeleteConfigOperationImpl(configurationType0, (OperationCallback) null);
      deleteConfigOperationImpl0.errorCode = 5;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        deleteConfigOperationImpl0.finishedPayload(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ReplicaGetsOperation.Callback replicaGetsOperation_Callback0 = mock(ReplicaGetsOperation.Callback.class, new ViolatedAssumptionAnswer());
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl(";w/KxRN*$_s%_", (-1267), replicaGetsOperation_Callback0);
      byte[] byteArray0 = new byte[9];
      replicaGetsOperationImpl0.errorCode = 7;
      replicaGetsOperationImpl0.finishedPayload(byteArray0);
      assertEquals(OperationState.RETRY, replicaGetsOperationImpl0.getState());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[45];
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 56);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 56);
      DeleteConfigOperationImpl deleteConfigOperationImpl0 = new DeleteConfigOperationImpl(configurationType0, multiGetOperationCallback0);
      deleteConfigOperationImpl0.errorCode = 56;
      try { 
        deleteConfigOperationImpl0.finishedPayload(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("net.spy.memcached.protocol.BaseOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ObserveOperationImpl observeOperationImpl0 = new ObserveOperationImpl("IaN=", (-1607), (-1607), (OperationCallback) null);
      observeOperationImpl0.initialize();
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl("IaN=", 32, (ReplicaGetsOperation.Callback) null);
      ByteBuffer byteBuffer0 = observeOperationImpl0.getBuffer();
      // Undeclared exception!
      try { 
        replicaGetsOperationImpl0.readFromBuffer(byteBuffer0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid magic:  -128
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(23);
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl(",-F%:YffLxM", (StatsOperation.Callback) null);
      statsOperationImpl0.readFromBuffer(byteBuffer0);
      assertEquals(23, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 689);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, 689);
      ObserveOperationImpl observeOperationImpl0 = new ObserveOperationImpl("r|n=j%i", 0L, 611, multiGetsOperationCallback0);
      // Undeclared exception!
      try { 
        observeOperationImpl0.finishedPayload(byteArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.spy.memcached.ops.MultiGetsOperationCallback cannot be cast to class net.spy.memcached.ops.ObserveOperation$Callback (net.spy.memcached.ops.MultiGetsOperationCallback and net.spy.memcached.ops.ObserveOperation$Callback are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @4d1c799a)
         //
         verifyException("net.spy.memcached.protocol.binary.ObserveOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ReplicaGetsOperation.Callback replicaGetsOperation_Callback0 = mock(ReplicaGetsOperation.Callback.class, new ViolatedAssumptionAnswer());
      ReplicaGetsOperationImpl replicaGetsOperationImpl0 = new ReplicaGetsOperationImpl(";w/KxRN*$_s%_", (-1267), replicaGetsOperation_Callback0);
      byte[] byteArray0 = new byte[9];
      replicaGetsOperationImpl0.finishedPayload(byteArray0);
      replicaGetsOperationImpl0.errorCode = 7;
      replicaGetsOperationImpl0.finishedPayload(byteArray0);
      assertEquals(OperationState.COMPLETE, replicaGetsOperationImpl0.getState());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      long long0 = OperationImpl.decodeUnsignedInt(byteArray0, (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = OperationImpl.decodeShort(byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      long long0 = OperationImpl.decodeLong(byteArray0, (byte)1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      GetConfigOperationImpl getConfigOperationImpl0 = new GetConfigOperationImpl(configurationType0, (GetConfigOperation.Callback) null);
      byte[] byteArray0 = getConfigOperationImpl0.getErrorMsg();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      ConcatenationOperationImpl concatenationOperationImpl0 = new ConcatenationOperationImpl(concatenationType0, "OBSERVE_MODIFIED", (byte[]) null, 0L, (OperationCallback) null);
      // Undeclared exception!
      try { 
        concatenationOperationImpl0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.ConcatenationOperationImpl", e);
      }
  }
}
