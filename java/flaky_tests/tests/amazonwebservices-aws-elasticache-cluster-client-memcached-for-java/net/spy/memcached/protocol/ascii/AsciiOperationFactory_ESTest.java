/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:27:38 GMT 2022
 */

package net.spy.memcached.protocol.ascii;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import net.spy.memcached.auth.PlainCallbackHandler;
import net.spy.memcached.ops.CASOperation;
import net.spy.memcached.ops.ConcatenationOperation;
import net.spy.memcached.ops.ConcatenationType;
import net.spy.memcached.ops.ConfigurationType;
import net.spy.memcached.ops.DeleteConfigOperation;
import net.spy.memcached.ops.DeleteOperation;
import net.spy.memcached.ops.FlushOperation;
import net.spy.memcached.ops.GetAndTouchOperation;
import net.spy.memcached.ops.GetConfigOperation;
import net.spy.memcached.ops.GetOperation;
import net.spy.memcached.ops.GetlOperation;
import net.spy.memcached.ops.GetsOperation;
import net.spy.memcached.ops.KeyedOperation;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.Mutator;
import net.spy.memcached.ops.MutatorOperation;
import net.spy.memcached.ops.NoopOperation;
import net.spy.memcached.ops.ObserveOperation;
import net.spy.memcached.ops.Operation;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.OperationState;
import net.spy.memcached.ops.ReplicaGetOperation;
import net.spy.memcached.ops.ReplicaGetsOperation;
import net.spy.memcached.ops.SetConfigOperation;
import net.spy.memcached.ops.StatsOperation;
import net.spy.memcached.ops.StoreOperation;
import net.spy.memcached.ops.StoreType;
import net.spy.memcached.ops.TouchOperation;
import net.spy.memcached.ops.UnlockOperation;
import net.spy.memcached.ops.VersionOperation;
import net.spy.memcached.protocol.ascii.AsciiOperationFactory;
import net.spy.memcached.tapmessage.RequestMessage;
import net.spy.memcached.tapmessage.TapOpcode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AsciiOperationFactory_ESTest extends AsciiOperationFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, (-46));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, 4);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 4);
      TouchOperation touchOperation0 = asciiOperationFactory0.touch("i%PT^Q-KlEy2& t+gpd", 0, multiGetOperationCallback0);
      assertEquals(0, touchOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, 0);
      TouchOperation touchOperation0 = asciiOperationFactory0.touch("Certificate refresh is not supported in binary mode", (-807), multiGetOperationCallback0);
      assertEquals((-807), touchOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      StoreType storeType0 = StoreType.set;
      StoreOperation storeOperation0 = asciiOperationFactory0.store(storeType0, "net.spy.memcached.protocol.ascii.AsciiOperationFactory", 0, 1, (byte[]) null, (StoreOperation.Callback) null);
      assertEquals(0, storeOperation0.getFlags());
      assertEquals(1, storeOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      StoreType storeType0 = StoreType.set;
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperation storeOperation0 = asciiOperationFactory0.store(storeType0, "Key must contain at least one character.", 29, 0, (byte[]) null, storeOperation_Callback0);
      assertEquals(29, storeOperation0.getFlags());
      assertEquals(0, storeOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      StoreType storeType0 = StoreType.add;
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperation storeOperation0 = asciiOperationFactory0.store(storeType0, "", (-5166), (-2729), (byte[]) null, storeOperation_Callback0);
      assertEquals((-5166), storeOperation0.getFlags());
      assertEquals((-2729), storeOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      byte[] byteArray0 = new byte[3];
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 0);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, (byte) (-46));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, 21);
      SetConfigOperation setConfigOperation0 = asciiOperationFactory0.setConfig(configurationType0, 0, byteArray0, multiReplicaGetOperationCallback0);
      assertEquals(0, setConfigOperation0.getFlags());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, 0);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, (-203));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 33);
      SetConfigOperation setConfigOperation0 = asciiOperationFactory0.setConfig(configurationType0, (-706), (byte[]) null, multiReplicaGetOperationCallback0);
      assertEquals((-706), setConfigOperation0.getFlags());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      Mutator mutator0 = Mutator.decr;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, 163);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, 33);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, 33);
      MutatorOperation mutatorOperation0 = asciiOperationFactory0.mutate(mutator0, "", 3159L, 0L, 163, multiGetsOperationCallback0);
      assertEquals(3159L, mutatorOperation0.getBy());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      Mutator mutator0 = Mutator.decr;
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-2847));
      MutatorOperation mutatorOperation0 = asciiOperationFactory0.mutate(mutator0, "", (-4413L), (-1105L), (-2847), multiGetOperationCallback0);
      assertEquals((-4413L), mutatorOperation0.getBy());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      GetlOperation.Callback getlOperation_Callback0 = mock(GetlOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetlOperation getlOperation0 = asciiOperationFactory0.getl("", 2312, getlOperation_Callback0);
      assertEquals(2312, getlOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      GetlOperation getlOperation0 = asciiOperationFactory0.getl("Too long for a byte", (-1), (GetlOperation.Callback) null);
      assertEquals((-1), getlOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, (-1));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 2312);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, 1213);
      GetOperation getOperation0 = asciiOperationFactory0.get((Collection<String>) set0, (GetOperation.Callback) multiGetOperationCallback0);
      assertEquals(0, getOperation0.getCloneCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      StoreType storeType0 = StoreType.set;
      byte[] byteArray0 = new byte[0];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      CASOperation cASOperation0 = asciiOperationFactory0.cas(storeType0, "|Db8", 50L, 1626, 0, byteArray0, storeOperation_Callback0);
      assertEquals(50L, cASOperation0.getCasValue());
      assertEquals(1626, cASOperation0.getFlags());
      assertEquals(0, cASOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      StoreType storeType0 = StoreType.replace;
      byte[] byteArray0 = new byte[2];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      CASOperation cASOperation0 = asciiOperationFactory0.cas(storeType0, "ZFu`F", (-3750763034362895579L), 0, 1408, byteArray0, storeOperation_Callback0);
      assertEquals(0, cASOperation0.getFlags());
      assertEquals((-3750763034362895579L), cASOperation0.getCasValue());
      assertEquals(1408, cASOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.cloneGet((KeyedOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.getAndTouch(":U[1X/T<VW", (-1936), (GetAndTouchOperation.Callback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Get and touch is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      FlushOperation flushOperation0 = asciiOperationFactory0.flush((-3972), (OperationCallback) null);
      assertFalse(flushOperation0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      RequestMessage requestMessage0 = new RequestMessage();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.tapCustom("", requestMessage0, (OperationCallback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Tap is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      GetlOperation.Callback getlOperation_Callback0 = mock(GetlOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetlOperation getlOperation0 = asciiOperationFactory0.getl("SnjOBBB$%d<L*F;I", (byte)0, getlOperation_Callback0);
      assertEquals(0, getlOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      byte[] byteArray0 = new byte[0];
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("GUnODQ9K1`H*}", "GUnODQ9K1`H*}");
      // Undeclared exception!
      try { 
        asciiOperationFactory0.saslStep((String[]) null, byteArray0, "GUnODQ9K1`H*}", (Map<String, ?>) null, plainCallbackHandler0, (OperationCallback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SASL is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      DeleteConfigOperation deleteConfigOperation0 = asciiOperationFactory0.deleteConfig(configurationType0, (OperationCallback) null);
      assertFalse(deleteConfigOperation0.hasErrored());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      StoreType storeType0 = StoreType.set;
      byte[] byteArray0 = new byte[3];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      CASOperation cASOperation0 = asciiOperationFactory0.cas(storeType0, "SnjOBBB$%d<L*F;I", 0L, (-1), (-1), byteArray0, storeOperation_Callback0);
      asciiOperationFactory0.cloneGet(cASOperation0);
      assertEquals((-1), cASOperation0.getExpiration());
      assertEquals((-1), cASOperation0.getFlags());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      Mutator mutator0 = Mutator.decr;
      MutatorOperation mutatorOperation0 = asciiOperationFactory0.mutate(mutator0, "net.spy.memcached.protocol.binary.StatsOperationImpl", 0L, 0L, 0, (OperationCallback) null);
      assertFalse(mutatorOperation0.isTimedOut());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      Operation operation0 = asciiOperationFactory0.refreshCertificate((OperationCallback) null);
      assertFalse(operation0.hasErrored());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.replicaGet("UTF-8", (-7234), (ReplicaGetOperation.Callback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Replica get is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.tapBackfill((String) null, (-511L), (OperationCallback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Tap is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.saslMechs((OperationCallback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SASL is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      DeleteOperation deleteOperation0 = asciiOperationFactory0.delete(":oguIN]\"7Q4ynVZrZXt", (DeleteOperation.Callback) null);
      assertEquals(OperationState.WRITE_QUEUED, deleteOperation0.getState());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      GetConfigOperation getConfigOperation0 = asciiOperationFactory0.getConfig(configurationType0, (GetConfigOperation.Callback) null);
      assertFalse(getConfigOperation0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.replicaGets("", 1, (ReplicaGetsOperation.Callback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Replica gets is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      GetOperation getOperation0 = asciiOperationFactory0.get("2Z$){/AyBy~[ZqAxcj", (GetOperation.Callback) null);
      assertEquals(0L, getOperation0.getWriteCompleteTimestamp());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.delete("4hW@", (-214L), (DeleteOperation.Callback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Delete with CAS is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.tapDump("jekRz]1\"y^|<l:", (OperationCallback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Tap is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      String[] stringArray0 = new String[0];
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("r", "net.spy.memcached.protocol.ascii.AsciiOperationFactory");
      // Undeclared exception!
      try { 
        asciiOperationFactory0.saslAuth(stringArray0, "r", (Map<String, ?>) null, plainCallbackHandler0, (OperationCallback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SASL is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      TapOpcode tapOpcode0 = TapOpcode.MUTATION;
      // Undeclared exception!
      try { 
        asciiOperationFactory0.tapAck(tapOpcode0, 3008, (OperationCallback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Tap is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      UnlockOperation unlockOperation0 = asciiOperationFactory0.unlock("net.spy.memcached.protocol.ascii.AsciiOperationFactory", 3352L, (OperationCallback) null);
      assertEquals(OperationState.WRITE_QUEUED, unlockOperation0.getState());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.keyStats("", (StatsOperation.Callback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Key stats are not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      SetConfigOperation setConfigOperation0 = asciiOperationFactory0.setConfig(configurationType0, 370, (byte[]) null, (OperationCallback) null);
      assertEquals(370, setConfigOperation0.getFlags());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      TouchOperation touchOperation0 = asciiOperationFactory0.touch("Rzw+,d'", 1, (OperationCallback) null);
      assertEquals(1, touchOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      byte[] byteArray0 = new byte[0];
      ConcatenationOperation concatenationOperation0 = asciiOperationFactory0.cat(concatenationType0, (-145L), "tt)(rPQ._U", byteArray0, (OperationCallback) null);
      assertEquals(0, concatenationOperation0.getCloneCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      NoopOperation noopOperation0 = asciiOperationFactory0.noop((OperationCallback) null);
      assertFalse(noopOperation0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.observe("F|)fTNwza}KF/S]", (-3428L), 2281, (ObserveOperation.Callback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Observe is not supported for ASCII protocol
         //
         verifyException("net.spy.memcached.protocol.ascii.AsciiOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      VersionOperation versionOperation0 = asciiOperationFactory0.version((OperationCallback) null);
      assertEquals(0L, versionOperation0.getWriteCompleteTimestamp());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      GetsOperation getsOperation0 = asciiOperationFactory0.gets("", (GetsOperation.Callback) null);
      assertFalse(getsOperation0.isTimedOut());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      StatsOperation statsOperation0 = asciiOperationFactory0.stats("", (StatsOperation.Callback) null);
      assertFalse(statsOperation0.isCancelled());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      // Undeclared exception!
      try { 
        asciiOperationFactory0.get((Collection<String>) null, (GetOperation.Callback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }
}
