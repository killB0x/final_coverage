/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:40:38 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.protocol.binary.FlushOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FlushOperationImpl_ESTest extends FlushOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 0);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, (-3497));
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, (-1991));
      FlushOperationImpl flushOperationImpl0 = new FlushOperationImpl((-1991), multiGetOperationCallback0);
      String string0 = flushOperationImpl0.toString();
      assertEquals("Cmd: 8 Opaque: 96 Delay: -1991", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 0);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, (-3497));
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, (-1991));
      FlushOperationImpl flushOperationImpl0 = new FlushOperationImpl((-1991), multiGetOperationCallback0);
      flushOperationImpl0.initialize();
      assertEquals(0L, flushOperationImpl0.getWriteCompleteTimestamp());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FlushOperationImpl flushOperationImpl0 = new FlushOperationImpl((OperationCallback) null);
      String string0 = flushOperationImpl0.toString();
      assertEquals("Cmd: 8 Opaque: 1 Delay: 0", string0);
  }
}
