/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:21:59 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.protocol.binary.TapBackfillOperationImpl;
import net.spy.memcached.protocol.binary.TapCustomOperationImpl;
import net.spy.memcached.tapmessage.RequestMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TapOperationImpl_ESTest extends TapOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TapBackfillOperationImpl tapBackfillOperationImpl0 = new TapBackfillOperationImpl("M$n-^GIj", 24, (OperationCallback) null);
      // Undeclared exception!
      try { 
        tapBackfillOperationImpl0.readFromBuffer((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.TapOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1393);
      byteBuffer0.putFloat(8, (-981.3184F));
      TapBackfillOperationImpl tapBackfillOperationImpl0 = new TapBackfillOperationImpl("|WiKjcn##", 8, (OperationCallback) null);
      // Undeclared exception!
      try { 
        tapBackfillOperationImpl0.readFromBuffer(byteBuffer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -998943623
         //
         verifyException("net.spy.memcached.protocol.binary.TapOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RequestMessage requestMessage0 = new RequestMessage();
      TapCustomOperationImpl tapCustomOperationImpl0 = new TapCustomOperationImpl("M$n-^GIj", requestMessage0, (OperationCallback) null);
      // Undeclared exception!
      try { 
        tapCustomOperationImpl0.initialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.tapmessage.RequestMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(713);
      ByteBuffer byteBuffer1 = byteBuffer0.putFloat(11, (float) 11);
      TapBackfillOperationImpl tapBackfillOperationImpl0 = new TapBackfillOperationImpl("", 713, (OperationCallback) null);
      // Undeclared exception!
      try { 
        tapBackfillOperationImpl0.readFromBuffer(byteBuffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad magic value
         //
         verifyException("net.spy.memcached.tapmessage.TapMagic", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(8190);
      TapBackfillOperationImpl tapBackfillOperationImpl0 = new TapBackfillOperationImpl("YN", 8190, (OperationCallback) null);
      // Undeclared exception!
      try { 
        tapBackfillOperationImpl0.readFromBuffer(byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad magic value
         //
         verifyException("net.spy.memcached.tapmessage.TapMagic", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      TapBackfillOperationImpl tapBackfillOperationImpl0 = new TapBackfillOperationImpl("k/j4nl", 0, (OperationCallback) null);
      tapBackfillOperationImpl0.readFromBuffer(byteBuffer0);
      assertFalse(byteBuffer0.isDirect());
  }
}
