/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:24:28 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.OperationState;
import net.spy.memcached.protocol.binary.TapBackfillOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TapBackfillOperationImpl_ESTest extends TapBackfillOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 10);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 10);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, 29);
      TapBackfillOperationImpl tapBackfillOperationImpl0 = new TapBackfillOperationImpl("DV?7l Vk+(fCx>h!}*", (-1245L), multiReplicaGetOperationCallback0);
      OperationState operationState0 = OperationState.WRITE_QUEUED;
      tapBackfillOperationImpl0.streamClosed(operationState0);
      assertEquals(0, tapBackfillOperationImpl0.getCloneCount());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 10);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 10);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, 29);
      TapBackfillOperationImpl tapBackfillOperationImpl0 = new TapBackfillOperationImpl("DV?7l Vk+(fCx>h!}*", (-1245L), multiReplicaGetOperationCallback0);
      tapBackfillOperationImpl0.initialize();
      assertEquals(0L, tapBackfillOperationImpl0.getWriteCompleteTimestamp());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, (-2397));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, (-2397));
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, (-2397));
      TapBackfillOperationImpl tapBackfillOperationImpl0 = new TapBackfillOperationImpl((String) null, 1L, multiReplicaGetOperationCallback0);
      tapBackfillOperationImpl0.initialize();
      assertEquals("Cmd: tap dump Flags: backfill,ack", tapBackfillOperationImpl0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 10);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, 10);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, 29);
      TapBackfillOperationImpl tapBackfillOperationImpl0 = new TapBackfillOperationImpl("DV?7l Vk+(fCx>h!}*", (-1245L), multiReplicaGetOperationCallback0);
      String string0 = tapBackfillOperationImpl0.toString();
      assertEquals("Cmd: tap dump Flags: backfill,ack", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OperationState operationState0 = OperationState.COMPLETE;
      TapBackfillOperationImpl tapBackfillOperationImpl0 = new TapBackfillOperationImpl("(max wait=", (-5212L), (OperationCallback) null);
      // Undeclared exception!
      try { 
        tapBackfillOperationImpl0.streamClosed(operationState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.BaseOperationImpl", e);
      }
  }
}
