/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:51:51 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import net.spy.memcached.auth.PlainCallbackHandler;
import net.spy.memcached.config.NodeEndPoint;
import net.spy.memcached.ops.CASOperation;
import net.spy.memcached.ops.ConcatenationOperation;
import net.spy.memcached.ops.ConcatenationType;
import net.spy.memcached.ops.ConfigurationType;
import net.spy.memcached.ops.DeleteConfigOperation;
import net.spy.memcached.ops.DeleteOperation;
import net.spy.memcached.ops.FlushOperation;
import net.spy.memcached.ops.GetAndTouchOperation;
import net.spy.memcached.ops.GetConfigOperation;
import net.spy.memcached.ops.GetOperation;
import net.spy.memcached.ops.GetlOperation;
import net.spy.memcached.ops.GetsOperation;
import net.spy.memcached.ops.KeyedOperation;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.Mutator;
import net.spy.memcached.ops.MutatorOperation;
import net.spy.memcached.ops.NoopOperation;
import net.spy.memcached.ops.ObserveOperation;
import net.spy.memcached.ops.Operation;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.OperationState;
import net.spy.memcached.ops.ReplicaGetOperation;
import net.spy.memcached.ops.ReplicaGetsOperation;
import net.spy.memcached.ops.SASLMechsOperation;
import net.spy.memcached.ops.SASLStepOperation;
import net.spy.memcached.ops.SetConfigOperation;
import net.spy.memcached.ops.StatsOperation;
import net.spy.memcached.ops.StoreOperation;
import net.spy.memcached.ops.StoreType;
import net.spy.memcached.ops.TapOperation;
import net.spy.memcached.ops.TouchOperation;
import net.spy.memcached.ops.UnlockOperation;
import net.spy.memcached.ops.VersionOperation;
import net.spy.memcached.protocol.binary.BinaryOperationFactory;
import net.spy.memcached.protocol.binary.GetAndTouchOperationImpl;
import net.spy.memcached.protocol.binary.GetOperationImpl;
import net.spy.memcached.protocol.binary.SASLAuthOperationImpl;
import net.spy.memcached.protocol.binary.StoreOperationImpl;
import net.spy.memcached.tapmessage.RequestMessage;
import net.spy.memcached.tapmessage.TapOpcode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BinaryOperationFactory_ESTest extends BinaryOperationFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      TouchOperation touchOperation0 = binaryOperationFactory0.touch("Certificate refresh is not supported in binary mode", 228, (OperationCallback) null);
      assertEquals(228, touchOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(operationCallback0, 3070);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 48);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 3070);
      TouchOperation touchOperation0 = binaryOperationFactory0.touch("Certificate refresh is not supported in binary mode", (-1), multiReplicaGetOperationCallback0);
      assertEquals((-1), touchOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      StoreType storeType0 = StoreType.set;
      byte[] byteArray0 = new byte[4];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = (StoreOperationImpl)binaryOperationFactory0.store(storeType0, "Cn", (-147), 1748, byteArray0, storeOperation_Callback0);
      assertEquals(1748, storeOperationImpl0.getExpiration());
      assertEquals((-147), storeOperationImpl0.getFlags());
      assertEquals(0L, storeOperationImpl0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      StoreType storeType0 = StoreType.add;
      byte[] byteArray0 = new byte[8];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = (StoreOperationImpl)binaryOperationFactory0.store(storeType0, "7P<F^XUy{kP=~FpHn4", 0, 0, byteArray0, storeOperation_Callback0);
      assertEquals(0, storeOperationImpl0.getExpiration());
      assertEquals(0, storeOperationImpl0.getFlags());
      assertEquals(0L, storeOperationImpl0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      StoreType storeType0 = StoreType.replace;
      byte[] byteArray0 = new byte[8];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      StoreOperationImpl storeOperationImpl0 = (StoreOperationImpl)binaryOperationFactory0.store(storeType0, "", 0, (-78), byteArray0, storeOperation_Callback0);
      assertEquals((-78), storeOperationImpl0.getExpiration());
      assertEquals(0, storeOperationImpl0.getFlags());
      assertEquals(0L, storeOperationImpl0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 5);
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      byte[] byteArray0 = new byte[4];
      SetConfigOperation setConfigOperation0 = binaryOperationFactory0.setConfig(configurationType0, 0, byteArray0, multiReplicaGetOperationCallback0);
      assertEquals(0, setConfigOperation0.getFlags());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      byte[] byteArray0 = new byte[8];
      SetConfigOperation setConfigOperation0 = binaryOperationFactory0.setConfig(configurationType0, (-1911), byteArray0, (OperationCallback) null);
      assertEquals((-1911), setConfigOperation0.getFlags());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ReplicaGetsOperation.Callback replicaGetsOperation_Callback0 = mock(ReplicaGetsOperation.Callback.class, new ViolatedAssumptionAnswer());
      ReplicaGetsOperation replicaGetsOperation0 = binaryOperationFactory0.replicaGets("Caught CNFE decoding %d bytes of data", 0, replicaGetsOperation_Callback0);
      assertEquals(0, replicaGetsOperation0.getReplicaIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ReplicaGetsOperation replicaGetsOperation0 = binaryOperationFactory0.replicaGets("OMD(Jxn)urH$", 228, (ReplicaGetsOperation.Callback) null);
      assertEquals(228, replicaGetsOperation0.getReplicaIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, 668);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 668);
      ReplicaGetOperation replicaGetOperation0 = binaryOperationFactory0.replicaGet("net.spy.memcached.protocol.ascii.GetlOperationImpl", 1543, multiReplicaGetOperationCallback0);
      assertEquals(1543, replicaGetOperation0.getReplicaIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-2752));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 198);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 0);
      ReplicaGetOperation replicaGetOperation0 = binaryOperationFactory0.replicaGet("fubd", (-2752), multiReplicaGetOperationCallback0);
      assertEquals((-2752), replicaGetOperation0.getReplicaIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ObserveOperation.Callback observeOperation_Callback0 = mock(ObserveOperation.Callback.class, new ViolatedAssumptionAnswer());
      ObserveOperation observeOperation0 = binaryOperationFactory0.observe("l @&5q`%3vYeBU", 1L, 0, observeOperation_Callback0);
      assertEquals(1L, observeOperation0.getCasValue());
      assertEquals(0, observeOperation0.getIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ObserveOperation.Callback observeOperation_Callback0 = mock(ObserveOperation.Callback.class, new ViolatedAssumptionAnswer());
      ObserveOperation observeOperation0 = binaryOperationFactory0.observe("Could not send noop upon connect! This may indicate a running, but not responding memcached instance.", (-217L), (-674), observeOperation_Callback0);
      assertEquals((-217L), observeOperation0.getCasValue());
      assertEquals((-674), observeOperation0.getIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      Mutator mutator0 = Mutator.decr;
      MutatorOperation mutatorOperation0 = binaryOperationFactory0.mutate(mutator0, "7P<F^XUy{kP=~FpHn4", 0, 0L, 0, (OperationCallback) null);
      assertEquals(0, mutatorOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      Mutator mutator0 = Mutator.decr;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, (-841));
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, (-1));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 3932);
      MutatorOperation mutatorOperation0 = binaryOperationFactory0.mutate(mutator0, "glusT&", 2968L, 2968L, (-1), multiGetsOperationCallback0);
      assertEquals((-1), mutatorOperation0.getExpiration());
      assertEquals(2968L, mutatorOperation0.getBy());
      assertEquals(2968L, mutatorOperation0.getDefault());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, (-841));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, (-841));
      Mutator mutator0 = Mutator.incr;
      MutatorOperation mutatorOperation0 = binaryOperationFactory0.mutate(mutator0, "", (-841), (-658L), (-1576), multiGetsOperationCallback0);
      assertEquals((-658L), mutatorOperation0.getDefault());
      assertEquals((-841L), mutatorOperation0.getBy());
      assertEquals((-1576), mutatorOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      GetlOperation.Callback getlOperation_Callback0 = mock(GetlOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetlOperation getlOperation0 = binaryOperationFactory0.getl("TDc?y3UN#s:NyUue", 0, getlOperation_Callback0);
      assertEquals(0, getlOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      GetlOperation.Callback getlOperation_Callback0 = mock(GetlOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetlOperation getlOperation0 = binaryOperationFactory0.getl("", (-1020), getlOperation_Callback0);
      assertEquals((-1020), getlOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperation getAndTouchOperation0 = binaryOperationFactory0.getAndTouch("", 1, getAndTouchOperation_Callback0);
      assertEquals(1, getAndTouchOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperation getAndTouchOperation0 = binaryOperationFactory0.getAndTouch("l?%;i$b-d5zX=F<", (-30), getAndTouchOperation_Callback0);
      assertEquals((-30), getAndTouchOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      GetOperation getOperation0 = binaryOperationFactory0.get((Collection<String>) set0, (GetOperation.Callback) null);
      assertEquals(0, getOperation0.getCloneCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ConcatenationType concatenationType0 = ConcatenationType.append;
      ConcatenationOperation concatenationOperation0 = binaryOperationFactory0.cat(concatenationType0, 0L, "}q(x~]y", (byte[]) null, (OperationCallback) null);
      assertEquals(0L, concatenationOperation0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      byte[] byteArray0 = new byte[8];
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, 786);
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiReplicaGetOperationCallback0, (-1728));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiGetOperationCallback0, 0);
      ConcatenationOperation concatenationOperation0 = binaryOperationFactory0.cat(concatenationType0, (byte)25, "Caught CNFE decoding %d bytes of data", byteArray0, multiGetsOperationCallback0);
      assertEquals(25L, concatenationOperation0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      byte[] byteArray0 = new byte[0];
      StoreType storeType0 = StoreType.replace;
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      CASOperation cASOperation0 = binaryOperationFactory0.cas(storeType0, "true", 0, 0, (-3), byteArray0, storeOperation_Callback0);
      assertEquals(0, cASOperation0.getFlags());
      assertEquals((-3), cASOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      byte[] byteArray0 = new byte[2];
      StoreType storeType0 = StoreType.replace;
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      CASOperation cASOperation0 = binaryOperationFactory0.cas(storeType0, "RR*J')wC*Ft<G/.E;3", 3097, 68, 0, byteArray0, storeOperation_Callback0);
      assertEquals(3097L, cASOperation0.getCasValue());
      assertEquals(0, cASOperation0.getExpiration());
      assertEquals(68, cASOperation0.getFlags());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      StoreType storeType0 = StoreType.add;
      byte[] byteArray0 = new byte[1];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      CASOperation cASOperation0 = binaryOperationFactory0.cas(storeType0, "net.spy.memcached.protocol.ascii.StatsOperationImpl", (-4328L), 1, 1, byteArray0, storeOperation_Callback0);
      assertEquals(1, cASOperation0.getFlags());
      assertEquals(1, cASOperation0.getExpiration());
      assertEquals((-4328L), cASOperation0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      // Undeclared exception!
      try { 
        binaryOperationFactory0.cloneGet((KeyedOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.BinaryOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, (-1974));
      net.spy.memcached.protocol.ascii.ConcatenationOperationImpl concatenationOperationImpl0 = new net.spy.memcached.protocol.ascii.ConcatenationOperationImpl(concatenationType0, (String) null, (byte[]) null, multiReplicaGetOperationCallback0);
      // Undeclared exception!
      try { 
        binaryOperationFactory0.cloneGet(concatenationOperationImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.spy.memcached.protocol.ascii.ConcatenationOperationImpl cannot be cast to class net.spy.memcached.protocol.binary.ReplicaGetOperationImpl (net.spy.memcached.protocol.ascii.ConcatenationOperationImpl and net.spy.memcached.protocol.binary.ReplicaGetOperationImpl are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @74c94637)
         //
         verifyException("net.spy.memcached.protocol.binary.BinaryOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback((OperationCallback) null, 0);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, (-1));
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback(multiGetsOperationCallback0, (-1));
      GetOperationImpl getOperationImpl0 = new GetOperationImpl("TIMEDOUT", multiGetOperationCallback0);
      Collection<? extends Operation> collection0 = binaryOperationFactory0.cloneGet(getOperationImpl0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("b]\"EjR%s7a{#N6Y", (-1094), (GetAndTouchOperation.Callback) null);
      Collection<? extends Operation> collection0 = binaryOperationFactory0.cloneGet(getAndTouchOperationImpl0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ObserveOperation observeOperation0 = binaryOperationFactory0.observe(" v?`ht7r", 0L, 1, (ObserveOperation.Callback) null);
      assertEquals(1, observeOperation0.getIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperation statsOperation0 = binaryOperationFactory0.stats("RR*J')wC*Ft<G/.E;3", statsOperation_Callback0);
      assertFalse(statsOperation0.isTimedOut());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      TapOperation tapOperation0 = binaryOperationFactory0.tapBackfill(",1T\u0006", 4161L, (OperationCallback) null);
      assertEquals(OperationState.WRITE_QUEUED, tapOperation0.getState());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      StatsOperation statsOperation0 = binaryOperationFactory0.keyStats("", (StatsOperation.Callback) null);
      assertFalse(statsOperation0.isTimedOut());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      Mutator mutator0 = Mutator.decr;
      MutatorOperation mutatorOperation0 = binaryOperationFactory0.mutate(mutator0, (String) null, 0L, 0L, 659, (OperationCallback) null);
      assertEquals(659, mutatorOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      TouchOperation touchOperation0 = binaryOperationFactory0.touch("k`$fj8hcK Fz9", 0, (OperationCallback) null);
      assertEquals(0, touchOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 17);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 17);
      TapOpcode tapOpcode0 = TapOpcode.START_CHECKPOINT;
      TapOperation tapOperation0 = binaryOperationFactory0.tapAck(tapOpcode0, (byte)0, multiReplicaGetOperationCallback0);
      assertEquals(0L, tapOperation0.getWriteCompleteTimestamp());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 17);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetsOperationCallback0, 17);
      DeleteConfigOperation deleteConfigOperation0 = binaryOperationFactory0.deleteConfig(configurationType0, multiReplicaGetOperationCallback0);
      assertFalse(deleteConfigOperation0.isTimedOut());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      // Undeclared exception!
      try { 
        binaryOperationFactory0.get((Collection<String>) null, (GetOperation.Callback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ReplicaGetsOperation replicaGetsOperation0 = binaryOperationFactory0.replicaGets("", (-2197), (ReplicaGetsOperation.Callback) null);
      assertEquals((-2197), replicaGetsOperation0.getReplicaIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 17);
      ConcatenationType concatenationType0 = ConcatenationType.prepend;
      byte[] byteArray0 = new byte[2];
      ConcatenationOperation concatenationOperation0 = binaryOperationFactory0.cat(concatenationType0, (-2001L), "RR*J')wC*Ft<G/.E;3", byteArray0, multiGetsOperationCallback0);
      assertEquals((-2001L), concatenationOperation0.getCasValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      GetlOperation getlOperation0 = binaryOperationFactory0.getl("net.spy.memcached.protocol.binary.BinaryOperationFactory", 463, (GetlOperation.Callback) null);
      assertEquals(463, getlOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      // Undeclared exception!
      try { 
        binaryOperationFactory0.refreshCertificate((OperationCallback) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Certificate refresh is not supported in binary mode
         //
         verifyException("net.spy.memcached.protocol.binary.BinaryOperationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      StoreType storeType0 = StoreType.set;
      CASOperation cASOperation0 = binaryOperationFactory0.cas(storeType0, " doesn't match the key ", 0L, (-3776), (-3776), (byte[]) null, (StoreOperation.Callback) null);
      assertEquals((-3776), cASOperation0.getExpiration());
      assertEquals((-3776), cASOperation0.getFlags());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      SetConfigOperation setConfigOperation0 = binaryOperationFactory0.setConfig(configurationType0, 3288, (byte[]) null, (OperationCallback) null);
      assertEquals(3288, setConfigOperation0.getFlags());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[0];
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("", "");
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, 122);
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(multiGetOperationCallback0, 122);
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, 122);
      SASLStepOperation sASLStepOperation0 = binaryOperationFactory0.saslStep(stringArray0, byteArray0, "", (Map<String, ?>) null, plainCallbackHandler0, multiGetsOperationCallback0);
      assertFalse(sASLStepOperation0.hasErrored());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      DeleteOperation deleteOperation0 = binaryOperationFactory0.delete("", 0L, (DeleteOperation.Callback) null);
      assertFalse(deleteOperation0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      VersionOperation versionOperation0 = binaryOperationFactory0.version((OperationCallback) null);
      assertFalse(versionOperation0.hasErrored());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      RequestMessage requestMessage0 = new RequestMessage();
      TapOperation tapOperation0 = binaryOperationFactory0.tapCustom("n6G^m", requestMessage0, (OperationCallback) null);
      assertFalse(tapOperation0.isTimedOutUnsent());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      DeleteOperation deleteOperation0 = binaryOperationFactory0.delete("3D~NhL^'5\"LrV-", (DeleteOperation.Callback) null);
      assertEquals(0, deleteOperation0.getCloneCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      GetAndTouchOperation getAndTouchOperation0 = binaryOperationFactory0.getAndTouch((String) null, 0, (GetAndTouchOperation.Callback) null);
      assertEquals(0, getAndTouchOperation0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      NoopOperation noopOperation0 = binaryOperationFactory0.noop((OperationCallback) null);
      assertFalse(noopOperation0.hasErrored());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      GetConfigOperation getConfigOperation0 = binaryOperationFactory0.getConfig(configurationType0, (GetConfigOperation.Callback) null);
      assertFalse(getConfigOperation0.hasErrored());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      GetsOperation getsOperation0 = binaryOperationFactory0.gets("]\"qgyD7=%e", (GetsOperation.Callback) null);
      assertEquals(0, getsOperation0.getCloneCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      StoreType storeType0 = StoreType.add;
      StoreOperationImpl storeOperationImpl0 = (StoreOperationImpl)binaryOperationFactory0.store(storeType0, "net.spy.memcached.protocol.ascii.BaseGetOpImpl", 1116, 1116, (byte[]) null, (StoreOperation.Callback) null);
      assertEquals(1116, storeOperationImpl0.getFlags());
      assertEquals(0L, storeOperationImpl0.getCasValue());
      assertEquals(1116, storeOperationImpl0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      UnlockOperation unlockOperation0 = binaryOperationFactory0.unlock("#o\"^^}]$6k", 2486L, (OperationCallback) null);
      assertFalse(unlockOperation0.isTimedOut());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      String[] stringArray0 = new String[0];
      HashMap<String, NodeEndPoint> hashMap0 = new HashMap<String, NodeEndPoint>();
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("", "No buffer for current write op, removing");
      SASLAuthOperationImpl sASLAuthOperationImpl0 = (SASLAuthOperationImpl)binaryOperationFactory0.saslAuth(stringArray0, "8Q", hashMap0, plainCallbackHandler0, (OperationCallback) null);
      assertEquals("SASL auth operation", sASLAuthOperationImpl0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      GetOperation getOperation0 = binaryOperationFactory0.get("=~?[", (GetOperation.Callback) null);
      assertEquals(0, getOperation0.getCloneCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      TapOperation tapOperation0 = binaryOperationFactory0.tapDump("'fm2Tx=wmnT!kkmyp", (OperationCallback) null);
      assertEquals(OperationState.WRITE_QUEUED, tapOperation0.getState());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ReplicaGetOperation replicaGetOperation0 = binaryOperationFactory0.replicaGet((String) null, 0, (ReplicaGetOperation.Callback) null);
      assertEquals(0, replicaGetOperation0.getReplicaIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      FlushOperation flushOperation0 = binaryOperationFactory0.flush(6, (OperationCallback) null);
      assertFalse(flushOperation0.isTimedOut());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      SASLMechsOperation sASLMechsOperation0 = binaryOperationFactory0.saslMechs((OperationCallback) null);
      assertFalse(sASLMechsOperation0.hasErrored());
  }
}
