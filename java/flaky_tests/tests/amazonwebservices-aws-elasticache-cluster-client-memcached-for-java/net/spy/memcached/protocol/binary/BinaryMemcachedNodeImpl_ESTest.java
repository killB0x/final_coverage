/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:09:13 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.SocketChannel;
import java.time.ZoneId;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import net.spy.memcached.BinaryConnectionFactory;
import net.spy.memcached.ConnectionFactory;
import net.spy.memcached.KetamaConnectionFactory;
import net.spy.memcached.ops.CASOperation;
import net.spy.memcached.ops.GetOperation;
import net.spy.memcached.ops.Operation;
import net.spy.memcached.ops.StoreOperation;
import net.spy.memcached.ops.StoreType;
import net.spy.memcached.protocol.ProxyCallback;
import net.spy.memcached.protocol.ascii.AsciiOperationFactory;
import net.spy.memcached.protocol.binary.BinaryMemcachedNodeImpl;
import net.spy.memcached.protocol.binary.BinaryOperationFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BinaryMemcachedNodeImpl_ESTest extends BinaryMemcachedNodeImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("v(tT5tZJ4{ceq3~,s!b", 15);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      Long long0 = new Long(0L);
      KetamaConnectionFactory ketamaConnectionFactory0 = new KetamaConnectionFactory();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 15, linkedTransferQueue0, (BlockingQueue<Operation>) null, (BlockingQueue<Operation>) null, long0, false, 2831L, 0L, ketamaConnectionFactory0);
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.BinaryMemcachedNodeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(7);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      GetOperation getOperation0 = binaryOperationFactory0.get((Collection<String>) set0, (GetOperation.Callback) null);
      Long long0 = new Long(7);
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      GetOperation getOperation1 = asciiOperationFactory0.get("net.spy.memcached.protocol.binary.BinaryMemcachedNodeImpl", (GetOperation.Callback) null);
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 7, linkedTransferQueue0, linkedTransferQueue0, linkedTransferQueue0, long0, true, 7, (-3681L), (ConnectionFactory) null);
      linkedTransferQueue0.add(getOperation0);
      binaryMemcachedNodeImpl0.insertOp(getOperation1);
      // Undeclared exception!
      try { 
        binaryMemcachedNodeImpl0.optimize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.spy.memcached.protocol.ascii.GetOperationImpl cannot be cast to class net.spy.memcached.ops.VBucketAware (net.spy.memcached.protocol.ascii.GetOperationImpl and net.spy.memcached.ops.VBucketAware are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @68bf0a30)
         //
         verifyException("net.spy.memcached.protocol.binary.OptimizedGetImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(15);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      Long long0 = new Long((-2301L));
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      ProxyCallback proxyCallback0 = new ProxyCallback();
      GetOperation getOperation0 = binaryOperationFactory0.get((Collection<String>) priorityBlockingQueue0, (GetOperation.Callback) proxyCallback0);
      LinkedTransferQueue<Operation> linkedTransferQueue1 = new LinkedTransferQueue<Operation>();
      linkedTransferQueue1.add(getOperation0);
      proxyCallback0.addCallbacks(getOperation0);
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = null;
      try {
        binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 15, linkedTransferQueue0, linkedTransferQueue1, linkedTransferQueue0, long0, true, 0L, 0L, (ConnectionFactory) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("v(tT5tZJ4{ceq3~,s!b", 15);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = null;
      try {
        binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 1610, linkedTransferQueue0, linkedTransferQueue0, (BlockingQueue<Operation>) null, (Long) null, false, 1610, 1374L, (ConnectionFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.BinaryMemcachedNodeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      Long long0 = new Long(0);
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = null;
      try {
        binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, (-108), linkedTransferQueue0, linkedTransferQueue0, (BlockingQueue<Operation>) null, long0, false, 0L, (-2242L), (ConnectionFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-108 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      StoreType storeType0 = StoreType.add;
      byte[] byteArray0 = new byte[0];
      StoreOperation.Callback storeOperation_Callback0 = mock(StoreOperation.Callback.class, new ViolatedAssumptionAnswer());
      CASOperation cASOperation0 = binaryOperationFactory0.cas(storeType0, "f", 2, (byte)0, 2, byteArray0, storeOperation_Callback0);
      linkedTransferQueue0.add(cASOperation0);
      LinkedTransferQueue<Operation> linkedTransferQueue1 = new LinkedTransferQueue<Operation>();
      Long long0 = new Long((byte)0);
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 2, linkedTransferQueue0, linkedTransferQueue1, linkedTransferQueue1, long0, true, 15L, (byte)0, (ConnectionFactory) null);
      linkedTransferQueue1.add(cASOperation0);
      binaryMemcachedNodeImpl0.insertOp(cASOperation0);
      binaryMemcachedNodeImpl0.optimize();
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(7);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      StoreType storeType0 = StoreType.add;
      byte[] byteArray0 = new byte[1];
      CASOperation cASOperation0 = binaryOperationFactory0.cas(storeType0, "", 0L, 3559, 15, byteArray0, (StoreOperation.Callback) null);
      linkedTransferQueue0.add(cASOperation0);
      Long long0 = new Long(15L);
      linkedTransferQueue0.add(cASOperation0);
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 2097122, linkedTransferQueue0, linkedTransferQueue0, linkedTransferQueue0, long0, false, (-1155L), (byte)6, (ConnectionFactory) null);
      binaryMemcachedNodeImpl0.optimize();
      assertFalse(binaryMemcachedNodeImpl0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(4);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ProxyCallback proxyCallback0 = new ProxyCallback();
      GetOperation getOperation0 = binaryOperationFactory0.get((Collection<String>) set0, (GetOperation.Callback) proxyCallback0);
      getOperation0.cancel();
      linkedTransferQueue0.add(getOperation0);
      linkedTransferQueue0.add(getOperation0);
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 4, linkedTransferQueue0, linkedTransferQueue0, linkedTransferQueue0, (Long) 2500L, false, 1000L, 16384, binaryConnectionFactory0);
      binaryMemcachedNodeImpl0.optimize();
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      Long long0 = new Long(0);
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) priorityBlockingQueue0);
      ProxyCallback proxyCallback0 = new ProxyCallback();
      GetOperation getOperation0 = binaryOperationFactory0.get((Collection<String>) list0, (GetOperation.Callback) proxyCallback0);
      linkedTransferQueue0.add(getOperation0);
      linkedTransferQueue0.add(getOperation0);
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 0, linkedTransferQueue0, linkedTransferQueue0, linkedTransferQueue0, long0, false, 0, 0, (ConnectionFactory) null);
      binaryMemcachedNodeImpl0.optimize();
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      StoreType storeType0 = StoreType.set;
      byte[] byteArray0 = new byte[1];
      CASOperation cASOperation0 = binaryOperationFactory0.cas(storeType0, "", (-1507L), (-1201), (-1883), byteArray0, (StoreOperation.Callback) null);
      linkedTransferQueue0.add(cASOperation0);
      Long long0 = new Long((byte) (-11));
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 0, linkedTransferQueue0, linkedTransferQueue0, linkedTransferQueue0, long0, false, 0L, 0, (ConnectionFactory) null);
      binaryMemcachedNodeImpl0.optimize();
      assertFalse(binaryMemcachedNodeImpl0.isActive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      Long long0 = new Long(0);
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) priorityBlockingQueue0);
      ProxyCallback proxyCallback0 = new ProxyCallback();
      GetOperation getOperation0 = binaryOperationFactory0.get((Collection<String>) list0, (GetOperation.Callback) proxyCallback0);
      linkedTransferQueue0.add(getOperation0);
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 0, linkedTransferQueue0, linkedTransferQueue0, linkedTransferQueue0, long0, false, 0, 0, (ConnectionFactory) null);
      binaryMemcachedNodeImpl0.optimize();
      assertEquals(0, binaryMemcachedNodeImpl0.getBytesRemainingToWrite());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      SocketChannel socketChannel0 = SocketChannel.open();
      LinkedTransferQueue<Operation> linkedTransferQueue0 = new LinkedTransferQueue<Operation>();
      Long long0 = new Long((byte) (-11));
      BinaryMemcachedNodeImpl binaryMemcachedNodeImpl0 = new BinaryMemcachedNodeImpl(mockInetSocketAddress0, socketChannel0, 0, linkedTransferQueue0, linkedTransferQueue0, linkedTransferQueue0, long0, false, 0L, 0, (ConnectionFactory) null);
      binaryMemcachedNodeImpl0.optimize();
      assertEquals(0, binaryMemcachedNodeImpl0.getContinuousTimeout());
  }
}
