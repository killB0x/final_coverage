/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:59:55 GMT 2022
 */

package net.spy.memcached.protocol.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.ops.GetAndTouchOperation;
import net.spy.memcached.protocol.binary.GetAndTouchOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GetAndTouchOperationImpl_ESTest extends GetAndTouchOperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("", 29, getAndTouchOperation_Callback0);
      String string0 = getAndTouchOperationImpl0.toString();
      assertEquals("Cmd: 29 Opaque: 448 Key:  Exp: 29", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("", 0, getAndTouchOperation_Callback0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)29;
      getAndTouchOperationImpl0.finishedPayload(byteArray0);
      assertEquals(0, getAndTouchOperationImpl0.getExpiration());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)29, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("", 29, getAndTouchOperation_Callback0);
      byte[] byteArray0 = new byte[9];
      getAndTouchOperationImpl0.decodePayload(byteArray0);
      assertEquals(29, getAndTouchOperationImpl0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("Q5r6#kyZ ", 29, getAndTouchOperation_Callback0);
      getAndTouchOperationImpl0.initialize();
      assertEquals(29, getAndTouchOperationImpl0.getExpiration());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("", 0, getAndTouchOperation_Callback0);
      int int0 = getAndTouchOperationImpl0.getExpiration();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("~I@l", (-1820), getAndTouchOperation_Callback0);
      int int0 = getAndTouchOperationImpl0.getExpiration();
      assertEquals((-1820), int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("mhMTZAC.{3", 0, (GetAndTouchOperation.Callback) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        getAndTouchOperationImpl0.decodePayload(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      GetAndTouchOperation.Callback getAndTouchOperation_Callback0 = mock(GetAndTouchOperation.Callback.class, new ViolatedAssumptionAnswer());
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("", 931, getAndTouchOperation_Callback0);
      int int0 = getAndTouchOperationImpl0.getExpiration();
      assertEquals(931, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl("vfO*:|PWK}?", 682, (GetAndTouchOperation.Callback) null);
      // Undeclared exception!
      try { 
        getAndTouchOperationImpl0.decodePayload((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.binary.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      GetAndTouchOperationImpl getAndTouchOperationImpl0 = new GetAndTouchOperationImpl((String) null, 0, (GetAndTouchOperation.Callback) null);
      // Undeclared exception!
      try { 
        getAndTouchOperationImpl0.initialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.KeyUtil", e);
      }
  }
}
