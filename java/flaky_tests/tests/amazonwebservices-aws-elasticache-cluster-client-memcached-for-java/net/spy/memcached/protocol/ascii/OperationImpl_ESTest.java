/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 12:47:17 GMT 2022
 */

package net.spy.memcached.protocol.ascii;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import net.spy.memcached.ops.ConfigurationType;
import net.spy.memcached.ops.MultiGetOperationCallback;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.MultiReplicaGetOperationCallback;
import net.spy.memcached.ops.Mutator;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.OperationErrorType;
import net.spy.memcached.ops.OperationState;
import net.spy.memcached.ops.OperationStatus;
import net.spy.memcached.ops.StatsOperation;
import net.spy.memcached.ops.StatusCode;
import net.spy.memcached.protocol.ascii.DeleteConfigOperationImpl;
import net.spy.memcached.protocol.ascii.FlushOperationImpl;
import net.spy.memcached.protocol.ascii.MutatorOperationImpl;
import net.spy.memcached.protocol.ascii.OperationReadType;
import net.spy.memcached.protocol.ascii.RefreshCertOperationImpl;
import net.spy.memcached.protocol.ascii.SetConfigOperationImpl;
import net.spy.memcached.protocol.ascii.StatsOperationImpl;
import net.spy.memcached.protocol.ascii.TouchOperationImpl;
import net.spy.memcached.protocol.ascii.UnlockOperationImpl;
import net.spy.memcached.protocol.ascii.VersionOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OperationImpl_ESTest extends OperationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, (-1153));
      FlushOperationImpl flushOperationImpl0 = new FlushOperationImpl((-1153), multiGetsOperationCallback0);
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      TouchOperationImpl touchOperationImpl0 = new TouchOperationImpl("FlK5aSsx&4a", (-38604602), multiGetsOperationCallback0);
      SetConfigOperationImpl setConfigOperationImpl0 = new SetConfigOperationImpl(configurationType0, (-38604602), (byte[]) null, multiGetsOperationCallback0);
      OperationStatus[] operationStatusArray0 = new OperationStatus[6];
      operationStatusArray0[0] = touchOperationImpl0.TIMED_OUT;
      StatusCode statusCode0 = StatusCode.CANCELLED;
      OperationStatus operationStatus0 = new OperationStatus(true, "Interrupted while waiting to add ", statusCode0);
      operationStatusArray0[1] = operationStatus0;
      operationStatusArray0[2] = setConfigOperationImpl0.CANCELLED;
      operationStatusArray0[3] = touchOperationImpl0.TIMED_OUT;
      operationStatusArray0[4] = flushOperationImpl0.CANCELLED;
      operationStatusArray0[5] = flushOperationImpl0.TIMED_OUT;
      OperationStatus operationStatus1 = setConfigOperationImpl0.matchStatus("Interrupted while waiting to add ", operationStatusArray0);
      assertTrue(operationStatus1.isSuccess());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiReplicaGetOperationCallback multiReplicaGetOperationCallback0 = new MultiReplicaGetOperationCallback(operationCallback0, (-168));
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(multiReplicaGetOperationCallback0, (-168));
      UnlockOperationImpl unlockOperationImpl0 = new UnlockOperationImpl("cx^@Zt6/@:ucw.L<F", 30L, multiGetsOperationCallback0);
      OperationStatus[] operationStatusArray0 = new OperationStatus[3];
      operationStatusArray0[0] = unlockOperationImpl0.CANCELLED;
      operationStatusArray0[1] = unlockOperationImpl0.CANCELLED;
      operationStatusArray0[2] = unlockOperationImpl0.CANCELLED;
      OperationStatus operationStatus0 = unlockOperationImpl0.matchStatus("cancelled", operationStatusArray0);
      assertEquals(StatusCode.CANCELLED, operationStatus0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl((OperationCallback) null);
      versionOperationImpl0.classifyError("T$Ny58lL.tW $'8JC");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConfigurationType configurationType0 = ConfigurationType.CLUSTER;
      DeleteConfigOperationImpl deleteConfigOperationImpl0 = new DeleteConfigOperationImpl(configurationType0, (OperationCallback) null);
      deleteConfigOperationImpl0.initialize();
      ByteBuffer byteBuffer0 = deleteConfigOperationImpl0.getBuffer();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) deleteConfigOperationImpl0;
      // Undeclared exception!
      try { 
        deleteConfigOperationImpl0.setArguments(byteBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(22);
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl((OperationCallback) null);
      // Undeclared exception!
      try { 
        versionOperationImpl0.setArguments(byteBuffer0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.ascii.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RefreshCertOperationImpl refreshCertOperationImpl0 = new RefreshCertOperationImpl((OperationCallback) null);
      refreshCertOperationImpl0.initialize();
      ByteBuffer byteBuffer0 = refreshCertOperationImpl0.getBuffer();
      byteBuffer0.getDouble();
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl((OperationCallback) null);
      // Undeclared exception!
      try { 
        versionOperationImpl0.readFromBuffer(byteBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl((OperationCallback) null);
      // Undeclared exception!
      try { 
        versionOperationImpl0.matchStatus("$^$`dlkg[qjs(r", (OperationStatus[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.ascii.OperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl((OperationCallback) null);
      // Undeclared exception!
      try { 
        versionOperationImpl0.handleLine(" Key: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("9", (StatsOperation.Callback) null);
      // Undeclared exception!
      try { 
        statsOperationImpl0.handleLine("9");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.spy.memcached.protocol.ascii.StatsOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FlushOperationImpl flushOperationImpl0 = new FlushOperationImpl(31, (OperationCallback) null);
      // Undeclared exception!
      try { 
        flushOperationImpl0.classifyError((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RefreshCertOperationImpl refreshCertOperationImpl0 = new RefreshCertOperationImpl((OperationCallback) null);
      // Undeclared exception!
      try { 
        refreshCertOperationImpl0.handleLine("qIL~9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.ascii.RefreshCertOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      FlushOperationImpl flushOperationImpl0 = new FlushOperationImpl((-104217000), operationCallback0);
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)13;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        flushOperationImpl0.readFromBuffer(byteBuffer0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // got a \\r without a \\n
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RefreshCertOperationImpl refreshCertOperationImpl0 = new RefreshCertOperationImpl((OperationCallback) null);
      refreshCertOperationImpl0.initialize();
      ByteBuffer byteBuffer0 = refreshCertOperationImpl0.getBuffer();
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl((OperationCallback) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) versionOperationImpl0;
      versionOperationImpl0.setArguments(byteBuffer0, objectArray0);
      // Undeclared exception!
      try { 
        versionOperationImpl0.readFromBuffer(byteBuffer0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // got a \\n without a \\r
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(32);
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl((OperationCallback) null);
      OperationReadType operationReadType0 = OperationReadType.DATA;
      versionOperationImpl0.setReadType(operationReadType0);
      // Undeclared exception!
      versionOperationImpl0.readFromBuffer(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2048);
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl((OperationCallback) null);
      versionOperationImpl0.readFromBuffer(byteBuffer0);
      assertEquals(0, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=2048 lim=2048 cap=2048]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiGetOperationCallback multiGetOperationCallback0 = new MultiGetOperationCallback((OperationCallback) null, (-1688));
      RefreshCertOperationImpl refreshCertOperationImpl0 = new RefreshCertOperationImpl(multiGetOperationCallback0);
      refreshCertOperationImpl0.initialize();
      ByteBuffer byteBuffer0 = refreshCertOperationImpl0.getBuffer();
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl(multiGetOperationCallback0);
      versionOperationImpl0.readFromBuffer(byteBuffer0);
      assertEquals(OperationState.COMPLETE, versionOperationImpl0.getState());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, (-1153));
      FlushOperationImpl flushOperationImpl0 = new FlushOperationImpl((-1153), multiGetsOperationCallback0);
      OperationErrorType operationErrorType0 = flushOperationImpl0.classifyError("SERVER_ERROR");
      assertEquals(OperationErrorType.SERVER, operationErrorType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Mutator mutator0 = Mutator.decr;
      MutatorOperationImpl mutatorOperationImpl0 = new MutatorOperationImpl(mutator0, "CLIENT_ERROR", 2601L, (OperationCallback) null);
      mutatorOperationImpl0.initialize();
      ByteBuffer byteBuffer0 = mutatorOperationImpl0.getBuffer();
      byteBuffer0.getFloat();
      byteBuffer0.get();
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl((OperationCallback) null);
      // Undeclared exception!
      try { 
        versionOperationImpl0.readFromBuffer(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.protocol.BaseOperationImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OperationCallback operationCallback0 = mock(OperationCallback.class, new ViolatedAssumptionAnswer());
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback(operationCallback0, (-1153));
      FlushOperationImpl flushOperationImpl0 = new FlushOperationImpl((-1153), multiGetsOperationCallback0);
      OperationErrorType operationErrorType0 = flushOperationImpl0.classifyError("ERRORSERVEt_EOROR");
      assertEquals(OperationErrorType.GENERAL, operationErrorType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RefreshCertOperationImpl refreshCertOperationImpl0 = new RefreshCertOperationImpl((OperationCallback) null);
      refreshCertOperationImpl0.getReadType();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VersionOperationImpl versionOperationImpl0 = new VersionOperationImpl((OperationCallback) null);
      byte[] byteArray0 = versionOperationImpl0.getErrorMsg();
      assertNull(byteArray0);
  }
}
