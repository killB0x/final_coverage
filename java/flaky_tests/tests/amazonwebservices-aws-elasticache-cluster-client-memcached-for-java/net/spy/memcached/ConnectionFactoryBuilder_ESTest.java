/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:25:11 GMT 2022
 */

package net.spy.memcached;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import javax.net.ssl.SSLContext;
import net.spy.memcached.BinaryConnectionFactory;
import net.spy.memcached.ClientMode;
import net.spy.memcached.ConnectionFactory;
import net.spy.memcached.ConnectionFactoryBuilder;
import net.spy.memcached.ConnectionObserver;
import net.spy.memcached.DefaultHashAlgorithm;
import net.spy.memcached.auth.AuthDescriptor;
import net.spy.memcached.auth.PlainCallbackHandler;
import net.spy.memcached.metrics.MetricType;
import net.spy.memcached.metrics.NoopMetricCollector;
import net.spy.memcached.ops.LinkedOperationQueueFactory;
import net.spy.memcached.protocol.binary.BinaryOperationFactory;
import net.spy.memcached.transcoders.WhalinTranscoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConnectionFactoryBuilder_ESTest extends ConnectionFactoryBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setSkipTlsHostnameVerification(true);
      ConnectionFactoryBuilder connectionFactoryBuilder2 = connectionFactoryBuilder1.setTimeoutExceptionThreshold(16384);
      assertSame(connectionFactoryBuilder2, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(536, 536);
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setUseNagleAlgorithm(true);
      ConnectionFactoryBuilder connectionFactoryBuilder2 = connectionFactoryBuilder0.setTimeoutExceptionThreshold(16384);
      assertSame(connectionFactoryBuilder2, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(536, 536);
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setDaemon(true);
      ConnectionFactoryBuilder connectionFactoryBuilder2 = connectionFactoryBuilder0.setTimeoutExceptionThreshold(16384);
      assertSame(connectionFactoryBuilder2, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      connectionFactoryBuilder0.setShouldOptimize(true);
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setTimeoutExceptionThreshold(16384);
      assertSame(connectionFactoryBuilder1, connectionFactoryBuilder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(536, 536);
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setKeepAlive(true);
      ConnectionFactoryBuilder connectionFactoryBuilder2 = connectionFactoryBuilder0.setTimeoutExceptionThreshold(16384);
      assertSame(connectionFactoryBuilder2, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0);
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      // Undeclared exception!
      try { 
        connectionFactoryBuilder0.setMaxReconnectDelay(0L);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Reconnect delay must be a positive number
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      connectionFactoryBuilder0.setSkipTlsHostnameVerification(true);
      // Undeclared exception!
      try { 
        connectionFactoryBuilder0.setMaxReconnectDelay((-401L));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Reconnect delay must be a positive number
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      connectionFactoryBuilder0.useNagle = true;
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setMaxReconnectDelay(3);
      assertSame(connectionFactoryBuilder1, connectionFactoryBuilder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      connectionFactoryBuilder0.setKeepAlive(true);
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setMaxReconnectDelay(2500L);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      ConnectionFactoryBuilder.Locator connectionFactoryBuilder_Locator0 = ConnectionFactoryBuilder.Locator.CONSISTENT;
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setLocatorType(connectionFactoryBuilder_Locator0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setShouldOptimize(true);
      // Undeclared exception!
      try { 
        connectionFactoryBuilder1.setMaxReconnectDelay((-2524L));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Reconnect delay must be a positive number
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      connectionFactoryBuilder0.setDaemon(true);
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setMaxReconnectDelay(1000L);
      assertSame(connectionFactoryBuilder1, connectionFactoryBuilder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setOpFact(binaryOperationFactory0);
      assertSame(connectionFactoryBuilder1, connectionFactoryBuilder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      // Undeclared exception!
      try { 
        connectionFactoryBuilder0.setProtocol((ConnectionFactoryBuilder.Protocol) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.ConnectionFactoryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = null;
      try {
        connectionFactoryBuilder0 = new ConnectionFactoryBuilder((ConnectionFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.ConnectionFactoryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.FNV1_32_HASH;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(2048, 254, defaultHashAlgorithm0);
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setOpTimeout(2500L);
      assertSame(connectionFactoryBuilder1, connectionFactoryBuilder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(16384, threadPoolExecutor_CallerRunsPolicy0);
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setListenerExecutorService(scheduledThreadPoolExecutor0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.FNV1_32_HASH;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(2048, 254, defaultHashAlgorithm0);
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setHashAlg(defaultHashAlgorithm0);
      assertSame(connectionFactoryBuilder1, connectionFactoryBuilder0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setHostnameForTlsVerification("Utz'>Byl;Yn%4");
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      LinkedBlockingDeque<ConnectionObserver> linkedBlockingDeque0 = new LinkedBlockingDeque<ConnectionObserver>();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setInitialObservers(linkedBlockingDeque0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      String[] stringArray0 = new String[4];
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("{_PQ^=M/q$}EX!9-{K", "");
      AuthDescriptor authDescriptor0 = new AuthDescriptor(stringArray0, plainCallbackHandler0);
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setAuthDescriptor(authDescriptor0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setAuthWaitTime(0L);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      SSLContext sSLContext0 = SSLContext.getDefault();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setSSLContext(sSLContext0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      MetricType metricType0 = MetricType.DEBUG;
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setEnableMetrics(metricType0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.FNV1_32_HASH;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(2048, 254, defaultHashAlgorithm0);
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setFailureMode(binaryConnectionFactory0.DEFAULT_FAILURE_MODE);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setReadBufferSize(1483);
      assertSame(connectionFactoryBuilder1, connectionFactoryBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      ClientMode clientMode0 = ClientMode.Dynamic;
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setClientMode(clientMode0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setOpQueueMaxBlockTime(0L);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      WhalinTranscoder whalinTranscoder0 = new WhalinTranscoder();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setTranscoder(whalinTranscoder0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      // Undeclared exception!
      try { 
        connectionFactoryBuilder0.setTimeoutExceptionThreshold((-1358));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Minimum timeout exception threshold is 2
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(536, 536);
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      ConnectionFactoryBuilder.Protocol connectionFactoryBuilder_Protocol0 = ConnectionFactoryBuilder.Protocol.BINARY;
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setProtocol(connectionFactoryBuilder_Protocol0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      ConnectionFactoryBuilder.Protocol connectionFactoryBuilder_Protocol0 = ConnectionFactoryBuilder.Protocol.TEXT;
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setProtocol(connectionFactoryBuilder_Protocol0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      LinkedOperationQueueFactory linkedOperationQueueFactory0 = new LinkedOperationQueueFactory();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setWriteOpQueueFactory(linkedOperationQueueFactory0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      NoopMetricCollector noopMetricCollector0 = new NoopMetricCollector();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setMetricCollector(noopMetricCollector0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      LinkedOperationQueueFactory linkedOperationQueueFactory0 = new LinkedOperationQueueFactory();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setReadOpQueueFactory(linkedOperationQueueFactory0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder(binaryConnectionFactory0);
      LinkedOperationQueueFactory linkedOperationQueueFactory0 = new LinkedOperationQueueFactory();
      ConnectionFactoryBuilder connectionFactoryBuilder1 = connectionFactoryBuilder0.setOpQueueFactory(linkedOperationQueueFactory0);
      assertSame(connectionFactoryBuilder0, connectionFactoryBuilder1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConnectionFactoryBuilder connectionFactoryBuilder0 = new ConnectionFactoryBuilder();
      ConnectionFactory connectionFactory0 = connectionFactoryBuilder0.build();
      assertNotNull(connectionFactory0);
  }
}
